quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:16115,depend,dependabot-security-updates,16115,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot-security-updates']
Integrability,"python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1138, in cythonize_one; raise CompileError(None, pyx_file); Cython.Compiler.Errors.CompileError: qutip/cy/sparse_utils.pyx; ```. Tested with:; * Cython 0.26; * numpy 1.13.1; * gcc 4.9.1. Any recommendation on how to fix this? . Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:3641,Depend,Dependencies,3641,https://qutip.org,https://github.com/qutip/qutip/issues/723,2,['Depend'],['Dependencies']
Integrability,"que/lib/python3.5/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar); 319 types.BuiltinFunctionType, partial)):; 320 res = _sesolve_func_td(H, rho0, tlist,; --> 321 e_ops, args, options, progress_bar); 322 else:; 323 res = _sesolve_const(H, rho0, tlist,. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/sesolve.py in _sesolve_func_td(H_func, psi0, tlist, e_ops, args, opt, progress_bar); 565 #; 566 return _generic_ode_solve(r, psi0, tlist, e_ops, opt, progress_bar, norm,; --> 567 dims=psi0.dims); 568 ; 569 . /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/sesolve.py in _generic_ode_solve(r, psi0, tlist, e_ops, opt, progress_bar, state_norm_func, dims); 656 ; 657 if t_idx < n_tsteps - 1:; --> 658 r.integrate(r.t + dt[t_idx]); 659 ; 660 progress_bar.finished(). /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/scipy/integrate/_ode.py in integrate(self, t, step, relax); 406 self._y, self.t = mth(self.f, self.jac or (lambda: None),; 407 self._y, self.t, t,; --> 408 self.f_params, self.jac_params); 409 except SystemError:; 410 # f2py issue with tuple returns, see ticket 1187. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/scipy/integrate/_ode.py in run(self, f, jac, y0, t0, t1, f_params, jac_params); 863 args = ((f, jac, y0, t0, t1) + tuple(self.call_args) +; 864 (f_params, jac_params)); --> 865 y1, t, istate = self.runner(*args); 866 if istate < 0:; 867 warnings.warn(self.__class__.__name__ + ': ' +. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/cy/spmatfuncs.pyx in qutip.cy.spmatfuncs.cy_ode_psi_func_td (qutip/cy/spmatfuncs.c:4445)(). /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/cy/spmatfuncs.pyx in qutip.cy.spmatfuncs.cy_ode_psi_func_td (qutip/cy/spmatfuncs.c:4289)(). TypeError: Cannot convert csr_matrix to numpy.ndarray; ```. Is it expected",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/505:1822,integrat,integrate,1822,https://qutip.org,https://github.com/qutip/qutip/issues/505,1,['integrat'],['integrate']
Integrability,qutip import now fail with the following error message. ```; /usr/local/lib/python3.3/dist-packages/qutip/cyQ/__init__.py in <module>(); 1 from qutip.cyQ.spmatfuncs import *; ----> 2 from qutip.cyQ.blas_funcs import *. ImportError: /usr/local/lib/python3.3/dist-packages/qutip/cyQ/blas_funcs.cpython-33m.so: undefined symbol: dznrm2_; ```,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39:47,message,message,47,https://qutip.org,https://github.com/qutip/qutip/issues/39,1,['message'],['message']
Integrability,"qutip.testing.run() returns ""Ran 0 tests in 0.000s \ OK"" after installing QuTip 2.2.0 with f90 solver on OSX 10.8. This was reproducible on two macs. Before installing with fortran solver the QuTip installation and testing function normally. After installation with fortran solver the testing returns the above message. The installation seems to be fine though: mcsolve_f90 ran successfully in my simulation, and QuTip examples appear to work normally. To get fortran to compile I installed Xcode developer tools, and gfortran for OSX Mountain Lion from HPC following instructions from http://web.mit.edu/mfloyd/www/computing/mac/gfortran/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46:311,message,message,311,https://qutip.org,https://github.com/qutip/qutip/issues/46,1,['message'],['message']
Integrability,qutip/core/cy/coefficient.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/add.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/project.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/dense.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/integrator/explicit_rk.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/dispatch.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/__init__.pxd.; Compiling qutip/core/data/expect.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/permute.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/matmul.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/trace.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/norm.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/_sode.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__in,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:6938,depend,depends,6938,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,"r the instances, and _not_ `__init__`. The former is effectively a class method, while the latter is an instance method; since we want instances representing the same object to be unique, we don't want it. In order to maintain referential equality, tensor-product operations must move into a canonical form. Calling `Compound(Compound(x, y), z)` must return the same object as `Compound(x, y, z)`. Internally this parsing is easy; if one is using the new object constructors, Python evaluation order guarantees that they will flatten themselves; so long as the `Compound` constructor unpacks `Compound` objects at a depth of 1, the whole object will always be as flat as possible. The tensor product will be expanded by having `Compound` ""thread"" over `Map`. This effectively expands the mathematicians' definition of the tensor product to allows us to continue to represent ""silly"" objects such as; ```python; tensor(qeye(5), basis(2).dag()); ```; which is an odd object that contracts one element of a tensor-product space down to the field and leaves the other. This will report its `Qobj.type` as `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:8289,contract,contracts,8289,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['contract'],['contracts']
Integrability,"radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ila",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:5814,depend,dependabot,5814,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:8701,depend,dependabot,8701,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"radarhere]</p>; </li>; <li>; <p>Added alpha_only argument to getbbox() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7123"">#7123</a>; [radarhere. hugovk]</p>; </li>; <li>; <p>Prioritise speed in <em>repr_png</em> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7242"">#7242</a>; [radarhere]</p>; </li>; <li>; <p>Do not use CFFI access by default on PyPy <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7236"">#7236</a>; [radarhere]</p>; </li>; <li>; <p>Limit size even if one dimension is zero in decompression bomb check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7235"">#7235</a>; [radarhere]</p>; </li>; <li>; <p>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a>; [radarhere]</p>; </li>; <li>; <p>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a>; [Yay295, hugovk]</p>; </li>; <li>; <p>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a>; [radarhere]</p>; </li>; <li>; <p>Changed grabclipboard() to use PNG instead of JPG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a>; [abey79, radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e34d346f10c0b1c814661e662a3e0c1ef084cf1c""><code>e34d346</code></a> Updated order</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a62f2402a6bcf11a0a1670542216725a3f9190e0""><code>a62f240</code></a> 10.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d50250d9eab741ae3ddd592d8910cfd7973b9d35""><code>d50250d</code></a> Added release notes for 10.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/comm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:10720,depend,dependencies,10720,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['depend'],['dependencies']
Integrability,"radarhere]</p>; </li>; <li>; <p>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a>; [radarhere]</p>; </li>; <li>; <p>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a>; [npjg, radarhere]</p>; </li>; <li>; <p>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a>; [radarhere]</p>; </li>; <li>; <p>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a>; [radarhere]</p>; </li>; <li>; <p>Added conversion between RGB/RGBA/RGBX and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><code>d594f4c</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/909dc64ed5f676169aa3d9b0c26f132a06321b83""><code>909dc64</code></a> 9.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3""><code>1a51ce7</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:12964,depend,dependabot,12964,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ransparency to P images in ImageTk.PhotoImage <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6559"">#6559</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use rounding in ImageOps contain() and pad() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6522"">#6522</a> [<a href=""https://github.com/bibinhashley""><code>@​bibinhashley</code></a>]</li>; <li>Fixed GIF remapping to palette with duplicate entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6548"">#6548</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow remap_palette() to return an image with less than 256 palette entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6543"">#6543</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected BMP and TGA palette size when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6500"">#6500</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.3.0 (2022-10-29)</h2>; <ul>; <li>; <p>Limit SAMPLESPERPIXEL to avoid runtime DOS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a>; [wiredfool]</p>; </li>; <li>; <p>Initialize libtiff buffer when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a>; [radarhere]</p>; </li>; <li>; <p>Inline fname2char to fix memory leak <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6329"">#6329</a>; [nulano]</p>; </li>; <li>; <p>Fix memory leaks related to text features <a href=""https://github-re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:9863,depend,dependabot,9863,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"re `f(t, args) -> Qobj`, similarly to the Hamiltonian. This is not the case, and as best as I can tell, has never been the case. Basic reproduction (though the functionality is just completely missing, so this won't ever succeed).; ```python; import qutip; def c_ops(t, args):; return qutip.create(3); qutip.mesolve(qutip.num(3), qutip.basis(3, 1).proj(), [0, 1], c_ops); ```. ## History. - @jrjohansson originally wrote the docstring saying that `c_ops` could be a callback function in 2012 (pre-QuTiP 1.1.4) in commit 1bf006d4, although the code did not support it at this time; - in issue #40 (2013), he commented that this functionality should be implemented, and this issue was closed without further action in 2018.; - in issue #223 (2014) there is some further discussion, but nothing is done until @Ericgig closes it in 2019, saying it is addressed by QuTiP 4.4.0 (the big swap to QobjEvo), but this doesn't appear to be the case. As of tag `v4.4.0`, the code does not support it. The failing line of code would be https://github.com/qutip/qutip/blob/fc9d9915d0f6242587828ce716ff3cd444edf82a/qutip/mesolve.py#L227-L236; as a function type is truth-y but has no length, but the underlying problem is more just that there's no support for it at all - there's no check for `callable(c_ops)`. At the current `master` at the time of writing (QuTiP ~4.5.1, 4102b99), we're in the same place as at tag `v4.4.0`. ## Solution. In previous issues, people have been told to rewrite the Liouvillian in the supported form, however that's not reasonably possible here. Technically it can be well-approximated by using an interpolation for each individual matrix element, as the time-dependent Hamiltonian can be solved ahead of time, but that's not at all sensible. Most pressingly, the documentation is currently wrong and should be changed to reflect reality. Secondly, we have to decide whether we're going to implement this functionality at all, perhaps as a part of @Ericgig's refactor of the solvers?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260:2111,depend,dependent,2111,https://qutip.org,https://github.com/qutip/qutip/issues/1260,1,['depend'],['dependent']
Integrability,"re""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:4506,depend,dependabot,4506,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"re/9.4.0...10.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.4.0&new-version=10.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:13658,Depend,Dependabot,13658,https://qutip.org,https://github.com/qutip/qutip/pull/2237,9,"['Depend', 'depend']","['Dependabot', 'dependabot']"
Integrability,"re/cy/coefficient.pyx; [ 3/31] Cythonizing qutip/core/cy/math.pyx; [ 4/31] Cythonizing qutip/core/data/add.pyx; [ 5/31] Cythonizing qutip/core/data/base.pyx; [ 6/31] Cythonizing qutip/core/data/csr.pyx; [ 7/31] Cythonizing qutip/core/data/dense.pyx; [ 8/31] Cythonizing qutip/core/data/dia.pyx; [ 9/31] Cythonizing qutip/core/data/dispatch.pyx; [10/31] Cythonizing qutip/core/data/matmul.pyx; [11/31] Cythonizing qutip/core/data/mul.pyx; [12/31] Cythonizing qutip/core/data/norm.pyx; [13/31] Cythonizing qutip/core/data/permute.pyx; [14/31] Cythonizing qutip/core/data/ptrace.pyx; [15/31] Cythonizing qutip/core/data/reshape.pyx; [16/31] Cythonizing qutip/core/data/tidyup.pyx; [17/31] Cythonizing qutip/piqs/_piqs.pyx; [18/31] Cythonizing qutip/core/_brtensor.pyx; [19/31] Cythonizing qutip/core/cy/_element.pyx; [20/31] Cythonizing qutip/core/cy/qobjevo.pyx; [21/31] Cythonizing qutip/core/data/adjoint.pyx; [22/31] Cythonizing qutip/core/data/expect.pyx; [23/31] Cythonizing qutip/core/data/inner.pyx; [24/31] Cythonizing qutip/core/data/kron.pyx; [25/31] Cythonizing qutip/core/data/pow.pyx; [26/31] Cythonizing qutip/core/data/project.pyx; [27/31] Cythonizing qutip/core/data/properties.pyx; [28/31] Cythonizing qutip/core/data/trace.pyx; [29/31] Cythonizing qutip/solver/integrator/explicit_rk.pyx; [30/31] Cythonizing qutip/solver/sode/_sode.pyx; [31/31] Cythonizing qutip/solver/sode/ssystem.pyx; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. </details>. I have also tried to install QuTiP in a virtualenv where I have previously manually installed numpy v 1.24, but it didn't work either. Installing with `pip install ""qutip<5""` succesfully installs qutip 4.7.6. I saw #2322, but I have `g++` installed and available on PATH.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:10874,integrat,integrator,10874,https://qutip.org,https://github.com/qutip/qutip/issues/2412,3,"['depend', 'integrat']","['dependencies', 'integrator']"
Integrability,"re</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:4052,depend,dependabot,4052,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3137"">#3137</a>)</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:4024,depend,dependabot-security-updates,4024,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['depend'],['dependabot-security-updates']
Integrability,"rect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:1802,depend,dependabot,1802,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['depend'],['dependabot']
Integrability,"redfool</code></a>]</li>; <li>Inline fname2char to fix memory leak <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6329"">#6329</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix memory leaks related to text features <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6330"">#6330</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Use double quotes for version check on old CPython on Windows <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6695"">#6695</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>GHA: replace deprecated set-output command with GITHUB_OUTPUT file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6697"">#6697</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Upload fribidi.dll to GitHub Actions <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6532"">#6532</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fixed set_variation_by_name offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6445"">#6445</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Windows build improvements <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6562"">#6562</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Only use ASCII characters in C source file <a href=""https",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:1833,depend,dependabot,1833,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ref=""https://github.com/JayWiz""><code>@​JayWiz</code></a>]</li>; <li>Raise an error when allocating translucent color to RGB palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6654"">#6654</a> [<a href=""https://github.com/jsbueno""><code>@​jsbueno</code></a>]</li>; <li>Moved mode check outside of loops <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6650"">#6650</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added reading of TIFF child images <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6569"">#6569</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved ImageOps palette handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6596"">#6596</a> [<a href=""https://github.com/PososikTeam""><code>@​PososikTeam</code></a>]</li>; <li>Defer parsing of palette into colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6567"">#6567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Apply transparency to P images in ImageTk.PhotoImage <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6559"">#6559</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use rounding in ImageOps contain() and pad() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6522"">#6522</a> [<a href=""https://github.com/bibinhashley""><code>@​bibinhashley</code></a>]</li>; <li>Fixed GIF remapping to palette with duplicate entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6548"">#6548</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow remap_palette() to return an image with less than 256 palette entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6543"">#6543</a> [<a href=""https://github.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:8722,depend,dependabot,8722,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ref=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot comm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:4036,depend,dependabot,4036,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['depend'],['dependabot']
Integrability,"ref=""https://redirect.github.com/python-pillow/Pillow/issues/7927"">#7927</a> from python-pillow/imagemath</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f5eeeacf7539eaa0d93a677d7666bc7c142c8d1c""><code>f5eeeac</code></a> Name as 'options' in lambda_eval and unsafe_eval, but '_dict' in deprecated eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/facf3af93dabcbdd8cdbda8c3b50eefafa3bb04c""><code>facf3af</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:15236,Depend,Dependabot,15236,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,"['Depend', 'depend']","['Dependabot', 'dependabot-badges']"
Integrability,"requests/issues/6688"">#6688</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/f1bb07d39b74d6444e333879f8b8a3d9dd4d2311""><code>f1bb07d</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabot/github_actions/github/codeql-act...</li>; <li><a href=""https://github.com/psf/requests/commit/60047ade64b0b882cbc94e047198818ab580911e""><code>60047ad</code></a> Bump github/codeql-action from 3.24.0 to 3.25.0</li>; <li><a href=""https://github.com/psf/requests/commit/31ebb8102c00f8cf8b396a6356743cca4362e07b""><code>31ebb81</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6682"">#6682</a> from frenzymadness/pytest8</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.31.0...v2.32.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.31.0&new-version=2.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:10018,depend,dependency-name,10018,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['depend'],['dependency-name']
Integrability,"res</code> from <code>setup.cfg</code></li>; </ul>; <p><strong>0.38.2 (2022-11-05)</strong></p>; <ul>; <li>Fixed regression introduced in v0.38.1 which broke parsing of wheel file names with; multiple platform tags</li>; </ul>; <p><strong>0.38.1 (2022-11-04)</strong></p>; <ul>; <li>Removed install dependency on setuptools</li>; <li>The future-proof fix in 0.36.0 for converting PyPy's SOABI into a abi tag was; faulty. Fixed so that future changes in the SOABI will not change the tag.</li>; </ul>; <p><strong>0.38.0 (2022-10-21)</strong></p>; <ul>; <li>Dropped support for Python &lt; 3.7</li>; <li>Updated vendored <code>packaging</code> to 21.3</li>; <li>Replaced all uses of <code>distutils</code> with <code>setuptools</code></li>; <li>The handling of <code>license_files</code> (including glob patterns and default; values) is now delegated to <code>setuptools&gt;=57.0.0</code> (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/466"">#466</a>).; The package dependencies were updated to reflect this change.</li>; <li>Fixed potential DoS attack via the <code>WHEEL_INFO_RE</code> regular expression</li>; <li>Fixed <code>ValueError: ZIP does not support timestamps before 1980</code> when using; <code>SOURCE_DATE_EPOCH=0</code> or when on-disk timestamps are earlier than 1980-01-01. Such; timestamps are now changed to the minimum value before packaging.</li>; </ul>; <p><strong>0.37.1 (2021-12-22)</strong></p>; <ul>; <li>Fixed <code>wheel pack</code> duplicating the <code>WHEEL</code> contents when the build number has changed (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/415"">#415</a>)</li>; <li>Fixed parsing of file names containing commas in <code>RECORD</code> (PR by Hood Chatham)</li>; </ul>; <p><strong>0.37.0 (2021-08-09)</strong></p>; <ul>; <li>Added official Python 3.10 support</li>; <li>Updated vendored <code>packaging</code> library to v20.9</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:1747,depend,dependencies,1747,https://qutip.org,https://github.com/qutip/qutip/pull/2052,1,['depend'],['dependencies']
Integrability,"ress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Ad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1055,depend,dependent,1055,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['depend'],['dependent']
Integrability,"result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:1719,depend,dependent,1719,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['depend'],['dependent']
Integrability,"rint(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:1929,integrat,integrator,1929,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['integrat'],['integrator']
Integrability,"rix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:1289,depend,depends,1289,https://qutip.org,https://github.com/qutip/qutip/pull/1405,1,['depend'],['depends']
Integrability,"rk4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/inf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:6030,depend,dependabot,6030,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,roject.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/dense.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/integrator/explicit_rk.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/dispatch.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/__init__.pxd.; Compiling qutip/core/data/expect.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/permute.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/matmul.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/trace.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/norm.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/_sode.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/properties.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compi,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:7257,depend,depends,7257,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,"rom <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:11224,depend,dependabot,11224,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"rouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 pr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:1022,integrat,integrate,1022,https://qutip.org,https://github.com/qutip/qutip/issues/1605,1,['integrat'],['integrate']
Integrability,"rtionError Traceback (most recent call last); Input In [11], in <cell line: 6>(); 2 return w * np.exp(-w); 4 out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]); ----> 6 assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'. AssertionError: 10 vs 100; ```. ### Expected Behaviour. As we see, the above code does run and produces an output, but the states list is not the same as the times lists (these should be the same length as they have a 1-1 correspondence). It actually appears it has only given data for the first 10 time-steps in this case.; The same code works fine on Intel chip. ; We can increase the `nsteps` parameter to give the correct number of output states, but they do not agree with Intels output (also see below for related issue), and actually are not always even quantum states, so something in the solver went wrong. Another example, using the cython string formatting:. ```brmesolve([[sigmax(), 'cos(t)']], psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), '1']])``` works fine on Intel, but gives error ```Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.``` on M1. . Moreover, if I do increase the `nsteps` sufficiently, this does appear to run correctly, but the output states are not the same as we get on Intel (and so I assume are incorrect). ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.6; Scipy Version: 1.7.3; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.9.13; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```. ### Additional Context. A few random observations, hopefully not just an issue on my side due to my local configurations. I installed qutip via conda, and it generally seems to work fine on M1. In the meantime, everything runs as expected with Rosetta.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965:1784,integrat,integration,1784,https://qutip.org,https://github.com/qutip/qutip/issues/1965,1,['integrat'],['integration']
Integrability,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:3466,depend,dependabot-security-updates,3466,https://qutip.org,https://github.com/qutip/qutip/pull/1695,1,['depend'],['dependabot-security-updates']
Integrability,"s changed (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/415"">#415</a>)</li>; <li>Fixed parsing of file names containing commas in <code>RECORD</code> (PR by Hood Chatham)</li>; </ul>; <p><strong>0.37.0 (2021-08-09)</strong></p>; <ul>; <li>Added official Python 3.10 support</li>; <li>Updated vendored <code>packaging</code> library to v20.9</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pypa/wheel/commit/6f1608dc1a88f00d2390b9044bd655753f39234c""><code>6f1608d</code></a> Created a new release</li>; <li><a href=""https://github.com/pypa/wheel/commit/cf8f5ef50e32b836c4ffb43af68107f78dca8d80""><code>cf8f5ef</code></a> Moved news item from PR <a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/484"">#484</a> to its proper place</li>; <li><a href=""https://github.com/pypa/wheel/commit/9ec201660fa07ee0714edd17c979a7039ea852a4""><code>9ec2016</code></a> Removed install dependency on setuptools (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/483"">#483</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/747e1f6090547abcf65108c5a229cbe21a64a2ae""><code>747e1f6</code></a> Fixed PyPy SOABI parsing (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/484"">#484</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/76275484bc0de72d1f56601dbba3e816fc2f00c6""><code>7627548</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/480"">#480</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/7b9e8e1022b9c850756ef34bc1a4a88042988a86""><code>7b9e8e1</code></a> Test on Python 3.11 final</li>; <li><a href=""https://github.com/pypa/wheel/commit/a04dfef41be0ab10eadbb2ed5d02b600682dc487""><code>a04dfef</code></a> Updated the pypi-publish action</li>; <li><a href=""https://github.com/pypa/wheel/commit/94bb62cb182023ac6586c5510ae9031ea56bd",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:3335,depend,dependency,3335,https://qutip.org,https://github.com/qutip/qutip/pull/2052,1,['depend'],['dependency']
Integrability,"s not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py option",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:1255,depend,dependency-check,1255,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['depend'],['dependency-check']
Integrability,"s relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:1479,depend,dependency-check,1479,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['depend'],['dependency-check']
Integrability,"s simply a time-dependent weight from this point of view; * The ""improved sampling"" option for `mcsolve` weights the no-jump trajectory with its exact probability, and then only samples from the ensemble of trajectories with at least one jump. Currently, these two things cannot be combined: ""improved sampling"" does not work for `nm_mcsolve`. With these changes, it would work.; In the future, there might be at least one more application for weighted trajectories:; * For mixed initial states in `mcsolve`, it might be useful to allow sampling of initial states with frequencies or probabilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ and $w_r(T)$ are the absolute and relative weights, $\rho(T)$ the state associated with a trajectory, and $N_{\text{rel}}$ the number of trajectories that have not been assigned absolute weights. Intuitively, the idea is that absolute weights ar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:1242,depend,depend,1242,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['depend'],['depend']
Integrability,"s/6416"">#6416</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71""><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=""https://redirect.github.com/psf/requests/issues/6418"">#6418</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.28.2...v2.31.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:7899,Depend,Dependabot,7899,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Depend'],['Dependabot']
Integrability,"s://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:2838,Depend,Dependabot,2838,https://qutip.org,https://github.com/qutip/qutip/pull/1563,2,"['Depend', 'depend']","['Dependabot', 'dependabot-badges']"
Integrability,same Time-dependent Hamiltonian but different evolution result,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2161:10,depend,dependent,10,https://qutip.org,https://github.com/qutip/qutip/issues/2161,1,['depend'],['dependent']
Integrability,"says which input arguments are meant to be dispatched on, and whether the output should be dispatched on, and all other arguments are passed through like normal. #### Implementation details. The backing specialisations can be found in `Dispatcher._specialisations`, and the complete lookup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lifting is done when `add_specialisations` or `rebuild_lookup` is called. On call, the generic signature `(*args, **kwargs)` has to be bound to the actual ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:16411,depend,depend,16411,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['depend'],['depend']
Integrability,"se a warning if NumPy failed to raise an error during conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6594"">#6594</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only read a maximum of 100 bytes at a time in IMT header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6623"">#6623</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Show all frames in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6611"">#6611</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow FLI palette chunk to not be first <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6626"">#6626</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>If first GIF frame has transparency for RGB_ALWAYS loading strategy, use RGBA mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6592"">#6592</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Round box position to integer when pasting embedded color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6517"">#6517</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed EXIF prefix when saving WebP <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6582"">#6582</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pad IM palette to 768 bytes when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6579"">#6579</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added DDS BC6H reading <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6449"">#6449</a> [<a href=""https://github.com/ShadelessFox""><code>@​ShadelessFox</code></a>]</li>; <li>Added support f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:6574,depend,dependabot,6574,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,sesolve with list func time-dependence and rhs_with_state option will fail?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/824:28,depend,dependence,28,https://qutip.org,https://github.com/qutip/qutip/issues/824,1,['depend'],['dependence']
Integrability,"sl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:2943,depend,dependabot,2943,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"so accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:1849,depend,dependence,1849,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['depend'],['dependence']
Integrability,"specific to some methods. SInce new integrators could be added by project such as qutip-cupy, `Options` can no longer be the place to list all supported options. It become little more that a dict. So I propose deprecating it. The documentation of `sesolve`, `mesolve`, etc. now list the options used by the solver and most common ode options and link the the integrator documentation. The class interface has the options property which document the options used by the solver and the integrators have the same. In the online documentation, the integrator api entries only contain the description of the method and the supported options. Since users don't need to call them directly, other methods are hidden and will be included in the dev documentation only. Usage will look like this, for functions:; ```; sesolve(H, psi, tlist, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); ```; and for the class interface:; ```; solver = SeSolver(H, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); solver.run(...); solver.options[""atol""] = 1e-9; solver.run(...) # run with the new tol.; solver.options = {""atol"": 1e-2} # only change the affected items. ; solver.run(...) # Also run with the new tol.; solver.options[""method""] = ""adams"" # reset all ode options, including ""atol"" supported by both.; solver.options = {""method"": ""bdf"", ""atol"": 1e-2} # reset all ode options then apply the new atol ; ```. Inside solvers, options are stored in a `_SolverOptions` which is a dict with frozen keys and feedback (chaging atol will reset the integrator).; ; Some `Intergrator` are slip so one method correspond to one integrator. Otherwise, `method` was an options used by both the solver to know which integrator to use and by some integrators. `Options` and `SolverOptions` still both exist for backward compatibility: they raise a warning but return the dict of the same options so the change should not immediately break any code. **Related issues or PRs**; Alternative to #1947",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1955:1834,integrat,integrator,1834,https://qutip.org,https://github.com/qutip/qutip/pull/1955,4,['integrat'],"['integrator', 'integrators']"
Integrability,"ssues/287"">#287</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/1fc808626a895a916b1e4c2b63abae6c5eafdbe3""><code>1fc8086</code></a> Bump peter-evans/create-pull-request from 6.0.4 to 6.0.5 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/288"">#288</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2023.07.22...2024.07.04"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:3355,depend,dependabot-automerge-start,3355,https://qutip.org,https://github.com/qutip/qutip/pull/2483,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,"ssues/6330"">#6330</a>; [nulano]</p>; </li>; <li>; <p>Use double quotes for version check on old CPython on Windows <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6695"">#6695</a>; [hugovk]</p>; </li>; <li>; <p>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a>; [cgohlke]</p>; </li>; <li>; <p>Fixed set_variation_by_name offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6445"">#6445</a>; [radarhere]</p>; </li>; <li>; <p>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a>; [cgohlke]</p>; </li>; <li>; <p>Release Python GIL when converting images using matrix operations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6418"">#6418</a>; [hmaarrfk]</p>; </li>; <li>; <p>Added ExifTags enums <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6630"">#6630</a>; [radarhere]</p>; </li>; <li>; <p>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a>; [radarhere]</p>; </li>; <li>; <p>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a>; [npjg, radarhere]</p>; </li>; <li>; <p>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a>; [radarhere]</p>; </li>; <li>; <p>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a>; [radarhere]</p>; </li>; <li>; <p>Added conversion between RGB/RGBA/RGBX and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:11908,depend,dependabot,11908,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ssues/6695"">#6695</a>; [hugovk]</p>; </li>; <li>; <p>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a>; [cgohlke]</p>; </li>; <li>; <p>Fixed set_variation_by_name offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6445"">#6445</a>; [radarhere]</p>; </li>; <li>; <p>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a>; [cgohlke]</p>; </li>; <li>; <p>Release Python GIL when converting images using matrix operations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6418"">#6418</a>; [hmaarrfk]</p>; </li>; <li>; <p>Added ExifTags enums <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6630"">#6630</a>; [radarhere]</p>; </li>; <li>; <p>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a>; [radarhere]</p>; </li>; <li>; <p>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a>; [npjg, radarhere]</p>; </li>; <li>; <p>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a>; [radarhere]</p>; </li>; <li>; <p>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a>; [radarhere]</p>; </li>; <li>; <p>Added conversion between RGB/RGBA/RGBX and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:12093,depend,dependabot,12093,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"st method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b""><code>9c2c230</code></a> Release 1.26.18 (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3159"">#3159</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36""><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73""><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:1723,depend,dependency-name,1723,https://qutip.org,https://github.com/qutip/qutip/pull/2246,1,['depend'],['dependency-name']
Integrability,"st_public_api.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6""><code>7662c07</code></a> Update <strong>init</strong>.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef""><code>311ab52</code></a> Update armccompiler.py</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.21.0...v1.22.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.21.0&new-version=1.22.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:5555,depend,dependabot-automerge-start,5555,https://qutip.org,https://github.com/qutip/qutip/pull/1940,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,step function in string-version of time dependent Hamiltonians,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1240:40,depend,dependent,40,https://qutip.org,https://github.com/qutip/qutip/issues/1240,1,['depend'],['dependent']
Integrability,"strict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF reg",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:11394,depend,dependabot,11394,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2030,depend,dependencies,2030,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['depend'],['dependencies']
Integrability,"t to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:1382,rout,routines,1382,https://qutip.org,https://github.com/qutip/qutip/pull/1405,2,"['depend', 'rout']","['depends', 'routines']"
Integrability,"t.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780:2158,Depend,Dependabot,2158,https://qutip.org,https://github.com/qutip/qutip/pull/1780,2,"['Depend', 'depend']","['Dependabot', 'dependabot-badges']"
Integrability,"t.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:5705,depend,dependabot,5705,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['depend'],['dependabot']
Integrability,"t/51716c4ef390136b0d4b800ec7665dd5503e64fc""><code>51716c4</code></a> enable the warnings plugin (<a href=""https://redirect.github.com/psf/requests/issues/6416"">#6416</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71""><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=""https://redirect.github.com/psf/requests/issues/6418"">#6418</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.28.2...v2.31.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:7780,depend,dependabot,7780,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['depend'],['dependabot']
Integrability,"t/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:15423,depend,dependabot-security-updates,15423,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot-security-updates']
Integrability,"t/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:2524,Depend,Dependabot,2524,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['Depend'],['Dependabot']
Integrability,t__.pxd.; Compiling qutip/core/data/norm.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/_sode.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/properties.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/adjoint.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/kron.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/pow.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/base.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/piqs/_piqs.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/reshape.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/inner.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/cy/_element.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/31] Cythonizing qutip/core/_brtools.pyx; [ 2/31] Cythonizing qutip/core/cy/coefficient.pyx; [ 3/31] Cythonizing qutip/core/cy/math.p,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:8638,depend,depends,8638,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,ta/properties.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/adjoint.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/kron.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/pow.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/base.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/piqs/_piqs.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/reshape.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/inner.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/cy/_element.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/31] Cythonizing qutip/core/_brtools.pyx; [ 2/31] Cythonizing qutip/core/cy/coefficient.pyx; [ 3/31] Cythonizing qutip/core/cy/math.pyx; [ 4/31] Cythonizing qutip/core/data/add.pyx; [ 5/31] Cythonizing qutip/core/data/base.pyx; [ 6/31] Cythonizing qutip/core/data/csr.pyx; [ 7/31] Cythonizing qutip/core/data/dense.pyx; [ 8/31] Cythonizing qutip/core/data/dia.pyx; [ 9/31] Cythonizing qutip/core/data/dispatch.pyx; [10/31] Cythonizing qutip/core/data/matmul.pyx; [11/31] Cythonizing qutip/core/data/mul.pyx; [12/31] Cythonizing qutip/core/data/norm.pyx; [13/31] Cythonizing qutip/core/data/permute.pyx; [14,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:9111,depend,depends,9111,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,ta/properties.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/integrator/explicit_rk.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/inner.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/kron.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/base.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/csr.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/permute.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/pow.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/trace.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/adjoint.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/piqs/_piqs.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:6525,depend,depends,6525,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['depend'],['depends']
Integrability,"tack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:2670,depend,dependabot,2670,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['depend'],['dependabot']
Integrability,"tained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2757,depend,dependent,2757,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['depend'],['dependent']
Integrability,"te(ann_operators):; H_r += (w[i] - drive_w) * a.dag() * a. H_int = 0; for i in range(len(ann_operators)-1):; H_int += J[i] * (ann_operators[i].dag() * ann_operators[i+1] + ann_operators[i+1].dag() * ann_operators[i]). H_d = -1j * drive_amp * (ann_operators[0] - ann_operators[0].dag()). H = H_r + H_int + H_d. c_ops = [np.sqrt(kappa)*ann_operators[0], np.sqrt(kappa)*ann_operators[-1]]. rho_ss = steadystate(H, c_ops). a_out = np.sqrt(kappa) * expect(ann_operators[-1], rho_ss); t.append(np.sqrt(kappa) * a_out/drive_amp). print(""J = "", np.array(J)/(2 * np.pi)); print(""w = "", np.array(w)/(2 * np.pi)); print(""kappa = "", kappa/2/np.pi); t = np.array(t); plt.plot(detuning_list/2/np.pi, 20 * np.log10(np.abs(t))); plt.xlabel(""Detuning (GHz)""); plt.ylabel(""|S21|(dB)""); plt.ylim(-10,0.01); # plt.xlim(-2, 2); plt.grid(); ```. ### Code Output. ```shell; {; 	""name"": ""ValueError"",; 	""message"": ""Provided dimensions do not match the data: (65536, 65536) vs (17, 17)"",; 	""stack"": ""---------------------------------------------------------------------------; ValueError Traceback (most recent call last); Cell In[2], line 39; 35 H = H_r + H_int + H_d; 37 c_ops = [np.sqrt(kappa)*ann_operators[0], np.sqrt(kappa)*ann_operators[-1]]; ---> 39 rho_ss = steadystate(H, c_ops); 41 a_out = np.sqrt(kappa) * expect(ann_operators[-1], rho_ss); 42 t.append(np.sqrt(kappa) * a_out/drive_amp). File /opt/anaconda3/envs/trial_env/lib/python3.11/site-packages/qutip/solver/steadystate.py:177, in steadystate(A, c_ops, method, solver, **kwargs); 175 kwargs.pop(\""power_eps\"", 0); 176 kwargs.pop(\""sparse\"", 0); --> 177 return _steadystate_direct(A, kwargs.pop(\""weight\"", 0),; 178 method=solver, **kwargs); 180 elif method == \""power\"":; 181 # Remove unused kwargs, so only used and pass-through ones are included; 182 kwargs.pop(\""weight\"", 0). File /opt/anaconda3/envs/trial_env/lib/python3.11/site-packages/qutip/solver/steadystate.py:246, in _steadystate_direct(A, weight, **kw); 243 rho_ss = _data.column_unstack(stea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386:2072,message,message,2072,https://qutip.org,https://github.com/qutip/qutip/issues/2386,1,['message'],['message']
Integrability,"ted if the option `rhs_with_state` is set to `True`. . But there have been demand to accept more signatures: `f(t)` and `f(t, **args)`. PR #1123, when ready, should allow both signature using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work well but they need to be removed for the new signature candidate (`f(t, **args)`). Also you cannot remove / fix to a constant them once declared. Since they are not used/working yet, now is the time to change to something better. I could see 2 other options:; - reserved keys: `args = {""state_vec"":psi0}`, this will always be the state (np.array) if available.; -- collapse are less practical this way.; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:1389,depend,depend,1389,https://qutip.org,https://github.com/qutip/qutip/issues/1136,1,['depend'],['depend']
Integrability,tensor contract on sparse matrix,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883:7,contract,contract,7,https://qutip.org,https://github.com/qutip/qutip/pull/883,1,['contract'],['contract']
Integrability,"thon-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:14553,depend,dependabot,14553,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"thub.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067""><code>d516b87</code></a> Update Github actions/checkout to v4</li>; <li><a href=""https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7""><code>c095c75</code></a> Merge branch 'master' into dev</li>; <li><a href=""https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98""><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>; <li><a href=""https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201""><code>5918a0e</code></a> Merge branch 'master' into dev</li>; <li>Additional commits viewable in <a href=""https://github.com/kjd/idna/compare/v3.4...v3.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:4127,depend,dependabot-security-updates,4127,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['depend'],['dependabot-security-updates']
Integrability,"thub.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:4908,depend,dependabot,4908,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['depend'],['dependabot']
Integrability,"thub.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:9330,depend,dependabot-automerge-start,9330,https://qutip.org,https://github.com/qutip/qutip/pull/1654,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,"thub.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:3736,depend,dependabot,3736,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['depend'],['dependabot']
Integrability,"tifi/commit/1fc808626a895a916b1e4c2b63abae6c5eafdbe3""><code>1fc8086</code></a> Bump peter-evans/create-pull-request from 6.0.4 to 6.0.5 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/288"">#288</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2023.07.22...2024.07.04"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:3445,Depend,Dependabot,3445,https://qutip.org,https://github.com/qutip/qutip/pull/2483,1,['Depend'],['Dependabot']
Integrability,"tochastic.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/sparse_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:2534,depend,depends,2534,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['depend'],['depends']
Integrability,"tps://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14""><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=""https://redirect.github.com/pallets/jinja/issues/1918"">#1918</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895""><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>; <li><a href=""https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7""><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>; <li><a href=""https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23""><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>; <li>Additional commits viewable in <a href=""https://github.com/pallets/jinja/compare/3.1.2...3.1.3"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:3420,depend,dependency-name,3420,https://qutip.org,https://github.com/qutip/qutip/pull/2291,1,['depend'],['dependency-name']
Integrability,"tput. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that hand",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1316,integrat,integrate,1316,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['integrat'],['integrate']
Integrability,"tring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implementation I chose a more object oriented style for the interface. The user first creates a `MemoryCascade` object, storing all the relevant parameters, and subsequently calls class methods to runs simulations. I personally like this style, and I think it is a general style that could be used across a great variety of solvers. I could however in addition write a function with a more `mesolve`-like interface. It can't, however, be identical, as there are several special arguments that has to be given. There is also a separate class method that computes output field correlation functions, and I kind of like that the various methods are collected together in a class, instead of having multiple different functions that all have to be called with a long list of arguments. I therefore suggest the style used in the `memorycascade` module as a style that can be used for new solvers going forward. In general there will be a class with a name reflecting the solver, and this class has methods for doing various types of simulations. The two non-Markov solvers I have implemented are of course closely related to my own line of current research. The ""memory cascade"" method is something I have developed, and the main motivation for me to implement the TTM was that it can be used very nicely in conjunction with the ""memory cascade"" method (see the notebooks). Going",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:2955,interface,interface,2955,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['interface'],['interface']
Integrability,"ttps://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [rad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:5894,depend,dependabot,5894,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['depend'],['dependabot']
Integrability,"ttps://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:15729,depend,dependabot-automerge-start,15729,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,"ub-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:4922,depend,dependabot,4922,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['depend'],['dependabot']
Integrability,"ub.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Only use ASCII characters in C source file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6691"">#6691</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Release Python GIL when converting images using matrix operations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6418"">#6418</a> [<a href=""https://github.com/hmaarrfk""><code>@​hmaarrfk</code></a>]</li>; <li>Added ExifTags enums <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6630"">#6630</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a> [<a href=""https://github.com/npjg""><code>@​npjg</code></a>]</li>; <li>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>pylint warnings <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6659"">#6659</a> [<a href=""https://github.com/marksmayo""><code>@​marksmayo</code></a>]</li>; <li>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added conversion between RGB/RGBA/RGBX a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:3514,depend,dependabot,3514,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ues/286"">#286</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/4a9569a3eb58db8548536fc16c5c5c7af946a5b1""><code>4a9569a</code></a> Bump actions/checkout from 4.1.2 to 4.1.4 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/287"">#287</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/1fc808626a895a916b1e4c2b63abae6c5eafdbe3""><code>1fc8086</code></a> Bump peter-evans/create-pull-request from 6.0.4 to 6.0.5 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/288"">#288</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2023.07.22...2024.07.04"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:3123,depend,dependabot-security-updates,3123,https://qutip.org,https://github.com/qutip/qutip/pull/2483,1,['depend'],['dependabot-security-updates']
Integrability,"ues/6693"">#6693</a>; [cgohlke]</p>; </li>; <li>; <p>Fixed set_variation_by_name offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6445"">#6445</a>; [radarhere]</p>; </li>; <li>; <p>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a>; [cgohlke]</p>; </li>; <li>; <p>Release Python GIL when converting images using matrix operations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6418"">#6418</a>; [hmaarrfk]</p>; </li>; <li>; <p>Added ExifTags enums <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6630"">#6630</a>; [radarhere]</p>; </li>; <li>; <p>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a>; [radarhere]</p>; </li>; <li>; <p>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a>; [npjg, radarhere]</p>; </li>; <li>; <p>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a>; [radarhere]</p>; </li>; <li>; <p>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a>; [radarhere]</p>; </li>; <li>; <p>Added conversion between RGB/RGBA/RGBX and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><cod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:12278,depend,dependabot,12278,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"ugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:10671,depend,dependabot,10671,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,uild wheel; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/vector.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/ssystem.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/cy/_element.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/expect.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/matmul.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/mul.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg/cython_blas.pxd.; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/properties.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/integrator/explicit_rk.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/inner.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:5279,depend,depends,5279,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['depend'],['depends']
Integrability,"uild_ext.build_ext.run(self); 186 ; 187 def build_extensions(self):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. /home/caidish1234/anaconda3/lib/python3.6/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 572 except KeyError:; 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 ; 576 # Return *all* object filenames, not just the ones we just built. /home/caidish1234/anaconda3/lib/python3.6/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 118 extra_postargs); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 ; 122 def create_static_lib(self, objects, output_libname,. ImportError: Building module rhs82342421 failed: [""distutils.errors.CompileError: command 'gcc' failed with exit status 1\n""]; ```. So, I opened my server's log,it showed lots of:; `cc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]`. And an error:; `gcc: error trying to exec '/usr/lib/gcc/x86_64-linux-gnu/4.8/cc1plus': execv: Argument list too long`. After killing the kernel, open the notebook again...Everything is ok...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:4968,depend,depends,4968,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['depend'],['depends']
Integrability,"ulano</code></a>]</li>; <li>Fix memory leaks related to text features <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6330"">#6330</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Use double quotes for version check on old CPython on Windows <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6695"">#6695</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>GHA: replace deprecated set-output command with GITHUB_OUTPUT file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6697"">#6697</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Upload fribidi.dll to GitHub Actions <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6532"">#6532</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fixed set_variation_by_name offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6445"">#6445</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Windows build improvements <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6562"">#6562</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix malloc in _imagingft.c:font_setvaraxes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6690"">#6690</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Only use ASCII characters in C source file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6691"">#6691</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Release Python GIL when converting images using mat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:2038,depend,dependabot,2038,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"uld be to generate these with a (costly) Lindblad equation in a large Hilbert space, and use the TTM to extrapolate to larger times. My code is not quite ready for a pull request yet (due to this issue amongst other things), but when it is I would also like to discuss the structure of such a package. I guess it is best to leave that to when I have a pull request ready though. For now I have a local modified version of the `_mesolve_const` function that allows a superoperator in place of `rho0`. The necessary modification is actually only to the function implementing the ""right hand side"" (RHS) of the differential equation, as this now needs to implement a matrix-matrix multiplication instead of a matrix-vector multiplication. For illustration purposes I will attach a code for a modified `_mesolve_const` below, that does the job, but the RHS is not implemented in cython. I think implementing this feature in qutip should be relatively straight forward, but possibly a bit tedious since it there are so many different dispatch functions from `mesolve` depending on the different types of time-dependence etc. One would also need cython implementations of the RHS functions for superoperator evolutions. Please let me know what you think about implementing this in qutip. Here is the code for a function that propagates the Lindblad equation with a superoperator as initial value (written as a standalone module for illustration purposes). As you will notice in the code, there is a subtle issue with needing to transpose the Lindbladian to get the correct result. I'm not sure why this is the case.. must be something with the superoperator representation. Perhaps @cgranade knows?. ``` python; import scipy. from qutip.mesolve import _generic_ode_solve; from qutip.superoperator import liouvillian, mat2vec; from qutip.settings import debug. if debug:; import inspect. def _mesolve_const_super(H, E0, tlist, c_op_list, e_ops, args, opt,; progress_bar):; """"""; Evolve the super-operator `E0`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/384:2137,depend,depending,2137,https://qutip.org,https://github.com/qutip/qutip/issues/384,2,['depend'],"['dependence', 'depending']"
Integrability,"ule to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, ther",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1974,Integrat,Integration,1974,https://qutip.org,https://github.com/qutip/qutip/pull/2395,2,['Integrat'],"['Integrated', 'Integration']"
Integrability,"ull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/20680"">#20680</a> from charris/backport-20663</li>; <li><a href=""https://github.com/numpy/numpy/commit/794b36f7e1bf2a8c42774ab0db86a74bd32f674b""><code>794b36f</code></a> Update armccompiler.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/d93b14e3d7abaa1d837825e51671f817788e120f""><code>d93b14e</code></a> Update test_public_api.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6""><code>7662c07</code></a> Update <strong>init</strong>.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef""><code>311ab52</code></a> Update armccompiler.py</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.21.0...v1.22.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.21.0&new-version=1.22.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:5162,depend,dependency-name,5162,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['depend'],['dependency-name']
Integrability,"um]). np.real(R.full()). tlist = np.linspace(0, 15.0, 1000). psi0 = rand_ket(2). e_ops = [sigmax(), sigmay(), sigmaz()]. expt_list = bloch_redfield_solve(R, ekets, psi0, tlist, e_ops). sphere = Bloch(). sphere.add_points([expt_list[0], expt_list[1], expt_list[2]]). sphere.vector_color = ['r']. sphere.add_vectors(np.array([delta, 0, eps0]) / np.sqrt(delta ** 2 + eps0 ** 2)). sphere.make_sphere(). plt.show(). output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]); ```. The code runs fine until the last line which gives the following response:; ```; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-1-79f7f2013969> in <module>; 35 plt.show(); 36; ---> 37 output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]). ~\Anaconda3\envs\qutip-env\lib\site-packages\qutip\bloch_redfield.py in brmesolve(H, psi0, tlist, a_ops, e_ops, c_ops, args, use_secular, sec_cutoff, tol, spectra_cb, options, progress_bar, _safe_mode, verbose); 196; 197 if _safe_mode:; --> 198 _solver_safety_check(H, psi0, a_ops+c_ops, e_ops, args); 199; 200 # check for type (if any) of time-dependent inputs. ~\Anaconda3\envs\qutip-env\lib\site-packages\qutip\solver.py in _solver_safety_check(H, state, c_ops, e_ops, args); 945 _structure_check(Hdims, Htype, _temp_state); 946 else:; --> 947 raise Exception('Invalid td-list element.'); 948 if do_tests:; 949 _structure_check(Hdims, Htype, _temp_state). Exception: Invalid td-list element.; ```. Output of version_table(); ```; Software	Version; QuTiP	4.5.0; Numpy	1.18.1; SciPy	1.4.1; matplotlib	3.1.3; Cython	0.29.15; Number of CPUs	4; BLAS Info	INTEL MKL; IPython	7.13.0; Python	3.8.1 (default, Mar 2 2020, 13:06:26) [MSC v.1916 64 bit (AMD64)]; OS	nt [win32]; Sun Mar 29 21:11:12 2020 GMT Daylight Time; ```. Other examples (like this one https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve.ipynb ) run without errors.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223:1964,depend,dependent,1964,https://qutip.org,https://github.com/qutip/qutip/issues/1223,1,['depend'],['dependent']
Integrability,"upport <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7234"">#7234</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed deleted file from codecov.yml and increased coverage threshold <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7232"">#7232</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed support for 32-bit <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7228"">#7228</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a> [<a href=""https://github.com/Yay295""><code>@​Yay295</code></a>]</li>; <li>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved checks in font_render <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7218"">#7218</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Change <code>grabclipboard()</code> to use PNG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a> [<a href=""https://github.com/abey79""><code>@​abey79</code></a>]</li>; <li>Added PyPy 3.10 and removed PyPy 3.8 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7216"">#7216</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added in_place argument to ImageOps.exif_transpose() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7092"">#7092</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</cod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:3661,depend,dependencies,3661,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['depend'],['dependencies']
Integrability,"ure (except ones which use `*args` or `**kwargs`), even if not all of the arguments are data-layer types. At definition, the creator of the `Dispatcher` says which input arguments are meant to be dispatched on, and whether the output should be dispatched on, and all other arguments are passed through like normal. #### Implementation details. The backing specialisations can be found in `Dispatcher._specialisations`, and the complete lookup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lif",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:16336,depend,dependency,16336,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['depend'],['dependency']
Integrability,"urity Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:2582,Depend,Dependabot,2582,https://qutip.org,https://github.com/qutip/qutip/pull/2205,2,"['Depend', 'depend']","['Dependabot', 'dependabot-badges']"
Integrability,"urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36""><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263""><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>; <li>Additional commits viewable in <a href=""https://github.com/urllib3/urllib3/compare/1.26.14...1.26.17"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:5467,depend,dependabot-automerge-start,5467,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,utility.pxd.; Compiling qutip/core/cy/_element.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/expect.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/matmul.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/mul.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg/cython_blas.pxd.; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/properties.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/integrator/explicit_rk.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/inner.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/kron.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/base.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/csr.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/s,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:5736,depend,depends,5736,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['depend'],['depends']
Integrability,utip/core/data/dispatch.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/__init__.pxd.; Compiling qutip/core/data/expect.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/permute.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/matmul.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/trace.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/norm.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/_sode.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/properties.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/adjoint.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/kron.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/pow.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:7716,depend,depends,7716,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,"utip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1138, in cythonize_one; ra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:2807,depend,depends,2807,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['depend'],['depends']
Integrability,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:5094,Depend,Dependabot,5094,https://qutip.org,https://github.com/qutip/qutip/pull/1767,9,"['Depend', 'depend']","['Dependabot', 'dependabot']"
Integrability,"v1.21.0...v1.22.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.21.0&new-version=1.22.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:5712,Depend,Dependabot,5712,https://qutip.org,https://github.com/qutip/qutip/pull/1940,9,"['Depend', 'depend']","['Dependabot', 'dependabot']"
Integrability,"verOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:1867,integrat,integrator,1867,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['integrat'],['integrator']
Integrability,"w this is quite an old OS and Python version, but that's what I have available. Numpy 1.24 should be supported in Python 3.8.10. ### Code to Reproduce the Bug. ```shell; $ python3 -m venv /tmp/test-venv. $ source /tmp/test-venv/bin/activate. $ pip install --upgrade pip; Collecting pip; Using cached pip-24.0-py3-none-any.whl (2.1 MB); Installing collected packages: pip; Attempting uninstall: pip; Found existing installation: pip 20.0.2; Uninstalling pip-20.0.2:; Successfully uninstalled pip-20.0.2; Successfully installed pip-24.0. $ pip list; Package Version; ------------- -------; pip 24.0; pkg_resources 0.0.0; setuptools 44.0.0. $ pip install qutip; Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Installing build dependencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Coll",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:1380,depend,dependencies,1380,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['dependencies']
Integrability,"w/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""ht",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:12797,depend,dependabot,12797,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"w</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:3875,depend,dependabot,3875,https://qutip.org,https://github.com/qutip/qutip/pull/2205,8,"['Depend', 'depend']","['Dependabot', 'dependabot', 'dependency']"
Integrability,"was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I apologize for any spelling mistakes that may remain in my message, (I am in bachelor and English is not my native language); . **To Reproduce**; ```python; import qutip as qtp; import numpy as np; H = qtp.displace(8,3)*qtp.num(8)*(qtp.displace(8,3).dag())+0.5*qtp.qeye(8)+qtp.position(8); print(H.eigenenergies()); ```; The terminal out put is; ```; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597:2005,message,message,2005,https://qutip.org,https://github.com/qutip/qutip/issues/1597,2,['message'],['message']
Integrability,"we can sidestep some of these issues by improving library code which creates `Qobj` instances. Operations like `Qobj.__add__` already know exactly what the output dimensions are, what the the type must be, and other things like if Hermiticity has been preserved. We move away from the outdated style of; ```python; out = Qobj(); out.data = left.data + right.data; out.dims = left.dims; ...; ```; to one which passes _all_ the information in one go:; ```python; out = Qobj(left.data + right.data,; copy=False,; dims=left.dims,; type=left.type,; isherm=left._isherm and right._isherm); ```; This is more verbose, but significantly faster. With no other changes to the code, doing this can save around one-quarter of the overhead on several `Qobj` operations. Moving to the new data-layer types also gets large improvements in instantiation time. This is fine, except for matrix multiplication of tensor structures. In these, like in the example above, the matrix multiplication can cause tensor structures to contract, and so they then become incompatible with their previous Hilbert spaces. If we instead maintain a _list_ of `'type'` and introduce a `'scalar'` type, such objects can sensibly be broadcast back up to the correct size when needed, treating the spaces containing as identities of the correct dimension. I envisage that this may have some nice use-cases within `qip`, for example a gate on a single qubit could be represented by a two-by-two matrix with all other dimensions scalars, rather than requiring the whole Hilbert space to be represented all the time. Optimisations can be done using only the required elements of the subspace, and only broadcast up to the full representation once at the end. Further, we can ease the burden of parsing the dimensions in the first place. I haven't fully attempted this yet so I don't have full details on this, but I imagine there is some internal information we can keep after a single parsing pass that will make other operations simpler. Th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:8629,contract,contract,8629,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['contract'],['contract']
Integrability,"wever, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733:1093,depend,dependent,1093,https://qutip.org,https://github.com/qutip/qutip/issues/1733,2,['depend'],['dependent']
Integrability,which demonstrates that time-dependent expressions with multiple terms are not properly handled (missing parentheses),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/216:29,depend,dependent,29,https://qutip.org,https://github.com/qutip/qutip/pull/216,1,['depend'],['dependent']
Integrability,"whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/mul.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg/cython_blas.pxd.; Compiling qutip/core/data/csr.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/ssystem.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/cy/math.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/core/data/ptrace.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4933,depend,depends,4933,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['depend'],['depends']
Integrability,"with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/mai",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1743,Depend,Dependencies,1743,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Depend'],['Dependencies']
Integrability,wrong propagator when using rhs_reuse with different time-dependent function,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18:58,depend,dependent,58,https://qutip.org,https://github.com/qutip/qutip/issues/18,1,['depend'],['dependent']
Integrability,"x_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-70.0.0 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/vector.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3604,depend,dependency,3604,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['depend'],['dependency']
Integrability,y.pxd.; Compiling qutip/core/cy/math.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/core/cy/coefficient.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/dense.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/reshape.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/project.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/dispatch.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/__init__.pxd.; Compiling qutip/core/data/ptrace.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/utility.pxd.; Compiling qutip/core/data/norm.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; [ 1/31] Cythonizing qutip/core/_brtensor.pyx; [ 2/31] Cythonizing qutip/core/_brtools.pyx; [ 3/31] Cythonizing qutip/core/cy/coefficient.pyx; [ 4/31] Cythonizing qutip/core/cy/math.pyx; [ 5/31] Cythonizing qutip/core/data/add.pyx; [ 6/31] Cythonizing qutip/core/data/base.pyx; [ 7/31] Cythonizing qutip/core/data/csr.pyx; [ 8/31] Cythonizing qutip/core/data/dense.pyx; [ 9/31] Cythonizing qutip/core/data/dia.pyx; [10/31] Cythonizing qutip/core/data/dispatch.pyx; [11/31] Cythonizing qutip/core/data/matmul.pyx; [12/31] Cythonizing qutip/core/data/mul.pyx; [13/31] Cythonizing qutip/core/data/norm.pyx; [14/31] Cythonizing qutip/core/data/reshape.pyx; [15/31] Cythonizing qutip/core/data/tidyup.pyx; [16/31] Cythonizing qutip/piqs/_piqs.pyx; [17/31] Cythonizing qutip/co,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:8838,depend,depends,8838,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['depend'],['depends']
Integrability,"ypeError Traceback (most recent call last); <ipython-input-116-e35e17a7e3ab> in <module>(); 6 [],; 7 [],; ----> 8 progress_bar=True). /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar); 319 types.BuiltinFunctionType, partial)):; 320 res = _sesolve_func_td(H, rho0, tlist,; --> 321 e_ops, args, options, progress_bar); 322 else:; 323 res = _sesolve_const(H, rho0, tlist,. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/sesolve.py in _sesolve_func_td(H_func, psi0, tlist, e_ops, args, opt, progress_bar); 565 #; 566 return _generic_ode_solve(r, psi0, tlist, e_ops, opt, progress_bar, norm,; --> 567 dims=psi0.dims); 568 ; 569 . /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/sesolve.py in _generic_ode_solve(r, psi0, tlist, e_ops, opt, progress_bar, state_norm_func, dims); 656 ; 657 if t_idx < n_tsteps - 1:; --> 658 r.integrate(r.t + dt[t_idx]); 659 ; 660 progress_bar.finished(). /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/scipy/integrate/_ode.py in integrate(self, t, step, relax); 406 self._y, self.t = mth(self.f, self.jac or (lambda: None),; 407 self._y, self.t, t,; --> 408 self.f_params, self.jac_params); 409 except SystemError:; 410 # f2py issue with tuple returns, see ticket 1187. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/scipy/integrate/_ode.py in run(self, f, jac, y0, t0, t1, f_params, jac_params); 863 args = ((f, jac, y0, t0, t1) + tuple(self.call_args) +; 864 (f_params, jac_params)); --> 865 y1, t, istate = self.runner(*args); 866 if istate < 0:; 867 warnings.warn(self.__class__.__name__ + ': ' +. /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip/cy/spmatfuncs.pyx in qutip.cy.spmatfuncs.cy_ode_psi_func_td (qutip/cy/spmatfuncs.c:4445)(). /home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/505:1658,integrat,integrate,1658,https://qutip.org,https://github.com/qutip/qutip/issues/505,1,['integrat'],['integrate']
Integrability,"​cgohlke</code></a>]</li>; <li>Release Python GIL when converting images using matrix operations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6418"">#6418</a> [<a href=""https://github.com/hmaarrfk""><code>@​hmaarrfk</code></a>]</li>; <li>Added ExifTags enums <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6630"">#6630</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not modify previous frame when calculating delta in PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6683"">#6683</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added support for reading BMP images with RLE4 compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6674"">#6674</a> [<a href=""https://github.com/npjg""><code>@​npjg</code></a>]</li>; <li>Decode JPEG compressed BLP1 data in original mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6678"">#6678</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>pylint warnings <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6659"">#6659</a> [<a href=""https://github.com/marksmayo""><code>@​marksmayo</code></a>]</li>; <li>Added GPS TIFF tag info <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6661"">#6661</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added conversion between RGB/RGBA/RGBX and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed seeking to an L frame in a GIF ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:3957,depend,dependabot,3957,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Integrability,"​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:2735,depend,dependabot,2735,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['depend'],['dependabot']
Integrability,"​radarhere</code></a>]</li>; <li>If first GIF frame has transparency for RGB_ALWAYS loading strategy, use RGBA mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6592"">#6592</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Round box position to integer when pasting embedded color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6517"">#6517</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed EXIF prefix when saving WebP <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6582"">#6582</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pad IM palette to 768 bytes when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6579"">#6579</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added DDS BC6H reading <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6449"">#6449</a> [<a href=""https://github.com/ShadelessFox""><code>@​ShadelessFox</code></a>]</li>; <li>Added support for opening WhiteIsZero 16-bit integer TIFF images <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6642"">#6642</a> [<a href=""https://github.com/JayWiz""><code>@​JayWiz</code></a>]</li>; <li>Raise an error when allocating translucent color to RGB palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6654"">#6654</a> [<a href=""https://github.com/jsbueno""><code>@​jsbueno</code></a>]</li>; <li>Moved mode check outside of loops <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6650"">#6650</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added reading of TIFF child images <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6569"">#6569</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:7420,depend,dependabot,7420,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['depend'],['dependabot']
Modifiability," = f_energies. F:\Anaconda3\lib\site-packages\qutip\floquet.py in floquet_modes(H, T, args, sort, U); 98 if U is None:; 99 # get the unitary propagator; --> 100 U = propagator(H, T, [], args); 101 ; 102 # find the eigenstates for the propagator. F:\Anaconda3\lib\site-packages\qutip\propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, **kwargs); 181 output = sesolve(H2, psi0, tlist, [],; 182 args=args, _safe_mode=False,; --> 183 options=Options(normalize_output=False)); 184 for k, t in enumerate(tlist):; 185 u[k] = sp_reshape(output.states[k].data, (N, N)). F:\Anaconda3\lib\site-packages\qutip\sesolve.py in sesolve(H, rho0, tlist, e_ops, args, options, progress_bar, _safe_mode); 153 elif n_str > 0:; 154 res = _sesolve_list_str_td(H, rho0, tlist, e_ops, args, options,; --> 155 progress_bar); 156 ; 157 elif isinstance(H, (types.FunctionType,. F:\Anaconda3\lib\site-packages\qutip\sesolve.py in _sesolve_list_str_td(H_list, psi0, tlist, e_ops, args, opt, progress_bar); 432 code = compile('from ' + config.tdname + ' import cy_td_ode_rhs',; 433 '<string>', 'exec'); --> 434 exec(code, globals()); 435 config.tdfunc = cy_td_ode_rhs; 436 . F:\Anaconda3\lib\site-packages\qutip\sesolve.py in <module>(). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(self, fullname); 443 self.pyxbuild_dir,; 444 build_inplace=self.inplace,; --> 445 language_level=self.language_level); 446 return module; 447 . F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:4860,config,config,4860,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['config'],['config']
Modifiability," For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_inf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1266,config,config,1266,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['config']
Modifiability," I do `import qutip as qt`, a different error occurs:; ```; AttributeError Traceback (most recent call last); <ipython-input-8-ea74e5ab1d35> in <module>; 1 # Evolve the system, request the solver to call process_rho at each time step.; 2 ; ----> 3 qt.mesolve(h_t, psi0, taulist, [], process_rho, args). ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 216 if not use_mesolve:; 217 return sesolve(H, rho0, tlist, e_ops=e_ops, args=args, options=options,; --> 218 progress_bar=progress_bar, _safe_mode=_safe_mode); 219 ; 220 if isket(rho0):. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in sesolve(H, psi0, tlist, e_ops, args, options, progress_bar, _safe_mode); 135 ; 136 res = _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, options,; --> 137 progress_bar, dims=psi0.dims); 138 if e_ops_dict:; 139 res.expect = {e: res.expect[n]. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 360 if expt_callback:; 361 # use callback method; --> 362 output.expect.append(e_ops(t, Qobj(cdata, dims=dims))); ...; ---> 16 evals_mat[idx[0],:] = qt.real(evals); 17 ; 18 # find the overlap between the eigenstates and psi. AttributeError: module 'qutip' has no attribute 'real'; ```. ### Code to Reproduce the Bug. [This notebook](https://nbviewer.ipython.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb). ### Code Output. _No response_. ### Expected Behaviour. Evolve the system without incurring any error. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.30; Matplotlib Version: 3.3.4; Python Version: 3.7.7; Number of CPUs: 72; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1930:3267,Evolve,Evolve,3267,https://qutip.org,https://github.com/qutip/qutip/issues/1930,1,['Evolve'],['Evolve']
Modifiability," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:2417,evolve,evolver,2417,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['evolve'],['evolver']
Modifiability," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:1931,evolve,evolve,1931,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['evolve'],['evolve']
Modifiability," are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1377,config,config,1377,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['config']
Modifiability," branch (using `pip install --pre qutip`). ### Code to Reproduce the Bug. ```shell; from qutip import * ; import numpy as np. s_00 = tensor(basis(2,0), basis(2,0)); P_00 = s_00 * s_00.dag(); e_ops = [ ; lambda t, state: (state.ptrace([0,1]) * P_00).tr() ; ]. tlist = np.linspace(0, 2*np.pi, 50); res = mesolve(tensor(identity(2), identity(2), identity(3)),; tensor(P_00, thermal_dm(3,0.1)), ; tlist, ; [],; e_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; UnboundLocalError Traceback (most recent call last); <ipython-input-1-49ed87444849> in <module>; 9 ; 10 tlist = np.linspace(0, 2*np.pi, 50); ---> 11 res = mesolve(tensor(identity(2), identity(2), identity(3)),; 12 tensor(P_00, thermal_dm(3,0.1)),; 13 tlist,. 1 frames; /usr/local/lib/python3.9/dist-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 242 func(0., v, *ode_args) + v; 243 ; --> 244 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 245 progress_bar, dims=rho0.dims); 246 res.num_collapse = len(c_ops). /usr/local/lib/python3.9/dist-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 517 for m in range(n_expt_op):; 518 if not isinstance(e_ops[m], Qobj) and callable(e_ops[m]):; --> 519 output.expect[m][t_idx] = e_ops[m](t, rho_t); 520 continue; 521 output.expect[m][t_idx] = expect_rho_vec(e_ops_data[m], r.y,. UnboundLocalError: local variable 'rho_t' referenced before assignment; ```. ### Expected Behaviour. no error. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.22.4; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.5.3; Python Version: 3.9.16; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.9/dist-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2118:1700,variab,variable,1700,https://qutip.org,https://github.com/qutip/qutip/issues/2118,1,['variab'],['variable']
Modifiability," coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1845,variab,variable,1845,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability," coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1752,variab,variable,1752,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability," frame <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7521"">#7521</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle disposing GIF background from outside palette <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7515"">#7515</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Seek past the data when skipping a PSD layer <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7483"">#7483</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>ImageMath: Inline <code>isinstance</code> check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7623"">#7623</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Update actions/upload-artifact action to v4 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7619"">#7619</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Import plugins relative to the module <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7576"">#7576</a> [<a href=""https://github.com/deliangyang""><code>@​deliangyang</code></a>]</li>; <li>Translate encoder error codes to strings; deprecate <code>ImageFile.raise_oserror()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7609"">#7609</a> [<a href=""https://github.com/bgilbert""><code>@​bgilbert</code></a>]</li>; <li>Updated readthedocs to latest version of Python <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7611"">#7611</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support reading BC4U and DX10 BC1 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6486"">#6486</a> [<a href=""https://github.com/REDxEYE""><code>@​REDxEYE</code></a>]</li>; <li>Optimize ImageStat.Stat.extrema <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7593"">#7593</a> [<a href=""https://github.com/flo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:6355,plugin,plugins,6355,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['plugin'],['plugins']
Modifiability," function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1699,Extend,Extended,1699,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['Extend'],['Extended']
Modifiability," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:1688,config,configured,1688,https://qutip.org,https://github.com/qutip/qutip/issues/1875,3,"['adapt', 'config']","['adapted', 'configured']"
Modifiability," install qutip from pip with the latest python 3.9 fails. When we run the installations from a fresh conda env (conda 4.8.5) using pip as. ```; pip install qutip; ```; or with conda (using both). ```; conda install -c conda-forge qutip; conda install qutip; ```. we get different errors. The errors do not occur if we use python3.8 while creating the conda environment as. ```; conda create -n py38 python==3.8; ```. Looking at the error it seems there is specification that prohibits python 3.9. @jakelishman @Ericgig any idea about this?. # Steps to reproduce (with conda 4.8.5). ```; conda create -n qutip-test python=3.9; conda activate qutip-test; conda install -c conda-forge qutip; ```. ### Error; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - qutip -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.5,<3.6.0a0|3.4.*']. Your python: python=3.9. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. Note that strict channel priority may have removed packages required for satisfiability.; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371:1119,flexible,flexible,1119,https://qutip.org,https://github.com/qutip/qutip/issues/1371,1,['flexible'],['flexible']
Modifiability," least, sesolve seems ok). Key feature of ENR states is that dims and shape do not match, which can cause issues if dims and not shape are used in various operations. Chatted with @hodgestar and in this case we think we pinned it down to iadd in QobjEvo creating an identity matrix based on the dims and not the shape. https://github.com/qutip/qutip/blob/afd160bce00df522b9bcb0f856bc06d63296998d/qutip/core/cy/qobjevo.pyx#L459. though perhaps other issues could arise. ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; N = 4 # number of cavities; M = 2 # number of cavity states; dims = [M] * N; #The number of excitations in the chain; excitations = 1 # total number of excitations; initial_excitiations = 1 # initial number of excitations; #Construct ENR operators and states. d = enr_destroy(dims, excitations); psi0 = enr_fock(dims, excitations, [initial_excitiations if m == 1 else 0 for m in range(N)]). H = sum([dd.dag() * dd for dd in d]). # coupling between cavities; e_ops = [dd.dag() * dd for dd in d]; c_ops = [0.01 * dd for dd in d]; times = np.linspace(0, 250, 1000); result = mesolve(H, psi0, times, c_ops, e_ops). #More minimal failure can be found with running this instead of mesolve:; H=QobjEvo(H); QobjEvo(H+0); ```. ### Code Output. ```shell; line 24, in <module>; QobjEvo(H); File ""qutip/core/cy/qobjevo.pyx"", line 196, in qutip.core.cy.qobjevo.QobjEvo.__init__; File ""qutip/core/cy/qobjevo.pyx"", line 757, in genexpr; File ""/home/neill/anaconda3/envs/qutip5dev/lib/python3.11/site-packages/qutip-5.0.0.dev0+nogit-py3.11-linux-x86_64.egg/qutip/core/qobj.py"", line 134, in out; return method(self, other); ^^^^^^^^^^^^^^^^^^^; File ""/home/neill/anaconda3/envs/qutip5dev/lib/python3.11/site-packages/qutip-5.0.0.dev0+nogit-py3.11-linux-x86_64.egg/qutip/core/qobj.py"", line 408, in __add__; return Qobj(_data.add(self._data, other._data),; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""qutip/core/data/dispatch.pyx"", line 583, in qutip.core.data.dispatc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2122:1094,coupling,coupling,1094,https://qutip.org,https://github.com/qutip/qutip/issues/2122,1,['coupling'],['coupling']
Modifiability," our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help wind",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1630,evolve,evolver,1630,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['evolve'],['evolver']
Modifiability," support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:1046,plugin,plugin-pyproject,1046,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['plugin'],['plugin-pyproject']
Modifiability," tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1). File ""/home/user/anaconda2/envs/Quantum/lib/python2.7/site-packages/qutip/qobj.py"", line 515, in __mul__; raise TypeError(""Incompatible Qobj shapes""). TypeError: Incompatible Qobj shap; ```. but when i do each part separately as follow I notice that the shapes are compatible:; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)); Out[161]: ; Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; ```; ```python; basis(16,1); Out[162]: ; Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; ```; The first has shape = (16, 16) and the second has shape = (16, 1), there shouldn't be any problems in performing matrix multiplication.; **Why I got this error and how to solve it.**. My environment is as follow:; ```; ~$ conda info. active environment : Quantum; active env location : /home/user/anaconda2/envs/Quantum; shell level : 1; user config file : /home/user/.condarc; populated config files : /home/user/.condarc; conda version : 4.5.4; conda-build version : 3.10.5; python version : 2.7.15.final.0; base environment : /home/user/anaconda2 (writable); channel URLs : https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/free/linux-64; https://repo.anaconda.com/pkgs/free/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; https://repo.anaconda.com/pkgs/pro/linux-64; https://repo.anaconda.com/pkgs/pro/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; package cache : /home/user/anaconda2/pkgs; /home/user/.conda/pkgs; envs directories : /home/user/anaconda2/envs; /home/user/.conda/envs; platform : linux-64; user-agent : conda/4.5.4 requests/2.18.4 CPython/2.7.15 Linux/3.13.0-141-generic ubuntu/14.04 glibc/2.19; UID:GID : 10",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:2910,config,config,2910,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['config'],['config']
Modifiability," value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Es",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1766,Variab,Variable,1766,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['Variab'],['Variable']
Modifiability," version 3.2.0 can not run testing in my mac system OS X EI Capitan. When I try:; `$ python3 -c ""import qutip.testing as qt; qt.run()""`; I get the follow message:; ; > ---; > ; > Ran 0 tests in 0.000s; 2. However, the testing.py and the folder 'tests' exist. I can run the test in the 'tests' folder one-by-one. For example, when I run:; `$ sudo python3 test_mesolve.py`; I get; ; > .....................; > Ran 21 tests in 48.167s; > ; > OK; 3. `sudo` is needed here for permission. For example, when I run: ; `$ python3 test_mesolve.py`; I get a set of the following error message. > # .....E...E.E...E..E..; > ## ERROR: mesolve: time-dependence as array with super as init cond; > ; > Traceback (most recent call last):; > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; > self.test(*self.arg); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/tests/test_mesolve.py"", line 638, in testMETDDecayAsArray; > out1 = mesolve(H, psi0, tlist, c_op_list, []); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 277, in mesolve; > progress_bar); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 661, in _mesolve_list_str_td; > cgen.generate(config.tdname + "".pyx""); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 116, in generate; > self.file(filename); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 78, in file; > self.file = open(filename, ""w""); > PermissionError: [Errno 13] Permission denied: 'rhs165050.pyx'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:1508,config,config,1508,https://qutip.org,https://github.com/qutip/qutip/issues/445,1,['config'],['config']
Modifiability, we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibility wrapper around BoFiN bosonic solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:2655,coupling,coupling,2655,https://qutip.org,https://github.com/qutip/qutip/pull/1601,1,['coupling'],['coupling']
Modifiability,"## Changelog; The changelog file is present in `qutip/qutip-doc`. This means that for each new release, the maintainers need to go through the merged PRs and update the file accordingly. . I propose introducing a copy of the changelog file, which would simplify maintenance: each contributor could update their own contribution without opening a PR in the separate repository, which often does not happen. A message of a basic template with checklist could be prompted in the PR for itself. . ## PR template; To prompt these actions, just like for the changelog, [a template](https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors) with suggested checklist could be made in the PRs. . ## Repositories refactoring ; Actually, this is all part of a wider problem for which the `qutip-doc` does not get well updated in general. In Qutip 4.5.0 I added a lot of missing elements to `functions.rst` and `classes.rst` in the api-doc. Moreover, the User guide is seldom updated. Maybe, moving the `qutip-doc` repository in the main `qutip/qutip` repository could help in this regard.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1172:755,refactor,refactoring,755,https://qutip.org,https://github.com/qutip/qutip/issues/1172,1,['refactor'],['refactoring']
Modifiability,"### Bug Description. I'm trying to follow [this tutorial](https://nbviewer.ipython.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb) with the current version of qutip, but ran into a bug in `mesolve`. If I do `from qutip import *` at the start of the notebook, the following error occurs:; ```; NameError Traceback (most recent call last); <ipython-input-9-d038ca745718> in <module>; 1 # Evolve the system, request the solver to call process_rho at each time step.; 2 ; ----> 3 mesolve(h_t, psi0, taulist, [], process_rho, args). ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 216 if not use_mesolve:; 217 return sesolve(H, rho0, tlist, e_ops=e_ops, args=args, options=options,; --> 218 progress_bar=progress_bar, _safe_mode=_safe_mode); 219 ; 220 if isket(rho0):. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in sesolve(H, psi0, tlist, e_ops, args, options, progress_bar, _safe_mode); 135 ; 136 res = _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, options,; --> 137 progress_bar, dims=psi0.dims); 138 if e_ops_dict:; 139 res.expect = {e: res.expect[n]. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 360 if expt_callback:; 361 # use callback method; --> 362 output.expect.append(e_ops(t, Qobj(cdata, dims=dims))); ...; ---> 11 H = qt.qobj_list_evaluate(h_t, tau, args); 12 ; 13 # find the M lowest eigenvalues of the system. NameError: name 'qt' is not defined; ```. If I do `import qutip as qt`, a different error occurs:; ```; AttributeError Traceback (most recent call last); <ipython-input-8-ea74e5ab1d35> in <module>; 1 # Evolve the system, request the solver to call process_rho at each time step.; 2 ; ----> 3 qt.mesolve(h_t, psi0, taulist, [], process_rho, args). ~/anaconda3/envs/fda/lib/python3.7/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1930:433,Evolve,Evolve,433,https://qutip.org,https://github.com/qutip/qutip/issues/1930,1,['Evolve'],['Evolve']
Modifiability,"### Bug Description. In `qutip.qobjevo.compile`, on line 1646, the `.pyx` file created by qutip is registered into the global variable `coeff_files` containing a `_file_list` object using the method `coeff_files.add(file_)`. The `add` method appends a `.pyx` extension on line 60 to the string `file_`; ```; self.files += [file_ + "".pyx""]; ```; However, the `file_` string generated by `_compiled_coeffs` already has the file extension, judging from the return value of `qutip.qobjevo_codegen._import_str`, on line 54; ```; return coeff_obj, try_file + ext; ```; I believe this causes `coeff_files.clean()` on line 1697 of `qutip.qobjevo.compile` to not delete the `.pyx` files after the cython class has been loaded. ### Code to Reproduce the Bug. ```shell; import qutip as qt; qt.sesolve([qt.identity(2), [qt.sigmax(), 'sin(t)']], qt.basis(2, 0),; tlist=[0, 2]); ```. ### Code Output. ```shell; creates the file cqobjevo_compiled_coeff_6095589624050.pyx in the working directory.; ```. ### Expected Behaviour. The `.pyx` file in the working directory should be deleted. ### Your Environment. ```shell; QuTiP Version: 4.7.2; Numpy Version: 1.25.2; Scipy Version: 1.11.2; Cython Version: 0.29.36; Matplotlib Version: 3.7.2; Python Version: 3.10.12; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2231:126,variab,variable,126,https://qutip.org,https://github.com/qutip/qutip/issues/2231,1,['variab'],['variable']
Modifiability,"### Bug Description. Might just be me mis-using the new 5.X branch of Qutip. I get a memory error when upgrading to the new branch. It appears to fail when performing self._to_dm(state) for each state. My states are vectors of length 800 - so it runs out of memory. Is it possible to request the solver only stores the wavefunction at each timestep? I want the wavefunction for each trajectory for each timestep. Alternatively one could introduce a new ""proj"" data storage to make this more efficient. ### Code to Reproduce the Bug. ```shell; result = qutip.ssesolve(; hamiltonian_qobj,; initial_state_qobj,; times.times,; sc_ops=sc_ops,; e_ops=[],; options={; ""method"": ""euler"",; ""progress_bar"": ""enhanced"",; ""store_states"": True,; ""keep_runs_results"": True,; ""improved_sampling"": False,; ""dt"": times.delta_t / times.fundamental_n,; },; ntraj=n_trajectories, # cspell:disable-line; ); ```. ### Code Output. ```shell; File ""..."", line 270, in solve_stochastic_schrodinger_equation; result = qutip.ssesolve(; ^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\stochastic.py"", line 461, in ssesolve; return sol.run(; ^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\multitraj.py"", line 198, in run; map_func(; File ""...\.venv\Lib\site-packages\qutip\solver\parallel.py"", line 122, in serial_map; remaining_ntraj = reduce_func(result); ^^^^^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\result.py"", line 645, in add ; op(trajectory); File ""...\.venv\Lib\site-packages\qutip\solver\result.py"", line 519, in _reduce_states; accu + self._to_dm(state); ~~~~~^~~~~~~~~~~~~~~~~~~~; File ""...\.venv\Lib\site-packages\qutip\core\qobj.py"", line 134, in out; return method(self, other); ^^^^^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\core\qobj.py"", line 408, in __add__ ; return Qobj(_data.add(self._data, other._data),; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""qutip\\core\\data\\dispatch.pyx"", line 392, in qutip.core.data.dispatch.Dispatcher.__call__; File """,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2299:698,enhance,enhanced,698,https://qutip.org,https://github.com/qutip/qutip/issues/2299,1,['enhance'],['enhanced']
Modifiability,"### Bug Description. Power spectrum of the resonator-qubit (2-level system) system does not show two peaks based on the state of the qubit. Qubit is prepared either in the ground or excited state before the density matrix equation of the coupled system is solved and then the power spectrum is computed off of steady state solution. ### Code to Reproduce the Bug. ```shell; import numpy as np; from matplotlib import pyplot; import qutip. N = 4 # number of cavity fock states; wc = wa = 1.0 * 2 * np.pi # cavity and atom frequency; g = 0.1 * 2 * np.pi # coupling strength; kappa = 0.75 # cavity dissipation rate; gamma = 0.25 # atom dissipation rate. # Jaynes-Cummings Hamiltonian; a = qutip.tensor(qutip.destroy(N), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2)); H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()). tlist = np.linspace(0, 100, 5000); corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a); wlist1, spec1 = qutip.spectrum_correlation_fft(tlist, corr); ```. ### Code Output. _No response_. ### Expected Behaviour. The power spectrum does show vacuum Rabi splitting, which is fine. However, if the qubit is prepared in the ground state or the excited state, the spectrum does not shift based on the state of the qubit. ### Your Environment. ```shell; qutip v 4.6; python v 3.9; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1806:554,coupling,coupling,554,https://qutip.org,https://github.com/qutip/qutip/issues/1806,1,['coupling'],['coupling']
Modifiability,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1823:214,extend,extends,214,https://qutip.org,https://github.com/qutip/qutip/issues/1823,1,['extend'],['extends']
Modifiability,### Bug Description. Some files are missing `__all__` and leaking variables. ### Code to Reproduce the Bug. ```shell; import qutip.measurement; qt.measurement.np; ```. ### Code Output. ```shell; <module 'numpy' from 'miniconda3/lib/python3.10/site-packages/numpy/__init__.py'>; ```. ### Expected Behaviour. Only user facing qutip functions should be available. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0; ```. ### Additional Context. `__all__` is missing in: ; - `qutip/measurements.py`; - `qutip/solve/piqs.py`; - `qutip/core/semidefinite.py`; which contain users facing functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2101:66,variab,variables,66,https://qutip.org,https://github.com/qutip/qutip/issues/2101,1,['variab'],['variables']
Modifiability,"### Bug Description. The Chi representation of channels is introduced in the documentation using an orthonormal basis, which happens to be the {Eye(2), Pauli matrices} / sqrt(2) for the case of a qubit. ; However, the implementation in the code uses an unnormalized one, yielding wrong results. In the file [superops_reps.py](https://github.com/qutip/qutip/blob/master/qutip/core/superop_reps.py), the variable _SINGLE_QUBIT_PAULI_BASIS is defined as:; ```; _SINGLE_QUBIT_PAULI_BASIS = (; identity(2).to(_data.CSR),; sigmax().to(_data.CSR),; sigmay().to(_data.CSR),; sigmaz().to(_data.CSR),; ); ```. ### Code to Reproduce the Bug. ```shell; import numpy as np; import qutip as qu. #Let's compute the chi matrix for F(rho) = -i[H, rho] for one qubit ; #We define the channel F(rho) = A_1 rho B^dag_1 + A_2 rho B^dag_2; #where ; #A_1 = -iH, B^dag_1 = Id(2) ; #A_2 = Id(2), B^dag_2 = iH. #With an example Hamiltonian. delta = 0.127; Omega = 0.5; H = qu.Qobj(np.array([[delta, Omega/2], [Omega/2, 0]])). print(H). #We define the Pauli basis as G = (Id(2), sigmax(2), sigmay(2), sigmaz(2))/np.sqrt(2). G = np.array([qu.identity(2), qu.sigmax(), qu.sigmay(), qu.sigmaz()])/np.sqrt(2). #The chi matrix is computed as: chi[i][j] = sum_k Tr(G[i]@A[k]) Tr(G[j]@B^dag[k]). chi = np.zeros([4, 4], dtype=np.complex64); for i in range(4):; for j in range(4):; chi[i,j] = np.trace(G[i]@A[0])*np.trace(G[j]@Bdag[0]) + np.trace(G[i]@A[1])*np.trace(G[j]@Bdag[1]); ; print(chi). #If we compare with the method from qutip, we see that the latter is off by a factor of 2. print(qu.to_chi(qu.liouvillian(H))); ```. ### Code Output. ```shell; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.127 0.25 ]; [0.25 0. ]]; [[0.+0.j 0.+0.5j 0.+0.j 0.+0.127j]; [0.-0.5j 0.+0.j 0.+0.j 0.+0.j ]; [0.+0.j 0.+0.j 0.+0.j 0.+0.j ]; [0.-0.127j 0.+0.j 0.+0.j 0.+0.j ]]; Quantum object: dims = [[[2], [2]], [[2], [2]]], shape = (4, 4), type = super, isherm = True, superrep = chi; Qobj data =; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2259:402,variab,variable,402,https://qutip.org,https://github.com/qutip/qutip/issues/2259,1,['variab'],['variable']
Modifiability,"### Bug Description. The ReadTheDocs build fails with:; ```; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```; See https://readthedocs.org/projects/qutip/builds/23361676/ for the full build log (not sure if this is publicly visible -- if not, I can add QuTiP admins as maintainers on readthedocs.org if they give me their username). The QuTiP ReadTheDocs configuration is at: https://github.com/qutip/qutip/blob/master/.readthedocs.yaml. Probably this can be fixed by adding an appropriate dependency to https://github.com/qutip/qutip/blob/master/doc/rtd-environment.yml. ### Code to Reproduce the Bug. ```shell; Attempt to build the documentation on ReadTheDocs.; ```. ### Code Output. ```shell; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```. ### Expected Behaviour. ReadTheDocs builds successfully. ### Your Environment. ```shell; QuTiP version: master branch; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2317:891,config,configuration,891,https://qutip.org,https://github.com/qutip/qutip/issues/2317,1,['config'],['configuration']
Modifiability,"### Bug Description. The documentation of mesolve states that lists of callback functions can be passed in the parameter e_ops:. > A list of operators as Qobj and/or callable functions (can be mixed) or a single callable function. For operators, the result’s expect will be computed by [qutip.expect](https://qutip.org/docs/latest/apidoc/functions.html#module-qutip.expect). For callable functions, they are called as f(t, state) and return the expectation value. A single callback’s expectation value can be any type, but a callback part of a list must return a number as the expectation value. However, I find that passing a callback function in a list e_ops = [my_callback] gives an exception:. > UnboundLocalError: local variable 'rho_t' referenced before assignment. By contrast, I find that passing a callback function directly as e_ops = my_callback does not cause an issue. This is important because I am unable to pass lists of callback functions which, according to the documentation, I should be able to do. ### Code to Reproduce the Bug. ```shell; # Imports ; import qutip as qt; import numpy as np. # System parameters; w = 1; kappa = 0.1; # Size of the Hilbert space; n_max = 10; # Annihilation operator; a = qt.destroy(n_max); # Callback function; my_callback = lambda t, rho_t : rho_t.purity(). # Hamiltonian; H = w * a.dag() * a; # Initial state; psi_0 = ( qt.fock(n_max, 0) + qt.fock(n_max, 1) ) / np.sqrt(2); rho_0 = qt.ket2dm( psi_0); # Integration times; times = np.linspace(0, 2/kappa, 5000); # Collapse operators; c_ops = [np.sqrt(kappa) * a]; # Observables to compute; e_ops = [my_callback]. # Solve the master equation; output = qt.mesolve(H, rho_0, times, c_ops, e_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; UnboundLocalError Traceback (most recent call last); Cell In[17], line 29; 26 e_ops = [my_callback]; 28 # Solve the master equation; ---> 29 output = qt.mesolve(H, rho_0, times, c_ops, e_ops); 31",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2189:725,variab,variable,725,https://qutip.org,https://github.com/qutip/qutip/issues/2189,1,['variab'],['variable']
Modifiability,"### Bug Description. The rendering of the process matrix looks weird in qutip-v5, The bottom of the bars behind is on top of the lower bars in front of it. (This is a CNOT gate with some errors); ![image](https://github.com/qutip/qutip/assets/12125783/970923af-e361-4cdf-a573-32b477ede6e5). Maybe the order of the bar rendering is reversed during the last refactoring of the plotting library?. ### Code to Reproduce the Bug. ```python; import numpy as np; import qutip. # Create a noisy CNOT gate; IZ = qutip.tensor([qutip.qeye(2), qutip.sigmaz()]); gate = qutip.gates.cnot(); noisy_gate = (-2.j * np.pi*(IZ/8/20)).expm() @ gate; fid = qutip.average_gate_fidelity(noisy_gate, qutip.gates.cnot()); print(f""noisy CNOT fidelity {fid}""). # Plot process matrix; op_basis = [[qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]] * 2; chi = qutip.qpt(qutip.to_super(noisy_gate), op_basis); qutip.qpt_plot_combined(; chi, lbls_list=[[""i"", ""x"", ""y"", ""z""]] * 2, title=""Process Matrix""; ); ```. ### Code Output. ```; noisy CNOT fidelity 0.9987669334932512; ```; ![image](https://github.com/qutip/qutip/assets/12125783/bc6ce1b4-e3ad-4c6c-988f-a3701e238ebe). ### Expected Behaviour. The bars should be rendered correctly. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: 1.26.4; Scipy Version: 1.12.0; Cython Version: None; Matplotlib Version: 3.8.3; Python Version: 3.11.8; Number of CPUs: 40; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2400:356,refactor,refactoring,356,https://qutip.org,https://github.com/qutip/qutip/issues/2400,1,['refactor'],['refactoring']
Modifiability,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1831:113,variab,variable,113,https://qutip.org,https://github.com/qutip/qutip/issues/1831,1,['variab'],['variable']
Modifiability,"### Bug Description. When initializing an `EnhancedTextProgressBar` object the `__init__` method is calling the `start` method of it's super class instead of it's own. When then using `update` (without calling `start` manually again) there will be an `AttributeError` because `width` is not getting initialized by `__init__`. ### Code to Reproduce the Bug. ```shell; from qutip.ui.progressbar import *. n = 10; a = EnhancedTextProgressBar(n); # a.start(n); for i in range(n):; a.update(i); a.finished(); ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""C:\Users\Name\Desktop\qutip_bug.py"", line 6, in <module>; a.update(i); File ""C:\Users\Name\AppData\Local\Programs\Python\Python311\Lib\site-packages\qutip\ui\progressbar.py"", line 96, in update; all_full = self.width - 2; ^^^^^^^^^^; AttributeError: 'EnhancedTextProgressBar' object has no attribute 'width'; ```. ### Expected Behaviour. Proper initialization of the `width` attribute by `EnhancedTextProgressBar.__init__`. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. Currently in master the `__init__` for both `TextProgressBar` and `EnhancedTextProgressBar` have been commented out and made to just pass. See https://github.com/qutip/qutip/blob/af49884aa1db47a980626ac00adfe83277d8d261/qutip/ui/progressbar.py#L66 and https://github.com/qutip/qutip/blob/af49884aa1db47a980626ac00adfe83277d8d261/qutip/ui/progressbar.py#L94. I would suggest making them both call their own `start` method to omit an additional call of start by the user right after initialization. This would also make both classes be in line with the usage suggested by the docstring of `BaseProgressBar.` Otherwise I would suggest to include the call to start in said docstr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2148:43,Enhance,EnhancedTextProgressBar,43,https://qutip.org,https://github.com/qutip/qutip/issues/2148,4,['Enhance'],['EnhancedTextProgressBar']
Modifiability,"### Bug Description. When setting `CoreOptions(default_dtype)` I expect all quantum objects to inherit the specified dtype. States and operators defined in states.py and operators.py do so but some functions return other data types. like `eigenstates()`. This can lead to some unexpected behavior (and very inefficient code). Seems like a good first issue for someone to go around and find functions where this should be enforced and do so? . Alternatively, would forcing CoreOptions(default_dtype) to be used in `Qobj` creation itself be easier? Though I kinda feel it might cause secondary problems, like if you wanted largely to use a default dtype but then have special cases where you don't, etc etc. ### Code to Reproduce the Bug. ```shell; with CoreOptions(default_dtype=""CSR""):; H = sigmaz() + sigmax(); print(H.eigenstates()[1][0].data); ```. ### Code Output. ```shell; Dense(shape=(2, 1), fortran=True); ```. ### Expected Behaviour. Return sparse states. ### Your Environment. ```shell; QuTiP Version: 5.0.0a2; Numpy Version: 1.26.0rc1; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.6.3; Python Version: 3.11.7; Number of CPUs: 28; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328:95,inherit,inherit,95,https://qutip.org,https://github.com/qutip/qutip/issues/2328,1,['inherit'],['inherit']
Modifiability,"### Bug Description. `UnboundLocalError: local variable 'rho_t' referenced before assignment` is thrown when `mesolve` is used with callable `e_ops`. Note, it seems to be fixed on the 5.x branch (using `pip install --pre qutip`). ### Code to Reproduce the Bug. ```shell; from qutip import * ; import numpy as np. s_00 = tensor(basis(2,0), basis(2,0)); P_00 = s_00 * s_00.dag(); e_ops = [ ; lambda t, state: (state.ptrace([0,1]) * P_00).tr() ; ]. tlist = np.linspace(0, 2*np.pi, 50); res = mesolve(tensor(identity(2), identity(2), identity(3)),; tensor(P_00, thermal_dm(3,0.1)), ; tlist, ; [],; e_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; UnboundLocalError Traceback (most recent call last); <ipython-input-1-49ed87444849> in <module>; 9 ; 10 tlist = np.linspace(0, 2*np.pi, 50); ---> 11 res = mesolve(tensor(identity(2), identity(2), identity(3)),; 12 tensor(P_00, thermal_dm(3,0.1)),; 13 tlist,. 1 frames; /usr/local/lib/python3.9/dist-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 242 func(0., v, *ode_args) + v; 243 ; --> 244 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 245 progress_bar, dims=rho0.dims); 246 res.num_collapse = len(c_ops). /usr/local/lib/python3.9/dist-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 517 for m in range(n_expt_op):; 518 if not isinstance(e_ops[m], Qobj) and callable(e_ops[m]):; --> 519 output.expect[m][t_idx] = e_ops[m](t, rho_t); 520 continue; 521 output.expect[m][t_idx] = expect_rho_vec(e_ops_data[m], r.y,. UnboundLocalError: local variable 'rho_t' referenced before assignment; ```. ### Expected Behaviour. no error. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.22.4; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.5.3; Python Version: 3.9.16; Number of CPUs: 2; BLAS Info: OPENBLAS;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2118:47,variab,variable,47,https://qutip.org,https://github.com/qutip/qutip/issues/2118,1,['variab'],['variable']
Modifiability,"### Bug Description. qutip has functions to detect the available of BLAS libraries. For instance on my system (debian unstable), `python3 -c ""import qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:746,config,configuration,746,https://qutip.org,https://github.com/qutip/qutip/issues/2053,4,['config'],"['config', 'configuration']"
Modifiability,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876:33,config,configuration,33,https://qutip.org,https://github.com/qutip/qutip/issues/1876,8,['config'],"['config', 'configrc', 'configuration']"
Modifiability,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:625,plugin,plugin-pyproject,625,https://qutip.org,https://github.com/qutip/qutip/issues/1875,2,['plugin'],['plugin-pyproject']
Modifiability,"### Describe the Issue!. By building QuTiP 5 with:; ```; python -m build \; --wheel \; --config-setting=""--global-option=--with-idxint-64""; ```; one can use 64-bit integer indices. Currently this is only documented in the changelog. We should also write a short guide on it, perhaps. It might also be worthwhile adding a CI build for the 64-bit index case.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2278:89,config,config-setting,89,https://qutip.org,https://github.com/qutip/qutip/issues/2278,1,['config'],['config-setting']
Modifiability,"### Describe the Issue!. Dysolve algorithm proposed in paper [""Fast and differentiable simulation of driven quantum systems""](https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.3.033266) by Ross Shillito et.al, ; behaves much faster than standard numerical integrators in time-evolve driven quantum systems. ; Is there any plan to implement it in the qutip, or it has been implemented in qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2394:295,evolve,evolve,295,https://qutip.org,https://github.com/qutip/qutip/issues/2394,1,['evolve'],['evolve']
Modifiability,"### Describe the Issue!. Hi, ; in QuTiP 5 I don' t have to compile `QobjEvo` manually. That's great! ; Since the `compile()` function is removed in QuTiP 5, all code that was written in version 4 breaks.; Maybe, we could add an empty `compile()` function with a deprecation warning, to allow users to adapt before we completely remove it.; @Ericgig, what do you think?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949:301,adapt,adapt,301,https://qutip.org,https://github.com/qutip/qutip/issues/1949,1,['adapt'],['adapt']
Modifiability,"### Describe the Issue!. Hi,; I‘m tring to simulate the population dynamics and polarization evolution in a system where a ladder-type three-level system interacts with an ultrafast pulse.; ![image](https://github.com/qutip/qutip/assets/103415418/6a5c57f6-32ec-4c87-b0e1-22a5b4df5d7a); And this is the Hamiltonian I want to simulate.; ![image](https://github.com/qutip/qutip/assets/103415418/eb81196d-49ba-4f87-84c7-34880bd1c81f); But I didn't get the expected results, the system always stays at ground state. . I suspect that I failed to simulate the right model, especially for the modeling of the three-level model. Because I had tried to remove the pulse and simulate the dynamics of excited three-level system, but still it didn't evolve. . So I think first I need advice for the right modelling of three-level system, then go to the light-matter interaction. I'm looking forward to your generous advice. Thanks. The scripts for my model and my model without pulse are attached. The model without pulse:. ```python; from qutip import * # for quantum dynamics; import numpy as np # for numerical manipulations; from matplotlib import pyplot as plt. #%% Parameters; hbar = 0.658211951 # in eV fs. E1 = 0; E2 = 1.722 # eV; E3 = 3.426 # eV. t_fwhm = 80 # [fs]; t0 = 2*t_fwhm; tlist= np.linspace(0,5*t0,800) # [fs]; #%% Construct Hamiltonian; one, two, three = three_level_basis(); sig11 = one * one.dag(); sig22 = two * two.dag(); sig33 = three * three.dag(); sig13 = one * three.dag(); sig23 = two * three.dag(); sig12 = one * two.dag(). H = E1*sig11+E2*sig22+E3*sig33. # collapse operators; gamma2 = 0.006/hbar; gamma3 = 0.006/hbar. c1 = gamma2*sig22; c2 = gamma3*sig33; c_ops = [c1,c2]. rho0 = sig22. e_ops = [sig11,sig22,sig33]. output = mesolve(H,rho0,tlist,c_ops,e_ops); plt.plot(tlist, output.expect[0],label = r""$\rho_{11}$""); plt.plot(tlist, output.expect[1],label = r""$\rho_{22}$""); plt.plot(tlist, output.expect[2],label = r""$\rho_{33}$""); plt.legend(); ```; The model with pulse:; ```pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2355:737,evolve,evolve,737,https://qutip.org,https://github.com/qutip/qutip/issues/2355,1,['evolve'],['evolve']
Modifiability,"### Describe the Issue!. Hi. I'm using ```mesolve``` to evolve a system under a double-well(DW) potential. By varying *zeta* from -1 to larger values, the DW starts to form after *zeta* exceeds 0. The way zeta changes in time is determined by a *ramp function*. Giving the solver a ```tlist``` it's expected that the solver evolves the system from ```tlist[0]``` to ```tlist[-1]```. Oddly the solver doesn't pick the final time:; ```python; import numpy as np; from qutip import *. # constants. gamma = 2.65e-08 #dim.less. # problems's variables. zeta_i = -1 # initial zeta value; dim = 50. # Initial and Final Hamiltonians. b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = gamma * (b + b.dag())**4. # Hamiltonian of system with a DW potential; def H_DW(zeta, dim):; b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = +gamma * (b + b.dag())**4; return H0 + np.sign(zeta) * H1 / 0.25 + np.sqrt(np.abs(0.25 * zeta))**(-3) * H2. # Coefficients. def H1_coeff(t,args):; zeta = args['zeta']; return np.sign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1821:56,evolve,evolve,56,https://qutip.org,https://github.com/qutip/qutip/issues/1821,3,"['evolve', 'variab']","['evolve', 'evolves', 'variables']"
Modifiability,"### Describe the Issue!. I'm trying to follow the [CRAB / pulse optimizer tutorial](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-pulseoptim-CRAB-QFT.ipynb) but realize that my Hamiltonian takes a slightly different form than the control form (""H_c"") they use. They use a list of QObjs w/ variable amplitude, whereas my Hamiltonian has the following term which seems challenging to input:. $$ ; f_j(t) (a_j e^{-i \phi_j(t)} - a^\dagger_j e^{i \phi_j(t)}); $$. Even for $j \in [1]$ only, how can I make it so that this term has two controls, one which controls the amplitude and one which controls the phase?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2297:313,variab,variable,313,https://qutip.org,https://github.com/qutip/qutip/issues/2297,1,['variab'],['variable']
Modifiability,"### Describe the Issue!. The document of QuTiP said installing from the source code by `python setup.py install --with-openmp` doesn't support for macOS. But this is actually easy to deal with. . Step 1. Install GNU GCC and OpenMP from home-brew; ``; $ brew install gcc libomp; ``. Step 2. Export environment CC CXX instead of `/usr/bin/gcc` by `/usr/local/bin/gcc-13`; ``; $ export CC=`which gcc-13`; $ export CXX=`which g++-13`; ``. Now it is worked in my environment that `python setup.py build --with-openmp` generates a OpenMP edition QuTiP. And as for INTEL MKL supporting info, the judgment for macOS is different, you can find the way [here](https://mruss.dev/2020/04/23/numpy-mkl/) to get this information rather than `hasattr(config,'mkl_info')`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2274:736,config,config,736,https://qutip.org,https://github.com/qutip/qutip/issues/2274,1,['config'],['config']
Modifiability,"### Describe the Issue!. qutip mesolve gives me different population evolve depending on that initial state is state vector or density matrix. And, in some situation, it gives me negative population. It doesn't make sense... Does anyone encounter this problem?. Population evolvement with State vector as initial state; ![image](https://github.com/qutip/qutip/assets/105193507/f4857bde-cade-4fac-ad31-33edc7d93b63). Pupulation evolvement with Density matrix as initial state; ![image](https://github.com/qutip/qutip/assets/105193507/d3e82af0-e0d7-43fa-8844-b68887c9a394). Here is my code: I'm just producing Rabi oscillation by applying microwave whose frequency is the difference between eigenenery［1］ and eigenenergy［0］. ```; import qutip as qt; import numpy as np; import matplotlib.pyplot as plt. # Constants (G or us). Sx, Sy, Sz = qt.jmat(1); S0 = qt.qeye(3). ge = 2 * np.pi * -2.8 # rad MHz/G. B = 60 # G; theta = 0 # degree; Bx = B * np.sin(np.pi * theta / 180); Bz = B * np.cos(np.pi * theta / 180). def H_GS():; D = 2 * np.pi * 2870 # rad MHz; H_D = D * (Sz**2 - 2/3 * S0); H_B = ge * (Bx * Sx + Bz * Sz); H_GS = H_D + H_B; return H_GS. ee, ev = H_GS().eigenstates(). def evolve_test():; H_MW = ge * Sx; def H_MW_coeff(t, args):; omega = ee[1] - ee[0]; Omega = 1/0.1/ge; return Omega * np.cos(omega * t); H = [H_GS(), [H_MW, H_MW_coeff]]; psi0 = qt.basis(3, 0); rho0 = qt.ket2dm(qt.basis(3, 0)); rhoe = qt.ket2dm(qt.basis(3, 0)); t = np.linspace(0, 4, 4 * 1000); result = qt.mesolve(H, rho0, t, progress_bar=True); states = result.states; popm = [qt.expect(rhoe, state) for state in states]; plt.plot(t, popm); plt.show(); return 0. evolve_test(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2229:69,evolve,evolve,69,https://qutip.org,https://github.com/qutip/qutip/issues/2229,3,['evolve'],"['evolve', 'evolvement']"
Modifiability,"### Discussed in https://github.com/qutip/qutip/discussions/2255. <div type='discussions-op-text'>. <sup>Originally posted by **shiv6510** November 2, 2023</sup>; Hi, I am encountering some strange dynamics with mesolve that I don't understand. I have a simple hamiltonian of a harmonic oscillator with resonant frequency of 5 GHz. If I evolve the initial state (|0> + |1>)/sqrt(2) under the system hamiltonian (no time dependence) I would expect the expectation values of the |0> and |1> to stay at 0.5. (Amplitudes of eigenstates should not change). . However, when I plot the expectation values, I see a splitting of overtime, where the expectation value of |0> grows linear over time and |1> shrinks linearly with time. Looking through the forums, I figured it was an issue with the ode solver but playing around with the options (max_steps, rtol, atol, etc.) only changes the rate at which the expectation value drops (or grows); it doesn't get rid of the splitting. Any insight into this problem would be of great help :). Code:; ***********************************************************************; import matplotlib.pyplot as plt; from numpy import *; from scipy.optimize import fsolve; from qutip import *. a = destroy(20); wr = 5 # GHz; H = wr * a.dag() * a. e_nrgs, e_states = H.eigenstates(). psi0 = (e_states[0] + e_states[1]).unit(); wait_time = 2000; t_list = arange(0,wait_time+0.02, 0.01). options = Options(max_step=1/(wr * 100)); output = sesolve(2 * pi * H, ; psi0, ; t_list, ; e_ops=[e_states[0].proj(), e_states[1].proj()], ; args=None,; options=options,; progress_bar=True); ***********************************************************************. Plot:. plt.plot(t_list, output.expect[0], color='red', label='<0>'); plt.plot(t_list, output.expect[1],label='<1>'); plt.xlabel('Time[ns]'); plt.ylabel('Expectation Value'); plt.legend(); plt.show(). <img width=""840"" alt=""image"" src=""https://github.com/qutip/qutip/assets/43760523/c55016b4-5fbc-4032-b8e0-d143152250bb"">. </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258:337,evolve,evolve,337,https://qutip.org,https://github.com/qutip/qutip/issues/2258,1,['evolve'],['evolve']
Modifiability,"### Objective; The primary objective was to improve the computational efficiency of the `correlation_2op_1t` function in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:296,enhance,enhance,296,https://qutip.org,https://github.com/qutip/qutip/pull/2395,2,"['Enhance', 'enhance']","['Enhancements', 'enhance']"
Modifiability,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1894:544,config,configure,544,https://qutip.org,https://github.com/qutip/qutip/issues/1894,2,['config'],"['configuration', 'configure']"
Modifiability,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1893:232,plug-in,plug-in,232,https://qutip.org,https://github.com/qutip/qutip/issues/1893,1,['plug-in'],['plug-in']
Modifiability,"### Problem Description. Hello, I am recently using `qt.propagator ` to calculate the time evolution of states with collapse operators. I am having memory usage problem due to qutip's matrix conversion.; This matrix conversion is especially memory intensive when performing propagator calculation with collapse operators. Current qutip propagator uses numpy array to store the **raw calculation data**.; `u = np.zeros([N * N, N * N, len(tlist)], dtype=complex)`. Qutip then converts matrices at each time list t at the end of this function.; ```; if unitary_mode == 'batch':; out[:] = [Qobj(u[k], dims=dims) for k in range(len(tlist))]; else:; out[:] = [Qobj(u[:, :, k], dims=dims) for k in range(len(tlist))]; ```. This conversion effectively requires the same memory usage as ""u"".; This behavior is problematic when raw results `u` consumes a lot of memory.; I would be happy if there is an optional argument to skip `Qobj(u[k])` process. ### Proposed Solution. Add a feature to select if qt.propagator performs conversion to Qobj or just return numpy array.; Rewrite the code of ""qutip/propagator.py"" around line 221 something like. ```; if not skip_qutip_conversion:; out = np.empty((len(tlist),), dtype=object); if unitary_mode == 'batch':; out[:] = [Qobj(u[k], dims=dims) for k in range(len(tlist))]; else:; out[:] = [Qobj(u[:, :, k], dims=dims) for k in range(len(tlist))]; else:; out = u; return out; ```. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2312:1062,Rewrite,Rewrite,1062,https://qutip.org,https://github.com/qutip/qutip/issues/2312,1,['Rewrite'],['Rewrite']
Modifiability,"### Problem Description. I'm wondering if it's possible to use `mesolve` to find the evolution of an arbitrary operator in the Heisenberg picture, where the operators carry all of the time dependence, and thus evolve according to the _adjoint_ Lindblad equation. For some operator $O$, the coherent part is $+i [H,O]$ and the dissipator for a collapse operator $L$ is $L^\dagger O L - \frac{1}{2} L^\dagger L O - \frac{1}{2} O L^\dagger L $.; In particular, I was wondering if there is a way to ""hack"" mesolve to do this without any modification, such as using $-O$ instead of $O$ so that it matches the coherent Schrodinger picture evolution $-i [H,O]$ that `mesolve` does, but I'm not sure about the dissipator. Using $L^\dagger$ instead of $L$ would also change the anticommutator term, which actually shouldn't change between the two pictures. Is there a sneaky way of making this work without too much modification? Otherwise, perhaps this would be a good feature to add?. ### Proposed Solution. Instructions on how to use `mesolve` to solve for the time evolution of an operator in the Heisenberg (not Schrodinger) picture, or an extension of `mesolve` to allow for this, possibly through an option in the function call like `picture=True` which defaults to Schrodinger but if False uses the Heisenberg picture. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2160:210,evolve,evolve,210,https://qutip.org,https://github.com/qutip/qutip/issues/2160,1,['evolve'],['evolve']
Modifiability,"### Problem Description. The `improved_sampling` option was recently added to `mcsolve`. It might also be useful to have in `nm_mcsolve`, but adaptations to the code are required to make it work. Currently, we have disabled this option for the `NonMarkovianMCSolver`, see [PR 2234](https://github.com/qutip/qutip/pull/2234). Since `NonMarkovianMCSolver` inherits from `MCSolver`, one might expect this option to work ""out of the box"". The technical reason why it does not is that `nm_mcsolve` calculates the value of an influence martingale, which is factored into the calculation of expectation values in the custom result class `NmmcResult`. If `improved_sampling` is enabled, the result class `McResultImprovedSampling` is used instead, which is not aware of the martingale. ### Proposed Solution. Both the improved sampling algorithm and `nm_mcsolve` give trajectories a *weight*. In the former case, the weight is related to the probability of the trajectory without jumps; in the latter case it is the influence martingale. I imagine it might be useful to give `McResult` itself the capability to handle weighted trajectories. ; This capability would be useful for one additional purpose: if we want to allow mixed initial conditions for `mcsolve` in the future. In this case, the trajectories would need to be weighted with a correction factor, because the fraction $f_i$ of trajectories starting in a state $i$ will generally not be equal to the corresponding eigenvalue $p_i$ of the density matrix $\rho = \sum p_i |i \rangle\langle i|$. (Hence, the correction factor would be $p_i / f_i$.). If people think this would be useful (including the mixed initial states), I will try to implement this proposal once I can find some time to do so. ### Alternate Solutions. Alternatively, we could leave things as they are now and not support the improved sampling for `nm_mcsolve`. Another less invasive option would be copying the improved sampling algorithm to `nm_mcsolve` (adding a `NmmcResultIm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2235:142,adapt,adaptations,142,https://qutip.org,https://github.com/qutip/qutip/issues/2235,2,"['adapt', 'inherit']","['adaptations', 'inherits']"
Modifiability,"### Problem Description. The options that can be passed to the solvers are not entirely clear by looking at the documentation. For example:; ![image](https://github.com/qutip/qutip/assets/57414022/2c36d3a5-ca7b-42aa-86d2-cc6f273ed115); Does not show the explicit options even thought it refers to them in the parameter documentation. For comparison, SESolver does show the options. This I assume is because the options are inherited from SESolver. But this is not clear either by looking at `MESolver`'s rendered documentation.; ![image](https://github.com/qutip/qutip/assets/57414022/0d8d7a4d-6326-4d1a-a25e-d67264906f85). When using `help(MESolver)` the documentation of the class is much clearer but perhaps too verbose for the online documentation. ### Proposed Solution. I would suggest we render the options property explicitly for each solver. I would also consider rendering the documentation related to the `run` method. If not, we should render at least `Solver` documentation which does not seem to be listed in the class API documentation for solvers. Affected solvers:; - [ ] MESolver; - [ ] SMESolver; - [ ] SSESolver; - [ ] NonMarkovianMCSolver. ### Alternate Solutions. _No response_. ### Additional Context. The documentation was taken from qutip 5.0 ""ReadTheDocs"".",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2163:423,inherit,inherited,423,https://qutip.org,https://github.com/qutip/qutip/issues/2163,1,['inherit'],['inherited']
Modifiability,"### Problem Description. `ssesolve` is slow when used with the ""euler-maruyama"" solver and a large number of sparse noise oprators. ### Proposed Solution. Qutip should take into account sparsity in sc_ops when used with the ""euler-maruyama"" solver. ### Alternate Solutions. _No response_. ### Additional Context. I'm currently using `qutip.ssesolve`, however for my application I require a large number of independent noise operators. This currently causes the solver to run very slowly, however in theory increasing the number of operations should only result in a small overhead if the underlying matrix is sparse. If I add together all matrices it runs much quicker. Is this something that has already been addressed in the 5.0 refactor? I am potentially interested in making a pr to fix this but I don't want to waste effort on something which is already fixed or undesirable",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2298:731,refactor,refactor,731,https://qutip.org,https://github.com/qutip/qutip/issues/2298,1,['refactor'],['refactor']
Modifiability,"#1347 changed the setup of the tests, but it went unnoticed (sorry!) that the Python version wasn't set correctly; we've been silently testing everything against python-latest since then. That wasn't an issue as long as Python 3.8 was the latest, but the release of Python 3.9 (and the fact we haven't rebuilt a binary distribution of QuTiP for 3.9) caused all Linux builds to break. Mac builds were unaffected because they set `$_PYTHON_VERSION` to a string literal. The Linux Python version was not set correctly because it attempted to set it to the definition of `$TRAVIS_PYTHON_VERSION` _as defined during the `env` stage of the Travis build_. Unfortunately, this environment variable isn't defined until after that stage, which caused us to pass an empty constraint on the Python version to conda, resulting in us getting the latest version. This moves this part of the environment setup into the pre-install phase so `TRAVIS_PYTHON_VERSION` is now set, and guards it with a conditional so the mac builds can still neatly override the standard setup. **Changelog**; Fix Python version setting in CI tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1381:681,variab,variable,681,https://qutip.org,https://github.com/qutip/qutip/pull/1381,1,['variab'],['variable']
Modifiability,"(H, psi0, tlist, c_op_list, [sm.dag() * sm], H_args); 36 ; 37 return output.expect[0]. ~\Anaconda3\lib\site-packages\qutip\mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 252 ss = H; 253 elif isinstance(H, (list, Qobj, QobjEvo)):; --> 254 ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); 255 elif callable(H):; 256 ss = _mesolve_func_td(H, c_ops, rho0, tlist, args, options). ~\Anaconda3\lib\site-packages\qutip\mesolve.py in _mesolve_QobjEvo(H, c_ops, tlist, args, opt); 298 ; 299 nthread = opt.openmp_threads if opt.use_openmp else 0; --> 300 L_td.compile(omp=nthread); 301 ; 302 ss = SolverSystem(). ~\Anaconda3\lib\site-packages\qutip\qobjevo.py in compile(self, code, matched, dense, omp); 1557 self.args,; 1558 self.dynamics_args,; -> 1559 self.tlist); 1560 coeff_files.add(file_); 1561 self.coeff_files.append(file_). ~\Anaconda3\lib\site-packages\qutip\qobjevo_codegen.py in _compiled_coeffs(ops, args, dyn_args, tlist); 122 code = _make_code_4_cimport(ops, args, dyn_args, tlist); 123 coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; --> 124 ""CompiledStrCoeff"", True); 125 return coeff_obj(ops, args, tlist, dyn_args), code, filename; 126 . ~\Anaconda3\lib\site-packages\qutip\qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext. UnboundLocalError: local variable 'e' referenced before assignment. ------------------------------------------------------; Software	Version:; QuTiP	4.5.0; Numpy	1.18.1; SciPy	1.4.1; matplotlib	3.1.3; Cython	0.29.15; Number of CPUs	4; BLAS Info	INTEL MKL; IPython	7.12.0; Python	3.7.6 (default, Jan 8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]; OS	nt [win32]; Sat May 02 19:27:58 2020 ???? (?W???); -------------------------------------------------------",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1244:2474,variab,variable,2474,https://qutip.org,https://github.com/qutip/qutip/issues/1244,1,['variab'],['variable']
Modifiability,"* import + sesolve. * psi in args part 1. * psi in args part 2. * state in args part3. * dyn args test1. * dyn args test2. * args debug. * ready for tests. * s/mesolve pass tests. * mcsolve rework. * mcsolve rework part 2. * mcsolve cython cleaning. * mcsolve working. * mcsolve cython as object. * mcsolve pass all test. * automated test almost passing. * pass all tests. * docs and cleaning. * diag ok. * clean propagator. * clean propagator 2. * clean floquet. * clean floquet 2. * mcsolve serial_map bugfix. * object args bug correction. * dense cQobjEvo bugfix. * spliting PR. * merge priority correction. * merge priority correction. * mcsolve based on qoevo. * better rouchon citation. * final state avg?. * faster postprocessing. * final_state average flag. * final state runs as property. * Some patches for qip.Gate (#995). * remove repetitive assignment. * move description to class def. Doc won't show it if it's under __init__. * check invalid input for targets and control. * all must be integer. * NotImplemented is not callable, use NotImplementedError. * add whitespace. * refactor. * format correction",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1043:1090,refactor,refactor,1090,https://qutip.org,https://github.com/qutip/qutip/pull/1043,1,['refactor'],['refactor']
Modifiability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**. I am adding an efficient module for calculating the wave function that uses a recurrence for it in Cython, and I am applying one of its functions in the update method of the HarmonicOscillatorWaveFunction class in the distribution.py module. This module is an adaptation of one of the modules from the package I developed for efficient wave function calculation: Fast Wave. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2553:1609,adapt,adaptation,1609,https://qutip.org,https://github.com/qutip/qutip/pull/2553,1,['adapt'],['adaptation']
Modifiability,"**Checklist**; This rewrite the stochastic solver to use the class interface. - `smesolve`, `ssesolve` have been rewritten to match other solver with matching class interface `SMESolver`, `SSESolver`. The main change is that the options used to be passed as keywords (`**kwargs`) and are now passed as an options dict.; - `m_ops` and `dW_factors` are properties of the classes, but not available to overwrite through the function interface. ; - The multiples end condition (`target_tol`, `timeout`) are added.; - The `solver` keyword is now `method` options, as it is in other solver.; - The method that was referring the homodyne or heterodyne detection is now the `heterodyne` keyword. ie before `method=""heterodyne""` now `heterodyne=True`.; - The default integration method is now `rouchon`, instead of `taylor1.5`. ie the method coming from a physic paper and not a mathematics textbook. . - The stochastic integration methods have been spitted in smaller chunk instead of the huge classes in _stochastic.pyx. I kept most methods, only skipping the taylor order 2.0 method. The python interface is kept very similar to the `Integrator` as `SIntegrator`, the main difference being that `set_state` and `get_state` use an extra random number generator with the time and state. The integration methods are usually 5%~10% slower than they where for medium size problems (shape ~100). Most method are computed the same way as before, but the rouchon method no longer use super operator, but keep the density matrix as a matrix and not an oper-ket. - The derivative computation for used by the integration method has also been split into multiple functions and made only available for `smesolve`. For there methods to be valid, the each diffusion contribution must commute. For `smesolve`, this means that each `sc_ops` must commute, as documented. For `ssesolve`, each `sc_ops` must not only commute, but also commute with other `sc_ops`'s adjoint, this last part being missing from v4's documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2131:20,rewrite,rewrite,20,https://qutip.org,https://github.com/qutip/qutip/pull/2131,1,['rewrite'],['rewrite']
Modifiability,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:704,plugin,plugins,704,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['plugin'],['plugins']
Modifiability,"**Describe the bug**; I'm trying to get the spectrum of a qubit inside a cavity. For certain values of coupling it works, but for others not. I think this is a problem of tolerance for small numbers, i have set `qutip.settings.auto_tidyup = False` and `qutip.settings.atol = 1e-100`. **To Reproduce**; When it doesn't work it returns:; ```; <ipython-input-3-eaf63cc10951> in do_spectrum(eta, T, w_l, lowfilter); 88 #####################; 89 ; ---> 90 spec_cavity = spectrum(H_d, w_l, c_ops, Am_O, Ap_O); 91 spec_qubit = spectrum(H_d, w_l, c_ops, Sm_O, Sp_O); 92 . ~/.local/lib/python3.8/site-packages/qutip/correlation.py in spectrum(H, wlist, c_ops, a_op, b_op, solver, use_pinv); 541 ; 542 if solver == ""es"":; --> 543 return _spectrum_es(H, wlist, c_ops, a_op, b_op); 544 elif solver == ""pi"":; 545 return _spectrum_pi(H, wlist, c_ops, a_op, b_op, use_pinv). ~/.local/lib/python3.8/site-packages/qutip/correlation.py in _spectrum_es(H, wlist, c_ops, a_op, b_op); 1185 ; 1186 # correlation; -> 1187 corr_es = expect(a_op, es); 1188 ; 1189 # covariance. ~/.local/lib/python3.8/site-packages/qutip/expect.py in expect(oper, state); 75 ; 76 elif isinstance(oper, Qobj) and isinstance(state, eseries):; ---> 77 return _single_eseries_expect(oper, state); 78 ; 79 elif isinstance(oper, (list, np.ndarray)):. ~/.local/lib/python3.8/site-packages/qutip/expect.py in _single_eseries_expect(oper, state); 130 out = eseries(); 131 ; --> 132 if isoper(state.ampl[0]):; 133 out.rates = state.rates; 134 out.ampl = np.array([expect(oper, a) for a in state.ampl]). IndexError: index 0 is out of bounds for axis 0 with size 0; ```. **Expected behavior**; The expecter behavior is the normal returns of the spectrum, as it happens with other values of coupling. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1388:103,coupling,coupling,103,https://qutip.org,https://github.com/qutip/qutip/issues/1388,1,['coupling'],['coupling']
Modifiability,"**Describe the bug**; Source tarball taken from PyPI https://pypi.org/project/qutip/ fails without git:; ```; ===> Configuring for py38-qutip-4.6.0; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""setup.py"", line 231, in <module>; options = process_options(); File ""setup.py"", line 45, in process_options; options = _determine_version(options); File ""setup.py"", line 127, in _determine_version; git_out = subprocess.run(; File ""/usr/local/lib/python3.8/subprocess.py"", line 493, in run; with Popen(*popenargs, **kwargs) as process:; File ""/usr/local/lib/python3.8/subprocess.py"", line 858, in __init__; self._execute_child(args, executable, preexec_fn, close_fds,; File ""/usr/local/lib/python3.8/subprocess.py"", line 1704, in _execute_child; raise child_exception_type(errno_num, err_msg, err_filename); FileNotFoundError: [Errno 2] No such file or directory: 'git'; ```. git shouldn't be required because PyPI != GitHub and it is expected to be just a directory and not a cloned git repository.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1514:115,Config,Configuring,115,https://qutip.org,https://github.com/qutip/qutip/issues/1514,1,['Config'],['Configuring']
Modifiability,"**Describe the issue**; I am using the EnhancedTextProgressBar to track progress of an mesolve calculation in a jupyter notebook. Sometimes it works as expected; occasionally (it doesn't seem to be deterministic), I get an extra progress after the updating progress bar that does not delete, so that when the mesolve is complete, I see this: ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00[*********70%**** ] Elapsed 1.79s / Remaining 00:00:00:00. Instead of just ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00. If I run the same thing repeatedly, sometimes I'll get the extra status (at different elapsed times), sometimes I'll get two extras, sometimes I'll get none. The longer the calculation takes, the more likely it is that I'll get one or more of these, it seems. . This is not a super huge problem, but just curious if there's any way to fix it! . Thanks,; Emma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1229:39,Enhance,EnhancedTextProgressBar,39,https://qutip.org,https://github.com/qutip/qutip/issues/1229,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,"**Describe the issue**; I tried to Execute the code ""Time-dependent master equation: Landau-Zener transitions"" in QuTiP HP's Example notebooks(http://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/landau-zener.ipynb) ,and I get the following error message. ; Could someone help please?. Error message:; ---------------------------------------------------------------------------; UnboundLocalError Traceback (most recent call last); <ipython-input-7-f9c1fc837f05> in <module>; 1 start_time = time.time(); ----> 2 p_ex = qubit_integrate(delta, eps0, A, omega, gamma1, gamma2, psi0, tlist, ""dynamics""); 3 print('dynamics: time elapsed = ' + str(time.time() - start_time)). <ipython-input-5-8172adafcb2d> in qubit_integrate(delta, eps0, A, omega, gamma1, gamma2, psi0, tlist, option); 33 if option == ""dynamics"":; 34 # evolve and calculate expectation values; ---> 35 output = mesolve(H, psi0, tlist, c_op_list, [sm.dag() * sm], H_args); 36 ; 37 return output.expect[0]. ~\Anaconda3\lib\site-packages\qutip\mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 252 ss = H; 253 elif isinstance(H, (list, Qobj, QobjEvo)):; --> 254 ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); 255 elif callable(H):; 256 ss = _mesolve_func_td(H, c_ops, rho0, tlist, args, options). ~\Anaconda3\lib\site-packages\qutip\mesolve.py in _mesolve_QobjEvo(H, c_ops, tlist, args, opt); 298 ; 299 nthread = opt.openmp_threads if opt.use_openmp else 0; --> 300 L_td.compile(omp=nthread); 301 ; 302 ss = SolverSystem(). ~\Anaconda3\lib\site-packages\qutip\qobjevo.py in compile(self, code, matched, dense, omp); 1557 self.args,; 1558 self.dynamics_args,; -> 1559 self.tlist); 1560 coeff_files.add(file_); 1561 self.coeff_files.append(file_). ~\Anaconda3\lib\site-packages\qutip\qobjevo_codegen.py in _compiled_coeffs(ops, args, dyn_args, tlist); 122 code = _make_code_4_cimport(ops, args, dyn_args, tlist); 123 coeff_obj, filename = _import_str(code, ""cqobjevo_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1244:840,evolve,evolve,840,https://qutip.org,https://github.com/qutip/qutip/issues/1244,1,['evolve'],['evolve']
Modifiability,"**Description**. - Add the `reset` function to `qutip.settings` that is described in the documentation but was never implemented. ; - Add `save`, `load` to `qutip.settings`, allowing to save in alternate files.; - The list of configuration that can be saved in qutiprc is generated when loading the module.; - Ungraded the `configrc` functionalities to allow other filenames and support more than a few hard coded `qutip.settings`'s keys.; - Reading `qutiprc` will raise warning instead of errors when unknown keys. So if we remove keys in v5, old file will not cause crashes when importing qutip for the few that use qutiprc. . **Changelog**; Add `reset` to `qutip.settings`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1289:226,config,configuration,226,https://qutip.org,https://github.com/qutip/qutip/pull/1289,2,['config'],"['configrc', 'configuration']"
Modifiability,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1752:802,config,configuration,802,https://qutip.org,https://github.com/qutip/qutip/pull/1752,1,['config'],['configuration']
Modifiability,"**Description**. Reviewed and fixed the apidoc.; - Fixed the internal references: link to `Qobj`, `QobjEvo`, etc. All reference in the apidoc work if the target exist.; Reference to `Coefficient`, `Data`, `data.to` are still broken since they are note included in api.; - I changed the parameter specification to use `default: ` everywhere. `default=` does not look good for string in HTML since string are closed twice. `{}` was also used but it's also used for a set of choice: `str {""dense"", ""sparse""}`. Even if we don't keep this format, uniformity will help change it later.; - Added `optional` and `default` when missing.; - List the set of valid choice when appropriate.; - Improved solver's options rendering.; - Changed \`...\` to \``...\`` in many places. The later is italic and does not highlight the content much.; - Made some method / variable private. Added / removed some entry in the api.; - Fixed formatting issues. Also fixed broken / moved external link (using `make linkcheck`). Link to paper sometime fail with automated check but link work from browser. I removed some links in HEOM for mkl that did not work and I could not find a replacement. In a future PR, we should restructure the apidoc. Have to large files, one for classes and one for function does not scale well to the size of the project.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2264:849,variab,variable,849,https://qutip.org,https://github.com/qutip/qutip/pull/2264,1,['variab'],['variable']
Modifiability,"**Description**. The aim of this project is to enhance the capabilities of qutip's HEOM implementation by introducing a set of tools that offer the option to simulate arbitrary spectral densities or correlation functions. . To achieve this the main idea is to fit our wanted spectral density by a set of underdamped Drude-Lorentz spectral densities or correlation functions. The idea is that the user will supply his desired spectral density or correlation function and the tools will automatically do the fit and construct the corresponding HEOM bath. Guesses ffor the fit and the number of terms will be decided automatically if the user does not specify them. To decided on the number of terms, we will used the normalized root mean square error as a measure of the goodness of the fit. . I also added functions to bosonic bath to quickly obtain the correlation function, power spectrum and spectral density for the existing bosonic baths . **Note**. Those tests fail because mpmath is not in the requirements, it is needed because the scipy version of the Rienmann zeta function doesn't take complex arguments (https://github.com/scipy/scipy/issues/9182). **Related issues or PRs**. The Qutip tutorial notebooks are updated to show this new functionality in (https://github.com/qutip/qutip-tutorials/pull/72)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2260:47,enhance,enhance,47,https://qutip.org,https://github.com/qutip/qutip/pull/2260,1,['enhance'],['enhance']
Modifiability,**Description**; - Improve the documentation and use more understandable variable names.; - Add mcsolve as an optional solver for `Processor`; - The figure plotted by ``Processor.plot_pulse`` now has a better look; ![Figure_1](https://user-images.githubusercontent.com/12125783/80918476-7efdd880-8d65-11ea-8ff1-8e573cd1b3e6.png). **Changelog**; A few updates to the device simulator,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1245:73,variab,variable,73,https://qutip.org,https://github.com/qutip/qutip/pull/1245,1,['variab'],['variable']
Modifiability,"**Description**; - Integrate scheduler into the compiler. The compiler can now schedule quantum gates to reduce the duration of the compiled pulses.; - Improve the structure and readability of the `Compiler` class. The compiler class was separated for clarity when the `Processor` class was built upon old code in `qutip.qip`. But it has never been opened as a public API. This PR improves the readability and, most importantly, makes it easier for users to customize the compiler class.; - Add a map `pulse_dict` between the pulse label and the indices in `Processor`, so that customizing class becomes much easier. **Files description**; - `scheduler.py` is moved to compiler folder and split to two files : `instruction.py` and `scheduler.py` for clarity.; - Changes in `gatecompiler.py`, `cavityqedcompiler.py` and `spinchaincompiler.py` are for integrating the scheduler.; - Others are adaptations. **Changelog**; Integrate the scheduler into the compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444:891,adapt,adaptations,891,https://qutip.org,https://github.com/qutip/qutip/pull/1444,1,['adapt'],['adaptations']
Modifiability,"**Description**; - Update versions in requirements.txt; - Update the contributor list and add Paul to the developers team.; - I used the list generated by git, thus only authors of merged commit in `master` are present, with their `git.config` name instead of github name.; - Unified changelog title format.; - Before towncrier, the title used `Version X.X.X`, which was changed to `QuTiP X.X.X`. ; - Also the title formating (`+++`) was not caught as a section and did not appear into the table of content.; - Removed the gallery: it was empty zip files.; - Removed the `qutip_tree` image. It was fancy, but useless and was still at 4.6.; - Improved look of the apidoc.; - Ensure each property take a line, not side by side.; - Added type hints aliases (`DimensionsLike`, ...); - Added support for aliases in more files (`import annotations`); - Split long signature into multiple lines, one per parameter. We have some long signature, made longer with type hints, this make them a lot more readable. (The readthedocs style was not great for that, so it was patched in site.ccs.); - Another options would be not to include the hints in the signature of the apidoc, they are already listed in each entry of the parameter section.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2523:236,config,config,236,https://qutip.org,https://github.com/qutip/qutip/pull/2523,1,['config'],['config']
Modifiability,**Description**; Adaptation of PR #2283 to qutip 5: using `np.tensordot` instead of a triple loop. Co-authored with [Rafael Haenel](https://github.com/rafaelha),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2284:17,Adapt,Adaptation,17,https://qutip.org,https://github.com/qutip/qutip/pull/2284,1,['Adapt'],['Adaptation']
Modifiability,"**Description**; Add a function that list all dispatched functions and their specialization.; It automatically adapt to new data-layer and dispatched functions.; Only show pure specialization: `solve[Dense, Dense]` not `solve[CSR, Dense]`. I also register 2 specializations that were created, but not registered. Example:; ```; >>> from qutip.core.data.dev_utils import specialisation_table; >>> specialisation_table(). Output only specialisation; |Dispatched function | JaxArray | CSR | Dense |; |zeros | True | True | True |; |identity | True | True | True |; |diag | True | True | True |; |one_element | True | True | True |; ...; Binary specialisation; |Dispatched function | JaxArray | CSR | Dense |; |add | True | True | True |; |sub | True | True | True |; |matmul | True | True | True |; |multiply | True | True | True |; |kron | True | True | True |; |solve | False | False | True |; ...; ```. This could also go into a notebook if it fit better there.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2132:111,adapt,adapt,111,https://qutip.org,https://github.com/qutip/qutip/pull/2132,1,['adapt'],['adapt']
Modifiability,"**Description**; Add a new options that control where the `default_dtype` is taken into account: `default_dtype_range` (feel free to propose better name.); It has 3 possible values:; - ""creation"": At `Qobj` creation functions, behaviour we presently have.; - ""missing"": Missing specialization will output that type: `Dense + Jax` is not defined so will default to that type.; - ""full"": Every operations return that type: `Dense + Dense` would convert the result to the `default_dtype`. Unary operations will also convert the output type. It could break some functions that explicitly set the date type such as `steadystate` or `HEOM`... Also added control of the created format in `Qobj.__init__`: added `dtype`, when the initial data is a list of list, use `default_dtype`, with `""full""` also use `default_dtype`. Only using the default value with list normally is so solver states are not converted automatically which would slow the solver unexpectedly. . I am looking into creating alias for a group of data layer. This would allow to set the default to jax and jaxdiag at once. Used with `""full""`, this would ensure only jax compatible data layers are used while not forcing the sparcity. This would hopefully make `""full""` usable. **Related issues or PRs**; #2328",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519:1146,layers,layers,1146,https://qutip.org,https://github.com/qutip/qutip/pull/2519,1,['layers'],['layers']
Modifiability,**Description**; Add inherited members (properties and methods) in the API docs for the solvers mentioned in the issue.; Add inheritance of these solvers showing from which base classes they inherit. **Related issues or PRs**; fixes #2163,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2167:21,inherit,inherited,21,https://qutip.org,https://github.com/qutip/qutip/pull/2167,3,['inherit'],"['inherit', 'inheritance', 'inherited']"
Modifiability,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874:188,variab,variable,188,https://qutip.org,https://github.com/qutip/qutip/pull/1874,3,['variab'],['variable']
Modifiability,"**Description**; Allow V5 to accept customization of point colors as it did in V4. To keep the changes implemented in V5, I have created a new variable to store the colors that are applied to the points (_inner_point_color_), so in total we now have three variables:. _inner_point_color_: Defined as an argument in the _add_points_ function, this variable takes precedence over the others.; _point_color_: This variable stores a list of colors, reminiscent of V4, and is utilized when _inner_point_color_ is not specified.; _point_default_color_: A list of colors that serves as the default when neither of the other variables is defined. **Related issues or PRs**; fix #1974",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308:143,variab,variable,143,https://qutip.org,https://github.com/qutip/qutip/pull/2308,5,['variab'],"['variable', 'variables']"
Modifiability,"**Description**; As presented in #1722, the docstring of the states and operators functions are not consistent. This change the docstring so that _Number of basis states in Hilbert space_ is used everywhere, instead of _fock states_ or _vector states_. This set the variable names as:; - Single Hilbert space function : `N`; - Multiple Hilbert space function: `dimensions`; - Number of qubits: `N_qubit`. Added support for `dimensions` input to take `Space` object.; Added sanity check in dimensions object.; Added `scalar_like` method to dimensions object. In transform any dims `[[2, 3], [2, 3]]` to it's scalar with same structure `[[1, 1], [1, 1]]`.; Added another input parameter to qzero to create rectangular operator `qzero([2],[3]).dims == [[2], [3]]`. **Related issues or PRs**; fix #1184, replace #2075",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2289:266,variab,variable,266,https://qutip.org,https://github.com/qutip/qutip/pull/2289,1,['variab'],['variable']
Modifiability,**Description**; Clean-up of the point method in the `Bloch` class. This PR does not add any new feature but it does:; - Improve readability and logic in the point methods for the Bloch class. ; - Extended test coverage of the point methods.; - Now add_points raises error if the arguments `points` or `meth` are wrong. **Changelog**; Clean-up of the point methods in the `Bloch` class.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1909:197,Extend,Extended,197,https://qutip.org,https://github.com/qutip/qutip/pull/1909,1,['Extend'],['Extended']
Modifiability,"**Description**; Enables use of `mcsolve` and `nm_mcsolve` with mixed initial conditions. Added functions `run_mixed` to the MCSolver and NonMarkovianMCSolver classes. Instead of an initial pure state, these functions take either a density matrix or a list of `(psi_i, p_i)` where `psi_i` are pure initial states and `p_i` are the weights for the average over the initial states. In the latter case, the `ntraj` parameter can be a list specifying the number of trajectories to be used for each initial state. The trajectories automatically obtain correction weights if the fraction of trajectories starting in `psi_i` does not match `p_i`. The functions `mcsolve` and `nm_mcsolve` take either a pure state or a density matrix as the initial state, and call either `run` or `run_mixed` of the solver, respectively. The stochastic solvers also inherit the `run_mixed` functions, but I don't know if there is any use case for that. The most complicated issue here was the combination of a mixed initial state with ""improved sampling"". In this case, run_mixed first runs the no-jump trajectories for all initial states (potentially using `parallel_map` etc) and then runs all other trajectories (using `parallel_map` again, this means that there are two progress bars...). **Todo**; - [X] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437:842,inherit,inherit,842,https://qutip.org,https://github.com/qutip/qutip/pull/2437,1,['inherit'],['inherit']
Modifiability,"**Description**; I changed __mul__ behaviour following the discussion of issue #1607. However, the implementation details differ slightly from what was discussed there. The current behaviout of `__mul__(self, other)` is:; - If other is a `Qobj`: dispatch to `__matmul__`; - If not try dipatching to mul and return `NotImplemented` if `TypeError` is returned.; - The dispatcher now gets `other` instead of `complex(other)`. This is more flexible and allows specialisations to handle arbitrary scalar like objects (something extremely useful for qutip-tensorflow).; - Infer hermiticity and unitarity when possible trying complex(other). `__rmul__` now directly dispatches to `__mul__`. Any necessary check (casting to complex included) is done in `__mul__`. _No_ changes were required to `mul_dense` and `mul_csr` as `add_dense(data, value=np.array(1))` works. It internally tries `complex(np.array(1))` which is guaranteed to work. This is something I was very happy to find as I do not think that specialisations should return `NotImplemented` (although they still can if required). **Related issues or PRs**; Fixes issue #1611 . **Changelog**. - Qobj `__mul__` now handles consistently right and left multiplications of an arbitrary python object.; - `__mul__` is now more flexible passing `other` to the dispatcher instead of `complex(other)`.; - `qobj*np.array([1,2])` and `qobj*np.array([1,2])` (or any other numpy array that does not represent an scalar) now raise TypeError. This change is not backwards compatible (!!). _Edit: changed changelog and description_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620:436,flexible,flexible,436,https://qutip.org,https://github.com/qutip/qutip/pull/1620,2,['flexible'],['flexible']
Modifiability,"**Description**; I found the description for unitary, non-dissipative time evolution a bit confusing as the text always referred to `mesolve` while the examples used `sesolve`. I adapted the text to `sesolve` for that section and introduced `mesolve` only in the next section. **Related issues or PRs**; understanding the docs. **Changelog**; Improve documentation on solving for unitary dynamics by making the use of sesolve and mesolve in the code examples more consistent with the text, and by making the text clearer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1921:179,adapt,adapted,179,https://qutip.org,https://github.com/qutip/qutip/pull/1921,1,['adapt'],['adapted']
Modifiability,"**Description**; In #1812, I worked on removing the tree structure of option and having options per solver instead of having them together.; This way, we don't need to pass `mcsolve` specific options to `mesolve`, etc. and it makes it simpler to know which options are used by which solver. That PR is getting quite large and went through multiple revision, so I am replacing it with two smaller ones. In this PR, I simplify the options in core. `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. Most of these settings are properties of the object and only computed when being called instead of at import in `__init__.py`. . `CoreOptions` and `CompilationOptions` are now both made from a simpler `QutipOptions` class instead of the `optionsclass` which generated many method at import. Some options have been moved around: `debug`, `log_handler`, `colorblind_safe` and `use_cython` has been moved to `CoreOptions`. Since instance of `CoreOptions` cannot be passed to functions using it. It supports context:; ```; with CoreOptions(auto_tidyup=False):; op = sparse1 + sparse2; ```; and global options change using:; ```; qutip.settings.core['atol'] = 1e-6; ```. `CompilationOptions` instance must be passed to `coefficient` to be used. `configrc` was removed. It was used to store settings in a file that would be read when importing qutip. This was mainly used to store the openmp threshold. Without openmp, we don't have any settings to store between sessions. Some test related to mkl had to be fixed, it seems that they were always skipped before these changes. **Related issues or PRs**; Replace #1812. **Changelog**; Simplify settings and core options.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1924:1431,config,configrc,1431,https://qutip.org,https://github.com/qutip/qutip/pull/1924,1,['config'],['configrc']
Modifiability,"**Description**; In #2314, it was found that Qobj creation functions could return an unexpected dtype for incomplete data layers.; For example if `mul` specialization is missing `scale * basis(..., dtype)` would not return a Qobj using dtype.; I reviewed functions in states.py, operators.py and random_object.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2321:122,layers,layers,122,https://qutip.org,https://github.com/qutip/qutip/pull/2321,1,['layers'],['layers']
Modifiability,"**Description**; Introducing support for multiple coupling operators in `fmmesolve`. Additionally, I fixed the bug with the rate integration as described in #1961. . **Related issues or PRs**; #1961",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1962:50,coupling,coupling,50,https://qutip.org,https://github.com/qutip/qutip/pull/1962,1,['coupling'],['coupling']
Modifiability,"**Description**; Make `choi_to_kraus` rely on eigenstate solver for Hermitian matrices if the Choi matrix is Hermitian. Basically, this adapts what is done in qutip 5, while waiting for its release. **Related issues or PRs**; #2263",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2276:136,adapt,adapts,136,https://qutip.org,https://github.com/qutip/qutip/pull/2276,1,['adapt'],['adapts']
Modifiability,"**Description**; Make and upgrade a few class commonly used by solvers. All solver's core is a loop that progress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:252,Evolve,Evolver,252,https://qutip.org,https://github.com/qutip/qutip/pull/1409,5,"['Evolve', 'evolve']","['Evolver', 'EvolverScipyZvode', 'evolver']"
Modifiability,"**Description**; Make changes so enable autodiff with `jax` or `tensorflow`:; - In `QobjEvo`, `Elements`, `Coefficient`: `t` is a python object instead of a double as is coefficient output.; This allows to pass jax traced variable or tensorflow's scalar tensor.; - QobjEvo's elements attribute are accessible and new methods `QobjEvo._getstate`, `QobjEvo._restore`.; Used by jax layer to register `QobjEvo` as a pytree.; - Allow subproject to add their own coefficient.; This allow to make a coefficient that can jit well or can be differentiated. `FuncCoefficient` without type restriction could mostly work, but there are some issues with registering them as a pytree or pickling.; - In CoreOptions, an options for the default data type is added:; When not specified, each `Qobj` creation function keeps its default.; ```; with CoreOptions(default_dtype=""jax""):; obj = qeye(N); assert isinstance(obj.data, JaxArray); ```; - Add `QobjEvo.to_list` to restore the list format of the `QobjEvo`. **Related issues or PRs**; Replace #1816",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015:222,variab,variable,222,https://qutip.org,https://github.com/qutip/qutip/pull/2015,1,['variab'],['variable']
Modifiability,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:366,adapt,adapted,366,https://qutip.org,https://github.com/qutip/qutip/pull/1288,1,['adapt'],['adapted']
Modifiability,**Description**; Refactor Qutip.Qip.Circuit.solve_gates as a dispatch-like method for assigning different functions and make the QubitCircuit module more commutable.; These changes make it easier for maintenance and provide a clearer workflow. **Changelog**; Refactor Qutip.Qip.Circuit.solve_gates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1226:17,Refactor,Refactor,17,https://qutip.org,https://github.com/qutip/qutip/pull/1226,2,['Refactor'],['Refactor']
Modifiability,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:117,Variab,Variable,117,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['Variab'],['Variable']
Modifiability,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1792:307,evolve,evolve,307,https://qutip.org,https://github.com/qutip/qutip/pull/1792,3,"['Evolve', 'evolve']","['Evolver', 'evolve']"
Modifiability,"**Description**; Rewrite `mcsolve` as a class for dev.major. Main addition:; - `MultitrajSolver` class as a base class for solver computing trajectory from a seed: it uses custom ; - It uses custom integrator using a generator which `MultitrajSolver` provide. ; - Stepping run one trajectory at a time.; - Use numpy.random new interface with `SeedSequence` and `Generator`.; - `run` can end on number of trajectories reached, timeout reached, or error bars on expectation values under a certain tolerance.; - `McSolver` class for mcsolve class interface.; - Support closed and open system. For open systems. `H` must be a Liouvillian. The `c_ops` are computed stochasticly and are used for collapse. Dissipation terms to be used in a deterministic way can be added as Lindblad dissipators to the liouvillian.; - McSolver's results include the photocurrent.; - McSolver need a layer between the solver interface and the integrator. In #1710, this was a trajectory solver, but here I use a pseudo integrator. This makes `MultitrajSolver` easier to use with stochastic which need custom integrator and thus a trajectory solver did very little. Other fixes:; - `MultiTrajResult` keep the `dtype` of expect.; - `MultiTrajResult` can merge instance with no states stored. **Related issues or PRs**; Replace #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1972:17,Rewrite,Rewrite,17,https://qutip.org,https://github.com/qutip/qutip/pull/1972,1,['Rewrite'],['Rewrite']
Modifiability,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710:17,Rewrite,Rewrite,17,https://qutip.org,https://github.com/qutip/qutip/pull/1710,2,['Rewrite'],['Rewrite']
Modifiability,"**Description**; Rewrite steadystate to use data layer function. - The number of method have been reduced to 4 and are now distinct algorithm for the steadystate computation.; - The solver used to solve linear equation is distinct from the method. `iterative-gmres` is not `method=""direct"", solver=""gmres""`. (The solver will still work for backward compatibility.); - Optional parameter to pass to the linear equation solver are no longer included in a default dict, but passed through `**kw`. This leave 8 optional parameter purely for steadystate.; - Info have been removed, this was interesting, but bloating the code. `steadystate_floquet` and `pseudo_inverse` are also rewritten using calls to the data layer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2031:17,Rewrite,Rewrite,17,https://qutip.org,https://github.com/qutip/qutip/pull/2031,1,['Rewrite'],['Rewrite']
Modifiability,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1455:17,Rewrite,Rewrite,17,https://qutip.org,https://github.com/qutip/qutip/pull/1455,3,"['Evolve', 'Rewrite']","['Evolver', 'Rewrite']"
Modifiability,"**Description**; Scipy 1.12 rename a variable in linalg solver: `tol` to `rtol` and raise a deprecation warning with the old name.; Scipy 1.11 does not accept `rtol`. This parameter is passed thought `**kwargs` in steadystate and is not used elsewhere, so only the test need to be updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2301:37,variab,variable,37,https://qutip.org,https://github.com/qutip/qutip/pull/2301,1,['variab'],['variable']
Modifiability,"**Description**; Since merging #2497, mkl tests on windows fails from segfault.; I am not sure of the source of the error:; Since the library was not found before the PR, the bug can have been there for a long time, but the tests passed in #2497.; Just settings mkl to verbose is enough for the tests to passes... I don't think relying on the verbose options is a good idea so I made it unable to find mkl on windows for this PR. We will need to find a more reliable way to use it, `ctypes` does not look at the header file so it guess the types from our call. Maybe some version of mkl are 32 bit and other 64 bit and we are not adapting. [pydiso](https://github.com/simpeg/pydiso) looks promising.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2529:630,adapt,adapting,630,https://qutip.org,https://github.com/qutip/qutip/pull/2529,1,['adapt'],['adapting']
Modifiability,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:293,inherit,inheritance,293,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['inherit'],['inheritance']
Modifiability,"**Description**; The `improved_sampling` option was recently added to the `MCSolver`. `NonMarkovianMCSolver` extends `MCSolver` and can therefore be called with `improved_sampling=True`. Without this PR, it would then silently return wrong results. The technical reason is that `nm_mcsolve` calculates the value of an influence martingale, which is factored into the calculation of expectation values in the custom result class `NmmcResult`. If `improved_sampling` is enabled, `McResultImprovedSampling` is used instead. I here only disable the `improved_sampling` option for `nm_mcsolve` and print a warning if a user tries to use it. I have created a new issue to discuss ways to implement the improved sampling for `nm_mcsolve`. **Related issue**; https://github.com/qutip/qutip/issues/2235",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2234:109,extend,extends,109,https://qutip.org,https://github.com/qutip/qutip/pull/2234,1,['extend'],['extends']
Modifiability,"**Description**; The fix pertains to `add_gate` behaviour when multiple insertion indices are supplied. Prior to the proposed fix, the insertion loop doesn't take into account the fact that inserting an element in the gates list, modifies the indices in the original list, whereas the caller of `add_gate` supplies a list of indices, with positions with respect to the indices in the original list. Additionally, the PR removes unused variables and unused function (that has also not been imported). **Related issues or PRs**; Fixes #1497. **Changelog**; Fixed add_gate behavior when inserting a gate at multiple indices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1892:435,variab,variables,435,https://qutip.org,https://github.com/qutip/qutip/pull/1892,1,['variab'],['variables']
Modifiability,"**Description**; The mkl finding was sometime missing the library even when available.; Sometime the library can has a version number in the file name:; `libmkl_rt.so.2`, `mkl_rt.2.dll`, with or without a symbolic link to the version less name.; Also it ouly look for it if it's found in numpy's config, but the module mkl is available an could be installed even if numpy does not link to it. Our use using ctypes does not require numpy to be using it to work. So I changed the lookup function to look for the library without checking is numpy uses it. I also added a new setting, `settings.mkl_lib_location`, which is not read only and allow users to enter the path to their mkl implementation. We only look inside the python library path, this would allow to use libraries installed at the OS level. Also fixed a bug in mkl spsolve with scipy 1.14 that was missed since mkl tests were skipped. **Related issues or PRs**; fix #2496",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2497:296,config,config,296,https://qutip.org,https://github.com/qutip/qutip/pull/2497,1,['config'],['config']
Modifiability,"**Description**; The more flexible base class adds:. - a list of state processors that store the state or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:26,flexible,flexible,26,https://qutip.org,https://github.com/qutip/qutip/pull/1907,2,"['config', 'flexible']","['configured', 'flexible']"
Modifiability,**Description**; This PR changes the filename `qutip.bib` to `CITATION.bib` to enable GitHub's [citation support](https://github.blog/2021-08-19-enhanced-support-citations-github/). **Changelog**; Rename qutip.bib to CITATION.bib to enable GitHub's citation support.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1662:145,enhance,enhanced-support-citations-github,145,https://qutip.org,https://github.com/qutip/qutip/pull/1662,1,['enhance'],['enhanced-support-citations-github']
Modifiability,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1712:535,adapt,adapted,535,https://qutip.org,https://github.com/qutip/qutip/pull/1712,1,['adapt'],['adapted']
Modifiability,"**Description**; This PR introduces support for different numerical backends in entropy.py. By leveraging dynamic backend selection, we enable compatibility with both NumPy and JAX. **Related issues or PRs**; This PR builds upon the groundwork laid in PR #2461, further extending the capability of dynamic backend selection.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2462:270,extend,extending,270,https://qutip.org,https://github.com/qutip/qutip/pull/2462,1,['extend'],['extending']
Modifiability,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1748:27,refactor,refactor,27,https://qutip.org,https://github.com/qutip/qutip/pull/1748,2,['refactor'],['refactor']
Modifiability,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:780,variab,variables,780,https://qutip.org,https://github.com/qutip/qutip/pull/1601,1,['variab'],['variables']
Modifiability,"**Description**; This issue regards defining how to properly structure the main code of the repository [krylovsolver](https://github.com/emilianomfortes/krylovsolver) to merge it into quip and provide it as a new solver. **Possible solution**; We have created a temporary branch in the original repository labeled [qutip](https://github.com/emilianomfortes/krylovsolver/tree/qutip), on which the algorithm code styling has been adapted to follow a similar one based on qutip (i.e. using [sesolve.py](https://github.com/qutip/qutip/blob/master/qutip/sesolve.py)). The analogous file to sesolve.py can be found at [PyKrylovsolver/krylovsolve.py](https://github.com/emilianomfortes/krylovsolver/blob/qutip/PyKrylovsolver/krylovsolve.py). **Additional context**; [Krylovsolver](https://github.com/emilianomfortes/krylovsolver) has been developed via the Unitary-fund [grants](https://unitary.fund/grants.html) program.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668:428,adapt,adapted,428,https://qutip.org,https://github.com/qutip/qutip/issues/1668,1,['adapt'],['adapted']
Modifiability,**Description**; This pull request introduces a new `NumpyBackend `class that enables dynamic selection of the numpy_backend used in `qutip`. The class facilitates switching between different numpy implementations ( `numpy` and `jax.numpy` mainly) based on the configuration specified in the `settings.core` dictionary. . Made changes in `entropy` and `metrics` to make them `jax` enabled,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2490:261,config,configuration,261,https://qutip.org,https://github.com/qutip/qutip/pull/2490,1,['config'],['configuration']
Modifiability,**Description**; This sets up the towncrier utility to manage the changelog. - Add suitable towncrier configuration to the respository.; - Update the release documentation with instructions for using towncrier to update the change log.; - Update the development documentation to include the requirement to add towncrier entries for each PR.; - Update the GitHub PR template to mention the requirement to add a towncrier entry.; - Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. **Related issues or PRs**; #1894. **Changelog**; See doc/changes/1927.doc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927:102,config,configuration,102,https://qutip.org,https://github.com/qutip/qutip/pull/1927,1,['config'],['configuration']
Modifiability,"**Description**; Two small bugs crept in in the conversion of the steady_state solver in the HEOM method to QuTiP v5. Firstly, the system state was returned without Fortran ordering (so it was effectively returned transposed), and the line which was supposed to enforce hermiticity used a conj() instead of an adjoint() so it just deleted the imaginary parts of the off-diagonals instead. . I think none of the notebooks or tests were sensitive to these two compounding issues, but it is fairly easy to make an example which is. This is also added as a rudimentary test, comparing output of the long-time dynamics to the steadystate. I didn't include any parameters to change in that test, but can do so if its useful. As a comment, the steady-state solver could probably be written to be more like the standard steadystate solver. But maybe better that is done alongside an effort to make the heom solver more data-layer flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2333:922,flexible,flexible,922,https://qutip.org,https://github.com/qutip/qutip/pull/2333,1,['flexible'],['flexible']
Modifiability,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:83,refactor,refactor,83,https://qutip.org,https://github.com/qutip/qutip/pull/1869,2,"['inherit', 'refactor']","['inherit', 'refactor']"
Modifiability,"**Description**; Update correlation functions to use v5 solvers.; The interface remain the mostly the same, I only made a few changes:; - Support for mcsolve as a back-end is removed. It was very slow, had a low precision and the saved memory is not as useful as it was 10 years ago. Removing it simplify the code a lot, but i can add it back if there is demand for it.; - Time-dependent Hamiltonian no longer support numpy array format: some correlation have 2 times list: `tlist` and `taulist`. It was not clear which one was to be used when using that format. `QobjEvo` input are supported, so building it before passing it to the correlation function is the way to go.; - `a_op`, `b_op`, `c_op` can be `QobjEvo`. Spectrum functions have been moved to their own file, but are mostly unchanged. I added `correlation_3op` which work as other correlation functions, but take a `Solver` instead of an Hamiltonian and `c_ops`. This allows any solver able to evolve density matrices to be used (`BRSolver`, `HEOMSolver`). It is only one function that support it directly: adding support of `Solver` to existing function would make the interface quite complicated, and changing it would break a lot of code and calling them using `H` is useful. . Fixed a small bugs in brmesolve and heom. I added data type option for the eigen solver of the diag integrator as it would otherwise sometime fail with cases in correlation (system and state not hermitian.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1997:956,evolve,evolve,956,https://qutip.org,https://github.com/qutip/qutip/pull/1997,1,['evolve'],['evolve']
Modifiability,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1825:65,parameteriz,parameterized,65,https://qutip.org,https://github.com/qutip/qutip/pull/1825,2,['parameteriz'],['parameterized']
Modifiability,"**Description**; User-facing changes:; - Solver's `Options` defaults can be set `qutip.settings.options`.; - Add the `save`, `load`, `reset` method to Options.; - The default `Options` are read from ""qutiprc"" when loading qutip.; - Options object can be initiated from a saved configuration. Example:; ```; import qutip.setting as qset; from qutip.solver import Options; qset.options.atol = 1e-10; qset.options.max_step = 1; qset.save(); print(Options().atol); >>> 1e-10; ```; `atol = 1e-10` and `max_step = 1` will be kept as default in future sessions. `qset.options.reset` to go back to qutip's default. I believe that loading custom settings when importing qutip will be appreciated with support of both `dense` and `sparse` most researchers will have a preference depending on their domain. This also brings all settings in one place: `qutip.settings...` even if we split the code in ""core"", ""solver"", ""qip?"", etc. Lastly, creating and moving around an `Options` object is no longer needed, changing the default before using the solver has the same effect. . For developers:; Principally @jakelishman as I expect you to add settings for core. ; I went with an implementation similar to python `dataclass`. To add `core`'s settings to `qutip.settings` you would do ""; ```; from qutip.settings import QtOptionClass. @QtOptionClass(""core""); class CoreOptions:; basetype = ""Dense""; auto_tidyup = True; ...; ```; And it would create the `__init__`, `__repr__`, `save`, `load` and `reset` methods, and create the default instance as `qutip.settings.core`. All attributes that do not start with ""_"" and are one of `bool`, `str`, `int`, `float`, `complex` will be in tagged to be saved and loaded. Those are the only types available now, but other can be added if needed. In `__init__` all these + properties with a setter can be initiated as keyword arguments. '__repr__' 'print' all the saved attributes and properties.; This is for the likes of `has_openmp`, I would make it a read only property. Anot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1297:277,config,configuration,277,https://qutip.org,https://github.com/qutip/qutip/pull/1297,1,['config'],['configuration']
Modifiability,"**Description**; When I released QuTiP 4.6.1 I forgot to update the version number in the documentation configuration, `conf.py`. This PR updates `conf.py` to read the version and release from the `VERSION` file in an attempt to remove the possibility of such mistakes in future releases. I've also deleted the `doc/sphinxext/requirements.txt` which appears to be no longer necessary. **Changelog**; Read documentation version and release from the VERSION file.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1546:104,config,configuration,104,https://qutip.org,https://github.com/qutip/qutip/pull/1546,1,['config'],['configuration']
Modifiability,"**Description**; `actions/upload-artifact@v4` and `actions/download-artifact@v4` have breaking change cause the 5.0.3 release to miss wheels on pypi. Different jobs in one workflow can't create artifacts with the same name. ; Download artifact only download artifact from one job without the proper options.; (https://github.com/actions/upload-artifact/issues/478). I also updated cibuildwheel version, we did it in qutip-5.0.X to build wheels for py3.12, but did not push it yet to master. I also merged the jobs to publish or pypi and testpypi, only some environment variables changed and they could get out of synchronization. Lastly I added a check that all wheels are available before uploading to pypi. With 5.0.3's first try, only linux's wheel were published,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477:569,variab,variables,569,https://qutip.org,https://github.com/qutip/qutip/pull/2477,1,['variab'],['variables']
Modifiability,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1794:82,maintainab,maintainability,82,https://qutip.org,https://github.com/qutip/qutip/pull/1794,1,['maintainab'],['maintainability']
Modifiability,"**Description**; refactor with fstring to format string to make code more Pythonic. **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2281:17,refactor,refactor,17,https://qutip.org,https://github.com/qutip/qutip/pull/2281,1,['refactor'],['refactor']
Modifiability,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684:540,portab,portable,540,https://qutip.org,https://github.com/qutip/qutip/issues/1684,1,['portab'],['portable']
Modifiability,"**Is your feature request related to a problem? Please describe.**; A lot of issues in test fail seem to arise from random objects (as well as low-level math in MKL and/or cython issues). . **Describe the solution you'd like**; There are several options at hand. . ### stick to pytest and be creative; A possible fix in testing may be to add randomly generated data that then is pointed at or fix seeds.; **Pros**: fast (?); **Cons**: technical debt. ### pytest-randomly plugin; [pytest-randomly](https://github.com/pytest-dev/pytest-randomly) is a pytest plugin that addresses this kind of issues. It allows to control `random.seed`, rather than `numpy.random.seed`. ; **Pros**: pytest plugin, supports doctest. ; **Cons**: not super popular, not designed for numpy; ; ### property-based testing with Hypothesis; Hypothesis is a library that aims at changing the way tests are designed, allegedly: it should go from testing an instance to designing a test that applies to a domain of instances ([property-based testing](https://hypothesis.works/)). It is not super clear to me right now. ; It contains various randomness-related features, including a [seed function](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.seed). **Pros**: sounds powerful and clever, popular and growing, well documented, more robust even beyond this randomness problems.; **Cons**: radical change of testing framework (?), steep learning curve (?), overkill (?). I also admit I used nose until recently / used with pytest tests thought for nose, without taking advantage of pytest full power.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:471,plugin,plugin,471,https://qutip.org,https://github.com/qutip/qutip/issues/1268,3,['plugin'],['plugin']
Modifiability,"**Is your feature request related to a problem? Please describe.**; I noticed that QuTiP got a C in the [Code Climate Report](https://codeclimate.com/github/qutip/qutip) in terms of readability and maintainability. Also, apart from the FIXMEs and the TODOs, there's many pep8 related issues (which can be fixed easily). I understand that this is not top priority stuff, but it might help in the long run. **Additional context**; For example, in the file `qutip/qip/compiler/cavityqedcompiler.py`, the functions ; `sqrtiswap_compiler` and `iswap_compiler` are very similar, and under sqrtiswap_compiler, it says to use iswap_compiler instead. In the same file `rz_compiler()` and `rx_compiler()` have the exact same code barring a string ""sz"" and ""sx"" which could be; passed as an argument.; [link to the report for this file](https://codeclimate.com/github/qutip/qutip/qutip/qip/compiler/cavityqedcompiler.py/source#issue-99d25ce9cdbd1dc34f5899352286755d)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1729:198,maintainab,maintainability,198,https://qutip.org,https://github.com/qutip/qutip/issues/1729,1,['maintainab'],['maintainability']
Modifiability,"**Is your feature request related to a problem? Please describe.**; I would like to check the behavior of the parameter `index` in the function `QubitCircuit.add_gate()`. In `qutip.qip.QubitCircuit.add_gate()`, there is a optional `list` type attribute called index.; This seems to be used to insert gates in the middle of the gate list (`qutip.qip.QubitCircuit.gates`).; The corresponding code is shown below.; ```; for position in index:; num_mes = (sum(isinstance(op, Measurement) for op; in self.gates[:position])); gate = Gate(name, targets=targets, controls=controls,; arg_value=arg_value, arg_label=arg_label,; classical_controls=classical_controls,; control_value=control_value); self.gates.insert(position, gate); ```; In this code, if `index` contains two or more elements, then the insert positions would be shifted one by one.; Is this an expected behavior?. In the current code, the positions in `index` would not indicate the original positions during the insertion loop. (e.g. When we want to insert a gate `A` to `gates=[B0,B1,B2,B3,B4,B5]` in `index=[0,2,3]`, then the output gate list would be `gates=[A,B0,A,A,B1,B2,B3,B4,B5]`, not `gates=[A,B0,B1,A,B2,A,B3,B4,B5]`.). In addition, the variable `num_mes` is unused throughout the code. **Describe the solution you'd like**; If this is not the expected behavior, and if the expected behavior is like the latter gate list in the former example, then we can fix this part into:. ```; gate = Gate(name, targets=targets, controls=controls,; arg_value=arg_value, arg_label=arg_label,; classical_controls=classical_controls,; control_value=control_value); for i, position in enumerate(sorted(index)):; self.gates.insert(position + i, gate); ```. **Additional context**; This issue is also mentioned in the PR #1489 .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1497:1205,variab,variable,1205,https://qutip.org,https://github.com/qutip/qutip/issues/1497,1,['variab'],['variable']
Modifiability,"**Is your feature request related to a problem? Please describe.**; Some quantum computing libraries (e.g.: pyGSTi) use the Pauli basis for Liouville space, as opposed to QuTiP's column-stacking basis, making it difficult to interoperate between the two. **Describe the solution you'd like**; A new pair of functions `super_to_superpauli` and `superpauli_to_super` for converting between these representations. (`qutip.visualization.hinton` already includes `super_to_superpauli` as a private function, but this could potentially be exposed to user code.). **Describe alternatives you've considered**; - Extend metadata for `kind='super'` Qobj instances to store Liouville space basis information, including col-stacking and Pauli as special cases and possibly including row-stacking or other common conventions as well.; - Possible names other than `superpauli` for conversion functions, such as `super_to_pauli_basis` or `super_from_pauli_basis`.; - Adding new methods `Qobj.to_superbasis(self, basis: str = 'pauli')` and `@classmethod Qobj.from_superbasis(cls, basis: str = 'pauli')` rather than adding more to the global namespace for the QuTiP package.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1664:604,Extend,Extend,604,https://qutip.org,https://github.com/qutip/qutip/issues/1664,1,['Extend'],['Extend']
Modifiability,"**Is your feature request related to a problem? Please describe.**; Traditionally in Hinton diagrams, any positive number is represented by a fully white square, while any negative number is represented by a fully black square. In the current implementation of `qutip.visualization.hinton`, however, each square is shaded such that numbers close to zero are represented by colors close to gray. While it is nice to be able to use shaded colormaps of this form, traditional Hinton diagrams (that is, thresholded at zero) can be easier to read when some elements that are close to zero can still have significant impact. **Describe the solution you'd like**; A `config` option or keyword argument that would allow using a threshold at zero. **Additional context**; Current Hinton diagram implementation (with colorblind safe mode turned off):. ![image](https://user-images.githubusercontent.com/31516/124228221-bb8ba800-dac0-11eb-8fc4-047ed79ecb1d.png). Current Hinton diagram implementation (with colorblind safe mode turned on):. ![image](https://user-images.githubusercontent.com/31516/124228374-fa216280-dac0-11eb-9e5c-095c1fd10373.png). Examples with thresholded colors (https://arxiv.org/pdf/1509.03770.pdf):. ![image](https://user-images.githubusercontent.com/31516/124228283-dcec9400-dac0-11eb-9067-7870f3dddf95.png); ![image](https://user-images.githubusercontent.com/31516/124228321-e970ec80-dac0-11eb-9006-c535f21c6f9b.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1595:660,config,config,660,https://qutip.org,https://github.com/qutip/qutip/issues/1595,1,['config'],['config']
Modifiability,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2512,variab,variables,2512,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['variab'],['variables']
Modifiability,",1,0,phi,step_dot,v); 7 a_0.append(temp); 8 sum_0 = 0. <ipython-input-27-8ed9b415bc26> in connection(alpha2, n_state, w, phi, step, v); 33 H = [H_static,[H_dynamic_0,str0],[H_dynamic_1,str1],[H_dynamic_2,str2],[H_dynamic_3,str3]]; 34 t_list = np.linspace(0,(alpha1_end - alpha1_0)/v,step); ---> 35 result = mesolve(H,psi0,t_list,[],args = {'alpha2':alpha2,'phi':phi,'v':v}); 36 psi = result.states; 37 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 335 elif n_str > 0:; 336 res = _sesolve_list_str_td(H, rho0, tlist,; --> 337 e_ops, args, options, progress_bar); 338 elif isinstance(H, (types.FunctionType,; 339 types.BuiltinFunctionType, partial)):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/sesolve.py in _sesolve_list_str_td(H_list, psi0, tlist, e_ops, args, opt, progress_bar); 420 code = compile('from ' + config.tdname + ' import cy_td_ode_rhs',; 421 '<string>', 'exec'); --> 422 exec(code, globals()); 423 config.tdfunc = cy_td_ode_rhs; 424 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/sesolve.py in <module>(). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(self, fullname); 443 self.pyxbuild_dir,; 444 build_inplace=self.inplace,; --> 445 language_level=self.language_level); 446 return module; 447 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:1465,config,config,1465,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['config'],['config']
Modifiability,- Bug in use of NUM_THREADS env variable; - Bug in storing collapse times and collapse operators in Result class,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/202:32,variab,variable,32,https://qutip.org,https://github.com/qutip/qutip/pull/202,1,['variab'],['variable']
Modifiability,"- Moved functions that enhance matplotlib (colormaps, normalizations; etc.) to new module. Module is imported with try-except statement since; functions require matplotlib which may or may not be present.; - Updated wigner_cmap to allow for custom colors that can be defined in; any format acceptable to the Matplotib.colors.ColorConverter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/249:23,enhance,enhance,23,https://qutip.org,https://github.com/qutip/qutip/pull/249,1,['enhance'],['enhance']
Modifiability,"- One can get a 10-40%+ speed enhancement on the core spmv and spmvpy functions by moving to c-code and intrinsics on SSE3 compatible processors. The biggest gains come on platforms that use clang (e.g. OSX) where the speedups are in the 40% or higher range compared to the current Cython based method. GCC seems to be better suited to compile Cython code, so the gains are only 10-20% there.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551:30,enhance,enhancement,30,https://qutip.org,https://github.com/qutip/qutip/pull/551,1,['enhance'],['enhancement']
Modifiability,- This is Py3 as to not avoid conflicts with the built in Python.; - Installs master branch of qutip.; - Shamelessly adapted from the SciPy Superpack.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279:117,adapt,adapted,117,https://qutip.org,https://github.com/qutip/qutip/pull/279,1,['adapt'],['adapted']
Modifiability,"-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1831:1320,coupling,coupling,1320,https://qutip.org,https://github.com/qutip/qutip/issues/1831,1,['coupling'],['coupling']
Modifiability,". The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction argume",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:5958,extend,extended,5958,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['extend'],['extended']
Modifiability,".github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening through its official channels. **<span style=""text-decoration:underline;"">The Community</span>**. QuTiP is at the center of a lively ecosystem and creative community. As of October 2020, QuTiP’s large community comprises over 80 code contributors and thousands of users that have downloaded the software over 300’000 times. QuTiP enables an infrastructure of other scientific libraries for the investigation of specific quantum physics or quantum information processing features. . There are several ways through which members of the wider QuTiP community can receive information on QuTiP. This is through any of its official channels: the Google forum; the qutip.org/news webpage tracking the releases on Github, and opening [Issues](https://github.com/qutip/qutip/issues) on Github to file bug reports or discuss and proposed enhancements. Users are encouraged to contribute bug fixes or enhancements to the project with [Pull Requests](https://github.com/qutip/qutip/pulls). **<span style=""text-decoration:underline;"">Governance</span>**. This governance document outlines the governance of the QuTiP project, in order to better serve the community and provide robust liveliness and sustained maintenance for the project. Changes to this document need to be approved by ¾ of the Admin Team. The contents of this QuTiP Governance are shown on QuTiP’s website (qutip.org/goverance) and in its documentation. The changes are tracked at github.com/qutip/governance. We view this governance model as the formalization of what we are already doing, rather than a change in direction. This document is composed of information regarding the following:. **1. Code of Conduct**. **2. Admin Team: Tasks, Composition, Decisions, Communications.**. **3. Board: Tasks, Composition, Decisions, Communications.**. **4. Non-profit Support.**. ### 1. Code of Conduct. The Contributor Covenant [Code of Conduct](ht",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:5584,enhance,enhancements,5584,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['enhance'],['enhancements']
Modifiability,"/a>]</li>; <li>Removed unused INT64 definition <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7180"">#7180</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Updated xz to 5.4.3 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7136"">#7136</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed saving TIFF multiframe images with LONG8 tag types <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7078"">#7078</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not set size unnecessarily if image fails to open <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7056"">#7056</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed unused code <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7210"">#7210</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed unused variables <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7205"">#7205</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed signedness comparison warning <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7203"">#7203</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed combining single duration across duplicate APNG frames <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7146"">#7146</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove temporary file when error is raised <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7148"">#7148</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not use temporary file when grabbing clipboard on Linux <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7200"">#7200</a> [<a href=""https://github.com/radarhere""><code>@​r",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:6461,variab,variables,6461,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['variab'],['variables']
Modifiability,"/pygments/pygments/issues/2383"">#2383</a>)</p>; </li>; <li>; <p>diff: Support normal diff syntax, as opposed to unified diff syntax (<a href=""https://redirect.github.com/pygments/pygments/issues/2321"">#2321</a>)</p>; </li>; <li>; <p>GLSL, HLSL:</p>; <ul>; <li>Support line continuations in preprocessor code (<a href=""https://redirect.github.com/pygments/pygments/issues/2350"">#2350</a>)</li>; <li>Improve preprocessor directive handling (<a href=""https://redirect.github.com/pygments/pygments/issues/2357"">#2357</a>)</li>; </ul>; </li>; <li>; <p>LilyPond: minor update of builtins</p>; </li>; <li>; <p>PHP: support attributes (<a href=""https://redirect.github.com/pygments/pygments/issues/2055"">#2055</a>, <a href=""https://redirect.github.com/pygments/pygments/issues/2347"">#2347</a>, <a href=""https://redirect.github.com/pygments/pygments/issues/2360"">#2360</a>), fix anonymous classes without; parameters (<a href=""https://redirect.github.com/pygments/pygments/issues/2359"">#2359</a>), improve lexing of variable variable syntax (<a href=""https://redirect.github.com/pygments/pygments/issues/2358"">#2358</a>)</p>; </li>; <li>; <p>Python:</p>; <ul>; <li>Add missing builtins (<a href=""https://redirect.github.com/pygments/pygments/issues/2334"">#2334</a>)</li>; <li>Fix inconsistent lexing of <code>None</code> (<a href=""https://redirect.github.com/pygments/pygments/issues/2406"">#2406</a>)</li>; </ul>; </li>; <li>; <p>Rebol/Red: Don't require script headers (<a href=""https://redirect.github.com/pygments/pygments/issues/2348"">#2348</a>, <a href=""https://redirect.github.com/pygments/pygments/issues/2349"">#2349</a>)</p>; </li>; <li>; <p>Spice: Update keywords (<a href=""https://redirect.github.com/pygments/pygments/issues/2336"">#2336</a>)</p>; </li>; <li>; <p>SQL+Jinja (<code>analyse_text</code> method): Fix catastrophic backtracking (<a href=""https://redirect.github.com/pygments/pygments/issues/2355"">#2355</a>)</p>; </li>; <li>; <p>Terraform: Add <code>hcl</code> alias (<a href=""https://red",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201:3891,variab,variable,3891,https://qutip.org,https://github.com/qutip/qutip/pull/2201,4,['variab'],['variable']
Modifiability,"1). File ""/home/user/anaconda2/envs/Quantum/lib/python2.7/site-packages/qutip/qobj.py"", line 515, in __mul__; raise TypeError(""Incompatible Qobj shapes""). TypeError: Incompatible Qobj shap; ```. but when i do each part separately as follow I notice that the shapes are compatible:; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)); Out[161]: ; Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; ```; ```python; basis(16,1); Out[162]: ; Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; ```; The first has shape = (16, 16) and the second has shape = (16, 1), there shouldn't be any problems in performing matrix multiplication.; **Why I got this error and how to solve it.**. My environment is as follow:; ```; ~$ conda info. active environment : Quantum; active env location : /home/user/anaconda2/envs/Quantum; shell level : 1; user config file : /home/user/.condarc; populated config files : /home/user/.condarc; conda version : 4.5.4; conda-build version : 3.10.5; python version : 2.7.15.final.0; base environment : /home/user/anaconda2 (writable); channel URLs : https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/free/linux-64; https://repo.anaconda.com/pkgs/free/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; https://repo.anaconda.com/pkgs/pro/linux-64; https://repo.anaconda.com/pkgs/pro/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; package cache : /home/user/anaconda2/pkgs; /home/user/.conda/pkgs; envs directories : /home/user/anaconda2/envs; /home/user/.conda/envs; platform : linux-64; user-agent : conda/4.5.4 requests/2.18.4 CPython/2.7.15 Linux/3.13.0-141-generic ubuntu/14.04 glibc/2.19; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. ```; >>> from qutip import *; >>> ab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:2955,config,config,2955,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['config'],['config']
Modifiability,10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names to qutip.egg-info/top_level.txt; reading manifest file 'qutip.egg-info/SOURCES.txt'; reading manifest template 'MANIFEST.in'; writing manifest file 'qutip.egg-info/SOURCES.txt'; copying qutip/configspec.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/cy/br_tensor.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/br_tensor.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools_checks.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/brtools_checks.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/checks.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/checks.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/complex_math.pxi -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/cqobjevo.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/cqobjevo.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/c,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:17948,config,configspec,17948,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['config'],['configspec']
Modifiability,"3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present."" <br/>. If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence). **Your Environment**; QuTiP Version: 4.6.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1624:2628,flexible,flexible,2628,https://qutip.org,https://github.com/qutip/qutip/issues/1624,1,['flexible'],['flexible']
Modifiability,"3.8/site-packages/qutip/correlation.py in spectrum(H, wlist, c_ops, a_op, b_op, solver, use_pinv); 541 ; 542 if solver == ""es"":; --> 543 return _spectrum_es(H, wlist, c_ops, a_op, b_op); 544 elif solver == ""pi"":; 545 return _spectrum_pi(H, wlist, c_ops, a_op, b_op, use_pinv). ~/.local/lib/python3.8/site-packages/qutip/correlation.py in _spectrum_es(H, wlist, c_ops, a_op, b_op); 1185 ; 1186 # correlation; -> 1187 corr_es = expect(a_op, es); 1188 ; 1189 # covariance. ~/.local/lib/python3.8/site-packages/qutip/expect.py in expect(oper, state); 75 ; 76 elif isinstance(oper, Qobj) and isinstance(state, eseries):; ---> 77 return _single_eseries_expect(oper, state); 78 ; 79 elif isinstance(oper, (list, np.ndarray)):. ~/.local/lib/python3.8/site-packages/qutip/expect.py in _single_eseries_expect(oper, state); 130 out = eseries(); 131 ; --> 132 if isoper(state.ampl[0]):; 133 out.rates = state.rates; 134 out.ampl = np.array([expect(oper, a) for a in state.ampl]). IndexError: index 0 is out of bounds for axis 0 with size 0; ```. **Expected behavior**; The expecter behavior is the normal returns of the spectrum, as it happens with other values of coupling. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.18.3; Scipy Version: 1.4.1; Cython Version: 0.29.21; Matplotlib Version: 3.2.1; Python Version: 3.8.5; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/alberto/.local/lib/python3.8/site-packages/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1388:1736,coupling,coupling,1736,https://qutip.org,https://github.com/qutip/qutip/issues/1388,1,['coupling'],['coupling']
Modifiability,"517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pyp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:2682,variab,variable,2682,https://qutip.org,https://github.com/qutip/qutip/pull/1429,2,['variab'],['variable']
Modifiability,7/qutip; copying qutip/fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/stochastic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/simdiag.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/random_objects.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/semidefinite.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/about.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/visualization.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/rcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/distributions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/hardware_info.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/configrc.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/orbital.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/ipynbtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/subsystem_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/superoperator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo_codegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/topology.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/settings.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mcsolve.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:3372,config,configrc,3372,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['config'],['configrc']
Modifiability,"99&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784""><code>c9016bf</code></a> Release 1.26.17</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb""><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3139"">#3139</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8""><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49""><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0""><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3058"">#3058</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa""><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8""><code>d94029b</code></a> Release 1.26.16</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8""><code>18e9214</code></a> Use trusted publishing for PyPI</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36""><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/25cca3894",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:3674,Config,Configure,3674,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['Config'],['Configure']
Modifiability,"; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:4914,plugin,plugins,4914,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['plugin'],['plugins']
Modifiability,"<blockquote>; <h2>10.2.0 (2024-01-02)</h2>; <ul>; <li>; <p>Add <code>keep_rgb</code> option when saving JPEG to prevent conversion of RGB colorspace <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7553"">#7553</a>; [bgilbert, radarhere]</p>; </li>; <li>; <p>Trim glyph size in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7669"">#7669</a>, <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7672"">#7672</a>; [radarhere, nulano]</p>; </li>; <li>; <p>Deprecate IptcImagePlugin helpers <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7664"">#7664</a>; [nulano, hugovk, radarhere]</p>; </li>; <li>; <p>Allow uncompressed TIFF images to be saved in chunks <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7650"">#7650</a>; [radarhere]</p>; </li>; <li>; <p>Concatenate multiple JPEG EXIF markers <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7496"">#7496</a>; [radarhere]</p>; </li>; <li>; <p>Changed IPTC tile tuple to match other plugins <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7661"">#7661</a>; [radarhere]</p>; </li>; <li>; <p>Do not assign new fp attribute when exiting context manager <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7566"">#7566</a>; [radarhere]</p>; </li>; <li>; <p>Support arbitrary masks for uncompressed RGB DDS images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7589"">#7589</a>; [radarhere, akx]</p>; </li>; <li>; <p>Support setting ROWSPERSTRIP tag <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7654"">#7654</a>; [radarhere]</p>; </li>; <li>; <p>Apply ImageFont.MAX_STRING_LENGTH to ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7662"">#7662</a>; [radarhere]</p>; </li>; <li>; <p>Optimise <code>ImageColor</code> using <code>functools.lru_cache</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7657"">#7657</a>; [hugovk]<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:10915,plugin,plugins,10915,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['plugin'],['plugins']
Modifiability,"<blockquote>; <h2>v1.22.0</h2>; <h1>NumPy 1.22.0 Release Notes</h1>; <p>NumPy 1.22.0 is a big release featuring the work of 153 contributors; spread over 609 pull requests. There have been many improvements,; highlights are:</p>; <ul>; <li>Annotations of the main namespace are essentially complete. Upstream; is a moving target, so there will likely be further improvements,; but the major work is done. This is probably the most user visible; enhancement in this release.</li>; <li>A preliminary version of the proposed Array-API is provided. This is; a step in creating a standard collection of functions that can be; used across application such as CuPy and JAX.</li>; <li>NumPy now has a DLPack backend. DLPack provides a common interchange; format for array (tensor) data.</li>; <li>New methods for <code>quantile</code>, <code>percentile</code>, and related functions. The; new methods provide a complete set of the methods commonly found in; the literature.</li>; <li>A new configurable allocator for use by downstream projects.</li>; </ul>; <p>These are in addition to the ongoing work to provide SIMD support for; commonly used functions, improvements to F2PY, and better documentation.</p>; <p>The Python versions supported in this release are 3.8-3.10, Python 3.7; has been dropped. Note that 32 bit wheels are only provided for Python; 3.8 and 3.9 on Windows, all other wheels are 64 bits on account of; Ubuntu, Fedora, and other Linux distributions dropping 32 bit support.; All 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix; the occasional problems encountered by folks using truly huge arrays.</p>; <h2>Expired deprecations</h2>; <h3>Deprecated numeric style dtype strings have been removed</h3>; <p>Using the strings <code>&quot;Bytes0&quot;</code>, <code>&quot;Datetime64&quot;</code>, <code>&quot;Str0&quot;</code>, <code>&quot;Uint32&quot;</code>,; and <code>&quot;Uint64&quot;</code> as a dtype will now raise a <code>TypeError</code>.</p>; <p>(<a h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:1199,config,configurable,1199,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['config'],['configurable']
Modifiability,"@tehruhn and I found that trying to install qutip from pip with the latest python 3.9 fails. When we run the installations from a fresh conda env (conda 4.8.5) using pip as. ```; pip install qutip; ```; or with conda (using both). ```; conda install -c conda-forge qutip; conda install qutip; ```. we get different errors. The errors do not occur if we use python3.8 while creating the conda environment as. ```; conda create -n py38 python==3.8; ```. Looking at the error it seems there is specification that prohibits python 3.9. @jakelishman @Ericgig any idea about this?. # Steps to reproduce (with conda 4.8.5). ```; conda create -n qutip-test python=3.9; conda activate qutip-test; conda install -c conda-forge qutip; ```. ### Error; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - qutip -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.5,<3.6.0a0|3.4.*']. Your python: python=3.9. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. Note that strict channel priority may have removed packages",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371:873,flexible,flexible,873,https://qutip.org,https://github.com/qutip/qutip/issues/1371,1,['flexible'],['flexible']
Modifiability,"A few people have been asking for this again recently. ; I have produced this new PR, rather than apply #396, as its a bit simpler and more flexible. It is a bit more memory consumptive, but probably a small percentage of the whole. It's also based an recent pull. . No notebook as yet, as I will wait for feedback from those who requested it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/506:140,flexible,flexible,140,https://qutip.org,https://github.com/qutip/qutip/pull/506,1,['flexible'],['flexible']
Modifiability,Adapt qutip 4.7 for matplotlib 3.8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2243:0,Adapt,Adapt,0,https://qutip.org,https://github.com/qutip/qutip/pull/2243,1,['Adapt'],['Adapt']
Modifiability,Adapt to download / upload artifacts v4,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2476:0,Adapt,Adapt,0,https://qutip.org,https://github.com/qutip/qutip/pull/2476,2,['Adapt'],['Adapt']
Modifiability,Add `.pre-commit-config.yml`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742:17,config,config,17,https://qutip.org,https://github.com/qutip/qutip/issues/1742,1,['config'],['config']
Modifiability,Add a more flexible base result class for v5.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:11,flexible,flexible,11,https://qutip.org,https://github.com/qutip/qutip/pull/1907,1,['flexible'],['flexible']
Modifiability,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644:120,variab,variable,120,https://qutip.org,https://github.com/qutip/qutip/pull/1644,1,['variab'],['variable']
Modifiability,Added division by scalar to be more flexible.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1994:36,flexible,flexible,36,https://qutip.org,https://github.com/qutip/qutip/pull/1994,1,['flexible'],['flexible']
Modifiability,Added functions for expanding 1 and 2 qubit gates to larger qubit spaces. Added optional arguments to all gate functions for configuring the gates to operate in a such a N-qubit space.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/103:125,config,configuring,125,https://qutip.org,https://github.com/qutip/qutip/pull/103,1,['config'],['configuring']
Modifiability,"Added new logging and settings support, started refactoring debugs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:48,refactor,refactoring,48,https://qutip.org,https://github.com/qutip/qutip/pull/248,1,['refactor'],['refactoring']
Modifiability,"Allow rerunning of dnorm tests, refactor test_metrics.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:32,refactor,refactor,32,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['refactor'],['refactor']
Modifiability,"An additional algorithm has been added. The existing GRAPE algorithm remains the default; The CRAB algorithm was developed at the University of Ulm; The main difference is that it reduces the number of optimisation variables by defining the control pulses by expansions of basis functions, where the variables are the coefficients. Typically a Fourier series is chosen, i.e. the variables are the Fourier coefficients. Therefore it does not need to compute an explicit gradient. By default it uses the Nelder-Mead method for fidelity error minimisation. Further explanation is given in the comments. Significant changes were required to many of the classes in order to support another alg option in a tidy way.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/338:215,variab,variables,215,https://qutip.org,https://github.com/qutip/qutip/pull/338,3,['variab'],['variables']
Modifiability,"As reported by Dan Hu on the mailing list, the cython code generated by Codegen fails to compile if args contains complex valued variables. The following minimal example reproduces the problem:. ```; from qutip import *; a = destroy(10); H0 = a.dag() * a; #H = [H0, [a.dag(), 'exp(1j * w * t) '], [a, 'exp(-1j * w * t)']]; args = {'w': 1} # works ; H = [H0, [a.dag(), 'exp(delta * t) '], [a, 'exp(-delta * t)']]; args = {'delta': 1j} # fails; mesolve(H, basis(10, 2), linspace(0, 10, 100), [a], [], args=args); ```. The error from the cython code is:. ```; spmvpy(data1, idx1, ptr1, vec, np.exp(-delta * t), out); ^; ------------------------------------------------------------; rhs9.pyx:20:39: Invalid operand type for '-' (complex_t); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/68:129,variab,variables,129,https://qutip.org,https://github.com/qutip/qutip/issues/68,1,['variab'],['variables']
Modifiability,BlockRedfield-Coupling operators,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/910:14,Coupling,Coupling,14,https://qutip.org,https://github.com/qutip/qutip/issues/910,1,['Coupling'],['Coupling']
Modifiability,Bug in codegen: complex valued variables,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/68:31,variab,variables,31,https://qutip.org,https://github.com/qutip/qutip/issues/68,1,['variab'],['variables']
Modifiability,"Bumps [numpy](https://github.com/numpy/numpy) from 1.21.0 to 1.22.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.22.0</h2>; <h1>NumPy 1.22.0 Release Notes</h1>; <p>NumPy 1.22.0 is a big release featuring the work of 153 contributors; spread over 609 pull requests. There have been many improvements,; highlights are:</p>; <ul>; <li>Annotations of the main namespace are essentially complete. Upstream; is a moving target, so there will likely be further improvements,; but the major work is done. This is probably the most user visible; enhancement in this release.</li>; <li>A preliminary version of the proposed Array-API is provided. This is; a step in creating a standard collection of functions that can be; used across application such as CuPy and JAX.</li>; <li>NumPy now has a DLPack backend. DLPack provides a common interchange; format for array (tensor) data.</li>; <li>New methods for <code>quantile</code>, <code>percentile</code>, and related functions. The; new methods provide a complete set of the methods commonly found in; the literature.</li>; <li>A new configurable allocator for use by downstream projects.</li>; </ul>; <p>These are in addition to the ongoing work to provide SIMD support for; commonly used functions, improvements to F2PY, and better documentation.</p>; <p>The Python versions supported in this release are 3.8-3.10, Python 3.7; has been dropped. Note that 32 bit wheels are only provided for Python; 3.8 and 3.9 on Windows, all other wheels are 64 bits on account of; Ubuntu, Fedora, and other Linux distributions dropping 32 bit support.; All 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix; the occasional problems encountered by folks using truly huge arrays.</p>; <h2>Expired deprecations</h2>; <h3>Deprecated numeric style dtype strings have been removed</h3>; <p>Using the strings <code>&quot;Bytes0&",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:662,enhance,enhancement,662,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['enhance'],['enhancement']
Modifiability,"Change `bloch_redfield_tensor` to be an equivalent to the `liouvillian` function.; As the former, it is now placed in core and support the both constant and time-dependant systems. (Removing the need for `br_codegen.py`). Previously, `bloch_redfield_tensor` returned the tensor in the frame where the Hamiltonian was diagonalized, now it offer the option between returning the tensor in that frame of the the lab frame. The function `brterm` as been added as the equivalent to `lindblad_dissipator`, it compute the contribution of one `a_op` of a bloch Redfielf tensor. The last user facing addition is `SpectraCoefficient`, it transform a coefficient of `t` to one of `w`. The coupling with the environment include a frequency response function which, in `brmesolve`, could be a function, string or `Cubic_Spline`, thus a `Coefficient`, but with a `w` input. `SpectraCoefficient` is to have interpolation based coefficient take the `w` input. . `QobjEvo` created by `brterm` use a custom element: `_BlochRedfieldElement` to allow faster matmul with a state. Since the operator in computed in a basis and the state is in another, having `matmul` change the state basis is usually faster than changing the operator basis. Each `_BlochRedfieldElement` of a `QobjEvo` share a `_EigenBasisTransform`, the object that does the Hamiltonian diagonalization at each call. It would be nice to support to computation of the tensor using `Data`. but it would require `ndarray.__mul__` equivalent to the dispatched function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651:678,coupling,coupling,678,https://qutip.org,https://github.com/qutip/qutip/pull/1651,1,['coupling'],['coupling']
Modifiability,Changed __mul__ behviour to be more flexible and consistent.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620:36,flexible,flexible,36,https://qutip.org,https://github.com/qutip/qutip/pull/1620,1,['flexible'],['flexible']
Modifiability,"Clarification of some variable naming to attempt to link with literature and also be usable without having to read the papers.; Switch to a class module. In line with recent work from @arnelg ; Moved to nonmarkov folder, as this is a non-Markovian approx method. Old file remains with deprecated function, just in case anyone was using it. This now links to the new instance method.; Many efficiency improvements (now up to 10x faster). Test added. . Will provide a notebook example soon. Then some documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:22,variab,variable,22,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['variab'],['variable']
Modifiability,"Cleanup API of generic solver related support classes and functions (Odeoptions -> Options, Odedata -> SolverResult, odeconfig.odeconfig -> solver.config)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/168:147,config,config,147,https://qutip.org,https://github.com/qutip/qutip/pull/168,1,['config'],['config']
Modifiability,Correcting EnhancedTextProgressBar broken init,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/334:11,Enhance,EnhancedTextProgressBar,11,https://qutip.org,https://github.com/qutip/qutip/pull/334,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:487,adapt,adaptive,487,https://qutip.org,https://github.com/qutip/qutip/issues/1571,2,"['adapt', 'refactor']","['adaptive', 'refactoring']"
Modifiability,"Currently qutip.control.optimize_pulse supports four formats for `oper_dtype` (i.e. its internal representation of propagators and intermediate states). The four formats and their statuses before this PR are described below:. - `numpy.ndarray`: Working.; - `Qobj`: Working, except that some dimensions were lost in Qobj construction and using sparse eigenvector decomposition was broken.; - `scipy.sparse.csr_matrix`: Broken. There was an undefined variable referenced in the code to construct the propagators. Many code paths had no explicit support for them and assumed they worked the same as ndarrays in cases where they didn't.; - `anything matrix-like`: Broken for the same reasons as `csr_matrix` above. This PR removes support for last two oper_dtypes and fixes the `Qobj` one, leaving the situation as follows:. - `numpy.ndarray`: Working.; - `Qobj`: Working.; - `scipy.sparse.csr_matrix`: No longer supported.; - `anything matrix-like`: No longer supported. Note that `Qobj` uses sparse matrices internally, so CSR matrix support is still available via the `Qobj` oper_dtype. In QuTiP v5, only `Qobj` support will be retained since `Qobj` will support both sparse and dense representations via the data layer. **Related issues or PRs**; * Fixes #1617. **Changelog**; Fix qutip.control.optimize_pulse support for sparse eigenvector decomposition with the Qobj oper_dtype (the Qobj oper_dtype is the default for large systems).; Remove qutip.control.optimize_pulse support for scipy.sparse.csr_matrix and generic ndarray-like matrices. Support for these was non-functional.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1621:449,variab,variable,449,https://qutip.org,https://github.com/qutip/qutip/pull/1621,1,['variab'],['variable']
Modifiability,"Currently the `qutip.measurement.measure_observable` function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.; ```; import qutip as qt; import qutip.measurement as meas; import numpy as np. #Prepare Bell state; state = qt.tensor([qt.basis(2, 0)]*2) + qt.tensor([qt.basis(2, 1)]*2); state = state.unit(). # ZZ operator; op = qt.tensor([qt.sigmaz()]*2). result_eigenvalue, final_state = meas.measure(state, op). #Check that the measurement didn't change the state (because it is an eigenstate of the measurement operator); assert np.isclose(qt.fidelity(final_state, state), 1) #fails; ```. I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the `measure` function, but the following enhancement would be very useful:; An option `respect_degenerate_eigenvalues=False` in `qutip.measurement.measure_observable` that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1800:1115,enhance,enhancement,1115,https://qutip.org,https://github.com/qutip/qutip/issues/1800,1,['enhance'],['enhancement']
Modifiability,"Currently, the`identity` and `qeye` functions each take lists of dims as an alternative to an integer. For instance, `qeye([2, 3])` is equivalent to `tensor(qeye(2), qeye(3))`. While convenient, this is inconsistent with `zero_oper`, `basis`, `maximally_mixed_dm`, `projection` and `zero_ket`. Would it be worth extending the shorthand used by `identity` to these functions?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363:312,extend,extending,312,https://qutip.org,https://github.com/qutip/qutip/issues/363,1,['extend'],['extending']
Modifiability,"Dear Everyone,. Thanks for the great job with Qutip package. I am amazed by the package and how various models and techniques are implemented on it. . I have been using the time-dependent bloch-redfield solver lately and the runtime is superb when I convert all the Hamiltonian and the collapse operators to string format, and use the solver option reuse_rhs=True. I really wish I could run sweeps over the bath parameters while still retaining the original Hamiltonian without having to recompile it. It would be nice if you could extend the scope of args so that bath parameters could also be passed as arguments of the call. . The second issue is that the cython file that the brmesolver creates is missing the import scypi.spe, that is the special functions from Scipy. One needs to add the following lines to the BR_codegen:. import scipy.special as spe; cimport scipy.special as spe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1366:532,extend,extend,532,https://qutip.org,https://github.com/qutip/qutip/issues/1366,1,['extend'],['extend']
Modifiability,"Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems. Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook. . Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See https://github.com/qutip/qutip-notebooks/issues/100. One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in https://github.com/qutip/qutip/pull/1092, using [loky](https://loky.readthedocs.io). In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence. If the freeze is indeed caused by spawn-multiprocessing, the problem *should* also show up on Windows. Is anyone running Windows able to reproduce this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202:202,inherit,inheriting,202,https://qutip.org,https://github.com/qutip/qutip/issues/1202,2,"['inherit', 'variab']","['inheriting', 'variables']"
Modifiability,Docstring for Variable Returns!,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1305:14,Variab,Variable,14,https://qutip.org,https://github.com/qutip/qutip/issues/1305,1,['Variab'],['Variable']
Modifiability,"Document Continuous Variables, Countstat, and Distributions Modules",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1522:20,Variab,Variables,20,https://qutip.org,https://github.com/qutip/qutip/issues/1522,1,['Variab'],['Variables']
Modifiability,During test control.pulseoptim: Hadamard gate (loading config from file) this deprecation warning sometimes happens:; control.pulseoptim: Hadamard gate (loading config from file) ... C:\Users\Paul\A; naconda2\lib\site-packages\qutip\control\loadparams.py:92: DeprecationWarning: Y; ou passed a bytestring as `filenames`. This will not work on Python 3. Use `cp.r; ead_file()` or switch to using Unicode strings across the board.; Reported on pip install of 4.0.1 on macOS; Not able to reproduce on Linux (py2 or py3).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/598:55,config,config,55,https://qutip.org,https://github.com/qutip/qutip/issues/598,2,['config'],['config']
Modifiability,"E; lapack_info:; libraries = ['lapack', 'lapack']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = f77; lapack_opt_info:; libraries = ['lapack', 'lapack', 'blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = c; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; include_dirs = ['/usr/local/include', '/usr/include']; Supported SIMD extensions in this NumPy install:; baseline = SSE,SSE2,SSE3; found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2; not found = AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL; ```; So numpy itself marks openblas_info as NOT AVAILABLE (evidently using a build-time test, not runtime, which arguably is a pity). It seems to me that `hasattr` in qutip's BLAS support tests is returning false positives and false negatives. It indicates if the attribute was defined, even though it might be empty. Would it be better to replace; ```; hasattr(config,'openblas_info'); ```; in qutip/utilities.py with; ```; hasattr(config,'openblas_info') and config.openblas_info; ```; likewise for blas_mkl_info (not mkl_info) ?. This would be similar to numpy's own usage in `np.show_config()` (i.e. `np.__config__.py.show()`), which [uses](https://github.com/numpy/numpy/blob/3b7672ebd16982b661b8fbcabac80158662a8784/numpy/__config__.py.in#L116) `if not info_dict` to print ""NOT AVAILABLE"". ### Code to Reproduce the Bug. ```shell; import numpy; numpy.show_config(). import qutip; qutip.about(); ```. ### Code Output. ```shell; $ python3; Python 3.10.9 (main, Dec 7 2022, 13:47:07) [GCC 12.2.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import numpy; >>> numpy.show_config(); ...; blas_mkl_info:; NOT AVAILABLE; ...; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; ...; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:3784,config,config,3784,https://qutip.org,https://github.com/qutip/qutip/issues/2053,2,['config'],['config']
Modifiability,ENH: Intel MKL Sparse Enhancements,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/459:22,Enhance,Enhancements,22,https://qutip.org,https://github.com/qutip/qutip/pull/459,1,['Enhance'],['Enhancements']
Modifiability,"ENH: qutip-doc refactoring, changelog, PR template",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1172:15,refactor,refactoring,15,https://qutip.org,https://github.com/qutip/qutip/issues/1172,1,['refactor'],['refactoring']
Modifiability,"Enhance: Division by zero caught in stats.calculate; New: test out files directory can now be specified using optimconfig.test_out_subdir; Enhance: makedirs used to create test_out_dir, so nested directories can be used; Enhance: missing config sections now caught and reported as warnings; New: pulsegen parameters can now be read from config file; Enhance: iter, fid_err, fid_err_grad test_out_files now appended to rather than held open",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/301:0,Enhance,Enhance,0,https://qutip.org,https://github.com/qutip/qutip/pull/301,6,"['Enhance', 'config']","['Enhance', 'config']"
Modifiability,EnhancedTextProgressBar not coherent with docstring of BaseProgressBar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2148:0,Enhance,EnhancedTextProgressBar,0,https://qutip.org,https://github.com/qutip/qutip/issues/2148,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,EnhancedTextProgressBar occasionally printing extra statuses,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1229:0,Enhance,EnhancedTextProgressBar,0,https://qutip.org,https://github.com/qutip/qutip/issues/1229,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,Enhancement nonsquare superopreps,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098:0,Enhance,Enhancement,0,https://qutip.org,https://github.com/qutip/qutip/pull/1098,1,['Enhance'],['Enhancement']
Modifiability,Evolver class and utilities,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:0,Evolve,Evolver,0,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['Evolve'],['Evolver']
Modifiability,Extend about,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/224:0,Extend,Extend,0,https://qutip.org,https://github.com/qutip/qutip/pull/224,1,['Extend'],['Extend']
Modifiability,Extend visualization,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/127:0,Extend,Extend,0,https://qutip.org,https://github.com/qutip/qutip/pull/127,1,['Extend'],['Extend']
Modifiability,"Following the workaround in [this stackoverflow answer](https://stackoverflow.com/a/67483317), added `autodoc_type_aliases` to the config of sphinx and added `from __future__ import annotations` where necessary. Makes it so that the docs say; ```; H: QobjEvoLike; ```; instead of; ```; H: Qobj | QobjEvo | ~qutip.typing.QEvoProtocol | tuple['Qobj', typing.Union[ForwardRef('Coefficient'), str, qutip.typing.CoeffProtocol, numpy.ndarray, scipy.interpolate._interpolate.PPoly, scipy.interpolate._bsplines.BSpline, typing.Any]] | ~typing.Sequence[~qutip.typing.QEvoProtocol | Qobj | tuple['Qobj', typing.Union[ForwardRef('Coefficient'), str, qutip.typing.CoeffProtocol, numpy.ndarray, scipy.interpolate._interpolate.PPoly, scipy.interpolate._bsplines.BSpline, typing.Any]]]; ```. (Also cleaned up imports in files I touched, and fixed a typo in Qobj type annotations.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2436:131,config,config,131,https://qutip.org,https://github.com/qutip/qutip/pull/2436,1,['config'],['config']
Modifiability,Handle change in configuration attributes for numpy 1.22.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1752:17,config,configuration,17,https://qutip.org,https://github.com/qutip/qutip/pull/1752,2,['config'],['configuration']
Modifiability,"Hello, I want to solve problems in optomechanics with QuTip but I don't know which packages(mathmp, sympy,sympsi,..) must be used. please guide me about writing QuTip programs for optomechanical systems. also, I want to know in steady state, how I can plot a quantity(like variance) versus variables other than time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/507:290,variab,variables,290,https://qutip.org,https://github.com/qutip/qutip/issues/507,1,['variab'],['variables']
Modifiability,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:329,config,configured,329,https://qutip.org,https://github.com/qutip/qutip/issues/1156,2,['config'],"['configrc', 'configured']"
Modifiability,"Here is the newly implemented method for the `qip` module. I implemented a class `OptPulseProcessor`, which is the subclass of `circuitprocessor` in `qip.models`. It is defined by a set of Hamiltonians, usually determined by the hardware realization. It can take a `QubitsCircuit`, find the corresponding Hamiltonian representation of it (`self.load_circuit`) with `optaoptimize_pulse_unitary ` and then use these control pulses to simulate the circuit at the level of driven Hamiltonian (`self.run_state`). . A large part of it is actually more general and can be moved to circuitprocessor after I refactor `cqed `and `spinchain`. Glad to hear if you have any suggestions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1012:599,refactor,refactor,599,https://qutip.org,https://github.com/qutip/qutip/pull/1012,1,['refactor'],['refactor']
Modifiability,"Hi all,. I'm not sure how to do pull request in this case so let it be a new Issue. I have implemented Milstein method for solving SME for homodyne detection scheme. For my problems it works much better than the simple Euler-Maruyama method. In case of a single Wiener increment all what is required is the new rhs function (see notebook attached). For multiple Wiener increments the provided infrastructure of QuTiP is not enough. One needs to provide all of the A_ops to the rhs. The modified stochastic.py file is also attached (from qutip.stochastic import smesolve_mil). The attached Notebook contains an example of SME with an analytical solution. Which allows to test smesolver for a single quantum trajectory. The notebook and the modified stochastic.py is here:; http://db.tt/dJNjGo3g. P.S. Due to nonlinearity in the stochastic term of quantum SME the simple Euler-Maruyama scheme doesn't work properly sometimes. Even Milstein struggles. From my experience semi implicit methods help. But in order to implement it in a convenient way one needs to modify QuTiP approach to the problem. Maybe instead of rhs function it would be better to have a function which returns \rho_{n+1} instead of d\rho. It could be more flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:1224,flexible,flexible,1224,https://qutip.org,https://github.com/qutip/qutip/issues/35,1,['flexible'],['flexible']
Modifiability,"Hi devs,. I've been running into an issue installing the most recent dev version. The _blas_info() method is throwing the following error:. ```; Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 26 2016, 10:47:25) ; [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/oliviadimatteo/tomo_test/qutip/qutip/__init__.py"", line 174, in <module>; import qutip._mkl; File ""/Users/oliviadimatteo/tomo_test/qutip/qutip/_mkl/__init__.py"", line 3, in <module>; _set_mkl(); File ""/Users/oliviadimatteo/tomo_test/qutip/qutip/_mkl/utilities.py"", line 47, in _set_mkl; if _blas_info() == 'INTEL MKL':; File ""/Users/oliviadimatteo/tomo_test/qutip/qutip/utilities.py"", line 405, in _blas_info; if hasattr(config,'mkl_info') or any('mkl' in lib for lib in blas_info['libraries']):; KeyError: 'libraries'; ```. It seems this method was changed most recently in commit d7bb119 to include a line containing `blas_info['libraries']`. For reference I am doing a basic installation with just numpy (1.11.2), scipy (0.18.1), and cython (0.24.1), and not with any of the fortran MC stuff. I'm using Mac OSX 10.11, and Python 3.5.2. [I've also been able to successfully install using a commit from before this, a31f7fc.] . Please let me know if there is just something I've missed here. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/552:857,config,config,857,https://qutip.org,https://github.com/qutip/qutip/issues/552,1,['config'],['config']
Modifiability,"Hi, this is just a refactoring of @nwlambert 's code for a generic HEOM solver which takes in a set of exponents and coefficients for a spectral density function and can be used to work with arbitrary spectral density functions. In comparison, the current `heom` solver in QuTiP is specialized. . Specific quantum systems in the `qutip/models` sub-module could have the following signature:; ```; model = System(hamiltonian, **params); result = model.solve(initial_state, tlist, options); ```; System specific functions could be in the model class. For instance,; ```; model._rhs(); ```; gives the RHS (a matrix equivalent to an effective Liouvillian) of the density matrix evolution equation. If any system can be written down as the evolution of an initial density matrix as dp/dt = (RHS)p, and there is an optimised way to solve, it can be written down as a qutip.model. The other necessary function would be a basis change map or a lookup dictionary for translating a state tuple to the index in the larger density matrix which is used for the evolution using the effective Liouvillian. This is the `_heom_state_dictionaries` in this case and `jmm1_dictionary` in case of the WIP #753 . The code in the current form is good enough to be used but it needs to be optimized further. The next steps are:; - [x] Tests for RHS generation and the solve function; - [ ] Optimize the generation of the effective Liouvillian (RHS) similar to the `heom` solver; - [ ] Refactoring and deciding on the API (how to pass in the coefficients etc)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/793:19,refactor,refactoring,19,https://qutip.org,https://github.com/qutip/qutip/pull/793,2,"['Refactor', 'refactor']","['Refactoring', 'refactoring']"
Modifiability,"Hi,. I was writing a simple code for a time dependent driving of a two level atom with the excited state decay and encountered the following problem: If I evolve the system using mesolve for particular time dependence of my driving field, namely if the evolution time is set to be from t = 0 to t = 3.5 in the units of 1/(Rabi frequency) and the driving is only present between t = pi/2 and t = pi, I get expected results if I do not include any collapse operators (using []), however as soon as I use the usual collapse operator corresponding to the excited state decay it gives me for all the time the initial values of the quantities. It happens even if I set the decay rate to zero! Also, mcsolve works fine in both cases.; Here is the code that I use:; ```; import numpy as np; import pylab as plt; import scipy as scipy; from qutip import *. #System parameters; Omega = 1; Gamma = 0.1. g = basis(2,0); e = basis(2,1); sgg = g * g.dag() #ground state population; see = e * e.dag() #excited state population; sge = g * e.dag() #atomic coherence sigma_ge. #Driving Hamiltonian; H1 = Omega * (sge + sge.dag()). #Time dependence of the drive; def H1_coeff(t,args):; if t > np.pi:; c =0; elif t >= np.pi/2:; c = 1; else:; c = 0; return c. #Complete Hamiltonian; H = [[H1, H1_coeff]]. #Time; tspan = np.linspace(0,3.5,500). #initial state; psi0 = g. #collapse operators; c_ops = [np.sqrt(Gamma) * sge]. #calculated expectation values; e_ops = [sgg, see]; results = mesolve(H, psi0, tspan, c_ops, e_ops). #plotting the results; fig, ax = plt.subplots(1,1); ax.plot(tspan, results.expect[0]); ax.plot(tspan, results.expect[1]); plt.show(); ```; And here is the information about the packages that I'm using; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.1; Scipy Version: 0.19.1; Cython Version: 0.26; Matplotlib Version: 2.0.2; Python Version: 3.6.2; Number of ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771:155,evolve,evolve,155,https://qutip.org,https://github.com/qutip/qutip/issues/771,1,['evolve'],['evolve']
Modifiability,"Hi,. I'm new to the project as a user. I am trying to solve some problems involving multiple baths with Floquet formalism. Just wondering if you already implemented it in your current version? . Notice this just now in the documentation: http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-floquet.html where 'Currently the qutip.floquet.fmmesolve can only accept a single environment coupling operator and spectral-density function.' But I think it's good and not so difficult to come up with a general solvers where multiple baths are supported by myself. Is it okay if I contribute to this as well?. Cheers,; Tianqi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1464:385,coupling,coupling,385,https://qutip.org,https://github.com/qutip/qutip/issues/1464,1,['coupling'],['coupling']
Modifiability,"Hi,. There is a [manual integration](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L602-L624) using rectangles method in `qutip.floquet` file which sometimes fail. Problem is that the number of timesteps, `nT`, is hardcoded and not accessible to the user. In my case, `nT = 100` does not seem to be enough and the integral is wrong. A quick and dirty fix is to have an extra `nT=100` keyword argument to `floquet_master_equation_rates`, so that user can overload it. Still, it does not seem to be the most efficient way of doing it. I have a quick fix I can contribute which is using `scipy.integrate.simps` instead. This requires keeping an array of values to integrate in memory (which is less memory-efficient) but I could keep `nT=100` and get the correct integral by using this method. I guess the best option would be to use [`scipy.integrate.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad), as it uses an adaptive algorithm. I can contribute a fix for this, just looking for feedback on the best available option :). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/767:986,adapt,adaptive,986,https://qutip.org,https://github.com/qutip/qutip/issues/767,1,['adapt'],['adaptive']
Modifiability,"Hi,; I want to discuss 2 points about how we manage time dependent Hamiltonian, relating to the discussion started on qucontrol/krotov#56. First, presently function coefficients are defined as:; ```; def f(t, args):; return ...; ```; With `args` is a dictionary containing extra variables to pass to the function. For backward compatibility; ```; def f(t, state, args):; return ...; ```; is also accepted if the option `rhs_with_state` is set to `True`. . But there have been demand to accept more signatures: `f(t)` and `f(t, **args)`. PR #1123, when ready, should allow both signature using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work wel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:279,variab,variables,279,https://qutip.org,https://github.com/qutip/qutip/issues/1136,1,['variab'],['variables']
Modifiability,Hsolve enhancements - now class module,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:7,enhance,enhancements,7,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['enhance'],['enhancements']
Modifiability,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:187,evolve,evolve,187,https://qutip.org,https://github.com/qutip/qutip/issues/1605,2,['evolve'],['evolve']
Modifiability,"I am running a IPython/Jupyter Notebook via [supervisor](http://supervisord.org/) which does not export the `$HOME` environment variable (this is of course easily fixable). When importing qutip, I get the following warning message:. ```; WARNING:qutip.settings:Error loading RC file.; Traceback (most recent call last):; File ""/home/mvd/miniconda3/lib/python3.4/site-packages/qutip/__init__.py"", line 138, in <module>; os.environ['HOME'], "".qutiprc""; File ""/home/mvd/miniconda3/lib/python3.4/os.py"", line 633, in __getitem__; raise KeyError(key) from None; KeyError: 'HOME'; ```. Since this is just a warning, does it mean that there are no problems, or will it have some effects?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/365:128,variab,variable,128,https://qutip.org,https://github.com/qutip/qutip/issues/365,1,['variab'],['variable']
Modifiability,"I am trying to use `mesolve` to solve an annealing problem using density matrices. The Hamiltonian evolves with time, $H(t) = \dfrac{t}{T}H_p + (1-\dfrac{t}{T})H_d,~ 0\leq t \leq T$, and I aim to solve the corresponding master equation using qutip, $\hat{\dot{\rho}} = i\left[\hat{H},\hat{\rho}\right]$. I have been doing this with a state vector approach, and the code works fine. With my knowledge of density matrices, I would assume that I can simply replace $\ket{\psi}$ with $\hat{\rho} = \ket{\psi}\bra{\psi}$, and use this as my initial state in `mesolve`. This would obtain density matrices for `sln.states` at each time step, however this seems not to be the case. Code:; ```; from bacon import bacon; import qutip as qt; import numpy as np. #inputs into bacon; spin_coeff = [; 4.8,; 9.5,; 4.82,; ]. coupling_coeff = [; 6.4,; 0,; 6.4; ]. H_input = bacon(; 3,; spin_coeff,; coupling_coeff; ). Hd = H_input.driver(); Hp = H_input.problem(). def init_superpsn(n):; '''; n - number of qubits; '''; state = np.ones((2**n), dtype = int)/np.sqrt(2**n); state = qt.Qobj(state); return state. #forming density matrix; initial_state = init_superpsn(3) * init_superpsn(3).dag(); #commenting out this line gives a different error; #initial_state = qt.Qobj(initial_state, dims = [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]]). grain = 100; anneal_time = 100. # initial coefficients; def d_coeff(t,params): ; return (1-t/params[""T""]); def p_coeff(t,params):; return (t/params[""T""]). Hs = [[Hd, d_coeff], [Hp, p_coeff]]; # ""writes down"" hamiltonian at time t ; H_dyn = qt.QobjEvo(Hs,args={""T"":anneal_time}) ; # solves SE for a particular hamiltonian that we ""wrote down""; s = np.linspace(0, anneal_time, grain); sln = qt.mesolve(H_dyn, initial_state, s) ; states0 = sln.states; ```. Bacon is a class I wrote that forms $H_d$ and $H_d$ Hamiltonians using tensor products. `Hp` is ; ```; Qobj data =; [[ 31.92 0. 0. 0. 0. 0. 0. 0. ]; [ 0. 9.48 0. 0. 0. 0. 0. 0. ]; [ 0. 0. -12.68 0. 0. 0. 0. 0. ]; [ 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989:99,evolve,evolves,99,https://qutip.org,https://github.com/qutip/qutip/issues/1989,1,['evolve'],['evolves']
Modifiability,"I am trying to use code from User Guide's [Directly Generating an Animation section](http://qutip.org/docs/4.1/guide/guide-bloch.html?highlight=funcanimation#directly-generating-an-animation):. ```; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); ```. I get the following error:; ```; Traceback (most recent call last):; File ""bloch_test.py"", line 59, in <module>; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); TypeError: save() got an unexpected keyword argument 'clear_temp'; ```. It looks like OpenDrift may have had the same or similar issue:; https://github.com/OpenDrift/opendrift/issues/9. My hypothesis is that QuTip needs to be adapted to the newer version of Matplotlib.; According to ; ```; from qutip import *; about(); ```; I use Matplotlib version: 2.1.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/798:653,adapt,adapted,653,https://qutip.org,https://github.com/qutip/qutip/issues/798,1,['adapt'],['adapted']
Modifiability,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:626,coupling,coupling,626,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['coupling'],['coupling']
Modifiability,"I get this error for anything less than nsteps = 1000000 (I've tried 5000, 10000, 50000, 100000, 500000) while using mesolve to get the dynamics of the system according to the Lindblad ME.; Details - It is a two qubit model, with both qubits coupled to baths and with inter-qubit coupling present. The solution for unit time with 100 divisions takes about 10 min but for any time interval greater than 1, I keep getting this error even with nsteps = 1000000, 5000000. Anything greater than that takes >2 hours to evaluate. ```python; import numpy as np; import matplotlib as plt; from qutip import *; from cmath import *; ```; Initial State:; ```; initialstate=tensor(fock_dm(2,0),fock_dm(2,0)); ```; Hamiltonian:; ```; epsilon=1; g=0.025; sigmaplus=0.5*(sigmax()+1j*sigmay()); sigmaminus=0.5*(sigmax()-1j*sigmay()); H=0.5*epsilon*(tensor(sigmaz()+qeye(2),qeye(2))+tensor(qeye(2),sigmaz()+qeye(2))) + g*(tensor(sigmaplus,sigmaminus)+tensor(sigmaminus, sigmaplus)). ```; Jump operators:; ```; gamma1=0.1; gamma2=0.05; T1=2; T2=0.05. diss_coeff=[cmath.sqrt(gamma1*(1/exp(epsilon/T1)-1)),cmath.sqrt(gamma1*exp(epsilon/T1)*(1/exp(epsilon/T1)-1)), cmath.sqrt(gamma2*(1/exp(epsilon/T2)-1)), cmath.sqrt(gamma2*exp(epsilon/T2)*(1/exp(epsilon/T2)-1))]. diss_oper=[diss_coeff[0]*tensor(sigmaplus, qeye(2)),diss_coeff[1]*tensor(sigmaminus, qeye(2)),diss_coeff[2]*tensor(qeye(2),sigmaplus), diss_coeff[3]*tensor(qeye(2),sigmaminus)]; ```; Time steps:; ```; tlist = np.linspace(0, 1, 100); ```; Using mesolve:; ```; dynamics=mesolve(H, initialstate, tlist,diss_oper, options=Options(nsteps=10000)) ; ```; Note: nsteps=1000000 in the line above evaluates in 7 min. Ideally, I would like to solve for time in the range (0, 400) but in the worst case, time range (0,250) will do (with about 1000 divisions). But, increasing nsteps is not an option because the evaluation takes too long. Are there any changes I can make for faster evaluation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623:280,coupling,coupling,280,https://qutip.org,https://github.com/qutip/qutip/issues/1623,1,['coupling'],['coupling']
Modifiability,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:138,evolve,evolved,138,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['evolve'],['evolved']
Modifiability,"I have also found that using the iterative SS solver with the preconditioner gives invalid answers for large systems. The following code will give negative numbers of particles for both oscillators (the correct values should be 0.1 and 9.7 for a and b respectively :. from scipy import *; from qutip import *; from pylab import *; import time. Nc=6 #Number of cavity states; Nm=46 #Number of mechanical states; alpha=0.311 #Coherent state amplitude; g0=0.36 #Coupling strength; kappa=0.3 #Cavity damping rate; gamma=0.00147 #Mech damping rate; xvec=linspace(-10,10,500) #Wigner area and sampling; delta=0; # operators. idc=qeye(Nc); idm=qeye(Nm); a=tensor(destroy(Nc),idm); b=tensor(idc,destroy(Nm)); # Hamiltonian terms that do not depend on detuning or coupling. H=(-delta+g0_(b.dag()+b))_(a.dag()_a)+b.dag()_b+alpha*(a.dag()+a); # collapse operators. cc=sqrt(kappa)_a; cm=sqrt(gamma)_b; c_op_list=[cc,cm]; print('Beginning SS'); s=time.time(); # rho_ss=steadystate_direct(H,c_op_list,use_umfpack=True). rho_ss=steadystate_iterative(H,c_op_list,use_precond=False); print('SS Elapsed time: ',time.time()-s); numa=expect(a.dag()_a,rho_ss); numb=expect(b.dag()_b,rho_ss); print('cavity number ',numa); print('mech. number ',numb); rho_b=ptrace(rho_ss,1); W=wigner(rho_b,xvec,xvec); wmap=wigner_cmap(W); contourf(xvec,xvec,W,100,cmap=wmap); colorbar(); show()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/29:459,Coupling,Coupling,459,https://qutip.org,https://github.com/qutip/qutip/issues/29,2,"['Coupling', 'coupling']","['Coupling', 'coupling']"
Modifiability,"I have some detail information for the GSoC 2020 project ""Error mitigation in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub Wiki page. I post it here so if anyone finding it nice could copy it to the Wiki page. I add some details based on the original description:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be fo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:496,enhance,enhanced,496,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['enhance'],['enhanced']
Modifiability,"I have two matrices `A` and `B`. I run. eigvals, eigvecs = simdiag([A, B]); and get. AttributeError Traceback (most recent call last); <ipython-input-8-966464195054> in <module>(); ----> 1 eigvals, eigvecs = simdiag([A, B]); /usr/lib/python3.6/site-packages/qutip/simdiag.py in simdiag(ops, evals); 82 eigvals, eigvecs = la.eig(A.full()); 83 zipped = zip(-eigvals, range(len(eigvals))); ---> 84 zipped.sort(); 85 ds, perm = zip(*zipped); 86 ds = -np.real(np.array(ds)); AttributeError: 'zip' object has no attribute 'sort'. The solution is to change the lines. zipped.sort(); in `simdiag` and the private function `degen` to. zipped = sorted(zipped); I did this and it works. However, I'm also wondering if there are plans to rewrite `simdiag` to be more numerically stable (if possible). I've found that the eigenvalues returned and the accuracy of the eigenvectors depends significantly on the order that they are passed. For instance, I know that `A` has integer eigenvalues, and when I run. eigvals, eigvecs = simuldiag([A, B]); eigvals[0]. I get. array([ 8., 7., 7., 7., 7., 7., 7., 7., 7., 6., 6., 6., 6.,; 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6.,; 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 5., 5.,; 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5.,; 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5.,; 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5.,; 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5., 5.,; 5., 5., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4.,; 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4.,; 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4.,; 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4.,; 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4., 4.,; 4., 4., 4., 4., 4., 4., 4., 3., 3., 3., 3., 3., 3.,; 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,; 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,; 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,; 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 2., 2.,; 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/756:726,rewrite,rewrite,726,https://qutip.org,https://github.com/qutip/qutip/issues/756,1,['rewrite'],['rewrite']
Modifiability,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750:378,config,config,378,https://qutip.org,https://github.com/qutip/qutip/issues/1750,1,['config'],['config']
Modifiability,"I might want to have a Hamiltonian that is two consecutive different pulses. To do this in `mesolve` I just call it like this:. ```; mid_state = mesolve(H1, init_state, ...).states[-1]; end_state = mesolve(H2, mid_state, ...).states[-1]; ```. However in `mcsolve` I can not give a thousand initial states each to be considered as a single trajectory, so I have to use slower time dependent Hamiltonians. Would such an enhancement be welcomed? I will probably have to implemented it for myself anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/120:418,enhance,enhancement,418,https://qutip.org,https://github.com/qutip/qutip/issues/120,1,['enhance'],['enhancement']
Modifiability,"I noticed that while operating in the batch mode of function propagator, it is not possible to use a user-defined options for the ODE solver. After inspecting the source code of propagator, I noticed that the options variable is redefined by the sentence ""options=Options(normalize_output=False))"" inside the function at line 183. I think it means that whatever options we input to the function, it will be restored to the default options because of this sentence.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/843:217,variab,variable,217,https://qutip.org,https://github.com/qutip/qutip/issues/843,1,['variab'],['variable']
Modifiability,"I posted this issue on the QuTiP Tutorials GitHub repo, but it doesn't look like anyone is monitoring it. I've tried googling, but I only find stuff about making sure Imagemagick and Ghostscript are installed and they both are. I also made sure texlive was installed. When I try to generate a circuit diagram as follows:. > %matplotlib inline; > from qutip import *; > from qutip.qip.models.circuitprocessor import *; > from qutip.qip.models.spinchain import *; > ; > N = 3; > qc = QubitCircuit(N); > ; > qc.add_gate(""CNOT"", targets=[0], controls=[2]); > ; > qc.png; > . I get a stack trace. > FileNotFoundError Traceback (most recent call last); > <ipython-input-2-4489e338191c> in <module>(); > 4 qc.add_gate(""CNOT"", targets=[0], controls=[2]); > 5 ; > ----> 6 qc.png; > ; > /home/jhellmers/anaconda3/lib/python3.6/site-packages/qutip/qip/circuit.py in png(self); > 1012 def png(self):; > 1013 from IPython.display import Image; > -> 1014 return Image(self._repr_png_(), embed=True); > 1015 ; > 1016 @property; > ; > /home/jhellmers/anaconda3/lib/python3.6/site-packages/qutip/qip/circuit.py in _repr_png_(self); > 1004 ; > 1005 def _repr_png_(self):; > -> 1006 return _latex_compile(self.latex_code(), format=""png""); > 1007 ; > 1008 def _repr_svg_(self):; > ; > /home/jhellmers/anaconda3/lib/python3.6/site-packages/qutip/qip/circuit_latex.py in _latex_compile(code, filename, format); > 60 os.system(""convert -density %s %s.pdf %s.png"" % (100, filename,; > 61 filename)); > ---> 62 with open(""%s.png"" % filename, ""rb"") as f:; > 63 result = f.read(); > 64 else:; > ; > FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'; > . I'm using. My configuration information is as follows:. > Software	Version; > QuTiP	4.1.0; > Numpy	1.11.3; > SciPy	0.18.1; > matplotlib	2.0.0; > Cython	0.25.2; > Number of CPUs	4; > BLAS Info	INTEL MKL; > IPython	5.1.0; > Python	3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00) [GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]; > OS	posix [linux]; >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/702:1666,config,configuration,1666,https://qutip.org,https://github.com/qutip/qutip/issues/702,1,['config'],['configuration']
Modifiability,"I propose opening a discussion on migrating from Travis CI to Github Actions workflow. It is a quite general and powerful framework, that allows to specify many [trigger events](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow) and actions. . I have no intention of taking any action, but I think it may be a good thing to discuss. Happy to hear pros and cons.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1236:213,config,configuring-and-managing-workflows,213,https://qutip.org,https://github.com/qutip/qutip/issues/1236,2,['config'],"['configuring-a-workflow', 'configuring-and-managing-workflows']"
Modifiability,"I think it would be nice to change the number of cpus to cpus_threads. I would image something like there would be a num_threads variable and then something like num_processes = num_threads_num_cpus, but that looks like it would require a lot of lines to be changed across many files?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/260:129,variab,variable,129,https://qutip.org,https://github.com/qutip/qutip/issues/260,1,['variab'],['variable']
Modifiability,"I think it would make sense to add to the current random quantum objects functionality support for sampling from a few more commonly-used distributions. In particular, the Ginibre and Haar distributions for density operators as well as the [Bruzda et al distribution for CPTP maps](http://www.sciencedirect.com/science/article/pii/S0375960108016885) would be quite nice to have sampling support for. I've written up all three of these based on existing QuTiP functions, such that if there's interest, it would be rather straightforward for me to make a PR for this enhancement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/315:565,enhance,enhancement,565,https://qutip.org,https://github.com/qutip/qutip/issues/315,1,['enhance'],['enhancement']
Modifiability,"I was wondering if configuring a bot might be beneficial for some tasks. For example, checking that the code is well formatted with `black`. Examples are given by Sympy and Cirq (although there they use it for CLAs). . https://github.com/topics/bot. This could also be a fun project for a student (or coder in general) willing to contribute to QuTiP on the software side instead of the physics side. . Maybe though, any interesting feature of a bot can be put in place by a given specific API.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1089:19,config,configuring,19,https://qutip.org,https://github.com/qutip/qutip/issues/1089,1,['config'],['configuring']
Modifiability,"I would like to add the Underdamped Lorentzian spectral density to the HEOM and realised that there should be some discussion on the design. For this specific PR, I am in two minds: . A. I follow the previous code and make a `HSolverUnderDampedBrownian` class. This will be quite different from the HSolverDL class as now, we will take the coefficients ck and vk separately for the non-Matsubara part and then the Mastsubara part and combine them to get the RHS instead of computing them from the coupling strength as before. B. Rewrite a new `Heom` class with the `configure` method taking the ck and vk values and not caring about the spectral density. We add some additional functions to compute the cks and vks based on Drude-Lorrentz, Underdamped Lorrentzian or Ohmic spectral density. We can even do a numerical fitting for the coefficients using the `bath_correlation` function that I added now for any arbitrary spectral density and then feed it to the `configure` method of the new `Heom` class to build the RHS. This is a more generic version of the HEOM which separates the method from specific spectral densities and is close to implementing the following version that is simplified from @nwlambert 's paper :. ![screenshot 2019-03-05 14 41 25](https://user-images.githubusercontent.com/6968324/53809476-16468080-3f55-11e9-90bd-50159a075663.png). I am leaning more towards B and re-structuring the HEOM functions to seperate the SD and the implementation itself. This has some advantages in the future too perhaps if we want to work specificially on the HEOM part without caring about the form of the spectral density. The second point is:. Most of QuTiP's solvers are function based eg., `mesolve`. In `qutip.piqs` however, we tried to do things with the class called `Dicke`. We defined a `pisolve` method similar in spirit to `mesolve` which takes in an initial state, tlist and computes the evolution. For many sophisticated approaches like `piqs` or `heom`, there needs to be some amo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/962:497,coupling,coupling,497,https://qutip.org,https://github.com/qutip/qutip/pull/962,4,"['Rewrite', 'config', 'coupling']","['Rewrite', 'configure', 'coupling']"
Modifiability,"In #1339 I pointed out that the test files were being incorrectly counted in the coverage statistics when running on Travis. This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally ver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:469,config,configuration,469,https://qutip.org,https://github.com/qutip/qutip/pull/1347,3,['config'],"['configs', 'configuration']"
Modifiability,"In `smesolve` if heterodyne detection is chosen and custom measurement operators are provided, the variable `m_ops` is used before being declared [here](https://github.com/qutip/qutip/blob/1253740be0600315286438d1a64f172920b0dadc/qutip/solve/stochastic.py#L604). A quick fix would be changing this line to; ```python; if sso.m_ops is None:; sso.m_ops = m_ops; ```; But probably adding some checks (correct shape, and whether the measured ops look like quadratures) would be nice. Thank you for the tremendous work, by the way!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2078:99,variab,variable,99,https://qutip.org,https://github.com/qutip/qutip/issues/2078,1,['variab'],['variable']
Modifiability,"In file [propagator.py](https://github.com/qutip/qutip/blob/master/qutip/propagator.py), near line 119:; ```python; td_type = _td_format_check(H, c_op_list, solver='me')[2]; if td_type > 0:; rhs_generate(H, c_op_list, args=args, options=options); ```; The performance would be improved if this code checked for the presence of an already compiled tdfunc like this:; ```python; if td_type > 0 and config.tdfunc is None:; ...; ```; which only requires an additional import of the config object from qutip.solver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/555:396,config,config,396,https://qutip.org,https://github.com/qutip/qutip/issues/555,2,['config'],['config']
Modifiability,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607:448,Variab,Variable,448,https://qutip.org,https://github.com/qutip/qutip/issues/1607,1,['Variab'],['Variable']
Modifiability,"In the mcsolver function, it seems that (read from tutorial) the **quantum jumps** happen when a random number is generated larger than **(1-dp)**, where **dp** is no jump probability. And this is the only option for jumping in the algorithm. . In theory, there is another strategy to choose **jump**--that is to use the concept of **waiting time** (see Dum and Zoller's PRA **45** (7), 1992 paper, for example). That is to say, we check the no jump time **t** to see if it is longer than the waiting time $\tau$: if **t** is longer, then a quantum jump happens; otherwise, there is no jump. . Could anyone make the mcsolver flexible enough to let users freely to choose which strategy to use in the algorithm? Each of these two strategies have different meanings and their own advantages: the jumping probability strategy is good for simulating measurement models; the waiting time is more efficient if one just wants to know the averaged result. . If currently none can implement this idea, could you provide a direction for me to write another mcsolver to use the counterpart strategy of jumping? Thanks. Regards,; Qi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111:625,flexible,flexible,625,https://qutip.org,https://github.com/qutip/qutip/issues/111,1,['flexible'],['flexible']
Modifiability,"It is possible that someone having trouble compiling qutip extensions may wish to set CFLAGS, CPATH, C_INCLUDE_PATH. Currently these would not be used in the qutip installation / building or extensions generally. I had a scenario where I was trying to install qutip on machines which I did not have sudo access on. They did not have cython or pydev. So I managed to install pydev and cython into the home folder. For the latter I had to set the C_INCLUDE_PATH to the local install of the C headers, or maybe I used the -I switch with CFLAGS. This did not work for qutip, so I made some changes to the `setup.py` files, and also the `pyximport` in `__init__.py`. However, none of it worked due to disk space issues in the end. Clearly, if there had been enough disk space, then Anaconda would have been a much better solution. So, the question are: ; 1. Is there any value in making a PR from the changes I made (in a local copy) to use the CFLAGS, CPATH, C_INCLUDE_PATH env vars if they are set?. 2. If so should the qutip pyximport extend or prepend the CFLAGS or should it not set CFLAGS at all if the user has set values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/571:1033,extend,extend,1033,https://qutip.org,https://github.com/qutip/qutip/issues/571,1,['extend'],['extend']
Modifiability,"It seems like I could change or remove the option if I could find it. Here is a dump of my issue with setup.py: . $ sudo python setup.py install; Installing without the fortran mcsolver.; running install; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building extension ""qutip.cy.spmatfuncs"" sources; building extension ""qutip.cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-armv7l-2.7/qutip; copying build/src.linux-armv7l-2.7/qutip/**config**.py -> build/lib.linux-armv7l-2.7/qutip; running build_ext; customize UnixCCompiler; customize UnixCCompiler using build_ext; building 'qutip.cy.spmatfuncs' extension; compiling C sources; C compiler: arm-linux-gnueabihf-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC. compile options: '-I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/include/python2.7 -c'; extra options: '-w -ffast-math -O3 -march=native -mfpmath=sse'; arm-linux-gnueabihf-gcc: qutip/cy/spmatfuncs.c; arm-linux-gnueabihf-gcc: error: unrecognized command line option '-mfpmath=sse'; arm-linux-gnueabihf-gcc: error: unrecognized command line option '-mfpmath=sse'; error: Command ""arm-linux-gnueabihf-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/lib/python2.7/dist",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/309:258,config,config,258,https://qutip.org,https://github.com/qutip/qutip/issues/309,4,['config'],['config']
Modifiability,"It would be great if it were possible to specify where the temporary pyx (and other?) files are stored during a cython build. At the moment when one runs mesolve, the pyx files (and maybe others?) get written in the current working folder. Therefore running mesolve with some parameter scan (say with multiprocessing), results in *many* temp files that something like dropbox has to struggle in the background to process. . I can tell from those around me this happens to be an extremely common use case; i.e. most people are using dropbox or the like to backup their files. I would think the easiest thing to do might be to have an ENV variable, like, say QUTIP_BUILD_FOLDER that could dictate where this happens. Alternatively setting the default to system's tmp folder would be a good alternative. . I've looked in docs, and can't see anything like that; please let me know if i missed it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1259:637,variab,variable,637,https://qutip.org,https://github.com/qutip/qutip/issues/1259,1,['variab'],['variable']
Modifiability,"Looking through the commit history, @nonhermitian wrote the graph functions back in 2013: see fd4920d. Since then, he contributed a lot of the same code to `scipy` in `scipy.sparse.csgraph`: see https://github.com/scipy/scipy/pull/3751. I suggest we consider dropping most of them, and consequently their surrounding `Cython` code to ease maintainability and reduce code bloat of the repository. First, a couple of arguments against doing so:; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:339,maintainab,maintainability,339,https://qutip.org,https://github.com/qutip/qutip/issues/1203,2,['maintainab'],['maintainability']
Modifiability,"Main module control.ctrlpulseoptim provides functions for optimising control; pulses for quantum systems. Relies on the other classes for processing. Uses the BFGS (actually primarily the L-BFGS-B) algorthim, which is a quasi-second order Newton method for multivar function optimisation. Examples in the 'examples' folder to demonstrate usage.; 1. Hadamard - a simple example of Hadamard gate synthesis; 2. Lindbladian (open systems) - amplitude damping channel example; 3. Symplectic - a coupled oscillator example; 4. QFT - a 2 qubit example, showing alternative (more configurable) method for invoking the optimisation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246:572,config,configurable,572,https://qutip.org,https://github.com/qutip/qutip/pull/246,1,['config'],['configurable']
Modifiability,"Measuring the statistics of electron transport though nanostructures has been found to be a powerful experimental tool to gather information about such structures. The functions in countstat.py return the first two cumulants of a transport process, which are associated with measuring the current and shot noise, respectively. However at the moment they are a little buggy, and the current noise function fails sometimes, depending on the dimensionality of the system. As well as fixing this issue, there a couple of enhancements that can be done:. 1) Making the current noise function frequency dependant. This just requires adding a list of frequencies to return, and calculating the noise power for each given frequency ( at the moment it returns the zero frequency current noise). 2) Adding higher-order current cumulants. This is a straightforward generalization of the current noise function, though for very high orders the expansion of a given cumulant in terms of pseudo-inverse and current operators can be a little complicated. An iterative method for generating these can be found in C. Flindt et al., Phys. Rev. Lett. 100, 150601 (2008). and C. Flindt, T. Novotny, A. Braggio, and A.-P. Jauho, Phys. Rev. B 82, 155407 (2010). 3) Calculate the large-deviation function of the current. Such functions return the probability of observing deviations from the average transport behaviour, and have been found to give insight on a range of physical phenomena, including bistability and criticality (and, more practically, life insurance!).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/442:517,enhance,enhancements,517,https://qutip.org,https://github.com/qutip/qutip/issues/442,1,['enhance'],['enhancements']
Modifiability,"Minor cleanup of `Qobj` (docstrings, removed unused variable, fixed typo in setter of `data`). Docstring fixes include: removing `type` parameter from constructor, documenting possible types of `inpt` parameter, adding a handful missing functions to the list of functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2330:52,variab,variable,52,https://qutip.org,https://github.com/qutip/qutip/pull/2330,1,['variab'],['variable']
Modifiability,Need for code refactoring?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1729:14,refactor,refactoring,14,https://qutip.org,https://github.com/qutip/qutip/issues/1729,1,['refactor'],['refactoring']
Modifiability,"Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1328:686,maintainab,maintainable,686,https://qutip.org,https://github.com/qutip/qutip/pull/1328,1,['maintainab'],['maintainable']
Modifiability,"OT AVAILABLE; atlas_threads_info:; NOT AVAILABLE; atlas_info:; NOT AVAILABLE; lapack_info:; libraries = ['lapack', 'lapack']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = f77; lapack_opt_info:; libraries = ['lapack', 'lapack', 'blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = c; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; include_dirs = ['/usr/local/include', '/usr/include']; Supported SIMD extensions in this NumPy install:; baseline = SSE,SSE2,SSE3; found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2; not found = AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL; ```; So numpy itself marks openblas_info as NOT AVAILABLE (evidently using a build-time test, not runtime, which arguably is a pity). It seems to me that `hasattr` in qutip's BLAS support tests is returning false positives and false negatives. It indicates if the attribute was defined, even though it might be empty. Would it be better to replace; ```; hasattr(config,'openblas_info'); ```; in qutip/utilities.py with; ```; hasattr(config,'openblas_info') and config.openblas_info; ```; likewise for blas_mkl_info (not mkl_info) ?. This would be similar to numpy's own usage in `np.show_config()` (i.e. `np.__config__.py.show()`), which [uses](https://github.com/numpy/numpy/blob/3b7672ebd16982b661b8fbcabac80158662a8784/numpy/__config__.py.in#L116) `if not info_dict` to print ""NOT AVAILABLE"". ### Code to Reproduce the Bug. ```shell; import numpy; numpy.show_config(). import qutip; qutip.about(); ```. ### Code Output. ```shell; $ python3; Python 3.10.9 (main, Dec 7 2022, 13:47:07) [GCC 12.2.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import numpy; >>> numpy.show_config(); ...; blas_mkl_info:; NOT AVAILABLE; ...; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; ...; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/u",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:3713,config,config,3713,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['config']
Modifiability,"One can reduce the number of variables of the DM by N(N+1)/2 when operating on the upper (or lower) triangle of the DM only. This leads to a overdetermined least-squares problem that can be solved in SciPy. Since the scaling of these solution methods depends heavily on N, this should hopefully lead to a good speed up.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/101:29,variab,variables,29,https://qutip.org,https://github.com/qutip/qutip/issues/101,1,['variab'],['variables']
Modifiability,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:560,config,configrc,560,https://qutip.org,https://github.com/qutip/qutip/issues/1470,8,['config'],"['config', 'configparser', 'configrc']"
Modifiability,Prefix variable names with _ to clear Travis CI warnings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:7,variab,variable,7,https://qutip.org,https://github.com/qutip/qutip/pull/1213,2,['variab'],['variable']
Modifiability,"Prefixes variable names with ```_``` to clear the Travis CI warnings, as mentioned in #1133. Before the changes, the ```travis lint``` output was:. ```; Warnings for .travis.yml:; [x] [warn] on root: deprecated key: stage_generic_linux (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_36 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_38 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_no_cython (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_openblas (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_omp (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_osx (anchor on a non-private key); ```. After the changes, it is:. ```; Hooray, .travis.yml looks valid :); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:9,variab,variable,9,https://qutip.org,https://github.com/qutip/qutip/pull/1213,1,['variab'],['variable']
Modifiability,"Pursuant to discussions over the build failures observed in #359, this PR migrates Travis CI support to their new container-based configuration. I've observed that the builds with this configuration are more reliable, but they are slower for some reason. In the [instructions](http://docs.travis-ci.com/user/migrating-from-legacy/?utm_source=legacy-notice&utm_medium=banner&utm_campaign=legacy-upgrade#Faster-builds) they provide, Travis say that this configuration should be faster, and to let them know if our build is slower; that might be worth doing.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/360:130,config,configuration,130,https://qutip.org,https://github.com/qutip/qutip/pull/360,3,['config'],['configuration']
Modifiability,"Qobj currently use sparse matrix representation for operators and kets/bras, which is optimal for large systen but suboptimal for small systems. We want Qobj to support both sparse and dense matrix representation for the quantum object it represents. This should probably be implemented with two different classes, QobjSparse and QobjDense which inherit a common interface from a parent class Qobj.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/26:346,inherit,inherit,346,https://qutip.org,https://github.com/qutip/qutip/issues/26,1,['inherit'],['inherit']
Modifiability,"QuTiP development is now based on a large community of continuous users and a smaller group of sporadic developers. Some developers continuously contribute to the development. . The nature of QuTiP, at the frontier of quantum physics research, implies that the development of new modules sometimes overlaps or stems from research projects. It could be nice to enhance the rate of contribution and mentoring from the users community in the spirit of openness and scalability. . ## GSoC and Wiki; An example of project ideas has been provided by the [Google Summer of Code 2019](https://numfocus.org/programs/google-summer-code), for which various researchers and coders, even if not directly part of the lead development team, proposed new projects on the [Wiki](https://github.com/qutip/qutip/wiki//Google-Summer-of-Code-2019). Two of these ideas were eventually brought forth by two students to develop their own projects over the summer. . The details are here https://gsoc2019-boxili.blogspot.com/ and here https://latticemodelfunctions.blogspot.com/. ## KWoC; I applied to the Kharagpur Winter of Code ([KWoC](https://kwoc.kossiitkgp.org/)) where mainly BSc and also MSc / PhDs can participate over the winter to a project on QuTiP. QuTiP just got selected and there is the opportunity for students projects over the winter. I will begin with proposing mine, but this is an opportunity also for mentors to propose their projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projec",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:360,enhance,enhance,360,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['enhance'],['enhance']
Modifiability,"QuTiP is currently distributed through both Anaconda's conda-forge channel (`conda install qutip`) and PyPI (`pip install qutip`).; It could be helpful to the maintainers to have the project also on the test channel of PyPI, https://test.pypi.org, testing the distribution before uploading a new release on the actual PyPI channel. The [instructions](https://packaging.python.org/guides/using-testpypi/) are straightforward. Placing this as a memo for v. 4.4. Testing this would be helpful also as we attempt the wheels configuration (#933), which, as I understood from @Ericgig, might not be so straightforward given the low-level calls that QuTiP makes in some functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:520,config,configuration,520,https://qutip.org,https://github.com/qutip/qutip/issues/992,1,['config'],['configuration']
Modifiability,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1766:512,config,config,512,https://qutip.org,https://github.com/qutip/qutip/issues/1766,1,['config'],['config']
Modifiability,Refactor mcsolve parallel,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276:0,Refactor,Refactor,0,https://qutip.org,https://github.com/qutip/qutip/pull/276,1,['Refactor'],['Refactor']
Modifiability,Refactor solve gates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1226:0,Refactor,Refactor,0,https://qutip.org,https://github.com/qutip/qutip/pull/1226,1,['Refactor'],['Refactor']
Modifiability,Refactor sparse module,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/158:0,Refactor,Refactor,0,https://qutip.org,https://github.com/qutip/qutip/pull/158,1,['Refactor'],['Refactor']
Modifiability,Refactor tensor,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/100:0,Refactor,Refactor,0,https://qutip.org,https://github.com/qutip/qutip/pull/100,1,['Refactor'],['Refactor']
Modifiability,Remove operator in data-layers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1649:24,layers,layers,24,https://qutip.org,https://github.com/qutip/qutip/pull/1649,1,['layers'],['layers']
Modifiability,Rewrite entire git procedure for release,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1544:0,Rewrite,Rewrite,0,https://qutip.org,https://github.com/qutip/qutip/pull/1544,1,['Rewrite'],['Rewrite']
Modifiability,"See #238 for more details, but this extends `_permute` and `super_tensor` to act correctly on `operator-ket` as well as `super, superrep=""super""`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241:36,extend,extends,36,https://qutip.org,https://github.com/qutip/qutip/pull/241,1,['extend'],['extends']
Modifiability,See #954 ; > This builds fine except for the cqobjevo_omp module that uses unsigned variables for the openmp for loop which is not allowed on windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/955:84,variab,variables,84,https://qutip.org,https://github.com/qutip/qutip/issues/955,1,['variab'],['variables']
Modifiability,Setting qutip-qip as an optional plugin for qutip-5 [unitaryhack],MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920:33,plugin,plugin,33,https://qutip.org,https://github.com/qutip/qutip/pull/1920,1,['plugin'],['plugin']
Modifiability,"Solver object for `sesolve`, `mesolve` and `mcsolve`: `SeSolver`, `MeSolver` and `McSolver`:; - Removed all `rhs_reuse` (except in `brmesolve`). Still work but there is deprecation warning.; - steper for `Sesolver` and `MeSolver` as proposed by Michael.; - Variable output type (`Qobj`, `dense` or `sparse`) input must still be `Qobj`.; - Intermediate object to change the solver used: scipy `zvode`, `solve_ivp`, `dorpri853` are all available for `SeSolver`, `MeSolver`. More could be added in the future, @tehruhn 's GPU solver could probably fit here. I will work on an Adaptative Hilbert Space one eventually. . The objects do not do much more than the original functions if the system is not used more than once. Still to-do:; - Other algorithm for `McSolver`: diagonalized solver (suggested by Fabio?) and one using scipy ivp.; - Inline documentation; - Notebooks; - Cleaning options management. (Unique options object is getting limited for multiple low level solver and both all se,me,mc solve, I would appreciate opinions on how to make this better).; - Add to `__init__.py`; - Add tests. Build on the QobjEvoFunc Pr, with some bug fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1186:257,Variab,Variable,257,https://qutip.org,https://github.com/qutip/qutip/pull/1186,2,"['Adapt', 'Variab']","['Adaptative', 'Variable']"
Modifiability,"Some more clean up of the code. Unit tests still pass. I touched some lines in bloch.py to make things more readable. Is there a generic example that I can run, to make sure the plotting still looks the same. For now the the change to bloch.py is minor, but thought about refactoring some things along the way and didn't want to break anything without a proper test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/11:272,refactor,refactoring,272,https://qutip.org,https://github.com/qutip/qutip/pull/11,1,['refactor'],['refactoring']
Modifiability,"Some of the test have decorators like this:. ```; @unittest.skipIf(_version2int(Cython.__version__) < _version2int('0.14') or; Cython_found == 0, 'Cython not found or version too low.'); ```. with the Cython_found variable being set at the top of the file like this:. ```; # find Cython if it exists; try:; import Cython; except:; Cython_found = 0; else:; Cython_found = 1; ```. The condition in the decorator will error, as the Cython version is checked even though it failed to import.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/449:214,variab,variable,214,https://qutip.org,https://github.com/qutip/qutip/issues/449,1,['variab'],['variable']
Modifiability,Spin-phonon coupling.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1235:12,coupling,coupling,12,https://qutip.org,https://github.com/qutip/qutip/issues/1235,1,['coupling'],['coupling']
Modifiability,"The QIP module is a set of tools for simulating quantum computing, from the high-level of algorithms, down to individual qubit control sequences in a particular physical architecture. So far it has functions for common quantum information processing tasks, including pre-defined quantum gates, along with functions for applying arbitrary 1, 2, and 3 qubit gates to arbitrary target and control qubits in a register of N qubits, circuit representations, a library of quantum algorithms, and models for some common physical QIP architectures. Our goal is to have a set of tools to analyse the influence of unexpected noise sources on a given algorithm realized on a particular architecture, as well as being used as an educational tool for teaching QIP concepts. . QIP module enhancements we plan to implement include:; 1. Simulation of stabilizer circuits and quantum error correction codes.; 2. Simulation of common quantum algorithms - Shor's Factorization, Grover's Search, Quantum Teleportation, and more...( http://math.nist.gov/quantum/zoo/ ); 3. Extend platform to simulate specific quantum computing architectures - Create models to simulate different experimental quantum computing setups like Xmons, including typical environmental noise sources, and limitations on control and readout associated with each example.; 4. Combine the qip and qcontrol modules to optimize circuit and gate decomposition and find ideal fast control pulses to realize particular gates, given physically available limitations of a particular architecture. ; 5. Platform for simulating quantum chemistry on a quantum computer - Create example codes for calculating the ground state of molecules, following specific examples found in DOI: 10.1126/science.1113479 and elsewhere. ; 6. Combine the qip and HEOM/RC solvers to investigate the effect of a non-markovian and nonperturbative environment on error correction and common algorithms.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/441:774,enhance,enhancements,774,https://qutip.org,https://github.com/qutip/qutip/issues/441,2,"['Extend', 'enhance']","['Extend', 'enhancements']"
Modifiability,The `reverse_circuit` function was broken as the gates should have been added to the temporary variable's `QubitCircuit.gates`. A better way is to use the `add_gate` method.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/684:95,variab,variable,95,https://qutip.org,https://github.com/qutip/qutip/pull/684,1,['variab'],['variable']
Modifiability,"The coverall integration is nice, but could we configure it not to comment each and every travis build on every PR? I think is is rather noisy and generates a lot of email notifications... Perhaps the badge in the README file would be sufficient?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/254:47,config,configure,47,https://qutip.org,https://github.com/qutip/qutip/issues/254,1,['config'],['configure']
Modifiability,The dnorm tests are sporadically (quite regularly) failing e.g. ```; ======================================================================; ERROR: Metrics: checks that special cases for dnorm agree with SDP solutions.; ----------------------------------------------------------------------; cvxpy.error.SolverError: Solver 'CVXOPT' failed. Try another solver or solve with verbose=True for more information. Try recentering the problem data around 0 and rescaling to reduce the dynamic range.; ```. I suggest we turn them off by not installing cvxpy for any of the test configurations.; We can turn them on again if someone can make an attempt to make the dnorm tests more reliable @cgranade . I will raise a PR for this now.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/880:571,config,configurations,571,https://qutip.org,https://github.com/qutip/qutip/issues/880,1,['config'],['configurations']
Modifiability,"The latest numpy enables `extra_link_args` in your site.cfg. Hence the `setup.py` files should not set those values. For instance `qutip/fortran/setup.py`:. ```; config.add_extension('qutraj_run',; sources=sources,; extra_compile_args=extra_compile_args,; extra_link_args=extra_link_args,; libraries=libs,; **newblas; ); ```. should be. ```; config.add_extension('qutraj_run',; sources=sources,; libraries=libs,; **newblas; ); ```. as `newblas` can be given options through the `site.cfg`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392:162,config,config,162,https://qutip.org,https://github.com/qutip/qutip/issues/392,2,['config'],['config']
Modifiability,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1577:4,plugin,plugin,4,https://qutip.org,https://github.com/qutip/qutip/pull/1577,1,['plugin'],['plugin']
Modifiability,"The qutip/debian directory should also be moved out of the qutip main repository, but this would require changing the configuration in launchpad and could be a bit tricky.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/160:118,config,configuration,118,https://qutip.org,https://github.com/qutip/qutip/issues/160,1,['config'],['configuration']
Modifiability,"The qutip/setup.py; has these lines. ```; config.add_subpackage('cy'); config.add_subpackage('control'); ```. Should the qip packages and nonmarkov go in there or or is this covered by this in the main setup.py. ```; PACKAGES = ['qutip', 'qutip/ui', 'qutip/cy', 'qutip/qip', 'qutip/qip/models',; 'qutip/qip/algorithms', 'qutip/control', 'qutip/nonmarkov', ; 'qutip/tests']; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/450:42,config,config,42,https://qutip.org,https://github.com/qutip/qutip/issues/450,2,['config'],['config']
Modifiability,"The td-BR solver has about a 3-5 second compile time, regardless of system size. Not 100% sure why it takes this long verses the other solvers, but that is what we got. This Pull allows for passing the usual args dict of variables to the solver for use in td Hamiltonian or c-op terms. In combination with Options(rhs_reuse=True), this should allow the user to bypass additional compilation steps when changing Hamiltonian parameters. This trick does not work for the a_op spectrum strings, since they need to be hardcoded due to limitations in c++.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/750:221,variab,variables,221,https://qutip.org,https://github.com/qutip/qutip/pull/750,1,['variab'],['variables']
Modifiability,"There appears to be a bug in OptimizerLBFGSB.run_optimization . At line 901, _build_bounds_list is called and correctly constructs the list of upper and lower bound tuples and sets self.bounds, however there is no return value. At line 939, the empty variable 'bounds' is passed to scipy.fmin_l_bfgs_b and therefore the constraints are not active. . Easy solution is to change ""bounds=bounds"" to ""bounds=self.bounds"" in line 939.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/353:251,variab,variable,251,https://qutip.org,https://github.com/qutip/qutip/issues/353,1,['variab'],['variable']
Modifiability,"There doesn't seem to be the package released under Ubuntu 16.04 channel. After I added the Ubuntu PPA for QuTiP, I got the following error/warning:. ```; qxd@ubuntu1604$: sudo apt-get update; ...; W: The repository 'http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu xenial Release' does not have a Release file.; N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.; N: See apt-secure(8) manpage for repository creation and user configuration details.; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-amd64/Packages 404 Not Found; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-i386/Packages 404 Not Found; ```. Thanks for maintaining it :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472:487,config,configuration,487,https://qutip.org,https://github.com/qutip/qutip/issues/472,1,['config'],['configuration']
Modifiability,"There seems to be a bug when trying to solve the Schrödinger equation with the sesolve and essolve functions using an initial state vector. The following code reproduces the error:; ```python; ### import dependencies; %matplotlib inline; from qutip import *; import numpy as np; import matplotlib.pyplot as plt. ### define spin operators at each site ; N = 3 # Number of spins; def sz(i):; if i==N:; i=0; l = [qeye(2) for j in range(0,i)] + [sigmaz()] + [qeye(2) for j in range(i+1,N)]; return tensor(l); def sp(i):; if i==N:; i=0; l = [qeye(2) for j in range(0,i)] + [sigmap()] + [qeye(2) for j in range(i+1,N)]; return tensor(l); def sm(i):; if i==N:; i=0; l = [qeye(2) for j in range(0,i)] + [sigmam()] + [qeye(2) for j in range(i+1,N)]; return tensor(l). ### Hamiltonian with on-site field and XX-type coupling between spins 0&1 and spins 0&2; delta = 1; V1 = 0.1; V2 = 0.1 ; H0 = -0.5*delta*(sz(0) + sz(1) + sz(2)) + V1*(sp(0)*sm(1) + sm(0)*sp(1)) + V2*(sp(0)*sm(2) + sm(0)*sp(2)) . ### no collapse operaters; e_op is total magnetization in z-direction ; c_ops = []; e_ops = [sz(0)+sz(1)+sz(2)]. ### initial state: each spin polarized in x-y-plane; psi0 = tensor([(basis(2,0) + (1j)**i *basis(2,1)).unit() for i in range(0,N)]); rho0 = psi0*psi0.dag(). ### compute time evolution with different solvers; t_list = np.linspace(0, 50, 500); output0 = mesolve(H0, rho0, t_list, c_ops, e_ops); output1 = essolve(H0, rho0, t_list, c_ops, e_ops); output2 = sesolve(H0, psi0, t_list, e_ops). ### plot result; plt.plot(t_list, output0.expect[0], label='mesolve'); plt.plot(t_list, output1.expect[0], label='essolve'); plt.plot(t_list, output2.expect[0], label='sesolve'); plt.legend(). ### time evolution with essolve, use state vector --> Exception raised; output3 = essolve(H0, psi0, t_list, c_ops, e_ops); plt.plot(t_list, output0.expect[0], label='essolve, state vector'); plt.legend(); ```; The Hamiltonian commutes with the operator for which the expectation value is computed as is easily checked. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/841:806,coupling,coupling,806,https://qutip.org,https://github.com/qutip/qutip/issues/841,1,['coupling'],['coupling']
Modifiability,"These are all the remaining files from #1181 that neither Eric nor Boxi had explicitly said they were checking, with the commits all tidied up and rebased onto `master`. This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1252:259,refactor,refactor,259,https://qutip.org,https://github.com/qutip/qutip/pull/1252,1,['refactor'],['refactor']
Modifiability,"These are the files that Boxi (@BoxiLi) was checking in #1181, but the commits are tidied up and rebased onto `master`. The merge conflict in `test_gates.py` that's present in #1181 is fixed (with all the tests safely maintained). This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:320,refactor,refactor,320,https://qutip.org,https://github.com/qutip/qutip/pull/1251,1,['refactor'],['refactor']
Modifiability,"These are the files that Eric (@Ericgig) was checking in #1181, but the commits are tidied up and rebased onto `master`. I'll copy over the review comments in that PR that haven't been actioned yet. The potential merge conflict with `test_mcsolve.py` is fixed. This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1250:350,refactor,refactor,350,https://qutip.org,https://github.com/qutip/qutip/pull/1250,1,['refactor'],['refactor']
Modifiability,"This PR is part of PR #969 , splitting that PR in two parts. It contains:; - `qobjevo`'s args that update with the state. (replacing rhs_with_state functionality) ; - method `norm` renamed to `_cdc` as it was not used as a norm.; - cython side of expect method no longer take `isherm` as an arguments.; - security check in propagator for `H` as a function with `batch` method.; - `propagator` uses `sesolve` capability to evolve operators.; - floquet now call `sesolve` instead of `mesolve` with no collapse.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990:422,evolve,evolve,422,https://qutip.org,https://github.com/qutip/qutip/pull/990,1,['evolve'],['evolve']
Modifiability,"This PR suggests enhancing the `qutip.metrics` module by adding a new distance b/w quantum states: the quantum Hellinger distance (QHD), implemented as new function `qutip.metrics.hellinger_dist()`. Excellent description is provided for example in:; _Geometric measures of quantum correlations with Bures and Hellinger distances_, D. Spehner, F. Illuminati, M. Orszag, W. Roga, https://arxiv.org/abs/1611.03449. Albeit a bit less popular than already implemented Bures and trace distances, the QHD is actively studied, eg:; https://arxiv.org/abs/1903.10455; https://arxiv.org/abs/1806.10814; https://arxiv.org/abs/1510.06995. The PR contains tests of properties of the QHD as outlined in arXiv:1611.03449. I am of course keen on performing additional tests, code refactoring, documentation of this feature etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998:763,refactor,refactoring,763,https://qutip.org,https://github.com/qutip/qutip/pull/998,1,['refactor'],['refactoring']
Modifiability,"This change enables the use of Python standard logging, and backs it by a new qutip.settings entry. A few instances of classic `if debug: print` style logging have been refactored. The new `qutip.settings` entry is based on [configobj](http://configobj.readthedocs.org), with a fallback to classic `~/.qutiprc` parsing if that library is not available. Errors in the new functionality introduced by this commit are also logged, and can be accessed by setting up `logging.basicConfig` _before_ importing QuTiP. The optional configobj dependency should almost always be met, since it's shipped with matplotlib.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:169,refactor,refactored,169,https://qutip.org,https://github.com/qutip/qutip/pull/248,4,"['config', 'refactor']","['configobj', 'refactored']"
Modifiability,"This document is a design specification for new dimensions handling. It is only a draft right now; please feel free to offer comments and suggestions. If you only read one section, read ""Overview"" inside ""Proposal"" to get the gist of what will happen. ## Background. For an extended discussion of some of the problems in 4.x branch dimension handling, see #1320. With the new system, we aim to solve a few main problems:; 1. `Qobj` `type` inference should be instantaneous; 2. Binary operation dimension compatibility tests should be instantaneous; 3. Dimension/shape equality tests should be instantaneous; 4. Invalid dimensions should not be representable; Currently, dimension handling is the major overhead in `Qobj` because these problems are not solved. The allowed exception to point 1 is if we include a short-hand notation to represent dimension objects; we may allow a ""pure-Python"" representation (effectively the current dimension specification) to be parsed into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:274,extend,extended,274,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['extend'],['extended']
Modifiability,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1471:35,config,configrc,35,https://qutip.org,https://github.com/qutip/qutip/pull/1471,1,['config'],['configrc']
Modifiability,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:287,rewrite,rewrite,287,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['rewrite'],['rewrite']
Modifiability,"This is code from a jupyter notebook in which I am trying to plot a graph of mesolve. Times is the variable that specifies the scale of the x axis (in units of s). I need to plot over 1ms, but it takes so long to plot that I think it just get stuck. If I plot over a much smaller scale, like 10^-6, it plots with no problem, but even then it can only do so if the number of points is small. It seems that the issue is with nsteps. As you can see, I have made nsteps very large already and if I make it any larger I get an error. I've tried debugging this to the best of my abilities but I've hit a dead end and I just can't find any useful info on nsteps online. %matplotlib inline. import matplotlib.pyplot as plt; import numpy as np; import qutip as q; import cmath; import matplotlib as mpl; from mpl_toolkits.mplot3d import Axes3D. rc_dict = {; ""figure.subplot.bottom"": 0.11,; ""figure.subplot.hspace"": 0.2,; ""figure.subplot.left"": 0.125,; ""figure.subplot.right"": 0.9,; ""figure.subplot.top"": 0.88,; ""figure.subplot.wspace"": 0.2,; ""figure.figsize"":(10,10/1.61),; ""axes.grid"": True,; ""text.usetex"": True,; ""grid.linestyle"": "":"",; ""grid.color"": ""black"", #; ""legend.fontsize"": 20,; ""lines.linewidth"": 2.5,; ""axes.linewidth"": 1.5,; ""font.family"": [""serif""],; ""font.sans-serif"": ""Times New Roman Bold"",; ""font.size"":26,; }; plt.rcParams.update(rc_dict). qutip_options = q.Odeoptions(; store_states=True,; nsteps=2000000000000; ). si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); sp, sm=q.sigmap(), q.sigmam(); state_z_plus=q.basis(2,0); state_z_minus=q.basis(2,1); state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 ; b_AC = 3.572390635108906e-05 ; g = 2; u = 9.274E-24 ; w = g*u*b/h . gamma_phi = 442; gamma_minus = 1. epsilon = g*u*b/h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1376:99,variab,variable,99,https://qutip.org,https://github.com/qutip/qutip/issues/1376,1,['variab'],['variable']
Modifiability,"This is just for future reference for topological quantum circuits. A lab mate of mine (https://github.com/rxnew/) has developed a nice code for visualisation of topological quantum circuits which can be seen here - http://sahmed.in/tqc_viewer/. Click on one of the samples to see the circuit visualisation. It is in 3D and you can zoom in, zoom out and pan the figure. In future, if we implement topological quantum computing, surface codes etc we may wish to use this in some way. . I also had some difficulties with the LaTeX visualisation of quantum circuits and I was wondering if that could be improved somehow. Particularly, the .png file is not created during latex compilation. I will try to reproduce the issue and post here. This should probably be marked as an enhancement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/623:773,enhance,enhancement,773,https://qutip.org,https://github.com/qutip/qutip/issues/623,1,['enhance'],['enhancement']
Modifiability,"This is my first attempt at fixing and slightly extending the functionality of the countstat_current_noise(); function in countstat.py. There were several issues with this function, which I have attempted to rectify as described below. Also its my first pull request (instead of asking anubhav or alex to help), so if I messed it up let me know. 1) The default method, a direct solution using sparse matrices, would fail with an ""exactly singular"" error on small examples (like the well studied single-resonant level or double quantum dot examples). The other sparse methods also suffered from the same issue, as did the 'direct' method for dense solutions. The latter, the dense matrices solver, I have fixed by capturing the error using lstsq() if np.linalg.solve() fails. For the sparse cases there seems to no equivalent fix. One can solve the issue by adding a small finite frequency to the definition of the shot noise. However, this seems like a bit of a bodge, and could cause issues if this small frequency is of the order of some system frequencies. So I have changed the default behavior to use the dense solvers, and added a description of the sparse matrix issues in the function description and in an example notebook I will upload to the example notebooks github. . Maybe someone can suggest a better fix?. 2) There was, in addition, an error in the definition of the shot noise formula in the default sparse matrix direct solution. In addition, the dense methods which used pinv() were also incorrectly defined (they were missing pre and post- multiplication by the 'Q' operator), and would thus give different results from the direct solutions. These issues have been fixed, and everything now fits expected analytical results (see example notebook). 3) I have added a frequency dependence via a list of possible frequencies at which to evaluate the shot noise. 4) I removed the option of passing a pseudo-inverse to the function directly, and changed various other interface things. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528:48,extend,extending,48,https://qutip.org,https://github.com/qutip/qutip/pull/528,1,['extend'],['extending']
Modifiability,"This is post for discussion over whether it might be beneficial to consider additional continuous integration (CI) tools for QuTiP, beyond Travis CI. . Some open-source projects use multiple CI tools, possibly to do different tasks and test different configurations. For example by adding QuTiP to the list of projects using Sphinx for the documentation I noticed they use concurrently Travis CI, CircleCI and [Appveyor](https://github.com/marketplace/appveyor). . [Stackshare](https://stackshare.io/stackups/circleci-vs-jenkins-vs-travis-ci) allows to compare multiple developers tools.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959:251,config,configurations,251,https://qutip.org,https://github.com/qutip/qutip/issues/959,1,['config'],['configurations']
Modifiability,"This is the base PR for the split-up of #1181. This one puts in all the helper functions and updates to previously converted files that are present in that PR, and needs to be merged first before any of the others can be merged. The commits are tidied up and rebased onto `master`. This is the base PR for #1250, #1251 and #1252. **Changelog**; Add pytest helper functions for large-scale test refactoring",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249:394,refactor,refactoring,394,https://qutip.org,https://github.com/qutip/qutip/pull/1249,1,['refactor'],['refactoring']
Modifiability,"This is the clean PR contains the main part of my commits to this GoSC project. It includes the following main points:. 1. A numerical Noisy Intermediate Scale Quantum Computing (NISQ) simulator using the QuTiP opens system solver.; 2. Refactoring the existing `SpinChain` and `CavityQED` module, so that they can also use the numerical simulator.; 3. A noise module `CircuitNoise` that complements the simulator with a framework for noise handling. Documentation can be found at https://github.com/qutip/qutip-doc/pull/85; Notebooks and examples are at https://github.com/qutip/qutip-notebooks/pull/88 . There are other small independent RPs. It would be helpful for the review if they are merged first. - [x] #1050 Modifies the QobjEvo class for step function coefficients; - [x] #1052 Update expand_operator for cyclic permutation; - [x] #1064 Fix the wrong type handling for constant QobjEvo; - [x] #1075 Fix the cyclic importation in the control module. After they get merged, the changed files should be limited within the `qip` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1065:236,Refactor,Refactoring,236,https://qutip.org,https://github.com/qutip/qutip/pull/1065,1,['Refactor'],['Refactoring']
Modifiability,"This patch overhauls how QuTiP is packaged and distributed. Once this patch is merged to `master` (not just `dev.major`), there will be an option on QuTiP's GitHub Actions tab for people who have write permission on qutip/qutip to build all wheels and optionally release the build to PyPI, making it available on `pip` as a binary release. The major changes are in the files `pyproject.toml`, `setup.py`, `setup.cfg` and `.github/workflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. The patch also contains two commits that remove unused OpenMP code and remove a particularly problematic C struct from some inner Python code; the struct and the presence of the dead code caused portability problems, and they in no way change the behaviour of the package. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:711,portab,portability,711,https://qutip.org,https://github.com/qutip/qutip/pull/1429,1,['portab'],['portability']
Modifiability,"This removes the `CI_QUTIP_RELEASE` environment variable and the `--release` flag to `setup.py` in favour of deriving this information from the `VERSION` file. This file should now contain a `.dev` suffix on the `master` and `dev.major` branches to indicate that they are not releases, while release branches will omit it. This means that sdists will no longer attempt to build in local development mode. This also fixes the related bug in handling local versioning when `git` is not installed on the system by making sure any relevant errors are caught. Fix #1514 (after a new sdist release)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1541:48,variab,variable,48,https://qutip.org,https://github.com/qutip/qutip/pull/1541,1,['variab'],['variable']
Modifiability,"This seems to fix the issue reported by Vlad on the Google group. This fixes the errors when using complex cmath header and typedef variables. Variables must be of float, int, or complex, not np.kind_t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/322:132,variab,variables,132,https://qutip.org,https://github.com/qutip/qutip/pull/322,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"This was an incredibly minor optimisation that had a ~2% speedup in some cases on Linux/Mac, but was preventing the build in some configurations on Windows due to failed type conversions. That's not a worthwhile trade-off for some functions that aren't even used that heavily in QuTiP code. I'm now using `dev.major` QuTiP on a Windows machine in day-to-day life, so maybe I'll catch a few more problems with it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1485:130,config,configurations,130,https://qutip.org,https://github.com/qutip/qutip/pull/1485,1,['config'],['configurations']
Modifiability,"Topic:. The `measure(state, ops)` and `measurement_statistics(state, ops)` functions in the measurement PR #1274 have different return types based on whether `ops` is a single observable or a list of POVMs. For e.g. the `measurement_statistics` returns; ; > eigenvalues: List of floats; The list of eigenvalues of the measurement operator.; eigenstates_or_projectors: List of Qobj; If the state was a ket, return the eigenstates of the measurement; operator. Otherwise return the projectors onto the eigenstates.; probabilities: List of floats; The probability of measuring the state as being in the; corresponding eigenstate (and the measurement result being; the corresponding eigenvalue). if `ops` is an observable and ; ; > collapsed_states : List of Qobjs; the collapsed states (density matrices) obtained after; measuring the qubits and obtaining the; qubit specified by the target in the state; specified by the index.; probabilities : List of floats; the probability of measuring a state in a the state; specified by the index. if `ops` is a list of POVMs/PVMs. Is there a good way to specify a numpy docstring for the function given that the return variables can vary !",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1305:1158,variab,variables,1158,https://qutip.org,https://github.com/qutip/qutip/issues/1305,1,['variab'],['variables']
Modifiability,"Two suggestions: ; 1. QuTiP uses an environment variable `NUM_THREADS`. We should probably name-space this variable, calling it `QUTIP_NUM_THREADS` (consistent with how other packages name their variables, like `MKL_NUM_THREADS` and `OPENBLAS_NUM_THREADS`. The upcoming 3.0 release would be a good time to make this change.; 2. Considering that QuTiP does not use thread but processes, it would be even better to call the variable `QUTIP_NUM_PROCESSES`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/119:48,variab,variable,48,https://qutip.org,https://github.com/qutip/qutip/issues/119,4,['variab'],"['variable', 'variables']"
Modifiability,UnboundLocalError: local variable 'e' referenced before assignment,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196:25,variab,variable,25,https://qutip.org,https://github.com/qutip/qutip/issues/1196,1,['variab'],['variable']
Modifiability,UnboundLocalError:local variable 'e' referenced before assignment,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1244:24,variab,variable,24,https://qutip.org,https://github.com/qutip/qutip/issues/1244,1,['variab'],['variable']
Modifiability,Update test_superop_reps to parameterized pytest format,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1825:28,parameteriz,parameterized,28,https://qutip.org,https://github.com/qutip/qutip/pull/1825,1,['parameteriz'],['parameterized']
Modifiability,Variable used before declaration in `smesolve` for heterodyne detection.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2078:0,Variab,Variable,0,https://qutip.org,https://github.com/qutip/qutip/issues/2078,1,['Variab'],['Variable']
Modifiability,"We have a number of pull requests that are all nice fixes and enhancements, however we are delaying merging because of travis test failures. I can't see how any of these pull request can be an underlying cause:; #421; #422; #428; #429. So I will merge all these. We can then investigate what is causing some of the tests to fail under this issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/430:62,enhance,enhancements,62,https://qutip.org,https://github.com/qutip/qutip/issues/430,1,['enhance'],['enhancements']
Modifiability,"We have been talking about pulse level control in the `qip` device simulator for a while, but I just released that we didn't really define it in as separate ""pulse"". I find it really important and therefore I rewrite the data part of the `qip` numerical simulator as a new class `Pulse`. It's quite interesting that I end up to define a class very similar to `EvoElement` in `Qobjevo` (I called it `_EvoElement` for internal use, cannot find a better name). Instead of the full Hamiltonian, I only save the target qubits label and the non-trivial Hamiltonian (e.g. `sigmaz()` instead of `tensor(sigmaz(), identity(2)`). It is defined in this way for easy inspection after initialized, such as adding noise. `_EvoElement` consists of; - Hamlitonian; - Target qutbis label; - `tlist`; - `coeff`. `Pulse` consists of. - ideal part: `_Evoelement`; - coherent noise: list of `_Evoelement`; - lindblad noise: list of `_Evoelement`. The advantages are:; - A list of `Pulse `is easier to understand and manipulate compared to the old design: a list of H and a list of `coeff`. Now different `tlist `can also be defined for different pulses.; - Adding noise is much easier as we now can get the non-trivial part of the Hamiltonian and the targets of each pulse, instead of only a huge Hamiltonian in `QobjEvo`. One can now define noise for each Pulse. Still working on the docs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1155:209,rewrite,rewrite,209,https://qutip.org,https://github.com/qutip/qutip/pull/1155,1,['rewrite'],['rewrite']
Modifiability,"We should modify the `QubitCircuit` class to have input and output states specified for a quantum circuit. Currently the `QubitCircuit` class has only the following variables - N, reverse_gates, gates, U_list. We could add two more variables - input_states, output_states which could contain the input and output states as a list or a dictionary with the qubit number as key and the state as the value. This can be added to QubitCircuit [here](https://github.com/qutip/qutip/blob/master/qutip/qip/circuit.py#L168). . Then we can modify the function [`latex_code`](https://github.com/qutip/qutip/blob/master/qutip/qip/circuit.py#L939) to add in the input and output states similar to how the gates are added so the qcircuit latex package compiles it. The original [discussion](https://groups.google.com/forum/#!topic/qutip/QRu54GlED9A) can be found in the QuTiP Google help group where Morten Kjaergaard suggested this. . To do; -----. - [x] Add input and output states to `QubitCircuit` class.; - [x] Implement latex visualisation of input and output states.; - [ ] Create a dictionary to label known states and get their representation using the `qubit_states` function for computation. {""+"": (|0> + |1>)/sqrt(2), ""0"": 0}. This can be used with the `qubit_state` function to get a `Qobj` so that it can be used for computing.; - [ ] Add a method to get output states from input states by acting the propagators of the circuit on the given input states.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/678:165,variab,variables,165,https://qutip.org,https://github.com/qutip/qutip/issues/678,2,['variab'],['variables']
Modifiability,"When installing Qutip from source in an MSYS2 environment, the build flags should be set to GCC-style like in *nix installations - I updated the relevant files to do this. I just check for the existence of the MSYSTEM environment variable to check for this case.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/779:230,variab,variable,230,https://qutip.org,https://github.com/qutip/qutip/pull/779,1,['variab'],['variable']
Modifiability,"While solving some time-dependent Hamiltonians, I decided to refactor the list-style definition of my Hamiltonian and completely get rid of all ```partial``` calls which made my code much cleaner. In particular, I implemented a small class to construct the time-dependent components that go into the Hamiltonian and overwrote the ```__call__``` method to make my class object directly callable by Qutip. However, this was rejected by Qutip as an ""Incorrect Hamiltonian specification"" due to the format check. Since, as far as I know, subclassing the built-in FunctionType ```function``` is not possible in Python, and subclasses of FunctionType would not be accepted by Qutip either (```_td_format_check``` calls ```isinstance``` and not ```issubclass```), I suggest that Qutip also accepts general objects which have the ```__call__``` attribute defined. Changes: Update ```_td_format_check``` by one extra condition to allow any object with attribute ```__call__``` in the definition of a Hamiltonian.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1107:61,refactor,refactor,61,https://qutip.org,https://github.com/qutip/qutip/pull/1107,1,['refactor'],['refactor']
Modifiability,Work in progress:; - Refactor tensor so that it plays better with tensor products of superoperators (see PR #99); - Simplify and cleanup the code,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/100:21,Refactor,Refactor,21,https://qutip.org,https://github.com/qutip/qutip/pull/100,1,['Refactor'],['Refactor']
Modifiability,"`type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1364,variab,variable,1364,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability,"ackages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 252 ss = H; 253 elif isinstance(H, (list, Qobj, QobjEvo)):; --> 254 ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); 255 elif callable(H):; 256 ss = _mesolve_func_td(H, c_ops, rho0, tlist, args, options). /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/mesolve.py in _mesolve_QobjEvo(H, c_ops, tlist, args, opt); 298 ; 299 nthread = opt.openmp_threads if opt.use_openmp else 0; --> 300 L_td.compile(omp=nthread); 301 ; 302 ss = SolverSystem(). /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo.py in compile(self, code, matched, dense, omp); 1553 if self.use_cython:; 1554 # All factor can be compiled; -> 1555 self.coeff_get, Code, file_ = _compiled_coeffs(; 1556 self.ops,; 1557 self.args,. /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _compiled_coeffs(ops, args, dyn_args, tlist); 121 """"""; 122 code = _make_code_4_cimport(ops, args, dyn_args, tlist); --> 123 coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; 124 ""CompiledStrCoeff"", True); 125 return coeff_obj(ops, args, tlist, dyn_args), code, filename. /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext. UnboundLocalError: local variable 'e' referenced before assignment. Version details.; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.3.1; Cython Version: 0.29.15; Matplotlib Version: 3.1.3; Python Version: 3.8.1; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196:2203,variab,variable,2203,https://qutip.org,https://github.com/qutip/qutip/issues/1196,1,['variab'],['variable']
Modifiability,"aculate(phi, step_dot, v); 4 a_0 = []; 5 for j in tnrange(step_dot):; ----> 6 temp = connection(alpha2_list[j],1,0,phi,step_dot,v); 7 a_0.append(temp); 8 sum_0 = 0. <ipython-input-27-8ed9b415bc26> in connection(alpha2, n_state, w, phi, step, v); 33 H = [H_static,[H_dynamic_0,str0],[H_dynamic_1,str1],[H_dynamic_2,str2],[H_dynamic_3,str3]]; 34 t_list = np.linspace(0,(alpha1_end - alpha1_0)/v,step); ---> 35 result = mesolve(H,psi0,t_list,[],args = {'alpha2':alpha2,'phi':phi,'v':v}); 36 psi = result.states; 37 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 335 elif n_str > 0:; 336 res = _sesolve_list_str_td(H, rho0, tlist,; --> 337 e_ops, args, options, progress_bar); 338 elif isinstance(H, (types.FunctionType,; 339 types.BuiltinFunctionType, partial)):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/sesolve.py in _sesolve_list_str_td(H_list, psi0, tlist, e_ops, args, opt, progress_bar); 420 code = compile('from ' + config.tdname + ' import cy_td_ode_rhs',; 421 '<string>', 'exec'); --> 422 exec(code, globals()); 423 config.tdfunc = cy_td_ode_rhs; 424 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/qutip/sesolve.py in <module>(). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(self, fullname); 443 self.pyxbuild_dir,; 444 build_inplace=self.inplace,; --> 445 language_level=self.language_level); 446 return module; 447 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:1363,config,config,1363,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['config'],['config']
Modifiability,"ad of it's own. When then using `update` (without calling `start` manually again) there will be an `AttributeError` because `width` is not getting initialized by `__init__`. ### Code to Reproduce the Bug. ```shell; from qutip.ui.progressbar import *. n = 10; a = EnhancedTextProgressBar(n); # a.start(n); for i in range(n):; a.update(i); a.finished(); ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""C:\Users\Name\Desktop\qutip_bug.py"", line 6, in <module>; a.update(i); File ""C:\Users\Name\AppData\Local\Programs\Python\Python311\Lib\site-packages\qutip\ui\progressbar.py"", line 96, in update; all_full = self.width - 2; ^^^^^^^^^^; AttributeError: 'EnhancedTextProgressBar' object has no attribute 'width'; ```. ### Expected Behaviour. Proper initialization of the `width` attribute by `EnhancedTextProgressBar.__init__`. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. Currently in master the `__init__` for both `TextProgressBar` and `EnhancedTextProgressBar` have been commented out and made to just pass. See https://github.com/qutip/qutip/blob/af49884aa1db47a980626ac00adfe83277d8d261/qutip/ui/progressbar.py#L66 and https://github.com/qutip/qutip/blob/af49884aa1db47a980626ac00adfe83277d8d261/qutip/ui/progressbar.py#L94. I would suggest making them both call their own `start` method to omit an additional call of start by the user right after initialization. This would also make both classes be in line with the usage suggested by the docstring of `BaseProgressBar.` Otherwise I would suggest to include the call to start in said docstring. As I'm pretty new to github and git in general I would like to try and create a PR myself once you give me approval for the suggested change here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2148:1393,Enhance,EnhancedTextProgressBar,1393,https://qutip.org,https://github.com/qutip/qutip/issues/2148,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,additional arguments added to load_parameters so that a general object attributes can be loaded from a configuration file. For a example a custom fidelity computer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/403:103,config,configuration,103,https://qutip.org,https://github.com/qutip/qutip/pull/403,1,['config'],['configuration']
Modifiability,"agma: no cover&quot; <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7668"">#7668</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Trim glyph size in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7669"">#7669</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix loading IPTC images and update test <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7667"">#7667</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Allow uncompressed TIFF images to be saved in chunks <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7650"">#7650</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Concatenate multiple JPEG EXIF markers <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7496"">#7496</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Changed IPTC tile tuple to match other plugins <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7661"">#7661</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not assign new fp attribute when exiting context manager <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7566"">#7566</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support arbitrary masks for uncompressed RGB DDS images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7589"">#7589</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support setting ROWSPERSTRIP tag <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7654"">#7654</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Apply ImageFont.MAX_STRING_LENGTH to ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7662"">#7662</a> [<a href=""https://github.com/ra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:1961,plugin,plugins,1961,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['plugin'],['plugins']
Modifiability,"and the Qutip version of the code. The code just set up the parameters of the system and builds the Hamiltonian and Lindblad equation. Finally it solves de equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds. Is there something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?. Thank you very much,. Joaquin Guimbao. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import * ; qutip.settings.num_cpus = 16; import math. # Set parameters. g2 = 1 # coupling strength with EM field; kappa = 1 # cavity dissipation rate; gamma = 1 # atom dissipation rate; gamma12 = 1 # dipole-coupling dissipation; N = 2 # number of cavity fock states; dephasing = 10000 # pure dephasing; g=np.random.rand(10)*500 # dipole coupling strengths between 5 atoms. tlist = np.linspace(0,60,200). # intial state; psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0)) # start with an excited atom; rho0 = psi0 * psi0.dag();. # operators; a = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));; sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));; sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));; sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));. # Hamiltonian; H = sm1.dag()*sm1+sm2.dag()*sm2 +sm3.dag()*sm3+ sm4.dag()*sm4+sm5.dag()*sm5+a.dag()*a + g2*(sm1.dag()*a+sm1*a.dag())+g2*(sm2.dag()*a+sm2*a.dag()) + g2*(sm3.dag()*a+sm3*a.dag())+g2*(sm4.dag()*a+sm4*a.dag(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591:1286,coupling,coupling,1286,https://qutip.org,https://github.com/qutip/qutip/issues/1591,2,['coupling'],['coupling']
Modifiability,"as functions to detect the available of BLAS libraries. For instance on my system (debian unstable), `python3 -c ""import qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1021,config,config,1021,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['config']
Modifiability,"build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__ufunc_api.h']; building extension ""numpy.core._umath_tests"" sources; building extension ""numpy.core._rational_tests"" sources; building extension ""numpy.core._struct_ufunc_tests"" sources; building extension ""numpy.core._operand_flag_tests"" sources; building extension ""numpy.fft._pocketfft_internal"" sources; building extension ""numpy.linalg.lapack_lite"" sources; building extension ""numpy.linalg._umath_linalg"" sources; building extension ""numpy.random._mt19937"" sources; building extension ""numpy.random._philox"" sources; building extension ""numpy.random._pcg64"" sources; building extension ""numpy.random._sfc64"" sources; building extension ""numpy.random._common"" sources; building extension ""numpy.random.bit_generator"" sources; building extension ""numpy.random._generator"" sources; building extension ""numpy.random._bounded_integers"" sources; building extension ""numpy.random.mtrand"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; creating build/lib.macosx-11.0-arm64-3.9; creating build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/conftest.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/version.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_globals.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:11571,config,config,11571,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['config'],['config']
Modifiability,"but this is an opportunity also for mentors to propose their projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projects, even on their own funding resources (most probably together with the development of research projects), in coordination with the lead development team, could help foster development in a more sustainable way. . ## Proposal; I propose to help sustain available projects in a more structural way than what is done now. This is an example of a what we could call a **QEP, or ""QuTiP Enhancement Proposal"".**. - One thing that could be done is to simply expand the existing Wiki. The downside of taking only this action is that only organization members can modify the wiki. So this could work, but mainly as a more static and cleaner staple. . - I propose to integrate the Wiki with Issues that contain the projects, adding a `projects` (or similar) label. This is in the spirit also of other large quantum open source projects such as Qiskit, which has even an ad-hoc `qiskit-community` repository, https://github.com/qiskit-community/. In QuTiP case, we could create a new repository similar to the notebooks one, e.g., https://github.com/qutip/qutip-community/. The downside is that in general the division is subfolders is not advised for easiness of maintainability. So one could just open issues with open projects. Of course, for physics questions, sometimes spilling in to PRs and Issues, qutip already has a Google Group forum, where I advise that this n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:2384,Enhance,Enhancement,2384,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['Enhance'],['Enhancement']
Modifiability,"callback]; 28 # Solve the master equation; ---> 29 output = qt.mesolve(H, rho_0, times, c_ops, e_ops); 31 plt.plot(output.expect). File ~/anaconda3/envs/danjou/lib/python3.10/site-packages/qutip/mesolve.py:244, in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 241 v = rho0.full().ravel('F'); 242 func(0., v, *ode_args) + v; --> 244 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 245 progress_bar, dims=rho0.dims); 246 res.num_collapse = len(c_ops); 248 if e_ops_dict:. File ~/anaconda3/envs/danjou/lib/python3.10/site-packages/qutip/mesolve.py:519, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 517 for m in range(n_expt_op):; 518 if not isinstance(e_ops[m], Qobj) and callable(e_ops[m]):; --> 519 output.expect[m][t_idx] = e_ops[m](t, rho_t); 520 continue; 521 output.expect[m][t_idx] = expect_rho_vec(e_ops_data[m], r.y,; 522 e_ops[m].isherm; 523 and rho0.isherm). UnboundLocalError: local variable 'rho_t' referenced before assignment; ```. ### Expected Behaviour. I expect that callback functions passed as a list should be computed without issue. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.1; Numpy Version: 1.24.3; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.10.6; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm6",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2189:2884,variab,variable,2884,https://qutip.org,https://github.com/qutip/qutip/issues/2189,1,['variab'],['variable']
Modifiability,closes #1106 . Adds update_view method to change view variable. Thus abstracting from attribute naming. Also forces view update in render.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1216:54,variab,variable,54,https://qutip.org,https://github.com/qutip/qutip/pull/1216,1,['variab'],['variable']
Modifiability,codeclimat config,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/974:11,config,config,11,https://qutip.org,https://github.com/qutip/qutip/pull/974,1,['config'],['config']
Modifiability,"coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:2663,variab,variable,2663,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability,cosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/extension.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/intelccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying build/src.macosx-11.0-arm64-3.9/numpy/distutils/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/config_compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_ext.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_headers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_py.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_src.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/sdist.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/bdist_rpm.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_clib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_clib.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:22812,config,config,22812,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['config'],['config']
Modifiability,cvxpy Variable and Parameter dims passed as tuple; cvxpy and its depends only installed in tests for NOMKL builds; Extra test added for NOMKL with OPENMP,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873:6,Variab,Variable,6,https://qutip.org,https://github.com/qutip/qutip/pull/873,1,['Variab'],['Variable']
Modifiability,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:1508,plugin,plugin,1508,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['plugin'],['plugin']
Modifiability,"e equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds. Is there something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?. Thank you very much,. Joaquin Guimbao. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import * ; qutip.settings.num_cpus = 16; import math. # Set parameters. g2 = 1 # coupling strength with EM field; kappa = 1 # cavity dissipation rate; gamma = 1 # atom dissipation rate; gamma12 = 1 # dipole-coupling dissipation; N = 2 # number of cavity fock states; dephasing = 10000 # pure dephasing; g=np.random.rand(10)*500 # dipole coupling strengths between 5 atoms. tlist = np.linspace(0,60,200). # intial state; psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0)) # start with an excited atom; rho0 = psi0 * psi0.dag();. # operators; a = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));; sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));; sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));; sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));; sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));. # Hamiltonian; H = sm1.dag()*sm1+sm2.dag()*sm2 +sm3.dag()*sm3+ sm4.dag()*sm4+sm5.dag()*sm5+a.dag()*a + g2*(sm1.dag()*a+sm1*a.dag())+g2*(sm2.dag()*a+sm2*a.dag()) + g2*(sm3.dag()*a+sm3*a.dag())+g2*(sm4.dag()*a+sm4*a.dag())+g2*(sm5.dag()*a+sm5*a.dag())+g[0]*(sm1.dag()*sm2+sm2.dag()*sm1)+g[1]*(sm1.dag()*sm3+sm3.dag()*sm1)+g[2]*(sm1.dag()*sm4+sm4.dag()*sm1)+g[3]*(sm1.dag()*s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591:1542,coupling,coupling,1542,https://qutip.org,https://github.com/qutip/qutip/issues/1591,1,['coupling'],['coupling']
Modifiability,"e not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3108,config,configfile,3108,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['config'],['configfile']
Modifiability,"e the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:2108,Adapt,Adaptative,2108,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['Adapt'],['Adaptative']
Modifiability,"e](http://qutip.org/docs/4.1/guide/guide-bloch.html#animating-with-the-bloch-sphere) of how to do an animation of a Bloch sphere by saving the frames of the movie using a for loop like so:. ```python; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'/temp/bloch_'+str(i)+'.png', dirc='temp'); b.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:1052,config,configuration,1052,https://qutip.org,https://github.com/qutip/qutip/issues/1106,2,['config'],['configuration']
Modifiability,"ely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestC",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3132,plugin,plugins,3132,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['plugin'],['plugins']
Modifiability,"es: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1184,Evolve,Evolver,1184,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['Evolve'],['Evolver']
Modifiability,extended plot_wigner,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/128:0,extend,extended,0,https://qutip.org,https://github.com/qutip/qutip/pull/128,1,['extend'],['extended']
Modifiability,fix - semidefinite cvxpy Variable and Parameter,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873:25,Variab,Variable,25,https://qutip.org,https://github.com/qutip/qutip/pull/873,1,['Variab'],['Variable']
Modifiability,"ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/spmatfuncs.c -o build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1; `. Then, I cloned the qutip/qutip repository, and tried to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building extension ""qutip.cy.spmatfuncs"" sources; building extension ""qutip.cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3.5/qutip; copying build/src.linux-x86_64-3.5/qutip/__config__.py -> build/lib.linux-x86_64-3.5/qutip; running build_ext; customize UnixCCompiler; customize UnixCCompiler using build_e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:2849,config,config,2849,https://qutip.org,https://github.com/qutip/qutip/issues/639,2,['config'],['config']
Modifiability,"g a specialisation if not: `data.Dispatcher`. The exported mathematical functions will all be instances of this type. The minimum work needed to define a new data-layer type is to provide `data.to` with two conversion functions; one into the new type from a current data-layer type, and one which converts the new type _into_ a current data-layer type. Once this is done, every single QuTiP component will be able to use the new data-layer type, although until specialisations are given which use it, it will always be achieved by conversion to another type, and conversion back. In this way, a new type can be added incrementally, with only the most common operations needing to be defined to get good efficiency. **Important caveat:** the data layer operates only on _exact_ types; subclasses of defined types will be treated as completely different types. This is to do with keeping the computational complexity of multiple-dispatch operations as O(1) (i.e. I don't know how to do multiple dispatch in constant time allowing inheritance). ### `data.to`: conversion between types. ```python; >>> matrix = data.dense.identity(5); >>> matrix; Dense(shape=(5, 5), fortran=True); >>> data.to(data.CSR, matrix); CSR(shape=(5, 5), nnz=5); ```. ```python; >>> data.to[data.CSR, data.Dense]; <converter to CSR from Dense>; ```. ```python; >>> data.to[data.Dense]; <converter to Dense>; ```. ```python; >>> class NewDataType:; ... # [...]; >>> def new_from_dense(matrix: data.Dense) -> NewDataType:; ... # [...]; >>> def dense_from_new(matrix: NewDataType) -> data.Dense:; ... # [...]; >>> data.to.add_conversions([; ... (NewDataType, data.Dense, new_from_dense),; ... (data.Dense, NewDataType, dense_from_new),; ... ]); >>> data.to[data.CSR, NewDataType]; <converter to CSR from NewDataType>; ```. #### Basic usage. Convert data into a different type. This object is the knowledge source for every allowable data-layer type in QuTiP, and provides the conversions between all of them. The base use is to call",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:2880,inherit,inheritance,2880,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['inherit'],['inheritance']
Modifiability,"g. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Also, the last outcomes have some overlap with the last project. Although I also find this circuit importation very important, I guess two projects should not have overlap if they are both selected.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:2055,Refactor,Refactoring,2055,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['Refactor'],['Refactoring']
Modifiability,"gcc 4.4 does not support the `-flto` option for link time optimization. This is still a common compiler because it is the system gcc in centos 6 and redhat enterprise 6. In this pull request I've removed that option. Users who need this could set the CCFLAGS environment variable to customize the compiler flags. Alternatively, we could add options to `setup.py` to enable or disable link time optimization. I've also added additional rows to the travis build matrix to test building with gcc 4.4 and clang. In its current form this adds 4 additional rows to the build matrix (2 additional compilers, each tested with python 2.7 and 3.4). Let me know if you think this is excessive. It's possible to add just one python version for gcc 4.4 and clang.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318:271,variab,variable,271,https://qutip.org,https://github.com/qutip/qutip/pull/318,1,['variab'],['variable']
Modifiability,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:4277,inherit,inheritance,4277,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['inherit'],['inheritance']
Modifiability,"he code copied straight from the website it returns this error . ""ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". so I increase the nsteps to 100000:; output = mesolve(H, psi0, tlist, c_op_list, [a.dag() * a, sm.dag() * sm], options = Options(nsteps= 10000)). however I get an output that is completely different to what I should be getting. What I should be getting: . ![image](https://user-images.githubusercontent.com/75099190/186995018-26029946-bba2-4b71-888d-74b88361c832.png). What my code is outputting:. ![image](https://user-images.githubusercontent.com/75099190/186995092-75b9d285-f854-487f-bd11-7dffc19d57cb.png). Do you have any idea what could be causing this error?; Any help would be hugely appreciated . my code:. import matplotlib.pyplot as plt; import numpy as np; from qutip import *. wc = 1.0 * 2 * np.pi # cavity frequency; wa = 1.0 * 2 * np.pi # atom frequency; g = 0.05 * 2 * np.pi # coupling strength; kappa = 0.005 # cavity dissipation rate; gamma = 0.05 # atom dissipation rate; N = 15 # number of cavity fock states; n_th_a = 0.0 # temperature in frequency units; use_rwa = True. tlist = np.linspace(0, 25, 100). psi0 = tensor(basis(N, 0), basis(2, 1)) # start with an excited atom. a = tensor(destroy(N), qeye(2)); sm = tensor(qeye(N), destroy(2)). if use_rwa:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() * sm + a * sm.dag()); else:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() + a) * (sm + sm.dag()). c_op_list = []. rate = kappa * (1 + n_th_a); if rate > 0.0:; c_op_list.append(np.sqrt(rate) * a). rate = kappa * n_th_a; if rate > 0.0:; c_op_list.append(np.sqrt(rate) * a.dag()). rate = gamma; if rate > 0.0:; c_op_list.append(np.sqrt(rate) * sm). output = mesolve(H, psi0, tlist, c_op_list, [a.dag() * a, sm.dag() * sm], options = Options(nsteps= 10000)). fig, ax = plt.subplots(figsize=(8, 5)); ax.plot(tlist, output.expect[0], label=""Cavity""); ax.plot(tlist, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987:1346,coupling,coupling,1346,https://qutip.org,https://github.com/qutip/qutip/issues/1987,1,['coupling'],['coupling']
Modifiability,"he implementation itself. This has some advantages in the future too perhaps if we want to work specificially on the HEOM part without caring about the form of the spectral density. The second point is:. Most of QuTiP's solvers are function based eg., `mesolve`. In `qutip.piqs` however, we tried to do things with the class called `Dicke`. We defined a `pisolve` method similar in spirit to `mesolve` which takes in an initial state, tlist and computes the evolution. For many sophisticated approaches like `piqs` or `heom`, there needs to be some amount of pre-processing such as computing the Liouvillian/Lindbladian or the levels of the Hierarchy that needs to be done to get the RHS which is solved to get the dynamics. I saw similar approaches in `qutip.pdpsolve` with `StochasticSolverOptions`. I really like the `HEOMSolver` class defined here and was wondering if we can we have a similar abstract class which can be shared across all future solver methods and not just HEOM or the stochastic solver? I add an example below. @ajgpitch Does this make sense and should we strive to get some uniform class for all future solvers? ; @nathanshammah @nonhermitian . ```; class Solver(object):; """"""; A super-class specifying the basic methods required in a solver. Parameters; ----------; name: str; The name of the specific solver the sub-class represents, eg., `heom`.; default: None; """"""; def __init__(self, solver=None):; 	self.solver = solver. def configure(self, *args, **kwargs):; 	""""""; 	Configures the solver by computing the necessary objects required; 	to run the `solve` method.; 	""""""; 	raise NotImplementedError(""This is a abstract class only. ""; ""Use a subclass, for example `Dicke.configure`""). def solve(self, initial_state, tlist, options, *args, **kwargs):; 	""""""; 	Runs the solver to compute the evolution using the initial state and tlist.; 	""""""; 	raise NotImplementedError(""This is a abstract class only. ""; ""Use the solve method from a subclass, for example `Dicke.solve`""); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/962:2904,config,configure,2904,https://qutip.org,https://github.com/qutip/qutip/pull/962,3,"['Config', 'config']","['Configures', 'configure']"
Modifiability,"heir projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projects, even on their own funding resources (most probably together with the development of research projects), in coordination with the lead development team, could help foster development in a more sustainable way. . ## Proposal; I propose to help sustain available projects in a more structural way than what is done now. This is an example of a what we could call a **QEP, or ""QuTiP Enhancement Proposal"".**. - One thing that could be done is to simply expand the existing Wiki. The downside of taking only this action is that only organization members can modify the wiki. So this could work, but mainly as a more static and cleaner staple. . - I propose to integrate the Wiki with Issues that contain the projects, adding a `projects` (or similar) label. This is in the spirit also of other large quantum open source projects such as Qiskit, which has even an ad-hoc `qiskit-community` repository, https://github.com/qiskit-community/. In QuTiP case, we could create a new repository similar to the notebooks one, e.g., https://github.com/qutip/qutip-community/. The downside is that in general the division is subfolders is not advised for easiness of maintainability. So one could just open issues with open projects. Of course, for physics questions, sometimes spilling in to PRs and Issues, qutip already has a Google Group forum, where I advise that this new capabilities may be advertised with a proper thread.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:3156,maintainab,maintainability,3156,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['maintainab'],['maintainability']
Modifiability,"his case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1782:1069,Enhance,EnhancedTextProgressBar,1069,https://qutip.org,https://github.com/qutip/qutip/issues/1782,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,"hub.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149""><code>b639e66</code></a> test on py3.12 (<a href=""https://redirect.github.com/psf/requests/issues/6448"">#6448</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be""><code>d3d5044</code></a> Fixed a small typo (<a href=""https://redirect.github.com/psf/requests/issues/6452"">#6452</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29""><code>2ad18e0</code></a> v2.30.0</li>; <li><a href=""https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773""><code>f2629e9</code></a> Remove strict parameter (<a href=""https://redirect.github.com/psf/requests/issues/6434"">#6434</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8""><code>87d63de</code></a> v2.29.0</li>; <li><a href=""https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc""><code>51716c4</code></a> enable the warnings plugin (<a href=""https://redirect.github.com/psf/requests/issues/6416"">#6416</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71""><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=""https://redirect.github.com/psf/requests/issues/6418"">#6418</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.28.2...v2.31.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dep",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:6850,plugin,plugin,6850,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['plugin'],['plugin']
Modifiability,"i. def __create_sigmaz_ij(self,i,j):; '''; creates coupling hamiltonians for ; problem hamiltonian; '''; base = []; k = self._n; # create list of I2; for l in range(self._n):; base.append(qt.qeye(2)); base[i] = qt.sigmaz(); base[j] = qt.sigmaz(); sigmaz_ij = qt.tensor(base); return sigmaz_ij. def driver(self):; '''; creates drive Hamiltonian, which is the sum of -sigmax_i operators ; ; '''; k = self._n; Hd = np.zeros((2**k, 2**k)); Hd = qt.Qobj(Hd, dims=[[2 for i in range(k)],[2 for i in range(k)]]); for i in range(self._n):; sigmax_i = self.__create_sigma_i(i); Hd -= sigmax_i; return Hd. def problem(self):; '''; creates problem Hamiltonian. '''; # initialise Hp array; p = self._n # to save on writing; Hp = np.zeros((2**p, 2**p)); Hp = qt.Qobj(Hp, dims=[[2 for i in range(p)],[2 for i in range(p)]]). #vertex coefficients; if self._spin_coeff is None:; pass; else:; for i in range(self._n):; sigmaz_i = self.__create_sigma_i(i, sigma = qt.sigmaz()); Hp += self._spin_coeff[i] * sigmaz_i; #coupling coefficients; if self._coupling_coeff is None:; pass; else:; k = -1; for i in range(p):; for j in range(i+1,p):; k += 1; print(str(i), str(j)); sigma_ij = self.__create_sigmaz_ij(i,j); Hp += self._coupling_coeff[k] * sigma_ij; return Hp; ```. The code returns the error `incompatible Liouvillian and state dimensions: [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]] and [[8], [8]]`. Adding the commented line `#initial_state = qt.Qobj(initial_state, dims = [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]])` returns the error `Shapes don't match: (64, 64) @ (64, 1)`. I am confused as to why there is a 64x64 matrix, even though my inputs were 8x8 matrices for `Hd` and `Hp` and the input density matrix is also 8x8. I am inputting an initial spin state $\ket{\psi} = \dfrac{1}{8} (1,1,1,1,1,1,1,1)$, which is the lowest energy eigenstate in the basis of $H_d$. I believe `mesolve` is combining `Hd` and `Hp` into a 64x64 matrix, perhaps computing their tensor product. Why would this be the ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989:4174,coupling,coupling,4174,https://qutip.org,https://github.com/qutip/qutip/issues/1989,1,['coupling'],['coupling']
Modifiability,in setup.py (could not find a good config that included the pyx files in the source distribion file produced by setup.py),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/196:35,config,config,35,https://qutip.org,https://github.com/qutip/qutip/pull/196,1,['config'],['config']
Modifiability,"is None:; 99 # get the unitary propagator; --> 100 U = propagator(H, T, [], args); 101 ; 102 # find the eigenstates for the propagator. F:\Anaconda3\lib\site-packages\qutip\propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, **kwargs); 181 output = sesolve(H2, psi0, tlist, [],; 182 args=args, _safe_mode=False,; --> 183 options=Options(normalize_output=False)); 184 for k, t in enumerate(tlist):; 185 u[k] = sp_reshape(output.states[k].data, (N, N)). F:\Anaconda3\lib\site-packages\qutip\sesolve.py in sesolve(H, rho0, tlist, e_ops, args, options, progress_bar, _safe_mode); 153 elif n_str > 0:; 154 res = _sesolve_list_str_td(H, rho0, tlist, e_ops, args, options,; --> 155 progress_bar); 156 ; 157 elif isinstance(H, (types.FunctionType,. F:\Anaconda3\lib\site-packages\qutip\sesolve.py in _sesolve_list_str_td(H_list, psi0, tlist, e_ops, args, opt, progress_bar); 432 code = compile('from ' + config.tdname + ' import cy_td_ode_rhs',; 433 '<string>', 'exec'); --> 434 exec(code, globals()); 435 config.tdfunc = cy_td_ode_rhs; 436 . F:\Anaconda3\lib\site-packages\qutip\sesolve.py in <module>(). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(self, fullname); 443 self.pyxbuild_dir,; 444 build_inplace=self.inplace,; --> 445 language_level=self.language_level); 446 return module; 447 . F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, lang",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:4962,config,config,4962,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['config'],['config']
Modifiability,"is feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1683,Variab,Variable,1683,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['Variab'],['Variable']
Modifiability,"ithout a palette <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7797"">#7797</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use palette when loading ICO images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7798"">#7798</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use consistent arguments for load_read and load_seek <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7713"">#7713</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Turn off nullability warnings for macOS SDK <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7827"">#7827</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix shift-sign issue in Convert.c <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7838"">#7838</a> [<a href=""https://github.com/r-barnes""><code>@​r-barnes</code></a>]</li>; <li>winbuild: Refactor dependency versions into constants <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7843"">#7843</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Build macOS arm64 wheels natively <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7852"">#7852</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed typo <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7855"">#7855</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Open 16-bit grayscale PNGs as I;16 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7849"">#7849</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle truncated chunks at the end of PNG images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7709"">#7709</a> [<a href=""https://github.com/lajiyuan""><code>@​lajiyuan</code></a>]</li>; <li>Match mask size to pasted image si",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:7650,Refactor,Refactor,7650,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['Refactor'],['Refactor']
Modifiability,keep the new text based progress bar as EnhancedTextProgressBar. Related to #121,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256:40,Enhance,EnhancedTextProgressBar,40,https://qutip.org,https://github.com/qutip/qutip/pull/256,1,['Enhance'],['EnhancedTextProgressBar']
Modifiability,"le.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1780,evolve,evolver,1780,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['evolve'],['evolver']
Modifiability,"lf.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def build_extensions(self):. F:\Anaconda3\lib\distutils\command\build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. F:\Anaconda3\lib\distutils\command\build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. F:\Anaconda3\lib\distutils\_msvccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 302 ; 303 if not self.initialized:; --> 304 self.initialize(); 305 compile_info = self._setup_compile(output_dir, macros, include_dirs,; 306 sources, depends, extra_postargs). F:\Anaconda3\lib\distutils\_msvccompiler.py in initialize(self, plat_name); 195 plat_spec = PLAT_TO_VCVARS[plat_name]; 196 ; --> 197 vc_env = _get_vc_env(plat_spec); 198 if not vc_env:; 199 raise DistutilsPlatformError(""Unable to find a compatible "". F:\Anaconda3\lib\distutils\_msvccompiler.py in _get_vc_env(plat_spec); 83 vcvarsall, vcruntime = _find_vcvarsall(plat_spec); 84 if not vcvarsall:; ---> 85 raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); 86 ; 87 try:. ImportError: Building module rhs75680 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']; ```; I have tried it many t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:7957,variab,variable,7957,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['variab'],['variable']
Modifiability,"look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; lapack_armpl_info:; NOT AVAILABLE; lapack_mkl_info:; NOT AVAILABLE; openblas_lapack_info:; NOT AVAILABLE; openblas_clapack_info:; NOT AVAILABLE; flame_info:; NOT AVAILABLE; atlas_3_10_threads_info:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1685,config,configuration,1685,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['configuration']
Modifiability,"lternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; lapack_armpl_info:; NOT AVAILABLE; lapack_mkl_info:; NOT AVAILABLE; openblas_lapack_info:; NOT AVAILABLE; ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1586,config,config,1586,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['config'],['config']
Modifiability,"lve(H, rho0, tlist, e_ops=e_ops, args=args, options=options,; --> 218 progress_bar=progress_bar, _safe_mode=_safe_mode); 219 ; 220 if isket(rho0):. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in sesolve(H, psi0, tlist, e_ops, args, options, progress_bar, _safe_mode); 135 ; 136 res = _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, options,; --> 137 progress_bar, dims=psi0.dims); 138 if e_ops_dict:; 139 res.expect = {e: res.expect[n]. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 360 if expt_callback:; 361 # use callback method; --> 362 output.expect.append(e_ops(t, Qobj(cdata, dims=dims))); ...; ---> 11 H = qt.qobj_list_evaluate(h_t, tau, args); 12 ; 13 # find the M lowest eigenvalues of the system. NameError: name 'qt' is not defined; ```. If I do `import qutip as qt`, a different error occurs:; ```; AttributeError Traceback (most recent call last); <ipython-input-8-ea74e5ab1d35> in <module>; 1 # Evolve the system, request the solver to call process_rho at each time step.; 2 ; ----> 3 qt.mesolve(h_t, psi0, taulist, [], process_rho, args). ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 216 if not use_mesolve:; 217 return sesolve(H, rho0, tlist, e_ops=e_ops, args=args, options=options,; --> 218 progress_bar=progress_bar, _safe_mode=_safe_mode); 219 ; 220 if isket(rho0):. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in sesolve(H, psi0, tlist, e_ops, args, options, progress_bar, _safe_mode); 135 ; 136 res = _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, options,; --> 137 progress_bar, dims=psi0.dims); 138 if e_ops_dict:; 139 res.expect = {e: res.expect[n]. ~/anaconda3/envs/fda/lib/python3.7/site-packages/qutip/sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 360 if e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1930:1807,Evolve,Evolve,1807,https://qutip.org,https://github.com/qutip/qutip/issues/1930,1,['Evolve'],['Evolve']
Modifiability,"m/python-pillow/Pillow/issues/7928"">#7928</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Deprecate <code>eval()</code>, replacing it with <code>lambda_eval()</code> and <code>unsafe_eval()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7927"">#7927</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Raise <code>ValueError</code> if seeking to greater than offset-sized integer in TIFF <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7883"">#7883</a>; [radarhere]</p>; </li>; <li>; <p>Add <code>--report</code> argument to <code>__main__.py</code> to omit supported formats <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7818"">#7818</a>; [nulano, radarhere, hugovk]</p>; </li>; <li>; <p>Added RGB to I;16, I;16L, I;16B and I;16N conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7918"">#7918</a>, <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7920"">#7920</a>; [radarhere]</p>; </li>; <li>; <p>Fix editable installation with custom build backend and configuration options <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7658"">#7658</a>; [nulano, radarhere]</p>; </li>; <li>; <p>Fix putdata() for I;16N on big-endian <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7209"">#7209</a>; [Yay295, hugovk, radarhere]</p>; </li>; <li>; <p>Determine MPO size from markers, not EXIF data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7884"">#7884</a>; [radarhere]</p>; </li>; <li>; <p>Improved conversion from RGB to RGBa, LA and La <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7888"">#7888</a>; [radarhere]</p>; </li>; <li>; <p>Support FITS images with GZIP_1 compression <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7894"">#7894</a>; [radarhere]</p>; </li>; <li>; <p>Use I;16 mode for 9-bit JPEG 2000 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7900"">#7900</a>; [scaramallion, radarhere]</p>; </l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:11303,config,configuration,11303,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['config'],['configuration']
Modifiability,"mm4[1,0] ; Target 0: (python) stopped.; ```. Not passing `c_ops` restores just raising a `ValueError`. ```python; from qutip import *. D = 13; psi0 = tensor(coherent(D, 100e-9), qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); ```; gives; ```; (qutip) ➜ ~ python mwe.py ; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (28561,) (2197,) ; ```. **Expected behavior**; A exception for incompatible dimensions raised in all cases. ** Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. ```; (qutip) ➜ ~ ipython; Python 3.8.8 (default, Feb 24 2021, 13:46:16) ; Type 'copyright', 'credits' or 'license' for more information; IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import qutip; q; In [2]: qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.2; Scipy Version: 1.6.1; Cython Version: 0.29.22; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip; ============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456:3014,enhance,enhanced,3014,https://qutip.org,https://github.com/qutip/qutip/issues/1456,1,['enhance'],['enhanced']
Modifiability,"n-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pill",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:9524,config,configuration,9524,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['config'],['configuration']
Modifiability,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876:1182,config,config,1182,https://qutip.org,https://github.com/qutip/qutip/issues/1876,4,"['Config', 'config']","['Config', 'config', 'configuration']"
Modifiability,"n[command] = 1; 976 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def build_extensions(self):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. /home/caidish1234/anaconda3/lib/python3.6/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 572 except KeyError:; 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 ; 576 # Return *all* object filenames, not just the ones we just built. /home/caidish1234/anaconda3/lib/python3.6/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 118 extra_postargs); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 ; 122 def create_static_lib(self, objects, output_libname,. ImportError: Building module rhs82342421 failed: [""distutils.errors.CompileError: command 'gcc' failed with exit status 1\n""]; ```. So, I opened my server's log,it showed lots of:; `cc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]`. And an e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:4760,variab,variable,4760,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['variab'],['variable']
Modifiability,"nction based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1515,variab,variable,1515,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability,"ne 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 246 in _main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 196 in wrap_session; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 239 in pytest_cmdline_main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/config/__init__.py"", line 92 in main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/testing.py"", line 45 in run; File ""<stdin>"", line 1 in <module>; Abort trap: 6; ```; This is in a conda environment with qutip development version with ; ```; Python 3.7.4 (default, Aug 13 2019, 15:17:50); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; ```; and ; ```; QuTiP Version: 4.5.0.dev0+d13f5435; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:4293,config,config,4293,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['config'],['config']
Modifiability,"ocesses to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, thereby improving the efficiency of quantum correlation computations. This is still a WIP enhancement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:2517,enhance,enhancements,2517,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,['enhance'],"['enhancement', 'enhancements']"
Modifiability,"och sphere; see [here](https://user-images.githubusercontent.com/906390/232609935-a701d20f-aab0-43f8-bf27-7b7088517cf2.mp4). This issue appears to be fixed by modifying the line `ax = Axes3D(fig, azim=-40, elev=30)` in the example to `ax = fig.add_subplot(111, projection=""3d"", elev=30, azim=-40)`. ### Code to Reproduce the Bug. ```shell; import numpy as np; import qutip; from matplotlib import pyplot, animation; from mpl_toolkits.mplot3d import Axes3D. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); sm = qutip.sigmam(); H = w * (np.cos(theta) * sz + np.sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sz); # evolve and calculate expectation values; output = qutip.mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * np.pi # qubit angular frequency; theta = 0.2 * np.pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2); tlist = np.linspace(0, 4, 250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = qutip.Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np.sin(theta), 0, np.cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = animation.FuncAnimation(fig, animate, np.arange(len(sx)),; init_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2156:1866,evolve,evolve,1866,https://qutip.org,https://github.com/qutip/qutip/issues/2156,1,['evolve'],['evolve']
Modifiability,"olverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1749,evolve,evolvers,1749,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['evolve'],['evolvers']
Modifiability,"on.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+d377c997; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: None; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+; d377c997-py3.7-macosx-10.9-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+d377c997-py3.7-macos; x-10.9-x86_64.egg/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:2027,plugin,plugins,2027,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['plugin'],['plugins']
Modifiability,"or::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5394,config,config,5394,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['config'],['config']
Modifiability,"p>; </li>; <li>; <p>Do not close provided file handles with libtiff <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7199"">#7199</a>; [radarhere]</p>; </li>; <li>; <p>Convert to HSV if mode is HSV in getcolor() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7226"">#7226</a>; [radarhere]</p>; </li>; <li>; <p>Added alpha_only argument to getbbox() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7123"">#7123</a>; [radarhere. hugovk]</p>; </li>; <li>; <p>Prioritise speed in <em>repr_png</em> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7242"">#7242</a>; [radarhere]</p>; </li>; <li>; <p>Do not use CFFI access by default on PyPy <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7236"">#7236</a>; [radarhere]</p>; </li>; <li>; <p>Limit size even if one dimension is zero in decompression bomb check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7235"">#7235</a>; [radarhere]</p>; </li>; <li>; <p>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a>; [radarhere]</p>; </li>; <li>; <p>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a>; [Yay295, hugovk]</p>; </li>; <li>; <p>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a>; [radarhere]</p>; </li>; <li>; <p>Changed grabclipboard() to use PNG instead of JPG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a>; [abey79, radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e34d346f10c0b1c814661e662a3e0c1ef084cf1c""><code>e34d346</code></a> Updated order</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a62f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:10388,config,config-settings,10388,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['config'],['config-settings']
Modifiability,"pe = oper, isherm = True; Qobj data =; [[ 0. -1. -1. 0. -1. 0. 0. 0.]; [-1. 0. 0. -1. 0. -1. 0. 0.]; [-1. 0. 0. -1. 0. 0. -1. 0.]; [ 0. -1. -1. 0. 0. 0. 0. -1.]; [-1. 0. 0. 0. 0. -1. -1. 0.]; [ 0. -1. 0. 0. -1. 0. 0. -1.]; [ 0. 0. -1. 0. -1. 0. 0. -1.]; [ 0. 0. 0. -1. 0. -1. -1. 0.]]; ```. For completeness, here is the class: ; ```; class bacon:; '''; n - number of qubits; spin_coeff - vertex coefficients, in order of the spin strength; '''; def __init__(self, n, spin_coeff = None, coupling_coeff = None):; self._n = int(n); self._spin_coeff = spin_coeff; self._coupling_coeff = coupling_coeff. pass. def __create_sigma_i(self, i, sigma = qt.sigmax()):; '''; creates a list to be inputted into tp; for a particular matrix; sigma - type of pauli matrix; '''; base = []; # create list of I2; for j in range(self._n):; base.append(qt.qeye(2)); # change ith component to sigmax; base[i] = sigma; sigma_i = qt.tensor(base); return sigma_i. def __create_sigmaz_ij(self,i,j):; '''; creates coupling hamiltonians for ; problem hamiltonian; '''; base = []; k = self._n; # create list of I2; for l in range(self._n):; base.append(qt.qeye(2)); base[i] = qt.sigmaz(); base[j] = qt.sigmaz(); sigmaz_ij = qt.tensor(base); return sigmaz_ij. def driver(self):; '''; creates drive Hamiltonian, which is the sum of -sigmax_i operators ; ; '''; k = self._n; Hd = np.zeros((2**k, 2**k)); Hd = qt.Qobj(Hd, dims=[[2 for i in range(k)],[2 for i in range(k)]]); for i in range(self._n):; sigmax_i = self.__create_sigma_i(i); Hd -= sigmax_i; return Hd. def problem(self):; '''; creates problem Hamiltonian. '''; # initialise Hp array; p = self._n # to save on writing; Hp = np.zeros((2**p, 2**p)); Hp = qt.Qobj(Hp, dims=[[2 for i in range(p)],[2 for i in range(p)]]). #vertex coefficients; if self._spin_coeff is None:; pass; else:; for i in range(self._n):; sigmaz_i = self.__create_sigma_i(i, sigma = qt.sigmaz()); Hp += self._spin_coeff[i] * sigmaz_i; #coupling coefficients; if self._coupling_coeff is None:; pass; el",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989:3226,coupling,coupling,3226,https://qutip.org,https://github.com/qutip/qutip/issues/1989,1,['coupling'],['coupling']
Modifiability,"plotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = sigmax(); sy = sigmay(); sz = sigmaz(); sm = sigmam(); H = w * (cos(theta) * sz + sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(sqrt(rate) * sz). # evolve and calculate expectation values; output = mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * pi # qubit angular frequency; theta = 0.2 * pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a* basis(2,0) + (1-a)*basis(2,1))/(sqrt(a**2 + (1-a)**2)); tlist = linspace(0,4,250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; print 'len(sx) is ', len(sx); for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp') #saving images to temp directory in current working directory; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:2397,evolve,evolve,2397,https://qutip.org,https://github.com/qutip/qutip/issues/796,1,['evolve'],['evolve']
Modifiability,"project” with reference to all software developed under the QuTiP Github organization, hosted at “[www.github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening through its official channels. **<span style=""text-decoration:underline;"">The Community</span>**. QuTiP is at the center of a lively ecosystem and creative community. As of October 2020, QuTiP’s large community comprises over 80 code contributors and thousands of users that have downloaded the software over 300’000 times. QuTiP enables an infrastructure of other scientific libraries for the investigation of specific quantum physics or quantum information processing features. . There are several ways through which members of the wider QuTiP community can receive information on QuTiP. This is through any of its official channels: the Google forum; the qutip.org/news webpage tracking the releases on Github, and opening [Issues](https://github.com/qutip/qutip/issues) on Github to file bug reports or discuss and proposed enhancements. Users are encouraged to contribute bug fixes or enhancements to the project with [Pull Requests](https://github.com/qutip/qutip/pulls). **<span style=""text-decoration:underline;"">Governance</span>**. This governance document outlines the governance of the QuTiP project, in order to better serve the community and provide robust liveliness and sustained maintenance for the project. Changes to this document need to be approved by ¾ of the Admin Team. The contents of this QuTiP Governance are shown on QuTiP’s website (qutip.org/goverance) and in its documentation. The changes are tracked at github.com/qutip/governance. We view this governance model as the formalization of what we are already doing, rather than a change in direction. This document is composed of information regarding the following:. **1. Code of Conduct**. **2. Admin Team: Tasks, Composition, Decisions, Communications.**. **3. Board: Tasks, Composition, Decisions, Communications",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:5522,enhance,enhancements,5522,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['enhance'],['enhancements']
Modifiability,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:2262,config,configfile,2262,https://qutip.org,https://github.com/qutip/qutip/issues/1703,2,"['config', 'plugin']","['configfile', 'plugins']"
Modifiability,"ps://redirect.github.com/python-pillow/Pillow/issues/7497"">#7497</a>; [ZachNagengast, nulano, radarhere]</p>; </li>; <li>; <p>Attempt memory mapping when tile args is a string <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7565"">#7565</a>; [radarhere]</p>; </li>; <li>; <p>Fill identical pixels with transparency in subsequent frames when saving GIF <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7568"">#7568</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6956d0b2853f5c7ec5f6ec4c60725c5a7ee73aeb""><code>6956d0b</code></a> 10.2.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/31c8dacdc727673e9099f1ac86019714cdccec67""><code>31c8dac</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7675"">#7675</a> from python-pillow/pre-commit-ci-update-config</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/40a3f91af2c78870676a13629b5902bab4ab4cf0""><code>40a3f91</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7674"">#7674</a> from nulano/url-example</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cb41b0cc78eeefbd9ed2ce8c10f8d6d4c405a706""><code>cb41b0c</code></a> [pre-commit.ci] pre-commit autoupdate</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/de62b25ed318f1604aa4ccd6f942a04c6b2c8b59""><code>de62b25</code></a> fix image url in &quot;Reading from URL&quot; example</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/7c526a6c6bdc7cb947f0aee1d1ee17c266ff6c61""><code>7c526a6</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d93a5ad70bf94dbb63bdbfb19491a02976574d6d""><code>d93a5ad</code></a> Merge pull request <a href=""https://redirect.github.com/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:13358,config,config,13358,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['config'],['config']
Modifiability,"pt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/distutils/dist.py:274: UserWarning: Unknown distribution option: 'define_macros'; warnings.warn(msg); running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building library ""npymath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h']; building library ""npysort"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_sort.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_partition.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_binsearch.h']; building library ""npyrandom"" sources; building extension ""numpy.core._multiarray_tests"" sources; building extension ""numpy.core._multiarray_umath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath' to include_dirs.; adding 'build/src.macosx-11.0-arm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:8590,config,config,8590,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['config'],['config']
Modifiability,"py/core/src/common/npy_binsearch.h']; building library ""npyrandom"" sources; building extension ""numpy.core._multiarray_tests"" sources; building extension ""numpy.core._multiarray_umath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath' to include_dirs.; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common' to include_dirs.; numpy.core - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/funcs.inc', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/simd.inc', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/matmul.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/clip.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/templ_common.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/config.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/_numpyconfig.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__multiarray_api.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__ufunc_api.h']; building extension ""numpy.core._umath_tests"" sources; building extension ""numpy.core._rational_tests"" sources; building extension ""numpy.core._struct_ufunc_tests"" sources; building extension ""numpy.core._operand_flag_tests"" sources; building extension ""numpy.fft._pocketfft_internal"" sources; building extension ""numpy.linalg.lapack_lite"" sources; building extension ""numpy.linalg._umath_linalg"" sources; building extension ""numpy.random._mt19937"" sources; building extension ""numpy.random._philox"" sources; building extension ""numpy.random._pcg64"" sources; building extension ""numpy.random._sfc64"" sources; building extension ""numpy.random._common"" sources; building extension ""numpy.random.bit_generator"" sources; building extension ""numpy.random._",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:10393,config,config,10393,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['config'],['config']
Modifiability,quantum circuits inherit user gates from `add_circuit`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1871:17,inherit,inherit,17,https://qutip.org,https://github.com/qutip/qutip/pull/1871,1,['inherit'],['inherit']
Modifiability,"r.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function. So now it is as before but in addition `result.expect[3]` contains energy and `result.expect[4]` contains fidelity and no custom managed global external lists required as it was in the [example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe alternatives you've considered**. Alternatively we could establish that custom measurement callback function must return only single value and user would be able to pass mixed list of operators and functions in the `e_ops`. **Additional context**. Correct me if I'm wrong, based on the docs and examples I referenced above I have impression there is no better way to do it, but maybe I just missed it? Please regard this issue as opening a discussion, I'll be happy to participate and of course, implement the changes I suggest.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:2444,Evolve,Evolve-the-system-in-time,2444,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['Evolve'],['Evolve-the-system-in-time']
Modifiability,"re `f(t, args) -> Qobj`, similarly to the Hamiltonian. This is not the case, and as best as I can tell, has never been the case. Basic reproduction (though the functionality is just completely missing, so this won't ever succeed).; ```python; import qutip; def c_ops(t, args):; return qutip.create(3); qutip.mesolve(qutip.num(3), qutip.basis(3, 1).proj(), [0, 1], c_ops); ```. ## History. - @jrjohansson originally wrote the docstring saying that `c_ops` could be a callback function in 2012 (pre-QuTiP 1.1.4) in commit 1bf006d4, although the code did not support it at this time; - in issue #40 (2013), he commented that this functionality should be implemented, and this issue was closed without further action in 2018.; - in issue #223 (2014) there is some further discussion, but nothing is done until @Ericgig closes it in 2019, saying it is addressed by QuTiP 4.4.0 (the big swap to QobjEvo), but this doesn't appear to be the case. As of tag `v4.4.0`, the code does not support it. The failing line of code would be https://github.com/qutip/qutip/blob/fc9d9915d0f6242587828ce716ff3cd444edf82a/qutip/mesolve.py#L227-L236; as a function type is truth-y but has no length, but the underlying problem is more just that there's no support for it at all - there's no check for `callable(c_ops)`. At the current `master` at the time of writing (QuTiP ~4.5.1, 4102b99), we're in the same place as at tag `v4.4.0`. ## Solution. In previous issues, people have been told to rewrite the Liouvillian in the supported form, however that's not reasonably possible here. Technically it can be well-approximated by using an interpolation for each individual matrix element, as the time-dependent Hamiltonian can be solved ahead of time, but that's not at all sensible. Most pressingly, the documentation is currently wrong and should be changed to reflect reality. Secondly, we have to decide whether we're going to implement this functionality at all, perhaps as a part of @Ericgig's refactor of the solvers?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260:1905,rewrite,rewrite,1905,https://qutip.org,https://github.com/qutip/qutip/issues/1260,2,"['refactor', 'rewrite']","['refactor', 'rewrite']"
Modifiability,refactor process_fidelity using new function _hilbert_space_dims,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1748:0,refactor,refactor,0,https://qutip.org,https://github.com/qutip/qutip/pull/1748,1,['refactor'],['refactor']
Modifiability,"remove settings.qutip_graphics flag and conditional imports of matplotlib based on DISPLAY variable, to allow head-less generation of graphics. if matpotlib is unavailable, a warning is given, but no failures until a function that actually uses matplotlib is called",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/235:91,variab,variable,91,https://qutip.org,https://github.com/qutip/qutip/pull/235,1,['variab'],['variable']
Modifiability,"respect users environment variables, if set",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/87:26,variab,variables,26,https://qutip.org,https://github.com/qutip/qutip/pull/87,1,['variab'],['variables']
Modifiability,"ress between time in `tlist` and take a snapshot of the state at these time. The work of this loop have been moved to 2 classes: `Result` and `Evolver`. . `Result` was previously just a container of the solver output. It now does the snapshot: compute the expectation values, save the state, compute trajectories average, etc. . `Evolver` is qutip's ODE solver interface: the states are `Data` object and the function is `QovjEvo`(or `QobjEvoFunc`). There are multiple type of evolver wrapping different scipy's ode solver and a few of our own. The wrapper around scipy's zvode that was previously used in qutip's is `EvolverScipyZvode`, but we now have our own cython solver based on [Verner's method](http://people.math.sfu.ca/~jverner/) that accept any Data type as state. Different evolver based on different ODE method are interchangeable and have their dispatcher `evolver_collection`, allowing to easily add new methods. . With this, time-dependent system are managed by `QobjEvo`, ODE by `Evolver`, therefore the solvers can concentrate more closely on the physic. **Evolver:**; Method supported with this PR: `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Ad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:1106,Evolve,Evolver,1106,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['Evolve'],['Evolver']
Modifiability,"rtionError Traceback (most recent call last); Input In [11], in <cell line: 6>(); 2 return w * np.exp(-w); 4 out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]); ----> 6 assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'. AssertionError: 10 vs 100; ```. ### Expected Behaviour. As we see, the above code does run and produces an output, but the states list is not the same as the times lists (these should be the same length as they have a 1-1 correspondence). It actually appears it has only given data for the first 10 time-steps in this case.; The same code works fine on Intel chip. ; We can increase the `nsteps` parameter to give the correct number of output states, but they do not agree with Intels output (also see below for related issue), and actually are not always even quantum states, so something in the solver went wrong. Another example, using the cython string formatting:. ```brmesolve([[sigmax(), 'cos(t)']], psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), '1']])``` works fine on Intel, but gives error ```Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.``` on M1. . Moreover, if I do increase the `nsteps` sufficiently, this does appear to run correctly, but the output states are not the same as we get on Intel (and so I assume are incorrect). ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.6; Scipy Version: 1.7.3; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.9.13; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```. ### Additional Context. A few random observations, hopefully not just an issue on my side due to my local configurations. I installed qutip via conda, and it generally seems to work fine on M1. In the meantime, everything runs as expected with Rosetta.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965:2503,config,configurations,2503,https://qutip.org,https://github.com/qutip/qutip/issues/1965,1,['config'],['configurations']
Modifiability,"rue)); ---------------------------------------------------------------------------; NameError Traceback (most recent call last); Cell In[5], line 1; ----> 1 coeff = qutip.coefficient(""sin(t)"", compile_opt=qutip.CompilationOptions(use_cython=True)). File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:170, in coefficient(base, tlist, args, args_ctypes, order, compile_opt, function_style, boundary_conditions, **kwargs); 168 for type_ in coefficient_builders:; 169 if isinstance(base, type_):; --> 170 return coefficient_builders[type_](base, **kwargs); 172 if callable(base):; 173 op = FunctionCoefficient(base, args.copy(), style=function_style). File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:388, in coeff_from_str(base, args, args_ctypes, compile_opt, **_); 385 code = make_cy_code(parsed, variables, constants,; 386 raw, compile_opt); 387 try:; --> 388 coeff = compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --di",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:2260,variab,variables,2260,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['variab'],['variables']
Modifiability,"s relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:1517,config,config-setting,1517,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['config'],['config-setting']
Modifiability,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:3868,config,configuration,3868,https://qutip.org,https://github.com/qutip/qutip/pull/1429,1,['config'],['configuration']
Modifiability,"setup.cfg is configured with; ```; setup_requires =; numpy>=1.16.6,<1.20; ```; This means that qutip cannot (easily) be built when numpy 1.20 or higher is installed. The current stable release of numpy is 1.21. Can qutip be updated to run with current versions of numpy?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720:13,config,configured,13,https://qutip.org,https://github.com/qutip/qutip/issues/1720,1,['config'],['configured']
Modifiability,"sks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If you agree with that, I will then also remove it from the available options for `MultiTrajSolver` and all its subclasses.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2985,rewrite,rewrite,2985,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['rewrite'],['rewrite']
Modifiability,"ssing list of observables in the `e_ops` argument of `mesolve` or `sesolve`, a list of expectation values at each time step of all those operators will be provided in returned `qutip.Result` object. It becomes much less elegant once we implement custom measurements and pass a callback function (for example to work with time-dependent Hamiltonians etc). According to the [documentation](http://qutip.org/docs/4.1/apidoc/functions.html#module-qutip.mesolve). > An instance of the class qutip.Result, which contains either an array result.expect of expectation values for the times specified by tlist, (...), or nothing if a callback function was given in place of operators for which to calculate the expectation values. So to work with callback function, we need to manage the storage by ourselves, for example by defining a global list, as it is done in [this example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback functi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:1115,Evolve,Evolve-the-system-in-time,1115,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['Evolve'],['Evolve-the-system-in-time']
Modifiability,"t create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1393,variab,variable,1393,https://qutip.org,https://github.com/qutip/qutip/pull/1816,2,['variab'],['variable']
Modifiability,"t possibly a bit tedious since it there are so many different dispatch functions from `mesolve` depending on the different types of time-dependence etc. One would also need cython implementations of the RHS functions for superoperator evolutions. Please let me know what you think about implementing this in qutip. Here is the code for a function that propagates the Lindblad equation with a superoperator as initial value (written as a standalone module for illustration purposes). As you will notice in the code, there is a subtle issue with needing to transpose the Lindbladian to get the correct result. I'm not sure why this is the case.. must be something with the superoperator representation. Perhaps @cgranade knows?. ``` python; import scipy. from qutip.mesolve import _generic_ode_solve; from qutip.superoperator import liouvillian, mat2vec; from qutip.settings import debug. if debug:; import inspect. def _mesolve_const_super(H, E0, tlist, c_op_list, e_ops, args, opt,; progress_bar):; """"""; Evolve the super-operator `E0` using an ODE solver, for constant ; Liouvillian; """""". if debug:; print(inspect.stack()[0][3]). """"""; #; # check initial state; #; if isket(rho0):; # if initial state is a ket and no collapse operator where given,; # fall back on the unitary schrodinger equation solver; if len(c_op_list) == 0 and isoper(H):; return _sesolve_const(H, rho0, tlist, e_ops, args, opt,; progress_bar). # Got a wave function as initial state: convert to density matrix.; rho0 = ket2dm(rho0); """""". #; # check initial value; #; if not E0.issuper:; raise TypeError(""Argument 'E0' should be a super-operator""). #; # construct liouvillian; #; if opt.tidy:; H = H.tidyup(opt.atol). L = liouvillian(H, c_op_list). #; # setup integrator; #; initial_vector = mat2vec(E0.full()).ravel(); # r = scipy.integrate.ode(cy_ode_rhs); r = scipy.integrate.ode(_rhs); # r.set_f_params(L.data.data, L.data.indices, L.data.indptr); # not sure why I need to transpose L here:; r.set_f_params(L.trans().data); r.s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/384:3045,Evolve,Evolve,3045,https://qutip.org,https://github.com/qutip/qutip/issues/384,1,['Evolve'],['Evolve']
Modifiability,"t the following error . ```text; File ""<ipython-input-6-76f4206b44f0>"", line 1, in <module>; runfile('C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py', wdir='C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations'). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 827, in runfile; execfile(filename, namespace). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 110, in execfile; exec(compile(f.read(), filename, 'exec'), namespace). File ""C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py"", line 27, in <module>; f_modes_0, f_energies = floquet_modes(H, T, args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\floquet.py"", line 102, in floquet_modes; U = propagator(H, T, [], args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\propagator.py"", line 186, in propagator; _safe_mode=False). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 157, in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 189, in _sesolve_QobjEvo; H_td.compile(omp=nthread). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\qobjevo.py"", line 1559, in compile; self.tlist). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\qobjevo_codegen.py"", line 124, in _compiled_coeffs; ""CompiledStrCoeff"", True). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\qobjevo_codegen.py"", line 82, in _import_str; ""tmpfile:"" + try_file + ext) from e. UnboundLocalError: local variable 'e' referenced before assignment; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207:2421,variab,variable,2421,https://qutip.org,https://github.com/qutip/qutip/issues/1207,1,['variab'],['variable']
Modifiability,"te or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general approach before I spend time on that. **Changelog**; Add a more flexible base result class for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:1625,refactor,refactored,1625,https://qutip.org,https://github.com/qutip/qutip/pull/1907,3,"['flexible', 'refactor']","['flexible', 'refactored']"
Modifiability,"test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =======================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5110,config,config,5110,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['config'],['config']
Modifiability,"the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:1781,variab,variables,1781,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['variab'],['variables']
Modifiability,"thod using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1210,Variab,Variable,1210,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['Variab'],['Variable']
Modifiability,"tion purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:3746,maintainab,maintainable,3746,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['maintainab'],['maintainable']
Modifiability,"to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building extension ""qutip.cy.spmatfuncs"" sources; building extension ""qutip.cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3.5/qutip; copying build/src.linux-x86_64-3.5/qutip/__config__.py -> build/lib.linux-x86_64-3.5/qutip; running build_ext; customize UnixCCompiler; customize UnixCCompiler using build_ext; building 'qutip.cy.spmatfuncs' extension; compiling C sources; C compiler: gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC. compile options: '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c'; extra options:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:3672,config,config,3672,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['config'],['config']
Modifiability,"tps://redirect.github.com/python-pillow/Pillow/issues/7242"">#7242</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit size even if one dimension is zero in decompression bomb check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7235"">#7235</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Restored 32-bit support <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7234"">#7234</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed deleted file from codecov.yml and increased coverage threshold <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7232"">#7232</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed support for 32-bit <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7228"">#7228</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a> [<a href=""https://github.com/Yay295""><code>@​Yay295</code></a>]</li>; <li>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved checks in font_render <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7218"">#7218</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Change <code>grabclipboard()</code> to use PNG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a> [<a href=""https://github.com/abey79""><code>@​abey79</code></a>]</li>; <l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:3248,config,config-settings,3248,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['config'],['config-settings']
Modifiability,"tps://redirect.github.com/python-pillow/Pillow/issues/7883"">#7883</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improve speed of loading QOI images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7925"">#7925</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added RGB to I;16N conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7920"">#7920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add --report argument to <strong>main</strong>.py to omit supported formats <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7818"">#7818</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Added RGB to I;16, I;16L and I;16B conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7918"">#7918</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix editable installation with custom build backend and configuration options <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7658"">#7658</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix putdata() for I;16N on big-endian <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7209"">#7209</a> [<a href=""https://github.com/Yay295""><code>@​Yay295</code></a>]</li>; <li>Determine MPO size from markers, not EXIF data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7884"">#7884</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved conversion from RGB to RGBa, LA and La <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7888"">#7888</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support FITS images with GZIP_1 compression <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7894"">#7894</a> [<a href=""https://github.com/radarhere""><code>@​radarhere",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:1990,config,configuration,1990,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['config'],['configuration']
Modifiability,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1199,config,configparser,1199,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['config'],['configparser']
Modifiability,"ule to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, ther",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:2112,parameteriz,parameterization,2112,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['parameteriz'],['parameterization']
Modifiability,use standardized XDG config dirs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876:21,config,config,21,https://qutip.org,https://github.com/qutip/qutip/issues/1876,1,['config'],['config']
Modifiability,"uting**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1319,Enhance,Enhanced,1319,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['Enhance'],['Enhanced']
Modifiability,"utip/qutip/issues/1750#issuecomment-1005876725 also ran into this. ### Code to Reproduce the Bug. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/> python3.8 -m venv venv; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install -e .[full]; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install joblib; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/python dj_algorithm.py; ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""dj_algorithm.py"", line 28, in <module>; from qutip_qip.device import OptPulseProcessor, LinearSpinChain, SCQubits; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/__init__.py"", line 4, in <module>; from .processor import Processor, Model; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/processor.py"", line 9, in <module>; import qutip; File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. ### Expected Behaviour. It should run the example :-). ### Your Environment. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/pip freeze; attrs==21.4.0; cycler==0.11.0; fonttools==4.28.5; iniconfig==1.1.1; joblib==1.1.0; kiwisolver==1.3.2; matplotlib==3.5.1; numpy==1.22.0; packaging==21.3; Pillow==9.0.0; pluggy==1.0.0; py==1.11.0; pyparsing==3.0.6; pytest==6.2.5; python-dateutil==2.8.2; qutip==4.6.2; -e git+git@github.com:qutip/qutip-qip.git@04962ded1f6f21620f06f52869b61c4f392e9dea#egg=qutip_qip; scipy==1.7.3; six==1.16.0; toml==0.10.2; ```. ### Additional Context. `import qutip` (for `qutip.about()`) also triggers the backtrace",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1753:1585,config,config,1585,https://qutip.org,https://github.com/qutip/qutip/issues/1753,1,['config'],['config']
Modifiability,"x, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1566,variab,variable,1566,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Modifiability,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45549,parameteriz,parameterized,45549,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['parameteriz'],['parameterized']
Modifiability,"ype are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:1644,variab,variable,1644,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['variab'],['variable']
Performance," (d.dag() * d * P_qe). row = np.array([1,1,2,2,3,3,3,3,4,4,4,4,5,5,6,6]); column = np.array([3,4,3,4,1,2,5,6,1,2,5,6,3,4,3,4]); data = np.array([-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1]). mapped=csr_matrix((data,(row,column)),shape=(N**4*2*2*2*2,N**4*2*2*2*2)); mapped=Qobj(mapped). n_ctrls=4 # Controls; ctrls = [sm.dag()*a+sm*a.dag()+sm.dag()*b+sm*b.dag()+zm.dag()*b+zm*b.dag()+zm.dag()*c+zm*c.dag()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anacon",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:3363,optimiz,optimization,3363,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimization']
Performance," 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5189,cache,cacheprovider,5189,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cacheprovider']
Performance," </li>; <li>; <p>Determine MPO size from markers, not EXIF data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7884"">#7884</a>; [radarhere]</p>; </li>; <li>; <p>Improved conversion from RGB to RGBa, LA and La <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7888"">#7888</a>; [radarhere]</p>; </li>; <li>; <p>Support FITS images with GZIP_1 compression <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7894"">#7894</a>; [radarhere]</p>; </li>; <li>; <p>Use I;16 mode for 9-bit JPEG 2000 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7900"">#7900</a>; [scaramallion, radarhere]</p>; </li>; <li>; <p>Raise ValueError if kmeans is negative <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7891"">#7891</a>; [radarhere]</p>; </li>; <li>; <p>Remove TIFF tag OSUBFILETYPE when saving using libtiff <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7893"">#7893</a>; [radarhere]</p>; </li>; <li>; <p>Raise ValueError for negative values when loading P1-P3 PPM images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7882"">#7882</a>; [radarhere]</p>; </li>; <li>; <p>Added reading of JPEG2000 palettes <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7870"">#7870</a>; [radarhere]</p>; </li>; <li>; <p>Added alpha_quality argument when saving WebP images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7872"">#7872</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/5c89d88eee199ba53f64581ea39b6a1bc52feb1a""><code>5c89d88</code></a> 10.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/63cbfcfdea2d163ec93bae8d283fcfe4b73b5dc7""><code>63cbfcf</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2776126aa9",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:12637,load,loading,12637,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['load'],['loading']
Performance," > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:14427,load,loader,14427,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['load'],['loader']
Performance," Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_6",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2491,cache,cached,2491,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:1079,optimiz,optimization,1079,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['optimiz'],['optimization']
Performance," add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1360,concurren,concurrent,1360,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['concurren'],['concurrent']
Performance," back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Consistency between transformations of kets and denstity matrices ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 2.84e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > correlation: compare spectrum obtained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2175,Concurren,Concurrence,2175,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Concurren'],['Concurrence']
Performance," basis(16,1); Out[162]: ; Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; ```; The first has shape = (16, 16) and the second has shape = (16, 1), there shouldn't be any problems in performing matrix multiplication.; **Why I got this error and how to solve it.**. My environment is as follow:; ```; ~$ conda info. active environment : Quantum; active env location : /home/user/anaconda2/envs/Quantum; shell level : 1; user config file : /home/user/.condarc; populated config files : /home/user/.condarc; conda version : 4.5.4; conda-build version : 3.10.5; python version : 2.7.15.final.0; base environment : /home/user/anaconda2 (writable); channel URLs : https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/free/linux-64; https://repo.anaconda.com/pkgs/free/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; https://repo.anaconda.com/pkgs/pro/linux-64; https://repo.anaconda.com/pkgs/pro/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; package cache : /home/user/anaconda2/pkgs; /home/user/.conda/pkgs; envs directories : /home/user/anaconda2/envs; /home/user/.conda/envs; platform : linux-64; user-agent : conda/4.5.4 requests/2.18.4 CPython/2.7.15 Linux/3.13.0-141-generic ubuntu/14.04 glibc/2.19; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. ```; >>> from qutip import *; >>> about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.1.0; Cython Version: 0.28.3; Matplotlib Version: 2.2.2; Python Version: 2.7.15; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user/anaconda2/envs/Quantum/lib/python2.7/site-packages/qutip. ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:3600,cache,cache,3600,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['cache'],['cache']
Performance," discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitPr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2923,cache,cachedir,2923,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cachedir']
Performance," due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/152"">#152</a> from elliotwutingfeng/dev</li>; <li><a href=""https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7""><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>; <li><a href=""https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b""><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>; <li><a href=""https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067""><code>d516b87</code></a> Update Github actions/checkout to v4</li>; <li><a href=""https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7""><code>c095c75</code></a> Merge branch 'master' into dev</li>; <li><a href=""https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:2522,optimiz,optimize-contextj,2522,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['optimiz'],['optimize-contextj']
Performance," href=""https://redirect.github.com/python-pillow/Pillow/issues/7823"">#7823</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow writing IFDRational to UNDEFINED tag <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7840"">#7840</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix logged tag name when loading Exif data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7842"">#7842</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use maximum frame size in IHDR chunk when saving APNG images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7821"">#7821</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Prevent opening P TGA images without a palette <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7797"">#7797</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use palette when loading ICO images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7798"">#7798</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use consistent arguments for load_read and load_seek <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7713"">#7713</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Turn off nullability warnings for macOS SDK <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7827"">#7827</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix shift-sign issue in Convert.c <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7838"">#7838</a> [<a href=""https://github.com/r-barnes""><code>@​r-barnes</code></a>]</li>; <li>winbuild: Refactor dependency versions into constants <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7843"">#7843</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:6848,load,loading,6848,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['load'],['loading']
Performance," mixed initial states in `mcsolve`, it might be useful to allow sampling of initial states with frequencies or probabilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ and $w_r(T)$ are the absolute and relative weights, $\rho(T)$ the state associated with a trajectory, and $N_{\text{rel}}$ the number of trajectories that have not been assigned absolute weights. Intuitively, the idea is that absolute weights are for trajectories where the contribution to the full state is known exactly, and the trajectories without absolute weights are the stochastic part. **Things to do**; - [x] Update tests and create new ones; - [x] Update photocurrent to work with weights; - [x] Update target tolerance calculation to work with weights; - [x] Think about how result objects should be added if both contain trajectories with absolute weights; - [x] Double-check that this creates no problems",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:1714,perform,performed,1714,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['perform'],['performed']
Performance," of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1747,perform,performance,1747,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['perform'],['performance']
Performance," pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3070,cache,cached,3070,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance," qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)])```; ```; ```; (qutip) ➜ ~ python mwe.py ; [1] 83143 segmentation fault python mwe.py; ```. Changing `D = 13` to `D = 12` correctly raises a `ValueError`:; ```; (qutip) ➜ ~ python mwe.py; Traceback (most recent call last):; File ""mwe.py"", line 5, in <module>; result = mesolve(qeye(D**2), psi0,[0, 100e-9], [destroy(D**2)]); File ""/Users/colmrya/miniconda3/envs/qutip/lib/python3.8/site-packages/qutip/mesolve.py"", line 266, in mesolve; func(0., v, *ode_args) + v; ValueError: operands could not be broadcast together with shapes (20736,) (1728,) ; ```. Trying to get a little more info on the segfault:. ```; (qutip) ➜ ~ lldb --file python mwe.py; (lldb) target create ""/Users/colmrya/miniconda3/envs/qutip/bin/python""; Current executable set to '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64).; (lldb) settings set -- target.run-args ""mwe.py""; (lldb) r; Process 83317 launched: '/Users/colmrya/miniconda3/envs/qutip/bin/python' (x86_64); Process 83317 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1168d1000); frame #0: 0x0000000113018acd spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy(std::__1::complex<double>*, int*, int*, std::__1::complex<double>*, std::__1::complex<double>, std::__1::complex<double>*, unsigned int) + 157; spmatfuncs.cpython-38-darwin.so`__pyx_f_5qutip_2cy_10spmatfuncs_spmvpy:; -> 0x113018acd <+157>: movupd (%rcx,%rax), %xmm4; 0x113018ad2 <+162>: mulpd %xmm4, %xmm3; 0x113018ad6 <+166>: movddup (%rbx), %xmm5 ; xmm5 = mem[0,0] ; 0x113018ada <+170>: shufpd $0x1, %xmm4, %xmm4 ; xmm4 = xmm4[1,0] ; Target 0: (python) stopped.; ```. Not passing `c_ops` restores just raising a `ValueError`. ```python; from qutip import *. D = 13; psi0 = tensor(coherent(D, 100e-9), qeye(D)); result = mesolve(qeye(D**2), psi0,[0, 100e-9], []); ```; gives; ```; (qutip) ➜ ~ python mwe.py ; Traceback (most recent call last):; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456:1406,queue,queue,1406,https://qutip.org,https://github.com/qutip/qutip/issues/1456,1,['queue'],['queue']
Performance," scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4174,cache,cached,4174,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance," scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3114,cache,cached,3114,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance," site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1747,cache,cached,1747,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance," super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits. I'm still learning good workflow for this type of feature branch. Will use rebasing more in the future.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1423,perform,performance,1423,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['perform'],['performance']
Performance," to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1020,Optimiz,Optimization,1020,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['Optimiz'],['Optimization']
Performance," to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see if `other` can be represented as a Qobj. . These two changes should probably go in a different PR. _Edit: added third option_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607:1706,perform,perform,1706,https://qutip.org,https://github.com/qutip/qutip/issues/1607,2,['perform'],['perform']
Performance,"## Discussed in https://github.com/qutip/qutip/discussions/2255. <div type='discussions-op-text'>. <sup>Originally posted by **shiv6510** November 2, 2023</sup>; Hi, I am encountering some strange dynamics with mesolve that I don't understand. I have a simple hamiltonian of a harmonic oscillator with resonant frequency of 5 GHz. If I evolve the initial state (|0> + |1>)/sqrt(2) under the system hamiltonian (no time dependence) I would expect the expectation values of the |0> and |1> to stay at 0.5. (Amplitudes of eigenstates should not change). . However, when I plot the expectation values, I see a splitting of overtime, where the expectation value of |0> grows linear over time and |1> shrinks linearly with time. Looking through the forums, I figured it was an issue with the ode solver but playing around with the options (max_steps, rtol, atol, etc.) only changes the rate at which the expectation value drops (or grows); it doesn't get rid of the splitting. Any insight into this problem would be of great help :). Code:; ***********************************************************************; import matplotlib.pyplot as plt; from numpy import *; from scipy.optimize import fsolve; from qutip import *. a = destroy(20); wr = 5 # GHz; H = wr * a.dag() * a. e_nrgs, e_states = H.eigenstates(). psi0 = (e_states[0] + e_states[1]).unit(); wait_time = 2000; t_list = arange(0,wait_time+0.02, 0.01). options = Options(max_step=1/(wr * 100)); output = sesolve(2 * pi * H, ; psi0, ; t_list, ; e_ops=[e_states[0].proj(), e_states[1].proj()], ; args=None,; options=options,; progress_bar=True); ***********************************************************************. Plot:. plt.plot(t_list, output.expect[0], color='red', label='<0>'); plt.plot(t_list, output.expect[1],label='<1>'); plt.xlabel('Time[ns]'); plt.ylabel('Expectation Value'); plt.legend(); plt.show(). <img width=""840"" alt=""image"" src=""https://github.com/qutip/qutip/assets/43760523/c55016b4-5fbc-4032-b8e0-d143152250bb"">. </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258:1174,optimiz,optimize,1174,https://qutip.org,https://github.com/qutip/qutip/issues/2258,1,['optimiz'],['optimize']
Performance,"### Bug Description. Call to `b.render()` errors after performing `b.add_vectors(vec)` where `b` is an instance of `qutip.Bloch()`. ### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1817:55,perform,performing,55,https://qutip.org,https://github.com/qutip/qutip/issues/1817,1,['perform'],['performing']
Performance,"### Bug Description. Hey! I've noticed there's a significant slowdown in executing the same codes for obtaining `steadystate` solutions in `v4.7` vs `v5.0` with iterative scipy solvers, especially while using `use_rcm=True`. After spending some time, I believe the main key difference between both versions comes from permutation done in the `_permute_rcm`, where indices are permuted with the indices obtained from the `reverse_cuthill_mckee` function, and this prevents us from getting the preconditioner efficiently. In `v5.0`, for permuting, we use `_data.permute.indices` for the Liouvillian matrix `L`. This gives us different results from what we used in `v4.7`, i.e.,`sp_permute` with the same permuting indices. . As per my understanding, `_data.permute.indices` performs somewhat the following - ; ``` py; A = L.copy(); A.indices = perm.take(A.indices); A = A.tocsc(A); A.indices = perm.take(A.indices); ```; where, we previously, the following was being done; ``` py; L[perm[:,None], perm]; ```; with `perm` are obtained from `reverse_cuthill_mckee`. . I am not sure which behavior is the correct one, but the performance degradation is quite a lot (more than 10x) and prevents reaching sufficient enough tolerance. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import (about, destroy, qeye, steadystate, tensor). # Paramaeters; # -----------; Nc, Nm = 4, 30; E, kappa = 0.1, 0.3; gamma, delta = 3e-4, -0.43. # Operators; # ----------; a = tensor(destroy(Nc), qeye(Nm)); b = tensor(qeye(Nc), destroy(Nm)). # Hamiltonian; # ------------; H = -delta * (a.dag() * a) + (b.dag() * b) + 2.4 * kappa * (b.dag() + b) * (a.dag() * a) + E * (a.dag() + a). # Collapse operators; # -------------------; cc = np.sqrt(kappa) * a; cm = np.sqrt(2 * gamma) * b; cp = np.sqrt(gamma) * b.dag(); c_ops = [cc, cm, cp]. precond_options = {'permc_spec': 'NATURAL', 'diag_pivot_thresh': 0.1, 'fill_factor': 100, 'options': {'ILU_MILU': 'smilu_2'}}; solver_options = {""use_precond"": False",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2443:772,perform,performs,772,https://qutip.org,https://github.com/qutip/qutip/issues/2443,1,['perform'],['performs']
Performance,"### Bug Description. I've encountered this bug when creating a clean environment, and installing `qutip` (and IPython as console) through mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:873,Load,Load,873,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['Load'],['Load']
Performance,"### Bug Description. In `qutip.qobjevo.compile`, on line 1646, the `.pyx` file created by qutip is registered into the global variable `coeff_files` containing a `_file_list` object using the method `coeff_files.add(file_)`. The `add` method appends a `.pyx` extension on line 60 to the string `file_`; ```; self.files += [file_ + "".pyx""]; ```; However, the `file_` string generated by `_compiled_coeffs` already has the file extension, judging from the return value of `qutip.qobjevo_codegen._import_str`, on line 54; ```; return coeff_obj, try_file + ext; ```; I believe this causes `coeff_files.clean()` on line 1697 of `qutip.qobjevo.compile` to not delete the `.pyx` files after the cython class has been loaded. ### Code to Reproduce the Bug. ```shell; import qutip as qt; qt.sesolve([qt.identity(2), [qt.sigmax(), 'sin(t)']], qt.basis(2, 0),; tlist=[0, 2]); ```. ### Code Output. ```shell; creates the file cqobjevo_compiled_coeff_6095589624050.pyx in the working directory.; ```. ### Expected Behaviour. The `.pyx` file in the working directory should be deleted. ### Your Environment. ```shell; QuTiP Version: 4.7.2; Numpy Version: 1.25.2; Scipy Version: 1.11.2; Cython Version: 0.29.36; Matplotlib Version: 3.7.2; Python Version: 3.10.12; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2231:710,load,loaded,710,https://qutip.org,https://github.com/qutip/qutip/issues/2231,1,['load'],['loaded']
Performance,"### Bug Description. In a fresh virtual environment, doing `pip install qutip` will cause the error. ```; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. I know this is quite an old OS and Python version, but that's what I have available. Numpy 1.24 should be supported in Python 3.8.10. ### Code to Reproduce the Bug. ```shell; $ python3 -m venv /tmp/test-venv. $ source /tmp/test-venv/bin/activate. $ pip install --upgrade pip; Collecting pip; Using cached pip-24.0-py3-none-any.whl (2.1 MB); Installing collected packages: pip; Attempting uninstall: pip; Found existing installation: pip 20.0.2; Uninstalling pip-20.0.2:; Successfully uninstalled pip-20.0.2; Successfully installed pip-24.0. $ pip list; Package Version; ------------- -------; pip 24.0; pkg_resources 0.0.0; setuptools 44.0.0. $ pip install qutip; Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Installing build dependencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:670,cache,cached,670,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"### Bug Description. Installing `qutip` with `pip` on Python 3.11 fails at the ""Getting the requirements to build the wheel"" stage. Potentially related to [these changes](https://github.com/pypa/packaging/pull/407) in `packaging`, introduced in the latest update to `22.0`. ### Code to Reproduce the Bug. ```shell; pip install qutip --no-cache-dir; ```. ### Code Output. ```shell; Collecting qutip; Downloading qutip-4.7.0.tar.gz (3.6 MB); ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.6/3.6 MB 18.2 MB/s eta 0:00:00; Installing build dependencies ... done; Getting requirements to build wheel ... error; error: subprocess-exited-with-error; ; × Getting requirements to build wheel did not run successfully.; │ exit code: 1; ╰─> [20 lines of output]; Traceback (most recent call last):; File ""/Users/hsilver/opt/miniconda3/envs/py311/lib/python3.11/site-packages/pip/_vendor/pep517/in_process/_in_process.py"", line 351, in <module>; main(); File ""/Users/hsilver/opt/miniconda3/envs/py311/lib/python3.11/site-packages/pip/_vendor/pep517/in_process/_in_process.py"", line 333, in main; json_out['return_val'] = hook(**hook_input['kwargs']); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/Users/hsilver/opt/miniconda3/envs/py311/lib/python3.11/site-packages/pip/_vendor/pep517/in_process/_in_process.py"", line 118, in get_requires_for_build_wheel; return hook(config_settings); ^^^^^^^^^^^^^^^^^^^^^; File ""/private/var/folders/h9/04p7x4ds0hvfmd80jt8gx3kc0000gn/T/pip-build-env-dzdmg7x6/overlay/lib/python3.11/site-packages/setuptools/build_meta.py"", line 338, in get_requires_for_build_wheel; return self._get_build_requires(config_settings, requirements=['wheel']); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/private/var/folders/h9/04p7x4ds0hvfmd80jt8gx3kc0000gn/T/pip-build-env-dzdmg7x6/overlay/lib/python3.11/site-packages/setuptools/build_meta.py"", line 320, in _get_build_requires; self.run_setup(); File ""/private/var/folders/h9/04p7x4ds0hvfmd80jt8gx3kc0000gn/T/pip-build-env-dzdm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036:338,cache,cache-dir,338,https://qutip.org,https://github.com/qutip/qutip/issues/2036,1,['cache'],['cache-dir']
Performance,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:636,cache,cached,636,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"### Bug Description. It seems that in new matplotlib version they separated classes `Axes` and `Axes3d`, so some plotting functions that have 3d aspects don't work as expected anymore. See example in the code below. ### Code to Reproduce the Bug. ```shell; from qutip import qpt_plot_combined; qpt_plot_combined(np.eye(4), [[""I"", ""X"", ""Y"", ""Z""]]); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); Cell In[8], line 2; 1 from qutip import qpt_plot_combined; ----> 2 qpt_plot_combined(np.eye(4), [[""I"", ""X"", ""Y"", ""Z""]]). File ~\AppData\Local\pypoetry\Cache\virtualenvs\photonic-component-simulator-biULA8HA-py3.9\lib\site-packages\qutip\tomography.py:143, in qpt_plot_combined(chi, lbls_list, title, fig, ax, figsize, threshold); 140 if not title:; 141 title = r""$\chi$""; --> 143 matrix_histogram_complex(chi, xlabels, xlabels, title=title, ax=ax,; 144 threshold=threshold); 146 return fig, ax. File ~\AppData\Local\pypoetry\Cache\virtualenvs\photonic-component-simulator-biULA8HA-py3.9\lib\site-packages\qutip\visualization.py:820, in matrix_histogram_complex(M, xlabels, ylabels, title, limits, phase_limits, colorbar, fig, ax, threshold); 818 # x axis; 819 xtics = -0.5 + np.arange(M.shape[0]); --> 820 ax.axes.w_xaxis.set_major_locator(plt.FixedLocator(xtics)); 821 if xlabels:; 822 nxlabels = len(xlabels). AttributeError: 'Axes3D' object has no attribute 'w_xaxis'; ```. ### Expected Behaviour. There should be a plot and not an error. ### Your Environment. ```shell; QuTiP vesion: '4.7.3'; matplotlib version: '3.8.0'; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2233:658,Cache,Cache,658,https://qutip.org,https://github.com/qutip/qutip/issues/2233,2,['Cache'],['Cache']
Performance,"### Bug Description. Might just be me mis-using the new 5.X branch of Qutip. I get a memory error when upgrading to the new branch. It appears to fail when performing self._to_dm(state) for each state. My states are vectors of length 800 - so it runs out of memory. Is it possible to request the solver only stores the wavefunction at each timestep? I want the wavefunction for each trajectory for each timestep. Alternatively one could introduce a new ""proj"" data storage to make this more efficient. ### Code to Reproduce the Bug. ```shell; result = qutip.ssesolve(; hamiltonian_qobj,; initial_state_qobj,; times.times,; sc_ops=sc_ops,; e_ops=[],; options={; ""method"": ""euler"",; ""progress_bar"": ""enhanced"",; ""store_states"": True,; ""keep_runs_results"": True,; ""improved_sampling"": False,; ""dt"": times.delta_t / times.fundamental_n,; },; ntraj=n_trajectories, # cspell:disable-line; ); ```. ### Code Output. ```shell; File ""..."", line 270, in solve_stochastic_schrodinger_equation; result = qutip.ssesolve(; ^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\stochastic.py"", line 461, in ssesolve; return sol.run(; ^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\multitraj.py"", line 198, in run; map_func(; File ""...\.venv\Lib\site-packages\qutip\solver\parallel.py"", line 122, in serial_map; remaining_ntraj = reduce_func(result); ^^^^^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\solver\result.py"", line 645, in add ; op(trajectory); File ""...\.venv\Lib\site-packages\qutip\solver\result.py"", line 519, in _reduce_states; accu + self._to_dm(state); ~~~~~^~~~~~~~~~~~~~~~~~~~; File ""...\.venv\Lib\site-packages\qutip\core\qobj.py"", line 134, in out; return method(self, other); ^^^^^^^^^^^^^^^^^^^; File ""...\.venv\Lib\site-packages\qutip\core\qobj.py"", line 408, in __add__ ; return Qobj(_data.add(self._data, other._data),; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""qutip\\core\\data\\dispatch.pyx"", line 392, in qutip.core.data.dispatch.Dispatcher.__call__; File """,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2299:156,perform,performing,156,https://qutip.org,https://github.com/qutip/qutip/issues/2299,1,['perform'],['performing']
Performance,"### Bug Description. Running `import qutip` eagerly imports `scipy.fft` via `qutip.correlation`, causing all native dependencies of `scipy.fft`'s fftpack-based implementation to load. In particular when using SciPy 1.8.1 on Linux, fftpack requires `GLIBCXX_3.4.30` but contains a private copy of `GLIBCXX_3.4.29` such that the import fails unless another Python package provides its own implementation of `GLIBCXX_3.4.30` (typically, PyZMQ via `jupyter-client`). This in turn can cause `import qutip` to fail even when not using features backed by fftpack (e.g.: as happened in the case of https://github.com/microsoft/iqsharp/pull/676). ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; # Example from build logs for https://dev.azure.com/ms-quantum-public/Microsoft%20Quantum%20(public)/_build/results?buildId=42116&view=logs&j=1c33f9fa-7159-5ed6-d128-ab2ed6cefd14&t=74d456a9-739b-5d92-ed57-026d8fef9427, ; $PREFIX/lib/python3.8/site-packages/zmq/backend/cython/../../../../.././libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by $PREFIX/lib/python3.8/site-packages/scipy/fft/_pocketfft/pypocketfft.cpython-38-x86_64-linux-gnu.so); ```. ### Expected Behaviour. `import qutip` should not cause native dependencies of `scipy.fft` to be imported eagerly. ### Your Environment. ```shell; (omitted --- `qutip.about()` failed to execute due to error running `import qutip`); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1915:178,load,load,178,https://qutip.org,https://github.com/qutip/qutip/issues/1915,1,['load'],['load']
Performance,"### Bug Description. The `plot_spin_distribution_2d` function allows to project a spin distribution function from the surface of a unit sphere to the unit disk. QuTiP uses `matplotlib.pyplot.pcolor` to perform this task and calculates a meshgrid `X, Y` to plot the function to. Due to some changes in `matplotlib` the current implementation is deprecated and will return errors in a few minor releases. We could quickly fix this by passing `shading='auto'` to the call of `ax.pcolor()` in the [visualization.py](https://github.com/qutip/qutip/blob/82c6704c6fea8a2801492865ad1ef7c1d73c8840/qutip/visualization.py#L1313). However, this raises another UserWarning that the center points are not monotonically sorted. The cleanest way to fix this bug would be to pass the edges of the quadrilaterals to `pcolor()`. But we can not calculate them exactly from the given points in `theta, phi`. Hence, we would need to redesign the interface to this function and to related functions like `plot_spin_distribution_3d` and `spin_q_function`. ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np; import matplotlib.pyplot as plt. j = 5; psi = qt.spin_coherent(j, np.random.rand() * np.pi, np.random.rand() * 2 * np.pi); rho = qt.ket2dm(psi). theta = np.linspace(0, np.pi, 50); phi = np.linspace(0, 2 * np.pi, 50). Q, THETA, PHI = qt.spin_q_function(psi, theta, phi); fig, ax = qt.plot_spin_distribution_2d(Q, THETA, PHI); plt.show(); ```. ### Code Output. ```shell; MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3. Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading']. This will become an error two minor releases later.; ax.pcolor(X, Y, P.real, cmap=cmap); ```. ### Expected Behaviour. I expect the same plot, but without the warning which becomes an error in the future. ### Your Environment. ```shell; QuTiP Version: 5.0.0.de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1973:202,perform,perform,202,https://qutip.org,https://github.com/qutip/qutip/issues/1973,1,['perform'],['perform']
Performance,"### Bug Description. The concurrence measure does not work with density matrix objects. ### Code to Reproduce the Bug. ```shell; import qutip. dm = qutip.maximally_mixed_dm(4); print(dm); print(qutip.entropy.concurrence(dm)); ```. ### Code Output. ```shell; Quantum object: dims = [[4], [4]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[0.25 0. 0. 0. ]; [0. 0.25 0. 0. ]; [0. 0. 0.25 0. ]; [0. 0. 0. 0.25]]. raise Exception(""Density matrix must be tensor product of two qubits.""); Exception: Density matrix must be tensor product of two qubits.; ```. ### Expected Behaviour. One of two things is happening:; 1. The concurrence method is not compatible with the density matrix Qobj objects. I am not certain why this concurrence method requires [[2, 2], [2, 2]] dimensions instead of [4,4] if the concurrence method is acting on 2 qubit systems.; 2. The density matrix generators are not producing matrices which are consistent with the qutip required format. I tried this on other matrices by just casting numpy arrays to Qobj objects and I got the same error. . ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.21.5; Scipy Version: 1.9.1; Cython Version: 0.29.32; Matplotlib Version: 3.5.2; Python Version: 3.9.13; Number of CPUs: 10; BLAS Info: OPENBLAS; OPENMP Installed: False; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058:25,concurren,concurrence,25,https://qutip.org,https://github.com/qutip/qutip/issues/2058,5,['concurren'],['concurrence']
Performance,"### Bug Description. This issue originates from a [problem in the Help Group](https://groups.google.com/g/qutip/c/F7tOoZzMjto). Calculating the entropy of a density matrix in the Dicke basis leads to -Inf, while the standard calculation with ""entropy_vn"" returns a finite (more logical) result. ; I already tracked down the problem to the calculation of eigenvalues in `dicke_trace_function`. Due to numerical behaviour some eigenvalues have very small negative values, which lead to -Inf entropy. If these values are rounded to zero, the problem disappears. However, I am not sure, which way is the best way to perform this rounding. ; @nathanshammah @quantshah . ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip.piqs import *; import numpy as np; import numpy.random; from scipy.linalg import eig; from scipy.sparse import block_diag. N = 10; system = Dicke(N); [jx, jy, jz] = jspin(N,basis=""dicke""); jx=jx*2; jy=jy*2; jz=jz*2. V=3; g=1; system.emission = 1; system.hamiltonian = V/(2*(N-1)) * jz*jz + g/2 * jx; D_tls = system.liouvillian(); rho_ss = steadystate(D_tls,method='eigen',); vn_dicke=entropy_vn_dicke(rho_ss); vn_dicke_over=entropy_vn(Qobj(block_diag(dicke_blocks_full(rho_ss)))). print(vn_dicke,vn_dicke_over); ```. ### Code Output. ```shell; -inf 0.006061297461844266; ```. ### Expected Behaviour. The value for the entropy should not depend on the way it is calculated. I.e., we should have `vn_dicke == vn_dicke_over` up to numerical uncertainty. ### Your Environment. ```shell; uTiP Version: 5.0.0.dev0+ee51e50; Numpy Version: 1.21.0; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.10; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1919:612,perform,perform,612,https://qutip.org,https://github.com/qutip/qutip/issues/1919,1,['perform'],['perform']
Performance,"### Bug Description. Using `Python 3.12.2` and `Poetry 1.7.1`, when adding `qutip` as a dependency, the installation fails. ### Code to Reproduce the Bug. ```shell; poetry add qutip; ```. ### Code Output. ```shell; Updating dependencies; Resolving dependencies... (0.2s). Package operations: 4 installs, 0 updates, 0 removals. • Installing numpy (1.26.4); • Installing packaging (23.2); • Installing scipy (1.12.0); • Installing qutip (4.7.5): Failed. ChefBuildError. Backend subprocess exited when trying to invoke build_wheel. [...]. building 'qutip.cy.cqobjevo_factor' extension; error: Microsoft Visual C++ 14.0 or greater is required. Get it with ""Microsoft C++ Build Tools"": https://visualstudio.microsoft.com/visual-cpp-build-tools/. at ~\AppData\Roaming\pypoetry\venv\Lib\site-packages\poetry\installation\chef.py:164 in _prepare; 160│; 161│ error = ChefBuildError(""\n\n"".join(message_parts)); 162│; 163│ if error is not None:; → 164│ raise error from None; 165│; 166│ return path; 167│; 168│ def _prepare_sdist(self, archive: Path, destination: Path | None = None) -> Path:. Note: This error originates from the build backend, and is likely not a problem with poetry but with qutip (4.7.5) not supporting PEP 517 builds. You can verify this by running 'pip wheel --no-cache-dir --use-pep517 ""qutip (==4.7.5)""'.; ```. ### Expected Behaviour. Installing qutip successfully. ### Your Environment. ```shell; QuTiP version: 4.7.5; Python version: 3.12.2; Poetry version: 1.7.1; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2322:1277,cache,cache-dir,1277,https://qutip.org,https://github.com/qutip/qutip/issues/2322,1,['cache'],['cache-dir']
Performance,"### Bug Description. When trying to perform a trivial partial trace (of a ket) when no subsystem is traced over (all subsystems are kept), the result is a ket. ### Code to Reproduce the Bug. ```shell; from qutip import tensor,basis; psi = tensor(basis(2, 0), basis(2, 1)); print(psi.ptrace([0,1])); ```. ### Code Output. ```shell; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[0.]; [1.]; [0.]; [0.]]; ```. ### Expected Behaviour. A density operator should be returned for consistency. The documentation (https://qutip.org/docs/latest/guide/guide-tensor.html) also mentions that: . > Note that the partial trace always results in a density matrix (mixed state), regardless of whether the composite system is a pure state (described by a state vector) or a mixed state (described by a density matrix). ### Your Environment. ```shell; QuTiP version: 4.7.1; ```. ### Additional Context. The issue seems to originate in _ptrace_dense (see https://qutip.org/docs/latest/modules/qutip/qobj.html), where the following code appears:; ```; if not dtrace:; # If we are keeping all dimensions, no need to construct an ndarray.; return Q.copy(); ```; A projector onto the state should be returned here instead of the copy of the state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129:36,perform,perform,36,https://qutip.org,https://github.com/qutip/qutip/issues/2129,1,['perform'],['perform']
Performance,"### Bug Description. When using qutip integrators with `mcsolve`, parallelizing fails with both `parallel` and `loky` map methods when one doesn't use improved sampling. Also, a side note - memory consumption seems to have gotten worse in setting up the mcsolve problem in v5.0 as compared to v4.7. I can provide some benchmarks later, but I am unable to go to similar truncation sizes as I could before. ### Code to Reproduce the Bug. ```py; import qutip as qp; import numpy as np; N = 2; a1 = qp.tensor(qp.destroy(N), qp.qeye(N)); a2 = qp.tensor(qp.qeye(N), qp.destroy(N)); H = -1j * 0.4 * ((a1.dag()*a1.dag() - a1 * a1) + (a2.dag()*a2.dag() - a2*a2)); psi01 = qp.tensor(qp.states.basis(N, 0), qp.states.basis(N, 0)); tlist = np.linspace(0.0, 30.0, 501); c_ops = [np.sqrt(5)*a1*a1, np.sqrt(5)*a2*a2]; result = qp.mcsolve(H, psi01, tlist, c_ops, ntraj=500, options=dict(map=""parallel"", method=""vern9"", improved_sampling=False)); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; _RemoteTraceback Traceback (most recent call last); _RemoteTraceback: ; """"""; Traceback (most recent call last):; File ""/lib/python3.10/multiprocessing/queues.py"", line 245, in _feed; obj = _ForkingPickler.dumps(obj); File ""/lib/python3.10/multiprocessing/reduction.py"", line 51, in dumps; cls(buf, protocol).dump(obj); File ""<stringsource>"", line 2, in View.MemoryView._memoryviewslice.__reduce_cython__; TypeError: no default __reduce__ due to non-trivial __cinit__; ```. ### Expected Behaviour. Parallelizing should work independently of the sampling method. . ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.12.0; Cython Version: None; Matplotlib Version: 3.9.0; Python Version: 3.10.4; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2450:1190,queue,queues,1190,https://qutip.org,https://github.com/qutip/qutip/issues/2450,1,['queue'],['queues']
Performance,"### Bug Description. While benchmarking [dynamiqs](https://github.com/dynamiqs/dynamiqs) vs QuTiP, I've noticed a large performance drop of `qutip.mesolve` when going from v4.7.6 to v5.0.1. On the example below, the benchmarks show:; ```; # QuTiP 4.7.6; # 1.42 s ± 3.17 ms per loop (mean ± std. dev. of 7 runs, 1 loop each); # QuTiP 5.0.1; # 14.5 s ± 2.32 s per loop (mean ± std. dev. of 7 runs, 1 loop each); ```; Found similar behavior on two different CPUs (mac M2, and AMD Ryzen 7). ### Code to Reproduce the Bug. ```python; import timeit. import numpy as np; import qutip as qt. def init(; kappa_2: float = 1.0,; g_cnot: float = 0.3,; nbar: float = 4.0,; num_tsave: int = 100,; N: int = 16,; ):; # time evolution; alpha = np.sqrt(nbar); gate_time = np.pi / (4 * alpha * g_cnot); tlist = np.linspace(0.0, gate_time, num_tsave). # operators; ac = qt.tensor(qt.destroy(N), qt.qeye(N)); nt = qt.tensor(qt.qeye(N), qt.num(N)). # Hamiltonian; H = g_cnot * (ac + ac.dag()) * (nt - nbar). # collapse operators; c_ops = [np.sqrt(kappa_2) * (ac**2 - nbar)]. # initial state; plus = (qt.coherent(N, alpha) + qt.coherent(N, -alpha)).unit(); psi0 = qt.tensor(plus, plus). kwargs = {'H': H, 'rho0': psi0, 'tlist': tlist, 'c_ops': c_ops}; return kwargs. kwargs = init(); %timeit qt.mesolve(**kwargs); ```. ### Your Environment. ```shell; Numpy Version: 1.25.2; Scipy Version: 1.11.2; Cython Version: 0.29.37; Matplotlib Version: 3.7.2; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2406:120,perform,performance,120,https://qutip.org,https://github.com/qutip/qutip/issues/2406,1,['perform'],['performance']
Performance,"### Describe the Issue!. Hi, is it possible to illustrate an example code in which a quantum circuit is taken as an input and the qiskit backend properties are feed to a custom compiler to perform noisy simulation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1923:189,perform,perform,189,https://qutip.org,https://github.com/qutip/qutip/issues/1923,1,['perform'],['perform']
Performance,"### Describe the Issue!. Hi,. I am studying quantum computers and quantum algorithms to solve combinatorial optimization problems. I wonder if I can use qutip to simulate quantum computers and algorithms ?. If yes, what are the main differences between qutip and the [pennylane](https://pennylane.ai/) framework ?. Regards",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2030:108,optimiz,optimization,108,https://qutip.org,https://github.com/qutip/qutip/issues/2030,1,['optimiz'],['optimization']
Performance,"### Describe the Issue!. I am currently using Qutip 5.0 prerelease. When performing calculations involving 4-mode operators like $e^{A\otimes B\otimes C\otimes D}$, and setting the Hilbert space dimension to be N=7, it takes forever to finish! However, when I use Qutip 4.7, it takes only 1 second to finish same calculations with N=20... This is giving me a serious problem because I need the .logm() function from Qutip 5.0... Anyone facing the same problem? Would be nice if someone can help me :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2115:73,perform,performing,73,https://qutip.org,https://github.com/qutip/qutip/issues/2115,1,['perform'],['performing']
Performance,"### Describe the Issue!. I'm trying to follow the [CRAB / pulse optimizer tutorial](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-pulseoptim-CRAB-QFT.ipynb) but realize that my Hamiltonian takes a slightly different form than the control form (""H_c"") they use. They use a list of QObjs w/ variable amplitude, whereas my Hamiltonian has the following term which seems challenging to input:. $$ ; f_j(t) (a_j e^{-i \phi_j(t)} - a^\dagger_j e^{i \phi_j(t)}); $$. Even for $j \in [1]$ only, how can I make it so that this term has two controls, one which controls the amplitude and one which controls the phase?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2297:64,optimiz,optimizer,64,https://qutip.org,https://github.com/qutip/qutip/issues/2297,1,['optimiz'],['optimizer']
Performance,"### Objective; The primary objective was to improve the computational efficiency of the `correlation_2op_1t` function in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:304,perform,performance,304,https://qutip.org,https://github.com/qutip/qutip/pull/2395,2,"['concurren', 'perform']","['concurrent', 'performance']"
Performance,"### Problem Description. Hello, I am recently using `qt.propagator ` to calculate the time evolution of states with collapse operators. I am having memory usage problem due to qutip's matrix conversion.; This matrix conversion is especially memory intensive when performing propagator calculation with collapse operators. Current qutip propagator uses numpy array to store the **raw calculation data**.; `u = np.zeros([N * N, N * N, len(tlist)], dtype=complex)`. Qutip then converts matrices at each time list t at the end of this function.; ```; if unitary_mode == 'batch':; out[:] = [Qobj(u[k], dims=dims) for k in range(len(tlist))]; else:; out[:] = [Qobj(u[:, :, k], dims=dims) for k in range(len(tlist))]; ```. This conversion effectively requires the same memory usage as ""u"".; This behavior is problematic when raw results `u` consumes a lot of memory.; I would be happy if there is an optional argument to skip `Qobj(u[k])` process. ### Proposed Solution. Add a feature to select if qt.propagator performs conversion to Qobj or just return numpy array.; Rewrite the code of ""qutip/propagator.py"" around line 221 something like. ```; if not skip_qutip_conversion:; out = np.empty((len(tlist),), dtype=object); if unitary_mode == 'batch':; out[:] = [Qobj(u[k], dims=dims) for k in range(len(tlist))]; else:; out[:] = [Qobj(u[:, :, k], dims=dims) for k in range(len(tlist))]; else:; out = u; return out; ```. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2312:263,perform,performing,263,https://qutip.org,https://github.com/qutip/qutip/issues/2312,2,['perform'],"['performing', 'performs']"
Performance,"### Problem Description. Now that qutip-qip has moved to another package, gates are not available in the main repo. This is inconvenient for examples such as the control optimization ones, where one would need to install the qutip-qip package just to access say the Hadamard or CNOT for instance. ### Proposed Solution. The easiest solution would be just to copy the `gates.py` file from the QIP package into the main repo. Perhaps might confuse imports in qip? Also, I think that file has func defs that refer to 'controls' that might not make sense in this repo. ### Alternate Solutions. Have a file called `operations.py`. Just have a subset of the gates (operations), the most typical named unitaries - sounds less QIP like and would avoid import confusion. I think also `hadamard_transform` could be shortened to `hadamard`, but also include the original name. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389:170,optimiz,optimization,170,https://qutip.org,https://github.com/qutip/qutip/issues/2389,1,['optimiz'],['optimization']
Performance,"### Problem Description. String based coefficients with time-dependent Hamiltonians in qutip 4.7 causes compiled files (.so, .o, .cpp files) to be stored into a hidden folder `.pyxbld` in the user's home directory. This is a problem because, when using qutip on an HPC cluster (the cluster uses Red Hat Enterprise Linux 8), I submit multiple qutip simulation jobs to the cluster, each of which generating cached file in my home directory and using up my storage. Qutip is not aware of these files and they are never deleted. The root cause of the problem is in the top level __init__.py, on line 72, `_pyxbuilder.install()`, which calls the install() function in qutip.cy.pyxbuilder, on line 47:. ```; def install():; """"""Install the pyximport interface.""""""; return pyximport.install(setup_args={'include_dirs': [np.get_include()]}); ```; Since the `build_dir` keyword argument is not supplied to `pyximport.install`, the default path is used. ### Proposed Solution. Supply an option in `qutip.settings`, or `qutiprc`, or `qutip.solver.Options` to specify a custom path for the compiled files. This path is then passed to `pyximport.install` as the `build_dir` argument when `__init__.py` is run, upon first import of qutip. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2230:405,cache,cached,405,https://qutip.org,https://github.com/qutip/qutip/issues/2230,1,['cache'],['cached']
Performance,"### Problem Description. The following paper was published a few week ago: [Arnoldi-Lindblad time evolution: Faster-than-the-clock algorithm for the spectrum of time-independent and Floquet open quantum systems](https://quantum-journal.org/papers/q-2022-02-10-649/). The results show an speed-up in the diagonalisation of arbitrary Liouvillian operators. It might be interesting to keep an eye on this and possibly implement it in the future. ### Proposed Solution. The authors themselves (@DHuybrechts) have uploaded the code used for the paper at https://github.com/DHuybrechts/Arnoldi-Lindblad-time-evolution so. if they agree, it would just imply organizing and possibly optimizing their code. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1833:675,optimiz,optimizing,675,https://qutip.org,https://github.com/qutip/qutip/issues/1833,1,['optimiz'],['optimizing']
Performance,"### Problem Description. `Qobj` and `QobjEvo` have the new property dtype that can greatly affect performance.; However, this new information can be hard to find. Having it included in the output of `__repr__` could help. ### Proposed Solution. An an dtype entry in `Qobj._str_header`. ### Alternate Solutions. _No response_. ### Additional Context. First advanced in #2328.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2339:98,perform,performance,98,https://qutip.org,https://github.com/qutip/qutip/issues/2339,1,['perform'],['performance']
Performance,"'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3313,cache,cached,3313,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2253,cache,cached,2253,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"(Apologies: this is a repost from the QuTiP Google group, but since this seems to be a possible bug with mesolve, I figured it was more appropriate to post it here. See the Google post [here](https://groups.google.com/forum/#!topic/qutip/KKqHcZxiAmg) for some images documenting this issue.). Hello,. I'm trying to simulate a system of qubits with a two-pulse periodic Hamiltonian and some dissipation using QuTiP's mesolve function. As a consistency check, I compared the results of setting c_ops = [], and setting c_ops as the zero matrix. These should give the same results, yet for certain basis states, setting c_ops as the zero matrix seems to give the wrong result. Here is a minimum working example that reproduces the effect:. ```; import numpy as np; from qutip import sigmax, sigmaz, mesolve, basis; from scipy import signal, optimize. ### Function definitions. def on_off_signal(t):; """"""; Generate a periodic signal that is +1 for half a period and 0 for the other half.; """""". return (1 + signal.square(2 * np.pi * t))/2. def off_on_signal(t):; """"""; Generate a periodic signal that is 0 for half a period and +1 for the other half.; """""". return (1 - signal.square(2 * np.pi * t))/2. ### Define Hamiltonian. H1 = sigmaz(); H2 = np.pi * sigmax() # H2 applied for time 0.5 results in a full spin flip; H = [[H1, on_off_signal],; [H2, off_on_signal]]. ### Start in a Z basis state. psi0 = basis(2,0). ### Set the collapse operator as the zero matrix (since 1/T_dephasing = 0). T_dephasing = np.inf; c_ops = (1/T_dephasing) * sigmaz(). ### Run simulation. tlist = np.linspace(0, 2, 10000); e_ops = [sigmaz()]; output = mesolve(H, psi0, tlist, c_ops = c_ops, e_ops = e_ops); Z_expectation = output.expect[0]; ```. ### Notes on system:. - The Hamiltonian is periodic and formed of two-pulses.; - H2 applies a full spin flip when applied for time 0.5, so if we start in a Z basis state then Z_expectation should change from +1 to -1 or vice versa. ### Problem:. - When I set c_ops = [], I get the ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/898:837,optimiz,optimize,837,https://qutip.org,https://github.com/qutip/qutip/issues/898,1,['optimiz'],['optimize']
Performance,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:460,cache,cachedir,460,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cachedir']
Performance,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:452,perform,performs,452,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['perform'],['performs']
Performance,"**Describe the bug**; I am trying to find the fidelity of the maximally mixed two qubit state. I got fidelity as one where it should be zero. I am attaching the file and the results. **To Reproduce**; I created a maximally mixed state as 1/2*|00> + 1/2*|01> + 1/2*|10> + 1/2*|11> . I want to check the relation between Concurrence and Fidelity. Concurrence is working correctly, but in case of Fidelity I am facing the issue. I calculated Fidelity using partial trace. Partial traces are giving the same results for both basis (0 and 1) and hence Fidelity is coming as one. ```python; def two_qubit_mixed_state(a, b, c):; ; if (a >= 0 and b >= 0 and c >= 0) and (a*a + b*b + c*c <= 1):; d = math.sqrt(1 - (a*a + b*b + c*c)); ; if d >= 0:; i = tensor(basis(2, 0), basis(2, 0)); j = tensor(basis(2, 0), basis(2, 1)); k = tensor(basis(2, 1), basis(2, 0)); l = tensor(basis(2, 1), basis(2, 1)); ; obj = a*i + b*j + c*k + d*l; pa = obj.ptrace(0); pb = obj.ptrace(1); qstate1 = (ket2dm(obj)); ; concurrence_measure = concurrence(qstate1); ; fidelity_m = fidelity(pa, pb); ; print(qstate1); print(pa); print(pb); print(concurrence_measure); print(fidelity_m); return obj; ; two_qubit_mixed_state(1/2, 1/2, 1/2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1423:319,Concurren,Concurrence,319,https://qutip.org,https://github.com/qutip/qutip/issues/1423,3,"['Concurren', 'concurren']","['Concurrence', 'concurrence']"
Performance,"**Describe the issue**; In `mesolve`, all the intermediate result for each `t` in the `tlist` will be saved. If the given `tlist` is very long, this can be a bottleneck for time and memory. In the `Option` class, there is an option `store_states`, but it does not work as I expected. Setting it to False does not turn this off. https://github.com/qutip/qutip/blob/7a73b136cb74f832cf19f15e93c7268244674bdb/qutip/mesolve.py#L461-L463. According to the code above, there is no way to completely turn this off. One has to either save expectation values or save the intermediate states. **To Reproduce**; ```; from qutip import *; import numpy as np. options = Options(); options.store_states = False; print(options.store_states); result = mesolve(sigmax(), basis(2,0), np.linspace(0,1,10), options=options); print(options.store_states); ```; gives; ```; False; True; ```. @Ericgig @jakelishman",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437:158,bottleneck,bottleneck,158,https://qutip.org,https://github.com/qutip/qutip/issues/1437,1,['bottleneck'],['bottleneck']
Performance,"**Description**. - Add the `reset` function to `qutip.settings` that is described in the documentation but was never implemented. ; - Add `save`, `load` to `qutip.settings`, allowing to save in alternate files.; - The list of configuration that can be saved in qutiprc is generated when loading the module.; - Ungraded the `configrc` functionalities to allow other filenames and support more than a few hard coded `qutip.settings`'s keys.; - Reading `qutiprc` will raise warning instead of errors when unknown keys. So if we remove keys in v5, old file will not cause crashes when importing qutip for the few that use qutiprc. . **Changelog**; Add `reset` to `qutip.settings`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1289:147,load,load,147,https://qutip.org,https://github.com/qutip/qutip/pull/1289,2,['load'],"['load', 'loading']"
Performance,"**Description**. Speed up `steadystate`, mainly for the `direct` method with the `dia` method, but some of the optimization affect most calls. - liouvillian(H) + lindblad_dissipator(c_ops) is slower that liouvillian(H, c_ops) by about 2x.; - Dia are bad with vectors, the `kron(bra, ket)` in `_steadystate_direct` alone was ~90% of the compute time. Using `CSR` instead is much faster.; - Dia to CSR conversion are about made 100x faster. Overall, the timing for `Dia` is about 20x faster and 10% faster for `CSR`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2254:111,optimiz,optimization,111,https://qutip.org,https://github.com/qutip/qutip/pull/2254,1,['optimiz'],['optimization']
Performance,"**Description**; - Added the possibility of providing a custom initial pulse in qutip.control functions. The user can now use the following syntax:. ```; init_pulse_params = {}; init_pulse_params['init_custom_pulse'] = my_init_pulse_array. # Run some optimization; result = optimize_pulse(H_drift, H_control, uni_ini, uni_targ,; num_tslots, gate_time, ; init_pulse_type='CUSTOM', init_pulse_params=init_pulse_params); ```; The custom array should be passed in the init_pulse_params dictionnary, and should be of size (n_tslots x n_ctrls). - Added the possibility of giving a different upper and lower bound for every control at every time slot, instead of a single bound for all controls and all time slots. The upper and lower bound should be arrays of size (n_tslots x n_ctrls). The syntax is the following:; ```; lbound = np.zeros((num_tslots, num_ctrls)); lbound = my_lbound_array; ubound = np.zeros((num_tslots, num_ctrls)); ubound = my_ubound_array. # Run some optimization; result = optimize_pulse(H_drift, H_control, uni_ini, uni_targ,; num_tslots, gate_time, ; amp_lbound = lbound, amp_ubound = ubound); ```. **Changelog**; Added new features for initial pulses to the qutip.control functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369:251,optimiz,optimization,251,https://qutip.org,https://github.com/qutip/qutip/pull/1369,2,['optimiz'],['optimization']
Performance,"**Description**; A bug in the CSS of the readthedocs Sphinx theme causes equation numbers to be rendered *above* the equation, which is both surprising and looks terrible. This PR applies fixes that have been languishing in the RTD theme GitHub pull request queue. While working on this I discovered that our `site.css` file was not actually included in our generated HTML pages, so I added it in. **Related issues or PRs**; * RTD theme issue: https://github.com/readthedocs/sphinx_rtd_theme/issues/301; * RTD theme fix: https://github.com/readthedocs/sphinx_rtd_theme/pull/383/. **Changelog**; Fix the rendering of equation numbers in the documentation (they now appear on the right as expected, not above the equation).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1678:258,queue,queue,258,https://qutip.org,https://github.com/qutip/qutip/pull/1678,1,['queue'],['queue']
Performance,"**Description**; A gate (pulse) scheduler for quantum circuits (instructions). It schedules a `QubitCircuit` or a list of instructions to reduce the total execution time by exciting them parallelly. It uses heuristic methods mainly from https://doi.org/10.1117/12.666419. The scheduler aims at pulse schedule and therefore does not consider merging gates to reduce the gates number. It assumes that the input circuit is optimized at the gate level (e.g. has a minimal number of CNOT gates) and matches the hardware topology. The scheduler includes two methods, ""ASAP"", as soon as possible, and ""ALAP"", as late as possible. The later is commonly used in quantum computation because of the finite lifetime of qubits. **Methods**. - The scheduler first generates a quantum gates dependency graph, containing information about which gates have to be executed before some other gates because they do not commute. The graph preserves the mobility of the gates, i.e. commuting gates are not dependent on each other, even if they use the same qubits. ; - Next, it computes the longest distance of each node to the start and end nodes. The distance for each dependency arrow is defined by the execution time of the instruction (By default, it is 1 for all gates). This is used as a priority measure in the next step. The gate with a longer distance to the end node and a shorter distance to the start node has higher priority.; - In the last step, it uses a list-schedule algorithm with hardware constraint (e.g. gates using the same qubits) and priority and returns a list of cycles for gates.; - Since it's heuristics, sometimes it does not find the optimal. It offers an option that randomly shuffles the gates (if commuting) and repeats the scheduling a few times to get a better result. For scheduling quantum instructions, of which the runtime of different gates might differ, an additional step is required to compute the scheduled start time of each instruction.; It adds the additional dependency caus",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273:420,optimiz,optimized,420,https://qutip.org,https://github.com/qutip/qutip/pull/1273,1,['optimiz'],['optimized']
Performance,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:215,perform,performing,215,https://qutip.org,https://github.com/qutip/qutip/pull/1405,1,['perform'],['performing']
Performance,"**Description**; Added the possibility of providing a custom initial pulse in qutip.control functions. The user can now use the following syntax:; ```; init_pulse_params = {}; init_pulse_params['init_custom_pulse'] = my_init_pulse_array. # Run optimization; result = optimize_pulse_unitary(H_drift, H_control, uni_ini, uni_targ,; num_tslots, gate_time, ; init_pulse_type='CUSTOM', init_pulse_params=init_pulse_params); ```; when calling functions such as optimize_pulse_unitary() or optimize_pulse(). The custom array should be passed in the init_pulse_params dictionnary, and should be of size (n_tslots x n_ctrls). **Changelog**; Added the possibility of providing a custom initial pulse in qutip.control functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1367:244,optimiz,optimization,244,https://qutip.org,https://github.com/qutip/qutip/pull/1367,1,['optimiz'],['optimization']
Performance,"**Description**; Allow the dispatcher to accept specialisations on generic `Data`.; This as 2 uses:; - Simplify the creation of complex function using simpler ones: `inner` defined in term of `matmul`. ; - Allow us to create niche dispatched functions for some data layer without the need to be supported by all: blas' zgemm (matmul) can transpose and adjoint of each input matrix in the same operation. . The `Data` dispatched functions have less priority than direct specialization. They are used directly (no `_constructed_specialisation`) when the `Data` is in the inputs, but when the output data type is set, there will always be a conversion from `Data` to the desired type. . In this PR:; - Add dispatch on `Data`.; - Add direct tests for the dispatcher.; - Create `kron_transpose` which is `kron(left.T, tright)`. It's commonly used for superoperator and it can be optimized for `Dense` and `Jax` by doing it in one operation.; - Add `Data` specialization for `inner`, `inner_op`, `expect`, `expect_super` and `trace_oper_ket`.; - Make `zeros_like` and `identity_like` as dispatched function so the order is kept during operation for dense.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2157:874,optimiz,optimized,874,https://qutip.org,https://github.com/qutip/qutip/pull/2157,1,['optimiz'],['optimized']
Performance,"**Description**; Another cython release, another fix needed... The missing type definition in `dia.diags_` was causing an error during the cythonize step. The other changes are related to the new ""performance hint"".; `nogil` and `except *` do not work well together.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2247:197,perform,performance,197,https://qutip.org,https://github.com/qutip/qutip/pull/2247,1,['perform'],['performance']
Performance,"**Description**; Before this fix the following two situations were incosinsten:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # This would perform a matrix multiplication as `__mul__` tries to convert matrix into `Qobj`.; matrix * qobj # This would raise an error as `__rmul__` assumed that matrix was a `Qobj`.; ```. I assumed that `qobj * matrix` behaviour is the correct one as it is explicitly programmed to work like that. With this fix `matrix * qobj` will first try to convert matrix to `Qobj` and perform a matmul between matrix and `Qobj`. **Related issues or PRs**; Issue #1607 is related to this although this PR does not close that issue. **Changelog**; __rmul__ now accepts as `other` an array_like that is understood by `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1611:180,perform,perform,180,https://qutip.org,https://github.com/qutip/qutip/pull/1611,2,['perform'],['perform']
Performance,"**Description**; I optimized the dispatched by only supporting positional arguments for matrix to dispatch on:. The dispatcher was supporting any signature for dispatched functions.; Since each dispatchers is an instance of the `Dispatcher` class and cython does not support patching methods, it had to find the inputs matrix to convert from `__call__(*args, **kwargs)` and re-implemented the `_bind` method to do so.; But all our dispatched functions have the matrix as the first positional argument, by embracing this we get a nice speed up for small matrices. Also when the specialization existed, it would not call it directly, but call a `_constructed_specialisation` that called ti. Adding another unneeded layer to each calls. This was changed so it would call the function directly. For a 2x2 matrix:; | | Before | After |; |------------------|--------|-------|; | data.add_dense | 214ns | 210ns |; | data.add (dense) | 774ns | 388ns |; | data.add[Dense, Dense] | 541ns | 182ns |; | data.add_csr | 429ns | 447ns |; | data.add (csr) | 986ns | 649ns |; | data.add[CSR. CSR] | 744ns | 401ns |; | numpy | 473ns | - |. Sadly it will not improve the benchmarks that much since the `Qobj` operations overhead is quite large:; | | Before | After |; |------------------|--------|-------|; | Qboj + Qobj (dense) | 2430ns | 2070ns |; | Qboj + Qobj (csr) | 3070ns | 2330ns |",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2135:19,optimiz,optimized,19,https://qutip.org,https://github.com/qutip/qutip/pull/2135,1,['optimiz'],['optimized']
Performance,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734:342,concurren,concurrent,342,https://qutip.org,https://github.com/qutip/qutip/pull/1734,1,['concurren'],['concurrent']
Performance,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:737,optimiz,optimization,737,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['optimiz'],['optimization']
Performance,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1792:1279,Optimiz,Optimize,1279,https://qutip.org,https://github.com/qutip/qutip/pull/1792,1,['Optimiz'],['Optimize']
Performance,"**Description**; The more flexible base class adds:. - a list of state processors that store the state or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:825,perform,performed,825,https://qutip.org,https://github.com/qutip/qutip/pull/1907,1,['perform'],['performed']
Performance,"**Description**; The previous code converted both states to density matrices, which is both inefficient and numerically inaccurate. We propose to use the reduced fidelity formula for pure states, given by the modulus of their inner product. **Related issues or PRs**; Related to #361 and #925. Reusing @lucainnocenti example (https://github.com/qutip/qutip/issues/925#issuecomment-542318121):; ```python; import qutip as qt; import numpy as np. A = qt.Qobj(np.array([; 0.867314655330313 - 0.4576338188944636j,; 0.17267952805615244 - 0.09111291375544905j,; 0.013020232894921149 -0.006875138252288391j; ])); B = qt.Qobj(np.array([; 0.9806443568092577, 0.19524328915024022, 0.014720852555238875; ])). fid1 = np.abs(np.vdot(A.full(), B.full())); fid2 = np.abs((A.dag() * B)[0, 0]); fid3 = np.abs(A.overlap(B)); fid_qt = qt.fidelity(A, B); print(f'Correct:\n{fid1}\n{fid2}\n{fid3}'); print(f'Incorrect:\n{fid_qt}'); ```; ```; Correct:; 0.9999999999849929; 0.9999999999849929; 0.9999999999849929; Incorrect:; 1.0000000028441378; ```. Note that this PR does not fix the proposition from @lucainnocenti https://github.com/qutip/qutip/issues/925#issuecomment-542318121 to perform the general computation using `scipy.linalg.svdvals` at the cost of computing the square root of both matrices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1964:1163,perform,perform,1163,https://qutip.org,https://github.com/qutip/qutip/pull/1964,1,['perform'],['perform']
Performance,"**Description**; There are presently 8 variations of `CQobjEvo`. There are `Cte` and `Td` variants, Dense and csr sparse and serial vs openmp versions. Adding a feature, (ex. AHS support) result in the need to modify all of them and QobjEvoFunc and AHS PRs will add new one. So as a first step, I am merging them the ones presently available.; Cte (no coefficient) are now limit case of Td (time-dependant). omp ones have been removed in favor of a `spmvpy` variant that switch between the serial and omp version at compilation. . Also reworked the compilation of `QobjEvo`:; - Simpler with only 3 variants instead of 8.; - Compilation of the coefficient and object are separated. (`H *= -1j` does not force recompiling the coefficients.); - But have the side effect of making temp file cleanup harder. File are erased at python close instead of object deletion.; - Moved the location of temp file to ~/.qutip/temp for now, but does this work on windows?; - Auto-cleanup on importing qutip, for files older than 7 days for now. But should be set by user, the temp file location also. Other to-do:; Dense versions of CQobjEvo could be more optimized and is not parallel. One option would be to use blas and hope the user's blas is parallel. (probably other PR). ps. Running tests for now. Do not merge.; **Changelog**; Cleaned CObjEvo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1231:1139,optimiz,optimized,1139,https://qutip.org,https://github.com/qutip/qutip/pull/1231,1,['optimiz'],['optimized']
Performance,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:1366,perform,performance,1366,https://qutip.org,https://github.com/qutip/qutip/pull/1869,1,['perform'],['performance']
Performance,"**Description**; User-facing changes:; - Solver's `Options` defaults can be set `qutip.settings.options`.; - Add the `save`, `load`, `reset` method to Options.; - The default `Options` are read from ""qutiprc"" when loading qutip.; - Options object can be initiated from a saved configuration. Example:; ```; import qutip.setting as qset; from qutip.solver import Options; qset.options.atol = 1e-10; qset.options.max_step = 1; qset.save(); print(Options().atol); >>> 1e-10; ```; `atol = 1e-10` and `max_step = 1` will be kept as default in future sessions. `qset.options.reset` to go back to qutip's default. I believe that loading custom settings when importing qutip will be appreciated with support of both `dense` and `sparse` most researchers will have a preference depending on their domain. This also brings all settings in one place: `qutip.settings...` even if we split the code in ""core"", ""solver"", ""qip?"", etc. Lastly, creating and moving around an `Options` object is no longer needed, changing the default before using the solver has the same effect. . For developers:; Principally @jakelishman as I expect you to add settings for core. ; I went with an implementation similar to python `dataclass`. To add `core`'s settings to `qutip.settings` you would do ""; ```; from qutip.settings import QtOptionClass. @QtOptionClass(""core""); class CoreOptions:; basetype = ""Dense""; auto_tidyup = True; ...; ```; And it would create the `__init__`, `__repr__`, `save`, `load` and `reset` methods, and create the default instance as `qutip.settings.core`. All attributes that do not start with ""_"" and are one of `bool`, `str`, `int`, `float`, `complex` will be in tagged to be saved and loaded. Those are the only types available now, but other can be added if needed. In `__init__` all these + properties with a setter can be initiated as keyword arguments. '__repr__' 'print' all the saved attributes and properties.; This is for the likes of `has_openmp`, I would make it a read only property. Anot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1297:126,load,load,126,https://qutip.org,https://github.com/qutip/qutip/pull/1297,3,['load'],"['load', 'loading']"
Performance,"**Description**; We use `imatmul_data_dense` for cython only, in-place `matmul` operation since the dispatcher can't handle in-place operation but they can't have nice impact on performance.; `imatmul_data_dense` had a bug that when data is not `Dense` or `CSR` it would use a wrong specialization of `matmul` and raise an error. . It work fine with all data layer in qutip/qutip so we can test it here, but some tests fails in qutip-jax (qutip/qutip-jax#14) because of it. **Related issues or PRs**; Blocking qutip/qutip-jax#14",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2137:178,perform,performance,178,https://qutip.org,https://github.com/qutip/qutip/pull/2137,1,['perform'],['performance']
Performance,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1594:262,optimiz,optimization,262,https://qutip.org,https://github.com/qutip/qutip/pull/1594,1,['optimiz'],['optimization']
Performance,"**Description**; `parallel_map` did not propagate error of sub-procceses:; ```; def f(i):; raise Exception; return i. out = qutip.solver.parallel.parallel_map(f, range(5)); ```; would print: ; ```; ERROR:concurrent.futures:exception calling callback for <Future at 0x7fcdfb9b8e50 state=finished raised Exception>; concurrent.futures.process._RemoteTraceback: ; ...; raise Exception; ```; but it would return normally with `out = [None, None, None, None, None]`. This mean we can't use a `try` block to catch error coming from sub-process and only when the output is used, an error is risen. This change `parallel_map` so it raise the first error it encounter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969:204,concurren,concurrent,204,https://qutip.org,https://github.com/qutip/qutip/pull/1969,2,['concurren'],['concurrent']
Performance,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684:603,load,loading,603,https://qutip.org,https://github.com/qutip/qutip/issues/1684,2,['load'],"['load', 'loading']"
Performance,"**Is your feature request related to a problem? Please describe.**; In the device simulator of QuTiP (`qutip.qip.device`), a quantum computing device is characterized by the class `Processor` and its subclasses. It contains information about the available control pulses. In addition, a compiler is used to compile a set of universal quantum gates (e.g. RX, RY and ISWAP) into the corresponding control pulses. Together, they can automatically compiler an arbitrary quantum circuit into control pulses, create the time-dependent Hamiltonian representation and run the simulation using QuTiP solvers. However, in the current version, this compilation is done for each gate sequentially. At each time step, there is only one control pulse active. In practice, it is inefficient because usually several gates can be performed parallelly (e.g. X gate on qubit 0 and qubit 1). To make the compilation more practical, it is necessary to introduce a scheduler that schedules the control pulses. A similar example is https://qiskit.org/documentation/apidoc/pulse.html#schedules. **Describe the solution you'd like**; There is existing research (https://arxiv.org/pdf/1708.00023.pdf) on gate-level scheduling. It studies which gates can be performed at the same time. In the most general case, however, gate-level scheduling is not enough, since different gates often have different runtime (.e.g. CNOT usually takes longer time than X gate). Despite the difference, pulse-level scheduling can be done in a similar way as gate-level scheduling by generating a graph (see the reference above). The difference is that each pulse will have its own duration. The possible implementation in `qutip.qip` could be in two steps:; - Modernize the current compiler and create an `Instruction` class representing each compiled control instruction (pulse, qubit index, amplitude, duration).; - Implement the scheduling algorithm similar as in the above reference.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1243:813,perform,performed,813,https://qutip.org,https://github.com/qutip/qutip/issues/1243,2,['perform'],['performed']
Performance,"**Objective:**; Add `jax.grad` functionality to `qutip.core.metrics` and `qutip.entropy`. **Result:**; entropy_vn, entropy_linear, entropy_mutual, concurrence, participation_ratio, hilbert_dist, trace_dist work with this change while others do not. **Issues** ; For entropy funtions - ptrace and partial transpose pose issues; For metrics - sqrtm. **To Do**; Add dispatcher functions for these functions; Also add jax in requirements.txt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2451:147,concurren,concurrence,147,https://qutip.org,https://github.com/qutip/qutip/pull/2451,1,['concurren'],['concurrence']
Performance,- Attempt to optimize the mcsolve algorithms before an eventual move to cython.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/263:13,optimiz,optimize,13,https://qutip.org,https://github.com/qutip/qutip/pull/263,1,['optimiz'],['optimize']
Performance,- Made qutip.entropy.concurrence work for pure states in addition to density matrices.; - Improved error checks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/143:21,concurren,concurrence,21,https://qutip.org,https://github.com/qutip/qutip/pull/143,1,['concurren'],['concurrence']
Performance,- Restructure code to avoid multiple copies of code snippets.; - Optionally return dict with details on solution and solver details.; - Allow for building preconditioner separately so that different; iterative methods can be applied.; - Calculates inf-norm of residual at output.; - Returns number of iterations performed.; - Allow for inputing initial guess vector.; - Calculate a lower bound on the condition number of a preconditioner.; - Residual norm is given when iterative method fails to converge.; - Removed bicg method since it is not compatible.; - General docstring edits.; - Add tests for bicgstab method.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221:312,perform,performed,312,https://qutip.org,https://github.com/qutip/qutip/pull/221,1,['perform'],['performed']
Performance,- The current choice of CFLAGS made generating the str-based c-code slower than necessary for little to no speed gain. Here we choose flags that optimize less since there is no benefit.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/559:145,optimiz,optimize,145,https://qutip.org,https://github.com/qutip/qutip/pull/559,1,['optimiz'],['optimize']
Performance,"- The debug setting is off by default so conditional loading of the; logging feature does not work. Here we load the logger by default, but; do not log anything unless the debug feature is set.; - Also got rid of the inspect stack as I do not see the point of that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261:53,load,loading,53,https://qutip.org,https://github.com/qutip/qutip/pull/261,2,['load'],"['load', 'loading']"
Performance,"- This pull contains a sparse kron function that does not need to convert to COO format to do the product. It is possible to get up to ~20x performance over the SciPy implementation.; - This function can likely be recast to use OPENMP on the outer-loop.; - Added random tests comparing this method vs the SciPy sparse kron. Here are speed ups for various random objects (dims in range [2,100]) with random densities:; ![oper-oper](https://cloud.githubusercontent.com/assets/1249193/18156290/76e1f8d4-6fd2-11e6-91b4-e898429ecf1c.png); ![oper-ket](https://cloud.githubusercontent.com/assets/1249193/18156291/784e4204-6fd2-11e6-95e1-221a90c3d20b.png); ![ket-ket](https://cloud.githubusercontent.com/assets/1249193/18156292/796a22fc-6fd2-11e6-9646-04214cdf3af4.png). The graphs show a relatively constant speedup. However, the results are a bit better than displayed here when using the `timeit` module directly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/530:140,perform,performance,140,https://qutip.org,https://github.com/qutip/qutip/pull/530,1,['perform'],['performance']
Performance,"-build-env-dzdmg7x6/overlay/lib/python3.11/site-packages/setuptools/build_meta.py"", line 338, in get_requires_for_build_wheel; return self._get_build_requires(config_settings, requirements=['wheel']); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/private/var/folders/h9/04p7x4ds0hvfmd80jt8gx3kc0000gn/T/pip-build-env-dzdmg7x6/overlay/lib/python3.11/site-packages/setuptools/build_meta.py"", line 320, in _get_build_requires; self.run_setup(); File ""/private/var/folders/h9/04p7x4ds0hvfmd80jt8gx3kc0000gn/T/pip-build-env-dzdmg7x6/overlay/lib/python3.11/site-packages/setuptools/build_meta.py"", line 335, in run_setup; exec(code, locals()); File ""<string>"", line 247, in <module>; File ""<string>"", line 46, in process_options; File ""<string>"", line 130, in _determine_version; AttributeError: module 'packaging.version' has no attribute 'LegacyVersion'; [end of output]; ; note: This error originates from a subprocess, and is likely not a problem with pip.; error: subprocess-exited-with-error. × Getting requirements to build wheel did not run successfully.; │ exit code: 1; ╰─> See above for output. note: This error originates from a subprocess, and is likely not a problem with pip.; ```. ### Expected Behaviour. Should install `qutip` without errors. ### Your Environment. ```shell; QuTip Version: 4.7.0; Python version: 3.11.0; `packaging` version: 22.0; `pip` version: 22.3.1; ```. ### Additional Context. I explicitly mention Python 3.11 because I failed to replicate the issue on a fresh Python 3.10 environment. . EDIT: Looking deeper into the [qutip built distributions](https://pypi.org/project/qutip/#files), the reason why this is failing only for Python 3.11 is because earlier versions of Python have built distributions, unlike Python 3.11. . This indicates that building the wheel from source is generally broken, which I confirmed by forcing an installation from source on Python 3.10 with; ```bash; pip install qutip --no-cache-dir --no-binary :all:; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036:3418,cache,cache-dir,3418,https://qutip.org,https://github.com/qutip/qutip/issues/2036,1,['cache'],['cache-dir']
Performance,". This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally very well covered, but arguing between 63% and 71% when we should be aiming to get to >95% is missing the point. Fixes #1339.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:1369,perform,performance,1369,https://qutip.org,https://github.com/qutip/qutip/pull/1347,1,['perform'],['performance']
Performance,"./../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5412,cache,cache,5412,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,".17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4029,cache,cached,4029,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,".17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2969,cache,cached,2969,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,".3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1853,cache,cached,1853,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,".metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3614,cache,cached,3614,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,".metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are ins",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2554,cache,cached,2554,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,".tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1651,cache,cached,1651,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,".toml`) defaults to 1.17.3, but `setup.cfg` requires `numpy>=1.19`. ### Code to Reproduce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_6",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1431,cache,cached,1431,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"/code></a>]</li>; <li>Support reading BC4U and DX10 BC1 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6486"">#6486</a> [<a href=""https://github.com/REDxEYE""><code>@​REDxEYE</code></a>]</li>; <li>Optimize ImageStat.Stat.extrema <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7593"">#7593</a> [<a href=""https://github.com/florath""><code>@​florath</code></a>]</li>; <li>Handle pathlib.Path in FreeTypeFont <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7578"">#7578</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use list comprehensions to create transformed lists <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7597"">#7597</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Added support for reading DX10 BC4 DDS images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7603"">#7603</a> [<a href=""https://github.com/sambvfx""><code>@​sambvfx</code></a>]</li>; <li>Optimized ImageStat.Stat.count <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7599"">#7599</a> [<a href=""https://github.com/florath""><code>@​florath</code></a>]</li>; <li>Moved error from truetype() to FreeTypeFont <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7587"">#7587</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Correct PDF palette size when saving <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7555"">#7555</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed closing file pointer with olefile 0.47 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7594"">#7594</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>ruff: Minor optimizations of list comprehensions, x in set, etc. <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7524"">#7524</a> [<a href=""https://github.com/cclauss""><cod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:8004,Optimiz,Optimized,8004,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['Optimiz'],['Optimized']
Performance,"014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3975,cache,cached,3975,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2915,cache,cached,2915,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"241 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; ```; I did the same test on two machines and on my old laptop it works fine, so it probably is something architecture dependent. The output of lscpu is:; ```; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 8; On-line CPU(s) list: 0-7; Thread(s) per core: 1; Core(s) per socket: 8; Socket(s): 1; NUMA node(s): 1; Vendor ID: GenuineIntel; CPU family: 6; Model: 63; Model name: Intel(R) Core(TM) i7-5960X CPU @ 3.00GHz; Stepping: 2; CPU MHz: 1199.890; CPU max MHz: 3500,0000; CPU min MHz: 1200,0000; BogoMIPS: 5989.11; Virtualization: VT-x; L1d cache: 32K; L1i cache: 32K; L2 cache: 256K; L3 cache: 20480K; NUMA node0 CPU(s): 0-7; Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb intel_ppin tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts; ```; I'll gladly provide any additional information that might be needed. It's definitely a possibility that I did something wrong in the build process of either qutip itself (this is the archlinux build script: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=python-qutip) or one of its libraries. Any ideas?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/681:3033,cache,cache,3033,https://qutip.org,https://github.com/qutip/qutip/issues/681,4,['cache'],['cache']
Performance,"3eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2010,cache,cached,2010,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"4.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3514,cache,cached,3514,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"4.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2454,cache,cached,2454,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a>; [kmilos]</p>; </li>; <li>; <p>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a>; [baletu, radarhere, newpanjing, hugovk]</p>; </li>; <li>; <p>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:6600,load,loading,6600,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['load'],['loading']
Performance,"627</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Raise a warning if NumPy failed to raise an error during conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6594"">#6594</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only read a maximum of 100 bytes at a time in IMT header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6623"">#6623</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Show all frames in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6611"">#6611</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow FLI palette chunk to not be first <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6626"">#6626</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>If first GIF frame has transparency for RGB_ALWAYS loading strategy, use RGBA mode <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6592"">#6592</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Round box position to integer when pasting embedded color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6517"">#6517</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed EXIF prefix when saving WebP <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6582"">#6582</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pad IM palette to 768 bytes when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6579"">#6579</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added DDS BC6H reading <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6449"">#6449</a> [<a href=""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:6509,load,loading,6509,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['load'],['loading']
Performance,"6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4915,load,load,4915,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['load'],['load']
Performance,"86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3715,cache,cached,3715,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2655,cache,cached,2655,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"; 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def build_extensions(self):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. /home/caidish1234/anaconda3/lib/python3.6/distutils/ccompiler.py in compile(self, sou",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:3894,optimiz,optimization,3894,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['optimiz'],['optimization']
Performance,"; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2573,cache,cached,2573,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,">; <li>Added PyPy 3.10 and removed PyPy 3.8 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7216"">#7216</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added in_place argument to ImageOps.exif_transpose() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7092"">#7092</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected error code <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7177"">#7177</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use &quot;not in&quot; <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7174"">#7174</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only call text_layout once in getmask2 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7206"">#7206</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed calling putpalette() on L and LA images before load() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7187"">#7187</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed unused INT64 definition <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7180"">#7180</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Updated xz to 5.4.3 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7136"">#7136</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed saving TIFF multiframe images with LONG8 tag types <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7078"">#7078</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not set size unnecessarily if image fails to open <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7056"">#7056</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:5291,load,load,5291,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['load'],['load']
Performance,"A faster isherm function. 3-5x faster if operator is Hermitian, 100x+ faster if not. Essentially does a modified adjoint calculation. This requires having a csr matrix in canonical format, which is not guaranteed under sparse multiplication. Since canonical format is important for time-dependent dynamics as well, fast_csr_matrix now does the indices and data sorting for canonical format after multiplication. This gives a slight performance hit, but having all Qobj in canonical format outweighs this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/629:432,perform,performance,432,https://qutip.org,https://github.com/qutip/qutip/pull/629,1,['perform'],['performance']
Performance,"A lot of the cost of the Husimi Q function does not depend on the state. If it is called many times (e.g. for a density matrix or when doing multiple states), this can be used for a speedup. I wrote a function to precompute everything that does not depend on the state and store it as a 3d array. The Q function itself is then a dot product between the last axis of the precomputed array and a pure state. Performance: Everything tested by computing Q of a coherent state with N dimensions, evaluated at 401 points in x and y, respectively.; Speedup is 3x for N=10, 4x for N=20, 7x for N=50. ; For density matrices, precomputing is already paid for by the first call. . Possible further changes:; Because precomputing is always worth it if the state is a density matrix, one could do that automatically. Because the memory cost can be large (len(xvec) * len(yvec) * N * 128 bit) , I still leave the decision to the user. The third if statement in _qfunc_pure can be avoided at a small performance cost in either the polyval or np.dot variant. This seemed the best compromise between performance and nice code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934:406,Perform,Performance,406,https://qutip.org,https://github.com/qutip/qutip/pull/934,3,"['Perform', 'perform']","['Performance', 'performance']"
Performance,"A representation of a quantum circuit consiting of qubit initialisation (I), controlled NOT gates (C) and measurements (M) with respect to different bases. According to [1], the transformation of a circuit to the ICM representation provides a cannonical form for an exact and fault-tolerant, error corrected circuit needed for optimization prior to final implementation on a hardware model. The algorithm consists of magic qubit initializations, gate teleportation and conditional measurements on qubits. It can be a starting point for topological descriptions of quantum cirucuits important for fault-tolerant quantum computation and can become a part of a pipeline for optimization of topological quantum computing circuits. Check out the game (MeQuanics)[http://www.mequanics.com.au] which aims to do so using crowd sourcing. Several proposals exist for circuit optimizations once we have the topological circuit model (Machine learning, monte carlo search etc) and the ICM model can be a good starting point to get to the initial topological circuit (as far as I could understand). . The algorithm can be roughly described as follows : . ```; Require: Circuit C composed from {Toffoli,CNOT,H,P,T}; Replace the Toffoli gates with their decomposition; Replace the H gates with P V P (already implemented using `resolve_gates`); Implement P V P using gate teleportation outlined in [1]; ```. The final output is a quantum circuit only using qubit initialisations, CNOT and conditional measurements/correction. Once that is complete, maybe another addition can be a conversion to the topological model and visualizations. This is a work in progress. TODO; ------; [ ] Fix code errors; [ ] Write tests; [ ] Update examples and docs. References; ----------; .. [1] arXiv:1509.03962v1 [quant-ph]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603:327,optimiz,optimization,327,https://qutip.org,https://github.com/qutip/qutip/pull/603,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2913,cache,cached,2913,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"Adds custom `csr.diags` and swaps `qdiags` over to use it to avoid using the `scipy` version with its large overhead. Constructing a tridiagonal matrix of dimension 100 gets approximately a 7x speed up (320µs to 45µs on my machine) and it's better for small dimensions - the `scipy` overhead has a constant component something around 280µs compared to a constant ~20µs in the new `csr` one. Not a big deal since it's hardly ever going to be a bottleneck, but it's just part of my work speeding up general QuTiP operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1419:443,bottleneck,bottleneck,443,https://qutip.org,https://github.com/qutip/qutip/pull/1419,1,['bottleneck'],['bottleneck']
Performance,Bug in control/optimizer.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/353:15,optimiz,optimizer,15,https://qutip.org,https://github.com/qutip/qutip/issues/353,1,['optimiz'],['optimizer']
Performance,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:321,load,loading,321,https://qutip.org,https://github.com/qutip/qutip/pull/1695,4,['load'],"['loaded', 'loading']"
Performance,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.4 to 1.26.5.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:595,perform,performance,595,https://qutip.org,https://github.com/qutip/qutip/pull/1563,1,['perform'],['performance']
Performance,"CircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5128,cache,cache,5128,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,Class for recording and reporting performance statistics of solvers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/454:34,perform,performance,34,https://qutip.org,https://github.com/qutip/qutip/pull/454,1,['perform'],['performance']
Performance,Clean up pulse optimization sparse solving support.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1621:15,optimiz,optimization,15,https://qutip.org,https://github.com/qutip/qutip/pull/1621,1,['optimiz'],['optimization']
Performance,"Currently, `Qobj` has several attributes which are somewhat expensive to compute:; - `type`; - `isherm`; - `istp`; - `iscp`; - `ishp` (added in #452). Of these, `type` and `isherm` are cached by `Qobj._type` and `Qobj._isherm`, respectively. These should be unified, so that the other three are also cached properly. Moreover, we should add unit tests to make sure that this caching is properly invalidated under at least some reasonably common manipulations. For instance, with the caching of `type`, it can sometimes fail in unexpected ways to build an object up then redefine its `dims`:. ``` python; >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type). >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> print(J.type); >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type); ```. The first of these two snippets correctly prints `super`, while the extra `print(J.type)` in the second snippet causes it to cache `type` and print `oper` twice. An experienced user can of course invalidate the cache with `J._type = None`, but that is somewhat counter-intuitive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453:185,cache,cached,185,https://qutip.org,https://github.com/qutip/qutip/issues/453,4,['cache'],"['cache', 'cached']"
Performance,DLL load failed: The specified module could not be found,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1613:4,load,load,4,https://qutip.org,https://github.com/qutip/qutip/issues/1613,1,['load'],['load']
Performance,"Data-layer type creation, conversion and dispatch; =================================================. ## Background. Previously in #1332, the old `fast_csr_matrix` type was replaced by the new, custom `CSR` type as the data backing for `Qobj`, and all internal QuTiP data representations. This produced some speed-ups in some places due to improved algorithms and better cache usage in places, but its principle advantage was the massive reduction in overhead for function calls between Python and C space, which largely affected small objects. The full aim, however, is to have QuTiP 5 support many different data representations as the backing of `Qobj`, and use the most suitable representation for the given data. This will not require every single QuTiP function to have an exponential number of versions for every possible combination of inputs, but only to have specialisations for the most common data combinations. This concept is the ""data layer"". All code examples in this PR are prefixed with. ```python; >>> from qutip.core import data; ```. ## Specification. The core to achieving this is fast, fully specified inter-conversion between all known data types, and efficient multiple-dispatch for mathematical operations. There are then four principle components of the data-layer:. 1. a creation routine which returns an appropriate data-layer type given some arbitrary Python object (`data.create`); 2. a routine which can perform the conversion from any data-layer type to any other data-layer type (`data.to`); 3. completely specialised mathematical operations (e.g. `data.add_csr_dense_dense(CSR, Dense) -> Dense`); 4. an object which provides multiple dispatch operations on its input arguments to use an exact specialisation (defined in item 3) if known, or uses the conversion routine (item 2) to convert the inputs into ones matching a specialisation if not: `data.Dispatcher`. The exported mathematical functions will all be instances of this type. The minimum work needed to defi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:371,cache,cache,371,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['cache'],['cache']
Performance,During test control.pulseoptim: Hadamard gate (loading config from file) this deprecation warning sometimes happens:; control.pulseoptim: Hadamard gate (loading config from file) ... C:\Users\Paul\A; naconda2\lib\site-packages\qutip\control\loadparams.py:92: DeprecationWarning: Y; ou passed a bytestring as `filenames`. This will not work on Python 3. Use `cp.r; ead_file()` or switch to using Unicode strings across the board.; Reported on pip install of 4.0.1 on macOS; Not able to reproduce on Linux (py2 or py3).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/598:47,load,loading,47,https://qutip.org,https://github.com/qutip/qutip/issues/598,3,['load'],"['loading', 'loadparams']"
Performance,"ENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2807,cache,cached,2807,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,ENH: Optimize td-BR non-secular call,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/713:5,Optimiz,Optimize,5,https://qutip.org,https://github.com/qutip/qutip/pull/713,1,['Optimiz'],['Optimize']
Performance,ENH: Optimized cython for sparse_utils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/568:5,Optimiz,Optimized,5,https://qutip.org,https://github.com/qutip/qutip/pull/568,1,['Optimiz'],['Optimized']
Performance,ENH: Simplified & optimized mcsolve codegen,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/541:18,optimiz,optimized,18,https://qutip.org,https://github.com/qutip/qutip/pull/541,1,['optimiz'],['optimized']
Performance,Fix in load params where 'pulsegen' was 'optim'; Fix to error handing when creating output directory; FileExistsError is new in Python 3; Hence swapped to OSError using errno for Python 2 compatability,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/317:7,load,load,7,https://qutip.org,https://github.com/qutip/qutip/pull/317,1,['load'],['load']
Performance,Fix the handling of file suffixes when saving and loading Qobjs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1877:50,load,loading,50,https://qutip.org,https://github.com/qutip/qutip/issues/1877,1,['load'],['loading']
Performance,"Hard-coding compiler flag `-march=native` in setup.py completely destroys possibility to set up Qutip on heterogeneous cluster. In general, it brings a lot of problems for people that don't have a good experience in debugging ""illegal instruction"" errors, that often happen, if you compile the module on different machine than you use. If you are sure you need optimized build for localhost, you might use; ```; export CFLAGS=""-O3 -march=native""; export CXXFLAGS=""$CFLAGS""; pip install qutip; ```; instead or provide separate option for setup.py script.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/920:361,optimiz,optimized,361,https://qutip.org,https://github.com/qutip/qutip/issues/920,1,['optimiz'],['optimized']
Performance,"Hello! This is the first of hopefully a few PRs to add measurement functions to qutip. This PR adds a new module named `qutip.measurement` that contains two functions:. * `measure(op, state)` that performs a classic quantum measurement as described in most introductory texts (measurement collapses a state to an eigenvector of an hermitian operator and the result is the corresponding eigenvalue). It is intended to simulate a simple measurement that could be performed in a real experiment. * `measurement_statistics(op, state)` returns information that is not available via a real experiment, but is nevertheless often useful in simulator (the eigenvalues and vectors or projection operators for the measurement operator and the probabilities of each measurement result). Both functions support either kets or density matrices and return sensible results based on the kind of input. Not currently supported:. * Partial measurements of a system.; * Destructive measurements (aka von Neumann measurements of the second kind); * Density matrix ensembles (applying the measurement probabilities to the density matrix rather than making a specific measurement); * Any custom support for qubit measurement (my plan is to add those to a `qutip.qip.measurements` module once we have the basics of this module agreed on). Questions / things I'd like feedback on:. * Do the inputs and outputs of the current functions seem intuitive / sensible?; * What are the most important other features to support?; * I don't want to have too many functions, but I also don't necessarily want to cram all possible kinds of measurements into one function. Any thoughts on how to split these up?; * What other unit tests should I be writing?; * I haven't given any thought to performance yet. Anything egregious I should fix now or any important cases to optimize for?. General stylistic feedback welcomed too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090:197,perform,performs,197,https://qutip.org,https://github.com/qutip/qutip/pull/1090,4,"['optimiz', 'perform']","['optimize', 'performance', 'performed', 'performs']"
Performance,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:412,perform,performance,412,https://qutip.org,https://github.com/qutip/qutip/issues/1703,1,['perform'],['performance']
Performance,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:1037,load,loader,1037,https://qutip.org,https://github.com/qutip/qutip/issues/1156,1,['load'],['loader']
Performance,"Hello. I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000. ; Units are µs for time (so MHz for frequency). . versions used:; ```python; matplotlib.pylab 1.16.4; qutip 4.4.1; matplotlib 3.1.1; numpy 1.16.4; scipy 1.3.1; CPython 3.7.3; IPython 7.5.0; ```. I solve with sesolve or mesolve with (|+. 1> + |0>)/sqrt(2) as initial state.; **expected:** quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>; **result:** population of |+1> goes down linearly and |0> goes up ; a few observations: ; - if I make the coefficient of Sz^2 smaller, the population diverges less ; - with less time steps but same overall propagation time, I see the divergence less obviously because I see the beginning of it; - I am aware one can somehow optimize the number of time steps but this is about the convenient settings for the next steps for me; - I was thinking of increasing floating point precision or something like that but wasn't able to find a simple way to do that in the docs. it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?; anyway, this is about the right, convenient choice of unit for us here. any idea what's wrong ?. ```python; %load_ext watermark; import numpy as np; import scipy; import matplotlib; import matplotlib.pylab as plt; import qutip; %watermark -v --iversions; %matplotlib qt. #Spin 1 operators; S1_x = 1/np.sqrt(2)*qutip.Qobj([[0,1.,0],; [1.,0,1.],; [0,1.,0]]). S1_y = 1.j/np.sqrt(2)*qutip.Qobj([[0,-1.,0],; [1.,0,-1.],; [0,1.,0]]). S1_z = qutip.qdiags([1.,0,-1.], 0). #canonical basis with corresponding projectors; canon_100 = qutip.basis(3,0) #ket |+1>; canon_010 = qutip.basis(3,1) #ket |0>; canon_001 = qutip.basis(3,2) #ket |-1>. proj100 = qutip.ket2dm(canon_100); proj010 = qutip.ket2dm(canon_010); proj001 = qutip.ket2dm(canon_001). #Hamiltonian pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085:81,optimiz,optimization,81,https://qutip.org,https://github.com/qutip/qutip/issues/1085,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Hi friends,. I'm going to import qutip as . from qutip import *. but i get this error:. Traceback (most recent call last):; File ""D:\py\Master_solve.py"", line 4, in <module>; import qutip; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\__init__.py"", line 149, in <module>; from qutip.qobj import *; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\qobj.py"", line 60, in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; File ""C:\Users\Phd-02\AppData\Roaming\Python\Python36\site-packages\qutip\fastsparse.py"", line 423, in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); ImportError: DLL load failed: The specified module could not be found. Any suggestion?Thanks in advance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1613:694,load,load,694,https://qutip.org,https://github.com/qutip/qutip/issues/1613,1,['load'],['load']
Performance,"Hi!. I'd like to report an installation issue on CentOS/RHEL platforms. I've tested various Python versions (2.7, 3.4) on both RHEL 6.x and 7.x, and the error is consistent, and happens during compilation of some Cython files. The error is: `ambiguous overloaded method` referring to the `abs()` function, and happens in two different places. Full installation output:; ```; $ pip install qutip; Collecting qutip; Using cached qutip-4.1.0.tar.gz; Complete output from command python setup.py egg_info:; ; Error compiling Cython file:; ------------------------------------------------------------; ...; cdef double * col_sum = <double *>PyDataMem_NEW_ZEROED(ncols, sizeof(double)); cdef double max_col = 0; for ii in range(nrows):; for jj in range(ptr[ii], ptr[ii+1]):; k = ind[jj]; col_sum[k] += abs(data[jj]); ^; ------------------------------------------------------------; ; qutip/cy/sparse_utils.pyx:316:29: ambiguous overloaded method; ; Error compiling Cython file:; ------------------------------------------------------------; ...; cdef size_t ii, jj; cdef double * row_sum = <double *>PyDataMem_NEW_ZEROED(nrows, sizeof(double)); cdef double max_row = 0; for ii in range(nrows):; for jj in range(ptr[ii], ptr[ii+1]):; row_sum[ii] += abs(data[jj]); ^; ------------------------------------------------------------; ; qutip/cy/sparse_utils.pyx:335:30: ambiguous overloaded method; Compiling qutip/cy/spmatfuncs.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/stochastic.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/sparse_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:420,cache,cached,420,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['cache'],['cached']
Performance,"Hi, this is just a refactoring of @nwlambert 's code for a generic HEOM solver which takes in a set of exponents and coefficients for a spectral density function and can be used to work with arbitrary spectral density functions. In comparison, the current `heom` solver in QuTiP is specialized. . Specific quantum systems in the `qutip/models` sub-module could have the following signature:; ```; model = System(hamiltonian, **params); result = model.solve(initial_state, tlist, options); ```; System specific functions could be in the model class. For instance,; ```; model._rhs(); ```; gives the RHS (a matrix equivalent to an effective Liouvillian) of the density matrix evolution equation. If any system can be written down as the evolution of an initial density matrix as dp/dt = (RHS)p, and there is an optimised way to solve, it can be written down as a qutip.model. The other necessary function would be a basis change map or a lookup dictionary for translating a state tuple to the index in the larger density matrix which is used for the evolution using the effective Liouvillian. This is the `_heom_state_dictionaries` in this case and `jmm1_dictionary` in case of the WIP #753 . The code in the current form is good enough to be used but it needs to be optimized further. The next steps are:; - [x] Tests for RHS generation and the solve function; - [ ] Optimize the generation of the effective Liouvillian (RHS) similar to the `heom` solver; - [ ] Refactoring and deciding on the API (how to pass in the coefficients etc)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/793:1265,optimiz,optimized,1265,https://qutip.org,https://github.com/qutip/qutip/pull/793,2,"['Optimiz', 'optimiz']","['Optimize', 'optimized']"
Performance,"Hi,. I recently had to animate a Wigner plot, to show the evolution of the Wigner function in time. It looks like QuTip does not any specific methods to ease this, at least when doing it in a Jupyter notebook. Typically, the `qutip.plot_wigner` method is really handy to plot Wigner functions, as it deals with everything, from the Wigner generation to the correct plotting. However, using it in an animation function callback from `matplotlib.animation.FuncAnimation` is not doable if you want it to be plotted live in the notebook. And to use `qutip.wigner.wigner` you have to manually reproduce lots of code from `qutip.plot_wigner`. I can think about two solutions to this issue:; 1. Enhancing `qutip.plot_wigner` so that it supports the first parameter to be a list of ket / density matrices, and in such a case it would render an animation rather than a single plot.; 2. Splitting `qutip.plot_wigner` in different methods that could be called independently. Typically, a first method to initialize the Wigner plot (that is set the correct colormap, labels for axis and so on), another one to compute a wigner function to render and a last one to perform the plot itself which would call all the other methods and have the same behavior as the current `qutip.plot_wigner` method. This way, if one wishes to render an animation of a Wigner function time evolution, he can call the first method to setup the matplotlib figure accordingly, then precomputes all the wigner arrays to plot on the animation and handle the animation part on his own, typically with a `FuncAnimation` animation. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/544:1152,perform,perform,1152,https://qutip.org,https://github.com/qutip/qutip/issues/544,1,['perform'],['perform']
Performance,"How to start the quantum optimal control optimization, say GRAPE, from a custom initial pulse instead of LIN/ZERO/RND?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1117:41,optimiz,optimization,41,https://qutip.org,https://github.com/qutip/qutip/issues/1117,1,['optimiz'],['optimization']
Performance,"I am distributing some qutip code to several cores. I want to enforce that qutip only uses one core per job with qutip.settings.num_cpus=1, but it is not working, the processes still take all the processors of my machine, so that if I have N cores, the multiprocessing ends up using N*N threads, slowing things down a lot! How can I force qutip to use only 1 core? Currently loading like this:. ```; from qutip import create, destroy, Qobj, expect, tensor, qeye, fidelity, basis, variance, settings; from pathos.multiprocessing import ProcessingPool. settings.num_cpus = 1; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175:375,load,loading,375,https://qutip.org,https://github.com/qutip/qutip/issues/1175,1,['load'],['loading']
Performance,"I am running a IPython/Jupyter Notebook via [supervisor](http://supervisord.org/) which does not export the `$HOME` environment variable (this is of course easily fixable). When importing qutip, I get the following warning message:. ```; WARNING:qutip.settings:Error loading RC file.; Traceback (most recent call last):; File ""/home/mvd/miniconda3/lib/python3.4/site-packages/qutip/__init__.py"", line 138, in <module>; os.environ['HOME'], "".qutiprc""; File ""/home/mvd/miniconda3/lib/python3.4/os.py"", line 633, in __getitem__; raise KeyError(key) from None; KeyError: 'HOME'; ```. Since this is just a warning, does it mean that there are no problems, or will it have some effects?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/365:267,load,loading,267,https://qutip.org,https://github.com/qutip/qutip/issues/365,1,['load'],['loading']
Performance,"I am trying to perform this simple operation <a href=""https://www.codecogs.com/eqnedit.php?latex=(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" title=""(H^{\otimes 2} \otimes I^{\otimes 2} ) \times \psi"" /></a>; where ; <a href=""https://www.codecogs.com/eqnedit.php?latex=H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" title=""H = \frac{1}{\sqrt{2}} \times \begin{bmatrix} 1 & 1\\ 1 & -1 \end{bmatrix} , I = \begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix}"" /></a>; and ; <a href=""https://www.codecogs.com/eqnedit.php?latex=\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" title=""\psi = \left|0\right\rangle^{\otimes 4}"" /></a>; I do that as follow: ; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); ```; and i got the following : . ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); Traceback (most recent call last):. File ""<ipython-input-160-ae66af2f799c>"", line 1, in <module>; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1). File ""/home/user/anaconda2/envs/Quantu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:15,perform,perform,15,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['perform'],['perform']
Performance,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:843,optimiz,optimization,843,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimization']
Performance,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:427,optimiz,optimize,427,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['optimiz'],['optimize']
Performance,"I have recently started to use QuTiP to compute unitary and Hamiltonian evolutions. Most of the calculations involved Hamiltonians (or circuits) defined on separate regions of the Hilbert space plus some other Hamiltonians used to couple the different systems together. When performing the simulations I have found that the requirement that Qobjs must have the same dims attribute to be summed or multiplied tends to make the code quite convoluted (the convolution might also come from my inexperience with QuTiP). For example (I will use circuits but the same issues applies to Hamiltonians). Let |psi> be a random 4-qubit state and C a random unitary on the first two qubits. In order to compute C|psi> one must specify the tensor structure of the random objects and not use qeye(8) but the tensor product of three qeye(2):. `C = tensor(rand_unitary_haar(4, dims = [[2,2],[2,2]]), tensor(qeye(2),qeye(2),qeye(2)))`; `psi = rand_ket(32, dims = [[2,2,2,2,2], [1,1,1,1,1]])`. I understand that the tensor product structure in the Qobj class might yield lots of advantages but it might be interesting to consider if in some cases it is possible to allow the summation or multiplication of Qobs of different dims but with the same shape. In this case, the above example would simplify to:. `C = tensor(rand_unitary_haar(4), qeye(8))`; `psi = rand_ket(32)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1253:275,perform,performing,275,https://qutip.org,https://github.com/qutip/qutip/issues/1253,1,['perform'],['performing']
Performance,I try to `pip install qutip==4.0.2` (all the latest versions cannot be installed and have even more complicated error). The error seems to be easier to diagnosed. But I still cannot find out which part goes wrong and why the error happened. The error is:; ```; Collecting qutip==4.0.2; Using cached https://files.pythonhosted.org/packages/c1/de/2efee1b7f6cadd45426ef7b0759cdc3e522672a509d1c75bb317cc4be6cb/qutip-4.0.2.tar.gz; Complete output from command python setup.py egg_info:; ; Error compiling Cython file:; ------------------------------------------------------------; ...; ; DTYPE = np.float64; ^; ------------------------------------------------------------; ; qutip/cy/parameters.pxi:2:10: cimported module has no attribute 'float64'; ; Error compiling Cython file:; ------------------------------------------------------------; ...; ; DTYPE = np.float64; ctypedef np.float64_t DTYPE_t; ; ITYPE = np.int32; ^; ------------------------------------------------------------; ; qutip/cy/parameters.pxi:5:10: cimported module has no attribute 'int32'; ; Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.float64_t DTYPE_t; ; ITYPE = np.int32; ctypedef np.int32_t ITYPE_t; ; CTYPE = np.complex128; ^; ------------------------------------------------------------; ; qutip/cy/parameters.pxi:8:10: cimported module has no attribute 'complex128'; ; Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.int32_t ITYPE_t; ; CTYPE = np.complex128; ctypedef np.complex128_t CTYPE_t; ; CTYPE = np.int64; ^; ------------------------------------------------------------; ; qutip/cy/parameters.pxi:11:10: cimported module has no attribute 'int64'; ```; Thank you very much.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/911:292,cache,cached,292,https://qutip.org,https://github.com/qutip/qutip/issues/911,1,['cache'],['cached']
Performance,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1430:309,load,loaded,309,https://qutip.org,https://github.com/qutip/qutip/pull/1430,1,['load'],['loaded']
Performance,"Implement an option for using array-like coefficients as step-function instead of cubic-spline:; e.g. ; ```; tlist = np.array([0., 1., 2., 3.]); coeff = np.array([1., 2., 3., 3.]); ```; The coefficient is 1 in the time interval [0,1), 2 in [1,2) and so on. The last element in `coeff` is just a place holder and has no effect. @Ericgig Do you think the following might be useful?; 1. In `inter.pyx` many functions have two versions, one for complex input and one for float. Now there are 4 pairs of them, will it helps if I try to merge them with fused type in Cython?; 2. For non-uniform `tlist`, `_binary_search` is used to find the current index inside the method such as `_spline_float_t_second`, but very often we call this method within a loop for the same `t`. It would improve the performance if `_binary_search` is called outside once for all `t`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1050:789,perform,performance,789,https://qutip.org,https://github.com/qutip/qutip/pull/1050,1,['perform'],['performance']
Performance,Improve performance of Stochastic Schrodinger Equation with sparse sc_ops,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2298:8,perform,performance,8,https://qutip.org,https://github.com/qutip/qutip/issues/2298,1,['perform'],['performance']
Performance,"In file [propagator.py](https://github.com/qutip/qutip/blob/master/qutip/propagator.py), near line 119:; ```python; td_type = _td_format_check(H, c_op_list, solver='me')[2]; if td_type > 0:; rhs_generate(H, c_op_list, args=args, options=options); ```; The performance would be improved if this code checked for the presence of an already compiled tdfunc like this:; ```python; if td_type > 0 and config.tdfunc is None:; ...; ```; which only requires an additional import of the config object from qutip.solver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/555:256,perform,performance,256,https://qutip.org,https://github.com/qutip/qutip/issues/555,1,['perform'],['performance']
Performance,"In response to #920, and following the discussion in #949, we need some way to make the compile flags optional during setup. The `-march=native` is the probable cause of issues with the conda-forge build #647, and also causes problems for some installing in a cluster environment. However, for most people installing on a local machine, `-march=native` is likely to have significant performance advantages. The suggestion is then to have some cmd line option to choose compile flags where the default is 'optimal', which would include `-march=native`. @Ericgig we can discuss this next week",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/951:383,perform,performance,383,https://qutip.org,https://github.com/qutip/qutip/issues/951,1,['perform'],['performance']
Performance,"Is there any performance reason why we should not compile the extensions using C++ ?. We are having issues with the conda forge packages:; conda-forge/qutip-feedstock#16; I am sure than this problem would not occur if we were compiling using MS compilers.; We are receiving lots of support requests on the Google group for help installing on Windows; We do not have a solution for python>=3.5 on Windows. I posted a question on the Cython help group asking about accessing complex functions on Windows. One suggestion was to try C++, importing functions from `complex` rather than `complex.h`. I made a small test project that imported `conj` and it compiled using MS compilers and worked on Windows 10 with both Python 2.7 and 3.5. We only have one small C source file. I guess it could be rewritten in C++ quite easily.; I can do further tests to check performance if we consider C++ compilation is an option for qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647:13,perform,performance,13,https://qutip.org,https://github.com/qutip/qutip/issues/647,2,['perform'],['performance']
Performance,"It would be really nice if qutip coud support the numba jit compiler (https://numba.pydata.org/) in some future releases. This would also enable, to perform calculations using the GPU very easily.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/900:149,perform,perform,149,https://qutip.org,https://github.com/qutip/qutip/issues/900,1,['perform'],['perform']
Performance,"Many of the features in the pulse optimization module are difficult to use, or poorly documented. For example, for the functions `optimize_pulse` and `optimize_pulse_unitary` there are 'params' arguments for many of the underlying classes, but it's not at all clear what count as valid key value pairs for each class.; ```python; Parameters; ----------; alg_params : Dictionary; options that are specific to the algorithm see above; ; optim_params : Dictionary; The key value pairs are the attribute name and value; used to set attribute values; Note: attributes are created if they do not exist already,; and are overwritten if they do.; Note: method_params are applied afterwards and so may override these. method_params : dict; Parameters for the optim_method. ; Note that where there is an attribute of the; Optimizer object or the termination_conditions matching the key ; that attribute. Otherwise, and in some case also, ; they are assumed to be method_options; for the scipy.optimize.minimize method. . dyn_params : dict; Parameters for the Dynamics object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. prop_params : dict; Parameters for the PropagatorComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. fid_params : dict; Parameters for the FidelityComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. init_pulse_params : dict; Parameters for the initial / guess pulse generator object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created; ```. As a further example, `dyn_params` is passed to a `Dynamics` object which stores it locally in `self.params`, but there isn't any checking of valid keys and values, and I can't find a function which actually uses whatever these params are set to. It's really difficult to run a top-le",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:34,optimiz,optimization,34,https://qutip.org,https://github.com/qutip/qutip/issues/1284,3,"['Optimiz', 'optimiz']","['Optimizer', 'optimization', 'optimize']"
Performance,"Matrix exponentiation is a costly operation. See [1][Nineteen Dubious Ways to Compute the Exponential of a Matrix, Twenty-Five Years Later∗](https://www.cs.cornell.edu/cv/ResearchPDF/19ways%2B.pdf). In a quantum optics, the displacement operator is one of the most basic. It is used to create coherent states from vacuum and forms one of the two gates for universal control of a cavity (Displacement + SNAP gates) [2] [Efficient cavity control with SNAP gates](https://arxiv.org/abs/2004.14256). When we want to write an optimisation routine that finds best displacement parameters in a routine similar to the paper above [2], it would be nice if we can compute the operator faster without doing matrix exponentiation as qutip does now:; https://github.com/qutip/qutip/blob/master/qutip/operators.py#L732. I have some notes from a colleague who calculated an analytical formula to compute the matrix elements of the displacement operator without having to do matrix exponentiation [3]: ; [Displacement_operator.pdf](https://github.com/qutip/qutip/files/4791455/Displacement_operator.pdf). A PR to implement this in QuTiP would be great. We could first write a `_displace_analytical` function that calculates the displacement matrix using the [Scipy Laguerre polynomial](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.genlaguerre.html) and have it as an option as `displace(N, alpha, offset, method=`analytical` )`. Could it also come in handy for optimal control? @ajgpitch . In the paper above [2], the authors use gradient descent to fine tune the parameters of a gate sequence containing displacement gates and SNAP gates to target some Bosonic quantum state. We wish to do similar things for @araza6 s GSoC project.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293:1561,tune,tune,1561,https://qutip.org,https://github.com/qutip/qutip/issues/1293,1,['tune'],['tune']
Performance,"OpenMP handling is broken in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:627,Load,Load,627,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['Load'],['Load']
Performance,Optimization flags in setup.py should be completely avoided,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/920:0,Optimiz,Optimization,0,https://qutip.org,https://github.com/qutip/qutip/issues/920,1,['Optimiz'],['Optimization']
Performance,Optimize `numpy_backend`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2509:0,Optimiz,Optimize,0,https://qutip.org,https://github.com/qutip/qutip/pull/2509,1,['Optimiz'],['Optimize']
Performance,Optimize dispatcher by using positional only arguments,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2135:0,Optimiz,Optimize,0,https://qutip.org,https://github.com/qutip/qutip/pull/2135,1,['Optimiz'],['Optimize']
Performance,"Optimize slow spre, spost action: use `np.dot`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831:0,Optimiz,Optimize,0,https://qutip.org,https://github.com/qutip/qutip/issues/831,1,['Optimiz'],['Optimize']
Performance,Optimizer approx_grad,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/342:0,Optimiz,Optimizer,0,https://qutip.org,https://github.com/qutip/qutip/pull/342,1,['Optimiz'],['Optimizer']
Performance,Patch qutip.entropy.concurrence for pure states,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/143:20,concurren,concurrence,20,https://qutip.org,https://github.com/qutip/qutip/pull/143,1,['concurren'],['concurrence']
Performance,Performance drop in QuTiP 5.0.1 vs QuTiP 4.7.6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2406:0,Perform,Performance,0,https://qutip.org,https://github.com/qutip/qutip/issues/2406,1,['Perform'],['Performance']
Performance,Pulse optimization documentation and usage is unclear,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:6,optimiz,optimization,6,https://qutip.org,https://github.com/qutip/qutip/issues/1284,1,['optimiz'],['optimization']
Performance,"Qobj.expm() is currently not working properly for diagonal states which have a zero in the diagonal (these zeros don't become ones). An example:. ``` python; >>> foo = qutip.Qobj([[1.,0.],[0.,0.]]); >>> foo.expm(); Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 2.71828183 0. ]; [ 0. 0. ]]; ```. While the correct result should have been (notice the element in second row, second column):. ``` python; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 2.71828183 0. ]; [ 0. 1. ]]; ```. On analysing the source code I found the the function `sp_expm` in `sparse.py` is responsible for this computation. The particular code is reproduced below:. ``` python; def sp_expm(A, sparse=False):; """"""; Sparse matrix exponential. ; """"""; if _isdiag(A.indices, A.indptr, A.shape[0]):; A.data = np.exp(A.data); return A; if sparse:; E = spla.expm(A.tocsc()); else:; E = spla.expm(A.toarray()); return sp.csr_matrix(E); ```. Since `A.data` is stored in sparse matrix format, only non-zero elements are exponentiated. A way to avoid this problem would be to either completely remove the case of optimizing for diagonal states or modifying the appropriate code as:. ``` python; def sp_expm(A, sparse=False):; """"""; Sparse matrix exponential. ; """"""; if _isdiag(A.indices, A.indptr, A.shape[0]):; A = sp.diags(np.exp(A.diagonal()),format='csr'); return A; if sparse:; E = spla.expm(A.tocsc()); else:; E = spla.expm(A.toarray()); return sp.csr_matrix(E); ```. I am running qutip 3.2.0.dev-cb698ef; Python 3.5.1, numpy 1.10.4, scipy 0.17.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/493:1172,optimiz,optimizing,1172,https://qutip.org,https://github.com/qutip/qutip/issues/493,1,['optimiz'],['optimizing']
Performance,Qtrl load params general,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/403:5,load,load,5,https://qutip.org,https://github.com/qutip/qutip/pull/403,1,['load'],['load']
Performance,"Qtrl load params list, Qobj and ndarrays",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/350:5,load,load,5,https://qutip.org,https://github.com/qutip/qutip/pull/350,1,['load'],['load']
Performance,"QuTiP development is now based on a large community of continuous users and a smaller group of sporadic developers. Some developers continuously contribute to the development. . The nature of QuTiP, at the frontier of quantum physics research, implies that the development of new modules sometimes overlaps or stems from research projects. It could be nice to enhance the rate of contribution and mentoring from the users community in the spirit of openness and scalability. . ## GSoC and Wiki; An example of project ideas has been provided by the [Google Summer of Code 2019](https://numfocus.org/programs/google-summer-code), for which various researchers and coders, even if not directly part of the lead development team, proposed new projects on the [Wiki](https://github.com/qutip/qutip/wiki//Google-Summer-of-Code-2019). Two of these ideas were eventually brought forth by two students to develop their own projects over the summer. . The details are here https://gsoc2019-boxili.blogspot.com/ and here https://latticemodelfunctions.blogspot.com/. ## KWoC; I applied to the Kharagpur Winter of Code ([KWoC](https://kwoc.kossiitkgp.org/)) where mainly BSc and also MSc / PhDs can participate over the winter to a project on QuTiP. QuTiP just got selected and there is the opportunity for students projects over the winter. I will begin with proposing mine, but this is an opportunity also for mentors to propose their projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projec",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:462,scalab,scalability,462,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['scalab'],['scalability']
Performance,"QuTiP is hosted on Anaconda's conda-forge channel and on PyPI. I would like to showcase downloads on the [website](https://github.com/qutip/qutip.github.io) and possibly have a development notebook (or in a personal repository) showing them updated, for QuTiP presentations. . * **conda install qutip**: For conda-forge, it is possible to use the `anaconda-package-data` with `dask` and `intake`, ; https://github.com/ContinuumIO/anaconda-package-data. * **pip install qutip**: For PyPI, it is possible to use, `pypinfo` ; https://github.com/ofek/pypinfo; Note that with`pypinfo` Google's Big Data queries are not free, but new accounts come with some budget credited. Some data: . *`pip install qutip` data starts in 2016. In 2018, 8000 downloads are reported. For 2019, well over 10,000 downloads are predicted. *`conda install qutip` data starts in March 2017. For 2018, 30,000 downloads have been performed. This data is useful to gauge the effective popularity of the two package managers and distribution platforms and can help in setting priorities for relative support and bug fixing. . ## Anaconda downloads; <img width=""441"" alt=""qutip-conda-forge-downloads"" src=""https://user-images.githubusercontent.com/14573436/57989417-45d94380-7ad5-11e9-9694-623fec86865b.png"">. ## PyPI downloads; ![pip-install-qutip-png](https://user-images.githubusercontent.com/14573436/57979590-df174400-7a5a-11e9-807e-c2f46bbb830e.png). With `pypinfo` we can also easily extract other information on users' machines details, such as python usage, which can provide guidance on aspects: . ### Python version; #### 2018; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 3.6 | 47.33% | 4,079 |; | 2.7 | 24.25% | 2,090 |; | 3.7 | 13.97% | 1,204 |; | 3.5 | 12.43% | 1,071 |; | 3.4 | 1.94% | 167 |; | 2.6 | 0.09% | 8 |; | Total | | 8,619 |. #### 2017; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 2.7 | 51.55% | 4,333 |; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/997:901,perform,performed,901,https://qutip.org,https://github.com/qutip/qutip/issues/997,1,['perform'],['performed']
Performance,"R: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2193,cache,cached,2193,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"Remove `Coefficient.argument` which modify the object inplace for `Coefficient.replace` which return a modified copy.; `Copy` of string coefficient is optimized.; Initially from #1481, more discussion there. Some circular import in unrelated files have been moved inside function as they are causing problem in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1507:151,optimiz,optimized,151,https://qutip.org,https://github.com/qutip/qutip/pull/1507,1,['optimiz'],['optimized']
Performance,"Scipy 1.5 changed the methods of performing the matrix multiplication to; avoid copying the `indptr` matrix multiple times. This is actually not an; issue at all for us, because we only allow int32 indices (so if the; indices were to upcast, we just throw and exception), but the underlying; private Cython call structure also changed, and our `fast_csr_matrix` was; a direct clone. We add try/catch blocks to switch on the correct types (the overhead; from a failed lookup is trivial compared to the matrix multiplication; time), because we have to support more than just the most recent version; of scipy. We could look up the version of scipy installed, but the; ""try it and see"" approach is more typical Python. This problem should be eliminated by the move to the new data types, as; we will stop relying on private scipy code. See: commit scipy/scipy@53fac7a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1298:33,perform,performing,33,https://qutip.org,https://github.com/qutip/qutip/pull/1298,1,['perform'],['performing']
Performance,"Should fix tests/test_propagator.py::testPropHOStrTd sometime failing, ran it 100 times with the patch without error.; Cause: compiling the same string by multiple process at once resulted in them writing temp files with the same filename, resulting in a race condition and random fails. Not sure why it was not caught before.; @nathanshammah, @ajgpitch",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1169:255,race condition,race condition,255,https://qutip.org,https://github.com/qutip/qutip/pull/1169,1,['race condition'],['race condition']
Performance,Simply setting compiler flags and add link-time optimizations.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/308:48,optimiz,optimizations,48,https://qutip.org,https://github.com/qutip/qutip/pull/308,1,['optimiz'],['optimizations']
Performance,Small inquiry on the optimizations using GRAPE,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:21,optimiz,optimizations,21,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['optimiz'],['optimizations']
Performance,"Specifically this test `test_interpolate.test_interpolate_brevolve3()` followed by `test_mcsolve.test_MCCollapseTimesOperators` generates an error or the form; ```; Process SpawnPoolWorker-1:; Traceback (most recent call last):; File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\process.py"", line 249, in _bootstrap; self.run(); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\process.py"", line 93, in run; self._target(*self._args, **self._kwargs); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\pool.py"", line 108, in worker; task = get(); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\queues.py"", line 345, in get; return ForkingPickler.loads(res); ImportError: No module named 'rhs47600'; ```; The rhs... file in generated by the brevolve3 test. The test appears to finish fine. But somehow it looks like some process is hanging around. Why this is triggered by the MCCollapseTimesOperators test is a bit of a mystery.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/728:613,queue,queues,613,https://qutip.org,https://github.com/qutip/qutip/issues/728,2,"['load', 'queue']","['loads', 'queues']"
Performance,"The QIP module is a set of tools for simulating quantum computing, from the high-level of algorithms, down to individual qubit control sequences in a particular physical architecture. So far it has functions for common quantum information processing tasks, including pre-defined quantum gates, along with functions for applying arbitrary 1, 2, and 3 qubit gates to arbitrary target and control qubits in a register of N qubits, circuit representations, a library of quantum algorithms, and models for some common physical QIP architectures. Our goal is to have a set of tools to analyse the influence of unexpected noise sources on a given algorithm realized on a particular architecture, as well as being used as an educational tool for teaching QIP concepts. . QIP module enhancements we plan to implement include:; 1. Simulation of stabilizer circuits and quantum error correction codes.; 2. Simulation of common quantum algorithms - Shor's Factorization, Grover's Search, Quantum Teleportation, and more...( http://math.nist.gov/quantum/zoo/ ); 3. Extend platform to simulate specific quantum computing architectures - Create models to simulate different experimental quantum computing setups like Xmons, including typical environmental noise sources, and limitations on control and readout associated with each example.; 4. Combine the qip and qcontrol modules to optimize circuit and gate decomposition and find ideal fast control pulses to realize particular gates, given physically available limitations of a particular architecture. ; 5. Platform for simulating quantum chemistry on a quantum computer - Create example codes for calculating the ground state of molecules, following specific examples found in DOI: 10.1126/science.1113479 and elsewhere. ; 6. Combine the qip and HEOM/RC solvers to investigate the effect of a non-markovian and nonperturbative environment on error correction and common algorithms.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/441:1369,optimiz,optimize,1369,https://qutip.org,https://github.com/qutip/qutip/issues/441,1,['optimiz'],['optimize']
Performance,"The Qobj data that represents the state or operator is stored as a sparse (csr) array. In most cases this makes sense, as the memory requirements for many solvers would be excessive. There are many cases though for small systems where memory would not be an issue, and significant performance improvements could be gained. This has been demonstrated in the optimal control modules. Many matrix operations are much faster in the dense representation. Originally suggested in #26. This is now more urgent. In answer to #370 I submitted #397. However, it was found that significant performance degradation occurred in the control evolution calculation for small systems, and as such a retrofit of ndarray option for internal operator type was made. This leads to pretty untidy code, and means that subclasses for propagator and gradient calculations, fidelity, and evolution calculations all need to implement conditional methods. Implementation of a dense Qobj would resolve these problems, and as mentioned above, could lead to performance improvements in many of the other solvers. Many of the solvers assume sparsity, and so they too may need changes to support dense states and operators. . In general, great care would need to be undertaken in implementing the dense Qobj. Those methods that did not support it would need to check the Qobj type when called",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/437:281,perform,performance,281,https://qutip.org,https://github.com/qutip/qutip/issues/437,3,['perform'],['performance']
Performance,The commit af17ded3dec6d712eb852575bf6d5a6c5bbaf832 introduced a performance regression in Qobj.expm. https://github.com/qutip/continuous-benchmark#qobj_expm_20,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/50:65,perform,performance,65,https://qutip.org,https://github.com/qutip/qutip/issues/50,1,['perform'],['performance']
Performance,"The installation seems to succeed, but there seems to be a problem when the tests are run (or when I go into python, trying to load anything like `from qutip import *` gives an error. The script gives the following error (which can be reproduced by just running `import qutip.testing as qt` in python):. ```; [. . .]; Successfully installed qutip-3.1.0; Running QuTiP unit tests; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/usr/local/lib/python2.7/site-packages/qutip/__init__.py"", line 213, in <module>; from qutip.qobj import *; File ""/usr/local/lib/python2.7/site-packages/qutip/qobj.py"", line 60, in <module>; from qutip.ptrace import _ptrace; File ""/usr/local/lib/python2.7/site-packages/qutip/ptrace.py"", line 38, in <module>; from qutip.sparse import sp_reshape; File ""/usr/local/lib/python2.7/site-packages/qutip/sparse.py"", line 49, in <module>; from qutip.cy.sparse_utils import (_sparse_profile, _sparse_permute,; File ""/usr/local/lib/python2.7/site-packages/qutip/cy/__init__.py"", line 1, in <module>; from qutip.cy.spmatfuncs import *; File ""/usr/local/lib/python2.7/site-packages/pyximport/pyximport.py"", line 431, in load_module; language_level=self.language_level); File ""/usr/local/lib/python2.7/site-packages/pyximport/pyximport.py"", line 209, in load_module; inplace=build_inplace, language_level=language_level); File ""/usr/local/lib/python2.7/site-packages/pyximpo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/348:127,load,load,127,https://qutip.org,https://github.com/qutip/qutip/issues/348,1,['load'],['load']
Performance,"The new version of expm that I grabbed from Expokit does not behave quite as well as the SciPy version. After a bit of testing, the SciPy version performs the best overall. For our purposes, I think that either method would be sufficient. However, the SciPy version is the current best algorithm, and replacing as much code as possible with SciPy code is probably a good thing. This code still defaults to the dense method.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/466:146,perform,performs,146,https://qutip.org,https://github.com/qutip/qutip/pull/466,1,['perform'],['performs']
Performance,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1577:321,load,load,321,https://qutip.org,https://github.com/qutip/qutip/pull/1577,1,['load'],['load']
Performance,"The qutip.fortran module seems to be built and installed in the TravisCI environment, but for some reason loading it after install fails, so the tests are skipped. . See for example the build log at https://travis-ci.org/qutip/qutip/jobs/19551778",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/80:106,load,loading,106,https://qutip.org,https://github.com/qutip/qutip/issues/80,1,['load'],['loading']
Performance,"There appears to be a bug in OptimizerLBFGSB.run_optimization . At line 901, _build_bounds_list is called and correctly constructs the list of upper and lower bound tuples and sets self.bounds, however there is no return value. At line 939, the empty variable 'bounds' is passed to scipy.fmin_l_bfgs_b and therefore the constraints are not active. . Easy solution is to change ""bounds=bounds"" to ""bounds=self.bounds"" in line 939.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/353:29,Optimiz,OptimizerLBFGSB,29,https://qutip.org,https://github.com/qutip/qutip/issues/353,1,['Optimiz'],['OptimizerLBFGSB']
Performance,"This PR addresses #433 by manually setting `Qobj.superrep` to suppress warnings in `chi_to_choi`. The change of basis for chi → choi is currently represented as a `superrep='super'`, as that makes sense in several other contextx, such that spurious warnings were raised when performing this conversion.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/436:275,perform,performing,275,https://qutip.org,https://github.com/qutip/qutip/pull/436,1,['perform'],['performing']
Performance,"This PR suggests enhancing the `qutip.metrics` module by adding a new distance b/w quantum states: the quantum Hellinger distance (QHD), implemented as new function `qutip.metrics.hellinger_dist()`. Excellent description is provided for example in:; _Geometric measures of quantum correlations with Bures and Hellinger distances_, D. Spehner, F. Illuminati, M. Orszag, W. Roga, https://arxiv.org/abs/1611.03449. Albeit a bit less popular than already implemented Bures and trace distances, the QHD is actively studied, eg:; https://arxiv.org/abs/1903.10455; https://arxiv.org/abs/1806.10814; https://arxiv.org/abs/1510.06995. The PR contains tests of properties of the QHD as outlined in arXiv:1611.03449. I am of course keen on performing additional tests, code refactoring, documentation of this feature etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998:729,perform,performing,729,https://qutip.org,https://github.com/qutip/qutip/pull/998,1,['perform'],['performing']
Performance,"This class allows counts and timings (and general messages) to be collected about solver performance.; These can then be reported at the end.; I could not see anything similar already in qutip. I hope I have not duplicated effort. I have been outputting some counts and timings in hsolve in order to look for efficiency improvements. They are a bit untidy at the moment, so I wanted a more tidy way to achieve the same. . Hopefully this can be used in other solvers too. I intend to make the control stats subclass from this at some point.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/454:89,perform,performance,89,https://qutip.org,https://github.com/qutip/qutip/pull/454,1,['perform'],['performance']
Performance,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1471:598,load,loading,598,https://qutip.org,https://github.com/qutip/qutip/pull/1471,1,['load'],['loading']
Performance,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1431:350,load,load,350,https://qutip.org,https://github.com/qutip/qutip/issues/1431,1,['load'],['load']
Performance,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:622,cache,cached,622,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['cache'],['cached']
Performance,"This is post for discussion over whether it might be beneficial to consider additional continuous integration (CI) tools for QuTiP, beyond Travis CI. . Some open-source projects use multiple CI tools, possibly to do different tasks and test different configurations. For example by adding QuTiP to the list of projects using Sphinx for the documentation I noticed they use concurrently Travis CI, CircleCI and [Appveyor](https://github.com/marketplace/appveyor). . [Stackshare](https://stackshare.io/stackups/circleci-vs-jenkins-vs-travis-ci) allows to compare multiple developers tools.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959:373,concurren,concurrently,373,https://qutip.org,https://github.com/qutip/qutip/issues/959,1,['concurren'],['concurrently']
Performance,"This may seem like a pedantic change, but is does (very slightly) improve performance in hsolve, and also avoids addressing an array index as a non-integer. Seems to make sense for the state numbers to be integers anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/446:74,perform,performance,74,https://qutip.org,https://github.com/qutip/qutip/pull/446,1,['perform'],['performance']
Performance,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:261,concurren,concurrent,261,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['concurren'],['concurrent']
Performance,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:634,perform,perform,634,https://qutip.org,https://github.com/qutip/qutip/pull/1362,1,['perform'],['perform']
Performance,"To generate a random ket and have it be in the tensor product space of 3 qubits I would use. ket = qutip.rand_ket(8, dims=[[2, 2, 2], [1, 1, 1]]); so to have the `dims` form I would get by actually taking the tensor product of three 1-qubit kets.; However this will fail due to the check performed of [L652](https://github.com/qutip/qutip/blob/master/qutip/random_objects.py#L652) of `random_objects.py`:. if not isinstance(dims, list) or isinstance(dims[0], list):; Did I understood wrong how the `dims` parameter of `rand_ket` is supposed to work? or is there a simple typo in the above line and it was instead supposed to be something like:. if not (isinstance(dims, list) or isinstance(dims[0], list)):; ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/617:288,perform,performed,288,https://qutip.org,https://github.com/qutip/qutip/issues/617,1,['perform'],['performed']
Performance,Use of iteritems removed in apply_params to make compatible with Python3; fixes #367 ; Also some changes to the way max_metric_corr and accuracy_factor method_params are applied in the optimizer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/372:185,optimiz,optimizer,185,https://qutip.org,https://github.com/qutip/qutip/pull/372,1,['optimiz'],['optimizer']
Performance,"WIP: Qobj cleanups, optimization and improvements.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/95:20,optimiz,optimization,20,https://qutip.org,https://github.com/qutip/qutip/pull/95,1,['optimiz'],['optimization']
Performance,_init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dump.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimconfig.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/symplectic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/stats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/termcond.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimizer.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/errors.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/propcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/grape.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulsegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/tslotcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/loadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:10121,load,loadparams,10121,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['load'],['loadparams']
Performance,"_level); 190 setup_args=sargs,; 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def build_extensions(self):. F:\Anaconda3\lib\distutils\command\build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. F:\Anaconda3\lib\distutils\command\build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. F:\Anaconda3\lib\distutils\_msvccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 302 ; 30",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:7166,optimiz,optimization,7166,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['optimiz'],['optimization']
Performance,"_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); H = Hrot(coef=coef*Omega0,tlist=tlist); result = qutip.mesolve(H,psi0,tlist=tlist); print(f""{wavedata_name}"",np.abs(psi0.dag()@result.final_state)**2); ```. ```; index92 1.9513183436107076e-10; index93 0.49999366030208936; index94 1.0264492246902099e-13; ```. I would appreciate any insights into the potential causes of these errors and guidance on how to prevent such issues in future simulations. Additional Information:; scipy version: 1.13.0; python version: 3.12.2; qutip version: 5.0.1; numpy version: 1.26.4; Operating system: macOS 15.1. The files with the preselected coefficients and tlist are provided for reproducibility.; [index92_coef.txt](https://github.com/user-attachments/files/17613505/index92_coef.txt); [index92_tlist.txt](https://github.com/user-attachments/files/17613506/index92_tlist.txt); [index93_coef.txt](https://github.com/user-attachments/files/17613507/index93_coef.txt); [index93_tlist.txt](https://github.com/user-attachments",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:2342,load,loadtxt,2342,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['load'],['loadtxt']
Performance,"` vs `v5.0` with iterative scipy solvers, especially while using `use_rcm=True`. After spending some time, I believe the main key difference between both versions comes from permutation done in the `_permute_rcm`, where indices are permuted with the indices obtained from the `reverse_cuthill_mckee` function, and this prevents us from getting the preconditioner efficiently. In `v5.0`, for permuting, we use `_data.permute.indices` for the Liouvillian matrix `L`. This gives us different results from what we used in `v4.7`, i.e.,`sp_permute` with the same permuting indices. . As per my understanding, `_data.permute.indices` performs somewhat the following - ; ``` py; A = L.copy(); A.indices = perm.take(A.indices); A = A.tocsc(A); A.indices = perm.take(A.indices); ```; where, we previously, the following was being done; ``` py; L[perm[:,None], perm]; ```; with `perm` are obtained from `reverse_cuthill_mckee`. . I am not sure which behavior is the correct one, but the performance degradation is quite a lot (more than 10x) and prevents reaching sufficient enough tolerance. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import (about, destroy, qeye, steadystate, tensor). # Paramaeters; # -----------; Nc, Nm = 4, 30; E, kappa = 0.1, 0.3; gamma, delta = 3e-4, -0.43. # Operators; # ----------; a = tensor(destroy(Nc), qeye(Nm)); b = tensor(qeye(Nc), destroy(Nm)). # Hamiltonian; # ------------; H = -delta * (a.dag() * a) + (b.dag() * b) + 2.4 * kappa * (b.dag() + b) * (a.dag() * a) + E * (a.dag() + a). # Collapse operators; # -------------------; cc = np.sqrt(kappa) * a; cm = np.sqrt(2 * gamma) * b; cp = np.sqrt(gamma) * b.dag(); c_ops = [cc, cm, cp]. precond_options = {'permc_spec': 'NATURAL', 'diag_pivot_thresh': 0.1, 'fill_factor': 100, 'options': {'ILU_MILU': 'smilu_2'}}; solver_options = {""use_precond"": False, ""atol"": 1e-10, **precond_options}. rho_ss = steadystate(H, c_ops, method=""direct"", solver=""gmres"", use_rcm=True, **solver_options); ```. ### C",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2443:1121,perform,performance,1121,https://qutip.org,https://github.com/qutip/qutip/issues/2443,1,['perform'],['performance']
Performance,"```python; from qutip import *; import numpy as np; from numpy import*; from math import*; from random import*; from scipy.optimize import*; from scipy import optimize; from scipy.optimize import minimize_scalar; import random ; ket0=basis(2,0); ket1=basis(2,1); ket00=tensor(ket0,ket0);ket01=tensor(ket0,ket1);ket10=tensor(ket1,ket0);ket11=tensor(ket1,ket1);; angle = np.linspace(0.0, 2 * np.pi, 100); def B1(x):; b1=(cos(x[0]/2)**2+ x[3]**2*sin(x[0]/2)**2)*ket0*ket0.dag()+(1j*(x[1]-1j*x[2])*sin(x[0]/2)*(cos(x[0]/2)-1j*x[3]*sin(x[0]/2)))*ket0*ket1.dag(); -(1j*(x[1]+1j*x[2])*sin(x[0]/2)*(cos(x[0]/2)+1j*x[3]*sin(x[0]/2)))*ket1*ket0.dag()+((x[1]**2+ x[2]**2)*sin(x[0]/2)**2)*ket1*ket1.dag(); return b1. def B2(x):; b2=(cos(x[0]/2)**2+ x[3]**2*sin(x[0]/2)**2)*ket1*ket1.dag()-(1j*(x[1]-1j*x[2])*sin(x[0]/2)*(cos(x[0]/2)-1j*x[3]*sin(x[0]/2)))*ket0*ket1.dag(); +(1j*(x[1]+1j*x[2])*sin(x[0]/2)*(cos(x[0]/2)+1j*x[3]*sin(x[0]/2)))*ket1*ket0.dag()+((x[1]**2+ x[2]**2)*sin(x[0]/2)**2)*ket0*ket0.dag(); return b2. rho=0.25*ket00*ket00.dag()+0.25*ket00*ket11.dag()+0.25*ket01*ket01.dag()+0.25*ket01*ket10.dag()+0.25*ket10*ket01.dag()+0.25*ket10*ket10.dag()+0.25*ket11*ket00.dag()+0.25*ket11*ket11.dag(). def P1(x):; p1=1/(tensor(qeye(2),B1(x))).tr()*tensor(qeye(2),B1(x))*rho*tensor(qeye(2),B1(x)); return p1. def P2(x):; p2=1/(tensor(qeye(2),B2(x))).tr()*tensor(qeye(2),B2(x))*rho*tensor(qeye(2),B2(x)); return p2. def S(x):; p1=1/(tensor(qeye(2),B1(x))).tr()*tensor(qeye(2),B1(x))*rho*tensor(qeye(2),B1(x)); p2=1/(tensor(qeye(2),B2(x))).tr()*tensor(qeye(2),B2(x))*rho*tensor(qeye(2),B2(x)); s=1/(tensor(qeye(2),B1(x))).tr()*entropy_vn(p1)+1/(tensor(qeye(2),B2(x))).tr()*entropy_vn(p2); return s; list3=[];list4=[];list5=[];. for i in range(100):; t=uniform(0,1); y=uniform(0,1); z=uniform(0,1); if t**2+y**2+z**2==1:; continue; list3.append(t); list4.append(y); list5.append(z); #print(t,y,z); for x in zip(angle,list3,list4,list5):; x0=[0,0,0,0]; res = minimize(S,x0, method='Nelder-Mead',options={'xtol': ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1111:123,optimiz,optimize,123,https://qutip.org,https://github.com/qutip/qutip/issues/1111,3,['optimiz'],['optimize']
Performance,"a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product structure. Some of this is because QuTiP allows us to construct objects which do not have a really rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is it a bra? [no]; 3. is it a super-operator? [no]; 4. if here, it must be an operator. Such objects do have a use. Let's say we have a system with two computational qubits and one ancillary qubit, we've performed a calculation on it and ended up in some state `|x> = |a>.|b>.|c>`, and we want to extract the computational subspace when the ancilla bit is projected onto `|0>`. We can do this in a mathematically rigourous way with; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).proj()); >>> (projector * x).ptrace([0, 1]); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; ...; ```; which will always return a density matrix. Alternatively, we can instead define the operator (note `proj()` to create `|g><g|` has become `dag()` to simply make `<g|`) as; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).dag()); >>> projector * x; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; ...; ```; which gets us what we wanted. This is not necessarily _common_, but it is useful in some circumstances. ## Other problem discussions. There have been some cases of complaint about the han",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:4556,perform,performed,4556,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['perform'],['performed']
Performance,additional arguments added to load_parameters so that a general object attributes can be loaded from a configuration file. For a example a custom fidelity computer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/403:89,load,loaded,89,https://qutip.org,https://github.com/qutip/qutip/pull/403,1,['load'],['loaded']
Performance,"approx_grad attribute added to the Optimizer object that forces the; optimisation method to use the gradient approximation; (rather than any exact method). The motivation for this is to allow adding of custom fidelities that do not have an exact gradient formula.; As an aside: The CRAB algorithm already used these approximate gradient methods, and is most likely to be faster with these custom fidelities",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/342:35,Optimiz,Optimizer,35,https://qutip.org,https://github.com/qutip/qutip/pull/342,1,['Optimiz'],['Optimizer']
Performance,"are only provided for Python; 3.8 and 3.9 on Windows, all other wheels are 64 bits on account of; Ubuntu, Fedora, and other Linux distributions dropping 32 bit support.; All 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix; the occasional problems encountered by folks using truly huge arrays.</p>; <h2>Expired deprecations</h2>; <h3>Deprecated numeric style dtype strings have been removed</h3>; <p>Using the strings <code>&quot;Bytes0&quot;</code>, <code>&quot;Datetime64&quot;</code>, <code>&quot;Str0&quot;</code>, <code>&quot;Uint32&quot;</code>,; and <code>&quot;Uint64&quot;</code> as a dtype will now raise a <code>TypeError</code>.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19539"">gh-19539</a>)</p>; <h3>Expired deprecations for <code>loads</code>, <code>ndfromtxt</code>, and <code>mafromtxt</code> in npyio</h3>; <p><code>numpy.loads</code> was deprecated in v1.15, with the recommendation that; users use <code>pickle.loads</code> instead. <code>ndfromtxt</code> and <code>mafromtxt</code> were both; deprecated in v1.17 - users should use <code>numpy.genfromtxt</code> instead with; the appropriate value for the <code>usemask</code> parameter.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19615"">gh-19615</a>)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/4adc87dff15a247e417d50f10cc4def8e1c17a03""><code>4adc87d</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/20685"">#20685</a> from charris/prepare-for-1.22.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/fd66547557f57c430d41be2fc0764f74a62e8ccf""><code>fd66547</code></a> REL: Prepare for the NumPy 1.22.0 release.</li>; <li><a href=""https://github.com/numpy/numpy/commit/125304b035effcd82e366e601b102e7347eaa9ba""><code>125304b</code></a> wip</li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:2526,load,loads,2526,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['load'],['loads']
Performance,"ator to annihilation/creation operator formalism.; However, when comparing with the Lindblad-Master equation based simulation, the outcome is quantitatively quite different. ![Figure 2023-02-18 142921](https://user-images.githubusercontent.com/47425237/219868478-8210e6d6-155a-4587-9afd-0b0ec505fc09.png). It seems that the function ""floquet_master_equation_rates"" might be an issue, but I do not know how to fix this problem. Any help is appreciated!; Thank you very much!!. QuTiP: Quantum Toolbox in Python; ================================; QuTiP Version: 4.7.0; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.32; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64). ```; from qutip import *; import matplotlib.pyplot as plt; import numpy as np; from IPython.display import Image; import math. from scipy.optimize import least_squares; from scipy.optimize import curve_fit. from Ham_tools import Ham_tools; ###--------------------physical constants-----------------------; hbar = 1.055*10**(-28) ##(*[J µs]*); ###-------------------waste mode--------------------------; ww = 2* np.pi* 7.609* 10**3 #(*[MHz] waste mode cavity frequency*); gdw = 2* np.pi* 16.6 #12 #(*[MHz]external decay rate of waste mode*). ###definitions; def J_cb(omega):; """""" Noise spectral density """"""; #print ""evaluate J_cb for omega ="", omega; return 0.5 * gdw /(2*np.pi) # 2*gdw/(np.pi**2). def cos_drv(t, args):; return np.cos(wd*t); ###=========================================================================================================; ###Set the dimensions of the Hilbert space of each participating quantum system; ###=========================================================================================================; ### resonator; d1 = 3; ### create ""annihilation operator; aw = destroy(d1). #%%=======================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2097:1660,optimiz,optimize,1660,https://qutip.org,https://github.com/qutip/qutip/issues/2097,1,['optimiz'],['optimize']
Performance,"ax_step = 1; qset.save(); print(Options().atol); >>> 1e-10; ```; `atol = 1e-10` and `max_step = 1` will be kept as default in future sessions. `qset.options.reset` to go back to qutip's default. I believe that loading custom settings when importing qutip will be appreciated with support of both `dense` and `sparse` most researchers will have a preference depending on their domain. This also brings all settings in one place: `qutip.settings...` even if we split the code in ""core"", ""solver"", ""qip?"", etc. Lastly, creating and moving around an `Options` object is no longer needed, changing the default before using the solver has the same effect. . For developers:; Principally @jakelishman as I expect you to add settings for core. ; I went with an implementation similar to python `dataclass`. To add `core`'s settings to `qutip.settings` you would do ""; ```; from qutip.settings import QtOptionClass. @QtOptionClass(""core""); class CoreOptions:; basetype = ""Dense""; auto_tidyup = True; ...; ```; And it would create the `__init__`, `__repr__`, `save`, `load` and `reset` methods, and create the default instance as `qutip.settings.core`. All attributes that do not start with ""_"" and are one of `bool`, `str`, `int`, `float`, `complex` will be in tagged to be saved and loaded. Those are the only types available now, but other can be added if needed. In `__init__` all these + properties with a setter can be initiated as keyword arguments. '__repr__' 'print' all the saved attributes and properties.; This is for the likes of `has_openmp`, I would make it a read only property. Another way of doing this would have been to use a parent class and a ""register"" functions. I went with this one because the signature of `__init__` in help was cleaner. I have both implemented so if qip of control want to use the base without registering to `qutip.settings`, I can change the PR. (@ajgpitch, @BoxiLi ). Build on top of #1289. . **Changelog**; Solver options can be set in `qutip.settings.options`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1297:1470,load,load,1470,https://qutip.org,https://github.com/qutip/qutip/pull/1297,2,['load'],"['load', 'loaded']"
Performance,"but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1476,cache,cached,1476,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""'; __file__='""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-install-69anjthq/qutip/pip-egg-info; cwd: /tmp/pip-install-69anjthq/qutip/; Complete output (5 lines):; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-install-69anjthq/qutip/setup.py"", line 52, in <module>; from Cython.Build import cythonize; ModuleNotFoundError: No module named 'Cython'; ----------------------------------------; ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output. ** Installing cython fixes it **. jevon@bb8:~$ pip3 install cython; Collecting cython; Downloading Cython-0.29.17-cp38-cp38-manylinux1_x86_64.whl (2.0 MB); |████████████████████████████████| 2.0 MB 721 kB/s ; Installing collected packages: cython; Successfully installed cython-0.29.17; jevon@bb8:~$ pip3 install qutip; Collecting qutip; Using cached qutip-4.5.0.tar.gz (3.5 MB); Requirement already satisfied: cython>=0.21 in ./.local/lib/python3.8/site-packages (from qutip) (0.29.17); Requirement already satisfied: numpy>=1.12 in ./.local/lib/python3.8/site-packages (from qutip) (1.18.3); Requirement already satisfied: scipy>=1.0 in ./.local/lib/python3.8/site-packages (from qutip) (1.4.1); Building wheels for collected packages: qutip; Building wheel for qutip (setup.py) ... done; Created wheel for qutip: filename=qutip-4.5.0-cp38-cp38-linux_x86_64.whl size=17905114 sha256=3f461cbc07b40c0de96b709ea20bca495c7ffe1b6060a533a1ab733107c161ab; Stored in directory: /home/jevon/.cache/pip/wheels/3a/4d/bf/1c8e9f7874f26a6510d78790d3ba518c98e674e5771110fe1e; Successfully built qutip; Installing collected packages: qutip; Successfully installed qutip-4.5.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1246:1655,cache,cached,1655,https://qutip.org,https://github.com/qutip/qutip/issues/1246,2,['cache'],"['cache', 'cached']"
Performance,"chi * (a.dag() * a * P_se) + chi * (b.dag() * b * P_ze) + chi * (c.dag() * c * P_te) + chi * (d.dag() * d * P_qe). row = np.array([1,1,2,2,3,3,3,3,4,4,4,4,5,5,6,6]); column = np.array([3,4,3,4,1,2,5,6,1,2,5,6,3,4,3,4]); data = np.array([-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1]). mapped=csr_matrix((data,(row,column)),shape=(N**4*2*2*2*2,N**4*2*2*2*2)); mapped=Qobj(mapped). n_ctrls=4 # Controls; ctrls = [sm.dag()*a+sm*a.dag()+sm.dag()*b+sm*b.dag()+zm.dag()*b+zm*b.dag()+zm.dag()*c+zm*c.dag()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:3199,optimiz,optimization,3199,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimization']
Performance,"cipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3917,cache,cached,3917,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"cipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2857,cache,cached,2857,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,concurrence measure does not work for density matrices,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058:0,concurren,concurrence,0,https://qutip.org,https://github.com/qutip/qutip/issues/2058,1,['concurren'],['concurrence']
Performance,"ction calls between Python and C space, which largely affected small objects. The full aim, however, is to have QuTiP 5 support many different data representations as the backing of `Qobj`, and use the most suitable representation for the given data. This will not require every single QuTiP function to have an exponential number of versions for every possible combination of inputs, but only to have specialisations for the most common data combinations. This concept is the ""data layer"". All code examples in this PR are prefixed with. ```python; >>> from qutip.core import data; ```. ## Specification. The core to achieving this is fast, fully specified inter-conversion between all known data types, and efficient multiple-dispatch for mathematical operations. There are then four principle components of the data-layer:. 1. a creation routine which returns an appropriate data-layer type given some arbitrary Python object (`data.create`); 2. a routine which can perform the conversion from any data-layer type to any other data-layer type (`data.to`); 3. completely specialised mathematical operations (e.g. `data.add_csr_dense_dense(CSR, Dense) -> Dense`); 4. an object which provides multiple dispatch operations on its input arguments to use an exact specialisation (defined in item 3) if known, or uses the conversion routine (item 2) to convert the inputs into ones matching a specialisation if not: `data.Dispatcher`. The exported mathematical functions will all be instances of this type. The minimum work needed to define a new data-layer type is to provide `data.to` with two conversion functions; one into the new type from a current data-layer type, and one which converts the new type _into_ a current data-layer type. Once this is done, every single QuTiP component will be able to use the new data-layer type, although until specialisations are given which use it, it will always be achieved by conversion to another type, and conversion back. In this way, a new type can be added",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:1436,perform,perform,1436,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['perform'],['perform']
Performance,"cuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5019,cache,cache,5019,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,"d build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Build",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1324,cache,cached,1324,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"d scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/mul.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4317,cache,cached,4317,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"d scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-70.0.0 wheel-0.43.0; Installing build dependencies ... done",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3257,cache,cached,3257,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"d support for reading DX10 BC4 DDS images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7603"">#7603</a> [<a href=""https://github.com/sambvfx""><code>@​sambvfx</code></a>]</li>; <li>Optimized ImageStat.Stat.count <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7599"">#7599</a> [<a href=""https://github.com/florath""><code>@​florath</code></a>]</li>; <li>Moved error from truetype() to FreeTypeFont <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7587"">#7587</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Correct PDF palette size when saving <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7555"">#7555</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed closing file pointer with olefile 0.47 <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7594"">#7594</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>ruff: Minor optimizations of list comprehensions, x in set, etc. <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7524"">#7524</a> [<a href=""https://github.com/cclauss""><code>@​cclauss</code></a>]</li>; <li>Build Windows wheels using cibuildwheel <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7580"">#7580</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Raise ValueError when TrueType font size is zero or less <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7584"">#7584</a> [<a href=""https://github.com/akx""><code>@​akx</code></a>]</li>; <li>Install cibuildwheel from requirements file <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7581"">#7581</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:8813,optimiz,optimizations,8813,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['optimiz'],['optimizations']
Performance,"dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x8",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2402,cache,cached,2402,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"e complex128. Here, `m_ops` is a list with `len(m_ops) = 27` and every `m_ops[i]` is a quantum object of shape. In [91]: m_ops[1].shape; Out[91]: (1048576, 1048576). Ok, I can see that I am trying to convert a QuTiP object into a numpy array but this object is so big that I have a memory issue. My question is simple: is there any way to overcome this issue? can I 'cut' the object in smaller pieces to convert it and then put the ""pieces back together""?. I really have no idea. Maybe I am not doing in the optimal way but I was working with really smaller matrix until this one and I didn't foresaw this problem. Any help or reference will be highly appreciated. This is really important for me. ----------------------------------------------------------------. EDIT with the full code:. """""".""""""; import numpy as np; import tensorflow as tf; from qutip import tensor; from qutip import sigmax, sigmaz, sigmay; from qutip import coherent, coherent_dm, expect, Qobj, fidelity, hinton; from tqdm.auto import tqdm. #%load_ext autoreload; tf.keras.backend.set_floatx('float64') # Set float64 as the default. # Local paths:; local_path = ""0_qst_master/cgan_tf_20qb/%s""; data_path = ""0_qst_master/cgan_tf_20qb/data/%s"". # Reading projectors; projs_settings = np.loadtxt(data_path % 'measurement_settings.txt', dtype=str). X = sigmax(); Y = sigmay(); Z = sigmaz(). m_ops = [] # measurement operators. def string_to_operator(basis): ; mat_real = []; ; for j in range(len(basis)):; if basis[j] == 'X':; mat_real.append(X) ; if basis[j] =='Y':; mat_real.append(Y) ; if basis[j] =='-Y':; mat_real.append(-Y) ; if basis[j] == 'Z':; mat_real.append(Z) ; return mat_real. for i in range(27):; U = string_to_operator(projs_settings[i]); U = tensor(U); m_ops.append(U). ops_numpy = [op.full() for op in m_ops] # convert the QuTiP Qobj to numpy arrays. Another EDIT:. The `measurement_settings.txt` is a .txt file with the following:. [![enter image description here][1]][1]. [1]: https://i.stack.imgur.com/YtF6j.png",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2176:1606,load,loadtxt,1606,https://qutip.org,https://github.com/qutip/qutip/issues/2176,1,['load'],['loadtxt']
Performance,"e systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel ex",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1256,load,load,1256,https://qutip.org,https://github.com/qutip/qutip/pull/2395,2,"['load', 'perform']","['load', 'performance']"
Performance,"e/releasenotes/10.2.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/10.2.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Add <code>keep_rgb</code> option when saving JPEG to prevent conversion of RGB colorspace <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7553"">#7553</a> [<a href=""https://github.com/bgilbert""><code>@​bgilbert</code></a>]</li>; <li>Trim negative glyph offsets in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7672"">#7672</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Removed unnecessary &quot;pragma: no cover&quot; <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7668"">#7668</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Trim glyph size in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7669"">#7669</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix loading IPTC images and update test <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7667"">#7667</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Allow uncompressed TIFF images to be saved in chunks <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7650"">#7650</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Concatenate multiple JPEG EXIF markers <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7496"">#7496</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Changed IPTC tile tuple to match other plugins <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7661"">#7661</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not assign new fp attribute when exiting context manager <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7566"">#7566</a> [<a href=""https://github.com/radarhere""><code>@​",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:1317,load,loading,1317,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['load'],['loading']
Performance,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:3270,perform,perform,3270,https://qutip.org,https://github.com/qutip/qutip/pull/1405,1,['perform'],['perform']
Performance,"ef=""https://redirect.github.com/python-pillow/Pillow/issues/7619"">#7619</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Import plugins relative to the module <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7576"">#7576</a> [<a href=""https://github.com/deliangyang""><code>@​deliangyang</code></a>]</li>; <li>Translate encoder error codes to strings; deprecate <code>ImageFile.raise_oserror()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7609"">#7609</a> [<a href=""https://github.com/bgilbert""><code>@​bgilbert</code></a>]</li>; <li>Updated readthedocs to latest version of Python <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7611"">#7611</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support reading BC4U and DX10 BC1 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6486"">#6486</a> [<a href=""https://github.com/REDxEYE""><code>@​REDxEYE</code></a>]</li>; <li>Optimize ImageStat.Stat.extrema <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7593"">#7593</a> [<a href=""https://github.com/florath""><code>@​florath</code></a>]</li>; <li>Handle pathlib.Path in FreeTypeFont <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7578"">#7578</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use list comprehensions to create transformed lists <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7597"">#7597</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Added support for reading DX10 BC4 DDS images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7603"">#7603</a> [<a href=""https://github.com/sambvfx""><code>@​sambvfx</code></a>]</li>; <li>Optimized ImageStat.Stat.count <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7599"">#7599</a> [<a href=""https://github.com/florath""><code>@​florath</code></a>]</li>; <li>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:7208,Optimiz,Optimize,7208,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['Optimiz'],['Optimize']
Performance,"em PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5401,cache,cache,5401,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,"ery test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning fi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1694,concurren,concurrent,1694,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['concurren'],['concurrent']
Performance,"es in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits. I'm still learning good workflow for this type of feature branch. Will use rebasing more in the future. Let me know if you have any questions about the implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1522,perform,performance,1522,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['perform'],['performance']
Performance,"es</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>10.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/10.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/10.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>CVE-2024-28219: Use strncpy to avoid buffer overflow <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7928"">#7928</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use <code>functools.lru_cache</code> for <code>hopper()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7912"">#7912</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Raise ValueError if seeking to greater than offset-sized integer in TIFF <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7883"">#7883</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improve speed of loading QOI images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7925"">#7925</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added RGB to I;16N conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7920"">#7920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add --report argument to <strong>main</strong>.py to omit supported formats <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7818"">#7818</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Added RGB to I;16, I;16L and I;16B conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7918"">#7918</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix editable installation with custom build backend and configuration options <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7658"">#7658</a> [<a href=""https://g",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:1125,load,loading,1125,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['load'],['loading']
Performance,"est_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3816,cache,cached,3816,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"est_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2756,cache,cached,2756,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"for clarity.; <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/e7a6fb3e-c9e8-4cf9-96ba-aefaf7e9a554"">; </div>. To make the problem clearer, I simplified the simulation model. The Hamiltonian used is:. $$ H_{\rm rot} = {\rm Re}[\Omega(t)]\frac{\sigma_x}{2} + {\rm Im}[\Omega(t)]\frac{\sigma_y}{2} $$. where $\Omega(t)$ is a time-dependent coefficient. The tlist and coefficients are both numpy arrays. Providing the entire code that generates these coefficients would be lengthy, so I preselected a few sets of coefficients and tlist where the issue is present. Specifically, the problematic data is from indices 92, 93, and 94, which have been highlighted in the plot. These are stored using np.savetxt. Below is the plot of the coefficients, showing that they are mainly real and differ only slightly. ```; plt.figure(); ax0 = plt.subplot(221); ax1 = plt.subplot(222). for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:1264,load,loadtxt,1264,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['load'],['loadtxt']
Performance,"g()+tm.dag()*c+tm*c.dag()+tm.dag()*d+tm*d.dag()+qm.dag()*d+qm*d.dag()+qm.dag()*a+qm*a.dag(),1j*(sm.dag()*a-sm*a.dag())+1j*(sm.dag()*b-sm*b.dag())+1j*(zm.dag()*b-zm*b.dag())+1j*(zm.dag()*c-zm*c.dag())+1j*(tm.dag()*c-tm*c.dag())+1j*(tm.dag()*d-tm*d.dag())+1j*(qm.dag()*d-qm*d.dag())+1j*(qm.dag()*a-qm*a.dag()),sm+sm.dag()+zm+zm.dag()+tm+tm.dag()+qm+qm.dag(), 1j*(sm-sm.dag())+1j*(zm-zm.dag())+1j*(tm-tm.dag())+1j*(qm-qm.dag())]. # Set optimization parameters; U_0=tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)) # Initial gate; U_targ=mapped # Target gates. # Run the optimization. result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:3725,optimiz,optimized,3725,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimized']
Performance,"g. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Also, the last outcomes have some overlap with the last project. Although I also find this circuit importation very important, I guess two projects should not have overlap if they are both selected.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:2205,perform,perform,2205,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['perform'],['perform']
Performance,"gcc 4.4 does not support the `-flto` option for link time optimization. This is still a common compiler because it is the system gcc in centos 6 and redhat enterprise 6. In this pull request I've removed that option. Users who need this could set the CCFLAGS environment variable to customize the compiler flags. Alternatively, we could add options to `setup.py` to enable or disable link time optimization. I've also added additional rows to the travis build matrix to test building with gcc 4.4 and clang. In its current form this adds 4 additional rows to the build matrix (2 additional compilers, each tested with python 2.7 and 3.4). Let me know if you think this is excessive. It's possible to add just one python version for gcc 4.4 and clang.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318:58,optimiz,optimization,58,https://qutip.org,https://github.com/qutip/qutip/pull/318,2,['optimiz'],['optimization']
Performance,"gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:2038,cache,cached,2038,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"hanged is replacing the Pauli operator to annihilation/creation operator formalism.; However, when comparing with the Lindblad-Master equation based simulation, the outcome is quantitatively quite different. ![Figure 2023-02-18 142921](https://user-images.githubusercontent.com/47425237/219868478-8210e6d6-155a-4587-9afd-0b0ec505fc09.png). It seems that the function ""floquet_master_equation_rates"" might be an issue, but I do not know how to fix this problem. Any help is appreciated!; Thank you very much!!. QuTiP: Quantum Toolbox in Python; ================================; QuTiP Version: 4.7.0; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.32; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64). ```; from qutip import *; import matplotlib.pyplot as plt; import numpy as np; from IPython.display import Image; import math. from scipy.optimize import least_squares; from scipy.optimize import curve_fit. from Ham_tools import Ham_tools; ###--------------------physical constants-----------------------; hbar = 1.055*10**(-28) ##(*[J µs]*); ###-------------------waste mode--------------------------; ww = 2* np.pi* 7.609* 10**3 #(*[MHz] waste mode cavity frequency*); gdw = 2* np.pi* 16.6 #12 #(*[MHz]external decay rate of waste mode*). ###definitions; def J_cb(omega):; """""" Noise spectral density """"""; #print ""evaluate J_cb for omega ="", omega; return 0.5 * gdw /(2*np.pi) # 2*gdw/(np.pi**2). def cos_drv(t, args):; return np.cos(wd*t); ###=========================================================================================================; ###Set the dimensions of the Hilbert space of each participating quantum system; ###=========================================================================================================; ### resonator; d1 = 3; ### create ""annihilation operator; aw = destroy(d1). #%%=====================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2097:1618,optimiz,optimize,1618,https://qutip.org,https://github.com/qutip/qutip/issues/2097,1,['optimiz'],['optimize']
Performance,"hi,; i think there was a bug in the computation of gradients for unitary problems. im not sure if i tracked them down correctly, but the gradients seem to be more consistent now. this can be checked with the following code after initialization of an Optimizer object `optim`. ``` python; from scipy.optimize import check_grad; func = optim.fid_err_func_wrapper; grad = optim.fid_err_grad_wrapper; x0 = optim.dynamics.ctrl_amps.flatten(); check_grad(func, grad, x0); ```. also, im new to github and im not sure if im doing this correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/325:250,Optimiz,Optimizer,250,https://qutip.org,https://github.com/qutip/qutip/pull/325,2,"['Optimiz', 'optimiz']","['Optimizer', 'optimize']"
Performance,"hon3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Boar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5309,cache,cache,5309,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,"https://github.com/user-attachments/assets/e7a6fb3e-c9e8-4cf9-96ba-aefaf7e9a554"">; </div>. To make the problem clearer, I simplified the simulation model. The Hamiltonian used is:. $$ H_{\rm rot} = {\rm Re}[\Omega(t)]\frac{\sigma_x}{2} + {\rm Im}[\Omega(t)]\frac{\sigma_y}{2} $$. where $\Omega(t)$ is a time-dependent coefficient. The tlist and coefficients are both numpy arrays. Providing the entire code that generates these coefficients would be lengthy, so I preselected a few sets of coefficients and tlist where the issue is present. Specifically, the problematic data is from indices 92, 93, and 94, which have been highlighted in the plot. These are stored using np.savetxt. Below is the plot of the coefficients, showing that they are mainly real and differ only slightly. ```; plt.figure(); ax0 = plt.subplot(221); ax1 = plt.subplot(222). for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:1333,load,loadtxt,1333,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['load'],['loadtxt']
Performance,"https://redirect.github.com/python-pillow/Pillow/issues/7888"">#7888</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support FITS images with GZIP_1 compression <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7894"">#7894</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use I;16 mode for 9-bit JPEG 2000 images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7900"">#7900</a> [<a href=""https://github.com/scaramallion""><code>@​scaramallion</code></a>]</li>; <li>Raise ValueError if kmeans is negative <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7891"">#7891</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove TIFF tag OSUBFILETYPE when saving using libtiff <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7893"">#7893</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Raise ValueError for negative values when loading P1-P3 PPM images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7882"">#7882</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added reading of JPEG2000 palettes <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7870"">#7870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added alpha_quality argument when saving WebP images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7872"">#7872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed joined corners for ImageDraw rounded_rectangle() non-integer dimensions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7881"">#7881</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed Python and NumPy pinning on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7880"">#7880</a> [<a href=""https://",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:3648,load,loading,3648,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['load'],['loading']
Performance,"illow/issues/7706"">#7706</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use subprocess with CREATE_NO_WINDOW flag in ImageShow WindowsViewer <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7791"">#7791</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving GIF frame that restores to background color, do not fill identical pixels <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7788"">#7788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed reading PNG iCCP compression method <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7823"">#7823</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow writing IFDRational to UNDEFINED tag <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7840"">#7840</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix logged tag name when loading Exif data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7842"">#7842</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use maximum frame size in IHDR chunk when saving APNG images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7821"">#7821</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Prevent opening P TGA images without a palette <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7797"">#7797</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use palette when loading ICO images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7798"">#7798</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use consistent arguments for load_read and load_seek <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7713"">#7713</a> [<a href=""https://github.com/radarhere""><c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:6222,load,loading,6222,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['load'],['loading']
Performance,"in this release are 3.8-3.10, Python 3.7; has been dropped. Note that 32 bit wheels are only provided for Python; 3.8 and 3.9 on Windows, all other wheels are 64 bits on account of; Ubuntu, Fedora, and other Linux distributions dropping 32 bit support.; All 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix; the occasional problems encountered by folks using truly huge arrays.</p>; <h2>Expired deprecations</h2>; <h3>Deprecated numeric style dtype strings have been removed</h3>; <p>Using the strings <code>&quot;Bytes0&quot;</code>, <code>&quot;Datetime64&quot;</code>, <code>&quot;Str0&quot;</code>, <code>&quot;Uint32&quot;</code>,; and <code>&quot;Uint64&quot;</code> as a dtype will now raise a <code>TypeError</code>.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19539"">gh-19539</a>)</p>; <h3>Expired deprecations for <code>loads</code>, <code>ndfromtxt</code>, and <code>mafromtxt</code> in npyio</h3>; <p><code>numpy.loads</code> was deprecated in v1.15, with the recommendation that; users use <code>pickle.loads</code> instead. <code>ndfromtxt</code> and <code>mafromtxt</code> were both; deprecated in v1.17 - users should use <code>numpy.genfromtxt</code> instead with; the appropriate value for the <code>usemask</code> parameter.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19615"">gh-19615</a>)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/4adc87dff15a247e417d50f10cc4def8e1c17a03""><code>4adc87d</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/20685"">#20685</a> from charris/prepare-for-1.22.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/fd66547557f57c430d41be2fc0764f74a62e8ccf""><code>fd66547</code></a> REL: Prepare for the NumPy 1.22.0 release.</li>; <li><a href=""https://github.com/numpy/nu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:2435,load,loads,2435,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['load'],['loads']
Performance,"ing); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:14452,load,loadTestsFromName,14452,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['load'],['loadTestsFromName']
Performance,"ip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1610,cache,cached,1610,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1606:3288,cache,cacheconfig,3288,https://qutip.org,https://github.com/qutip/qutip/issues/1606,3,['cache'],"['cacheconfig', 'cachelinesize', 'cachesize']"
Performance,"le^{\otimes&space;4}"" title=""\psi = \left|0\right\rangle^{\otimes 4}"" /></a>; I do that as follow: ; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); ```; and i got the following : . ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); Traceback (most recent call last):. File ""<ipython-input-160-ae66af2f799c>"", line 1, in <module>; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1). File ""/home/user/anaconda2/envs/Quantum/lib/python2.7/site-packages/qutip/qobj.py"", line 515, in __mul__; raise TypeError(""Incompatible Qobj shapes""). TypeError: Incompatible Qobj shap; ```. but when i do each part separately as follow I notice that the shapes are compatible:; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)); Out[161]: ; Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; ```; ```python; basis(16,1); Out[162]: ; Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; ```; The first has shape = (16, 16) and the second has shape = (16, 1), there shouldn't be any problems in performing matrix multiplication.; **Why I got this error and how to solve it.**. My environment is as follow:; ```; ~$ conda info. active environment : Quantum; active env location : /home/user/anaconda2/envs/Quantum; shell level : 1; user config file : /home/user/.condarc; populated config files : /home/user/.condarc; conda version : 4.5.4; conda-build version : 3.10.5; python version : 2.7.15.final.0; base environment : /home/user/anaconda2 (writable); channel URLs : https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/free/linux-64; https://repo.anaconda.com/pkgs/free/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; https://repo.anacond",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:2669,perform,performing,2669,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['perform'],['performing']
Performance,"le_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)). ```; For N=>3, instead of getting a printout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; result.initial_fid_err = self.dynamics.fid_computer.get_fid_err(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 448, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 458, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 474, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1421, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"",",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:4566,optimiz,optimizer,4566,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimizer']
Performance,"m/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_v",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:4704,cache,cachedir,4704,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['cache'],['cachedir']
Performance,"mpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depend",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4081,cache,cached,4081,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"mpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3021,cache,cached,3021,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"ne help me with this issue?. The underlying reason for wanting to have MKL is that it allowed me in the past (on the same machine but with a different conda environment I no longer have access to) to calculate the steady states of much larger Liouvillians than I am now able to. I am unfortunately unable to reproduce this environment. Below you can find the outcomes of various installation processes, each in a new conda environment:. **Attempt 1a:** ; Conda install mkl; conda install numpy; conda install scipy; conda install conda-forge::qutip; **Results:** ; QuTiP Version: 	5.0.3; Numpy Version: 	2.0.0; Scipy Version: 	1.14.0; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.12.4; Number of CPUs: 	12; BLAS Info: 		Generic; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1b:**; Conda install mkl; conda install scipy ; conda install conda-forge::qutip; **Results:**; QuTiP Version: 	5.0.3; Numpy Version: 	1.26.4; Scipy Version: 	 1.10.1; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.10.14; Number of CPUs: 	12; BLAS Info: 		INTEL MKL; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1c:**; Conda install mkl; conda install conda-forge::qutip; **Results**; QuTiP Version: 5.0.3; Numpy Version: 2.0.0; Scipy Version: 1.14.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.12.4; Number of CPUs: 12; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Windows (AMD64). **Attempt 2:** ; Conda install conda-forge::qutip; **Results**: obtained errors when importing qutip (ImportError: DLL load failed while importing _arpack: The specified module could not be found.). **Attempt 2b:**; Conda install scipy; conda install conda-forge::qutip; **Results:**; QuTiP Version: 5.0.3; Numpy Version: 1.26.4; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: None; Python Version: 3.10.14; Number of CPUs: 12; BLAS Info: INTEL MKL; INTEL MKL Ext: False; Platform Info: Windows (AMD64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496:2071,load,load,2071,https://qutip.org,https://github.com/qutip/qutip/issues/2496,1,['load'],['load']
Performance,"nly used functions, improvements to F2PY, and better documentation.</p>; <p>The Python versions supported in this release are 3.8-3.10, Python 3.7; has been dropped. Note that 32 bit wheels are only provided for Python; 3.8 and 3.9 on Windows, all other wheels are 64 bits on account of; Ubuntu, Fedora, and other Linux distributions dropping 32 bit support.; All 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix; the occasional problems encountered by folks using truly huge arrays.</p>; <h2>Expired deprecations</h2>; <h3>Deprecated numeric style dtype strings have been removed</h3>; <p>Using the strings <code>&quot;Bytes0&quot;</code>, <code>&quot;Datetime64&quot;</code>, <code>&quot;Str0&quot;</code>, <code>&quot;Uint32&quot;</code>,; and <code>&quot;Uint64&quot;</code> as a dtype will now raise a <code>TypeError</code>.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19539"">gh-19539</a>)</p>; <h3>Expired deprecations for <code>loads</code>, <code>ndfromtxt</code>, and <code>mafromtxt</code> in npyio</h3>; <p><code>numpy.loads</code> was deprecated in v1.15, with the recommendation that; users use <code>pickle.loads</code> instead. <code>ndfromtxt</code> and <code>mafromtxt</code> were both; deprecated in v1.17 - users should use <code>numpy.genfromtxt</code> instead with; the appropriate value for the <code>usemask</code> parameter.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/19615"">gh-19615</a>)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/4adc87dff15a247e417d50f10cc4def8e1c17a03""><code>4adc87d</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/20685"">#20685</a> from charris/prepare-for-1.22.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/fd66547557f57c430d41be2fc0764f74a62e8ccf""><code>fd6",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:2340,load,loads,2340,https://qutip.org,https://github.com/qutip/qutip/pull/1940,1,['load'],['loads']
Performance,numpy as np imported in loadparams,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/321:24,load,loadparams,24,https://qutip.org,https://github.com/qutip/qutip/pull/321,1,['load'],['loadparams']
Performance,"numpy give deprecation warning in some test related to mcsolve:; ```Monte-carlo: Constant H (str format) with no collapse ops (expect) ... /home/ericgig/.local/lib/python3.6/site-packages/qutip-4.4.0.dev0+7af31179-py3.6-linux-x86_64.egg/qutip/mcsolve.py:1152: DeprecationWarning: Calling np.sum(generator) is deprecated, and in the future will give a different result. Use np.sum(np.fromiter(generator)) or the python sum builtin instead.```. I replaced the 2 np.sum causing problem by the python builtin sum. Since we are not doing the sum on a numpy array and it's in the solver setup phase, there is only a negligible effect on performance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/945:631,perform,performance,631,https://qutip.org,https://github.com/qutip/qutip/pull/945,1,['perform'],['performance']
Performance,"objevo_compiled_coeff_130828459648281117.cp37-win_amd64.exp; Generating code; Finished generating code; cl : Command line warning D9025 : overriding '/W3' with '/w'; cl : Command line warning D9025 : overriding '/Ox' with '/O1'; cqobjevo_compiled_coeff_8398411180025011525.cpp; c:\anaconda\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; Creating library C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_8398411180025011525.cp37-win_amd64.lib and object C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_8398411180025011525.cp37-win_amd64.exp; Generating code; Finished generating code; Process SpawnPoolWorker-671:; Process SpawnPoolWorker-669:; Traceback (most recent call last):; Traceback (most recent call last):; File ""C:\Anaconda\lib\multiprocessing\process.py"", line 297, in _bootstrap; self.run(); File ""C:\Anaconda\lib\multiprocessing\process.py"", line 297, in _bootstrap; self.run(); File ""C:\Anaconda\lib\multiprocessing\process.py"", line 99, in run; self._target(*self._args, **self._kwargs); File ""C:\Anaconda\lib\multiprocessing\process.py"", line 99, in run; self._target(*self._args, **self._kwargs); File ""C:\Anaconda\lib\multiprocessing\pool.py"", line 110, in worker; task = get(); File ""C:\Anaconda\lib\multiprocessing\pool.py"", line 110, in worker; task = get(); File ""C:\Anaconda\lib\multiprocessing\queues.py"", line 354, in get; return _ForkingPickler.loads(res); File ""C:\Anaconda\lib\multiprocessing\queues.py"", line 354, in get; return _ForkingPickler.loads(res); ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_130828459648281117'; ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_130828459648281117'. Note: I have installed qutip using pip installer",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084:2422,queue,queues,2422,https://qutip.org,https://github.com/qutip/qutip/issues/1084,4,"['load', 'queue']","['loads', 'queues']"
Performance,"ocesses to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, thereby improving the efficiency of quantum correlation computations. This is still a WIP enhancement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:2220,Concurren,Concurrency,2220,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,"['Concurren', 'Perform', 'concurren']","['Concurrency', 'Performance', 'concurrently']"
Performance,"ocessor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5117,cache,cache,5117,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,optimized bloch_redfield_tensor routine,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/336:0,optimiz,optimized,0,https://qutip.org,https://github.com/qutip/qutip/pull/336,1,['optimiz'],['optimized']
Performance,"or::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5379,cache,cache,5379,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,"p install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1560,cache,cached,1560,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5089,cache,cache,5089,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cache']
Performance,performance regression in qobj.expm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/50:0,perform,performance,0,https://qutip.org,https://github.com/qutip/qutip/issues/50,1,['perform'],['performance']
Performance,"plitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:1638,perform,performance,1638,https://qutip.org,https://github.com/qutip/qutip/pull/1563,1,['perform'],['performance']
Performance,"produce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1513,cache,cached,1513,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"ps://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https://github.com/t-vi""><code>@​t-vi</code></a>]</li>; </ul>; <h2>8.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Use snprintf instead of sprintf <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:3255,load,loading,3255,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['load'],['loading']
Performance,"py Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2670,cache,cached,2670,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"r to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:1487,cache,caches,1487,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['cache'],['caches']
Performance,"rements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-69.5.1 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/data/dia.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/data/tidyup.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/core/cy/qobjevo.pyx because it depends on /tmp/pip-build-env-50cuuv9x/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/core/data/mul.pyx because it depends on /tmp/pi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:4248,cache,cached,4248,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"rements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3188,cache,cached,3188,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,rhs module load error - testing on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/728:11,load,load,11,https://qutip.org,https://github.com/qutip/qutip/issues/728,1,['load'],['load']
Performance,"rimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.6; Number of CPUs: 10; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:1833,cache,cachedir,1833,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['cache'],['cachedir']
Performance,"rintout of the optimized controls, I receive the following terminal output error:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 59, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 829, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 510, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 970, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 375, in _create_result; result.initial_fid_err = self.dynamics.fid_computer.get_fid_err(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 448, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 458, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 474, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1421, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"", line 299, in recompute_evolution; prop_comp._compute_prop_grad(k, j); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/propcom",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:4720,optimiz,optimizer,4720,https://qutip.org,https://github.com/qutip/qutip/issues/1617,1,['optimiz'],['optimizer']
Performance,"rix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:1152,Perform,Performance,1152,https://qutip.org,https://github.com/qutip/qutip/pull/1405,1,['Perform'],['Performance']
Performance,"ronment, doing `pip install qutip` will cause the error. ```; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. I know this is quite an old OS and Python version, but that's what I have available. Numpy 1.24 should be supported in Python 3.8.10. ### Code to Reproduce the Bug. ```shell; $ python3 -m venv /tmp/test-venv. $ source /tmp/test-venv/bin/activate. $ pip install --upgrade pip; Collecting pip; Using cached pip-24.0-py3-none-any.whl (2.1 MB); Installing collected packages: pip; Attempting uninstall: pip; Found existing installation: pip 20.0.2; Uninstalling pip-20.0.2:; Successfully uninstalled pip-20.0.2; Successfully installed pip-24.0. $ pip list; Package Version; ------------- -------; pip 24.0; pkg_resources 0.0.0; setuptools 44.0.0. $ pip install qutip; Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Installing build dependencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:1060,cache,cached,1060,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"s://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19` this is due to the fact that on this platform `oldest-supported-numpy` (from `pyproject.toml`) defaults to 1.17.3, but `setup.cfg` requires `numpy>=1.19`. ### Code to Reproduce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1133,cache,cached,1133,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"s://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:2145,cache,cached,2145,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"s` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:1932,perform,perform,1932,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['perform'],['perform']
Performance,"setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-69.5.1-py3-none-any.whl (894 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Instal",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:3414,cache,cached,3414,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['cache'],['cached']
Performance,"setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Using cached scipy-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Instal",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:2354,cache,cached,2354,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,"st_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5250,cache,cacheprovider,5250,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['cache'],['cacheprovider']
Performance,"tation</strong></p>; <ul>; <li>Various typo fixes and doc improvements.</li>; </ul>; <p><strong>Packaging</strong></p>; <ul>; <li>Requests has started adopting some modern packaging practices.; The source files for the projects (formerly <code>requests</code>) is now located; in <code>src/requests</code> in the Requests sdist. (<a href=""https://redirect.github.com/psf/requests/issues/6506"">#6506</a>)</li>; <li>Starting in Requests 2.33.0, Requests will migrate to a PEP 517 build system; using <code>hatchling</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:7816,concurren,concurrent,7816,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,"['concurren', 'perform']","['concurrent', 'performance']"
Performance,"th numpy>=1.19` this is due to the fact that on this platform `oldest-supported-numpy` (from `pyproject.toml`) defaults to 1.17.3, but `setup.cfg` requires `numpy>=1.19`. ### Code to Reproduce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO: pip is looking at multiple versions of scipy to determine which version is compatible with other requirements. This could take a while.; Collecting scipy>=1.8; Using cached scipy-1.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x8",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1342,cache,cached,1342,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['cache'],['cached']
Performance,to reduce load on travis system and shorten test times ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289:10,load,load,10,https://qutip.org,https://github.com/qutip/qutip/pull/289,1,['load'],['load']
Performance,"tps://github.com/psf/requests) from 2.31.0 to 2.32.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:999,load,load,999,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['load'],['load']
Performance,"uilds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1404,cache,cached,1404,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['cache'],['cached']
Performance,"uot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/152"">#152</a> from elliotwutingfeng/dev</li>; <li><a href=""https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7""><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>; <li><a href=""https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b""><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>; <li><a href=""https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067""><code>d516b87</code></a> Update Github actions/checkout to v4</li>; <li><a href=""https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7""><code>c0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:2356,optimiz,optimize-contextj,2356,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['optimiz'],['optimize-contextj']
Performance,"uote>; <h2>1.26.5</h2>; <p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=""https://urllib3.readthedocs.io/en/latest/v2-roadmap.html"">Read more in the v2.0 Roadmap</a></p>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting the authority component.</li>; </ul>; <p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=""https://github.com/sponsors/urllib3"">GitHub Sponsors</a></strong></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.5 (2021-05-26)</h2>; <ul>; <li>Fixed deprecation warnings emitted in Python 3.10.</li>; <li>Updated vendored <code>six</code> library to 1.16.0.</li>; <li>Improved performance of URL parser when splitting; the authority component.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf""><code>d161647</code></a> Release 1.26.5</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec""><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:1213,perform,performance,1213,https://qutip.org,https://github.com/qutip/qutip/pull/1563,1,['perform'],['performance']
Performance,utip/qip/algorithms/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/qip/algorithms; creating build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/fidcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimresult.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/io.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dump.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimconfig.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/symplectic.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/stats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/termcond.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/optimizer.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/errors.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/propcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/grape.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/pulsegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/tslotcomp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/loadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/non,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:9614,optimiz,optimizer,9614,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['optimiz'],['optimizer']
Performance,"which module we need to modify to get array of fidelities at the end of each optimization loop, I want to modify code to get fidelity vs. iterations plot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/840:77,optimiz,optimization,77,https://qutip.org,https://github.com/qutip/qutip/issues/840,1,['optimiz'],['optimization']
Performance,"}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); H = Hrot(coef=coef*Omega0,tlist=tlist); result = qutip.mesolve(H,psi0,tlist=tlist); print(f""{wavedata_name}"",np.abs(psi0.dag()@result.final_state)**2); ```. ```; index92 1.9513183436107076e-10; index93 0.49999366030208936; index94 1.0264492246902099e-13; ```. I would appreciate any insights into the potential causes of these errors and guidance on how to prevent such issues in future simulations. Additional Information:; scipy version: 1.13.0; python version: 3.12.2; qutip version: 5.0.1; numpy version: 1.26.4; Operating system: macOS 15.1. The files with the preselected coefficients and tlist are provided for reproducibility.; [index92_coef.txt](https://github.com/user-attachments/files/17613505/index92_coef.txt); [index92_tlist.txt](https://github.com/user-attachments/files/17613506/index92_tlist.txt); [index93_coef.txt](https://github.com/user-attachments/files/17613507/index",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:2273,load,loadtxt,2273,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['load'],['loadtxt']
Safety," I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class. **Expected behavior**; The time evolution of the 0th states. This is it. Am I doing something wro",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:1614,predict,predictions,1614,https://qutip.org,https://github.com/qutip/qutip/issues/1605,1,['predict'],['predictions']
Safety," [<a href=""https://github.com/evanmiller""><code>@​evanmiller</code></a>]</li>; <li>Fixed reading FLI/FLC images with a prefix chunk <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7804"">#7804</a> [<a href=""https://github.com/twolife""><code>@​twolife</code></a>]</li>; <li>Updated package name for Tidelift <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7810"">#7810</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed unused code <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7744"">#7744</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>10.3.0 (2024-04-01)</h2>; <ul>; <li>; <p>CVE-2024-28219: Use <code>strncpy</code> to avoid buffer overflow <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7928"">#7928</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Deprecate <code>eval()</code>, replacing it with <code>lambda_eval()</code> and <code>unsafe_eval()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7927"">#7927</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Raise <code>ValueError</code> if seeking to greater than offset-sized integer in TIFF <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7883"">#7883</a>; [radarhere]</p>; </li>; <li>; <p>Add <code>--report</code> argument to <code>__main__.py</code> to omit supported formats <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7818"">#7818</a>; [nulano, radarhere, hugovk]</p>; </li>; <li>; <p>Added RGB to I;16, I;16L, I;16B and I;16N conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7918"">#7918</a>, <a href=""https://redirect.github.com/python-pillow/Pi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:10201,avoid,avoid,10201,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['avoid'],['avoid']
Safety," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:3002,timeout,timeout,3002,https://qutip.org,https://github.com/qutip/qutip/pull/1409,1,['timeout'],['timeout']
Safety," callable(base):; 173 op = FunctionCoefficient(base, args.copy(), style=function_style). File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:388, in coeff_from_str(base, args, args_ctypes, compile_opt, **_); 385 code = make_cy_code(parsed, variables, constants,; 386 raw, compile_opt); 387 try:; --> 388 coeff = compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ........................................................................................................",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:2934,timeout,timeout,2934,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['timeout'],['timeout']
Safety," data layer later); - all functions in `correlation` and `qobj` which were marked ""deprecated"" are now actually removed; - `vec2mat` and `mat2vec` have been renamed to `vector_to_operator` and `operator_to_vector`; - all ""legacy"" files have been completely removed; - all previous scipy-CSR-like Cython code is completely gone (replaced by the data layer); - `Qobj` no longer defines `__array__`, and so will not automatically turn itself into one. Having this produced very inconsistent behaviour when multiplying by numpy arrays, or otherwise dealing with numpy functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:1548,safe,safety,1548,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['safe'],['safety']
Safety," in coefficient_builders:; 169 if isinstance(base, type_):; --> 170 return coefficient_builders[type_](base, **kwargs); 172 if callable(base):; 173 op = FunctionCoefficient(base, args.copy(), style=function_style). File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:388, in coeff_from_str(base, args, args_ctypes, compile_opt, **_); 385 code = make_cy_code(parsed, variables, constants,; 386 raw, compile_opt); 387 try:; --> 388 coeff = compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py ...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:2820,safe,safe,2820,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['safe'],['safe']
Safety," install qutip from pip with the latest python 3.9 fails. When we run the installations from a fresh conda env (conda 4.8.5) using pip as. ```; pip install qutip; ```; or with conda (using both). ```; conda install -c conda-forge qutip; conda install qutip; ```. we get different errors. The errors do not occur if we use python3.8 while creating the conda environment as. ```; conda create -n py38 python==3.8; ```. Looking at the error it seems there is specification that prohibits python 3.9. @jakelishman @Ericgig any idea about this?. # Steps to reproduce (with conda 4.8.5). ```; conda create -n qutip-test python=3.9; conda activate qutip-test; conda install -c conda-forge qutip; ```. ### Error; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - qutip -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.5,<3.6.0a0|3.4.*']. Your python: python=3.9. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. Note that strict channel priority may have removed packages required for satisfiability.; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371:1260,abort,abort,1260,https://qutip.org,https://github.com/qutip/qutip/issues/1371,1,['abort'],['abort']
Safety," number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, this likely won't involve any developer effort. `Qobj` construction overhead should be reduced to near-zero when passed a new dimensions object, which we will always do within the library. Compared to the 4.x branch, the overhead of `Qobj` will shrink from ~100µs to ~1µs in library code, even for functions where the `Qobj` type cannot be cleanly inferred from the input types. ## Particular points worth commenting on. 1. Are there currently valid `Qobj` that cannot be represented with this system?; 2. Should we push to implement basis-safety for QuTiP 5.x?; 3. Do you agree we should keep track of ""missing"" tensor product spaces?; 4. Should we change the pretty-printed format of `dims` and `type` in `Qobj.__repr__()`?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:11135,safe,safety,11135,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['safe'],['safety']
Safety," to palette with duplicate entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6548"">#6548</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow remap_palette() to return an image with less than 256 palette entries <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6543"">#6543</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected BMP and TGA palette size when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6500"">#6500</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.3.0 (2022-10-29)</h2>; <ul>; <li>; <p>Limit SAMPLESPERPIXEL to avoid runtime DOS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a>; [wiredfool]</p>; </li>; <li>; <p>Initialize libtiff buffer when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a>; [radarhere]</p>; </li>; <li>; <p>Inline fname2char to fix memory leak <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6329"">#6329</a>; [nulano]</p>; </li>; <li>; <p>Fix memory leaks related to text features <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6330"">#6330</a>; [nulano]</p>; </li>; <li>; <p>Use double quotes for version check on old CPython on Windows <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6695"">#6695</a>; [hugovk]</p>; </li>; <li>; <p>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a>; [cgohlke]</p>; </li>; <l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:10333,avoid,avoid,10333,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['avoid'],['avoid']
Safety,"# Broad strokes. `Qobj` instantiation and mathematical operations have a large overhead, mostly because of handling the `dims` parameter in tensor-product spaces. I'm proposing one possible way to speed this up, while also gaining some additional safety and knowledge about mathematical operations on tensor-product spaces. The steps:; 1. rigourously define the ""grammar"" of `dims`, and allow all of `dimensions.py` to assume that this grammar is followed to speed up parsing; 2. maintain a private data structure type `dimensions._Parsed` inside `Qobj` which is constructed once, and keeps all details of the parsing so they need not be repeated. Determine `Qobj.type` from this data structure; 3. maintain knowledge of the individual `type` of every subspace in the full Hilbert space (e.g. with a list). There is still a ""global"" `Qobj.type`, but this can now be one in the set `{'bra', 'ket', 'oper', 'scalar', 'super', 'other'}`. `'other'` is for when the individual elements do not all match each other. Individual elements cannot be `'other'`. `'scalar'` is added to operations can keep track of tensor elements which have been contracted, say by a `bra-ket` product - operations will then broadcast scalar up to the correct dimensions on certain operations.; 4. dimension parsing is now sped up by using the operation-specific type knowledge. For example, `bra + bra -> bra`, and `ket.dag() -> bra`. Step 3 is necessary to allow matrix multiplication to work. These lookups could be done with enum values instead of string hashing. # Technical details. As of QuTiP 4.5 (and all previous versions), `Qobj` instantiation is slow and this permeates through to all operations on `Qobj`. Matrix multiplication, scalar multiplication, addition and so forth all need to instantiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:247,safe,safety,247,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['safe'],['safety']
Safety,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1823:273,avoid,avoid,273,https://qutip.org,https://github.com/qutip/qutip/issues/1823,1,['avoid'],['avoid']
Safety,"### Bug Description. qutip has functions to detect the available of BLAS libraries. For instance on my system (debian unstable), `python3 -c ""import qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:44,detect,detect,44,https://qutip.org,https://github.com/qutip/qutip/issues/2053,2,['detect'],"['detect', 'detected']"
Safety,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1838:128,redund,redundant,128,https://qutip.org,https://github.com/qutip/qutip/issues/1838,1,['redund'],['redundant']
Safety,"### Problem Description. Now that qutip-qip has moved to another package, gates are not available in the main repo. This is inconvenient for examples such as the control optimization ones, where one would need to install the qutip-qip package just to access say the Hadamard or CNOT for instance. ### Proposed Solution. The easiest solution would be just to copy the `gates.py` file from the QIP package into the main repo. Perhaps might confuse imports in qip? Also, I think that file has func defs that refer to 'controls' that might not make sense in this repo. ### Alternate Solutions. Have a file called `operations.py`. Just have a subset of the gates (operations), the most typical named unitaries - sounds less QIP like and would avoid import confusion. I think also `hadamard_transform` could be shortened to `hadamard`, but also include the original name. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389:738,avoid,avoid,738,https://qutip.org,https://github.com/qutip/qutip/issues/2389,1,['avoid'],['avoid']
Safety,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433:1779,safe,safely,1779,https://qutip.org,https://github.com/qutip/qutip/issues/1433,1,['safe'],['safely']
Safety,* imports should be avoided internally to try and make single qutip module imports more lightweight,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580:20,avoid,avoided,20,https://qutip.org,https://github.com/qutip/qutip/issues/580,1,['avoid'],['avoided']
Safety,"**Background**. Since I am planning to add an mpi_parallel_map to the parallel module, I had a detailed look at the current implementations of parallel_map and loky_pmap. In the case of timeouts, errors or interrupts, I found surprising behavior. I will first summarize the current behavior in these situations, and then the behavior if my changes are included. It seems difficult to write better unit tests for such timing-sensitive behavior, but I have tested in detail on both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: rais",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:186,timeout,timeouts,186,https://qutip.org,https://github.com/qutip/qutip/pull/2280,3,"['Timeout', 'timeout']","['Timeout', 'timeout', 'timeouts']"
Safety,"**Checklist**; This rewrite the stochastic solver to use the class interface. - `smesolve`, `ssesolve` have been rewritten to match other solver with matching class interface `SMESolver`, `SSESolver`. The main change is that the options used to be passed as keywords (`**kwargs`) and are now passed as an options dict.; - `m_ops` and `dW_factors` are properties of the classes, but not available to overwrite through the function interface. ; - The multiples end condition (`target_tol`, `timeout`) are added.; - The `solver` keyword is now `method` options, as it is in other solver.; - The method that was referring the homodyne or heterodyne detection is now the `heterodyne` keyword. ie before `method=""heterodyne""` now `heterodyne=True`.; - The default integration method is now `rouchon`, instead of `taylor1.5`. ie the method coming from a physic paper and not a mathematics textbook. . - The stochastic integration methods have been spitted in smaller chunk instead of the huge classes in _stochastic.pyx. I kept most methods, only skipping the taylor order 2.0 method. The python interface is kept very similar to the `Integrator` as `SIntegrator`, the main difference being that `set_state` and `get_state` use an extra random number generator with the time and state. The integration methods are usually 5%~10% slower than they where for medium size problems (shape ~100). Most method are computed the same way as before, but the rouchon method no longer use super operator, but keep the density matrix as a matrix and not an oper-ket. - The derivative computation for used by the integration method has also been split into multiple functions and made only available for `smesolve`. For there methods to be valid, the each diffusion contribution must commute. For `smesolve`, this means that each `sc_ops` must commute, as documented. For `ssesolve`, each `sc_ops` must not only commute, but also commute with other `sc_ops`'s adjoint, this last part being missing from v4's documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2131:489,timeout,timeout,489,https://qutip.org,https://github.com/qutip/qutip/pull/2131,2,"['detect', 'timeout']","['detection', 'timeout']"
Safety,"**Describe the issue**. The ""Stochastic Solver"" page on the users guide currently have typos on equations and the text. Additionally, I believe the page could be improved by: ; - adding an example for qutip.smesolve;; - adding references for the equations discussed on the page (Chapter 4, Quantum Measurement and Control, from Wiseman and Milburn, for example);; - add links on the page for [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-heterodyne.ipynb) and [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb) tutorials. I would like to volunteer to make these changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706:616,detect,detection,616,https://qutip.org,https://github.com/qutip/qutip/issues/1706,1,['detect'],['detection']
Safety,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1588:536,sanity check,sanity checking,536,https://qutip.org,https://github.com/qutip/qutip/pull/1588,2,['sanity check'],"['sanity checking', 'sanity checks']"
Safety,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854:69,timeout,timeout,69,https://qutip.org,https://github.com/qutip/qutip/pull/1854,1,['timeout'],['timeout']
Safety,"**Description**; Add a lock for creating string coefficient. This allow to use the coefficient inside a parallel loop without issues.; The lock use `filelock` which works across processes, so it's safe to use with parallel coming from outside python.; The lock is per file, so different coefficient can compile in parallel. If there is a conflict, the first process will create and compile the coefficient and the other will use it (raising a hash collision error if not actually the same string.). `filelock` is a new requirement for runtime compilation. **Related issues or PRs**; #1963",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1968:197,safe,safe,197,https://qutip.org,https://github.com/qutip/qutip/pull/1968,1,['safe'],['safe']
Safety,"**Description**; Add some `skipif` to bypass tests that were failing (segmentation faults) during the local testing of `qutip.testing.run()` that was failing in the zip version of #1241. I am on Mac with generic BLAS and no MKL. ; I have been installing it on a fresh conda environment with; ```; pip install -e .[development]; ```; which I think is better than ; ```; python setup.py develop; ```; and by the way maybe this is something that can be updated in the readme and docs.; ; My qutip.about reads:; ```; QuTiP Version: 4.5.1; Numpy Version: 1.15.4; Scipy Version: 1.4.1; Cython Version: 0.29.8; Matplotlib Version: 3.1.2; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanshammah/github/qutip-4.5.1/qutip; ```; This PR could be included in the 4.5.1 version @Ericgig. . **Related issues or PRs**; This PR is related to #1241. **Changelog**; Add `skipif`in `pytest` on Mac with generic BLAS, avoiding segmentation fault during `qutip.testing.run()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1255:1023,avoid,avoiding,1023,https://qutip.org,https://github.com/qutip/qutip/pull/1255,2,['avoid'],['avoiding']
Safety,"**Description**; As presented in #1722, the docstring of the states and operators functions are not consistent. This change the docstring so that _Number of basis states in Hilbert space_ is used everywhere, instead of _fock states_ or _vector states_. This set the variable names as:; - Single Hilbert space function : `N`; - Multiple Hilbert space function: `dimensions`; - Number of qubits: `N_qubit`. Added support for `dimensions` input to take `Space` object.; Added sanity check in dimensions object.; Added `scalar_like` method to dimensions object. In transform any dims `[[2, 3], [2, 3]]` to it's scalar with same structure `[[1, 1], [1, 1]]`.; Added another input parameter to qzero to create rectangular operator `qzero([2],[3]).dims == [[2], [3]]`. **Related issues or PRs**; fix #1184, replace #2075",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2289:473,sanity check,sanity check,473,https://qutip.org,https://github.com/qutip/qutip/pull/2289,1,['sanity check'],['sanity check']
Safety,**Description**; Avoid int overflow in Qobj dims check . **Related issues or PRs**; fix #2249,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2252:17,Avoid,Avoid,17,https://qutip.org,https://github.com/qutip/qutip/pull/2252,1,['Avoid'],['Avoid']
Safety,"**Description**; Dimension checks was not done for `e_ops` for most solvers, which could result in segfault, (#1776).; Add checks and tests for these checks for `sesolve`, `mesolve`, `mcsolve`, stochastic solvers. ; `brmesolve` and `floquet` are safe. **Related issues or PRs**; fixes #1776. **Changelog**; Add dims check for e_ops in main solvers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1778:246,safe,safe,246,https://qutip.org,https://github.com/qutip/qutip/pull/1778,1,['safe'],['safe']
Safety,**Description**; Fix the bug in correlation where it would not properly detect that the system were time-dependent when only the c_ops were. **Related issues or PRs**; fix #1808; replace #1929,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1979:72,detect,detect,72,https://qutip.org,https://github.com/qutip/qutip/pull/1979,1,['detect'],['detect']
Safety,"**Description**; Hinton plots accept a `title` argument, but the code does not actually set the plot's title. Along with this fix, I also removed unused imports and fixed the other function's titles to avoid verbose such as. ```python; if title:; ax.set_title(title); ```; where the simple `ax.set_title(title)` does nothing when `title` is `None`. **Related issues or PRs**; No related issues or PRs. **Changelog**; Display a title for hinton and matrix_histogram plots when a title is given.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707:202,avoid,avoid,202,https://qutip.org,https://github.com/qutip/qutip/pull/1707,1,['avoid'],['avoid']
Safety,"**Description**; In #2120, `countstat` was updated to use `data.solve`.; `countstat` would sometime try to solve a system with singular matrix and has a fallback for it using `try: ... except:`; However, while numpy raises an error when the matrix is singular, `scipy.sparse` raises a warnings, thus the tests only pass because we use the warnings as error flags... Without it, the singular matrix would not be caught and the solution from `countstat` would contain a `NaN` and the tests would fail... - Redirect the warning from scipy sparse and numpy's `LinAlgError` to a `ValueError`to allow easy catching of these case.; - Add the small `1e-15` in `countstat` with `auto_tidyup` turned off.; - Add support for the method `lstsq` and `solve` for `data.solve_csr`. These methods are supported by numpy, jax, tensorflow, scipy.sparse is the exception which use `spsolve` and `lsqr` instead, probably to avoid name collision the the dense version they also have.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2144:904,avoid,avoid,904,https://qutip.org,https://github.com/qutip/qutip/pull/2144,1,['avoid'],['avoid']
Safety,"**Description**; In a few places, we remove the imaginary part for hermitian matrices.; It's nice for the user, but it breaks a few cases: `isherm` check breaks `jax.jit` and tensorflows does not support casting for auto-differentiation. The solution we had when tensorflow was added was to detect it (no `real` method). But this did not fix `jit` as seen in qutip/qutip-jax#34. This add a setting that is checked first, so after `qutip.settings.core[""auto_real_casting""] =False` all these checks are removed and `jit` works.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2329:291,detect,detect,291,https://qutip.org,https://github.com/qutip/qutip/pull/2329,1,['detect'],['detect']
Safety,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734:886,safe,safety,886,https://qutip.org,https://github.com/qutip/qutip/pull/1734,1,['safe'],['safety']
Safety,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:271,risk,risk,271,https://qutip.org,https://github.com/qutip/qutip/pull/1288,2,['risk'],['risk']
Safety,"**Description**; Remove Bloch 3D, it's redundant to Bloch but without new features added in recent years.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2306:39,redund,redundant,39,https://qutip.org,https://github.com/qutip/qutip/pull/2306,1,['redund'],['redundant']
Safety,"**Description**; Rewrite `mcsolve` as a class for dev.major. Main addition:; - `MultitrajSolver` class as a base class for solver computing trajectory from a seed: it uses custom ; - It uses custom integrator using a generator which `MultitrajSolver` provide. ; - Stepping run one trajectory at a time.; - Use numpy.random new interface with `SeedSequence` and `Generator`.; - `run` can end on number of trajectories reached, timeout reached, or error bars on expectation values under a certain tolerance.; - `McSolver` class for mcsolve class interface.; - Support closed and open system. For open systems. `H` must be a Liouvillian. The `c_ops` are computed stochasticly and are used for collapse. Dissipation terms to be used in a deterministic way can be added as Lindblad dissipators to the liouvillian.; - McSolver's results include the photocurrent.; - McSolver need a layer between the solver interface and the integrator. In #1710, this was a trajectory solver, but here I use a pseudo integrator. This makes `MultitrajSolver` easier to use with stochastic which need custom integrator and thus a trajectory solver did very little. Other fixes:; - `MultiTrajResult` keep the `dtype` of expect.; - `MultiTrajResult` can merge instance with no states stored. **Related issues or PRs**; Replace #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1972:426,timeout,timeout,426,https://qutip.org,https://github.com/qutip/qutip/pull/1972,1,['timeout'],['timeout']
Safety,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710:234,redund,redundant,234,https://qutip.org,https://github.com/qutip/qutip/pull/1710,1,['redund'],['redundant']
Safety,**Description**; Setting eigh_unsafe on sipy<1.5 and MKL. **Related issues or PRs**; #1495. **Changelog**; - Changed init to set eigh not safe in case scipy<1.5 and mkl backend; - Added the correct pytest breaking test from issue #1491 to check the solution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498:138,safe,safe,138,https://qutip.org,https://github.com/qutip/qutip/pull/1498,1,['safe'],['safe']
Safety,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787:156,timeout,timeout,156,https://qutip.org,https://github.com/qutip/qutip/pull/1787,1,['timeout'],['timeout']
Safety,"**Description**; The error for too large minimum step was not raised.; The error therefore came later in scipy code and was hard to understand. ; Found from https://groups.google.com/g/qutip/c/NUcKnAwpx30/m/7IKDqbNOAgA; Fix the error and add a test for it. Also added some sanity check on `min_step` and `max_step`, which could create infinite loop if `min_step = 0` or `min_step > max_step`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2402:273,sanity check,sanity check,273,https://qutip.org,https://github.com/qutip/qutip/pull/2402,1,['sanity check'],['sanity check']
Safety,**Description**; There was an error in line 613 of qutip/stochastic.py as the measurement operators for heterodyne detection in the implemented stochastic master equation should be `c + c.dag()` and `1j (c - c.dag())` as explicitely presented in equation (5.64) and the following 2 paragraphs in https://arxiv.org/abs/1710.09523. The same measurement operators can also be drawn from equation (4.108) of Milburn & Wiseman _Quantum Measurement and Control_. **Changelog**; Fixed error in m_ops definition for heterodyne detection in smesolve.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1237:115,detect,detection,115,https://qutip.org,https://github.com/qutip/qutip/pull/1237,2,['detect'],['detection']
Safety,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1630:634,avoid,avoids,634,https://qutip.org,https://github.com/qutip/qutip/pull/1630,4,"['avoid', 'redund']","['avoids', 'redundant']"
Safety,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1679:288,redund,redundant,288,https://qutip.org,https://github.com/qutip/qutip/pull/1679,1,['redund'],['redundant']
Safety,"**Description**; Upgrade from 4.5.1 to 4.5.2.; Include cherry picked commit from the following PR:. #1307 Fix zcsr_proj for bras with unsorted indices; #1306 Fix quadratic complexity in zcsr_inner; #1302 Enforce a CI test with scipy<1.5; #1301 Fix brtools zheevr test; #1298 Support scipy >= 1.5 in fast_csr_matrix matmul and legacy.ptrace; #1283 Milstein's heterodyne index fix; #1271 Remove duplicate line in setup.py; #1264 Remove incorrect use of 'is' in comparisons. Code from #1288 was added manually to evade conflict and related test were reinstalled. (removed in 4.5.1, not in master). #1269 and #1242 are not included since they depend on #1209 which is more that a bugfix and is not in 4.5.0. **Changelog**; Bug Fixes; -------; - `zcsr_proj` does not fail with unsorted indices (by **Jake Lishman**); - Fixed Milstein's heterodyne errors (by **Eric Giguère**); - Removed risky code (by **Jake Lishman**); <!-- - Fix `add_circuit` and `remove_gate` (by **Canoming**) -->. Improvements; -------; - Faster `zcsr_inner` (by **Jake Lishman**); - Support for Scipy 1.5 (by **Jake Lishman**)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1310:882,risk,risky,882,https://qutip.org,https://github.com/qutip/qutip/pull/1310,1,['risk'],['risky']
Safety,"**Description**; When a `Qobj` is present in the output of a Jupyter cell, e.g. when running:; ```python; import qutip as qt; qt.fock(2, 0); ```; the output, which contains LaTeX code, is displayed in Markdown. The aim of this PR is to display the LaTeX output correctly. Replacing the `equation` environment in the LaTeX code with `$$...$$` and changing the `array` environment alignment from `*{11}c` to `cc` causes the vectors and matrices to display in the expected mathematical typeface. A test has not yet been provided, because the change was to a stored raw string; if a test is needed then the presence of this syntax in the string could be detected. **Related issues or PRs**; Fixes #2172",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2272:650,detect,detected,650,https://qutip.org,https://github.com/qutip/qutip/pull/2272,1,['detect'],['detected']
Safety,"**Description**; With new version of os, it sometime break our hardware_info function, as with the new apple M1 with #1754.; Instead of fixing it each time, I propose removing the function:; - Qutip only use the number of cpu from that function, we never uses the cpu frequency or any other info obtained.; - There are cross platform modules for that (`psutil`), if we need that information, we should use them instead. In this PR, I removed `hardware_info`, created a new function `available_cpu_count` which is placed it in `utilities.py` since `blas_info` is also there. This function is set to detect the number of cpus _available_, not total number, so that when used on a cluster, it return the number of cpus assigned to the job. I tested it on slurm. **Changelog**; Remove hardware info",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1758:598,detect,detect,598,https://qutip.org,https://github.com/qutip/qutip/pull/1758,1,['detect'],['detect']
Safety,"**Description**; With the update of correlation to v5 in #1997, the need for `shift` in `QobjEvo` and `Coefficient` disappeared.; `ShiftCoefficient`, `QobjEvo._insert_time_shift` and related tests are removed. I also restored the correlation tests on windows hoping they are now fast enough to not timeout. **Related issues or PRs**; #1997",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016:298,timeout,timeout,298,https://qutip.org,https://github.com/qutip/qutip/pull/2016,1,['timeout'],['timeout']
Safety,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880:346,unsafe,unsafe,346,https://qutip.org,https://github.com/qutip/qutip/pull/1880,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"**Is your feature request related to a problem? Please describe.**; Traditionally in Hinton diagrams, any positive number is represented by a fully white square, while any negative number is represented by a fully black square. In the current implementation of `qutip.visualization.hinton`, however, each square is shaded such that numbers close to zero are represented by colors close to gray. While it is nice to be able to use shaded colormaps of this form, traditional Hinton diagrams (that is, thresholded at zero) can be easier to read when some elements that are close to zero can still have significant impact. **Describe the solution you'd like**; A `config` option or keyword argument that would allow using a threshold at zero. **Additional context**; Current Hinton diagram implementation (with colorblind safe mode turned off):. ![image](https://user-images.githubusercontent.com/31516/124228221-bb8ba800-dac0-11eb-8fc4-047ed79ecb1d.png). Current Hinton diagram implementation (with colorblind safe mode turned on):. ![image](https://user-images.githubusercontent.com/31516/124228374-fa216280-dac0-11eb-9e5c-095c1fd10373.png). Examples with thresholded colors (https://arxiv.org/pdf/1509.03770.pdf):. ![image](https://user-images.githubusercontent.com/31516/124228283-dcec9400-dac0-11eb-9067-7870f3dddf95.png); ![image](https://user-images.githubusercontent.com/31516/124228321-e970ec80-dac0-11eb-9006-c535f21c6f9b.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1595:818,safe,safe,818,https://qutip.org,https://github.com/qutip/qutip/issues/1595,2,['safe'],['safe']
Safety,"**Testing fails on several platforms**; In QuTiP 4.5.1, several `skipif`have been introduced to avoid build fail on Mac. Similarly, there are other issues related to robust random objects testing. . **Describe the solution you'd like**; An option could be using [`xdist`](https://docs.pytest.org/en/3.0.1/xdist.html) to allow specifics of certain tests, as it seems to have, beyond parallelization, some potentially interesting multi-platform coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1267:96,avoid,avoid,96,https://qutip.org,https://github.com/qutip/qutip/issues/1267,1,['avoid'],['avoid']
Safety,", qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; --> 334 str(L_dims), "" and "", str(rho_dims),; 335 ])); 336 . ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. ### Expected Behaviour. In my given input, vectorization of `rho` is not taken into account. However the documentation could use clarification how input must be provided to avoid this error. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1899:2456,avoid,avoid,2456,https://qutip.org,https://github.com/qutip/qutip/issues/1899,1,['avoid'],['avoid']
Safety,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:3045,avoid,avoid,3045,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['avoid'],['avoid']
Safety,- Favor sparse matrix BR tensor for non-secular evolution. - Build diagonal Hamiltonian directly from evals to avoid small; off-diagonal nonzeros that popup when doing a basis transformation.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/789:111,avoid,avoid,111,https://qutip.org,https://github.com/qutip/qutip/pull/789,1,['avoid'],['avoid']
Safety,- Fixed num_cpus not properly set for multiprocessing.; - Fixed compiler args not recognized by clang.; - Avoid data copy in cy_expect_psi_csr.; - Add ability to reuse seeds [Options(seeds=xxx)].; - Clean up numpy imports.; - Fast reset of scipy zvode integrator and change stepping mode.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264:106,Avoid,Avoid,106,https://qutip.org,https://github.com/qutip/qutip/pull/264,1,['Avoid'],['Avoid']
Safety,- Just a simple reorder of the e_ops to list and the safety checks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/631:53,safe,safety,53,https://qutip.org,https://github.com/qutip/qutip/pull/631,1,['safe'],['safety']
Safety,- Restructure code to avoid multiple copies of code snippets.; - Optionally return dict with details on solution and solver details.; - Allow for building preconditioner separately so that different; iterative methods can be applied.; - Calculates inf-norm of residual at output.; - Returns number of iterations performed.; - Allow for inputing initial guess vector.; - Calculate a lower bound on the condition number of a preconditioner.; - Residual norm is given when iterative method fails to converge.; - Removed bicg method since it is not compatible.; - General docstring edits.; - Add tests for bicgstab method.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221:22,avoid,avoid,22,https://qutip.org,https://github.com/qutip/qutip/pull/221,1,['avoid'],['avoid']
Safety,- This is Py3 as to not avoid conflicts with the built in Python.; - Installs master branch of qutip.; - Shamelessly adapted from the SciPy Superpack.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279:24,avoid,avoid,24,https://qutip.org,https://github.com/qutip/qutip/pull/279,1,['avoid'],['avoid']
Safety,- hardware_info now detects # of physical cpus under Win.; - about() and version_table() now display BLAS type.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/421:20,detect,detects,20,https://qutip.org,https://github.com/qutip/qutip/pull/421,1,['detect'],['detects']
Safety,". This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally very well covered, but arguing between 63% and 71% when we should be aiming to get to >95% is missing the point. Fixes #1339.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:1662,predict,prediction,1662,https://qutip.org,https://github.com/qutip/qutip/pull/1347,1,['predict'],['prediction']
Safety,".</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an extra leading <code>/</code> (path separator) could lead; urllib3 to unnecessarily reparse the request URI. (<a href=""https://redirect.github.com/psf/requests/issues/6644"">#6644</a>)</li>; </ul",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:1214,detect,detection,1214,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['detect'],['detection']
Safety,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414:414,avoid,avoid,414,https://qutip.org,https://github.com/qutip/qutip/pull/1414,1,['avoid'],['avoid']
Safety,"56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an extra leading <code>/</code> (path separator) could lead; urllib3 to unnecessarily reparse the request URI. (<a href=""https://redirect.github.com/psf/requests/issues/6644"">#6644</a>)</li>; </ul>; <p><strong>Deprecations</strong></p>; <ul>; <li>Requests has officially added support for CPython 3.12 (<a href=""https://redirect.github.com/psf/requests/issues/6503"">#6503</a>)</li>; <li>Requests has officially added support for PyPy 3.9 and 3.10 (<a href=""https://redirect.github.com/psf/requests/issues/6641"">#6641</a>)</li>; <li>Requests has officially dropped support for CPython 3.7 (<a href=""https://redirect.github.com/psf/requests/issues/6642"">#6642</a>)</l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:1697,detect,detection,1697,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,['detect'],['detection']
Safety,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Index error in stochastic `smesolve` made `milstein` solver with `heterodyne` method converge only O(0.5) instead of the O(1) expected. This fix it. **Changelog**; Fixed typo in stochastic code affecting `heterodyne` detection efficiency.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1283:1316,detect,detection,1316,https://qutip.org,https://github.com/qutip/qutip/pull/1283,1,['detect'],['detection']
Safety,"<br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2037,timeout,timeout,2037,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,"> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If you agree with that, I will then also re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2140,timeout,timeout,2140,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#59",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:1342,redund,redundant,1342,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['redund'],['redundant']
Safety,A faster displacement operator avoiding matrix exponentiation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293:31,avoid,avoiding,31,https://qutip.org,https://github.com/qutip/qutip/issues/1293,1,['avoid'],['avoiding']
Safety,"A lot of the cost of the Husimi Q function does not depend on the state. If it is called many times (e.g. for a density matrix or when doing multiple states), this can be used for a speedup. I wrote a function to precompute everything that does not depend on the state and store it as a 3d array. The Q function itself is then a dot product between the last axis of the precomputed array and a pure state. Performance: Everything tested by computing Q of a coherent state with N dimensions, evaluated at 401 points in x and y, respectively.; Speedup is 3x for N=10, 4x for N=20, 7x for N=50. ; For density matrices, precomputing is already paid for by the first call. . Possible further changes:; Because precomputing is always worth it if the state is a density matrix, one could do that automatically. Because the memory cost can be large (len(xvec) * len(yvec) * N * 128 bit) , I still leave the decision to the user. The third if statement in _qfunc_pure can be avoided at a small performance cost in either the polyval or np.dot variant. This seemed the best compromise between performance and nice code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934:966,avoid,avoided,966,https://qutip.org,https://github.com/qutip/qutip/pull/934,1,['avoid'],['avoided']
Safety,A number of posts have appeared recently on the Google group reporting problems with installing QuTiP on MS Windows 8 or 10 64 bit editions. I have also experienced problems when trying to install on a colleagues laptop. Mainly these seem to be compilation related issues. Is there anything we can do to the code or the instructions to help avoid these issues?. Is there any value in creating an Anaconda install package?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377:341,avoid,avoid,341,https://qutip.org,https://github.com/qutip/qutip/issues/377,1,['avoid'],['avoid']
Safety,"Adds custom `csr.diags` and swaps `qdiags` over to use it to avoid using the `scipy` version with its large overhead. Constructing a tridiagonal matrix of dimension 100 gets approximately a 7x speed up (320µs to 45µs on my machine) and it's better for small dimensions - the `scipy` overhead has a constant component something around 280µs compared to a constant ~20µs in the new `csr` one. Not a big deal since it's hardly ever going to be a bottleneck, but it's just part of my work speeding up general QuTiP operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1419:61,avoid,avoid,61,https://qutip.org,https://github.com/qutip/qutip/pull/1419,1,['avoid'],['avoid']
Safety,"After installing qutip via conda (conda install qutip) on Mac 10.15.1 High Sierra, I ran the testing script using:. >> import qutip.testing as qt ; >> qt.run(). I am getting the following error: . Qobj subtraction ... python(4259,0x119a26dc0) malloc: Incorrect checksum for freed object 0x7fdbb05c5910: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(4259,0x119a26dc0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6. Does anyone know what is causing this, how to fix it, or what kinds of problems it might cause later? Thank you!. Sacha",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:462,Abort,Abort,462,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['Abort'],['Abort']
Safety,Avoid global imports in jit cython code,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/155:0,Avoid,Avoid,0,https://qutip.org,https://github.com/qutip/qutip/issues/155,1,['Avoid'],['Avoid']
Safety,Avoid int overflow in Qobj dims check,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2252:0,Avoid,Avoid,0,https://qutip.org,https://github.com/qutip/qutip/pull/2252,1,['Avoid'],['Avoid']
Safety,Avoid matrix tidyup in trace norm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1479:0,Avoid,Avoid,0,https://qutip.org,https://github.com/qutip/qutip/pull/1479,1,['Avoid'],['Avoid']
Safety,BUG: Fix for safety check,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/687:13,safe,safety,13,https://qutip.org,https://github.com/qutip/qutip/pull/687,1,['safe'],['safety']
Safety,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 10.2.0 to 10.3.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>10.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/10.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/10.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>CVE-2024-28219: Use strncpy to avoid buffer overflow <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7928"">#7928</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use <code>functools.lru_cache</code> for <code>hopper()</code> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7912"">#7912</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Raise ValueError if seeking to greater than offset-sized integer in TIFF <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7883"">#7883</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improve speed of loading QOI images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7925"">#7925</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added RGB to I;16N conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7920"">#7920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add --report argument to <strong>main</strong>.py to omit supported formats <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7818"">#7818</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Added RGB to I;16, I;16L and I;16B conversion <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7918"">#7918</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix editable installation with custom build backend and configurati",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:479,avoid,avoid,479,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['avoid'],['avoid']
Safety,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.1 to 9.3.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.3.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.3.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.3.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Initialize libtiff buffer when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit SAMPLESPERPIXEL to avoid runtime DOS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> [<a href=""https://github.com/wiredfool""><code>@​wiredfool</code></a>]</li>; <li>Inline fname2char to fix memory leak <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6329"">#6329</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Fix memory leaks related to text features <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6330"">#6330</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Use double quotes for version check on old CPython on Windows <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6695"">#6695</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>GHA: replace deprecated set-output command with GITHUB_OUTPUT file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6697"">#6697</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Remove backup implementation of Round for Windows platforms <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6693"">#6693</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>; <li>Upload fribidi.dll to GitHub Acti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:678,avoid,avoid,678,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['avoid'],['avoid']
Safety,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.17.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.17</h2>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>; </ul>; <h2>1.26.16</h2>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2954"">#2954</a>)</li>; </ul>; <h2>1.26.15</h2>; <ul>; <li>Fix socket timeout value when HTTPConnection is reused (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2645"">urllib3/urllib3#2645</a>)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:561,safe,safety,561,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,"['safe', 'timeout']","['safety', 'timeout']"
Safety,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:461,detect,detected,461,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['detect'],['detected']
Safety,"Currently, the method to add a new gate to a quantum circuit is the following:; ```; import numpy as np; from qutip import QubitCircuit; from qutip.qip.circuit import Gate. qcircuit = QubitCircuit(4); qcircuit.add_gate(""CNOT"", targets=[2], controls=[0]). # This is a valid gate addition.; qcircuit.add_gate(""test_gate"", targets=[0], controls=[1], arg_label=r""\pi/12"",; 	 arg_value=""np.pi/12""); for gate in qcircuit.gates:; 	print(gate). ```. There is no way to add a gate directly. For instance:. ```; test_gate = Gate(""test_gate"", targets=[0], controls=[1], arg_label=r""\pi/12"",; 	 arg_value=""np.pi/12""); # This leads to an invalid gate addition.; qcircuit.add_gate(test_gate); ```; which leads to . ```; Gate(Gate(test_gate, targets=[0], controls=[1]), targets=None, controls=None); ```. Can we add a check to see if the input to `add_gate` is a Gate object and unpack it to add a new gate ? Or, have some kind of a sanity check if the given input is in a correct gate input format. (name, targets, controls).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/610:918,sanity check,sanity check,918,https://qutip.org,https://github.com/qutip/qutip/issues/610,1,['sanity check'],['sanity check']
Safety,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1647:342,risk,risk,342,https://qutip.org,https://github.com/qutip/qutip/pull/1647,1,['risk'],['risk']
Safety,ENH: Fix OPENMP threshold detection exception,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/711:26,detect,detection,26,https://qutip.org,https://github.com/qutip/qutip/pull/711,1,['detect'],['detection']
Safety,ENH: Safety check for solver inputs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/537:5,Safe,Safety,5,https://qutip.org,https://github.com/qutip/qutip/pull/537,1,['Safe'],['Safety']
Safety,"Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecuto",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1551,Abort,Aborts,1551,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['Abort'],['Aborts']
Safety,"First remove the completely unnecessary triplicated calls to `_Indexer.single()` by caching the results. An otherwise sensible use of the sparse code would get ruined by vastly over-using the call, which is exactly what the special-case is trying to avoid. Second, fix a buggy line: in `_dimensions_csr_sparse` there used to be the lines (229--230) that's hard to spot in the diff because of the release of the GIL in this commit:; ```python; if n:; out.row_index[index.single(row) + 1] = len; ```; where the assignment should have been `n`, not `len`. `len` is the longest row seen before now, so the first row seen would also be zeroed out by this function. Also, a matrix with some rows having more elements in that others would set the wrong values in later short rows, probably causing a segfault. Release the GIL when we don't need it for iteration - that's often a free speedup in Cython code. Fixes #1382.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1384:250,avoid,avoid,250,https://qutip.org,https://github.com/qutip/qutip/pull/1384,1,['avoid'],['avoid']
Safety,"Fix #1433, see further discussion of points there. - sets `Qobj.__array_ufunc__ = None` to prevent implicit usage with ufuncs; - change use of `np.array(dtype=object)` with `Qobj` into either raw Python lists (when only used internally), or sets `out = np.empty(shape, dtype=object); out[:] = ...` to force object-array creation; - fix version of numpy build version to `1.16.6 <= x < 1.20` to prevent cross-version ABI incompatibility (see also comments in #1429); - change default of `dims` and `shape` in `Qobj` constructor to `None`, rather than dangerous lists (also helps avoid numpy calls on ragged sequences)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1440:578,avoid,avoid,578,https://qutip.org,https://github.com/qutip/qutip/pull/1440,1,['avoid'],['avoid']
Safety,Fix `brmsolve` time-dependent a_ops detection,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2541:36,detect,detection,36,https://qutip.org,https://github.com/qutip/qutip/pull/2541,1,['detect'],['detection']
Safety,Fix `isherm_csr` wrongly detecting structure,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1866:25,detect,detecting,25,https://qutip.org,https://github.com/qutip/qutip/pull/1866,1,['detect'],['detecting']
Safety,Fix error in definition of m_ops for heterodyne detection in smesolve(),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1237:48,detect,detection,48,https://qutip.org,https://github.com/qutip/qutip/pull/1237,1,['detect'],['detection']
Safety,Fix redundancy and sign error in jmat.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/565:4,redund,redundancy,4,https://qutip.org,https://github.com/qutip/qutip/pull/565,1,['redund'],['redundancy']
Safety,Having a warning that appears every time qutip is imported should be avoided. That is unless we want a ton of questions on the google help group.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/465:69,avoid,avoided,69,https://qutip.org,https://github.com/qutip/qutip/pull/465,1,['avoid'],['avoided']
Safety,"Hi all,. I'm not sure how to do pull request in this case so let it be a new Issue. I have implemented Milstein method for solving SME for homodyne detection scheme. For my problems it works much better than the simple Euler-Maruyama method. In case of a single Wiener increment all what is required is the new rhs function (see notebook attached). For multiple Wiener increments the provided infrastructure of QuTiP is not enough. One needs to provide all of the A_ops to the rhs. The modified stochastic.py file is also attached (from qutip.stochastic import smesolve_mil). The attached Notebook contains an example of SME with an analytical solution. Which allows to test smesolver for a single quantum trajectory. The notebook and the modified stochastic.py is here:; http://db.tt/dJNjGo3g. P.S. Due to nonlinearity in the stochastic term of quantum SME the simple Euler-Maruyama scheme doesn't work properly sometimes. Even Milstein struggles. From my experience semi implicit methods help. But in order to implement it in a convenient way one needs to modify QuTiP approach to the problem. Maybe instead of rhs function it would be better to have a function which returns \rho_{n+1} instead of d\rho. It could be more flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:148,detect,detection,148,https://qutip.org,https://github.com/qutip/qutip/issues/35,1,['detect'],['detection']
Safety,"Hi, I'm wondering if it's possible to control the precision of 'predictor-corrector' solver of the photocurrent_mesolve? Seems like the 'tol' has no effect on the 'predictor-corrector' solver. Here's my code. I was trying to use stochastic master equation to generate the outcome photon sequence from a CPT set up, but I got a diverged outcome sometimes. ```; from qutip import *; import matplotlib.pyplot as plt; import numpy as np; import matplotlib as mpl. params = {; 	'axes.labelsize': 12,; 	'legend.fontsize': 10,; 	'xtick.labelsize': 10,; 	'ytick.labelsize': 10,; 	'figure.figsize': [3*1.4/1.2, 2.8/1.2],#2.3; 	'lines.linewidth' : 1,; 	'axes.linewidth':0.9,; 	'figure.subplot.left':0,; 	'figure.subplot.right':1,; 	'figure.subplot.bottom':0,; 	'figure.subplot.top':1,; 	'grid.linestyle':'--',; 	'axes.grid':False,; 	""font.family"":""serif"",; 	""xtick.direction"":""in"",; 	""ytick.direction"":""in"",. 	}; mpl.rcParams.update(params). T = 100; N = 100000; Gamma = 2*np.pi*13; Omega = 2*np.pi*2. times = np.linspace(0,T,N); ge = fock(3, 0) * fock(3, 1).dag(); se = fock(3, 2) * fock(3, 1).dag(); ss = fock(3, 2) * fock(3, 2).dag(); ee = fock(3, 1) * fock(3, 1).dag(); dark = (fock(3, 2) - fock(3, 0)).unit(); dd = dark*dark.dag(). bias = 2*np.pi*0.1. psi0 = dark. H = Omega * (ge + ge.dag() + se + se.dag()) + bias*ss. result_sme = photocurrent_mesolve(H, psi0, times, c_ops = [],sc_ops = [np.sqrt(Gamma/2)*ge + np.sqrt(Gamma/2)*se]\; 	, e_ops = [dd, ee], store_measurement=True, options=Options(store_states=True), nsubsteps=100, \; 	solver='predictor-corrector'). hermitian = [(result_sme.states[0][i]).isherm for i in range(N)]. plt.plot(times, result_sme.expect[0], color = 'orange', label='dark'); plt.plot(times, result_sme.expect[1], color = 'black', label='e'); plt.plot(times, hermitian, color = 'blue'); plt.xlim(0,100); plt.xlabel('Time'); plt.ylabel('Population'); plt.savefig('sme.pdf',bbox_inches='tight',pad_inches=0); plt.close(). ```; And the result,; [sme.pdf](https://github.com/qutip/q",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357:64,predict,predictor-corrector,64,https://qutip.org,https://github.com/qutip/qutip/issues/1357,2,['predict'],['predictor-corrector']
Safety,"Hi,; In the source code of `mesolve`, the derivative are defined via `L * rho` where L is Liouvillian. But when the size is too large, `L` is of huge dimension. I have two questions:; 1. What tricks have you made so that the derivative is still defined via `L` instead of collapse operators, which is relatively smaller in dimension? Sparse in scipy was used. But if `L` is not sparse at all, how can we avoid memory problem?; 2. What is the general advantage of using Liouvillian `L` to define derivative instead of `C` the collapse operators? It seems that using `L` requires only 1 multiplication, but when I tested and try to define in `C`, it seems that it is still faster for relatively small hilbert space dimension. Is speed the main reason?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531:404,avoid,avoid,404,https://qutip.org,https://github.com/qutip/qutip/issues/531,1,['avoid'],['avoid']
Safety,"I am having some trouble with the function mesolve. The situation is the following: I have a collection of Hamiltonians and Jump Operators which includes 69 timesteps each, and I want to evolve a initial state to each of this timesteps. However, Qutip is returning ""Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:792,predict,predictions,792,https://qutip.org,https://github.com/qutip/qutip/issues/1605,1,['predict'],['predictions']
Safety,"I have a trouble in solving a time dependent Bloch-Redfield master equation with arguments.; Let me use an example discussed in [here](https://github.com/qutip/qutip/issues/966); The schedule functions of the time dependent Hamiltonian are defined by using some parameters which are passed to mesolve as args.; This method works well for sesolve and mesolve.; However, if I try to use the same method in brmesolve, it returns error in compiling Cython. I attached a python code which demonstrates the above observation. . I also noticed that in bloch_redfield.py it says; args : dict ; Placeholder for future implementation, kept for API consistency. Would it be possible to use arguments in brmesolve? If not, how could I use parametrically defined schedule functions while avoiding the issue raised in [here](https://github.com/qutip/qutip/issues/966)?. I need this for my research and I would appreciate your help very much. [Qutip Redfield master issue.py.zip](https://github.com/qutip/qutip/files/4028211/Qutip.Redfield.master.issue.py.zip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1150:775,avoid,avoiding,775,https://qutip.org,https://github.com/qutip/qutip/issues/1150,1,['avoid'],['avoiding']
Safety,"I just did a fresh instlal of qutip today and ran the tests. mcsolve (and mcsolve_f90) tests involving collapse operators fail. Probably this is due to a recent change in the code where averaging of states is turned off by default for the solver:. > commit fb40b4675bb454089a08087c64a07f83be44cd99; > Author: Robert Johansson jrjohansson@gmail.com; > Date: Mon Aug 5 11:24:26 2013 +0900; > ; > do not average states by default. I think this change in general involves a risk of not being backwards compatible with a lot of old code. What do you think?. Cheers, Arne",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/37:470,risk,risk,470,https://qutip.org,https://github.com/qutip/qutip/issues/37,1,['risk'],['risk']
Safety,"In `smesolve` if heterodyne detection is chosen and custom measurement operators are provided, the variable `m_ops` is used before being declared [here](https://github.com/qutip/qutip/blob/1253740be0600315286438d1a64f172920b0dadc/qutip/solve/stochastic.py#L604). A quick fix would be changing this line to; ```python; if sso.m_ops is None:; sso.m_ops = m_ops; ```; But probably adding some checks (correct shape, and whether the measured ops look like quadratures) would be nice. Thank you for the tremendous work, by the way!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2078:28,detect,detection,28,https://qutip.org,https://github.com/qutip/qutip/issues/2078,1,['detect'],['detection']
Safety,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1645:140,detect,detect,140,https://qutip.org,https://github.com/qutip/qutip/pull/1645,1,['detect'],['detect']
Safety,"In certain cases in matrices containing values smaller than the tolerance for Hermicity, a matrix can be considered Hermitian even if its transpose does not have the same sparsity pattern as itself. The previous version of this function would give false negatives in these circumstances, whereas now we fall back on the more computationally and memory intensive version of constructing the transpose completely, and comparing element-wise. We offset some of this slowdown by optimising the floating-point comparisons to avoid calls to `sqrt` (via `abs`), and by removing a redundant test of the sparsity pattern in the inner loop. Fixes #1350 for the `master` branch, but still to do for `dev.major`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1352:520,avoid,avoid,520,https://qutip.org,https://github.com/qutip/qutip/pull/1352,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"In my earlier PR, I had forgotten to add a check for trace preservation in the `iscptp` property. This has now been added, along with test cases for the new `istp` and `iscp` properties. I'm not entirely satisfied with importing within the property bodies, but I'm not sure how else to avoid circular dependencies.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/94:286,avoid,avoid,286,https://qutip.org,https://github.com/qutip/qutip/pull/94,1,['avoid'],['avoid']
Safety,"Instead of calculating the alpha**n/sqrt(n!) for every entry, calculate; it recursively by x_{n+1} = x_{n}*alpha/sqrt(n), thereby avoiding the; explicit calculation of the factorial. This way it works also for; dimensions>400 where it would fail before. This comes with a speed improvement:; ![benchmark_coherentstate](https://cloud.githubusercontent.com/assets/102507/24836249/399a4fba-1d17-11e7-9387-dd6ab9da1172.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683:130,avoid,avoiding,130,https://qutip.org,https://github.com/qutip/qutip/pull/683,1,['avoid'],['avoiding']
Safety,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643:396,detect,detect,396,https://qutip.org,https://github.com/qutip/qutip/pull/1643,1,['detect'],['detect']
Safety,Issue with me/mcsolve safety checkes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/630:22,safe,safety,22,https://qutip.org,https://github.com/qutip/qutip/issues/630,1,['safe'],['safety']
Safety,New methods for single stochastic jump operator are implemented:; - 1/2 order predictor-corrector euler-maruyama; - 1 order semi-implicit Milstein; - 3/2 order explicit and semi-implicit Taylor 1.5. Tests for all the new (and old) methods are added. There is a corresponding notebook which shows that the solvers achieve (or exceed) their order of convergence.; https://github.com/qutip/qutip-notebooks/pull/37; Here is the scaling of solver error as a function of stepsize:; ![error_scaling_y_an](https://cloud.githubusercontent.com/assets/4971779/18120795/128dcbe6-6f6a-11e6-8b36-8b16fb73f35a.png). Bug: fast-milstein modifies input noise - fixed. The explicit Taylor 1.5 method and most of the coding is done by **Manuel Grimm** under supervision of **Niels Lörch** at University of Basel.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/529:78,predict,predictor-corrector,78,https://qutip.org,https://github.com/qutip/qutip/pull/529,1,['predict'],['predictor-corrector']
Safety,"Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1328:759,safe,safely,759,https://qutip.org,https://github.com/qutip/qutip/pull/1328,1,['safe'],['safely']
Safety,"Notionally fixes #1179, #1185. Converts the `os.system` calls to `subprocess.run` because they're now the recommended way of doing things. I check for existence of the dependencies at import time, and emit a warning (`ImportWarning`) if they don't exist. This is ignored by the typical warning filters, so it won't actually show up for most users. If a dependency doesn't exist, then we don't define the relevant methods on the `QubitCircuit` class to avoid IPython introspecting the class object and thinking that it can make a PNG/SVG. This may not be the best way of doing things, but in this delocalised setting I think it's easier to talk/discuss around a problem with an example in front of us. In particular, I think raising `NotImplementedError` on failing to find `pdflatex` might not be the right call: if it doesn't exist, then the PNG and SVG methods of `QubitCircuit` are currently still created, and then IPython would try to call them and produce an error that isn't the fault of the user. Also, maybe there's a nicer way to make sure that the user sees the ""not found"" warnings the first time that they do something which involves a conversion? At the moment, the class just doesn't get the methods defined.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194:452,avoid,avoid,452,https://qutip.org,https://github.com/qutip/qutip/pull/1194,1,['avoid'],['avoid']
Safety,"Numpy 1.20 officially deprecated use of `np.int` and other things like `np.complex`. These were just thin aliases to Python types anyway, so that replacement is safe. Swap `float` and `complex` to `np.float64` and `np.complex128`; these still match Python precision (and standard double-precision floats), but more importantly we assume at all points in Cython code that we're dealing with double-precision arithmetic. Anything else would be a larger problem for us. In cases where `np.int` was used as a type check, we actually care more about checking for Integral typing, rather than specifically the int class; super weird constructs like; ```python; isinstance(np.int64(1), int) == False; ```; so taking indices out of an ndarry may lead to incorrect results when this sort of test is used. Better to use the abstract; ```python; isinstance(..., numbers.Integral); ```. See: https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1432:161,safe,safe,161,https://qutip.org,https://github.com/qutip/qutip/pull/1432,1,['safe'],['safe']
Safety,"On my Mac (Mojave 10.14.5) the latest development version of qutip tests can fail at different points. . First, I run into an abort trap at ptrace. . Then, upon another run, I bumped into this other abort trap error ; ```; tests/test_superop_reps.py::TestSuperopReps::test_ChoiKrausChoi Fatal Python error: Aborted. Current thread 0x000000010b9155c0 (most recent call first):; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/superop_reps.py"", line 547 in to_kraus; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_superop_reps.py"", line 106 in test_ChoiKrausChoi; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/python.py"", line 166 in pytest_pyfunc_call; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/python.py"", line 1435 in runtest; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/runner.py"", line 131 in pytest_runtest_call; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/runner.py"", line 207 in <lambda>; File ""/min",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:126,abort,abort,126,https://qutip.org,https://github.com/qutip/qutip/issues/1160,3,"['Abort', 'abort']","['Aborted', 'abort']"
Safety,Optimization flags in setup.py should be completely avoided,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/920:52,avoid,avoided,52,https://qutip.org,https://github.com/qutip/qutip/issues/920,1,['avoid'],['avoided']
Safety,"Photocurrent did not handle having 2 or more collapses in the same time step properly and the state became unnormalized in those case. This PR limit the number of collapse to 1 per time step.; It does it in a rough way and still have an avoidable `O(dt**2)` error, but it does not force to throw away the trajectory.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1010:237,avoid,avoidable,237,https://qutip.org,https://github.com/qutip/qutip/pull/1010,1,['avoid'],['avoidable']
Safety,"Qobj.expm() is currently not working properly for diagonal states which have a zero in the diagonal (these zeros don't become ones). An example:. ``` python; >>> foo = qutip.Qobj([[1.,0.],[0.,0.]]); >>> foo.expm(); Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 2.71828183 0. ]; [ 0. 0. ]]; ```. While the correct result should have been (notice the element in second row, second column):. ``` python; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 2.71828183 0. ]; [ 0. 1. ]]; ```. On analysing the source code I found the the function `sp_expm` in `sparse.py` is responsible for this computation. The particular code is reproduced below:. ``` python; def sp_expm(A, sparse=False):; """"""; Sparse matrix exponential. ; """"""; if _isdiag(A.indices, A.indptr, A.shape[0]):; A.data = np.exp(A.data); return A; if sparse:; E = spla.expm(A.tocsc()); else:; E = spla.expm(A.toarray()); return sp.csr_matrix(E); ```. Since `A.data` is stored in sparse matrix format, only non-zero elements are exponentiated. A way to avoid this problem would be to either completely remove the case of optimizing for diagonal states or modifying the appropriate code as:. ``` python; def sp_expm(A, sparse=False):; """"""; Sparse matrix exponential. ; """"""; if _isdiag(A.indices, A.indptr, A.shape[0]):; A = sp.diags(np.exp(A.diagonal()),format='csr'); return A; if sparse:; E = spla.expm(A.tocsc()); else:; E = spla.expm(A.toarray()); return sp.csr_matrix(E); ```. I am running qutip 3.2.0.dev-cb698ef; Python 3.5.1, numpy 1.10.4, scipy 0.17.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/493:1104,avoid,avoid,1104,https://qutip.org,https://github.com/qutip/qutip/issues/493,1,['avoid'],['avoid']
Safety,"QuTiP currently uses QCircuit 2 (version of 2011) to generate LaTeX circuits that are printed to screen or saved to file. A newer version of QCircuit is available, 2.6.0 (2018) https://www.ctan.org/pkg/qcircuit. * `qcircuit` could be updated to the latest version . * Also, the use of this open source package could be highlighted more evidently in the documentation. * Another package has been recently released, https://arxiv.org/abs/1809.03842, Quantikz, which has some features related to noise that could be useful especially with regard to PR #1065, Google Summer of Code project by @BoxiLi on noise modeling in QIP. As this other package is very young, maybe an option to draw the circuit with this package, instead of qcircuit, could be given, also to avoid issues.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1096:760,avoid,avoid,760,https://qutip.org,https://github.com/qutip/qutip/issues/1096,1,['avoid'],['avoid']
Safety,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433:395,safe,safely,395,https://qutip.org,https://github.com/qutip/qutip/issues/1433,1,['safe'],['safely']
Safety,"QuTiP is hosted on Anaconda's conda-forge channel and on PyPI. I would like to showcase downloads on the [website](https://github.com/qutip/qutip.github.io) and possibly have a development notebook (or in a personal repository) showing them updated, for QuTiP presentations. . * **conda install qutip**: For conda-forge, it is possible to use the `anaconda-package-data` with `dask` and `intake`, ; https://github.com/ContinuumIO/anaconda-package-data. * **pip install qutip**: For PyPI, it is possible to use, `pypinfo` ; https://github.com/ofek/pypinfo; Note that with`pypinfo` Google's Big Data queries are not free, but new accounts come with some budget credited. Some data: . *`pip install qutip` data starts in 2016. In 2018, 8000 downloads are reported. For 2019, well over 10,000 downloads are predicted. *`conda install qutip` data starts in March 2017. For 2018, 30,000 downloads have been performed. This data is useful to gauge the effective popularity of the two package managers and distribution platforms and can help in setting priorities for relative support and bug fixing. . ## Anaconda downloads; <img width=""441"" alt=""qutip-conda-forge-downloads"" src=""https://user-images.githubusercontent.com/14573436/57989417-45d94380-7ad5-11e9-9694-623fec86865b.png"">. ## PyPI downloads; ![pip-install-qutip-png](https://user-images.githubusercontent.com/14573436/57979590-df174400-7a5a-11e9-807e-c2f46bbb830e.png). With `pypinfo` we can also easily extract other information on users' machines details, such as python usage, which can provide guidance on aspects: . ### Python version; #### 2018; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 3.6 | 47.33% | 4,079 |; | 2.7 | 24.25% | 2,090 |; | 3.7 | 13.97% | 1,204 |; | 3.5 | 12.43% | 1,071 |; | 3.4 | 1.94% | 167 |; | 2.6 | 0.09% | 8 |; | Total | | 8,619 |. #### 2017; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 2.7 | 51.55% | 4,333 |; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/997:803,predict,predicted,803,https://qutip.org,https://github.com/qutip/qutip/issues/997,1,['predict'],['predicted']
Safety,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1452:494,avoid,avoids,494,https://qutip.org,https://github.com/qutip/qutip/pull/1452,1,['avoid'],['avoids']
Safety,"Revert ""Fix redundancy and sign error in jmat.""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/567:12,redund,redundancy,12,https://qutip.org,https://github.com/qutip/qutip/pull/567,1,['redund'],['redundancy']
Safety,"Scipy 1.5 changed the methods of performing the matrix multiplication to; avoid copying the `indptr` matrix multiple times. This is actually not an; issue at all for us, because we only allow int32 indices (so if the; indices were to upcast, we just throw and exception), but the underlying; private Cython call structure also changed, and our `fast_csr_matrix` was; a direct clone. We add try/catch blocks to switch on the correct types (the overhead; from a failed lookup is trivial compared to the matrix multiplication; time), because we have to support more than just the most recent version; of scipy. We could look up the version of scipy installed, but the; ""try it and see"" approach is more typical Python. This problem should be eliminated by the move to the new data types, as; we will stop relying on private scipy code. See: commit scipy/scipy@53fac7a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1298:74,avoid,avoid,74,https://qutip.org,https://github.com/qutip/qutip/pull/1298,1,['avoid'],['avoid']
Safety,"Since NumPy 1.12, `np.linspace` raises a DeprecationWarning when its third `num` parameter cannot be safely interpreted as an integer. This method is used in the `mesolve` tests. Fixed by feeding the calls to `linspace` 100 instead of 100.0. The warning (in Travis CI):; ; ![image](https://user-images.githubusercontent.com/220701/27771317-c325fe9c-5f4c-11e7-8d4b-66980255dcfd.png). The deprecation: https://github.com/numpy/numpy/releases/tag/v1.12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/708:101,safe,safely,101,https://qutip.org,https://github.com/qutip/qutip/pull/708,1,['safe'],['safely']
Safety,Solver safety,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/538:7,safe,safety,7,https://qutip.org,https://github.com/qutip/qutip/pull/538,1,['safe'],['safety']
Safety,"The `metrics.dnorm` function uses the cvxpy library to calculate the diamond norm. Twice now it has caused many test failures out of the blue #484 and #872.; It would seem like the developers do not prioritise maintaining a conda package. As this is our recommended platform, then it is a risk having this cvxpy dependence. Perhaps there is a method using scipy that we could employ?. @cgranade perhaps could provide some context?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874:289,risk,risk,289,https://qutip.org,https://github.com/qutip/qutip/issues/874,1,['risk'],['risk']
Safety,"The current QuTiP admin team (@quantshah, @BoxiLi, @ajgpitch, @Ericgig, @nwlambert, and @nathanshammah) has been working on a governance model and document in the past few months. We'd like to propose this to the broader QuTiP community of contributors and users. The main takeaway is that QuTiP has grown enormously in use in the past few years, thanks to the work of its creators, @jrjohansson and @nonhermitian, and a devoted group of core developers (among whose: @arnelg, @cgranade and many others), as well as now, over 80 [contributors](https://github.com/qutip/qutip/graphs/contributors) to the main `qutip/qutip` repository, as well as all the help on [`qutip-notebooks`](https://github.com/qutip/qutip-notebooks), [`qutip-doc`](https://github.com/qutip/qutip-doc), and [`qutip.github.io`](https://github.com/qutip/qutip.github.io) as well as the other packages that are now being spin out in the QuTiP Github organization to avoid feature creeps. Not to mention all the help provided in Qutip's google group, a forum for bugs, physics questions and research ideas. Over the years, the QuTiP project has enabled a large ecosystem of supported libraries, such as `Krotov` (cc @goerz and others), `pyEPR` (cc @zlatko-minev), `scqubits` (cc @jkochNU), and many others. . With this governance model, we'd like to keep doing what we're doing, with the support, since 2018, of @NumFOCUS, which supports scientific open source projects, and, from now on, the additional support of @unitaryfund, a non-profit that supports open-source projects in quantum technologies. . Below we reproduce a governance document that we will add to a new repository at [github.com/qutip/governance](https://github.com/qutip/governance). We are looking forward to help the growth of the user community, engage it with code contributions and bug reports, and make this awesome scientific open-source project even more sustainable. We will update all related information at [github.com/qutip/governance](https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:935,avoid,avoid,935,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['avoid'],['avoid']
Safety,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1479:495,avoid,avoid,495,https://qutip.org,https://github.com/qutip/qutip/pull/1479,1,['avoid'],['avoid']
Safety,"The include a new class to represent time dependent Qobj system.; It's take the list of Qobj and coefficient in the format normally accepted by solvers like mesolve and mcsolve and make an object of it.; The td_Qobj is callable and return the Qobj at the desired time, it support math (+,-,*) and unitary transformations: conj, dag, transpose.; The object has a cython compiled version with cython call to spmv and expect in order to be efficient in solvers.; I made it as a tool used by solver (stochatic/mcsolve), therefore may lack some features for users. Also the naming of some methods only make sense in a solver (rhs).; Lastly, this branch include it's own cubic spline code since the version available when I started working on it only accepted uniformly sampled data. This part may have become redundant. This branch only contain the new object, not the solvers using it.; This pull request replace half the ""cythonizing mcsolve"" pull request.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/814:804,redund,redundant,804,https://qutip.org,https://github.com/qutip/qutip/pull/814,1,['redund'],['redundant']
Safety,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1577:577,detect,detection,577,https://qutip.org,https://github.com/qutip/qutip/pull/1577,1,['detect'],['detection']
Safety,"The solver safety check did not work for a list of Python funcs as the td input. This fixes that, and allows for e_ops to be a Python callback function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/687:11,safe,safety,11,https://qutip.org,https://github.com/qutip/qutip/pull/687,1,['safe'],['safety']
Safety,"These are the files that Boxi (@BoxiLi) was checking in #1181, but the commits are tidied up and rebased onto `master`. The merge conflict in `test_gates.py` that's present in #1181 is fixed (with all the tests safely maintained). This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:211,safe,safely,211,https://qutip.org,https://github.com/qutip/qutip/pull/1251,1,['safe'],['safely']
Safety,"This is causing test failures in all CI builds against scipy 1.5 currently. The other failing tests on scipy 1.5 are due to changes to the handling of `csr` matmul operations, which is fixed in patch #1298. As far as I can see, there is no way to recover the exact same behaviour as existed in scipy < 1.5 (there's optimisations of the `lwork` input to the LAPACK routine), and consequently we are not getting the exact same set of eigenvectors for problem dimensions > 32. This does not mean that `brtools` is suddenly doing something wrong. It just means that the test assumed we would have the exact same output as `scipy`, and we don't any more. . This is an annoying problem to fix, I think. Two possible methods:. 1. attempt to ""trick"" scipy into doing the same pre-1.5 behaviour. Possibly this would involve monkey-patching out the ability of `eigh` to optimise the `lwork` parameters (i.e. stubbing out `scipy.linalg.lapack._compute_lwork` to always return `lwork=18*nrows`, `lrwork=24*nrows` and `liwork=10*nrows` to match `qutip.cy.brtools.ZHEEVR`).; 2. do some linear algebra work to determine that the eigenvectors we have returned are equivalent to the ones scipy has returned. 2 is a better solution, but harder to implement, especially in the presence of degenerate or near-degenerate eigenvalues (of which there are likely a lot around 0). 1 is very unsatisfying, but might be enough. In general, this problem will hopefully be solved a bit more thoroughly when `brmesolve` is updated to use the new data layer types, and we standardise the calculation of eigenvalues and -vectors across QuTiP. Hopefully someone has a better idea than me? @Ericgig, @nonhermitian.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299:247,recover,recover,247,https://qutip.org,https://github.com/qutip/qutip/issues/1299,1,['recover'],['recover']
Safety,"This may seem like a pedantic change, but is does (very slightly) improve performance in hsolve, and also avoids addressing an array index as a non-integer. Seems to make sense for the state numbers to be integers anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/446:106,avoid,avoids,106,https://qutip.org,https://github.com/qutip/qutip/pull/446,1,['avoid'],['avoids']
Safety,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1589:171,sanity check,sanity checks,171,https://qutip.org,https://github.com/qutip/qutip/pull/1589,1,['sanity check'],['sanity checks']
Safety,"This pull implements a safety check where the Qobj data class is validated as fast_csr_matrix type everytime the Q.data attribute is set. This guarantees that the Qobj's have the correct data type. This was not always true previously. In addition, many items are fixed so that the above rule passes. Finally, we no longer need the tests that check for Qobj csr_matrix type. This is now strictly enforced.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609:23,safe,safety,23,https://qutip.org,https://github.com/qutip/qutip/pull/609,1,['safe'],['safety']
Safety,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:978,unsafe,unsafe,978,https://qutip.org,https://github.com/qutip/qutip/pull/1362,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"This should at least partially address #377, as it seems that `from __future__ import absolute_import` isn't causing the built-in `logging` to appear in preference to `qutip.logging` on Windows 8. Given the hassles of calling both `logging`, the idea behind this PR is to just rename and avoid conflicts that way.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379:288,avoid,avoid,288,https://qutip.org,https://github.com/qutip/qutip/pull/379,1,['avoid'],['avoid']
Safety,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1474:573,avoid,avoid,573,https://qutip.org,https://github.com/qutip/qutip/pull/1474,1,['avoid'],['avoid']
Safety,"This took longer than anticipated because of a bunch of knock-on nasty Cython problems, and I struggled to get OpenMP running locally on macOS ([but I've got it now](https://www.binhbar.com/posts/2020/06/compiling-openmp-libraries-on-macos/)). Tag: @Ericgig, @ajgpitch. ---. Separate out what will become the ""core"" of qutip into its own subpackage. This package is intended to have most of its public symbols re-imported into the global package namespace. There should be no substantive changes to any actual worker code in this large commit, just what is necessary to carve out a major entangled part of the core library. Some files currently in core may be moved out in a future version (e.g. graph, metrics, semidefinite), but right now they are too entangled with `Qobj` or other true-core parts, and to remove them now would require too much substantive change to the code, which would be difficult to review in this commit. Major changes required as part of this:; - module-level imports (e.g. `from qutip.qobj import Qobj`) are replaced with simple ones from the namespace (e.g. `from qutip import Qobj`). While inside the `core` package, imports are kept as module-specific, largely to support the mess of circular imports present in qutip at the more.; - .pxi files are no longer recommended as the way to share code between Cython files, so these have been converted into proper Cython modules and added to the distribution.; - collection of Cython extension components in `setup.py` is consolidated to support them no longer all existing in the same place. As the data layer is fleshed out, likely there will be even more Cython locations present.; - the test for OpenMP in `__init__.py` had to be made more indirect via importlib to avoid causing a full import of `qutip.core`, which would in turn cause Qobj and other parts to be imported. These components required `__init__.py` to have discovered whether OpenMP existed already before they were imported, causing false negatives.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282:1746,avoid,avoid,1746,https://qutip.org,https://github.com/qutip/qutip/pull/1282,1,['avoid'],['avoid']
Safety,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579:353,detect,detection,353,https://qutip.org,https://github.com/qutip/qutip/pull/1579,2,"['detect', 'redund']","['detection', 'redundant']"
Safety,"Unstable `qutip.testing.run()` prompts abort traps locally (Mac, Python 3.7)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:39,abort,abort,39,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['abort'],['abort']
Safety,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1550:274,safe,safe,274,https://qutip.org,https://github.com/qutip/qutip/pull/1550,1,['safe'],['safe']
Safety,Variable used before declaration in `smesolve` for heterodyne detection.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2078:62,detect,detection,62,https://qutip.org,https://github.com/qutip/qutip/issues/2078,1,['detect'],['detection']
Safety,When using the `average_states` solver option `general_stochastic` seemed to error when summing the timeslot states. This PR provides a fix for this. Also included is some hopefully more succinct messages from the safety checks in `general_stochastic`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115:214,safe,safety,214,https://qutip.org,https://github.com/qutip/qutip/pull/1115,1,['safe'],['safety']
Safety,Why is heterodyne considered as a special case? To me the heterodyne detection scheme looks like a case of the homodyne detection. What do I miss?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/54:69,detect,detection,69,https://qutip.org,https://github.com/qutip/qutip/issues/54,2,['detect'],['detection']
Safety,"With cython0.29 that came out this weeks there where warning at ""cythonization"" about language_level. Complied with it by adding `#cython: language_level=3` at the start of every .pyx and .pxd. Also rename the cy/*testing* files to cy/*checks* since nose detected them as tests to run which caused automated tests to fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/927:255,detect,detected,255,https://qutip.org,https://github.com/qutip/qutip/pull/927,1,['detect'],['detected']
Safety,"ables to pass to the function. For backward compatibility; ```; def f(t, state, args):; return ...; ```; is also accepted if the option `rhs_with_state` is set to `True`. . But there have been demand to accept more signatures: `f(t)` and `f(t, **args)`. PR #1123, when ready, should allow both signature using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work well but they need to be removed for the new signature candidate (`f(t, **args)`). Also you cannot remove / fix to a constant them once declared. Since they are not used/working yet, now is the time to change to something better. I could see 2 other options:; - reserved keys: `args = {",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:1270,detect,detection,1270,https://qutip.org,https://github.com/qutip/qutip/issues/1136,1,['detect'],['detection']
Safety,add isunitary attribute for checking if qobj is a unitary operator:; unitary checking func and property funcs added; initialisation of isunitary; clear flag on operations that risk unitarity; qobj unitarity testing added; preset isunitary for qeye,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817:176,risk,risk,176,https://qutip.org,https://github.com/qutip/qutip/pull/817,1,['risk'],['risk']
Safety,add timeout,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787:4,timeout,timeout,4,https://qutip.org,https://github.com/qutip/qutip/pull/1787,1,['timeout'],['timeout']
Safety,"antiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2737,avoid,avoided,2737,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['avoid'],['avoided']
Safety,"args):; t = np.clip(t, tlist_control_points[0], tlist_control_points[-1]); coeff = spline_corrected(t).item(); return coeff * h_drive. tlist_state_eval = np.linspace(-0.1, 1.1, int(1e4)). res_qobjevo = qt.sesolve(qobjevo, initial_state, tlist=tlist_state_eval, options=options); res_calling_qobjevo = qt.sesolve(calling_qobjevo, initial_state, tlist=tlist_state_eval, options=options); res_callable_corrected = qt.sesolve(callable_corrected, initial_state, tlist=tlist_state_eval, options=options). # complex argument of <1|s(t)>, for each state |s(t)> in the trajectory for each of the three Hamiltonians; angle_qobjevo = np.angle(np.array([np.array(s).flatten()[1] for s in res_qobjevo.states])); angle_calling_qobjevo = np.angle(np.array([np.array(s).flatten()[1] for s in res_calling_qobjevo.states])); angle_callable_corrected = np.angle(np.array([np.array(s).flatten()[1] for s in res_callable_corrected.states])). # the interpolated control value at time t can be recovered as the time derivative of the complex argument of <1|s(t)>; interpolated_controlvalue_qobjevo = np.gradient(angle_qobjevo, tlist_state_eval); interpolated_controlvalue_calling_qobjevo = np.gradient(angle_calling_qobjevo, tlist_state_eval); interpolated_controlvalue_callable_corrected = np.gradient(angle_callable_corrected, tlist_state_eval). fig, axs = plt.subplots(2); axs[0].plot(tlist_state_eval, interpolated_controlvalue_qobjevo, label='passing qobjevo', marker='.'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo, label='passing qobjevo as callable'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected, label='callable H, corrected'); axs[0].grid(); axs[0].legend(); axs[0].set_ylabel('interpolated values of control parameter'). axs[1].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo - interpolated_controlvalue_qobjevo,; label='passing qobjevo as callable - qobjevo'); axs[1].plot(tlist_state_eval, interpolated_controlvalue_callable_correct",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2063:2201,recover,recovered,2201,https://qutip.org,https://github.com/qutip/qutip/issues/2063,1,['recover'],['recovered']
Safety,"as the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2374,timeout,timeout,2374,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['timeout'],['timeout']
Safety,"b169eb3285818ba1390ddf2771d897e6e""><code>aeb51cb</code></a> Merge branch 'main' into lcms</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/5beb0b66648db8b542bb5260eed79b25e33d643b""><code>5beb0b6</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cac6ffa7b399ea79b6239984d1307056a0b19af2""><code>cac6ffa</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7927"">#7927</a> from python-pillow/imagemath</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f5eeeacf7539eaa0d93a677d7666bc7c142c8d1c""><code>f5eeeac</code></a> Name as 'options' in lambda_eval and unsafe_eval, but '_dict' in deprecated eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/facf3af93dabcbdd8cdbda8c3b50eefafa3bb04c""><code>facf3af</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</sum",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:14884,avoid,avoid,14884,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['avoid'],['avoid']
Safety,"both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1456,Timeout,Timeout,1456,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['Timeout'],['Timeout']
Safety,"ced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Lim",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:5230,avoid,avoid,5230,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['avoid'],['avoid']
Safety,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:143,risk,risk,143,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['risk'],['risk']
Safety,"e preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; lapack",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1514,detect,detect,1514,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detect']
Safety,"em. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction arguments will be as well (e.g. `State` will take only `int`, which is immutable). This means that singleton instances can be found by looking them up in a global store, similar to Python's `bui",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:6123,safe,safely,6123,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['safe'],['safely']
Safety,"ems like the 'tol' has no effect on the 'predictor-corrector' solver. Here's my code. I was trying to use stochastic master equation to generate the outcome photon sequence from a CPT set up, but I got a diverged outcome sometimes. ```; from qutip import *; import matplotlib.pyplot as plt; import numpy as np; import matplotlib as mpl. params = {; 	'axes.labelsize': 12,; 	'legend.fontsize': 10,; 	'xtick.labelsize': 10,; 	'ytick.labelsize': 10,; 	'figure.figsize': [3*1.4/1.2, 2.8/1.2],#2.3; 	'lines.linewidth' : 1,; 	'axes.linewidth':0.9,; 	'figure.subplot.left':0,; 	'figure.subplot.right':1,; 	'figure.subplot.bottom':0,; 	'figure.subplot.top':1,; 	'grid.linestyle':'--',; 	'axes.grid':False,; 	""font.family"":""serif"",; 	""xtick.direction"":""in"",; 	""ytick.direction"":""in"",. 	}; mpl.rcParams.update(params). T = 100; N = 100000; Gamma = 2*np.pi*13; Omega = 2*np.pi*2. times = np.linspace(0,T,N); ge = fock(3, 0) * fock(3, 1).dag(); se = fock(3, 2) * fock(3, 1).dag(); ss = fock(3, 2) * fock(3, 2).dag(); ee = fock(3, 1) * fock(3, 1).dag(); dark = (fock(3, 2) - fock(3, 0)).unit(); dd = dark*dark.dag(). bias = 2*np.pi*0.1. psi0 = dark. H = Omega * (ge + ge.dag() + se + se.dag()) + bias*ss. result_sme = photocurrent_mesolve(H, psi0, times, c_ops = [],sc_ops = [np.sqrt(Gamma/2)*ge + np.sqrt(Gamma/2)*se]\; 	, e_ops = [dd, ee], store_measurement=True, options=Options(store_states=True), nsubsteps=100, \; 	solver='predictor-corrector'). hermitian = [(result_sme.states[0][i]).isherm for i in range(N)]. plt.plot(times, result_sme.expect[0], color = 'orange', label='dark'); plt.plot(times, result_sme.expect[1], color = 'black', label='e'); plt.plot(times, hermitian, color = 'blue'); plt.xlim(0,100); plt.xlabel('Time'); plt.ylabel('Population'); plt.savefig('sme.pdf',bbox_inches='tight',pad_inches=0); plt.close(). ```; And the result,; [sme.pdf](https://github.com/qutip/qutip/files/5207120/sme.pdf); (The decline of the blue curve means the density matrix is no longer Hermitian thus diverge.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357:1539,predict,predictor-corrector,1539,https://qutip.org,https://github.com/qutip/qutip/issues/1357,1,['predict'],['predictor-corrector']
Safety,"en `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict about enforcing `Qobj.type`-safety with input types to arithmetic operations, particularly with 1D subspaces; - `Qobj` understands the `@` operator to mean matrix multiplication (it still understands `Qobj * Qobj` to be matrix multiplication as well); - `Qobj` instantiation is massively faster (lower-bounded by ~5µs compared to the previous ~70µs) in internal use and when doing arithmetic. QuTiP internal functions are now much more aggressive at passing in the `type` and `copy=False` arguments, cutting out most type inference and unnecessary copying of data which were the largest time sinks. Discussions about the implementation of multiple-dispatch methods are on-going in the repository [jakelishman/qutip-dispatch](https://github.com/jakelishman/qutip-dispatch). See in particular some discussion in jakelishman/qutip-dispatch#1. Other discussions are also at the [`data-layer-devs` discussion board](https://github.com/orgs/qutip/teams/data-layer-devs).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:3511,safe,safety,3511,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['safe'],['safety']
Safety,"equests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an extra leading <code>/</code> (path separator) could lead; urllib3 to unnecessarily reparse the request URI. (<a href=""https://redirect.github.com/psf/requests/issues/6644"">#6644</a>)</li>; </ul",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:5130,detect,detection,5130,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['detect'],['detection']
Safety,"etails>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784""><code>c9016bf</code></a> Release 1.26.17</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb""><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=""https://redirect.github.com/urllib3/urllib3/issues/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:2317,timeout,timeout,2317,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['timeout'],['timeout']
Safety,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:4084,sanity check,sanity check,4084,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['sanity check'],['sanity check']
Safety,"ginal GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data.Data`; - `bra * ket` now returns a scalar, not a `Qobj` (no need to do `(bra * ket).data[0, 0]` or `(bra * ket).tr()`) any more; - 1D subspaces in `Qobj.dims` are now never contracted silently (they were, but inconsistently before), but the new function `Qobj.contract()` can be called to do this explicitly; - `Qobj` no longer defines `__array__`, and so cannot be treated as if it is a numpy array. Having this led to inconsistent behaviour when `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict about enforcing `Qobj.type`-safety with input types to arithmetic operations, particularly wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:2569,unsafe,unsafe,2569,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['unsafe'],['unsafe']
Safety,"gmaz() + 1j * qt.sigmax(); initial = qt.basis(2, 1); res1 = qt.mesolve(H, qt.ket2dm(initial), [0, 1]); print(res1.final_state). L = qt.liouvillian(qt.sigmaz()) + 1j * qt.lindblad_dissipator(qt.sigmap()); res2 = qt.mesolve(L, initial, [0, 1]); print(res2.final_state); ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; Qobj data =; [[-0.33333333+0.j 0.33333333-0.33333333j]; [-0.33333333-0.33333333j 0.66666667+0.j ]]. Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; Qobj data =; [[0.23467737+0.42957377j 0. +0.j ]; [0. +0.j 0.27582588-0.42957377j]]; ```. ### Expected Behaviour. For both states, `isherm` should be `False`. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+5fabdd3; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The source of the issue is that `_prepare_state` ([link](https://github.com/qutip/qutip/blob/master/qutip/solver/solver_base.py#L86)) and `_restore_state` ([link](https://github.com/qutip/qutip/blob/master/qutip/solver/solver_base.py#L99)) of the `solver_base` module assume that the dynamics preserves the Hermiticity of the state. The `isherm` attribute of the initial state is saved and copied into the output state. We could try to detect whether the Hamiltonian is Hermitian / whether the Liouvillian is Hermiticity-preserving, but @Ericgig mentioned in https://github.com/qutip/qutip/pull/2408 that this solution could be difficult with time-dependent problems. As an aside, I just noticed another potential small issue. This code; ```; res3 = qt.mesolve(H, initial, [0, 1]); print(qt.ket2dm(res3.final_state)); ```; has a different output compared with the `res1` above (because `sesolve` is used, which can of course never produce non-Hermitian states).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2410:1818,detect,detect,1818,https://qutip.org,https://github.com/qutip/qutip/issues/2410,1,['detect'],['detect']
Safety,"hould not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an invalid URI that will not cause httpbin to throw 500</li>; <li><a href=""https://github.com/psf/requests/commit/2d5f54779ad174035c5437b3b3c1146b0eaf60fe""><code>2d5f547</code></a> Pin 3.8 and 3.9 runners back to macos-13 (<a href=""https://redirect.github.com/psf/requests/issues/6688"">#6688</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/f1bb07d39b74d6444e333879f8b8a3d9dd4d2311""><code>f1bb07d</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:8307,detect,detection,8307,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['detect'],['detection']
Safety,"hrough mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1152,avoid,avoid,1152,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['avoid'],['avoid']
Safety,"ing second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the wor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1934,abort,aborts,1934,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['abort'],['aborts']
Safety,"ing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product structure. Some of this is because QuTiP allows us to construct objects which do not have a really rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:3395,safe,safety,3395,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['safe'],['safety']
Safety,"istests now return False if the object is not a Qobj instead of; raising an exception. In order to avoid a cyclical import qobj.py ->; istests.py -> qobj.py the istests have been moved to qobj.py and are; imported in istests.py for backwards compatability, closes #2. Sorry for the first failed attempt. I should also add some tests before that goes in I suppose. Just wanted to start the discussion about the cyclical import issue",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/4:99,avoid,avoid,99,https://qutip.org,https://github.com/qutip/qutip/pull/4,1,['avoid'],['avoid']
Safety,"ith a float<1e-12 makes all entries 0.0. This can be worked-around as follows:. ``` python; import qutip as qt. print ""Multiplying states by small numbers""; state3 = qt.ket([0])*1e-12; state2 = qt.ket([0])*9.999e-13; state1 = qt.ket([0]); state1 = qt.Qobj(state1.data*9.999e-13); print 'Desired:', state3; print 'Undesired:', state2; print 'Desired, via workaround:', state1; ```. ```; Multiplying states by small numbers; Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 1.00000000e-12]; [ 0.00000000e+00]]; Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 0.]; [ 0.]]; Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 9.99900000e-13]; [ 0.00000000e+00]]; ```. But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators' values are all >1e-12:. ``` python; print ""Expectation values with small operators""; detector = qt.Qobj([[1e-12, 0], [0, 0]]); print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-6, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); detector = qt.Qobj([[1e-14, 0], [0, 0]]); print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-7, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); ```. ```; Expectation values with small operators; Expectation value for one detector, 1e-12: 1e-12; Expectation value for two detectors, 1e-6: 1e-12; Expectation value for one detector, 1e-14: 1e-14; Expectation value for two detectors, 1e-7: 0.0; ```. It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current be",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521:1113,detect,detector,1113,https://qutip.org,https://github.com/qutip/qutip/issues/521,1,['detect'],['detector']
Safety,"kup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lifting is done when `add_specialisations` or `rebuild_lookup` is called. On call, the generic signature `(*args, **kwargs)` has to be bound to the actual signature of the underlying operation, regardless of whether the specialisation has already been found. At the Cython level there is short-circuit access to the call machinery in the specialisations themselves, but this cannot be safely exposed outside of the `Dispatcher` class itself.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:17657,safe,safely,17657,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['safe'],['safely']
Safety,"low/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:6227,SAFE,SAFEBLOCK,6227,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['SAFE'],['SAFEBLOCK']
Safety,"method` options, as it is in other solver.; - The method that was referring the homodyne or heterodyne detection is now the `heterodyne` keyword. ie before `method=""heterodyne""` now `heterodyne=True`.; - The default integration method is now `rouchon`, instead of `taylor1.5`. ie the method coming from a physic paper and not a mathematics textbook. . - The stochastic integration methods have been spitted in smaller chunk instead of the huge classes in _stochastic.pyx. I kept most methods, only skipping the taylor order 2.0 method. The python interface is kept very similar to the `Integrator` as `SIntegrator`, the main difference being that `set_state` and `get_state` use an extra random number generator with the time and state. The integration methods are usually 5%~10% slower than they where for medium size problems (shape ~100). Most method are computed the same way as before, but the rouchon method no longer use super operator, but keep the density matrix as a matrix and not an oper-ket. - The derivative computation for used by the integration method has also been split into multiple functions and made only available for `smesolve`. For there methods to be valid, the each diffusion contribution must commute. For `smesolve`, this means that each `sc_ops` must commute, as documented. For `ssesolve`, each `sc_ops` must not only commute, but also commute with other `sc_ops`'s adjoint, this last part being missing from v4's documentation. It also meant that the sc_ops needed to commute with it's own adjoint when using heterodyne detection... - `ssepdpsolve`, `smepdpsolve`, `photocurrent_mesolve`, `photocurrent_sesolve` removed. They are all less efficient variants of `mcsolve`. `mcsolve` already include the photocurrent in the output. - `general_stochastic`, removed. It is a mostly generic stochastic equation solver. The user to define their equations to integrate, but the results are forced into `Results` with expectation values and dims checks, making it hard to use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2131:2094,detect,detection,2094,https://qutip.org,https://github.com/qutip/qutip/pull/2131,1,['detect'],['detection']
Safety,"n in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and para",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1187,avoid,avoid,1187,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['avoid'],['avoid']
Safety,"n(msg, UmfpackWarning); > > > ok; > > > correlation: compare spectrum obtained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. num",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2693,detect,detection,2693,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['detect'],['detection']
Safety,"ne 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 246 in _main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 196 in wrap_session; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 239 in pytest_cmdline_main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/config/__init__.py"", line 92 in main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/testing.py"", line 45 in run; File ""<stdin>"", line 1 in <module>; Abort trap: 6; ```; This is in a conda environment with qutip development version with ; ```; Python 3.7.4 (default, Aug 13 2019, 15:17:50); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; ```; and ; ```; QuTiP Version: 4.5.0.dev0+d13f5435; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:4519,Abort,Abort,4519,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['Abort'],['Abort']
Safety,"ng tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2110,timeout,timeout,2110,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,"ntain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4939,avoid,avoids,4939,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['avoid'],['avoids']
Safety,"oat<1e-12 makes all entries 0.0. This can be worked-around as follows:. ``` python; import qutip as qt. print ""Multiplying states by small numbers""; state3 = qt.ket([0])*1e-12; state2 = qt.ket([0])*9.999e-13; state1 = qt.ket([0]); state1 = qt.Qobj(state1.data*9.999e-13); print 'Desired:', state3; print 'Undesired:', state2; print 'Desired, via workaround:', state1; ```. ```; Multiplying states by small numbers; Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 1.00000000e-12]; [ 0.00000000e+00]]; Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 0.]; [ 0.]]; Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 9.99900000e-13]; [ 0.00000000e+00]]; ```. But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators' values are all >1e-12:. ``` python; print ""Expectation values with small operators""; detector = qt.Qobj([[1e-12, 0], [0, 0]]); print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-6, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); detector = qt.Qobj([[1e-14, 0], [0, 0]]); print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-7, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); ```. ```; Expectation values with small operators; Expectation value for one detector, 1e-12: 1e-12; Expectation value for two detectors, 1e-6: 1e-12; Expectation value for one detector, 1e-14: 1e-14; Expectation value for two detectors, 1e-7: 0.0; ```. It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current behaviour.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521:1188,detect,detector,1188,https://qutip.org,https://github.com/qutip/qutip/issues/521,17,['detect'],"['detector', 'detectors']"
Safety,"ort qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1151,detect,detected,1151,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detected']
Safety,"r to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:1532,avoid,avoid,1532,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['avoid'],['avoid']
Safety,"re included. It seems difficult to write better unit tests for such timing-sensitive behavior, but I have tested in detail on both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is excee",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1320,timeout,timeout,1320,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,rho0 arguments replaced with psi0; references to density matrices removed; Just to avoid any confusion. No functional changes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/812:83,avoid,avoid,83,https://qutip.org,https://github.com/qutip/qutip/pull/812,1,['avoid'],['avoid']
Safety,"rom the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:1177,safe,safety,1177,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['safe'],['safety']
Safety,"s by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed numb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:1383,predict,predictions,1383,https://qutip.org,https://github.com/qutip/qutip/issues/1605,1,['predict'],['predictions']
Safety,"s://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https:/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:1365,avoid,avoid,1365,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['avoid'],['avoid']
Safety,"sks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If you agree with that, I will then also remove it from the available options for `MultiTrajSolver` and all its subclasses.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2531,timeout,timeout,2531,https://qutip.org,https://github.com/qutip/qutip/pull/2280,4,"['abort', 'timeout']","['aborting', 'timeout', 'timeouts']"
Safety,"sting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1476,safe,safe,1476,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['safe'],['safe']
Safety,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2404,timeout,timeout,2404,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,"['Timeout', 'timeout']","['TimeoutError', 'timeout']"
Safety,"tation</strong></p>; <ul>; <li>Various typo fixes and doc improvements.</li>; </ul>; <p><strong>Packaging</strong></p>; <ul>; <li>Requests has started adopting some modern packaging practices.; The source files for the projects (formerly <code>requests</code>) is now located; in <code>src/requests</code> in the Requests sdist. (<a href=""https://redirect.github.com/psf/requests/issues/6506"">#6506</a>)</li>; <li>Starting in Requests 2.33.0, Requests will migrate to a PEP 517 build system; using <code>hatchling</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:7771,Avoid,Avoid,7771,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['Avoid'],['Avoid']
Safety,"tion purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:3819,safe,safely,3819,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['safe'],['safely']
Safety,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:2035,risk,risk,2035,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['risk'],['risk']
Safety,"utput_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d878ab80 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> qutip.tensor([z_instrument] * 2); QInstrument id=2e7d8a1dcd0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(0, 0) Par(0, 1) Par(1, 0) Par(1, 1); }; ```. Impossible outcomes are detected and truncated automatically:. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d8a6e130 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> z_instrument.with_finite_visibility(0.95) ** 2; QInstrument id=2e7d8a6ef10 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 0) Seq(0, 1) Seq(1, 1); }; ```. Arbitrary subsystem dims are supported:. ```python; >>> qutip.QInstrument.basis_measurement(3); QInstrument id=2e7d5ca4eb0 {; dims [[[3], [3]], [[3], [3]]]; outcomes Seq(0,) Seq(1,) Seq(2,); }; ```. Incomplete instruments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInst",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:2893,detect,detected,2893,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['detect'],['detected']
Safety,"ved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c90",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:1970,safe,safety,1970,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['safe'],['safety']
Safety,wrong logic detecting BLAS support discrepant from numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:12,detect,detecting,12,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detecting']
Safety,"yle](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:1539,predict,predict,1539,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['predict'],['predict']
Security," ; ```. and I get this error repeatedly when using the `steadystate` function. . ```; OSError Traceback (most recent call last); <ipython-input-3-4ef4797a881f> in <module>; 30 g2_v = []; 31 for p, x in enumerate(Gamma_vec):; ---> 32 j, z = calculate_avg_photons(N, x); 33 print(p); 34 n_avg.append(j). <ipython-input-3-4ef4797a881f> in calculate_avg_photons(N, Gamma); 18 c_ops.append(np.sqrt(rate)*sm.dag()); 19 ; ---> 20 rho = steadystate(H,c_ops); 21 n_cav = expect(a.dag()*a,rho); 22 g2_cav = expect(a.dag()*a.dag()*a*a,rho)/(n_cav**2). ~\Anaconda\lib\site-packages\qutip\steadystate.py in steadystate(A, c_op_list, method, solver, **kwargs); 288 if (ss_args['solver'] == 'scipy' and ss_args['sparse']) \; 289 or ss_args['solver'] == 'mkl':; --> 290 return _steadystate_direct_sparse(A, ss_args); 291 else:; 292 return _steadystate_direct_dense(A, ss_args). ~\Anaconda\lib\site-packages\qutip\steadystate.py in _steadystate_direct_sparse(L, ss_args); 458 max_iter_refine=ss_args['max_iter_refine'],; 459 scaling_vectors=ss_args['scaling_vectors'],; --> 460 weighted_matching=ss_args['weighted_matching']); 461 _direct_end = time.time(); 462 ss_args['info']['solution_time'] = _direct_end-_direct_start. ~\Anaconda\lib\site-packages\qutip\_mkl\spsolve.py in mkl_spsolve(A, b, perm, verbose, **kwargs); 391 # Do dense RHS solving; 392 if not b_is_sparse:; --> 393 x = lu.solve(b, verbose=verbose); 394 # Solve each RHS vec individually and convert to sparse; 395 else:. ~\Anaconda\lib\site-packages\qutip\_mkl\spsolve.py in solve(self, b, verbose); 168 byref(c_int(33)), byref(c_int(self._dim)), self._data, self._indptr, self._indices,; 169 self._np_perm, byref(c_int(nrhs)), self._np_iparm, byref(c_int(0)), np_b,; --> 170 np_x, np_error); 171 self._solve_time = time.time() -_solve_start; 172 if error[0] != 0:. OSError: exception: access violation reading 0x0000000000000008; ``` . The does not raise every time I use the function and it has a different number at the end everytime it is shown.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1077:2885,access,access,2885,https://qutip.org,https://github.com/qutip/qutip/issues/1077,1,['access'],['access']
Security," <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/152"">#152</a> from elliotwutingfeng/dev</li>; <li><a href=""https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1788,secur,security,1788,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['secur'],['security']
Security," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: langua",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:16770,access,access,16770,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_ti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:21900,access,access,21900,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security," and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><code>d594f4c</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/909dc64ed5f676169aa3d9b0c26f132a06321b83""><code>909dc64</code></a> 9.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3""><code>1a51ce7</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:13742,secur,security-,13742,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['secur'],['security-']
Security," function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1753,validat,validate,1753,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['validat'],['validate']
Security," structure type `dimensions._Parsed` inside `Qobj` which is constructed once, and keeps all details of the parsing so they need not be repeated. Determine `Qobj.type` from this data structure; 3. maintain knowledge of the individual `type` of every subspace in the full Hilbert space (e.g. with a list). There is still a ""global"" `Qobj.type`, but this can now be one in the set `{'bra', 'ket', 'oper', 'scalar', 'super', 'other'}`. `'other'` is for when the individual elements do not all match each other. Individual elements cannot be `'other'`. `'scalar'` is added to operations can keep track of tensor elements which have been contracted, say by a `bra-ket` product - operations will then broadcast scalar up to the correct dimensions on certain operations.; 4. dimension parsing is now sped up by using the operation-specific type knowledge. For example, `bra + bra -> bra`, and `ket.dag() -> bra`. Step 3 is necessary to allow matrix multiplication to work. These lookups could be done with enum values instead of string hashing. # Technical details. As of QuTiP 4.5 (and all previous versions), `Qobj` instantiation is slow and this permeates through to all operations on `Qobj`. Matrix multiplication, scalar multiplication, addition and so forth all need to instantiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can somet",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:1531,hash,hashing,1531,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['hash'],['hashing']
Security,"""><code>a04dfef</code></a> Updated the pypi-publish action</li>; <li><a href=""https://github.com/pypa/wheel/commit/94bb62cb182023ac6586c5510ae9031ea56bd682""><code>94bb62c</code></a> Fixed docs not building due to code style changes</li>; <li><a href=""https://github.com/pypa/wheel/commit/d635664abe560d48723cfc3b73c52ad8c906760a""><code>d635664</code></a> Updated the codecov action to the latest version</li>; <li><a href=""https://github.com/pypa/wheel/commit/fcb94cd51f7dfd40d88dff37415750d9e3638d3b""><code>fcb94cd</code></a> Updated <strong>version</strong> to match the release</li>; <li>Additional commits viewable in <a href=""https://github.com/pypa/wheel/compare/0.37.0...0.38.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=wheel&package-manager=pip&previous-version=0.37.0&new-version=0.38.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:5128,secur,security-vulnerabilities,5128,https://qutip.org,https://github.com/qutip/qutip/pull/2052,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"""malloc: Incorrect checksum"" error in qutip.testing qt.run()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:19,checksum,checksum,19,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['checksum'],['checksum']
Security,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1823:169,access,accessing,169,https://qutip.org,https://github.com/qutip/qutip/issues/1823,1,['access'],['accessing']
Security,"### Bug Description. When you try to access the nnz attribute of a Qobj in CSR format it gives you an error that the qutip.core.csr.CSR class does not have an nnz attribute. . ### Code to Reproduce the Bug. ```shell; qutip.qeye(3).to(""CSR"").data.nnz; ```. ### Code Output. ```shell; AttributeError Traceback (most recent call last); Cell In[46], line 1; ----> 1 qutip.qeye(3).to(""CSR"").data.nnz. AttributeError: 'qutip.core.data.csr.CSR' object has no attribute 'nnz'; ```. ### Expected Behaviour. 3. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.24.2; Scipy Version: 1.10.0; Cython Version: 0.29.37; Matplotlib Version: 3.7.0; Python Version: 3.10.12; Number of CPUs: 4; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2481:37,access,access,37,https://qutip.org,https://github.com/qutip/qutip/issues/2481,1,['access'],['access']
Security,"### Problem Description. Now that qutip-qip has moved to another package, gates are not available in the main repo. This is inconvenient for examples such as the control optimization ones, where one would need to install the qutip-qip package just to access say the Hadamard or CNOT for instance. ### Proposed Solution. The easiest solution would be just to copy the `gates.py` file from the QIP package into the main repo. Perhaps might confuse imports in qip? Also, I think that file has func defs that refer to 'controls' that might not make sense in this repo. ### Alternate Solutions. Have a file called `operations.py`. Just have a subset of the gates (operations), the most typical named unitaries - sounds less QIP like and would avoid import confusion. I think also `hadamard_transform` could be shortened to `hadamard`, but also include the original name. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389:251,access,access,251,https://qutip.org,https://github.com/qutip/qutip/issues/2389,1,['access'],['access']
Security,"#7246</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageFont.MAX_STRING_LENGTH <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7244"">#7244</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Fix Windows build with pyproject.toml <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7230"">#7230</a>; [hugovk, nulano, radarhere]</p>; </li>; <li>; <p>Do not close provided file handles with libtiff <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7199"">#7199</a>; [radarhere]</p>; </li>; <li>; <p>Convert to HSV if mode is HSV in getcolor() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7226"">#7226</a>; [radarhere]</p>; </li>; <li>; <p>Added alpha_only argument to getbbox() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7123"">#7123</a>; [radarhere. hugovk]</p>; </li>; <li>; <p>Prioritise speed in <em>repr_png</em> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7242"">#7242</a>; [radarhere]</p>; </li>; <li>; <p>Do not use CFFI access by default on PyPy <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7236"">#7236</a>; [radarhere]</p>; </li>; <li>; <p>Limit size even if one dimension is zero in decompression bomb check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7235"">#7235</a>; [radarhere]</p>; </li>; <li>; <p>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a>; [radarhere]</p>; </li>; <li>; <p>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a>; [Yay295, hugovk]</p>; </li>; <li>; <p>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a>; [radarhere]</p>; </li>; <li>; <p>Changed grabclipboard() to use PNG instead of JPG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a>; [abey79, radarhere]</p>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:10057,access,access,10057,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['access'],['access']
Security,"(<a href=""https://redirect.github.com/pallets/jinja/issues/1918"">#1918</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895""><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>; <li><a href=""https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7""><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>; <li><a href=""https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23""><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>; <li>Additional commits viewable in <a href=""https://github.com/pallets/jinja/compare/3.1.2...3.1.3"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:3549,secur,security-vulnerabilities,3549,https://qutip.org,https://github.com/qutip/qutip/pull/2291,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"**Describe the bug**; Tried to access the tutorial for the teleportation protocol (under quantum information processing). **To Reproduce**; [Qutip Tutorials](https://qutip.org/tutorials.html#quantum-information-processing). **Screenshots**; <img width=""418"" alt=""image"" src=""https://user-images.githubusercontent.com/62545147/142829630-60ac71b2-eb2e-41a8-b307-ad83ab0f681a.png"">. <br><br>. ![image](https://user-images.githubusercontent.com/62545147/142829702-1dee6e69-21ca-4dbc-a717-e74f9ef80cda.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1721:31,access,access,31,https://qutip.org,https://github.com/qutip/qutip/issues/1721,1,['access'],['access']
Security,"**Description**; Add a lock for creating string coefficient. This allow to use the coefficient inside a parallel loop without issues.; The lock use `filelock` which works across processes, so it's safe to use with parallel coming from outside python.; The lock is per file, so different coefficient can compile in parallel. If there is a conflict, the first process will create and compile the coefficient and the other will use it (raising a hash collision error if not actually the same string.). `filelock` is a new requirement for runtime compilation. **Related issues or PRs**; #1963",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1968:443,hash,hash,443,https://qutip.org,https://github.com/qutip/qutip/pull/1968,1,['hash'],['hash']
Security,"**Description**; Add data layer functions needed to update `steadystate` to use qutip's data layer. Most of `steadystate`'s methods solve the system `L(rho_ss) = 0` using different solver from numpy, scipy, mkl.; This add the `solve` dispatched function to wraps this operation at the data layer level.; For the `CSR` version, it gives access to all methods available in `scipy.sparse.linalg` and our mkl version.; For the `Dense` version, `solve` and `lstsq` from `numpy.linalg` are made available.; Options supported by numpy / scipy for each function are pass through:; `qutip.data.solve(A, B, method, options)` call `scipy.sparse.linalg.method(A, B, **options)`. Other methods of `steadystate` decompose the Liouvillian with either `eigen` or `svd`.; `svd` was added as a dispatched function, but only with specialization for `Dense`. ; I made a sparse version, but `svds` can't readily compute all singular values and does not respond well to splitting the problem into 2 like it was done for sparse eigensolver. . This PR only include the new dispatched functions, not updated `steadystate` using them or `Qobj` interface.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2002:336,access,access,336,https://qutip.org,https://github.com/qutip/qutip/pull/2002,1,['access'],['access']
Security,"**Description**; Allow `Propagator` to take a `Solver` instead of an Hamiltonian, this allow to make propagator work with brmesolve or HEOM. To help with that, I made the system's solver dimensions accessible through `sys_dims` and whether they represent super dims in `evolve_dm`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999:198,access,accessible,198,https://qutip.org,https://github.com/qutip/qutip/pull/1999,1,['access'],['accessible']
Security,"**Description**; I think that with the different data type a `Qobj` can contain, it would be useful to be able get the underlying data (ndarray, csr_matrix, jax.Array, etc.) easily from the `Qobj`. I added the method `Qobj.get(copy)` for that. I allow direct access to the object in case it's needed for auto-differentiation or other advanced features. I am open to a better name than `get` if it's too generic.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2141:259,access,access,259,https://qutip.org,https://github.com/qutip/qutip/pull/2141,1,['access'],['access']
Security,"**Description**; Make changes so enable autodiff with `jax` or `tensorflow`:; - In `QobjEvo`, `Elements`, `Coefficient`: `t` is a python object instead of a double as is coefficient output.; This allows to pass jax traced variable or tensorflow's scalar tensor.; - QobjEvo's elements attribute are accessible and new methods `QobjEvo._getstate`, `QobjEvo._restore`.; Used by jax layer to register `QobjEvo` as a pytree.; - Allow subproject to add their own coefficient.; This allow to make a coefficient that can jit well or can be differentiated. `FuncCoefficient` without type restriction could mostly work, but there are some issues with registering them as a pytree or pickling.; - In CoreOptions, an options for the default data type is added:; When not specified, each `Qobj` creation function keeps its default.; ```; with CoreOptions(default_dtype=""jax""):; obj = qeye(N); assert isinstance(obj.data, JaxArray); ```; - Add `QobjEvo.to_list` to restore the list format of the `QobjEvo`. **Related issues or PRs**; Replace #1816",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015:298,access,accessible,298,https://qutip.org,https://github.com/qutip/qutip/pull/2015,1,['access'],['accessible']
Security,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:820,access,accessible,820,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['access'],['accessible']
Security,"**Description**; The OpenQASM 2.0 standard is described [here](https://github.com/Qiskit/openqasm/blob/master/spec/qasm2.rst). ; The purpose of this PR is to create a full implementation of a OpenQASM parser that reads ; a .qasm circuit into a QubitCircuit. This function lives in qutip/qip/qasm.py. There are a number of ; internal functions that enable this conversion but the only api-exposed function is supposed to be ; `read_qasm` which takes in a .qasm file and returns a fully-formed QubitCircuit object. Currently, the heft of the work is done with processing user-defined gates and adding them to the circuit (as well as measurements, but they need to have #1274 on measurements merged before I can enable that functionality). I still need to add features pertaining to initialization of qubits as well as classical control. . **Related issues or PRs**; There was a related PR #1140 which purportedly worked with OpenQASM 1.0 but this one deviates from it largely while adding additional features as well as the ability to process user-defined gates and a comparatively robust parser. ; **Changelog**; Added read_qasm function to read .qasm files into QubitCircuit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291:388,expose,exposed,388,https://qutip.org,https://github.com/qutip/qutip/pull/1291,1,['expose'],['exposed']
Security,"**Description**; `qzero_like` used on `QobjEvo` would call it (it needed `qevo(0).data`), which is both slow and could break `jax.jit`.; I added `Qobj.dtype` and `QobjEvo.dtype` to be used instead of accessing the data directly.; For `QobjEvo`, the `dtype` property still call the object when the type is unclear (mixed or function based), but it should be faster otherwise.; Tested that the example in qutip/qutip-jax#33 works.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2325:200,access,accessing,200,https://qutip.org,https://github.com/qutip/qutip/pull/2325,1,['access'],['accessing']
Security,"**Is your feature request related to a problem? Please describe.**; I would like to use a [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) as a key for a [``functools.lru_cache``](https://docs.python.org/3/library/functools.html#functools.lru_cache), but since the [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) is not hashable, I can't do this. **Describe the solution you'd like**; A clear and concise description of what you want to happen. I can implement ``qutip.Qobj.__hash__``, which would hash the dims and the data of the ``qutip.Qobj``. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321:367,hash,hashable,367,https://qutip.org,https://github.com/qutip/qutip/issues/1321,2,['hash'],"['hash', 'hashable']"
Security,"**Is your feature request related to a problem? Please describe.**; Some quantum computing libraries (e.g.: pyGSTi) use the Pauli basis for Liouville space, as opposed to QuTiP's column-stacking basis, making it difficult to interoperate between the two. **Describe the solution you'd like**; A new pair of functions `super_to_superpauli` and `superpauli_to_super` for converting between these representations. (`qutip.visualization.hinton` already includes `super_to_superpauli` as a private function, but this could potentially be exposed to user code.). **Describe alternatives you've considered**; - Extend metadata for `kind='super'` Qobj instances to store Liouville space basis information, including col-stacking and Pauli as special cases and possibly including row-stacking or other common conventions as well.; - Possible names other than `superpauli` for conversion functions, such as `super_to_pauli_basis` or `super_from_pauli_basis`.; - Adding new methods `Qobj.to_superbasis(self, basis: str = 'pauli')` and `@classmethod Qobj.from_superbasis(cls, basis: str = 'pauli')` rather than adding more to the global namespace for the QuTiP package.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1664:533,expose,exposed,533,https://qutip.org,https://github.com/qutip/qutip/issues/1664,1,['expose'],['exposed']
Security,".cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3.5/qutip; copying build/src.linux-x86_64-3.5/qutip/__config__.py -> build/lib.linux-x86_64-3.5/qutip; running build_ext; customize UnixCCompiler; customize UnixCCompiler using build_ext; building 'qutip.cy.spmatfuncs' extension; compiling C sources; C compiler: gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC. compile options: '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c'; extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; gcc: qutip/cy/src/zspmv.c; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wfor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:4165,secur,security,4165,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"/a> Name as 'options' in lambda_eval and unsafe_eval, but '_dict' in deprecated eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/facf3af93dabcbdd8cdbda8c3b50eefafa3bb04c""><code>facf3af</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:15466,secur,security-vulnerabilities,15466,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.31.0&new-version=2.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:11876,secur,security,11876,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,"['Secur', 'secur']","['Security', 'security']"
Security,"6)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-20",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3257,Authoriz,Authorization,3257,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Authoriz', 'authenticat']","['Authorization', 'authenticate']"
Security,"6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4903,certificate,certificate,4903,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificate']
Security,"6a70e06377a09aae8""><code>d94029b</code></a> Release 1.26.16</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8""><code>18e9214</code></a> Use trusted publishing for PyPI</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36""><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263""><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>; <li>Additional commits viewable in <a href=""https://github.com/urllib3/urllib3/compare/1.26.14...1.26.17"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:5204,secur,security-vulnerabilities,5204,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1835:3686,secur,security-vulnerabilities,3686,https://qutip.org,https://github.com/qutip/qutip/pull/1835,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:2436,secur,security-vulnerabilities,2436,https://qutip.org,https://github.com/qutip/qutip/pull/2085,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:3069,secur,security-vulnerabilities,3069,https://qutip.org,https://github.com/qutip/qutip/pull/1563,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"<li><a href=""https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8""><code>87d63de</code></a> v2.29.0</li>; <li><a href=""https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc""><code>51716c4</code></a> enable the warnings plugin (<a href=""https://redirect.github.com/psf/requests/issues/6416"">#6416</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71""><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=""https://redirect.github.com/psf/requests/issues/6418"">#6418</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.28.2...v2.31.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:7546,secur,security-vulnerabilities,7546,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1649,attack,attack,1649,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['attack'],['attack']
Security,">; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b""><code>9c2c230</code></a> Release 1.26.18 (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3159"">#3159</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36""><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73""><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:1857,secur,security-vulnerabilities,1857,https://qutip.org,https://github.com/qutip/qutip/pull/2246,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"></a> fixes <a href=""https://github-redirect.dependabot.com/certifi/python-certifi/issues/198"">#198</a> -- update link in license</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997""><code>9d514b4</code></a> 2022.06.15</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52""><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=""https://github-redirect.dependabot.com/certifi/python-certifi/issues/196"">#196</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2020.12.05...2022.12.07"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2020.12.5&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2035:2443,secur,security-vulnerabilities,2443,https://qutip.org,https://github.com/qutip/qutip/pull/2035,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"Add a wrapper for function returning `Qobj` to be treated as `QobjEvo`: `QobjEvoFunc`; Wrapped function have access to all method of `QobjEvo` therefore only one version of the code should be sufficient for time dependant problems using both list format and function.; Any callable is considered a function, allowing for class method etc. The new function `qobjevo_maker` can take any valid time dependant quantum object and make it a `QobjEvo` like object. Added wrapper for function using the old `rhs_with_state` format and using no `args`. . Tests for `QobjEvoFunc` have been added but not for `qobjevo_maker`. Solver are not updated to use it yet. @ajgpitch I added it last minute in stochastic, but did not tried it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1123:109,access,access,109,https://qutip.org,https://github.com/qutip/qutip/pull/1123,1,['access'],['access']
Security,"After installing qutip via conda (conda install qutip) on Mac 10.15.1 High Sierra, I ran the testing script using:. >> import qutip.testing as qt ; >> qt.run(). I am getting the following error: . Qobj subtraction ... python(4259,0x119a26dc0) malloc: Incorrect checksum for freed object 0x7fdbb05c5910: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(4259,0x119a26dc0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6. Does anyone know what is causing this, how to fix it, or what kinds of problems it might cause later? Thank you!. Sacha",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:261,checksum,checksum,261,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['checksum'],['checksum']
Security,"As far as I am aware only the Monte Carlo solver supports any kind of parallelization. Many of the other solvers require sequential processing. However, there may be some operations that allow parallel processing. . It is well known for instance that GPUs are widely used for matrix operations. Although Numpy and Sympy do not currently directly support GPU, there are other libraries that could be investigated. Of course not everyone has access to GPU, and potentially the could be CPU parallel possibilities here too. The optimal control modules could certainly be parallelised. In most cases the calculation of the propagators and / or the fidelity gradients are the most costly operations, and can be computed in parallel. So this would be a fairly easy implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438:440,access,access,440,https://qutip.org,https://github.com/qutip/qutip/issues/438,1,['access'],['access']
Security,"As it stands now, all of the steady state solvers treat the solution vector as a dense array. However, often times the steady state density matrix is sparse and therefore the current implementation is not optimal. As of SciPy 0.14, the sparse LU solver can now access the underlying L and U sparse matrices. Therefore, we should be able to do some kind of sparse forward and backward substitution to get the solution vector. In particular, since the RHS vector has only a single nonzero entry, the substitutions are greatly simplified,and we could also see a speed up.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/163:261,access,access,261,https://qutip.org,https://github.com/qutip/qutip/issues/163,1,['access'],['access']
Security,"As per discussion in #474, [this notebook](http://nbviewer.jupyter.org/gist/cgranade/d20fcf3e9907eb26c7fc2f6a8d855918) describes the semantics for a proposed `Qobj.__call__` method that would generalize action on density operators and state vectors by superoperators and unitary operators. This would help make QuTiP more accessible and provide a consistent API for several closely-related group actions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/475:322,access,accessible,322,https://qutip.org,https://github.com/qutip/qutip/issues/475,1,['access'],['accessible']
Security,"At present the only known working option that works with the runtime compile features (e.g. string type time-dependence) requires Visual Studio 2015 with C++ options. The community edition is fine, which has no monetary cost, but it does come with a considerable install time and disk space (11GB) cost. . According to the [Python wiki on Windows compilers](https://wiki.python.org/moin/WindowsCompilers) These [build tools](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017) are supposed to work, but so far I did not succeed. Not tried in a while, as I don't have very easy access to a Windows machine I can play with. So if someone else wants to give a try, then that would be just great. This issue would ideally be closed after a merging of a PR updating the installation instructions in https://github.com/qutip/qutip-doc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/954:607,access,access,607,https://qutip.org,https://github.com/qutip/qutip/issues/954,1,['access'],['access']
Security,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:343,validat,validate,343,https://qutip.org,https://github.com/qutip/qutip/pull/1695,2,['validat'],['validate']
Security,"Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909""><code>8fb96ed</code></a> 2023.07.22</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40""><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/230"">#230</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:937,Hash,Hash,937,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['Hash'],['Hash']
Security,"Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/releases"">jinja2's releases</a>.</em></p>; <blockquote>; <h2>3.1.3</h2>; <p>This is a fix release for the 3.1.x feature branch.</p>; <ul>; <li>Fix for <a href=""https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95"">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>; <li>Changes: <a href=""https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>; <li>Milestone: <a href=""https://github.com/pallets/jinja/milestone/15?closed=1"">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.3</h2>; <p>Released 2024-01-10</p>; <ul>; <li>Fix compiler error when checking if required blocks in parent templates are; empty. :pr:<code>1858</code></li>; <li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>; <li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks; more helpful. :pr:<code>1918</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1""><code>d9de4bb</code></a> release version 3.1.3</li>; <li><a href=""https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc""><code>50124e1</code></a> skip test pypi</li>; <li><a href=""https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b""><code>9ea7222</code></a> use trusted publishing</li>; <li><a href=""https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:371,secur,security,371,https://qutip.org,https://github.com/qutip/qutip/pull/2291,1,['secur'],['security']
Security,"Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.3 to 3.1.4.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/releases"">jinja2's releases</a>.</em></p>; <blockquote>; <h2>3.1.4</h2>; <p>This is the Jinja 3.1.4 security release, which fixes security issues and bugs but does not otherwise change behavior and should not result in breaking changes.</p>; <p>PyPI: <a href=""https://pypi.org/project/Jinja2/3.1.4/"">https://pypi.org/project/Jinja2/3.1.4/</a>; Changes: <a href=""https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4</a></p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code> greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces. Regardless of any validation done by Jinja, user input should never be used as keys to this filter, or must be separately validated first. GHSA-h75v-3vvj-5mfj</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.4</h2>; <p>Released 2024-05-05</p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code>; greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces.; Regardless of any validation done by Jinja, user input should never be used; as keys to this filter, or must be separately validated first.; :ghsa:<code>h75v-3vvj-5mfj</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/dd4a8b5466d8790540c181590b14db4d4d889d57""><code>dd4a8b5</code></a> release version 3.1.4</li>; <li><a href=""https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb""><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:278,secur,security,278,https://qutip.org,https://github.com/qutip/qutip/pull/2418,4,"['secur', 'validat']","['security', 'validated', 'validation']"
Security,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:419,Secur,Security,419,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['Secur'],['Security']
Security,"Bumps [requests](https://github.com/psf/requests) from 2.28.2 to 2.31.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.31.0</h2>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urll",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:298,Secur,Security,298,https://qutip.org,https://github.com/qutip/qutip/pull/2164,5,"['Authoriz', 'Secur', 'authenticat']","['Authorization', 'Security', 'authenticate']"
Security,"Bumps [requests](https://github.com/psf/requests) from 2.31.0 to 2.32.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:334,Secur,Security,334,https://qutip.org,https://github.com/qutip/qutip/pull/2434,3,"['Secur', 'secur']","['Security', 'security']"
Security,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.17.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.17</h2>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>; </ul>; <h2>1.26.16</h2>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2954"">#2954</a>)</li>; </ul>; <h2>1.26.15</h2>; <ul>; <li>Fix socket timeout value when HTTPConnection is reused (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2645"">urllib3/urllib3#2645</a>)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:580,access,accessing,580,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['access'],['accessing']
Security,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:297,access,accessible,297,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['access'],['accessible']
Security,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:251,access,access,251,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['access'],['access']
Security,"Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems. Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook. . Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See https://github.com/qutip/qutip-notebooks/issues/100. One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in https://github.com/qutip/qutip/pull/1092, using [loky](https://loky.readthedocs.io). In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence. If the freeze is indeed caused by spawn-multiprocessing, the problem *should* also show up on Windows. Is anyone running Windows able to reproduce this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202:456,inject,injected,456,https://qutip.org,https://github.com/qutip/qutip/issues/1202,1,['inject'],['injected']
Security,ENH: Allow for picking SS solver & access MKL solver internals,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/801:35,access,access,35,https://qutip.org,https://github.com/qutip/qutip/pull/801,1,['access'],['access']
Security,"Finding the full power spectrum given a time-dependent Hamiltonian usually requires a 2-sided power spectrum. For convenience, it would be useful to be able to access this data in a properly ordered array. Additionally, the majority of literature regarding cavity optomechanics uses a positive e^(i w t) Fourier convention. Passing a simple boolean parameter to this function would allow for the use of scipy's ifft function, scaled by the number of elements.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/821:160,access,access,160,https://qutip.org,https://github.com/qutip/qutip/pull/821,1,['access'],['access']
Security,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:36,access,accesses,36,https://qutip.org,https://github.com/qutip/qutip/pull/1614,1,['access'],['accesses']
Security,Fix bad attribute accesses in isherm_csr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:18,access,accesses,18,https://qutip.org,https://github.com/qutip/qutip/pull/1614,1,['access'],['accesses']
Security,"Hello, ; I wish to install QuTiP with the INTEL MKL ext. set to True. I have been having issues with this on various laptops (MacBook Pro M1, as well as a Windows i7). I have set below the information I obtained on the Windows i7 machine following various installation attempts in different conda environments. Sometimes I manage for ‘BLAS Info’ to show INTEL MKL, but the ‘INTEL MKL Ext’ flag remains False. It is unclear to me how I should obtain this result, could anyone help me with this issue?. The underlying reason for wanting to have MKL is that it allowed me in the past (on the same machine but with a different conda environment I no longer have access to) to calculate the steady states of much larger Liouvillians than I am now able to. I am unfortunately unable to reproduce this environment. Below you can find the outcomes of various installation processes, each in a new conda environment:. **Attempt 1a:** ; Conda install mkl; conda install numpy; conda install scipy; conda install conda-forge::qutip; **Results:** ; QuTiP Version: 	5.0.3; Numpy Version: 	2.0.0; Scipy Version: 	1.14.0; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.12.4; Number of CPUs: 	12; BLAS Info: 		Generic; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1b:**; Conda install mkl; conda install scipy ; conda install conda-forge::qutip; **Results:**; QuTiP Version: 	5.0.3; Numpy Version: 	1.26.4; Scipy Version: 	 1.10.1; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.10.14; Number of CPUs: 	12; BLAS Info: 		INTEL MKL; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1c:**; Conda install mkl; conda install conda-forge::qutip; **Results**; QuTiP Version: 5.0.3; Numpy Version: 2.0.0; Scipy Version: 1.14.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.12.4; Number of CPUs: 12; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Windows (AMD64). **Attempt 2:** ; Conda install conda-forge::qutip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496:658,access,access,658,https://qutip.org,https://github.com/qutip/qutip/issues/2496,1,['access'],['access']
Security,"Hi, I report a strange behavior of `propagator` method.; `propagator` with collapse operator fails to dimension validation on composite system. At first, single system works correctly.; ```python; import qutip as qt; ```; ```python; H = qt.sigmaz(); c_ops = [np.sqrt(1) * qt.sigmam()]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.basis(2, 0)).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. The output is; ```; 0.9999092149599982; ```; (I'm not sure why this is not 1. I guess it's limited by the numerical precision.). However, same code on composite system fails.; The differences are only `H`, `c_ops`, and `rho0`, using `qt.tensor(*, qt.qeye(2))`; ```python; H = qt.tensor(qt.sigmaz(), qt.qeye(2)); c_ops = [np.sqrt(1) * qt.tensor(qt.sigmam(), qt.qeye(2))]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.tensor(qt.basis(2, 0), qt.basis(2, 0))).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. ```; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); <ipython-input-1-551bcc27bcfa> in <module>; 8 ; 9 # using propagator; ---> 10 F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; 11 rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)); 12 . c:\users\mizuno\research\py38\lib\site-packages\qutip\propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 239 rho0 = Qobj(sp.csr_matrix(([1], ([row_idx], [col_idx])),; 240 shape=(N, N), dtype=complex)); --> 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; 242 _saf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585:112,validat,validation,112,https://qutip.org,https://github.com/qutip/qutip/issues/1585,1,['validat'],['validation']
Security,"Hi,. There is a [manual integration](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L602-L624) using rectangles method in `qutip.floquet` file which sometimes fail. Problem is that the number of timesteps, `nT`, is hardcoded and not accessible to the user. In my case, `nT = 100` does not seem to be enough and the integral is wrong. A quick and dirty fix is to have an extra `nT=100` keyword argument to `floquet_master_equation_rates`, so that user can overload it. Still, it does not seem to be the most efficient way of doing it. I have a quick fix I can contribute which is using `scipy.integrate.simps` instead. This requires keeping an array of values to integrate in memory (which is less memory-efficient) but I could keep `nT=100` and get the correct integral by using this method. I guess the best option would be to use [`scipy.integrate.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad), as it uses an adaptive algorithm. I can contribute a fix for this, just looking for feedback on the best available option :). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/767:246,access,accessible,246,https://qutip.org,https://github.com/qutip/qutip/issues/767,1,['access'],['accessible']
Security,"I am unable to find the list of states returned by the essolve function. For example:. ```python; import qutip as qt; test = qt.essolve(qt.qeye(2), qt.ket2dm(qt.basis(2, 0)), [1,2,3], c_op_list=[], e_ops=[]); ```; Returns the message; ```; Result object with essolve data.; --------------------------------; states = True, expect = True; num_expect = 0, num_collapse = 0; ```; but if I try to access the states; ```; test.states; >>> []; ```; Should this contain a list of states like mesolve()? It seems a similar issue has been raised before: https://groups.google.com/forum/#!topic/qutip/st3i6STPrQY. Here's my environment details:. ```; QuTiP: Quantum Toolbox in Python; ================================; QuTiP Version: 4.5.0; Numpy Version: 1.16.4; Scipy Version: 1.1.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\chris\Anaconda3\lib\site-packages\qutip; ============================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1262:393,access,access,393,https://qutip.org,https://github.com/qutip/qutip/issues/1262,1,['access'],['access']
Security,"I have some detail information for the GSoC 2020 project ""Error mitigation in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub Wiki page. I post it here so if anyone finding it nice could copy it to the Wiki page. I add some details based on the original description:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be fo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:122,access,access,122,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['access'],['access']
Security,"I was trying to figure out why tests on #943 and #942 were failing for MacOS and could pin-point it down to the `qutip.superop_reps.to_kraus` function. The test `tests.test_superop_reps.test_ChoiKrausChoi` leads to the same malloc error with the message,; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; Investigating more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944:344,checksum,checksum,344,https://qutip.org,https://github.com/qutip/qutip/issues/944,1,['checksum'],['checksum']
Security,"I'm quite new to the package, so please forgive me if this is obvious. Haven't been able to find anything in docs or previous issues. I'm looking to get images of quantum circuits saved. My quirks of setup means that I'm not using notebooks. Therefore the normal `qc.png` command isn't compatible. . In `qutip/qip/circuit.py`, the properties `png()` and `svg()` directly display in a notebook the compiled LaTeX figure of the cicuit. I would rather be able to access the compiled image directly. I've been looking around the codebase to see if there is native functionality for this. We can get Bloch spheres using the kind of workflow I'm imagining:. ```; from qutip import * . b = Bloch(). b.show(). bb = b.fig; bb.savefig('Bloch.png'); bb.savefig('Bloch.pdf'); ```. Does anyone have any suggestions? . I think that `_latex_compile()` returns a bytes object, which can be interpreted as an image, but I haven't had a chance to play around with it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/913:460,access,access,460,https://qutip.org,https://github.com/qutip/qutip/issues/913,1,['access'],['access']
Security,"Is there any performance reason why we should not compile the extensions using C++ ?. We are having issues with the conda forge packages:; conda-forge/qutip-feedstock#16; I am sure than this problem would not occur if we were compiling using MS compilers.; We are receiving lots of support requests on the Google group for help installing on Windows; We do not have a solution for python>=3.5 on Windows. I posted a question on the Cython help group asking about accessing complex functions on Windows. One suggestion was to try C++, importing functions from `complex` rather than `complex.h`. I made a small test project that imported `conj` and it compiled using MS compilers and worked on Windows 10 with both Python 2.7 and 3.5. We only have one small C source file. I guess it could be rewritten in C++ quite easily.; I can do further tests to check performance if we consider C++ compilation is an option for qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647:463,access,accessing,463,https://qutip.org,https://github.com/qutip/qutip/issues/647,1,['access'],['accessing']
Security,"It is possible that someone having trouble compiling qutip extensions may wish to set CFLAGS, CPATH, C_INCLUDE_PATH. Currently these would not be used in the qutip installation / building or extensions generally. I had a scenario where I was trying to install qutip on machines which I did not have sudo access on. They did not have cython or pydev. So I managed to install pydev and cython into the home folder. For the latter I had to set the C_INCLUDE_PATH to the local install of the C headers, or maybe I used the -I switch with CFLAGS. This did not work for qutip, so I made some changes to the `setup.py` files, and also the `pyximport` in `__init__.py`. However, none of it worked due to disk space issues in the end. Clearly, if there had been enough disk space, then Anaconda would have been a much better solution. So, the question are: ; 1. Is there any value in making a PR from the changes I made (in a local copy) to use the CFLAGS, CPATH, C_INCLUDE_PATH env vars if they are set?. 2. If so should the qutip pyximport extend or prepend the CFLAGS or should it not set CFLAGS at all if the user has set values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/571:304,access,access,304,https://qutip.org,https://github.com/qutip/qutip/issues/571,1,['access'],['access']
Security,Iterable access to solver results and possibility of feedback to solvers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:9,access,access,9,https://qutip.org,https://github.com/qutip/qutip/issues/1571,2,['access'],['access']
Security,"New schemes for the options. All options's default value can be set and seen in qutip.settings:; ```; >>> from qutip import settings; >>> settings.solver[""atol""] = 1e-10; >>> settings.core[""auto_tidyup""] = False; >>> settings.solver.mcsolve[""norm_tol""] = 1e-4; >>> settings.save(); >>> print(qutip.settings); qutip.settings.install:; debug : False; log_handler : 'default'; colorblind_safe : False; tmproot : '/home/eric/.qutip/coeffs'; mkl_lib : None; has_mkl : False; ipython : True; _logger : <Logger qutip.installsettings (WARNING)>; eigh_unsafe : False. qutip.settings.core:; auto_tidyup : False; auto_tidyup_dims : True; auto_herm : True; atol : 1e-12; auto_tidyup_atol : 1e-12; ...; ```. The main changes are; - `settings` is an object in `qutip/settings.py`.; - Actual options are accessed as dictionary values instead of attributes.; - `settings`'s values are read from qutiprc at import.; - Easy saving of settings; - `reset` function as described in documentation but not available yet.; - solver `Options` renamed and split, some options removed (`rhs_with_state`, ...). @jakelishman, I commented out most of the openmp stuff, I expect you to pass behind me and clean when you re-implement it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1337:789,access,accessed,789,https://qutip.org,https://github.com/qutip/qutip/pull/1337,1,['access'],['accessed']
Security,"Not quite all links we refer to have valid SSL certificates, so we leave those ones be. **Changelog**; Convert http links to https",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1555:47,certificate,certificates,47,https://qutip.org,https://github.com/qutip/qutip/pull/1555,1,['certificate'],['certificates']
Security,"Originally reported in #944. Tests seem to be failing for MacOS. We get errors like; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; The build is pretty much always failing, but sometimes passes. I think we only get the errors when tests are run, the functions work fine otherwise. I think someone tried pytest and still got same errors. So kind of a nasty one to investigate, but there might be an easy fix if we can work out what to do. I believe @nathanshammah has done some quite thorough investigation and could probably add to this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:173,checksum,checksum,173,https://qutip.org,https://github.com/qutip/qutip/issues/963,1,['checksum'],['checksum']
Security,"Setting the phase option with fid_params does not seem to work. set_phase_option() does not have access to fid_params and when passed in None, sets the option by the fidcomp.phase_option field. However, that appears to be deprecated and requires hard coding in the FidComputer reset method.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/400:97,access,access,97,https://qutip.org,https://github.com/qutip/qutip/issues/400,1,['access'],['access']
Security,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1575:266,access,access,266,https://qutip.org,https://github.com/qutip/qutip/pull/1575,1,['access'],['access']
Security,"The internal data type for storing dynamics generators (Hamiltonians), propagators, and the time evolution can now be set as Qobj. When using Qobj the propagators are computed using qutip methods for expm. Resolves #370; The default for small systems remains ndarray, as this provides much faster execution (factor of 10 approx). However, it is assumed, but not yet tested, that for larger systems the Qobj propagation will be faster, and certainly less memory consumptive. The internal data type (if not specified) is chosen automatically using the same criteria Qobj.expm() uses to determine whether to use the (cython) sparse method.; The main motivation for implementing this change is for users developing their own custom fidelity and gradient measures which use the partial trace method. Consequently, preserving the dimensions is important. This has been shown (by colleagues testing) to be more efficient than recreating the Qobjs from ndarrays.; The internal operator processing methods and attributes have been renamed with underscores preceding to indicate that these will be of the internal operator data type. Accessors have been added that will always provide Qobj representations of the operators.; Theoretically any operator data type that supports the dot() method could be used, e.g. some other sparse matrix type, however this has not been extensively tested and should be considered an experimental feature.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/397:1124,Access,Accessors,1124,https://qutip.org,https://github.com/qutip/qutip/pull/397,1,['Access'],['Accessors']
Security,"The problem appears in qutip version 4.0.0 when considering the tensor product of a few systems, and including more than one dissipation channel. I noticed a similar issue on a much more complex system, but in the code attached I consider the simplest system on which I have found the bug to appear. Consider three uncoupled qubits, each with a distinct frequency. The Hamiltonian is (ignoring tensor products with identity matrices) :. H = (w1 / 2) * sigmaz_1 + (w2 / 2) * sigmaz_2 + (w3 / 2) * sigmaz_3. Let us couple qubits 2 and 3 to independent white-noise environments through operators sigmax_2 and sigmax_3. Qubit 1 is decoupled from the other qubits, and does not couple to any relaxation channel. We consider the initial state |1:e, 2:g, 3:g>, where g(e) labels the ground (excited) state of a qubit, and evaluate the population of the excited state of qubit 1 as a function of time using bloch_redfield_tensor() and bloch_redfield_solve(). Since qubit 1 is decoupled from the other qubits, its excited-state population should remain 1 at all times. Yet, qutip yields exponential decay of the population of qubit 1. I noticed that when I remove dissipation for qubit 2 (keeping only dissipation through sigmax_3), the problem disappears and qubit 1 forever stays in its excited state. So the problem seems to arise when combining two relaxation sources. I am using qutip version 4.0.0. A colleague of mine tried the attached test code on qutip version 3.1.0 and did not catch any bug (i.e. qubit 1 did not relax with qutip 3.1.0). So the problem seems to be related to versions of qutip later than 3.1.0. Can anyone replicate the bug with the attached code ? . (I tried putting the code directly here but the hashtag signs for the comments made a mess, and github does not accept attached .py files, so I have put the code in a .txt file instead.). [redfield.txt](https://github.com/qutip/qutip/files/635122/redfield.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/572:1719,hash,hashtag,1719,https://qutip.org,https://github.com/qutip/qutip/issues/572,1,['hash'],['hashtag']
Security,"The stochastic solver have been redone.; smesolve and ssesovle can be used for time dependent systems (H, c_ops and sc_ops).; The available solvers are : 'euler-maruyama', 'pc-euler, 'milstein', 'platen', 'milstein-imp', 'taylor15', 'taylor15-imp', 'explicit15'. All solvers are usable by both ssesolve and smesolve, for time-dependent cases and for both heterodyne and homodyne methods. There is no restriction on the number of sc_ops. The solvers are in cython, making them 2~3 time faster than the previous version, with the exception of the implicit solvers, where the timing is about the same. The photocurrent method as been moved to it's own functions: photocurrentmesolve and photocurrentsesolve. It can take time-dependent Hamiltonian. The stochastic (piecewse deterministic process) PDP solvers (ssepdpsolve and smepdpsolve) are untouched. The previous version of smesolve/ssesolve allowed the user to determine it's own d1 and d2 function. This capacity have been moved to the function general_stochastic. However the function only has access to some solver: 'euler-maruyama', 'platen', 'explicit15'. . I created a function which list the solvers with the references: stochastic_solver_info(). The convergence of the solvers was tested with a tests similar to https://github.com/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815:1047,access,access,1047,https://qutip.org,https://github.com/qutip/qutip/pull/815,1,['access'],['access']
Security,"There doesn't seem to be the package released under Ubuntu 16.04 channel. After I added the Ubuntu PPA for QuTiP, I got the following error/warning:. ```; qxd@ubuntu1604$: sudo apt-get update; ...; W: The repository 'http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu xenial Release' does not have a Release file.; N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.; N: See apt-secure(8) manpage for repository creation and user configuration details.; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-amd64/Packages 404 Not Found; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-i386/Packages 404 Not Found; ```. Thanks for maintaining it :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472:363,authenticat,authenticated,363,https://qutip.org,https://github.com/qutip/qutip/issues/472,2,"['authenticat', 'secur']","['authenticated', 'secure']"
Security,"There seems to be a failure in how `Qobj.istp` checks trace-preservingness for superoperators acting on composite systems. I think there's an exception raised inside the property accessor which is being downgraded to `istp == False`; I'll investigate and fix it soon. In the meantime, I've written a [brief test case](https://gist.github.com/cgranade/31bce360282097d4abd545b68eb65b7d) that shows the problem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/498:179,access,accessor,179,https://qutip.org,https://github.com/qutip/qutip/issues/498,1,['access'],['accessor']
Security,"This PR is part of PR #969 , splitting that PR in two parts. It contains:; - `qobjevo`'s args that update with the state. (replacing rhs_with_state functionality) ; - method `norm` renamed to `_cdc` as it was not used as a norm.; - cython side of expect method no longer take `isherm` as an arguments.; - security check in propagator for `H` as a function with `batch` method.; - `propagator` uses `sesolve` capability to evolve operators.; - floquet now call `sesolve` instead of `mesolve` with no collapse.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990:305,secur,security,305,https://qutip.org,https://github.com/qutip/qutip/pull/990,1,['secur'],['security']
Security,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:299,hash,hashes,299,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['hash'],['hashes']
Security,"This PR should fix #451 by adding an additional check to `Qobj.iscp` to check the hermicity-preserving condition. Since this is a useful condition in its own right, the PR also adds `Qobj.ishp` to expose that logic separately. Finally, new unit tests have been added to check for regressions on #451, and for the new `Qobj.ishp` attribute.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/452:197,expose,expose,197,https://qutip.org,https://github.com/qutip/qutip/pull/452,1,['expose'],['expose']
Security,"This change enables the use of Python standard logging, and backs it by a new qutip.settings entry. A few instances of classic `if debug: print` style logging have been refactored. The new `qutip.settings` entry is based on [configobj](http://configobj.readthedocs.org), with a fallback to classic `~/.qutiprc` parsing if that library is not available. Errors in the new functionality introduced by this commit are also logged, and can be accessed by setting up `logging.basicConfig` _before_ importing QuTiP. The optional configobj dependency should almost always be met, since it's shipped with matplotlib.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:439,access,accessed,439,https://qutip.org,https://github.com/qutip/qutip/pull/248,1,['access'],['accessed']
Security,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:437,access,access,437,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['access'],['access']
Security,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:285,access,access,285,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['access'],['access']
Security,"This pull implements a safety check where the Qobj data class is validated as fast_csr_matrix type everytime the Q.data attribute is set. This guarantees that the Qobj's have the correct data type. This was not always true previously. In addition, many items are fixed so that the above rule passes. Finally, we no longer need the tests that check for Qobj csr_matrix type. This is now strictly enforced.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609:65,validat,validated,65,https://qutip.org,https://github.com/qutip/qutip/pull/609,1,['validat'],['validated']
Security,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:946,access,access,946,https://qutip.org,https://github.com/qutip/qutip/pull/1362,1,['access'],['access']
Security,"This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:; ```; File ""C:\Users\ym24chen\Anaconda3\; x = lu.solve(b, verbose=verbose); File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000000000008; envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve; ```. Env info:; ```; QuTiP Version: 4.3.1; Numpy Version: 1.15.4; Scipy Version: 1.1.0; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.2; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip; ==============================================================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975:548,access,access,548,https://qutip.org,https://github.com/qutip/qutip/issues/975,1,['access'],['access']
Security,"This will be a collection of functions that access the sparse features in the Intel MKL:. 1) Parallel CSR SpMV. 2) Parallel direct sparse LU factorization. I have yet to work out a nice way of importing the MKL library, so these functions will not work unless the path to the MKL is modified by hand. My thinking is to look at the python version string to check for the Anaconda or Intel Python distros, and if found, find the MKL in the known locations for each distro and platform. Intel said they would expose this functionality in a later version of their distro.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/459:44,access,access,44,https://qutip.org,https://github.com/qutip/qutip/pull/459,2,"['access', 'expose']","['access', 'expose']"
Security,Travis tests failing for MacOS - incorrect checksum for freed object,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:43,checksum,checksum,43,https://qutip.org,https://github.com/qutip/qutip/issues/963,1,['checksum'],['checksum']
Security,Trouble accessing Boxi Li's FOSDEM slides,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1467:8,access,accessing,8,https://qutip.org,https://github.com/qutip/qutip/issues/1467,1,['access'],['accessing']
Security,"What should we do with the qutip/examples directory? It contains a lot of old stuff which is not really maintained anymore, but there are still some useful tests examples there. The current situation is:. qutip/qutip/examples - official examples accessible through the GUI and used in the docs; qutip/qutip/tests - unit tests; qutip/notebooks - development tests and benchmarks; qutip/examples - no clear purpose and not well maintained. We need to think about what we want to do with the examples directory and what purpose these example scripts have. I'm inclined to getting rid of these examples in favor or more contextual development examples in notebook form stored in qutip/notebooks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/23:246,access,accessible,246,https://qutip.org,https://github.com/qutip/qutip/issues/23,1,['access'],['accessible']
Security,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538:85,Access,Accessing,85,https://qutip.org,https://github.com/qutip/qutip/issues/1538,1,['Access'],['Accessing']
Security,"[radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><code>d594f4c</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/909dc64ed5f676169aa3d9b0c26f132a06321b83""><code>909dc64</code></a> 9.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3""><code>1a51ce7</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14022,secur,security-,14022,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['secur'],['security-']
Security,"[urllib3](https://github.com/urllib3/urllib3) from 1.26.18 to 1.26.19.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.19</h2>; <h2>🚀 urllib3 is fundraising for HTTP/2 support</h2>; <p><a href=""https://sethmlarson.dev/urllib3-is-fundraising-for-http2-support"">urllib3 is raising ~$40,000 USD</a> to release HTTP/2 support and ensure long-term sustainable maintenance of the project after a sharp decline in financial support for 2023. If your company or organization uses Python and would benefit from HTTP/2 support in Requests, pip, cloud SDKs, and thousands of other projects <a href=""https://opencollective.com/urllib3"">please consider contributing financially</a> to ensure HTTP/2 support is developed sustainably and maintained for the long-haul.</p>; <p>Thank you for your support.</p>; <h2>Changes</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19</a></p>; <p>Note that due to an issue with our release automation, no <code> multiple.intoto.jsonl</code> file is available for this release.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:979,Authoriz,Authorization,979,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['Authoriz'],['Authorization']
Security,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968611'. <string>:1: ModuleNotFoundError; __________________________________________________________________________________________________________ TestTimeDependence.test_varying_coefficient_hamiltonian_2ls[string] ___________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:12995,hash,hash,12995,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"_Last updated: 2020-08-12_. This is an issue for tracking and publicising the development status of a separated data layer. This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of `Qobj`. This document and issue will change over time. Development is taking place on the [`dev.major` branch](https://github.com/qutip/qutip/tree/dev.major) in `qutip/qutip`. Pull requests implementing new features:; - #1282 separating out the core QuTiP operations into a (logical but user-transparent) package `qutip.core`.; - #1296 implementing the first parts of the data multiple dispatch and new data types.; - #1332 replacing the `fast_csr_matrix` with the new Cython type `CSR` all across QuTiP; - #1338 implementing the data-layer creation, conversion and dispatcher routines. We are writing a new ""developers' guide"" to explain the logic behind the design decisions, and help new QuTiP developers work on the code. You can follow initial development hosted as [a repo in my user account](https://github.com/jakelishman/qutip-devguide) until we decide how this will be added to the main documentation. You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide. Some design documents:; - [data layer](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/01-data-time-layer-separation.md); - [data structure implementation choices](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:233,access,access,233,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['access'],['access']
Security,"_________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:13401,access,access,13401,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security,"_________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:18678,access,access,18678,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security,"are not engaged with the project, do not reply to communications or attend board meetings. . **<span style=""text-decoration:underline;"">Decisions</span>**; Each board member has a vote in decisions, which are taken by a majority vote. . **<span style=""text-decoration:underline;"">Communications</span>**; The board agrees to meet **[once a year]** (also via online meeting). The board is informed at least **[once a year]** by the Admin Team on QuTiP development and other activities (via email in the qutip-board channel). . ### 4. Non-profit Support; Since 2018, QuTiP is an affiliated project of [NumFOCUS](https://numfocus.org/), a 501(c)(3) nonprofit organization registered in the USA. The mission of NumFOCUS is to promote open practices in research, data, and scientific computing **[Unitary Fund](http://unitary.fund/)** pledges to support the QuTiP project as a fiscally sponsored project. QuTiP remains an affiliated project of NumFOCUS. [Unitary Fund](http://unitary.fund/) is a 501(c)(3) nonprofit organization registered in the USA working to create a quantum technology ecosystem that benefits the most people. Due to its role in the quantum software community, Unitary Fund pledges to: . * Promote the knowledge of QuTiP in the quantum software and sci-dev community.; * Provide scientific and technical software advice upon request of the Admin team and Board. ; * Provide logistic and financial support for code projects and meetings (subject to request by the QuTiP admins and availability of Unitary Fund funds). ; * Accept financial support on behalf of the QuTiP project. These funds will be allocated to and managed by the QuTiP admins on board’s approval in coordination with Unitary Fund. ; * Provide access to expert legal advice (subject to request by the QuTiP board or admin team and availability of Unitary Fund funds) through its legal counsel, useful for matters related to licensing, copyright, collaborations with industry and to protect the QuTiP brand and project.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:13986,access,access,13986,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['access'],['access']
Security,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780:4482,secur,security,4482,https://qutip.org,https://github.com/qutip/qutip/pull/1780,2,"['Secur', 'secur']","['Security', 'security']"
Security,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:9067,secur,security-vulnerabilities,9067,https://qutip.org,https://github.com/qutip/qutip/pull/1654,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:5821,secur,security,5821,https://qutip.org,https://github.com/qutip/qutip/pull/2392,2,"['Secur', 'secur']","['Security', 'security']"
Security,"com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22"">compare view</a></li>; </ul>; </details>; <b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:1606,Secur,Security,1606,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['Secur'],['Security']
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:6929,secur,security,6929,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,"['Secur', 'secur']","['Security', 'security']"
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:3582,secur,security,3582,https://qutip.org,https://github.com/qutip/qutip/pull/2246,2,"['Secur', 'secur']","['Security', 'security']"
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:5718,secur,security,5718,https://qutip.org,https://github.com/qutip/qutip/pull/2458,2,"['Secur', 'secur']","['Security', 'security']"
Security,"d so will not automatically turn itself into one. Having this produced very inconsistent behaviour when multiplying by numpy arrays, or otherwise dealing with numpy functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:2028,access,access,2028,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['access'],['access']
Security,"de>0ee5eb4</code></a> satisfy formatter, linter, and strict mypy</li>; <li><a href=""https://github.com/pallets/jinja/commit/20477c63575175196bfc8103f223cc9f5642595d""><code>20477c6</code></a> update project files (<a href=""https://redirect.github.com/pallets/jinja/issues/5457"">#5457</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/e491223739dedbb1f4fc6a71340c1484e149d947""><code>e491223</code></a> update pyyaml dev dependency</li>; <li><a href=""https://github.com/pallets/jinja/commit/36f98854c721f98ba103f97f65a8a098da5af0d7""><code>36f9885</code></a> fix pr link</li>; <li>Additional commits viewable in <a href=""https://github.com/pallets/jinja/compare/3.1.3...3.1.4"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.3&new-version=3.1.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:3831,secur,security-vulnerabilities,3831,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:4674,secur,security-vulnerabilities,4674,https://qutip.org,https://github.com/qutip/qutip/pull/1767,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"dges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:5274,secur,security,5274,https://qutip.org,https://github.com/qutip/qutip/pull/2291,2,"['Secur', 'secur']","['Security', 'security']"
Security,"dges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.3&new-version=3.1.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:5556,secur,security,5556,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.14.0&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201:15677,secur,security,15677,https://qutip.org,https://github.com/qutip/qutip/pull/2201,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:9146,secur,security,9146,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC. compile options: '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c'; extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; gcc: qutip/cy/src/zspmv.c; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/src/zspmv.c -o build/temp.linux-x86_64-3.5/qutip/cy/src/zspmv.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1`. Well, all of them seem to fail with a similar issue. Whatever is exit status 1. ([This](http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c) is the SO solution I followed, it claims that error code is related to operation not permitted or setuptools not being installed. I upgraded the setuptools, pip doesn't work with sudo (I'm guessing it should",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:5159,secur,security,5159,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"ects.com/en/3.1.x/changes/#version-3-1-4"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4</a></p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code> greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces. Regardless of any validation done by Jinja, user input should never be used as keys to this filter, or must be separately validated first. GHSA-h75v-3vvj-5mfj</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.4</h2>; <p>Released 2024-05-05</p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code>; greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces.; Regardless of any validation done by Jinja, user input should never be used; as keys to this filter, or must be separately validated first.; :ghsa:<code>h75v-3vvj-5mfj</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/dd4a8b5466d8790540c181590b14db4d4d889d57""><code>dd4a8b5</code></a> release version 3.1.4</li>; <li><a href=""https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb""><code>0668239</code></a> Merge pull request from GHSA-h75v-3vvj-5mfj</li>; <li><a href=""https://github.com/pallets/jinja/commit/d655030770081e2dfe46f90e27620472a502289d""><code>d655030</code></a> disallow invalid characters in keys to xmlattr filter</li>; <li><a href=""https://github.com/pallets/jinja/commit/a7863ba9d3521f1450f821119c50d19d7ecea329""><code>a7863ba</code></a> add ghsa links</li>; <li><a href=""https://github.com/pallets/jinja/commit/b5c98e78c2ee7d2bf0aa06d29ed9bf7082de9cf4""><code>b5c98e7</code></a> start version 3.1.4</li>; <li><a href=""https://git",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:1515,validat,validation,1515,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,['validat'],"['validated', 'validation']"
Security,"elog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.18 (2023-10-17)</h1>; <ul>; <li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b""><code>9c2c230</code></a> Release 1.26.18 (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3159"">#3159</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36""><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73""><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:1457,secur,securetransport,1457,https://qutip.org,https://github.com/qutip/qutip/pull/2246,1,['secur'],['securetransport']
Security,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780:2389,secur,security-vulnerabilities,2389,https://qutip.org,https://github.com/qutip/qutip/pull/1780,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"es/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.0.1&new-version=10.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:17215,secur,security,17215,https://qutip.org,https://github.com/qutip/qutip/pull/2302,2,"['Secur', 'secur']","['Security', 'security']"
Security,"es/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:17191,secur,security,17191,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,"['Secur', 'secur']","['Security', 'security']"
Security,"ests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4633,secur,security,4633,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['secur'],['security']
Security,"fined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/request",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4083,secur,security,4083,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,"fined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""htt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1512,secur,security,1512,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,"ges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.4.0&new-version=10.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:14963,secur,security,14963,https://qutip.org,https://github.com/qutip/qutip/pull/2237,2,"['Secur', 'secur']","['Security', 'security']"
Security,"heel file names with; multiple platform tags</li>; </ul>; <p><strong>0.38.1 (2022-11-04)</strong></p>; <ul>; <li>Removed install dependency on setuptools</li>; <li>The future-proof fix in 0.36.0 for converting PyPy's SOABI into a abi tag was; faulty. Fixed so that future changes in the SOABI will not change the tag.</li>; </ul>; <p><strong>0.38.0 (2022-10-21)</strong></p>; <ul>; <li>Dropped support for Python &lt; 3.7</li>; <li>Updated vendored <code>packaging</code> to 21.3</li>; <li>Replaced all uses of <code>distutils</code> with <code>setuptools</code></li>; <li>The handling of <code>license_files</code> (including glob patterns and default; values) is now delegated to <code>setuptools&gt;=57.0.0</code> (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/466"">#466</a>).; The package dependencies were updated to reflect this change.</li>; <li>Fixed potential DoS attack via the <code>WHEEL_INFO_RE</code> regular expression</li>; <li>Fixed <code>ValueError: ZIP does not support timestamps before 1980</code> when using; <code>SOURCE_DATE_EPOCH=0</code> or when on-disk timestamps are earlier than 1980-01-01. Such; timestamps are now changed to the minimum value before packaging.</li>; </ul>; <p><strong>0.37.1 (2021-12-22)</strong></p>; <ul>; <li>Fixed <code>wheel pack</code> duplicating the <code>WHEEL</code> contents when the build number has changed (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/415"">#415</a>)</li>; <li>Fixed parsing of file names containing commas in <code>RECORD</code> (PR by Hood Chatham)</li>; </ul>; <p><strong>0.37.0 (2021-08-09)</strong></p>; <ul>; <li>Added official Python 3.10 support</li>; <li>Updated vendored <code>packaging</code> library to v20.9</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pypa/wheel/commit/6f1608dc1a88f00d2390b9044bd655753f39234c""><code>6f1608d</code></a> Created ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:1827,attack,attack,1827,https://qutip.org,https://github.com/qutip/qutip/pull/2052,1,['attack'],['attack']
Security,"href=""https://github.com/python-pillow/Pillow/commit/c827f3b30f50bf04fd65daeeba6bbfd56fc7b50e""><code>c827f3b</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7246"">#7246</a> from radarhere/deallocate</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/39a3b1d83edcf826c3864e26bedff5b4e4dd331b""><code>39a3b1d</code></a> Fixed deallocating mask images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8c1dc819fd91471825da01976ac0e0bc8789590f""><code>8c1dc81</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.4.0...10.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.4.0&new-version=10.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:13238,secur,security-vulnerabilities,13238,https://qutip.org,https://github.com/qutip/qutip/pull/2237,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1009,validat,validating,1009,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['validat'],['validating']
Security,"ing</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/matthewarmand""><code>@​matthewarmand</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6258"">psf/requests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>app",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4250,Secur,Security,4250,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['Secur'],['Security']
Security,"issions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:2819,secur,security-vulnerabilities,2819,https://qutip.org,https://github.com/qutip/qutip/pull/2205,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"its.h:34,; from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11,; from qutip/cy/spmatfuncs.c:27:; /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61: fatal error: limits.h: No such file or directory; #include_next <limits.h> /* recurse down to the real one */; ^; compilation terminated.; In file included from /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/syslimits.h:7:0,; from /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:34,; from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11,; from qutip/cy/spmatfuncs.c:27:; /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61: fatal error: limits.h: No such file or directory; #include_next <limits.h> /* recurse down to the real one */; ^; compilation terminated.; error: Setup script exited with error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/spmatfuncs.c -o build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1; `. Then, I cloned the qutip/qutip repository, and tried to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcomp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:1993,secur,security,1993,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"kflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465:1819,access,access,1819,https://qutip.org,https://github.com/qutip/qutip/pull/1465,1,['access'],['access']
Security,"kup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lifting is done when `add_specialisations` or `rebuild_lookup` is called. On call, the generic signature `(*args, **kwargs)` has to be bound to the actual signature of the underlying operation, regardless of whether the specialisation has already been found. At the Cython level there is short-circuit access to the call machinery in the specialisations themselves, but this cannot be safely exposed outside of the `Dispatcher` class itself.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:17574,access,access,17574,https://qutip.org,https://github.com/qutip/qutip/pull/1338,2,"['access', 'expose']","['access', 'exposed']"
Security,"latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3010,Authoriz,Authorization,3010,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Authoriz'],['Authorization']
Security,"lf.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:16364,hash,hash,16364,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"lf.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:21494,hash,hash,21494,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:5162,secur,security,5162,https://qutip.org,https://github.com/qutip/qutip/pull/1563,20,"['Secur', 'secur']","['Security', 'security']"
Security,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876:1464,access,accessible,1464,https://qutip.org,https://github.com/qutip/qutip/issues/1876,1,['access'],['accessible']
Security,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:6767,secur,security,6767,https://qutip.org,https://github.com/qutip/qutip/pull/1767,2,"['Secur', 'secur']","['Security', 'security']"
Security,"nsure HTTP/2 support is developed sustainably and maintained for the long-haul.</p>; <p>Thank you for your support.</p>; <h2>Changes</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19</a></p>; <p>Note that due to an issue with our release automation, no <code> multiple.intoto.jsonl</code> file is available for this release.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling of OpenSSL 3.2.0 new error message for misconfiguring an HTTP proxy as HTTPS. (<code>[#3405](https://github.com/urllib3/urllib3/issues/3405) &lt;https://github.com/urllib3/urllib3/issues/3405&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d9d85c88aa644af56d5e129634e750ce76e1a765""><code>d9d85c8</code></a> Release 1.26.19</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/8528b63b6fe5cfd7b21942cf988670de68fcd8c0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:1780,Authoriz,Authorization,1780,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['Authoriz'],['Authorization']
Security,"ode></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabot/github_actions/github/codeql-act...</li>; <li><a href=""https://github.com/psf/requests/commit/60047ade64b0b882cbc94e047198818ab580911e""><code>60047ad</code></a> Bump github/codeql-action from 3.24.0 to 3.25.0</li>; <li><a href=""https://github.com/psf/requests/commit/31ebb8102c00f8cf8b396a6356743cca4362e07b""><code>31ebb81</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6682"">#6682</a> from frenzymadness/pytest8</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.31.0...v2.32.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.31.0&new-version=2.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:10151,secur,security-vulnerabilities,10151,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ode></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f8df5303fa9daf40cf8bfe232403cb40389d8f8f""><code>f8df530</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7672"">#7672</a> from nulano/imagefont-negative-crop</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/24e9485e6bb733a1a816f228dc75fd0086a93e19""><code>24e9485</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7671"">#7671</a> from radarhere/imagetransform</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.0.1...10.2.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.0.1&new-version=10.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:15490,secur,security-vulnerabilities,15490,https://qutip.org,https://github.com/qutip/qutip/pull/2302,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"patibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:4817,secur,security,4817,https://qutip.org,https://github.com/qutip/qutip/pull/2483,2,"['Secur', 'secur']","['Security', 'security']"
Security,"plement custom measurements and pass a callback function (for example to work with time-dependent Hamiltonians etc). According to the [documentation](http://qutip.org/docs/4.1/apidoc/functions.html#module-qutip.mesolve). > An instance of the class qutip.Result, which contains either an array result.expect of expectation values for the times specified by tlist, (...), or nothing if a callback function was given in place of operators for which to calculate the expectation values. So to work with callback function, we need to manage the storage by ourselves, for example by defining a global list, as it is done in [this example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function. So now it is as before but in addition `result.expect[3]` contains energy and `result.expect[4]` contains fidelity and no custom managed global external lists required as it was in the [example](https://nbviewer.jupyter.org/github/jr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:1348,access,access,1348,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['access'],['access']
Security,"ps://github.com/numpy/numpy/commit/794b36f7e1bf2a8c42774ab0db86a74bd32f674b""><code>794b36f</code></a> Update armccompiler.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/d93b14e3d7abaa1d837825e51671f817788e120f""><code>d93b14e</code></a> Update test_public_api.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6""><code>7662c07</code></a> Update <strong>init</strong>.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef""><code>311ab52</code></a> Update armccompiler.py</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.21.0...v1.22.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.21.0&new-version=1.22.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:5292,secur,security-vulnerabilities,5292,https://qutip.org,https://github.com/qutip/qutip/pull/1940,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"pygments/pygments/issues/2373"">#2373</a>)</li>; <li><a href=""https://github.com/pygments/pygments/commit/0e9c87bcf096908956e031f15a4e589e83be1691""><code>0e9c87b</code></a> Update CHANGES</li>; <li><a href=""https://github.com/pygments/pygments/commit/ef0abbaece522732031d61391567c017d48d87b7""><code>ef0abba</code></a> Add PostgreSQL Explain lexer (<a href=""https://redirect.github.com/pygments/pygments/issues/2398"">#2398</a>)</li>; <li><a href=""https://github.com/pygments/pygments/commit/3c6e2af8fbc44bb1ef77389d09118c37faea8746""><code>3c6e2af</code></a> Update CHANGES</li>; <li>Additional commits viewable in <a href=""https://github.com/pygments/pygments/compare/2.14.0...2.15.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.14.0&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201:14077,secur,security-vulnerabilities,14077,https://qutip.org,https://github.com/qutip/qutip/pull/2201,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:16084,secur,security-vulnerabilities,16084,https://qutip.org,https://github.com/qutip/qutip/pull/1760,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3137"">#3137</a>)</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:3993,secur,security-vulnerabilities,3993,https://qutip.org,https://github.com/qutip/qutip/pull/2458,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3454,Authoriz,Authorization,3454,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Authoriz'],['Authorization']
Security,"rge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:65539,hash,hashdescr,65539,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['hash'],['hashdescr']
Security,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:3435,secur,security-vulnerabilities,3435,https://qutip.org,https://github.com/qutip/qutip/pull/1695,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"s `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:9407,access,access,9407,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['access'],['access']
Security,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:4559,access,access,4559,https://qutip.org,https://github.com/qutip/qutip/pull/1429,1,['access'],['access']
Security,"struments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete().reindex(); QInstrument id=1f96e774970 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq(0,) Seq(1,); }; ```. Composition and tensor products can be combined:. ```python; >>> qutip.tensor(z_instrument.with_finite_visibility(0.95) ** 2, z_instrument); QInstrument id=2e7d89a19a0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(Seq(0, 0), 0) Par(Seq(0, 0), 1) Par(Seq(1, 0), 0) Par(Seq(1, 0), 1) Par(Seq(0, 1), 0) Par(Seq(0, 1), 1) Par(Seq(1, 1), 0) Par(Seq(1, 1), 1); }; ```. Outcomes can be labeled by arbitrary hashable types:. ```python; >>> qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX""); QInstrument id=2e7d89d5dc0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ) Seq(-XX, +ZZ) Seq(+XX, -ZZ) Seq(-XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")) ** 2; QInstrument id=2e7d89a44c0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, +XX, -ZZ) Seq(-XX, -ZZ, -XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")).with_finite_visibility(0.95) ** 2; QInstrument id=2e7d6654520 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, +XX, +ZZ) Seq(+XX, -ZZ, +XX, +ZZ) Seq(-XX, -ZZ, +XX, +ZZ) Seq(+XX, +ZZ, -XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, -XX, +ZZ) Seq(-XX, -ZZ, ; -XX, +ZZ) Seq(+XX, +ZZ, +XX, -ZZ) Seq(-XX, +ZZ, +XX, -Z",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:4464,hash,hashable,4464,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['hash'],['hashable']
Security,"t/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:15392,secur,security-vulnerabilities,15392,https://qutip.org,https://github.com/qutip/qutip/pull/2023,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"tation</strong></p>; <ul>; <li>Various typo fixes and doc improvements.</li>; </ul>; <p><strong>Packaging</strong></p>; <ul>; <li>Requests has started adopting some modern packaging practices.; The source files for the projects (formerly <code>requests</code>) is now located; in <code>src/requests</code> in the Requests sdist. (<a href=""https://redirect.github.com/psf/requests/issues/6506"">#6506</a>)</li>; <li>Starting in Requests 2.33.0, Requests will migrate to a PEP 517 build system; using <code>hatchling</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:7792,certificate,certificates,7792,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificates']
Security,"te or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general approach before I spend time on that. **Changelog**; Add a more flexible base result class for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:1262,expose,expose,1262,https://qutip.org,https://github.com/qutip/qutip/pull/1907,2,"['access', 'expose']","['accessed', 'expose']"
Security,that provides a nicer API to access the jmat function. Made helper functions jplus and lz internal.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/117:29,access,access,29,https://qutip.org,https://github.com/qutip/qutip/pull/117,1,['access'],['access']
Security,"thub.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067""><code>d516b87</code></a> Update Github actions/checkout to v4</li>; <li><a href=""https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7""><code>c095c75</code></a> Merge branch 'master' into dev</li>; <li><a href=""https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98""><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>; <li><a href=""https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201""><code>5918a0e</code></a> Merge branch 'master' into dev</li>; <li>Additional commits viewable in <a href=""https://github.com/kjd/idna/compare/v3.4...v3.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:4096,secur,security-vulnerabilities,4096,https://qutip.org,https://github.com/qutip/qutip/pull/2392,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:2391,hash,hash,2391,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['hash'],['hash']
Security,"tps://github.com/matthewarmand""><code>@​matthewarmand</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6258"">psf/requests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4560,secur,security,4560,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['secur'],['security']
Security,"tps://github.com/psf/requests) from 2.31.0 to 2.32.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:987,certificate,certificate,987,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificate']
Security,"ues/286"">#286</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/4a9569a3eb58db8548536fc16c5c5c7af946a5b1""><code>4a9569a</code></a> Bump actions/checkout from 4.1.2 to 4.1.4 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/287"">#287</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/1fc808626a895a916b1e4c2b63abae6c5eafdbe3""><code>1fc8086</code></a> Bump peter-evans/create-pull-request from 6.0.4 to 6.0.5 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/288"">#288</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2023.07.22...2024.07.04"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:3092,secur,security-vulnerabilities,3092,https://qutip.org,https://github.com/qutip/qutip/pull/2483,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ul testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:2869,Secur,Security,2869,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Secur'],['Security']
Security,"urselves, for example by defining a global list, as it is done in [this example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function. So now it is as before but in addition `result.expect[3]` contains energy and `result.expect[4]` contains fidelity and no custom managed global external lists required as it was in the [example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe alternatives you've considered**. Alternatively we could establish that custom measurement callback function must return only single value and user would be able to pass mixed list of operators and functions in the `e_ops`. **Additional context**. Correct me if I'm wrong, based on the docs and examples I referenced above I have impression there is no better way to do it, but maybe I just missed it? Please regard this issue as ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:1971,access,access,1971,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['access'],['access']
Security,"ve the fastest connectivity. #### Adding new types. You can add new data-layer types by calling the `add_conversions` method of this object, and then rebuilding all of the mathematical dispatchers. See the docstring of that method for more information. #### Implementation details. Not all conversions have to be specified for a new type; it is enough to have just one to and from a known type to a new type. The rest of the conversion graph is built up by graph traversal over known types (the graph is reconstructed whenever `add_conversions` is called), where the approximate cost of each function is used as the weight of an ""edge"" joining two data-layer type ""vertices"". The shortest path conversion function is constructed and stored (as the interal type `data.convert._converter`) for each pair of types. We willingly sacrifice memory efficiency for speed-efficiency here, since we expect there to be few data-layer types, but for the calls to happen millions of times. The converters returned by single-key access (e.g. `data.to[data.Dense]`) are constructed individually on a call to `__getitem__`, and are instances of the private type `data.convert._partial_converter`, which internally stores a reference to every ""full"" converter, and dispatches to the correct one when called. The entire `data.to` object and all subsidiary `_converter` and `_partial_converter` objects are `pickle`-able. . #### Efficiency notes. From an efficiency perspective, there is very little benefit to using the key-lookup syntax. Internally, `to(to_type, data)` effectively calls `to[to_type, type(data)]`, so storing the object elides the creation of a single tuple and a dict lookup, but the cost of this is generally less than 500ns. Using the one-argument lookup (e.g. `to[Dense]`) is no more efficient than the general call at all, but can be used in cases where a single callable is required and is more efficient, concise and descriptive than `functools.partial`. ### `data.Dispatcher`: arbitrary multip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:5951,access,access,5951,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['access'],['access']
Security,"ved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c90",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:1989,access,accessing,1989,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['access'],['accessing']
Security,"w</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:4419,secur,security,4419,https://qutip.org,https://github.com/qutip/qutip/pull/2205,2,"['Secur', 'secur']","['Security', 'security']"
Security,"xception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:18272,hash,hash,18272,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Testability," '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10487,test,test,10487,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability," (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15351,test,test,15351,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability," - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); /nix/store/dz8lm4h0ivibad5kfc0ya3p3zqyd2fyf-python3-3.11.7/lib/python3.11/contextlib.py:81: AssertionError; =========================== short test summary info ============================; FAILED ../tests/test_countstat.py::test_dqd_current - AssertionError:; ```. ### Expected Behaviour. unit test succeeds. ### Your Environment. ```shell; QuTiP Version: 4.7.5; Numpy Versi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:2604,Assert,AssertionError,2604,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['Assert'],['AssertionError']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36508,test,tests,36508,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecati,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38295,test,tests,38295,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37548,test,tests,37548,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36410,test,tests,36410,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46238,test,tests,46238,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability," 0.9 1.0 3.2 ; sum((rho-rho).norm()); dm 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ket 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ```. My new version is pretty simple, using numpy's built-in ndarray routines. I've looked at the code for ptrace and it's a bit opaque to me; at the moment I don't feel quite up to modifying it, so I'm just putting up the code I've used instead of doing a pull request. My new function is here:; ```; def ptracealt(rho,qkeep) :; rd = rho.dims[0]; nd = len(rd); qkeep = list(sort(qkeep)); dkeep = (np.array(rd)[qkeep]).tolist(); qtrace = list(set(np.arange(nd))-set(qkeep)); dtrace = (np.array(rd)[qtrace]).tolist(); if isket(rho) :; vmat = (rho.full(); .reshape(rd); .transpose(qkeep+qtrace); .reshape([prod(dkeep),prod(dtrace)])); rhomat = vmat.dot(vmat.conj().T); else :; rhomat = np.trace(rho.full(); .reshape(rd+rd); .transpose(qtrace+[nd+q for q in qtrace]+qkeep+[nd+q for q in qkeep]); .reshape([prod(dtrace),prod(dtrace),prod(dkeep),prod(dkeep)])); return Qobj(rhomat,dims=[dkeep, dkeep]); ```; and the test code here: ; ```; Nqmax=10; ntest = 100; trdiff = np.zeros([2,Nqmax-1]); ttr = np.zeros([4,Nqmax-1]); for nd in range(2,Nqmax+1) :; r0 = [ rand_dm(2**nd,dims=[[2 for j in range(nd)] for l in range(2)]) for i in range(ntest) ]; v0 = [ rand_ket(2**nd) for i in range(ntest) ]; for v in v0 :; v.dims = [[2 for j in range(nd)],[1 for j in range(nd)]]; subs = [ np.random.choice(range(nd),np.random.randint(1,nd),replace=False).tolist() for i in range(ntest) ]; t0 = time.time(); rhotr1 = [r.ptrace(p) for r,p in zip(r0,subs)]; ttr[0,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); rhotr2 = [ptracealt(r,p) for r,p in zip(r0,subs)]; ttr[1,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr1 = [v.ptrace(p) for v,p in zip(v0,subs)]; ttr[2,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr2 = [ptracealt(v,p) for v,p in zip(v0,subs)]; ttr[3,nd-2] = (time.time()-t0)/ntest; trdiff[0,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(rhotr1,rhotr2)]); trdiff[1,nd-2] = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:1851,test,test,1851,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['test'],['test']
Testability," 2 spaces:. ket: Dimensions(Field, Space); bra: Dimensions(Space, Field); oper: Dimensions(Space, Space); ... This Dimension is the `Map` proposed by Jake, but ket are map from `Field` to `Space` and not `Space` themselves. Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`. Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. **Related issues or PRs**; Replace #1826",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1996:2327,test,test,2327,https://qutip.org,https://github.com/qutip/qutip/pull/1996,1,['test'],['test']
Testability, 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolv,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1148,test,tests,1148,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability, 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ______________________________________________________________________________________________________________,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7610,test,tests,7610,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability, 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7685,test,tests,7685,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability, =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30220,test,tests,30220,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," Collecting qutip; Downloading qutip-4.5.0.tar.gz (3.5 MB); |████████████████████████████████| 3.5 MB 509 kB/s ; ERROR: Command errored out with exit status 1:; command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""'; __file__='""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-install-69anjthq/qutip/pip-egg-info; cwd: /tmp/pip-install-69anjthq/qutip/; Complete output (5 lines):; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-install-69anjthq/qutip/setup.py"", line 52, in <module>; from Cython.Build import cythonize; ModuleNotFoundError: No module named 'Cython'; ----------------------------------------; ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output. ** Installing cython fixes it **. jevon@bb8:~$ pip3 install cython; Collecting cython; Downloading Cython-0.29.17-cp38-cp38-manylinux1_x86_64.whl (2.0 MB); |████████████████████████████████| 2.0 MB 721 kB/s ; Installing collected packages: cython; Successfully installed cython-0.29.17; jevon@bb8:~$ pip3 install qutip; Collecting qutip; Using cached qutip-4.5.0.tar.gz (3.5 MB); Requirement already satisfied: cython>=0.21 in ./.local/lib/python3.8/site-packages (from qutip) (0.29.17); Requirement already satisfied: numpy>=1.12 in ./.local/lib/python3.8/site-packages (from qutip) (1.18.3); Requirement already satisfied: scipy>=1.0 in ./.local/lib/python3.8/site-packages (from qutip) (1.4.1); Building wheels for collected packages: qutip; Building wheel for qutip (setup.py) ... done; Created wheel for qutip: filename=qutip-4.5.0-cp38-cp38-linux_x86_64.whl size=17905114 sha256=3f461cbc07b40c0de96b709ea20bca495c7ffe1b6060a533a1ab733107c161ab; Stored in directory: /h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1246:1281,log,logs,1281,https://qutip.org,https://github.com/qutip/qutip/issues/1246,1,['log'],['logs']
Testability," E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ==================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28118,test,testing,28118,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board member",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26291,Test,TestSESolve,26291,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability," ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7798,test,tests,7798,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18563,test,tests,18563,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20906,test,testing,20906,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by comme",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14658,log,logs,14658,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['log'],['logs']
Testability," More detailed info:; # ; ## ERROR: Sparse: Symmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 73, in test_sparse_symmetric_reverse_permute; B=sparse_reverse_permute(x,perm,perm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Nonsymmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 89, in test_sparse_nonsymmetric_reverse_permute; B=sparse_reverse_permute(x,rperm,cperm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Bandwidth. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 144, in test_sparse_bandwidth; out2=sparse_bandwidth(B); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 60",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:1157,test,test,1157,https://qutip.org,https://github.com/qutip/qutip/issues/73,1,['test'],['test']
Testability," Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29568,test,tests,29568,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.0007",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1804,test,testing,1804,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['testing']
Testability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:7582,test,test,7582,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability," __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/X",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9568,test,tests,9568,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20725,test,tests,20725,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:1309,test,testing,1309,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['test'],['testing']
Testability," access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPAC",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1298,test,tests,1298,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['tests']
Testability," add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1474,test,test,1474,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['test']
Testability," addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File """,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15456,test,testMESimpleTDDecayAsStrList,15456,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['testMESimpleTDDecayAsStrList']
Testability," an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1637,test,tested,1637,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['test'],['tested']
Testability," assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22698,test,testing,22698,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1129,test,tests,1129,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16557,test,tests,16557,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/leg,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15871,test,tests,15871,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15786,test,tests,15786,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16488,test,tests,16488,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37073,test,tests,37073,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:12910,test,tests,12910,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability," calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely bounded norms,” arXiv preprint arXiv:1207.5726, 2012.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:2007,test,tests,2007,https://qutip.org,https://github.com/qutip/qutip/pull/2416,2,['test'],"['test', 'tests']"
Testability," content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1444,test,tests,1444,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability," currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are rea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1501,test,tests,1501,https://qutip.org,https://github.com/qutip/qutip/pull/1551,2,['test'],"['test', 'tests']"
Testability," ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23375,test,tests,23375,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," for Debian unstable, all tests are passing with python 3.11. But a dozen tests using qobjevo fail with python 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAIL",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1002,Test,TestMESolveStepFuncCoeff,1002,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability," from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12881,test,testing,12881,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13586,test,testing,13586,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1683,Test,Testing,1683,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability," get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.81s. Est. time left: 00:00:00:27; 20.0%. Run time: 4.76s. Est. time left: 00:00:00:19; 32.0%. Run time: 5.66s. Est. time left: 00:00:00:12; 40.0%. Run time: 5.67s. Est. time left: 00:00:00:08; 52.0%. Run time: 6.59s. Est. time l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9379,test,test,9379,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability," get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4581,test,test,4581,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability," have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3155,test,tests,3155,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability," if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change be",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1075,log,logically,1075,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['log'],['logically']
Testability," if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/loc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3182,Test,TestKrylovSolve,3182,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability," in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10073,test,testing,10073,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," in range(ntest) ]; t0 = time.time(); rhotr1 = [r.ptrace(p) for r,p in zip(r0,subs)]; ttr[0,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); rhotr2 = [ptracealt(r,p) for r,p in zip(r0,subs)]; ttr[1,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr1 = [v.ptrace(p) for v,p in zip(v0,subs)]; ttr[2,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr2 = [ptracealt(v,p) for v,p in zip(v0,subs)]; ttr[3,nd-2] = (time.time()-t0)/ntest; trdiff[0,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(rhotr1,rhotr2)]); trdiff[1,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(vtr1,vtr2)]); print(str(nd)+' qubits: rand dm rand ket'); print('ptrace: '+str(round(1000*ttr[0,nd-2],2))+' '+str(round(1000*ttr[2,nd-2],2))+' ms/trace'); print('new funcs: '+str(round(1000*ttr[1,nd-2],2))+' '+str(round(1000*ttr[3,nd-2],2))+' ms/trace'); print(' Sum diff = '+str(trdiff[0,nd-2])+', '+str(trdiff[1,nd-2])); print('Running time (ms/trace)'); print(' '+' '.join([str(n) for n in range(2,Nqmax+1)])+' qubits'); print('ptrace (dm) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[0]])); print('new func (dm) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[1]])); print('ptrace (ket) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[2]])); print('new func (ket) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[3]])); print('sum((rho-rho).norm())'); print('dm '+' '.join([str(x) for x in trdiff[0]])); print('ket '+' '.join([str(x) for x in trdiff[0]])); plt.plot(range(2,Nqmax+1),ttr[0],c='C0'); plt.plot(range(2,Nqmax+1),ttr[2],c='C0',linestyle='--'); plt.plot(range(2,Nqmax+1),ttr[1],c='C1'); plt.plot(range(2,Nqmax+1),ttr[3],c='C1',linestyle='--'); plt.xlabel('# qubits'); plt.ylabel('time/trace [s]'); plt.yscale('log'); plt.legend(['ptrace (dm)','ptrace (ket)', 'new func (dm)', 'new func (ket)']); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:4204,log,log,4204,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['log'],['log']
Testability," in the old script. I have changed nothing in hte duplicated script, other than uninstalling cvxpy to make it run.; I then reinstalled cvxpy with upgrade and then qutip again. This time I can still import qutip, but with a warning. I ran the script with no problem, but still got the same deviated behavior from 3 years ago. [codes.zip](https://github.com/user-attachments/files/16367713/codes.zip). The 3-year-old script is included only to show the previous results. It is not meant to be run. I suspect if you run it with your likely different setup, you might get the same deviation as I did, or even yet another different deviation. I cannot recall the state of installation I had from 3 years ago. I believe I did it through conda. I just realized that I cannot include qutip scripts with this report. I included a zipped folder containing these two files. Please let me know if it didn'tgo through. Thank you! . ### Code to Reproduce the Bug. ```shell; Old code in ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb""; New code in ""Test.ipynb""; Both attached.; These two codes are exactly identical. Only difference is in the qutip installation, one from 3 years ago and one just completed.; ```. ### Code Output. ```shell; Output in block 23 in the new code is significantly different from that in block 215 in the old code.; ```. ### Expected Behaviour. Expected qutip to produce same results on identical codes 3 years apart. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501:1766,Test,Test,1766,https://qutip.org,https://github.com/qutip/qutip/issues/2501,1,['Test'],['Test']
Testability," inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text; │ original │ prev def │ prev pre │ cur def │ cur pre; ────────────┼───────────┼───────────┼───────────┼───────────┼──────────; 11, ket 5 │ 126.07 µs │ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:3308,test,tests,3308,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['test'],['tests']
Testability," linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1369,test,tests,1369,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability," means that if the global option `auto_tidyup` is set to `True` (its default), then small values (< 1e-15) are truncated from the output matrices. This generally ends up with ""neater"" looking matrices when output; there are far fewer numbers like `1 + 4.516584e-17j` reported, when that's basically just `1`. There are, however, a couple of problems because of this. The first is speed; after every (very simple)_ operation, such as `matmul` or `add`, the tidier runs on the matrix. This typically has `O(nnz)` complexity for sparse matrices, and `O(n * n)` complexity for a dense square matrix with `n` rows. This adds very significant overhead on to simple operations. Second is numerical precision. By dropping small terms, we are effectively turning numerical imprecision into a ""feature"" as opposed to a bug. Because QuTiP 5 uses the new data-layer to do most of its operations, rather than constructing intermediary `Qobj` instances, many mathematical operations will not give the same result if the data layer is used directly compared to if `Qobj` is used at every step. For example, let's say we have three random `Qobj`:; ```python; a, b, c = [qutip.rand_herm(5) for _ in [None]*3]; ```; Now, in general,; ```python; a + b + c != qutip.Qobj(a.data + b.data + c.data); ```; because `a + b + c` will invoke the `tidyup` code twice, whereas the right-hand side will not invoke it at all. This means that despite the fact that `Qobj.__add__` uses the data-layer addition underneath, there will be numerical differences using the QuTiP default settings. I suspect these sort of problems are behind the recent test instabilities on `dev.major` with regards to tolerances. ----. My vote is for a removal of `auto_tidyup`, or at the very least, changing the default value of the option to `False`. We still want nice values for display, so perhaps we could consider having an option to produce a tidied up copy when calling `__repr__`, instead?. Interested to hear what others think about this too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349:1691,test,test,1691,https://qutip.org,https://github.com/qutip/qutip/issues/1349,1,['test'],['test']
Testability," not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16504,test,test,16504,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,['test'],"['test', 'tests']"
Testability, numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45090,test,testing,45090,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability," qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1886,test,tests,1886,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1804,test,tests,1804,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ========================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2158,Test,TestSESolve,2158,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability," raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:7970,test,tests,7970,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['test'],['tests']
Testability," real one */; ^; compilation terminated.; error: Setup script exited with error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/spmatfuncs.c -o build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1; `. Then, I cloned the qutip/qutip repository, and tried to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building extension ""qutip.cy.spmatfuncs"" sources; building extension ""qutip.cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:2768,log,log,2768,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['log'],['log']
Testability," return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9074,test,tests,9074,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability, short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_sta,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1174,test,testPropHOStrTd,1174,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testPropHOStrTd']
Testability," sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 se",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:2243,test,test-env-scipy-qutip,2243,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability," terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcess",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3515,test,tests,3515,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability," the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1474,Test,TestSuperopReps,1474,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Test'],['TestSuperopReps']
Testability," to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1104,test,tests,1104,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['test'],['tests']
Testability," to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>; <li><a href=""https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe""><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=""https://redirect.github.com/psf/requests/issues/6424"">#6424</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149""><code>b639e66</code></a> test on py3.12 (<a href=""https://redirect.github.com/psf/requests/issues/6448"">#6448</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be""><code>d3d5044</code></a> Fixed a small typo (<a href=""https://redirect.github.com/psf/requests/issues/6452"">#6452</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29""><code>2ad18e0</code></a> v2.30.0</li>; <li><a href=""https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773""><code>f2629e9</code></a> Remove strict parameter (<a href=""https://redirect.github.com/psf/requests/issues/6434"">#6434</a>)</li>; <li><a href=""https://github.com/psf/req",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:5655,test,test,5655,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['test']
Testability," version 3.2.0 can not run testing in my mac system OS X EI Capitan. When I try:; `$ python3 -c ""import qutip.testing as qt; qt.run()""`; I get the follow message:; ; > ---; > ; > Ran 0 tests in 0.000s; 2. However, the testing.py and the folder 'tests' exist. I can run the test in the 'tests' folder one-by-one. For example, when I run:; `$ sudo python3 test_mesolve.py`; I get; ; > .....................; > Ran 21 tests in 48.167s; > ; > OK; 3. `sudo` is needed here for permission. For example, when I run: ; `$ python3 test_mesolve.py`; I get a set of the following error message. > # .....E...E.E...E..E..; > ## ERROR: mesolve: time-dependence as array with super as init cond; > ; > Traceback (most recent call last):; > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; > self.test(*self.arg); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/tests/test_mesolve.py"", line 638, in testMETDDecayAsArray; > out1 = mesolve(H, psi0, tlist, c_op_list, []); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 277, in mesolve; > progress_bar); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 661, in _mesolve_list_str_td; > cgen.generate(config.tdname + "".pyx""); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 116, in generate; > self.file(filename); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 78, in file; > self.file = open(filename, ""w""); > PermissionError: [Errno 13] Permission denied: 'rhs165050.pyx'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:1010,test,tests,1010,https://qutip.org,https://github.com/qutip/qutip/issues/445,2,['test'],"['testMETDDecayAsArray', 'tests']"
Testability," when creating a clean environment, and installing `qutip` (and IPython as console) through mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1033,test,test-env-scipy-qutip,1033,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11348,test,tests,11348,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Trac",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17666,test,tests,17666,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25773,test,tests,25773,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceba",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2374,test,tests,2374,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"""Sparse eigs Hermitian"" test failing, in NOMKL build only - Segmentation fault",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/871:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/issues/871,1,['test'],['test']
Testability,"""denstity matrices"" on line 84 in the basis transformations test. Just my two cents for using the library :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/106:60,test,test,60,https://qutip.org,https://github.com/qutip/qutip/issues/106,1,['test'],['test']
Testability,"""malloc: Incorrect checksum"" error in qutip.testing qt.run()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:44,test,testing,44,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['test'],['testing']
Testability,"# Change log; Right now, maintainers need to go through the PRs in `qutip/qutip` to update the changelog. This is quite time consuming. . There may be automated tools to generate the change log. . I propose at minimum to keep a changelog file also in `qutip/qutip`, asking contributors to update it before merging the PR. This makes it simpler than for them to open another PR to `qutip/qutip-doc`. # Classes and functions; As note in the [`release_distribution`](https://github.com/qutip/qutip-doc/blob/master/release_distribution.rst) guidelines, one should check that new functions and classes are included in the `classes.rst` and `functions.rst` files. Having a recipe to check this quickly or automatically, maybe with a script like this [one](https://stackoverflow.com/questions/1796180/how-can-i-get-a-list-of-all-classes-within-current-module-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:9,log,log,9,https://qutip.org,https://github.com/qutip/qutip/issues/1533,2,['log'],['log']
Testability,"### Bug Description. 4 tests produce errors (qutip installed with pip in a virtual environment on a Apple M2 pro chip). ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ================================================================= ERRORS =================================================================; ____________________________________________ ERROR collecting qutip/tests/core/test_gates.py _____________________________________________; qutip/tests/core/test_gates.py:109: in <module>; class TestCliffordGroup:; qutip/tests/core/test_gates.py:115: in TestCliffordGroup; clifford = gates.qubit_clifford_group(); qutip/core/gates.py:815: in qubit_clifford_group; X = sigmax(); qutip/core/operators.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/2472,8,"['Test', 'test']","['TestCliffordGroup', 'testing', 'tests']"
Testability,"### Bug Description. Building qutip 4.7.3 for Debian unstable, all tests are passing with python 3.11. But a dozen tests using qobjevo fail with python 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:67,test,tests,67,https://qutip.org,https://github.com/qutip/qutip/issues/2293,21,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'TestMESolveSuperInit', 'TestMESolveTDDecay', 'TestMESolverConstDecay', 'TestTimeDependence', 'test', 'testMEDecayAsStrList', 'testMETDDecayAsStrList', 'tests']"
Testability,"### Bug Description. Hi, I think there is an bug in the distributions.py file. The functions `update_psi()` and `update_rho()` of the class `TwoModeQuadratureCorrelation` both have a `Qobj.data[i,j]` type statement as was the norm before qutip5. I encountered this issue when code from my PC would not run on my MacBook. I could fix it by just replacing the `psi.data[i,0]` with a `psi.data_as()[i,0]` (and analogous with `rho.data`) in the distributions.py file as noted in the change log. . ### Code to Reproduce the Bug. ```shell; import qutip as qt; a = qt.tensor(qt.destroy(5), qt.qeye(5)); b = qt.tensor(qt.qeye(5), qt.destroy(5)); z = 0.9; rho=qt.squeezing(a,b,z)*qt.tensor(qt.fock(5,0),qt.fock(5,0)); p=qt.TwoModeQuadratureCorrelation(rho,theta1=0,theta2=0); p.visualize(); ```. ### Code Output. ```shell; TypeError Traceback (most recent call last); Cell In[69], line 44; 39 print(""P quadrature correlation:"", p_corr); 41 # Ensure the correct dimensions are used by TwoModeQuadratureCorrelation; 42 # Calculating two-mode quadrature correlation (if this is the function you mean); 43 # This is a placeholder for any specific function you're calling:; ---> 44 corr = qt.TwoModeQuadratureCorrelation(two_mode_squeezed_state); 45 # print(""Two-mode quadrature correlation:"", corr); File ~/Library/CloudStorage/OneDrive-ETHZurich/PythonScripts/Qutip/TMS_Kerr_simulations/.venv/lib/python3.12/site-packages/qutip/distributions.py:283, in TwoModeQuadratureCorrelation.__init__(self, state, theta1, theta2, extent, steps); 280 self.theta1 = theta1; 281 self.theta2 = theta2; --> 283 self.update(state); File ~/Library/CloudStorage/OneDrive-ETHZurich/PythonScripts/Qutip/TMS_Kerr_simulations/.venv/lib/python3.12/site-packages/qutip/distributions.py:291, in TwoModeQuadratureCorrelation.update(self, state); 286 """"""; 287 calculate probability distribution for quadrature measurement; 288 outcomes given a two-mode wavefunction or density matrix; 289 """"""; 290 if isket(state):; --> 291 self.update_psi(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2546:486,log,log,486,https://qutip.org,https://github.com/qutip/qutip/issues/2546,1,['log'],['log']
Testability,"### Bug Description. I took a qutip script created 3 years ago (named ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb"") and ran it now (exact copied named ""Test.ipynb"") and got different results.; There is a caveat, whether relevant or not. When I ran the duplicated script (Test.ipynb) this time, I got errors keeping me from importing qutip. I submitted a ticket yesterday (#2500), which was kindly addressed, recommending that I uninstall cvxpy to remove conflict. I did that and was able to import qutip.; I then ran the duplicate script, but got a different result from 3 years ago. If you compare the output at block 23, you'll see it deviates significantly from the corresponding block in the old script. I have changed nothing in hte duplicated script, other than uninstalling cvxpy to make it run.; I then reinstalled cvxpy with upgrade and then qutip again. This time I can still import qutip, but with a warning. I ran the script with no problem, but still got the same deviated behavior from 3 years ago. [codes.zip](https://github.com/user-attachments/files/16367713/codes.zip). The 3-year-old script is included only to show the previous results. It is not meant to be run. I suspect if you run it with your likely different setup, you might get the same deviation as I did, or even yet another different deviation. I cannot recall the state of installation I had from 3 years ago. I believe I did it through conda. I just realized that I cannot include qutip scripts with this report. I included a zipped folder containing these two files. Please let me know if it didn'tgo through. Thank you! . ### Code to Reproduce the Bug. ```shell; Old code in ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb""; New code in ""Test.ipynb""; Both attached.; These two codes are exactly identical. Only difference is in the qutip installation, one from 3 years ago and one just completed.; ```. ### Code Output. ```shell; Output i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501:135,Test,Test,135,https://qutip.org,https://github.com/qutip/qutip/issues/2501,3,['Test'],['Test']
Testability,"### Bug Description. I've encountered this bug when creating a clean environment, and installing `qutip` (and IPython as console) through mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:701,test,test-env-scipy-qutip,701,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"### Bug Description. In a fresh virtual environment, doing `pip install qutip` will cause the error. ```; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. I know this is quite an old OS and Python version, but that's what I have available. Numpy 1.24 should be supported in Python 3.8.10. ### Code to Reproduce the Bug. ```shell; $ python3 -m venv /tmp/test-venv. $ source /tmp/test-venv/bin/activate. $ pip install --upgrade pip; Collecting pip; Using cached pip-24.0-py3-none-any.whl (2.1 MB); Installing collected packages: pip; Attempting uninstall: pip; Found existing installation: pip 20.0.2; Uninstalling pip-20.0.2:; Successfully uninstalled pip-20.0.2; Successfully installed pip-24.0. $ pip list; Package Version; ------------- -------; pip 24.0; pkg_resources 0.0.0; setuptools 44.0.0. $ pip install qutip; Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Installing build dependencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:570,test,test-venv,570,https://qutip.org,https://github.com/qutip/qutip/issues/2412,2,['test'],['test-venv']
Testability,"### Bug Description. In some rare cases, like the example below, simdiag does not return orthonormal eigenvectors, despite this always being possible. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import simdiag, Qobj. a = np.array([[1, 0, 1, -1, 0],; [0, 4, 0, 0, 1],; [1, 0, 4, 1, 0],; [-1, 0, 1, 4, 0],; [0, 1, 0, 0, 4]]). b = np.eye(5). evals, evecs = simdiag([Qobj(a), Qobj(b)]); evecs = np.array([evec.full() for evec in evecs]).squeeze(). # Check that eigenvectors form an othonormal basis (<=> matrix of eigenvectors is unitary); deviation_from_unitarity = np.linalg.norm(evecs@evecs.conj().T - np.eye(len(evecs))); assert np.isclose(deviation_from_unitarity, 0); ```. ### Code Output. ```shell; AssertionError; ```. ### Expected Behaviour. Since by requirement of simdiag all input matrices must be hermitian and commute, the common eigenvectors should always be orthonormal. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The fix is simple: ; Here; ```python; subspace = vecs.conj().T @ ops[i].full() @ vecs; eigvals, eigvecs = la.eig(subspace); ```; `la.eig` has to be replaced by `la.eigh`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2268:650,assert,assert,650,https://qutip.org,https://github.com/qutip/qutip/issues/2268,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"### Bug Description. It seems that the measurement in `dev.major` does not truncate the probabilities correctly. It is probably caused by some changes in the last month and leads to [a test failing in `qutip-qip`](https://github.com/qutip/qutip-qip/actions/runs/3610116105/jobs/6083718885). The last test running was 24 days ago and was successful. I don't see any code in the measurement that manually tidies up the state. In `qutip-4.7` it is also directly compared to `0`.; https://github.com/qutip/qutip/blob/5a47ee3b8dd817d4c6c36cc84a952c41305cdcb5/qutip/measurement.py#L101-L108. So my guess is that, in `dev.major`, the final states fail to be automatically truncated. ### Code to Reproduce the Bug. ```python; from qutip.measurement import measurement_statistics; import qutip; measurement_ops = [qutip.basis(2,0), qutip.basis(2,1)]; state = qutip.Qobj([[1-1.e-12], [1.e-12]]); print(measurement_statistics(state, measurement_ops)); ```. ### Code Output; dev.major; --------; ```shell. ([Quantum object: dims=[[2], [1]], shape=(2, 1), type='ket'; Qobj data =; [[1.]; [0.]], Quantum object: dims=[[2], [1]], shape=(2, 1), type='ket'; Qobj data =; [[0.]; [1.]]], [0.999999999998, 1e-24]); ```. qutip4.7; -------; ```; ([Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[1.]; [0.]], None], [0.999999999998, 0.0]); ```. ### Expected Behaviour. They are expected to behave the same. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+2ef8847; Numpy Version: 1.23.5; Scipy Version: 1.9.3; Cython Version: 0.29.32; Matplotlib Version: 3.6.2; Python Version: 3.10.0; Number of CPUs: 12; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Windows (AMD64). And. QuTiP Version: 4.7.0; Numpy Version: 1.22.4; Scipy Version: 1.7.3; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.9.0; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. _No resp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2029:185,test,test,185,https://qutip.org,https://github.com/qutip/qutip/issues/2029,2,['test'],['test']
Testability,"### Bug Description. Realized that I was getting inconsistent results in my Hamiltonian simulation code, and was testing using basic matrix operations. Some pieces that qutip was not doing easily, I used numpy objects and operations to complete. . Qutip documentation suggests using * operator for matrix/vector multiplication https://qutip.org/docs/4.7/guide/guide-states.html -- but this will yield undesired results when the types of all objects are not rigorously checked. . ### Code to Reproduce the Bug. ```shell; import qutip; import numpy as np. A = qutip.Qobj([[0, 1], [1, 0]]); B = qutip.Qobj([[1, 2], [3, 4]]). # qutip objects; print(A * B) # gives expected results; print(A @ B) # gives expected results. C = np.array([[0, 1], [1, 0]]); D = np.array([[1, 2], [3, 4]]). # numpy objects; print(C * D) # gives wrong results; print(C.dot(D)) # gives expected results; print(C @ D) # gives expecting results; ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; [[0 2]; [3 0]]; [[3 4]; [1 2]]; [[3 4]; [1 2]]; ```. ### Expected Behaviour. Would prefer that qutip A*B yields the same results as numpy, and A @ B becomes the default matrix operator, or another function is suggested. Consistency with numpy would be better. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2547:113,test,testing,113,https://qutip.org,https://github.com/qutip/qutip/issues/2547,1,['test'],['testing']
Testability,"### Bug Description. Running `import qutip` eagerly imports `scipy.fft` via `qutip.correlation`, causing all native dependencies of `scipy.fft`'s fftpack-based implementation to load. In particular when using SciPy 1.8.1 on Linux, fftpack requires `GLIBCXX_3.4.30` but contains a private copy of `GLIBCXX_3.4.29` such that the import fails unless another Python package provides its own implementation of `GLIBCXX_3.4.30` (typically, PyZMQ via `jupyter-client`). This in turn can cause `import qutip` to fail even when not using features backed by fftpack (e.g.: as happened in the case of https://github.com/microsoft/iqsharp/pull/676). ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; # Example from build logs for https://dev.azure.com/ms-quantum-public/Microsoft%20Quantum%20(public)/_build/results?buildId=42116&view=logs&j=1c33f9fa-7159-5ed6-d128-ab2ed6cefd14&t=74d456a9-739b-5d92-ed57-026d8fef9427, ; $PREFIX/lib/python3.8/site-packages/zmq/backend/cython/../../../../.././libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by $PREFIX/lib/python3.8/site-packages/scipy/fft/_pocketfft/pypocketfft.cpython-38-x86_64-linux-gnu.so); ```. ### Expected Behaviour. `import qutip` should not cause native dependencies of `scipy.fft` to be imported eagerly. ### Your Environment. ```shell; (omitted --- `qutip.about()` failed to execute due to error running `import qutip`); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1915:746,log,logs,746,https://qutip.org,https://github.com/qutip/qutip/issues/1915,2,['log'],['logs']
Testability,"### Bug Description. SciPy 1.11 raises the following two deprecation warnings during qutip-4.7.X test runs:; ````; FAILED qutip/tests/test_sp_eigs.py::test_DenseHermValsVecs - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; FAILED qutip/tests/test_sp_eigs.py::test_DenseValsOnly - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; =========== 2 failed, 3250 passed, 12 skipped in 1792.40s (0:29:52) ============; ```. ### Code to Reproduce the Bug. ```shell; pytest -W error qutip/tests/test_sp_eigs.py; ```. ### Code Output. ```shell; FAILED qutip/tests/test_sp_eigs.py::test_DenseHermValsVecs - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; FAILED qutip/tests/test_sp_eigs.py::test_DenseValsOnly - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; ```. ### Expected Behaviour. Tests do not fail. ### Your Environment. ```shell; QuTiP Version: 4.7.1; SciPy Version: 1.11; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2093:97,test,test,97,https://qutip.org,https://github.com/qutip/qutip/issues/2093,7,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/issues/1755,4,['test'],"['testing', 'tests']"
Testability,"### Bug Description. The ReadTheDocs build fails with:; ```; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```; See https://readthedocs.org/projects/qutip/builds/23361676/ for the full build log (not sure if this is publicly visible -- if not, I can add QuTiP admins as maintainers on readthedocs.org if they give me their username). The QuTiP ReadTheDocs configuration is at: https://github.com/qutip/qutip/blob/master/.readthedocs.yaml. Probably this can be fixed by adding an appropriate dependency to https://github.com/qutip/qutip/blob/master/doc/rtd-environment.yml. ### Code to Reproduce the Bug. ```shell; Attempt to build the documentation on ReadTheDocs.; ```. ### Code Output. ```shell; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```. ### Expected Behaviour. ReadTheDocs builds successfully. ### Your Environment. ```shell; QuTiP version: master branch; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2317:726,log,log,726,https://qutip.org,https://github.com/qutip/qutip/issues/2317,1,['log'],['log']
Testability,"### Bug Description. The act of the CNOT gate is not what it is expected. In particular it changes the target qubit when the control qubit is in the ground state instead of excited state given that in qutip basis(2,1) is the ground state. If this is on purpose it needs to be clearly stated in the tutorials or the documentation. ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip_qip.circuit import QubitCircuit; from qutip_qip.operations import (Gate, berkeley, cnot, cphase, csign, fredkin,; gate_sequence_product, globalphase, iswap,; molmer_sorensen, phasegate, qrot, rx, ry, rz,; snot, sqrtiswap, sqrtnot, sqrtswap, swap,; swapalpha, toffoli); test=cnot()*tensor(basis(2,1),basis(2,1)); print(test); ```. ### Code Output. ```shell; Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [1.]; [0.]]; ```. ### Expected Behaviour. Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [0.]; [1.]]. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.11.4; Cython Version: None; Matplotlib Version: 3.8.0; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/anaconda3/lib/python3.11/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2494:672,test,test,672,https://qutip.org,https://github.com/qutip/qutip/issues/2494,2,['test'],['test']
Testability,"### Bug Description. The function `negativity() ` is currently broken because of a broken import of `partial_transpose()`. This is probably an easy fix and good first issue, but more importantly we need a test for this function, and anything else that currently is not tested in `entropy.py`. Also, might be useful to either properly support kets in negativity (i think it just assumes at the moment the input state is a density operator, and incorrectly acts on kets), or give a warning if a state is provided, and not a density operator. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import *. test = (tensor(basis(2,0),basis(2,1)) + tensor(basis(2,1),basis(2,0)))/np.sqrt(2); negativity(test * test.dag(),0); ```. ### Code Output. ```shell; 123 """"""; 124 Compute the negativity for a multipartite quantum system described; 125 by the density matrix rho. The subsys argument is an index that; (...); 130 Experimental.; 131 """"""; 132 mask = [idx == subsys for idx, n in enumerate(rho.dims[0])]; --> 133 rho_pt = partial_transpose(rho, mask); 135 if method == 'tracenorm':; 136 N = ((rho_pt.dag() * rho_pt).sqrtm().tr().real - 1)/2.0. TypeError: 'module' object is not callable; ```. ### Expected Behaviour. should be = 0.5. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+c745ace; Numpy Version: 1.26.3; Scipy Version: 1.11.4; Cython Version: 3.0.8; Matplotlib Version: 3.8.0; Python Version: 3.12.1; Number of CPUs: 28; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2345:205,test,test,205,https://qutip.org,https://github.com/qutip/qutip/issues/2345,5,['test'],"['test', 'tested']"
Testability,"### Bug Description. The output is not consistent with what we get on an Intel chip. It either fails, does complete but has invalid output data (times and states data not the same sizes), or gives different simulation results entirely. ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np. def psd(w):; return w * np.exp(-w). out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]). assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'; ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; AssertionError Traceback (most recent call last); Input In [11], in <cell line: 6>(); 2 return w * np.exp(-w); 4 out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]); ----> 6 assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'. AssertionError: 10 vs 100; ```. ### Expected Behaviour. As we see, the above code does run and produces an output, but the states list is not the same as the times lists (these should be the same length as they have a 1-1 correspondence). It actually appears it has only given data for the first 10 time-steps in this case.; The same code works fine on Intel chip. ; We can increase the `nsteps` parameter to give the correct number of output states, but they do not agree with Intels output (also see below for related issue), and actually are not always even quantum states, so something in the solver went wrong. Another example, using the cython string formatting:. ```brmesolve([[sigmax(), 'cos(t)']], psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), '1']])``` works fine on Intel, but gives error ```Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.``` on M1. . Moreover, if I do increase the `nsteps` sufficiently, this does appear to run corr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965:452,assert,assert,452,https://qutip.org,https://github.com/qutip/qutip/issues/1965,4,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"### Bug Description. The test `Test_isherm.test_compare_implicit_zero_random` can sometime fail randomly.; I ran in locally 1000000 times and it failed 36 times.; It usually fails at high density (>90%), but can fail with a density of 75%.; https://github.com/qutip/qutip/runs/6012031509. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. It should always pass. ### Your Environment. ```shell; Seen in ""ubuntu-latest, python3.10, Python 3.10"" test job on `dev.major`.; Reproduced locally on python 3.9.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1865:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/issues/1865,2,['test'],['test']
Testability,"### Bug Description. This issue originates from a [problem in the Help Group](https://groups.google.com/g/qutip/c/F7tOoZzMjto). Calculating the entropy of a density matrix in the Dicke basis leads to -Inf, while the standard calculation with ""entropy_vn"" returns a finite (more logical) result. ; I already tracked down the problem to the calculation of eigenvalues in `dicke_trace_function`. Due to numerical behaviour some eigenvalues have very small negative values, which lead to -Inf entropy. If these values are rounded to zero, the problem disappears. However, I am not sure, which way is the best way to perform this rounding. ; @nathanshammah @quantshah . ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip.piqs import *; import numpy as np; import numpy.random; from scipy.linalg import eig; from scipy.sparse import block_diag. N = 10; system = Dicke(N); [jx, jy, jz] = jspin(N,basis=""dicke""); jx=jx*2; jy=jy*2; jz=jz*2. V=3; g=1; system.emission = 1; system.hamiltonian = V/(2*(N-1)) * jz*jz + g/2 * jx; D_tls = system.liouvillian(); rho_ss = steadystate(D_tls,method='eigen',); vn_dicke=entropy_vn_dicke(rho_ss); vn_dicke_over=entropy_vn(Qobj(block_diag(dicke_blocks_full(rho_ss)))). print(vn_dicke,vn_dicke_over); ```. ### Code Output. ```shell; -inf 0.006061297461844266; ```. ### Expected Behaviour. The value for the entropy should not depend on the way it is calculated. I.e., we should have `vn_dicke == vn_dicke_over` up to numerical uncertainty. ### Your Environment. ```shell; uTiP Version: 5.0.0.dev0+ee51e50; Numpy Version: 1.21.0; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.10; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1919:278,log,logical,278,https://qutip.org,https://github.com/qutip/qutip/issues/1919,1,['log'],['logical']
Testability,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:558,test,tested,558,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['test'],['tested']
Testability,"### Bug Description. When using qutip integrators with `mcsolve`, parallelizing fails with both `parallel` and `loky` map methods when one doesn't use improved sampling. Also, a side note - memory consumption seems to have gotten worse in setting up the mcsolve problem in v5.0 as compared to v4.7. I can provide some benchmarks later, but I am unable to go to similar truncation sizes as I could before. ### Code to Reproduce the Bug. ```py; import qutip as qp; import numpy as np; N = 2; a1 = qp.tensor(qp.destroy(N), qp.qeye(N)); a2 = qp.tensor(qp.qeye(N), qp.destroy(N)); H = -1j * 0.4 * ((a1.dag()*a1.dag() - a1 * a1) + (a2.dag()*a2.dag() - a2*a2)); psi01 = qp.tensor(qp.states.basis(N, 0), qp.states.basis(N, 0)); tlist = np.linspace(0.0, 30.0, 501); c_ops = [np.sqrt(5)*a1*a1, np.sqrt(5)*a2*a2]; result = qp.mcsolve(H, psi01, tlist, c_ops, ntraj=500, options=dict(map=""parallel"", method=""vern9"", improved_sampling=False)); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; _RemoteTraceback Traceback (most recent call last); _RemoteTraceback: ; """"""; Traceback (most recent call last):; File ""/lib/python3.10/multiprocessing/queues.py"", line 245, in _feed; obj = _ForkingPickler.dumps(obj); File ""/lib/python3.10/multiprocessing/reduction.py"", line 51, in dumps; cls(buf, protocol).dump(obj); File ""<stringsource>"", line 2, in View.MemoryView._memoryviewslice.__reduce_cython__; TypeError: no default __reduce__ due to non-trivial __cinit__; ```. ### Expected Behaviour. Parallelizing should work independently of the sampling method. . ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.12.0; Cython Version: None; Matplotlib Version: 3.9.0; Python Version: 3.10.4; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2450:318,benchmark,benchmarks,318,https://qutip.org,https://github.com/qutip/qutip/issues/2450,1,['benchmark'],['benchmarks']
Testability,"### Bug Description. While benchmarking [dynamiqs](https://github.com/dynamiqs/dynamiqs) vs QuTiP, I've noticed a large performance drop of `qutip.mesolve` when going from v4.7.6 to v5.0.1. On the example below, the benchmarks show:; ```; # QuTiP 4.7.6; # 1.42 s ± 3.17 ms per loop (mean ± std. dev. of 7 runs, 1 loop each); # QuTiP 5.0.1; # 14.5 s ± 2.32 s per loop (mean ± std. dev. of 7 runs, 1 loop each); ```; Found similar behavior on two different CPUs (mac M2, and AMD Ryzen 7). ### Code to Reproduce the Bug. ```python; import timeit. import numpy as np; import qutip as qt. def init(; kappa_2: float = 1.0,; g_cnot: float = 0.3,; nbar: float = 4.0,; num_tsave: int = 100,; N: int = 16,; ):; # time evolution; alpha = np.sqrt(nbar); gate_time = np.pi / (4 * alpha * g_cnot); tlist = np.linspace(0.0, gate_time, num_tsave). # operators; ac = qt.tensor(qt.destroy(N), qt.qeye(N)); nt = qt.tensor(qt.qeye(N), qt.num(N)). # Hamiltonian; H = g_cnot * (ac + ac.dag()) * (nt - nbar). # collapse operators; c_ops = [np.sqrt(kappa_2) * (ac**2 - nbar)]. # initial state; plus = (qt.coherent(N, alpha) + qt.coherent(N, -alpha)).unit(); psi0 = qt.tensor(plus, plus). kwargs = {'H': H, 'rho0': psi0, 'tlist': tlist, 'c_ops': c_ops}; return kwargs. kwargs = init(); %timeit qt.mesolve(**kwargs); ```. ### Your Environment. ```shell; Numpy Version: 1.25.2; Scipy Version: 1.11.2; Cython Version: 0.29.37; Matplotlib Version: 3.7.2; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2406:27,benchmark,benchmarking,27,https://qutip.org,https://github.com/qutip/qutip/issues/2406,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"### Bug Description. ```; ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f40>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_10_happy_breakdown_e_ops_none(self, happy_breakdown_parameters):; ""krylovsolve: check e_ops=None at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.check_e_ops_none(; H, psi0, tlist, dim, krylov_dim=krylov_dim; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:469: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:274: in check_e_ops_none; krylov_outputs = krylovsolve(H, psi0, tlist, krylov_dim, e_ops=None); stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:90,Test,TestKrylovSolve,90,https://qutip.org,https://github.com/qutip/qutip/issues/2190,4,"['Test', 'test']","['TestKrylovSolve', 'tests']"
Testability,"### Bug Description. qutip has functions to detect the available of BLAS libraries. For instance on my system (debian unstable), `python3 -c ""import qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:233,log,logic,233,https://qutip.org,https://github.com/qutip/qutip/issues/2053,2,"['log', 'test']","['logic', 'testing']"
Testability,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:897,log,log,897,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['log'],['log']
Testability,"### Bug Description. unit test test_dqd_current fails on aarch64 linux. ### Code to Reproduce the Bug. ```shell; the unit test; ```. ### Code Output. ```shell; =================================== FAILURES ===================================; _______________________________ test_dqd_current _______________________________; def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:26,test,test,26,https://qutip.org,https://github.com/qutip/qutip/issues/2316,2,['test'],['test']
Testability,"### Describe the Issue!. As briefly described in #1910 there are some functions in `Bloch` class that are not fully tested. Besides, there are a few other changes that may benefit `Bloch`. I would like to list them here and provide more information on the change for discussion. . The main changes I propose to do in the Bloch class are: ; - [x] clean-up of the code in `add_points` and `plot_points` methods (addressed in #1909).; - [x] Clean import statements.; - [x] clean-up of the code in `add_vectors` and `plot_vectors` methods (#1917).; - [ ] clean-up of the code in `add_state` method. ; - [ ] make the plot functions (`plot_points, plot_vectors, ...`) private as they are meant to be used only in the render method (the do not even have a docstring). This _breaks backwards compatibility_ but I imagine it will be ok as I do not expect anyone using these methods.; - [x] Test `_repr_svg_` and `_repr_png_` (there seems to be a bug in `_repr_svg_` #1912).; - [ ] We have `render` and `make_sphere` methods that do _exactly_ the same (`make_sphere` calls `render`) I would vote to deprecate `make_sphere` for QuTiP 5.0.; - [ ] Make the interface consistent among the methods `add_state`, `add_vector`, `add_points`, `add_arc` and `add_line`. (This would address #1105 ); - [ ] Address #1106.; - [ ] Update documentation AND notebooks with changes. These task are planned to be addressed each in a separate PR. I plan to finish these tasks myself but feel free to tackle any of these (or add a new one) if no PR is open and you mention it in this issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1913:116,test,tested,116,https://qutip.org,https://github.com/qutip/qutip/issues/1913,2,"['Test', 'test']","['Test', 'tested']"
Testability,"### Describe the Issue!. Cython is getting close to release a new major release. It bring 2 changes that we must asses to be compatible with it.; - The order of the `nogil` and `except` keyword. In cython 0.29, both `nogil except ...` and `except ... nogil` are supported. From 3.0, a warning is raised when the first is used. We used the first order almost everywhere. We need to reorder them all... ; - Cython 0.29 do not use reverse operations such as `__rmatmul__` and `__rmul__`, but call `__mul__` with reverse order (`__mul__(other, self)`). With cython 3, `__rmul__` is used and `self` is always the first input. This breaks some of our tests. The failing tests are related to `Coefficient.__mul__` in qutip/core/cy/coefficient.pyx, `Data.__mul__` in qutip/core/data/base.pyx and `_ConstantElement.__matmul__` and `_EvoElement.__matmul__` both in qutip/core/cy/_element.pyx. While never used, the `__mul__` methods in the last file would break if called in the wrong order.; - One of the automated tests in github action should run using cython 3. ps. This could be solved in 2 PR, an easy one for the first bullet point and another one more involved for the 2 others.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2117:645,test,tests,645,https://qutip.org,https://github.com/qutip/qutip/issues/2117,3,['test'],['tests']
Testability,"### Describe the Issue!. Hi all, I am a brand new qutip user, and am having some issues after running the qutip install. I installed with. `pip3 install qutip`. After running. `import qutip.testing; qutip.testing.run()`. I get the following lengthy output. Does anyone have an idea of what is going on?. >>> import qutip.testing; >>> qutip.testing.run(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.6; Number of CPUs: 10; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:190,test,testing,190,https://qutip.org,https://github.com/qutip/qutip/issues/2180,4,['test'],['testing']
Testability,"### Describe the Issue!. I am currently using Qutip 5.0 prerelease. When performing calculations involving 4-mode operators like $e^{A\otimes B\otimes C\otimes D}$, and setting the Hilbert space dimension to be N=7, it takes forever to finish! However, when I use Qutip 4.7, it takes only 1 second to finish same calculations with N=20... This is giving me a serious problem because I need the .logm() function from Qutip 5.0... Anyone facing the same problem? Would be nice if someone can help me :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2115:395,log,logm,395,https://qutip.org,https://github.com/qutip/qutip/issues/2115,1,['log'],['logm']
Testability,"### Describe the Issue!. I have installed Qutip version 5.0.2, and I've been trying to use the parfor method (see https://qutip.org/docs/4.0.2/guide/guide-parfor.html). When calling it, I get the error: ""NameError: name 'parfor' is not defined"".; I'm not trying to do anything exotic yet, I was just testing the rudimentary example from the webpage:. from qutip import *; def func1(x): ; return x, x**2, x**3; a, b, c = parfor(func1, range(10)); print(a)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:300,test,testing,300,https://qutip.org,https://github.com/qutip/qutip/issues/2551,1,['test'],['testing']
Testability,"### Describe the Issue!. I install Qutip from source by following the instruction.; After installing the build requirements, I ran the following command,. qutip.testing.run() ; At around 14%, the test halt, giving no report. i tried few times but same results.; (anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls PASSED [ 14%]; anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_correlation_c_ops_td[me] PASSED [ 14%]; anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_correlation_c_ops_td[mc] ). ![pyTest](https://github.com/qutip/qutip/assets/125566140/725c9acc-d29d-4bbd-a337-e4979a844151); ![pyth](https://github.com/qutip/qutip/assets/125566140/cb641e22-f5c9-4afa-bf98-e990d144bd48)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2245:161,test,testing,161,https://qutip.org,https://github.com/qutip/qutip/issues/2245,8,"['Test', 'test']","['TestTimeDependence', 'test', 'testing', 'tests']"
Testability,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839:55,test,tested,55,https://qutip.org,https://github.com/qutip/qutip/issues/1839,2,['test'],"['test', 'tested']"
Testability,"### Objective; The primary objective was to improve the computational efficiency of the `correlation_2op_1t` function in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:985,log,logging,985,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['log'],['logging']
Testability,"### Problem Description. CoreOptions has an [`rtol`](https://github.com/qutip/qutip/blob/e92f82b84acfe832f7022e7185e93e1948e4aa7a/qutip/core/options.py#L79) property, but only `atol` gets used in `Qobj.__eq__`. ### Proposed Solution. Incorporate `rtol` into equality testing. Ideally, we could have:. ```python; with CoreOptions(atol=1e-08, rtol=1e-05):; a == b; ```. which would allow comparisons similar to [np.allclose](https://numpy.org/doc/stable/reference/generated/numpy.allclose.html). ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2420:267,test,testing,267,https://qutip.org,https://github.com/qutip/qutip/issues/2420,1,['test'],['testing']
Testability,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1894:106,log,log,106,https://qutip.org,https://github.com/qutip/qutip/issues/1894,5,"['log', 'test']","['log', 'tests']"
Testability,"### Problem Description. I don't find matrix logrithm logm() in Qobj methods, so to compute matrix logrithm I call logm() in scipy.linalg, which changes the type from qobj to ndarray. And to continue the subsequent computation, I need to reinstantiate the resulting ndarray to Qobj, which is cumbersome.; It would be better if the matrix logrithm logm() is added to the Qobj. ### Proposed Solution. Add the matrix logrithm method logm() to Qobj. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1990:45,log,logrithm,45,https://qutip.org,https://github.com/qutip/qutip/issues/1990,8,['log'],"['logm', 'logrithm']"
Testability,"### Problem Description. QuTiP has bosonic `destroy` and `create` operators that satisfy the commutation relation. The same can be defined for fermions, with the name `fermionic_destroy`, and `fermionic_create` (better suggestions on names are welcome) that satisfy the anti-commutation relations. ### Proposed Solution. - Implement the function `fermionic_destroy`, and `fermionic_create`.; - Add tests to verify the implementation.; - Add docstrings with the math formulas and conventions used. The mathematical formulas and other related issues:; - https://mareknarozniak.com/2020/10/14/jordan-wigner-transformation/ (note that $\sigma^{-}=\sigma_x+i\sigma_y$, which is predefined in qutip).; - https://github.com/qutip/qutip/issues/863. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2165:398,test,tests,398,https://qutip.org,https://github.com/qutip/qutip/issues/2165,1,['test'],['tests']
Testability,"### Problem Description. There are a few issues with graphic capacities in Qutip. 1. Most are not tested. Only Bloch.py has some tests associated. While testing graphs is not evident, matplotlib has testing functions to compare graphs etc. and just running it to ensure that no errors are raised would be a nice start. Here are some files and their coverage:; - tomography.py 50%; - visualization.py 8%; - distribution.py 23%; - bloch.py 55%; - bloch3d.py 8%. 2. The interface is not uniform. Most functions take 'fig' and 'ax', but `hilton` only takes 'ax' but no 'fig'. Maybe one third of the function in visualization accepts 'title' and half a 'figsize'. The order of these options is also inconsistent, 'fig', 'ax' can be the first parameters or the last... As seen in #1573, some want more control so `matrix_histogram` accepts `options`. I am all for more control, but being available for only one function feels wrong. On the bloch side, there is a mismatch between `add_vectors`, `add_points`, which takes `color` and `alpha` as input, and `add_arc`, `add_line` which takes `**kwargs`. 3. The colorblind mode should works everywhere, but presently only `hilton` support it. ### Proposed Solution. So for v5 release, the interface of all these should be clean and uniform, with proper tests. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1910:98,test,tested,98,https://qutip.org,https://github.com/qutip/qutip/issues/1910,5,['test'],"['tested', 'testing', 'tests']"
Testability,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:692,test,test,692,https://qutip.org,https://github.com/qutip/qutip/issues/1898,1,['test'],['test']
Testability,"### Problem Description. `master` has qutip/qutip/cy/openmp/src/[zspmv_openmp.hpp](https://github.com/qutip/qutip/blob/master/qutip/cy/openmp/src/zspmv_openmp.hpp), for csr @ dense product with openmp, but we did not have the time to add when making the data layer for `dev.major`. In v4, to use openmp, the user needs to compile from source locally with `python setup.py install --with-openmp` and then an option has to be passed to the solver at run time to use it. For v5, it would be great if openMP was part of the Data layer and used without much thought by the user. (No need to pass `Options(use_openmp=True)` to `mesolve`). We would probably keep a flag and threshold as an option in core or settings so we can run tests with and without. We should add support for cython's `prange`. Presently, using it breaks mac's tests. If made available, there are quite a few functions for the data layer that could gain from it. While openmp is available in v4, it was not used much since it can only be used when compiling locally and the options isn't well known. Ideally, it would be packaged in the wheels (for all but Mac?) instead of needing a local installation. However it does not seems easy, [scipy decided against it](https://github.com/scipy/scipy/blob/38261c1141b8aa80bceeef419911fb4f31df5372/doc/source/dev/toolchain.rst#openmp-support), because it does not mix well with [other parallel environments](https://github.com/scipy/scipy/issues/10239#issuecomment-795030817). It may be possible with conda since it has a openmp package. . ### Proposed Solution. Tasks:; - Restore the compilation option for openmp and have `matmul_csr_dense_dense` use `zspmvpy_openmp`.; - Add options in core to control openmp. In `parallel_map`, turn it of when using multiprocessing.; - Add `prange` in a function (`mul_dense`) and ensure that tests passes and wheels build.; - Add `prange` elsewhere where useful. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1904:724,test,tests,724,https://qutip.org,https://github.com/qutip/qutip/issues/1904,3,['test'],['tests']
Testability,"#1347 changed the setup of the tests, but it went unnoticed (sorry!) that the Python version wasn't set correctly; we've been silently testing everything against python-latest since then. That wasn't an issue as long as Python 3.8 was the latest, but the release of Python 3.9 (and the fact we haven't rebuilt a binary distribution of QuTiP for 3.9) caused all Linux builds to break. Mac builds were unaffected because they set `$_PYTHON_VERSION` to a string literal. The Linux Python version was not set correctly because it attempted to set it to the definition of `$TRAVIS_PYTHON_VERSION` _as defined during the `env` stage of the Travis build_. Unfortunately, this environment variable isn't defined until after that stage, which caused us to pass an empty constraint on the Python version to conda, resulting in us getting the latest version. This moves this part of the environment setup into the pre-install phase so `TRAVIS_PYTHON_VERSION` is now set, and guards it with a conditional so the mac builds can still neatly override the standard setup. **Changelog**; Fix Python version setting in CI tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1381:31,test,tests,31,https://qutip.org,https://github.com/qutip/qutip/pull/1381,3,['test'],"['testing', 'tests']"
Testability,#This pull request will deal with a new module for solving quantum systems exploiting permutational symmetries. A somewhat complete code for this is available at https://github.com/nathanshammah/piqs which is built on several papers @nathanshammah can link to. The code is almost complete and tested but here we will upload it in parts to make the review process easy. @ajgpitch @nonhermitian @nwlambert,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753:293,test,tested,293,https://qutip.org,https://github.com/qutip/qutip/pull/753,1,['test'],['tested']
Testability,%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6541,test,tests,6541,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23989,test,tests,23989,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433:1217,test,test,1217,https://qutip.org,https://github.com/qutip/qutip/issues/1433,1,['test'],['test']
Testability,"(; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10983,test,testing,10983,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:3503,Test,TestDicke,3503,https://qutip.org,https://github.com/qutip/qutip/issues/1451,1,['Test'],['TestDicke']
Testability,") * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required posi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4167,test,tests,4167,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,")), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4193,test,tests,4193,https://qutip.org,https://github.com/qutip/qutip/issues/1421,2,['test'],['tests']
Testability,"* import + sesolve. * psi in args part 1. * psi in args part 2. * state in args part3. * dyn args test1. * dyn args test2. * args debug. * ready for tests. * s/mesolve pass tests. * mcsolve rework. * mcsolve rework part 2. * mcsolve cython cleaning. * mcsolve working. * mcsolve cython as object. * mcsolve pass all test. * automated test almost passing. * pass all tests. * docs and cleaning. * diag ok. * clean propagator. * clean propagator 2. * clean floquet. * clean floquet 2. * mcsolve serial_map bugfix. * object args bug correction. * dense cQobjEvo bugfix. * spliting PR. * merge priority correction. * merge priority correction. * mcsolve based on qoevo. * better rouchon citation. * final state avg?. * faster postprocessing. * final_state average flag. * final state runs as property. * Some patches for qip.Gate (#995). * remove repetitive assignment. * move description to class def. Doc won't show it if it's under __init__. * check invalid input for targets and control. * all must be integer. * NotImplemented is not callable, use NotImplementedError. * add whitespace. * refactor. * format correction",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1043:149,test,tests,149,https://qutip.org,https://github.com/qutip/qutip/pull/1043,5,['test'],"['test', 'tests']"
Testability,"* sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2256,Assert,AssertionError,2256,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"**Background**. Since I am planning to add an mpi_parallel_map to the parallel module, I had a detailed look at the current implementations of parallel_map and loky_pmap. In the case of timeouts, errors or interrupts, I found surprising behavior. I will first summarize the current behavior in these situations, and then the behavior if my changes are included. It seems difficult to write better unit tests for such timing-sensitive behavior, but I have tested in detail on both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: rais",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:402,test,tests,402,https://qutip.org,https://github.com/qutip/qutip/pull/2280,2,['test'],"['tested', 'tests']"
Testability,**Changelog**; Added tests for Norm.; `norm.trace` raises `ValueError` instead of `TypeError` when the input is not a square matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1631:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1631,1,['test'],['tests']
Testability,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1637:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1637,4,['test'],['tests']
Testability,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1744:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1744,6,['test'],['tests']
Testability,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1746:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1746,5,['test'],"['test', 'tests']"
Testability,"**Checklist**; - [x] PEP8. **Description**; The behaviour of the `liouvillian` seemed to be wrong. For a `TfTensor` as input it returned a `Dense` as oupu. This is mainly because the identity matrix created within the function was not a `TfTensor`. . _Testing The tests that I included where would pass without the fix!_ . Reproducing this behaviour within QuTiP seems to be challenging. This is because of how things are automatically converted from one data type to another. In particular, `liouvillian` worked as expected for both `Dense` and `CSR` but not for `TfTensor`. However, since `TfTensor` is not part of qutip I am not sure how to make it to reproduce this error. . The issue seems in fact to be related to an inconsistency in how data is automatically transformed. The following code summarises the problem:; ```; H = qt.rand_herm(5); csr = H.to('csr').data; dense = H.to('dense').data; tftensor = H.to('tftensor').data. qutip.data.kron(csr, dense) # output: dense; qutip.data.kron(csr, csr) # output: csr; qutip.data.kron(csr, tftensor) # output: dense?? this is what causes problems!; qutip.data.kron(tftensor, tftensor) # output: tftensor; ```. **Changelog**; Fixed liouvillian to not generate dense output when used with TfTensor.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1805:264,test,tests,264,https://qutip.org,https://github.com/qutip/qutip/pull/1805,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR is supposed to mark on-going additions to a new class `qutip.qip.circuit.Measurement` as well as an elementary `qutip.qip.circuit.Measurement.QubitCircuit.run()` function to exactly simulate quantum circuits. The major functions added right now are:. - `Measurement.density_measurement(self, measurement_ops, state)` : This adds generalized state/density matrix measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based meas",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:363,test,tests,363,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; This PR is supposed to address the OpenQASM output functionality. It introduces the class `QasmOutput` and the primary functions:. - `print_qasm(qc)` : prints the QASM output of `QubitCircuit`.; - `save_qasm(qc, file_loc)` : saves the QASM output of `QubitCircuit` to a file. Two [OpenQASM](https://github.com/Qiskit/openqasm) features are missing from this PR that might need to be addressed in a future PR, the possibility of exporting gates with classical control and exporting QuTiP's user-defined gates. . **Related issues or PRs**; This is a companion to PR #1291 and includes the code from it. **Changelog**; Added QASM output functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1318:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1318,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1438:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1438,2,"['log', 'test']","['log', 'tests']"
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/qutip_dev_contrib.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1270:487,test,tests,487,https://qutip.org,https://github.com/qutip/qutip/pull/1270,2,"['log', 'test']","['log', 'tests']"
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1487,2,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [X] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [X] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [X] Please add tests to cover your changes if applicable.; - [X] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; Added an argument `bc_type` to allow users to specify boundary conditions for interpolating `QobjEvo`. **Related issues or PRs**; [fix #2098 ](https://github.com/qutip/qutip/issues/2098)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2114:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2114,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR presents a prototype for emitting Quantum Intermediate Representation (QIR) modules from `qutip.qip.QubitCircuit` objects, making it easier to interoperate QuTiP with other quantum software tools and platforms. The prototype in this PR uses the [PyQIR](https://qir-alliance.github.io/pyqir/) library for Python to handle QIR generation, isolating QIR generation functionality as an optional dependency. . **Changelog**. - Support for emitting QIR from circuit objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1781:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/1781,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Moved HTMLProgressBar from `qutip/ipynbtools.py` to `qutip/ui/progressbar.py`. **Related issues or PRs**; Fix #2108",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2112,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**. I am adding an efficient module for calculating the wave function that uses a recurrence for it in Cython, and I am applying one of its functions in the update method of the HarmonicOscillatorWaveFunction class in the distribution.py module. This module is an adaptation of one of the modules from the package I developed for efficient wave function calculation: Fast Wave. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2553:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2553,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Do the same change for plot_wigner_sphere and matrix_histogram as #2170 did.; #2170 ; 1. The arguments in plot_wigner_sphere is now similar to those of other functions. Of course, it change its color as users set qutip.settings.colorblind_safe=True.; ```; def plot_wigner_sphere(wigner, reflections=False, *, cmap=None,; colorbar=True, fig=None, ax=None):; ```; 2. matrix_histogram and matrix_histogram_complex combined into one function. The new matrix_histogram can change bar_style and color_style. Here is an example.; <img width=""894"" alt=""matrix_histogram"" src=""https://github.com/qutip/qutip/assets/72233550/a4c94bba-06f8-474f-b6cf-88e0385d7d5a"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2193:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2193,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; Add tests for ui.progressbar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2127,2,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; sphereplot and plot_spin_distribution accepts a matrix of values, theta and phi, but the order of them is different and not intuitive to users.; ```; def sphereplot(theta, phi, values, ...; ```; ```; def plot_spin_distribution(P, THETA, PHI, ...; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2219:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2219,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Add a new store_density_matricies option to Result. **Related issues or PRs**; Fixes #2299",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2303,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Add the sparse COO format. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2314:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2314,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Deleted _solve and use _data.solve. **Related issues or PRs**; #2109",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2120:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2120,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This is part of the Google Summer of Code project. My contribution consists of two parts.; One part is organizing arguments of functions in visualization.py. This change helps users to set arguments without referencing documents frequently.; For example, hinton does not have figsize, but other functions such as plot_energy_level do. Also, the order of the arguments varies from function to function, so the user had to see the official document.; I addressed these issues by making the following modifications; First, arguments that many functions should have in common, such as fig and ax, are now keyword arguments.; Second, the order of the argume",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2170:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2170,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; pytest for #2170",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2192:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2192,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; There are three major parts to this PR (more or less interlinked): . - Adds `Simulator` class to abstract away circuit run functionality. This enables future contributors to add to exact simulation (and potentially other ways of simulation) easily. It also has a `step` function which allows to go over the circuit step-by-step which could enable interesting visualisations.; - Adds `Result` class as a wrapper around results obtained from circuit simulations. ; - Adds a more efficient mode to `gate_sequence_product` function which allows for faster pre-computation of unitaries. **Changelog**; Added `Simulator`, `Result` class ; Added new mode to `gate_sequence_product`, `QubitCircuit.propagators`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1331:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1331,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Fix one warning of #1389 , the others have already been fixed in the main branch. **Related issues or PRs**; Fixes #1389 . **Changelog**; Fix one installation warning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1390:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1390,1,['test'],['tests']
Testability,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:30,test,tests,30,https://qutip.org,https://github.com/qutip/qutip/issues/1639,9,['test'],"['test', 'testing', 'tests']"
Testability,"**Describe the bug**; As described in the title, ``file_`` in ``_file_list().add(file_)`` already has the extension ``'.pyx'`` (this is done by _import_str() in qobjevo_codegen.py), it is unnecessary to add yet another suffix. **To Reproduce**; This can be verified by add a line printing out ``file_`` in ``_file_list().clean()`` ; then run any test that can trigger it (for example ``test_QobjEvo_with_state()``) and observe the output. **Expected behavior**; Should only have a single ``'.pyx'`` in ``file_``. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.0.dev0+8e181cc4; Numpy Version: 1.19.1; Scipy Version: 1.5.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.1; Python Version: 3.8.5; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\berry\PycharmProjects\qutip\qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; I discovered this when dealing with some test failures in windows, it seems that there are multiple problems in ``qobjevo.py`` (actually, what I really wanted to figure out in the first place was that some compiled modules would be deleted before being imported). Anyway, I will update this issue whenever I make any progress.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1354:346,test,test,346,https://qutip.org,https://github.com/qutip/qutip/issues/1354,2,['test'],['test']
Testability,"**Describe the bug**; AttributeError: module 'scipy.sparse._sparsetools' has no attribute 'csr_matmat_pass1' . **To Reproduce**; Install the latest version of scipy 1.5.0, install qutip, and run the tests. The following fail due to the AttributeError specified above:; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[True-2-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[True-10-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[False-2-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[False-10-rand_bra]; - test_brtools.py::test_zheevr; I stopped running the tests after these errors appear, and I don't know if it causes other tests to fail as well.; The test_zheevr shows another error, but it fixes when using a previous version of scipy (e.g. 1.3). . The terminal out put is; ```; > fn = getattr(_sparsetools, self.format + '_matmat_pass1'); E AttributeError: module 'scipy.sparse._sparsetools' has no attribute 'csr_matmat_pass1'. /usr/local/lib/python3.6/dist-packages/qutip-4.5.0-py3.6-linux-x86_64.egg/qutip/fastsparse.py:197: AttributeError; ```. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0; Numpy Version: 1.19.0; Scipy Version: 1.3.0 (error fixed); Scipy Version: 1.5.0 (error present); Cython Version: 0.29.20; Matplotlib Version: 3.2.2; Python Version: 3.6.9; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: Fal",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304:199,test,tests,199,https://qutip.org,https://github.com/qutip/qutip/issues/1304,3,['test'],['tests']
Testability,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:823,test,tests,823,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1650:31,test,test,31,https://qutip.org,https://github.com/qutip/qutip/issues/1650,8,['test'],"['test', 'testing']"
Testability,"**Describe the bug**; I'm trying to run some example projects but consistently run into an issue with numpy. I'm quite new to numpy so I couldn't figure out a suitable fix. The following is taken from J. R. Johansson's tutorial 1 (Jaynes Cumming Model), which ran on numpy 1.81. I am currently running numpy 1.16.5. I also tested lower versions of numpy down to 1.14.0; **To Reproduce**; Here is the code to reproduce it:. ```python; output = mesolve(H, psi0, tlist, c_ops, []). # find the indices of the density matrices for the times we are interested in; t_idx = where([tlist == t for t in [0.0, 5.0, 15.0, 25.0]])[1]; tlist[t_idx]. rho_list = array(output.states)[t_idx]; ```; The terminal out put is; ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-44-f8edfb054c33> in <module>; 1 # get a list density matrices; ----> 2 rho_list = array(output.states)[t_idx]. TypeError: must be real number, not Qobj; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1272:323,test,tested,323,https://qutip.org,https://github.com/qutip/qutip/issues/1272,1,['test'],['tested']
Testability,**Describe the bug**; `test_fileio` is failing on Windows because this use of `tempfile.NamedTemporaryFile` doesn't work on windows. The temporary files cannot be opened twice on Windows according to https://docs.python.org/3.8/library/tempfile.html#tempfile.NamedTemporaryFile.; https://github.com/qutip/qutip/blob/9e82f5b81955952833e25bb3eeff3fa24d36556b/qutip/tests/conftest.py#L194-L197; followed by; https://github.com/qutip/qutip/blob/9e82f5b81955952833e25bb3eeff3fa24d36556b/qutip/fileio.py#L70; results in a permission error. **To Reproduce**; Run `test_fileio.py` on windows. **Your Environment**; QuTiP Version: 4.6.0.dev0+6ad7f2b8; Numpy Version: 1.18.2; Scipy Version: 1.4.1; Cython Version: 0.29.20; Matplotlib Version: 3.2.1; Python Version: 3.7.2; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64). Do you have any idea on a replacement @jakelishman ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1311:363,test,tests,363,https://qutip.org,https://github.com/qutip/qutip/issues/1311,1,['test'],['tests']
Testability,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:346,test,testing,346,https://qutip.org,https://github.com/qutip/qutip/issues/1711,4,['test'],"['test', 'testPropHOSteadyPar', 'testing']"
Testability,"**Description**. - Allow imports of `qutip.qip` seamlessly as imports of `qutip_qip`; - Test the import behaviour when `qutip_qip` is installed and when not. **Related issues or PRs**; Incorporates the ideas in the discussion of #1500.; Fixes #1893. **Todos and questions**; - [ ] ~~Have `qutip-qip` be an optional dependency~~ (will be left for a future PR); - [ ] ~~Add installation of `qutip-qip` to the CI workflow~~. I have a draft of these changes locally, but they fail due to a dependency conflict: `qutip_qip` currently requires `qutip<5 and >=4.6 ` while these changes are being implemented in `v5.0.0.dev`, ie `>5`. This will cause the unit test where `qutip_qip` is installed to be skipped. Any ideas on how to get around this?. **Edit**: Uses a stub for the `qutip_qip` package in the units tests instead, which removes the need of having `qutip-qip` installed. **Changelog**. Allow imports of `qutip.qip` seamlessly as imports of `qutip_qip`.; Have `qutip-qip` be an optional dependency.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920:88,Test,Test,88,https://qutip.org,https://github.com/qutip/qutip/pull/1920,4,"['Test', 'stub', 'test']","['Test', 'stub', 'test', 'tests']"
Testability,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:187,test,tests,187,https://qutip.org,https://github.com/qutip/qutip/pull/1632,7,['test'],"['test', 'tests']"
Testability,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655:894,test,tests,894,https://qutip.org,https://github.com/qutip/qutip/pull/1655,1,['test'],['tests']
Testability,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1850:260,test,tests,260,https://qutip.org,https://github.com/qutip/qutip/pull/1850,7,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,**Description**. Merge the latest changes of master.; - Activating the windows tests.; - Updating the changelog.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1859:79,test,tests,79,https://qutip.org,https://github.com/qutip/qutip/pull/1859,1,['test'],['tests']
Testability,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1543:392,test,test,392,https://qutip.org,https://github.com/qutip/qutip/pull/1543,1,['test'],['test']
Testability,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723:88,test,tests,88,https://qutip.org,https://github.com/qutip/qutip/pull/1723,11,"['Test', 'test']","['TestAdd', 'TestReshape', 'testing', 'tests']"
Testability,"**Description**. Python 3.6 tests fail to build cvxopt, there was a new version released last week.; This simply run these tests without it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/2215,2,['test'],['tests']
Testability,"**Description**. The aim of this project is to enhance the capabilities of qutip's HEOM implementation by introducing a set of tools that offer the option to simulate arbitrary spectral densities or correlation functions. . To achieve this the main idea is to fit our wanted spectral density by a set of underdamped Drude-Lorentz spectral densities or correlation functions. The idea is that the user will supply his desired spectral density or correlation function and the tools will automatically do the fit and construct the corresponding HEOM bath. Guesses ffor the fit and the number of terms will be decided automatically if the user does not specify them. To decided on the number of terms, we will used the normalized root mean square error as a measure of the goodness of the fit. . I also added functions to bosonic bath to quickly obtain the correlation function, power spectrum and spectral density for the existing bosonic baths . **Note**. Those tests fail because mpmath is not in the requirements, it is needed because the scipy version of the Rienmann zeta function doesn't take complex arguments (https://github.com/scipy/scipy/issues/9182). **Related issues or PRs**. The Qutip tutorial notebooks are updated to show this new functionality in (https://github.com/qutip/qutip-tutorials/pull/72)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2260:960,test,tests,960,https://qutip.org,https://github.com/qutip/qutip/pull/2260,1,['test'],['tests']
Testability,"**Description**. Update the interface of random functions:; - The first input is `dimensions` instead of `N`. It act the same way as the input of `qeye`. (#1838); ```; qutip.rand_herm(N).dims == [[N], [N]]; qutip.rand_herm(dims).dims == [dims, dims]. qutip.rand_super(N).dims == [[[N], [N]], [[N], [N]]]; qutip.rand_super([N, M]).dims == [[[N, M], [N, M]], [[N, M], [N, M]]]; qutip.rand_super([[N], [N]]).dims == [[[N], [N]], [[N], [N]]]; ```; - Random Qobj creation use numpy new random interface. The seed now also accept `numpy.random.SeedSequence` or `numpy.random.Generator`.; - We had `unitary = (1j*rand_herm(N, density)).expm()`, therefore the resulting density for `rand_unitary` (and `rand_dm`) used to be denser than what was entered. I changed the density keyword to correspond to the density of output object. I do this by creating a smaller dense matrices and shuffling them together.; - Random super operator function now accept a `superrep` keyword and return the object in that representation. This work for `super`, `chi` and `choi` representation, but not `kraus` since it's not a `Qobj` and this cause issue with the `dtype` keyword.; - Lastly I merged some similar functions: `rand_unitary_haar` is now included as `rand_unitary(N, distribution=""haar"")`, etc. We had a few functions that returned the same type of object, but with different algorithm. I found this confusing, so I merged them to show they are equivalent. The algorithms having a reference to a paper are used as the defaults. I did not keep the previous functions, but we could keep them with a deprecation warning. Lastly I merged the `test_rand` and `test_random` files. Tests in those files where overlapping. **Related issues or PRs**; fix #1838",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1976:1661,Test,Tests,1661,https://qutip.org,https://github.com/qutip/qutip/pull/1976,1,['Test'],['Tests']
Testability,**Description**. Updated steadystate solvers to use ` _dims[0].oper ` (instead of `dims[0]`) to get the dimensions of the returned state from the Liouvillian. This should fix the issue with enr states and steadystate solvers. . Also updated the svd method a little bit to be more consistent with the others. Added a basic test of just the default steadystate solver method. **Related issues or PRs**; fixes #2386,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2387:322,test,test,322,https://qutip.org,https://github.com/qutip/qutip/pull/2387,1,['test'],['test']
Testability,**Description**. We allow scipy version 1.12 (released about 2 months ago) to be used with qutip. Scipy 1.12 is already tested in the build matrix https://github.com/qutip/qutip/blob/master/.github/workflows/tests.yml#L93,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2354:120,test,tested,120,https://qutip.org,https://github.com/qutip/qutip/pull/2354,2,['test'],"['tested', 'tests']"
Testability,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1694,4,"['Test', 'test']","['Test', 'tests']"
Testability,"**Description**. With the inclusion of the new dimensions class, stored in Qobj()'s _dims property, the properties of ENR states are described by ENRspace(). However, when using ENR states with mesolve, Liouvillian, sum() and other functions these _dim properties would be discarded. This PR is a draft attempt to get things working, largely by subbing in _dims instead of dims in various places, and a test to check ENR+mesolve() works for a simple case. All tests pass, but since this is just some bodging to get things working, and messes a little bit with some core functions maybe its also good to check the tutorial notebooks also pass. edit: forgot to mention, this is not exhaustive; e.g., sprepost() has not been updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2341:403,test,test,403,https://qutip.org,https://github.com/qutip/qutip/pull/2341,2,['test'],"['test', 'tests']"
Testability,"**Description**; - Add a mention that filelock is needed for string coefficient compilation in the guide.; - When a string coefficient is used, a warning will be raised (once) if either cython or filelock is missing.; - Skip string coefficient compilation test when cython is present by filelock is not instead of only checking for cython. **Related issues or PRs**; fix #2162",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2168:256,test,test,256,https://qutip.org,https://github.com/qutip/qutip/pull/2168,1,['test'],['test']
Testability,"**Description**; - Add a test for progress bars.; - Make `start` private. `start` was mostly used right after the initialization. The docstring indicated that it was not needed, but it was for most bars. #2148; - Remove the iteration argument in update.; - Have `HTMLProgressBar` import ipython. **Related issues or PRs**; Fix the issue #2148 for master.; Replace #2127",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['test'],['test']
Testability,"**Description**; - Add product between `Qobj`, `QobjEvo` and `Coefficient`:; `QobjEvo([op, ""t""]) === op * coefficient(""t"")`; - `tensor` accept `QobjEvo`; - Overload `&` for tensor product for `Qobj` and `QobjEvo`:; `tensor(A, B) === A & B`; - Add `__matmul__` to `QobjEvo`.; - Remove call to `QobjEvo.compile` outside `qobjEvo.py`. (Always compiled); - Add `dims` and `shape` as read-only properties of `QobjEvo`.; - Reworked `QobjEvo`'s tests. ; - Found a bug in `liouvillian` with constant `QobjEvo` and `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1342:438,test,tests,438,https://qutip.org,https://github.com/qutip/qutip/pull/1342,1,['test'],['tests']
Testability,"**Description**; - Added a job that update to testpypi when the ""test"" is entered as the branch name.; - Removed the check that stopped release with `dev` in the version number.; - Added a token for testpypi. While it's a draft PR, the action will only print, not run the upload command.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2069:46,test,testpypi,46,https://qutip.org,https://github.com/qutip/qutip/pull/2069,3,['test'],"['test', 'testpypi']"
Testability,**Description**; - Added controlled version of the single-qubit gates; - Added controlled single-qubit gates to Qubit.Qip.Circuit.resolve_gates(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.propagator(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.latex_code(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.add_1q_gate(); - Added tests for controlled single-qubit gates in Qubit.Qip.Operations.Gates and Qubit.Qip.Circuit. **Related issues or PRs**; fixes #1225 . **Changelog**; The controlled version of the single-qubit gates and tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224:375,test,tests,375,https://qutip.org,https://github.com/qutip/qutip/pull/1224,2,['test'],['tests']
Testability,"**Description**; - Adds support for pathlib.Path objects in qsave/qload.; - Adds tests for those functions.; - Suffix is optional, if given it won't be appended again.; - Removes prints in qload. **Related issues or PRs**; fix #1184. **Changelog**; `qsave` and `qload` now support `pathlib.Path` objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1813:81,test,tests,81,https://qutip.org,https://github.com/qutip/qutip/pull/1813,1,['test'],['tests']
Testability,"**Description**; - Remove `run_module_suite`, call nosetest, not pytest.; - Change `assert_` to `assert`, the later work better with pytest.; - Add some missing `__all__`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2143:97,assert,assert,97,https://qutip.org,https://github.com/qutip/qutip/pull/2143,1,['assert'],['assert']
Testability,"**Description**; - Support `X`, `Y`, `Z` gates in gate decomposition. Decompose them into `RX`, `RY`, `RZ` gates, with the corresponding global phase. Now `X`, `Y`, `Z` can be used in `Processor`.; - Modernize tests for `CavityQED` and `SpinChain`. **Changelog**; XYZ gates decomposition and modernizing tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1356:210,test,tests,210,https://qutip.org,https://github.com/qutip/qutip/pull/1356,2,['test'],['tests']
Testability,"**Description**; A change in `test_k`. In commit 7173a0d `L` was changed, but this was not reflected in `dim_H`. This commit aims to rectify that. **Related issues or PRs**. **Changelog**; Changed `dim_H` to include `L` in its definition in lattice tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1785:249,test,tests,249,https://qutip.org,https://github.com/qutip/qutip/pull/1785,1,['test'],['tests']
Testability,"**Description**; A change in setuptools (pypa/setuptools#3521) raise a warning when compiling coefficient using absolute path, which breaks our tests for `dev.major`:; ```; DeprecationWarning: Absolute path '/home/runner/.qutip/qutip_coeffs_1.1/qtcoeff_8208be2129365a87dda9c12028c457' is being replaced with a relative path 'home/runner/.qutip/qutip_coeffs_1.1/qtcoeff_8208be2129365a87dda9c12028c457' for outputs. This behavior is deprecated. If this behavior is desired, please comment in pypa/distutils#169.; ```; This changes the path to be relative. I change the path before creating the lock files, which otherwise were polluting the active directory.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1975:144,test,tests,144,https://qutip.org,https://github.com/qutip/qutip/pull/1975,1,['test'],['tests']
Testability,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1588:1446,test,tested,1446,https://qutip.org,https://github.com/qutip/qutip/pull/1588,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,"**Description**; A test for hanging github's action.; To see if it could be caused by multiprocessing, it over with `parallel_map` with `serial_map` so all test are forced to run in one process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1789:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1789,2,['test'],['test']
Testability,"**Description**; A test was failing since the numpy 2.1 release on windows. ; It seems to be related the the way low level libraries are linked, a lower precision was used on windows... Loosening the ODE tolerance fix the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2516:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/2516,1,['test'],['test']
Testability,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854:36,test,tests,36,https://qutip.org,https://github.com/qutip/qutip/pull/1854,2,['test'],['tests']
Testability,**Description**; Activate the mcsolve tests in QuTiP 5. Changes:; - [x] Swap parallel_map over to ProcessPoolExecutor.; - [x] Switch ``mcsolve`` to the new parallel_map. ; - [x] Reactivated mcsolve tests on Windows. . **Related issues or PRs**; - Continues work from #1853 and #1854 in v4; - #1202 (maybe already resolved in QuTiP 5); - #1190 (hopefully already resolved in QuTiP 5),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1948,2,['test'],['tests']
Testability,"**Description**; Add CSC data-layer. For our use, CSC is almost always slower than CSR...; I build it for testing possible use in AHS. I reused the CSR code as much as possible. Specializations where the *free* transformation `CSC -> transpose(CSR)` could be used have been added. **Related issues or PRs**; Build on top of #1407.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1408:106,test,testing,106,https://qutip.org,https://github.com/qutip/qutip/pull/1408,1,['test'],['testing']
Testability,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - Clean up of #1849. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1853:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/1853,2,['test'],['test']
Testability,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - None so far. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1849:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/1849,2,['test'],['test']
Testability,**Description**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver. **Todo**; - [x] Clean-up the Pade expansion code.; - [x] ~~Somehow get the Matsubara and Pade results for the current to match.~~ (These are not supposed to match!); - [x] Add solver tests for the Lorentzian baths.; - [x] Add bath tests for the Lorentzian baths.; - [x] Add tests for the DrudeLorentzPadeBath terminator.; - [x] Convert the slightly awkward terminator= argument for Drude-Lorentz baths to a terminator method. **Related issues or PRs**; * #1601; * #1724. **Changelog**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726:271,test,tests,271,https://qutip.org,https://github.com/qutip/qutip/pull/1726,3,['test'],['tests']
Testability,**Description**; Add `Qobj.logm()` for the matrix logarithm operation. **Related issues or PRs**; Fix #1990 for master,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1992:27,log,logm,27,https://qutip.org,https://github.com/qutip/qutip/pull/1992,2,['log'],"['logarithm', 'logm']"
Testability,**Description**; Add `Qobj.logm()` for the matrix logarithm operation.; Only create the `Dense` operation was created. `expm_dense` was also added. **Related issues or PRs**; Fix #1990 for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1993:27,log,logm,27,https://qutip.org,https://github.com/qutip/qutip/pull/1993,2,['log'],"['logarithm', 'logm']"
Testability,"**Description**; Add `pyproject.toml` to specify build-system as standardized in PEP 518. This enables building qutip in an emtpy environment i.e. without `setuptools`, `Cython`, `numpy` and `scipy` being pre-installed. If you have a new minimal debian install you sould be able to install this version with; ```; # apt-get install python3-pip; $ pip3 install $PATH_TO_QUTIP; ```; I only veryfied this in WSL so please test :). **Related issues or PRs**; This solves #1246 and #1174 and makes CI for packages that depend on qutip a lot easier. **Changelog**; Add `pyproject.toml` so qutip can be built without prerequisites",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1309:419,test,test,419,https://qutip.org,https://github.com/qutip/qutip/pull/1309,1,['test'],['test']
Testability,"**Description**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix. **Related issues or PRs**; * If test pass consistently with numpy 1.22, we can close #1694. **Changelog**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1777:66,test,test,66,https://qutip.org,https://github.com/qutip/qutip/pull/1777,3,['test'],['test']
Testability,"**Description**; Add a suggestion for tests in the PR template. **Related issues or PRs**; Improve #1198 . **Changelog**; Add a suggestion for tests, documentation and notebook in the PR template.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1220:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1220,2,['test'],['tests']
Testability,"**Description**; Add a variant to `matmul` specialised for case where the right matrix is a column stacked hermitian matrix, and the output is the same. Such as for `mesolve` using super operators. Open solvers `mesolve`, `brmesolve`, `smesolve` and `fmesolve` all have a new options `use_herm_matmul` to use this operation. The default is `False` since we cannot easily check for exception (we can't test that a time dependant Hamiltonian is Hermitian, ...). With large enough systems, this result in a visible speed up:; ```; >>> N = 100; >>> H = qt.rand_herm(N, density=3/N); >>> c_ops = [qt.destroy(N)]. >>> qt.mesolve(H, qt.basis(N, N-2), [0, 10], c_ops=c_ops, options={""use_herm_matmul"": True}).stats[""run time""]; 0.8431086540222168; >>> qt.mesolve(H, qt.basis(N, N-2), [0, 10], c_ops=c_ops, options={""use_herm_matmul"": False}).stats[""run time""]; 1.0559077262878418. qt.smesolve(H, qt.basis(N, N-2), [0, 2], sc_ops=c_ops, ntraj=1, options={""use_herm_matmul"": True}).stats[""run time""]; 0.9043550491333008; qt.smesolve(H, qt.basis(N, N-2), [0, 2], sc_ops=c_ops, ntraj=1, options={""use_herm_matmul"": False}).stats[""run time""]; 2.111673355102539; ```. This is a use case for the capacity to dispatch on `Data` added in #2157. When `herm_matmul` is not available, it can be better to fallback on `matmul` using the same type than to do conversions between data types. For cupy, moving the data to the cpu to halves the work is probably not worth it. ; **Related issues or PRs**; This is build on top of #2157, it should be merged first.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173:401,test,test,401,https://qutip.org,https://github.com/qutip/qutip/pull/2173,1,['test'],['test']
Testability,**Description**; Add do_3d_projection to Arrow3D for matplotlib 3.5 to fix the rendering of vectors on the Bloch sphere. This PR also adds tests for rendering vectors and adds support for passing vectors as tuples. **Related issues or PRs**; - fix #1817; - builds on #1690. **Changelog**; Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above.; Allowed vectors to be passed as tuples to Bloch.add_vectors.; Added tests for rendering vectors on the Bloch sphere.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1818:139,test,tests,139,https://qutip.org,https://github.com/qutip/qutip/pull/1818,2,['test'],['tests']
Testability,"**Description**; Add hypothesis strategies for data objects and some simple property-based tests for data operations. We aim for compatibility with numpy, but there are caveats in few different cases:. | Operations | Non-finites Equivalent | Notes |; | -- | -- | -- |; | Creation & negation | | No caveats |; | Equality checks | | The same tolerances must be specified |; | Addition & subtraction | Yes | |; | Scalar multiplication & division | Yes | CSR may raise an exception if the scalar is non-finite |; | Matrix multiplication | Not tests | Magnitude range is restrict to ensure precision |; | Trace, adjoint, transpose, conj & copy | | No caveats |. In some cases we also need to ignore warnings raised by numpy about operations with `nan` and `inf` when calculating the expected result. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/pull/1957,2,['test'],['tests']
Testability,"**Description**; Add inplace operations `+=`, `-=`, `*=`, `@=`, `/=` for Qobj.; These operations could already be used as python fallback on normal operator.; But cases like:; ```; for op in operators:; op *= 2; ```; in place operations are needed. Added a tests and checked cases where in place operations were used on users input. Can be useful for averaging states for mcsolve.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2460:257,test,tests,257,https://qutip.org,https://github.com/qutip/qutip/pull/2460,1,['test'],['tests']
Testability,"**Description**; Add missing specialization that were created, but not registered.; The test already call the dispatched function using both data layer, thus adding the specialization will have the added function tested.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2133:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/2133,2,['test'],"['test', 'tested']"
Testability,"**Description**; Add python 3.12 to automated test and wheel build.; However python 3.12 removed the `imp` module used by `pyximport`. ; The fix on cython side may only be for cython 3.X, so we run without cython at runtime on 3.12. Related to #2293",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2294:46,test,test,46,https://qutip.org,https://github.com/qutip/qutip/pull/2294,1,['test'],['test']
Testability,"**Description**; Add some `skipif` to bypass tests that were failing (segmentation faults) during the local testing of `qutip.testing.run()` that was failing in the zip version of #1241. I am on Mac with generic BLAS and no MKL. ; I have been installing it on a fresh conda environment with; ```; pip install -e .[development]; ```; which I think is better than ; ```; python setup.py develop; ```; and by the way maybe this is something that can be updated in the readme and docs.; ; My qutip.about reads:; ```; QuTiP Version: 4.5.1; Numpy Version: 1.15.4; Scipy Version: 1.4.1; Cython Version: 0.29.8; Matplotlib Version: 3.1.2; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanshammah/github/qutip-4.5.1/qutip; ```; This PR could be included in the 4.5.1 version @Ericgig. . **Related issues or PRs**; This PR is related to #1241. **Changelog**; Add `skipif`in `pytest` on Mac with generic BLAS, avoiding segmentation fault during `qutip.testing.run()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1255:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/pull/1255,8,['test'],"['testing', 'tests']"
Testability,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1696:62,test,test,62,https://qutip.org,https://github.com/qutip/qutip/pull/1696,3,['test'],['test']
Testability,"**Description**; Add support for the up comming numpy v2:. - Allows qutip to be compiled with numpy 2, and pass tests.; - Test that binaries compiled with numpy 2 are compatible with numpy 1 at runtime. I did not update the requirement yet, it must be installed in `--no-build-isolation`.; When it's officially released, we will need to update `pyproject.toml` and `setup.cfg`, and possibly add test for np2 on windows and mac. Here are the changes that affect us:; - `np.array(.., copy=False)` no longer mean copy only if needed. `copy=None` was added for that.; - `np.trapz` was replaced by `np.trapezoid`. Since there are no overlaps, I opted to use `scipy.integrate.trapezoid` instead.; - `np.array(1, np.int32) * 2**33` will enforce the integer type and overflow.; - `Py_intptr_t` from `python.h` is no longer available through numpy cython interface.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2421:112,test,tests,112,https://qutip.org,https://github.com/qutip/qutip/pull/2421,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"**Description**; Add test jobs for the familly packages (`qutip-qip`, `qutip-qoc`, `qutip-jax`) for PR in `qutip/qutip`.; Tests the development version or could be ran manually to test any version (tags / branch). This will cause a lot of PR to look bad with error outside their scope, but if we keep the other modules working, then this could be a useful tool.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2504:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2504,3,"['Test', 'test']","['Tests', 'test']"
Testability,**Description**; Add the PR from @BoxiLi 's Lattice bug on windows. @jakelishman's #1312 is not be added since the tests upgrade to pytest are not in the release. (yet?). **Related issues or PRs**; apply #1313 to 4.5.2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1314:115,test,tests,115,https://qutip.org,https://github.com/qutip/qutip/pull/1314,1,['test'],['tests']
Testability,**Description**; Add towncrier draft build of changelog to CI tests. **Related issues or PRs**; None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1946:62,test,tests,62,https://qutip.org,https://github.com/qutip/qutip/pull/1946,1,['test'],['tests']
Testability,"**Description**; Added hints to mesolve, sesolve, result, Qobj, QobjEvo. The aim is not to pass static type checker, but to help the user with hints: ; - I added types to outside facing functions.; - I sometime used hints that do not match the real implementation. For example:; - `Qobj.__mul__` is typed to support product with scalar, not other `Qobj`, (for which `__matmul__` should be used.); - `e_ops` are hinted to dict but also support single operator, list, tuple...; - `solver.options` claim it return a dict not `_SolverOptions` (which is a subclass of dict.); - I skipped the `None` type. (`result.final_state` type is `Qobj` event if it is `None` when not saved.). I created alias types:; - QobjEvoLike: Stuff that can be made into a QobjEvo.; - CoefficientLike: Stuff that can be made into a Coefficient.; - LayerType: Can be understood as our data layer type. (A dynamically generated Literal could be better.); Maybe some alias for dimensions object could be useful?. Knowing that we have extension modules, I used numbers.Number for complex hoping it support jax or tensorflow's scalars. Also `Any` used in some place where other type support can be added such as `Qobj.__init__`. Some of the type hint features I used were only added in python 3.10. We still tests with python 3.9, but it's old enough that we can remove it (according to [spec-0000](https://scientific-python.org/specs/spec-0000/)).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2327:1276,test,tests,1276,https://qutip.org,https://github.com/qutip/qutip/pull/2327,1,['test'],['tests']
Testability,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:130,test,tests,130,https://qutip.org,https://github.com/qutip/qutip/pull/1405,2,['test'],['tests']
Testability,"**Description**; Added option to include colors to Bloch vectors and points instead of just cycling from a list . **Related issues or PRs**; fix #1292 . **Changelog**; Added an optional argument called colors for the Bloch.add_vectors, Bloch.add_points and Bloch.add_states method. ; Tested it here: https://github.com/rajathshetty20/misc/blob/master/qutip%20%231292.ipynb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315:284,Test,Tested,284,https://qutip.org,https://github.com/qutip/qutip/pull/1315,1,['Test'],['Tested']
Testability,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1626:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1626,4,"['log', 'test']","['logic', 'tests']"
Testability,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1622:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1622,4,"['Test', 'log', 'test']","['Tests', 'log', 'tests']"
Testability,"**Description**; Adding spin-1/2 fermionic creation and annihilation operators to close #2165 (for UnitaryHack 2023). Specifically, in `qutip.core.operators`, I added the `fcreate` and `fdestroy` functions, following the Jordan-Wigner transformation described in [this guide](https://learn.microsoft.com/en-us/azure/quantum/user-guide/libraries/chemistry/concepts/jordan-wigner). Specifically, I implemented the following using `qutip.tensor` objects, and documented this in the code. $$a_j = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x + i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. $$a_j^{\dagger} = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x - i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. Additionally, I wrote a new test in `qutip.tests.core.test_operators` that verified the commutation relations. I also ran the new code through `pycodestyle` to verify it was written nicely. Please let me know if there are any issues or anything I should be doing on the documentation side! I hope I understood the problem correctly :). **Related issues or PRs**; close #2165; I closely followed the protocol in #863",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166:723,test,test,723,https://qutip.org,https://github.com/qutip/qutip/pull/2166,2,['test'],"['test', 'tests']"
Testability,"**Description**; Adds support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in [arXiv:2209.08958](https://arxiv.org/abs/2209.08958) [quant-ph]. A simple example can be found in [this notebook](https://github.com/pmenczel/nm-mcsolve-example/blob/master/nonmarkovian_mcsolver.ipynb). Based on code provided by B. Donvil. **Todo-List**; - [X] Create users guide; - [X] Add example notebook to qutip-tutorial and link it in users guide ([PR in qutip-tutorials repo](https://github.com/qutip/qutip-tutorials/pull/59)); - [X] Store the trajectory-average of the influence martingale in the `Result` object; - Use this as end condition, or to warn users about bad convergence? ; (Unclear how effective that would be. Will not be implemented for now); - [X] Make associated `nm_mcsolve` function (name up for debate?); - [X] Write docstring comments; - [X] Write tests; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070:928,test,tests,928,https://qutip.org,https://github.com/qutip/qutip/pull/2070,1,['test'],['tests']
Testability,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633:686,log,logic,686,https://qutip.org,https://github.com/qutip/qutip/pull/1633,1,['log'],['logic']
Testability,"**Description**; Allow the dispatcher to accept specialisations on generic `Data`.; This as 2 uses:; - Simplify the creation of complex function using simpler ones: `inner` defined in term of `matmul`. ; - Allow us to create niche dispatched functions for some data layer without the need to be supported by all: blas' zgemm (matmul) can transpose and adjoint of each input matrix in the same operation. . The `Data` dispatched functions have less priority than direct specialization. They are used directly (no `_constructed_specialisation`) when the `Data` is in the inputs, but when the output data type is set, there will always be a conversion from `Data` to the desired type. . In this PR:; - Add dispatch on `Data`.; - Add direct tests for the dispatcher.; - Create `kron_transpose` which is `kron(left.T, tright)`. It's commonly used for superoperator and it can be optimized for `Dense` and `Jax` by doing it in one operation.; - Add `Data` specialization for `inner`, `inner_op`, `expect`, `expect_super` and `trace_oper_ket`.; - Make `zeros_like` and `identity_like` as dispatched function so the order is kept during operation for dense.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2157:737,test,tests,737,https://qutip.org,https://github.com/qutip/qutip/pull/2157,1,['test'],['tests']
Testability,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1889:1805,log,logic,1805,https://qutip.org,https://github.com/qutip/qutip/pull/1889,1,['log'],['logic']
Testability,**Description**; Apply towncrier.; Also import the change logs entries from the 4.7.X branch.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2343:58,log,logs,58,https://qutip.org,https://github.com/qutip/qutip/pull/2343,1,['log'],['logs']
Testability,"**Description**; As observed by @amitjansc, tidyup did not properly reacted to change to the default tolerance in settings.; Fix this and add tests. **Related issues or PRs**; Close #1829 . **Changelog**; Ensure `tidyup`'s default tolerance is read from settings at each call.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1830:142,test,tests,142,https://qutip.org,https://github.com/qutip/qutip/pull/1830,1,['test'],['tests']
Testability,"**Description**; As proposed in #2420, changed `Qobj.__eq__` to use both `rtol` and `atol`.; The a new low level function is needed to support `rtol`. Also I found that our test did not properly shuffled CSR matrices indices in mathematics tests. There was a bug we missed in `multiply_csr`... **Related issues or PRs**; fix #2420",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2425:173,test,test,173,https://qutip.org,https://github.com/qutip/qutip/pull/2425,2,['test'],"['test', 'tests']"
Testability,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636:208,test,test,208,https://qutip.org,https://github.com/qutip/qutip/pull/1636,4,['test'],['test']
Testability,"**Description**; Clean-up of the methods `add_vectors` and `plot_vectors`.; - raise ValueError when wrong values on inputs for vectors and colors.; - fixes issue #1916 ; - colors argument was bugged as it was not being taken into account when plotting. I kept the colors argument behaving as it was first intended, although we may want to change it later to match the behavior of points.; - Added tests for new ValueErrors and for the colors argument. **Related issues or PRs**; #1913. **Changelog**; Clean-up of the methods `add_vectors` and `plot_vectors`.; Now add_vectors raises ValueErrors for wrong vectors and colors argument; Fix issue #1916 ; Fix colors argument; Improve test coverage",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1917:397,test,tests,397,https://qutip.org,https://github.com/qutip/qutip/pull/1917,2,['test'],"['test', 'tests']"
Testability,**Description**; Clean-up of the point method in the `Bloch` class. This PR does not add any new feature but it does:; - Improve readability and logic in the point methods for the Bloch class. ; - Extended test coverage of the point methods.; - Now add_points raises error if the arguments `points` or `meth` are wrong. **Changelog**; Clean-up of the point methods in the `Bloch` class.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1909:145,log,logic,145,https://qutip.org,https://github.com/qutip/qutip/pull/1909,2,"['log', 'test']","['logic', 'test']"
Testability,"**Description**; Currently, result objects store a reference to the solver object that created them. I think this is an accident. The options field of a solver is an instance of `_SolverOptions` (see [here](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/solver/solver_base.py#L312)), which gets stored in the result [here](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/solver/solver_base.py#L147). `_SolverOptions` has a `_feedback` field which is assigned an instance method of the solver and thus keeps a reference to the solver. I noticed this issue when I called `qsave` on a result object and the resulting file was ~100 MB instead of the expected ~100 KB. Setting `result.options._feedback = None` before calling `qsave` reduced the file size by a factor ~2000. But also without pickling, I think that this is a memory leak where solver objects can't be garbage collected. The fix I am submitting here makes results create a copy of the options passed to it, setting `_feedback` to `None` if it exists. I considered converting `_SolverOptions` objects to plain `dict`s in the result class, but that would discard a little bit of information. (Note however that in many places, the `options` passed to the results are plain `dict`s anyway, [for example](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/tests/solver/test_results.py#L30).) I also considered making `_feedback` a weak reference, but that would make pickling more complicated. I am not sure what tests to add about this, if any.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2262:1415,test,tests,1415,https://qutip.org,https://github.com/qutip/qutip/pull/2262,2,['test'],['tests']
Testability,**Description**; Cython 0.29 is raise a deprecation warning when used with the newest setuptools. Ignore these warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2288:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/pull/2288,1,['test'],['tests']
Testability,"**Description**; Did some cleaning in `semidefinite.py`:. - Renamed functions that should be private: `kron` -> `_kron`, `conj` -> `_conj`, etc.; - Removed `dag`, and `bmat`: never used.; - Moved `qudit_swap` as `swap` in operator.py and added tests.; - Use `functools.lru_cache` instead of re implementing a memoize decorator. This used to be done in `dnorm`, comments were still present, removed.; - Merged `herm` `pos_noherm`, `pos` and `dens` into `_make_constraints`.; - Removed the logger call. ; - black the file. @hodgestar Now only qutip-ctrl use the logger, can we move logging_utils.py there?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2138:244,test,tests,244,https://qutip.org,https://github.com/qutip/qutip/pull/2138,3,"['log', 'test']","['logger', 'tests']"
Testability,"**Description**; Dimension checks was not done for `e_ops` for most solvers, which could result in segfault, (#1776).; Add checks and tests for these checks for `sesolve`, `mesolve`, `mcsolve`, stochastic solvers. ; `brmesolve` and `floquet` are safe. **Related issues or PRs**; fixes #1776. **Changelog**; Add dims check for e_ops in main solvers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1778:134,test,tests,134,https://qutip.org,https://github.com/qutip/qutip/pull/1778,1,['test'],['tests']
Testability,**Description**; Disable mcsolve tests on windows. **Related issues or PRs**; - See #1202. **Changelog**; Disable mcsolve tests on windows. The mcsolve solver uses multprocessing under the hood to simulate many trajectories at once and this can deadlock on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1855:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/1855,2,['test'],['tests']
Testability,"**Description**; Enables use of `mcsolve` and `nm_mcsolve` with mixed initial conditions. Added functions `run_mixed` to the MCSolver and NonMarkovianMCSolver classes. Instead of an initial pure state, these functions take either a density matrix or a list of `(psi_i, p_i)` where `psi_i` are pure initial states and `p_i` are the weights for the average over the initial states. In the latter case, the `ntraj` parameter can be a list specifying the number of trajectories to be used for each initial state. The trajectories automatically obtain correction weights if the fraction of trajectories starting in `psi_i` does not match `p_i`. The functions `mcsolve` and `nm_mcsolve` take either a pure state or a density matrix as the initial state, and call either `run` or `run_mixed` of the solver, respectively. The stochastic solvers also inherit the `run_mixed` functions, but I don't know if there is any use case for that. The most complicated issue here was the combination of a mixed initial state with ""improved sampling"". In this case, run_mixed first runs the no-jump trajectories for all initial states (potentially using `parallel_map` etc) and then runs all other trajectories (using `parallel_map` again, this means that there are two progress bars...). **Todo**; - [X] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437:1296,test,tests,1296,https://qutip.org,https://github.com/qutip/qutip/pull/2437,1,['test'],['tests']
Testability,**Description**; Ensure qutip works with cython 3.0.; - `nogil` must come after `except`.; - Set the options `c_api_binop_methods=True` to keep previous behaviour of operators.; - Have one of the test case use cython 3. There is a bug in cython 3.0.0b2 with `overflowcheck` that makes it unable to compile qutip. I works with 3.0.0.b1 and should work with the next release. See cython#5358. **Related issues or PRs**; close #2117,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2151:196,test,test,196,https://qutip.org,https://github.com/qutip/qutip/pull/2151,1,['test'],['test']
Testability,**Description**; Explicitly define matplotlib backend for Windows tests. **Related issues or PRs**; - #2013 (equivalent change for master); - Cherry pick of 123163f4,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2022:66,test,tests,66,https://qutip.org,https://github.com/qutip/qutip/pull/2022,1,['test'],['tests']
Testability,**Description**; Fallback to `fsesolve` passed unused argument.; Add a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2225:71,test,test,71,https://qutip.org,https://github.com/qutip/qutip/pull/2225,1,['test'],['test']
Testability,**Description**; Fix 2 other tests failing randomly with low probability:; - `test_spin_q_function_normalized`; - `test_m_ops`. `test_m_ops` had a mistake: `measurement`'s shape is not the same for homodyne and heterodyne.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2348:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/pull/2348,1,['test'],['tests']
Testability,**Description**; Fix `Qobj.groundstate` and add a test. . **Related issues or PRs**; Fixes #1937; Thank you @christian512 for finding the bug.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1938:50,test,test,50,https://qutip.org,https://github.com/qutip/qutip/pull/1938,1,['test'],['test']
Testability,"**Description**; Fix bug in `correlation 2op_2t ` when using time-dependent hamiltonians and collapse operators. Also, a test was added in `test_correlation`. **Related issues or PRs**; This PR addresses [#1808](uhttps://github.com/qutip/qutip/issues/1808). It solves the issue. **Changelog**; Fixed error for time-dependent hamiltonians and collapse operators in correlation 2op_2t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929:121,test,test,121,https://qutip.org,https://github.com/qutip/qutip/pull/1929,1,['test'],['test']
Testability,"**Description**; Fix failing `test_stochastic.test_deprecation_warnings`.; It used to catch the first warnings, the one we tested for, and stop.; An update in pytest, made it continue to catch another warning (step rounded to 0) later and failing. This PR fix the test to raise only the desired warnings.; It add a warnings for when the step in rounded to 0 and a test for that warning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2313:123,test,tested,123,https://qutip.org,https://github.com/qutip/qutip/pull/2313,3,['test'],"['test', 'tested']"
Testability,"**Description**; Fix for the numpy 1.25 release.; - `np.product` deprecated, `np.prod` suggested instead.; - Single elements array can no longer be implicitly converted to scalar: `a[i] = bra @ ket` raise a warning since `bra @ ket` is a one elements array.; - Some tests where removed since they expected one element array to be used as a scalar.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2177:266,test,tests,266,https://qutip.org,https://github.com/qutip/qutip/pull/2177,1,['test'],['tests']
Testability,"**Description**; Fix issues from cython 3.; - Manually set cython.bindings(False) for functions mean to be used with ode.; - Removed use of pxyimport. It only import `c` code and se used to monkeypatch it to compile `c++`. It's internal changed and I rewrote the compilation/importation using inspiration from the `cython.inline_module` PR.; - Added one test using cython 0.29; - Changed the temporary file name construction to have less name collision. **Related issues or PRs**; cython#3145, cython#555",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2202:354,test,test,354,https://qutip.org,https://github.com/qutip/qutip/pull/2202,1,['test'],['test']
Testability,"**Description**; Fix issues with multi- trajectory results:; - When one result had trajectories and the other did not, but both stored the states, the merged result had no states.; - When merging 2 results with default ratio, that ratio would depend on whether the `improved_sampling` options was used. ; - When the no-jump probability was 1, the total weight as measured by sum(res.runs_weight) would not be one.; - A no-jump probability over 1 by numerical error would break the evolution.; - Fix weight application in the `_target_tolerance_end`. (At `abs_weight == 1`, the error should be 0).; - `average_final_state` not being computed properly when runs were stored. This PR is a part of #2455. (1/4?); The absolute weighted trajectories are still mixed with the other. (#2455 fixed the issues by not counting the no-jump evolution are a trajectory.). Tests need #2457 to pass.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2459:858,Test,Tests,858,https://qutip.org,https://github.com/qutip/qutip/pull/2459,1,['Test'],['Tests']
Testability,"**Description**; Fix numpy's version in github actions so test passed.; I cherry-picked the merge commit from #1696, hoping it will make the merge of `master` into `dev.major` easier when done.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1701:58,test,test,58,https://qutip.org,https://github.com/qutip/qutip/pull/1701,1,['test'],['test']
Testability,**Description**; Fix some of the warnings in the tests in order to restore the `-Werror` flag later.; - Remove test for `state_number_qobj`: (function replaced by `basis`.); - scipy.sparse matrix operation replaced by `data.CSR` operation.; - Fix passing generator to `hstack`.; - Add some `filterwarnings` for `mcsolve` fallback to `sesolve` and coefficient parsing warning. **Related issues or PRs**; TODO in #1850. **Changelog**; Fix some warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1882:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/1882,3,['test'],"['test', 'tests']"
Testability,**Description**; Fix the bug in collapse feedback that made it work properly only for the first trajectories. (#2422); Also added a check in the feedback test to ensure the collapse argument is reset for each trajectories.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:154,test,test,154,https://qutip.org,https://github.com/qutip/qutip/pull/2424,1,['test'],['test']
Testability,**Description**; Fix the bug in the logic to find the blas info reported in #2053. **Related issues or PRs**; Close #2053,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2072:36,log,logic,36,https://qutip.org,https://github.com/qutip/qutip/pull/2072,1,['log'],['logic']
Testability,"**Description**; Fix warnings and errors coming from matplotlip 3.8 release.; - Close figure in errors tests. Lot of empty figures were created and never closed.; - `plt.contourf` can be used as an artist instead of extracting the artists list from it.; - `color` cannot be a numpy array anymore, convert the arrays to list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2238:103,test,tests,103,https://qutip.org,https://github.com/qutip/qutip/pull/2238,1,['test'],['tests']
Testability,"**Description**; Fixes #1504 and changes signature of `rand_ket` as [requested](https://github.com/qutip/qutip/issues/1504#issuecomment-823455134). . Added tests to check behavior of `rand_ket` by checking shape of output when - both N and dims are specified, only dims is specified and finally only N is specified. . **Changelog**; Fixes typo in random objects and changes signature of rand_ket",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1509:156,test,tests,156,https://qutip.org,https://github.com/qutip/qutip/pull/1509,1,['test'],['tests']
Testability,"**Description**; For awhile the matplotlib tests have failed intermittently on Windows. Setting the matplotlib backend explicitly before running the tests is said to help, so let's try it. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/2013,2,['test'],['tests']
Testability,"**Description**; For hermician matrices, eigenstates are expected to be orthogonal to each other. . `eigh` used by the dense specialization create such states. But in `eigs_csr`, since we obtain the states in 2 calls of `sp.linalg.eigsh`, the states can overlap. This ensure that the eigen states produced by `eigs_csr` are orthogonal and add a test for it. **Related issues or PRs**; Fix #1851",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1867:345,test,test,345,https://qutip.org,https://github.com/qutip/qutip/pull/1867,1,['test'],['test']
Testability,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1709:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/pull/1709,8,"['assert', 'test']","['assertion', 'testing', 'tests']"
Testability,"**Description**; I created three issue templates and one PR template and tested on my own fork. You can have a look and also test it at https://github.com/BoxiLi/qutip. Try to open a PR or issue there, you should see how the template works. As an example, I opened this PR following the template. The bug report issue will automatically get a label BUG, while the feature request issue will get a label ENH. Free feel to give suggestions. **Related issues or PRs**; This PR addresses #1172 #1108 but does not totally solve the issues. It is a replacement of #1188, and therefore closes #1188. **change log**; Added PR and issue templates",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198:73,test,tested,73,https://qutip.org,https://github.com/qutip/qutip/pull/1198,3,"['log', 'test']","['log', 'test', 'tested']"
Testability,"**Description**; I optimized the dispatched by only supporting positional arguments for matrix to dispatch on:. The dispatcher was supporting any signature for dispatched functions.; Since each dispatchers is an instance of the `Dispatcher` class and cython does not support patching methods, it had to find the inputs matrix to convert from `__call__(*args, **kwargs)` and re-implemented the `_bind` method to do so.; But all our dispatched functions have the matrix as the first positional argument, by embracing this we get a nice speed up for small matrices. Also when the specialization existed, it would not call it directly, but call a `_constructed_specialisation` that called ti. Adding another unneeded layer to each calls. This was changed so it would call the function directly. For a 2x2 matrix:; | | Before | After |; |------------------|--------|-------|; | data.add_dense | 214ns | 210ns |; | data.add (dense) | 774ns | 388ns |; | data.add[Dense, Dense] | 541ns | 182ns |; | data.add_csr | 429ns | 447ns |; | data.add (csr) | 986ns | 649ns |; | data.add[CSR. CSR] | 744ns | 401ns |; | numpy | 473ns | - |. Sadly it will not improve the benchmarks that much since the `Qobj` operations overhead is quite large:; | | Before | After |; |------------------|--------|-------|; | Qboj + Qobj (dense) | 2430ns | 2070ns |; | Qboj + Qobj (csr) | 3070ns | 2330ns |",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2135:1152,benchmark,benchmarks,1152,https://qutip.org,https://github.com/qutip/qutip/pull/2135,1,['benchmark'],['benchmarks']
Testability,**Description**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. **Related issues or PRs**; - None. **Changelog**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1797:92,test,tests,92,https://qutip.org,https://github.com/qutip/qutip/pull/1797,2,['test'],['tests']
Testability,"**Description**; In #1812, I worked on removing the tree structure of option and having options per solver instead of having them together.; This way, we don't need to pass `mcsolve` specific options to `mesolve`, etc. and it makes it simpler to know which options are used by which solver. That PR is getting quite large and went through multiple revision, so I am replacing it with two smaller ones. In this PR, I simplify the options in core. `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. Most of these settings are properties of the object and only computed when being called instead of at import in `__init__.py`. . `CoreOptions` and `CompilationOptions` are now both made from a simpler `QutipOptions` class instead of the `optionsclass` which generated many method at import. Some options have been moved around: `debug`, `log_handler`, `colorblind_safe` and `use_cython` has been moved to `CoreOptions`. Since instance of `CoreOptions` cannot be passed to functions using it. It supports context:; ```; with CoreOptions(auto_tidyup=False):; op = sparse1 + sparse2; ```; and global options change using:; ```; qutip.settings.core['atol'] = 1e-6; ```. `CompilationOptions` instance must be passed to `coefficient` to be used. `configrc` was removed. It was used to store settings in a file that would be read when importing qutip. This was mainly used to store the openmp threshold. Without openmp, we don't have any settings to store between sessions. Some test related to mkl had to be fixed, it seems that they were always skipped before these changes. **Related issues or PRs**; Replace #1812. **Changelog**; Simplify settings and core options.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1924:1662,test,test,1662,https://qutip.org,https://github.com/qutip/qutip/pull/1924,1,['test'],['test']
Testability,"**Description**; In #2120, `countstat` was updated to use `data.solve`.; `countstat` would sometime try to solve a system with singular matrix and has a fallback for it using `try: ... except:`; However, while numpy raises an error when the matrix is singular, `scipy.sparse` raises a warnings, thus the tests only pass because we use the warnings as error flags... Without it, the singular matrix would not be caught and the solution from `countstat` would contain a `NaN` and the tests would fail... - Redirect the warning from scipy sparse and numpy's `LinAlgError` to a `ValueError`to allow easy catching of these case.; - Add the small `1e-15` in `countstat` with `auto_tidyup` turned off.; - Add support for the method `lstsq` and `solve` for `data.solve_csr`. These methods are supported by numpy, jax, tensorflow, scipy.sparse is the exception which use `spsolve` and `lsqr` instead, probably to avoid name collision the the dense version they also have.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2144:304,test,tests,304,https://qutip.org,https://github.com/qutip/qutip/pull/2144,2,['test'],['tests']
Testability,"**Description**; In #2513, I forgot to update `CoreOptions.__setattr__` which was newly created when adding type hints.; All our tests changed options only using context, so it was missed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2518:129,test,tests,129,https://qutip.org,https://github.com/qutip/qutip/pull/2518,1,['test'],['tests']
Testability,"**Description**; In cython code, signals (Keyboard Interrupt) are not automatically checked.; And when checked, if error are not properly passed (`expect *`) the signal can be last. This happened in the Runge Kutta integrator, which did not properly passed errors and only when back to python space at time in `tlist` which can be far apart. The stochastic solver stop on (Keyboard Interrupt), the `except` are not needed since the output is a class. I made it explicit for clarity. Doing a few tests, I saw that the error was often caught in the `Qobj.data` property called by `QobjEvo.matmul`. This means more back and forth between python and cython was done than needed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2169:495,test,tests,495,https://qutip.org,https://github.com/qutip/qutip/pull/2169,1,['test'],['tests']
Testability,"**Description**; In the analytical calculation of the circuit unitaries in `Processor`, the drift Hamiltonian was missing. Add it and add a test accordingly. Also fix a wrong docstring. **Related issues or PRs**; fix #1602 . **Changelog**; Add the missing drift Hamiltonian to the method `run_analytically` of `Processor`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1603:140,test,test,140,https://qutip.org,https://github.com/qutip/qutip/pull/1603,1,['test'],['test']
Testability,"**Description**; Increase the tolerance of tests that could randomly fail. `testFloquetBasis` would fail 1/2000 of the time. The error has a std of 1.2e-5 , but does not follow a gaussian distribution. Fat tails made 4 std not enough. `test_rand_super` failed once recently in #2919 ( I reran the test). I can't reproduce the failure locally, but it is ran a few hundred of times in each actions, so even a small probability of failure will eventually happen.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2337:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/2337,3,['test'],"['test', 'testFloquetBasis', 'tests']"
Testability,**Description**; Installing `dev.major` is raising warnings because of errors in MANIFEST.in:; ```; ...; reading manifest file 'qutip.egg-info/SOURCES.txt'; reading manifest template 'MANIFEST.in'; warning: no files found matching 'qutip.bib' <=====; warning: no files found matching '*.qasm' under directory 'qutip/tests/qasm_files' <=====; adding license file 'LICENSE.txt'; writing manifest file 'qutip.egg-info/SOURCES.txt'; running build_ext; ...; ```; qutip.bib was renamed to CITATION.bib in #1662 ; qasm files were removed in #1890 and are now only included with qutip-qip. **Changelog**; Update MANIFEST.in to reflect changes in #1662 and #1890,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1926:316,test,tests,316,https://qutip.org,https://github.com/qutip/qutip/pull/1926,1,['test'],['tests']
Testability,"**Description**; Looking at the [historical benchmarks](https://qutip.org/qutip-benchmark/ops/matmul.html), Qobj operations got slower last November, which correspond to when we merged the dimensions PR. This PR is to improve those graph. Usually, when a lot of matrix operations are done, we use the data layer object directly. So the overhead of the Qobj should not be that critical. Adding QobjEvo support to `isbra`, `isket`, etc, slowed them down quite a lot. The import of QobjEvo in the function can easily be slower than the matrix operation. (0.7us for the import which is the same as a 32x32 CSR@ket product.) This is the biggest culprit in the jump in the matmul benchmark graph. I added properties for each `is_type_` to Qobj and QobjEvo. The `Qobj` and `QobjEvo`'s `issuper` where not the same. `QobjEvo` would return `True` for oper-ket, not just super operator, while `Qobj.issuper` would be `True` only for super operator. `QobjEvo` now match `Qobj`. I also changed the check to tell if `Qobj.__matmul__` return a number or Qobj. It is now done looking at the output dimensions. Now that type cannot be overwritten, it is the same check. (Before a `[[1], [1]]` could be a bra, ket, oper, etc., now it's a scalar which return True to isbra, isket and isoper.). For `Qobj.__add__` I could speed it up by doing the Qobj check first. But the extra overhead of `Qobj.__init__` is still there. That said, the graph don't look as bad as the matmul ones and it's probably enough.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2295:44,benchmark,benchmarks,44,https://qutip.org,https://github.com/qutip/qutip/pull/2295,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1885:147,test,tests,147,https://qutip.org,https://github.com/qutip/qutip/pull/1885,5,['test'],"['test', 'tests']"
Testability,"**Description**; Mac tests have been failing for a while because of MKL. ; Set the mac test to run with openblas, skipping failing tests.; Added `rcond=None` to `linalg.lstsq` to remove a warning. I also updated versions of github action as some where raising warnings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2019:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/2019,3,['test'],"['test', 'tests']"
Testability,"**Description**; Make changes so enable autodiff with `jax` or `tensorflow`:; - In `QobjEvo`, `Elements`, `Coefficient`: `t` is a python object instead of a double as is coefficient output.; This allows to pass jax traced variable or tensorflow's scalar tensor.; - QobjEvo's elements attribute are accessible and new methods `QobjEvo._getstate`, `QobjEvo._restore`.; Used by jax layer to register `QobjEvo` as a pytree.; - Allow subproject to add their own coefficient.; This allow to make a coefficient that can jit well or can be differentiated. `FuncCoefficient` without type restriction could mostly work, but there are some issues with registering them as a pytree or pickling.; - In CoreOptions, an options for the default data type is added:; When not specified, each `Qobj` creation function keeps its default.; ```; with CoreOptions(default_dtype=""jax""):; obj = qeye(N); assert isinstance(obj.data, JaxArray); ```; - Add `QobjEvo.to_list` to restore the list format of the `QobjEvo`. **Related issues or PRs**; Replace #1816",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015:880,assert,assert,880,https://qutip.org,https://github.com/qutip/qutip/pull/2015,1,['assert'],['assert']
Testability,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734:643,test,tests,643,https://qutip.org,https://github.com/qutip/qutip/pull/1734,1,['test'],['tests']
Testability,**Description**; Making 4.5.1 up-to-date for next week release. **Changelog**; Moved test to 3.8; `randint`'s dtype fixed for seed generation; Mac pool use spawn; corrected heterodyne's m_ops (by eliegenois),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1241:85,test,test,85,https://qutip.org,https://github.com/qutip/qutip/pull/1241,1,['test'],['test']
Testability,"**Description**; Making superop module tests compliant with the general pytest scheme. While doing that I found out some left `TODO` points. This took me to change code in the generalized kraus calculation to use SVD decomposition of rectangular matrices accurately.; Still there is a cryptic `TODO` referring to ptrace, the meaning of which I can not guess. Maybe someone with more experience on the module can be of help. **Changelog**; - Converted superop_rep tests to pytest; - Changed code in `generalized_kraus` to allow expansion of rectangular operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491:39,test,tests,39,https://qutip.org,https://github.com/qutip/qutip/pull/1491,2,['test'],['tests']
Testability,"**Description**; Many of the operator functions did not set the `isherm` flag.; Not having the flag set would cause issue with `jax.jit`. - Set the `isherm` flag for almost every functions in `operators.py` and `gates.py`. ; - `qdiags` flags are only set when only one diagonal in used.; - I did not touch functions creating operators from other operators ( `commutator`, `squeezing`); - Set the `isunitary` flags for all these also.; - Updated the gates `dtype` parameter to use the `default_dtype` settings.; - Updated the sigma operators to have a `dtype` parameter.; - Added tests for all of these.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2388:579,test,tests,579,https://qutip.org,https://github.com/qutip/qutip/pull/2388,1,['test'],['tests']
Testability,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:1075,log,logic,1075,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['log'],['logic']
Testability,**Description**; Minor changes to correct invalid string literals and close files opened by `hardware_info.py`. This removes warnings that currently appear when importing quTiP with non-standard warnings settings (for instance when testing a code that import quTiP). **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed invalid string literals and proporly close opened files.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380:232,test,testing,232,https://qutip.org,https://github.com/qutip/qutip/pull/1380,2,"['log', 'test']","['log', 'testing']"
Testability,"**Description**; Move `rcsolve` ot legacy.; `rcsolve` does not have any tests, has little documentation and can fail for not obvious reasons...; It also seems that most groups create their own flavour of the solver instead of using the one we provide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2158:72,test,tests,72,https://qutip.org,https://github.com/qutip/qutip/pull/2158,1,['test'],['tests']
Testability,"**Description**; New sparse type: `Dia`.; Optimal for diagonal operators such as `qeye`, `destroy`. But it's quite bad for vectors ('bra', 'ket'). For a tri-diagonal matrix, it's about 25% faster than `CSR` for `oper @ dense`.; It can do an very efficient `dense @ dia`, while `CSR` is only efficient `csr @ dense`, not the opposite. . This include most specializations, change the default in operators, add tests. The implementation mostly match the one in scipy. ; The matrices are stored in two arrays, the diagonals offsets `shape=num_offsets` and the data `shape=[num_offsets, ncols]`. The diagonals are lined so that for each entry, the column in the data array match the matrix column.; The main differences with scipy's implementation are fixed dtype and the shape of the data array being fixed. (scipy accept longer diagonals and ignore entries outside the matrix.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2196:408,test,tests,408,https://qutip.org,https://github.com/qutip/qutip/pull/2196,1,['test'],['tests']
Testability,"**Description**; Not sure why, but after merging, #2457, the tests failed.; This fix tests (at least in my fork...).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2463:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/pull/2463,2,['test'],['tests']
Testability,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:121,test,tests,121,https://qutip.org,https://github.com/qutip/qutip/pull/1288,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"**Description**; Over the holidays a new versions of cython and setuptools came out resulting in pyximport raising a deprecation warning. For v4.7, I just set it to ignore the warning in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2287:187,test,tests,187,https://qutip.org,https://github.com/qutip/qutip/pull/2287,1,['test'],['tests']
Testability,"**Description**; Qobj support Dense representation, but there are still no easy way to create dense matrix. So this add a keyword only `dtype` options to most function of qutip.states, qutip.operators and qutip.random_object. To make them, I made 2 new dispatched function: `diag` and `one_element`. `diag` has the same use than @jakelishman #1419 function, but I fall back on scipy quickly... So I will switch to his version as soon as it is merged. . To make the `dtype` more user friendly than seeking the type in `qutip.core.data`, I changed `to` to accept the string representation of the name (case insensitive). Only `to` accept string, `dispatch` is not really user facing so there is no reason to touch it. I also updated the `create` to use `add_creators` and make `Dense` out of `numpy array`. Jake, I am not sure of what were your plans for this. So if I am messing your plans, please tell me. . Tests are not all created yet and it will create a conflict with #1419 and #1407. **Related issues or PRs**; #1419",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420:908,Test,Tests,908,https://qutip.org,https://github.com/qutip/qutip/pull/1420,1,['Test'],['Tests']
Testability,**Description**; Re-enable test errors on ImportWarnings. These were disabled in QuTiP 4 because it used pyximport. QuTiP 5 no longer uses pyximport. **Related issues or PRs**; - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2083:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/2083,1,['test'],['test']
Testability,"**Description**; Re-implement entropy_relative. This function was implemented in March 2012, but then removed a month later. After some digging, it appears that the reason the function was removed is that it assumed the eigenvectors of the density matrices were identical (and in the same order). After some reading of Nielsen & Chuang, I have re-implemented it to address the issue. **Still todo**; - [x] Update the documentation.; - [ ] Add an example to an example notebook.; - [x] Add some tests for specific cases where we know what the answer should be.; - [x] Stretch goal: Vectorize the calculation of P_ij and the rest of the loop as much as we can (but let's make sure the answers are correct first). **Changelog**; Re-implement entropy_relative which returns the quantum relative entropy between two density matrices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1553:494,test,tests,494,https://qutip.org,https://github.com/qutip/qutip/pull/1553,1,['test'],['tests']
Testability,**Description**; Remove Windows test suite warning suppression. **Related issues or PRs**; - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2119:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/2119,1,['test'],['test']
Testability,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:812,test,tests,812,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['test'],['tests']
Testability,"**Description**; Remove tests using python 3.6 and 3.7 and openmp tests.; SInce we need to add a new job for each python version, we also need to remove older jobs so the whole test suite don't get bloated. Numpy has a suggestion for version support in scientific project in [NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html) which we can follow to decide when we can remove some tests and if it's fine to use newer feature forcing us to improve our requirements. I added a note in the contributing and release guides to refer to this when adding a change using feature of newer version of package we use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1941,4,['test'],"['test', 'tests']"
Testability,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890:179,test,tests,179,https://qutip.org,https://github.com/qutip/qutip/pull/1890,1,['test'],['tests']
Testability,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1455:1385,benchmark,benchmark,1385,https://qutip.org,https://github.com/qutip/qutip/pull/1455,1,['benchmark'],['benchmark']
Testability,**Description**; Run mac test with openblas instead of MKL to skip the tests failing with pardiso. Update github action version since they are raising deprecation warning. **Related issues or PRs**; #2019,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2020:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/2020,2,['test'],"['test', 'tests']"
Testability,"**Description**; Scipy 1.12 rename a variable in linalg solver: `tol` to `rtol` and raise a deprecation warning with the old name.; Scipy 1.11 does not accept `rtol`. This parameter is passed thought `**kwargs` in steadystate and is not used elsewhere, so only the test need to be updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2301:265,test,test,265,https://qutip.org,https://github.com/qutip/qutip/pull/2301,1,['test'],['test']
Testability,"**Description**; Scipy 1.13 change the way sparse operations are done.; Some changes to scipy fix most issues, but I get some segfault with the sparse eigen solver and I am unable to run all tests.; 1.13 work with v5 so I changed the requirements to exclude that version in v4.7.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2383:191,test,tests,191,https://qutip.org,https://github.com/qutip/qutip/pull/2383,1,['test'],['tests']
Testability,"**Description**; Set minimum python version to 3.9 for v5. While we don't use many feature that prevent previous version, we don't test them and pip install does not work because of conflict with `oldest-supported-numpy` (see #2412). Improve `installation.rst`, it still listed requirement for v4, openmp support and instruction on installing v5's pre-releases. [Exclude numpy 2 from requirements.](https://numpy.org/devdocs/dev/depending_on_numpy.html#numpy-2-0-specific-advice) We don't know if we are compatible yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2413:131,test,test,131,https://qutip.org,https://github.com/qutip/qutip/pull/2413,1,['test'],['test']
Testability,**Description**; Setting eigh_unsafe on sipy<1.5 and MKL. **Related issues or PRs**; #1495. **Changelog**; - Changed init to set eigh not safe in case scipy<1.5 and mkl backend; - Added the correct pytest breaking test from issue #1491 to check the solution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498:214,test,test,214,https://qutip.org,https://github.com/qutip/qutip/pull/1498,1,['test'],['test']
Testability,"**Description**; Since merging #2497, mkl tests on windows fails from segfault.; I am not sure of the source of the error:; Since the library was not found before the PR, the bug can have been there for a long time, but the tests passed in #2497.; Just settings mkl to verbose is enough for the tests to passes... I don't think relying on the verbose options is a good idea so I made it unable to find mkl on windows for this PR. We will need to find a more reliable way to use it, `ctypes` does not look at the header file so it guess the types from our call. Maybe some version of mkl are 32 bit and other 64 bit and we are not adapting. [pydiso](https://github.com/simpeg/pydiso) looks promising.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2529:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/2529,3,['test'],['tests']
Testability,"**Description**; Since the code is checking `or offset ? 0`, the method is effectively being ignored in most cases. Pretty sure that's not intended behavior. Changing to correct behavior in `coherent` makes `coherent_dm` pretty trivial. In theory, this introduces nothing that isn't explicitly documented. However, since there don't appear to be any tests that were failing because of this, I'll try to add some. **Changelog**; Fixed method name check in `coherent` and `coherent_dm`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1469:350,test,tests,350,https://qutip.org,https://github.com/qutip/qutip/pull/1469,1,['test'],['tests']
Testability,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1787,3,['test'],['tests']
Testability,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1604:760,test,test,760,https://qutip.org,https://github.com/qutip/qutip/pull/1604,1,['test'],['test']
Testability,"**Description**; Test for the bloch sphere require matplotlib and ipython to pass, but these were not installed with `qutip[tests]`.; These tests are now skipped when these packages are missing instead of failing. Also add `loky` and `tqdm` to extra require as they can now be used in solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2095:17,Test,Test,17,https://qutip.org,https://github.com/qutip/qutip/pull/2095,3,"['Test', 'test']","['Test', 'tests']"
Testability,**Description**; Testing the email sending github action.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2244:17,Test,Testing,17,https://qutip.org,https://github.com/qutip/qutip/pull/2244,1,['Test'],['Testing']
Testability,"**Description**; Tests are using numpy's svd but the dispatched function is using scipy's svd.; They use different algorithms and can give different result causing error in the tests. With this PR, scipy is used in test also.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2239:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2239,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1562:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1562,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests in `simdiag` sometime fail with one or two values over the tolerance. This cause automated tests to fail for reason unrelated to the PR. This add the flaky mark to rerun these and increase some tolerances.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2067:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2067,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1861:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1861,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests would fail to run if `matplotlib` or `ipython` were not installed.; This add `pytest.importskip` to skip instead or failing the the packages are missing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2311:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2311,1,['Test'],['Tests']
Testability,"**Description**; The PR provides a way to characterize thermal environments for open quantum systems, The user can now construct Thermal environments by specifying The spectral density, or the correlation function , or the power spectrum and the Temperature. Once specified the other two are calculated. We hope once integrated with the solvers, this PR will allow for a more systematic way of comparing different approaches, and easier simulations by quickly obtaining the quantities needed from the bath objects. The PR also provides exponential approximations of the environment via a fit of the correlation function, and a fit of the spectral density in terms of underdamped modes, the PR allows for incorporation of more approximation methods, which will be added in the future. . **Related issues or PRs**; This PR is a generalization of #2260 . Special Thanks to @pmenczel for improving the code significantly and valuable suggestions!. **TODO:**. I think perhaps those are better finished once we have decided that this structure for the environments is the way to go. However, the most important missing bits are . - [x] Finish documentation in the User's guide; - [x] Add relevant tests for the HEOM solver using the enviroment class; - [ ] Finish tests for environment.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534:1191,test,tests,1191,https://qutip.org,https://github.com/qutip/qutip/pull/2534,2,['test'],['tests']
Testability,"**Description**; The `4.x` documentation suggests that the user test the installation by; ```python; import qutip.testing; qutip.testing.run(); ```; and when something fails (e.g. due to missing `matplotlib`), the obvious reaction would be to re-execute `qutip.testing.run()`. However, this does not currently work, because passing a `zip` generator to `pytest.parametrize` limits that test case to be executed only once. This PR does nothing but allowing tests to be executed multiple times in one Python session. P.S. I would recommend backporting the new shell testing command `pytest qutip/qutip/tests` to the `4.x` documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2538:64,test,test,64,https://qutip.org,https://github.com/qutip/qutip/pull/2538,8,['test'],"['test', 'testing', 'tests']"
Testability,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:758,test,tests,758,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['test'],['tests']
Testability,"**Description**; The `purity` method in `qobj` is supposed to give purity no more than 1. However, at the moment, it can give values greater than 1 as well because it does not verify if `Qobj` is a valid quantum state. Minimal code to reproduce the error would be: . ```; not_dm = Qobj(np.random.rand(5,5)); not_dm.purity(); ```; To solve this, I have modified `purity()` primarily by adding `check_isdensity()` (with accompanying test method in `tests`) . **Changelog** ; Added density matrix check for purity calculation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232:431,test,test,431,https://qutip.org,https://github.com/qutip/qutip/pull/1232,2,['test'],"['test', 'tests']"
Testability,"**Description**; The check that the initial state was already normalised for normalising output would branch over values, which breaks `jax.jit` support... Moved the option check first. Also changed the `isoper` check to filter out rectangular operator.; Rectangular state in solver are tolerated, but we don't have tests for it. I did not add any here, but we should . **Related issues or PRs**; qutip/qutip-jax#49 qutip/qutip-tutorials#100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2448:316,test,tests,316,https://qutip.org,https://github.com/qutip/qutip/pull/2448,1,['test'],['tests']
Testability,"**Description**; The error for too large minimum step was not raised.; The error therefore came later in scipy code and was hard to understand. ; Found from https://groups.google.com/g/qutip/c/NUcKnAwpx30/m/7IKDqbNOAgA; Fix the error and add a test for it. Also added some sanity check on `min_step` and `max_step`, which could create infinite loop if `min_step = 0` or `min_step > max_step`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2402:244,test,test,244,https://qutip.org,https://github.com/qutip/qutip/pull/2402,1,['test'],['test']
Testability,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478:431,test,test,431,https://qutip.org,https://github.com/qutip/qutip/pull/1478,2,['test'],['test']
Testability,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1445:200,test,test,200,https://qutip.org,https://github.com/qutip/qutip/pull/1445,3,"['Test', 'test']","['Test', 'test']"
Testability,"**Description**; The mkl finding was sometime missing the library even when available.; Sometime the library can has a version number in the file name:; `libmkl_rt.so.2`, `mkl_rt.2.dll`, with or without a symbolic link to the version less name.; Also it ouly look for it if it's found in numpy's config, but the module mkl is available an could be installed even if numpy does not link to it. Our use using ctypes does not require numpy to be using it to work. So I changed the lookup function to look for the library without checking is numpy uses it. I also added a new setting, `settings.mkl_lib_location`, which is not read only and allow users to enter the path to their mkl implementation. We only look inside the python library path, this would allow to use libraries installed at the OS level. Also fixed a bug in mkl spsolve with scipy 1.14 that was missed since mkl tests were skipped. **Related issues or PRs**; fix #2496",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2497:876,test,tests,876,https://qutip.org,https://github.com/qutip/qutip/pull/2497,1,['test'],['tests']
Testability,"**Description**; The orbital function had some errors in it. Here, I replaced the manual calculation of the spherical harmonics, with the implementation provided by SciPy. Additionally, I provide some tests to the function. **Related issues or PRs**; fixes #1839 . **Changelog**; Fixed errors in orbital functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1844:201,test,tests,201,https://qutip.org,https://github.com/qutip/qutip/pull/1844,1,['test'],['tests']
Testability,"**Description**; The permutation function used in v5 is reversed from v4, (it does `out[perm] = in`). This was not taken into account when updating the steadystates permutations functions.; Fixed and added tests. **Related issues or PRs**; fix #2443",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2446:206,test,tests,206,https://qutip.org,https://github.com/qutip/qutip/pull/2446,1,['test'],['tests']
Testability,**Description**; The sparse svd test is causing segfault in a setup that I can't reproduce.; The function `svd_csr` was never used as it could not work as a `svd_dense` replacement: `_data.svd(csr)` would use `svd_dense`. So I simply removed the function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['test'],['test']
Testability,"**Description**; The test `test_random_iscptp` would sometime randomly fail.; This increase the tolerance of the test, lowering the fail rate from 0.35% to less than 1 in 10000 tries.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2147:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2147,2,['test'],['test']
Testability,**Description**; The test for the new method `run_from_experiment` has a time step too long for the euler method. This would cause fail once a few hundreds time as in https://github.com/qutip/qutip/actions/runs/8979789558/job/24662362047.; Reducing the system size with smaller steps makes the test more consistent (no failure in 20000 tries.). Also reduced `test_feedback` step size to improve that test consistency.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2419:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2419,3,['test'],['test']
Testability,"**Description**; There are presently 8 variations of `CQobjEvo`. There are `Cte` and `Td` variants, Dense and csr sparse and serial vs openmp versions. Adding a feature, (ex. AHS support) result in the need to modify all of them and QobjEvoFunc and AHS PRs will add new one. So as a first step, I am merging them the ones presently available.; Cte (no coefficient) are now limit case of Td (time-dependant). omp ones have been removed in favor of a `spmvpy` variant that switch between the serial and omp version at compilation. . Also reworked the compilation of `QobjEvo`:; - Simpler with only 3 variants instead of 8.; - Compilation of the coefficient and object are separated. (`H *= -1j` does not force recompiling the coefficients.); - But have the side effect of making temp file cleanup harder. File are erased at python close instead of object deletion.; - Moved the location of temp file to ~/.qutip/temp for now, but does this work on windows?; - Auto-cleanup on importing qutip, for files older than 7 days for now. But should be set by user, the temp file location also. Other to-do:; Dense versions of CQobjEvo could be more optimized and is not parallel. One option would be to use blas and hope the user's blas is parallel. (probably other PR). ps. Running tests for now. Do not merge.; **Changelog**; Cleaned CObjEvo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1231:1273,test,tests,1273,https://qutip.org,https://github.com/qutip/qutip/pull/1231,1,['test'],['tests']
Testability,"**Description**; There are some edge cases with the eigen solver that are bugged in `dev.major` that tests missed:; - `_eigs_dense` : It would not compute the proper eigen states when not all eigen states are required and the matrix is non-Hermitian.; - `_eigs_csr` : When all but one eigen values / vectors are needed: the smallest eigen values would always be removed, even when `sort='high'`. Also one element of the eigen vector matrix was removed, not one column. I rewrote the tests with pytest to catch more cases. **Changelog**; Fix some edges cases in `eigs`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1820:101,test,tests,101,https://qutip.org,https://github.com/qutip/qutip/pull/1820,2,['test'],['tests']
Testability,**Description**; There was a logic error in the matmul's `out` shape check making the check too lenient.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2349:29,log,logic,29,https://qutip.org,https://github.com/qutip/qutip/pull/2349,1,['log'],['logic']
Testability,"**Description**; This PR adds backend support to `metrics.py`. This change will help us to change backend to `jax.numpy`. **Related issues or PRs**; A PR would be created to add the changes to `qutip-jax`. **Note**; `'fidelity', 'tracedist', 'bures_dist', 'bures_angle', 'hellinger_dist', 'hilbert_dist'` are tested and working with `jit`.; `'average_gate_fidelity', 'process_fidelity', 'unitarity', 'dnorm'` are not working as of now. I am finding some issues with testing them. Only `trace_dist` and `hilbert_dist` are working with `grad` as there is no support for `sqrtm` in grad.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2461:309,test,tested,309,https://qutip.org,https://github.com/qutip/qutip/pull/2461,2,['test'],"['tested', 'testing']"
Testability,"**Description**; This PR fixed #2535 by adding a check for which matplotlib version is installed, similar to the custom `_axes3D`. Tested with `matplotlib==3.9.2` and `matplotlib==3.8.3`. **Related issues or PRs**; Fix for #2535",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2544:131,Test,Tested,131,https://qutip.org,https://github.com/qutip/qutip/pull/2544,1,['Test'],['Tested']
Testability,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1712:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1712,4,['test'],"['test', 'tests']"
Testability,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1724:561,test,tests,561,https://qutip.org,https://github.com/qutip/qutip/pull/1724,1,['test'],['tests']
Testability,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1630:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1630,9,"['Test', 'test']","['TestProject', 'test', 'tests']"
Testability,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1748:114,log,logic,114,https://qutip.org,https://github.com/qutip/qutip/pull/1748,2,"['log', 'stub']","['logic', 'stubs']"
Testability,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:684,test,tests,684,https://qutip.org,https://github.com/qutip/qutip/pull/1601,2,['test'],['tests']
Testability,**Description**; This sets up the towncrier utility to manage the changelog. - Add suitable towncrier configuration to the respository.; - Update the release documentation with instructions for using towncrier to update the change log.; - Update the development documentation to include the requirement to add towncrier entries for each PR.; - Update the GitHub PR template to mention the requirement to add a towncrier entry.; - Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. **Related issues or PRs**; #1894. **Changelog**; See doc/changes/1927.doc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927:231,log,log,231,https://qutip.org,https://github.com/qutip/qutip/pull/1927,2,"['log', 'test']","['log', 'tests']"
Testability,"**Description**; Two small bugs crept in in the conversion of the steady_state solver in the HEOM method to QuTiP v5. Firstly, the system state was returned without Fortran ordering (so it was effectively returned transposed), and the line which was supposed to enforce hermiticity used a conj() instead of an adjoint() so it just deleted the imaginary parts of the off-diagonals instead. . I think none of the notebooks or tests were sensitive to these two compounding issues, but it is fairly easy to make an example which is. This is also added as a rudimentary test, comparing output of the long-time dynamics to the steadystate. I didn't include any parameters to change in that test, but can do so if its useful. As a comment, the steady-state solver could probably be written to be more like the standard steadystate solver. But maybe better that is done alongside an effort to make the heom solver more data-layer flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2333:424,test,tests,424,https://qutip.org,https://github.com/qutip/qutip/pull/2333,3,['test'],"['test', 'tests']"
Testability,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:233,test,tests,233,https://qutip.org,https://github.com/qutip/qutip/pull/1869,3,['test'],"['tested', 'tests']"
Testability,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1791:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1791,4,['test'],"['test', 'tested', 'tests']"
Testability,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1679:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1679,5,['test'],['tests']
Testability,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1680:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1680,3,['test'],"['test', 'tests']"
Testability,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1825:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/1825,4,['test'],['tests']
Testability,"**Description**; Updated the test matrix, removing test using older version of python, scipy and numpy to add new versions.; Matrix include all python versions from 3.9 to 3.12, all scipy from 1.8 to 1.12, all numpy from 1.22 to 1.26.; I keep test with no cython, cython 0.X and 3.X. With and without mkl and all 3 os. Added python 3.12 to the list of build wheels, but removed 3.8. Increase minimum version of scipy and numpy in requirement to match those we actually tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2309:29,test,test,29,https://qutip.org,https://github.com/qutip/qutip/pull/2309,4,['test'],"['test', 'tests']"
Testability,**Description**; Updating cython to 0.29.30 break some tests... This fix the issue. **Changelog**; Add support for cython 0.29.30,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1895:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/1895,1,['test'],['tests']
Testability,"**Description**; Upgrade from 4.5.1 to 4.5.2.; Include cherry picked commit from the following PR:. #1307 Fix zcsr_proj for bras with unsorted indices; #1306 Fix quadratic complexity in zcsr_inner; #1302 Enforce a CI test with scipy<1.5; #1301 Fix brtools zheevr test; #1298 Support scipy >= 1.5 in fast_csr_matrix matmul and legacy.ptrace; #1283 Milstein's heterodyne index fix; #1271 Remove duplicate line in setup.py; #1264 Remove incorrect use of 'is' in comparisons. Code from #1288 was added manually to evade conflict and related test were reinstalled. (removed in 4.5.1, not in master). #1269 and #1242 are not included since they depend on #1209 which is more that a bugfix and is not in 4.5.0. **Changelog**; Bug Fixes; -------; - `zcsr_proj` does not fail with unsorted indices (by **Jake Lishman**); - Fixed Milstein's heterodyne errors (by **Eric Giguère**); - Removed risky code (by **Jake Lishman**); <!-- - Fix `add_circuit` and `remove_gate` (by **Canoming**) -->. Improvements; -------; - Faster `zcsr_inner` (by **Jake Lishman**); - Support for Scipy 1.5 (by **Jake Lishman**)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1310:217,test,test,217,https://qutip.org,https://github.com/qutip/qutip/pull/1310,3,['test'],['test']
Testability,"**Description**; Use `scipy.linalg.eigh` instead of `scipy.linalg.eig` for `qutip.simdiag` in order to ensure returned eigenvectors are always orthonormal. Since `simdiag` requires operands to be commuting and hermitian, this change should be justified. I did not add any new tests as this bug only occured in very rare circumstances. If desired, I could add the reproducing code from the related issue as a test case. **Related issues or PRs**; Fixes issue #2268",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2269:276,test,tests,276,https://qutip.org,https://github.com/qutip/qutip/pull/2269,2,['test'],"['test', 'tests']"
Testability,"**Description**; We had some duplicated tests in `test_superop_reps.py`, I removed the old ones. There was also two tests in `test_convert.py` that had the same name. Renamed one of them.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2486:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/2486,2,['test'],['tests']
Testability,"**Description**; We use `imatmul_data_dense` for cython only, in-place `matmul` operation since the dispatcher can't handle in-place operation but they can't have nice impact on performance.; `imatmul_data_dense` had a bug that when data is not `Dense` or `CSR` it would use a wrong specialization of `matmul` and raise an error. . It work fine with all data layer in qutip/qutip so we can test it here, but some tests fails in qutip-jax (qutip/qutip-jax#14) because of it. **Related issues or PRs**; Blocking qutip/qutip-jax#14",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2137:390,test,test,390,https://qutip.org,https://github.com/qutip/qutip/pull/2137,2,['test'],"['test', 'tests']"
Testability,"**Description**; When a `Qobj` is present in the output of a Jupyter cell, e.g. when running:; ```python; import qutip as qt; qt.fock(2, 0); ```; the output, which contains LaTeX code, is displayed in Markdown. The aim of this PR is to display the LaTeX output correctly. Replacing the `equation` environment in the LaTeX code with `$$...$$` and changing the `array` environment alignment from `*{11}c` to `cc` causes the vectors and matrices to display in the expected mathematical typeface. A test has not yet been provided, because the change was to a stored raw string; if a test is needed then the presence of this syntax in the string could be detected. **Related issues or PRs**; Fixes #2172",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2272:495,test,test,495,https://qutip.org,https://github.com/qutip/qutip/pull/2272,2,['test'],['test']
Testability,"**Description**; When allocating memory in cython, we did not check if the memory was allocated or not due to lacking RAM.; `kron_dia` was particularly inefficient for `bra & ket` combination., which caused a segfault in the `steadystate` benchmarks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2224:239,benchmark,benchmarks,239,https://qutip.org,https://github.com/qutip/qutip/pull/2224,1,['benchmark'],['benchmarks']
Testability,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1594:369,test,tests,369,https://qutip.org,https://github.com/qutip/qutip/pull/1594,1,['test'],['tests']
Testability,"**Description**; When using `brmesolve`, the tensor would always be seen as time-dependent. Which for Bloch Redfield mean computing eigen vectors at each time-step and result is a massive slowdown when not required. There is no tests, the result does not change. . **Related issues or PRs**; fix #2530",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2541:228,test,tests,228,https://qutip.org,https://github.com/qutip/qutip/pull/2541,1,['test'],['tests']
Testability,"**Description**; While working on the [heom-tls notebook] I discovered two wrong behaviors of the `HEOMSolver`. ; 1. Running `hsolver.run()` does not return the states if `e_ops=None`, but the documentation says that it should do so. I added the missing if condition to `HEOMSolver`. ; 2. If passing a progress bar like `qutip.ui.progressbar.TextProgressBar()` to `HEOMSolver` it results in an error, because internally it only checks for `None` or `True`. The documentation says it should also work if I pass an instance of `BaseProgressBar` (or a subclass). I added the checks and a test in the testfile for this. **Related issues or PRs**; None. **Changelog**; Fix HEOMSolver state return and progress bar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:585,test,test,585,https://qutip.org,https://github.com/qutip/qutip/pull/1908,2,['test'],"['test', 'testfile']"
Testability,"**Description**; With new version of os, it sometime break our hardware_info function, as with the new apple M1 with #1754.; Instead of fixing it each time, I propose removing the function:; - Qutip only use the number of cpu from that function, we never uses the cpu frequency or any other info obtained.; - There are cross platform modules for that (`psutil`), if we need that information, we should use them instead. In this PR, I removed `hardware_info`, created a new function `available_cpu_count` which is placed it in `utilities.py` since `blas_info` is also there. This function is set to detect the number of cpus _available_, not total number, so that when used on a cluster, it return the number of cpus assigned to the job. I tested it on slurm. **Changelog**; Remove hardware info",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1758:739,test,tested,739,https://qutip.org,https://github.com/qutip/qutip/pull/1758,1,['test'],['tested']
Testability,"**Description**; With the update of correlation to v5 in #1997, the need for `shift` in `QobjEvo` and `Coefficient` disappeared.; `ShiftCoefficient`, `QobjEvo._insert_time_shift` and related tests are removed. I also restored the correlation tests on windows hoping they are now fast enough to not timeout. **Related issues or PRs**; #1997",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016:191,test,tests,191,https://qutip.org,https://github.com/qutip/qutip/pull/2016,2,['test'],['tests']
Testability,"**Description**; `Dense` was missing some dispatch specialisations:; `isherm`, `isdiag`, `inner`, `inner_op`, `pow`, `indices` and `dimensions`.; Some of them are quite commonly used:; - `isherm` is called in a few method of `Qobj` like `eigenstates`.; - `inner` is used in `Qobj.__matmul__` between `bra` and `ket`. Tests for new functions are added.; For `isherm`, it was already tested for Dense, but relied on the automatic conversion of the dispatcher. Also fix some docstings which used `Arguments` instead of `Parameters`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2008:317,Test,Tests,317,https://qutip.org,https://github.com/qutip/qutip/pull/2008,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880:377,test,test,377,https://qutip.org,https://github.com/qutip/qutip/pull/1880,1,['test'],['test']
Testability,"**Description**; `actions/upload-artifact@v4` and `actions/download-artifact@v4` have breaking change cause the 5.0.3 release to miss wheels on pypi. Different jobs in one workflow can't create artifacts with the same name. (but not on retry).; Download artifact only download artifact from one job without the proper options.; (https://github.com/actions/upload-artifact/issues/478). - Upload to different artifacts per OS.; - Merge artifacts when downloading.; - Add test that all wheels and source are available before pypi release.; - For test build, built artifacts are listed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2476:469,test,test,469,https://qutip.org,https://github.com/qutip/qutip/pull/2476,2,['test'],['test']
Testability,"**Description**; `actions/upload-artifact@v4` and `actions/download-artifact@v4` have breaking change cause the 5.0.3 release to miss wheels on pypi. Different jobs in one workflow can't create artifacts with the same name. ; Download artifact only download artifact from one job without the proper options.; (https://github.com/actions/upload-artifact/issues/478). I also updated cibuildwheel version, we did it in qutip-5.0.X to build wheels for py3.12, but did not push it yet to master. I also merged the jobs to publish or pypi and testpypi, only some environment variables changed and they could get out of synchronization. Lastly I added a check that all wheels are available before uploading to pypi. With 5.0.3's first try, only linux's wheel were published,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477:537,test,testpypi,537,https://qutip.org,https://github.com/qutip/qutip/pull/2477,1,['test'],['testpypi']
Testability,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1794:280,test,test,280,https://qutip.org,https://github.com/qutip/qutip/pull/1794,1,['test'],['test']
Testability,"**Description**; `isherm_csr` did not fully tested the structure, it only checked that each line had as many elements in it than the corresponding column. So ; ```; [[1, 1, 0],; [0, 1, 1],; [1, 0, 1]]; ```; was seen as hermician. This added a second layer of structure check for such cases and a test that would previously fail. **Related issues or PRs**; Fixes #1865",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1866:44,test,tested,44,https://qutip.org,https://github.com/qutip/qutip/pull/1866,2,['test'],"['test', 'tested']"
Testability,**Description**; `pyximport` raises a deprecation warning due to importing `imp` instead of `importlib`. I silenced it. It was causing some problem in qutip-tensorflow testing as all warnings are treated as errors. Let me know if I should have proceeded in a different way. . **Changelog**; Silenced deprecation warning from `pyximport`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582:168,test,testing,168,https://qutip.org,https://github.com/qutip/qutip/pull/1582,1,['test'],['testing']
Testability,"**Description**; `qeye_like`, `qzero_like` and the data layer version, `identity_like` and `zeros_like` came up as useful in multiple conversation.; I added them with tests, but I did not go through the code to use them.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2153:167,test,tests,167,https://qutip.org,https://github.com/qutip/qutip/pull/2153,1,['test'],['tests']
Testability,"**Description**; `qutip.coefficient` accept scipy's CubicSpline input, but only work for complex `y` array:; ```; x = np.linspace(0, 1, 11); y = np.exp(-1j*x); H = qutip.QobjEvo([H0, scipy.interpolate.CubicSpline(x, y)]); ```; worked, but ; ```; x = np.linspace(0, 1, 11); y = np.sin(x); H = qutip.QobjEvo([H0, scipy.interpolate.CubicSpline(x, y)]); ```; did not. ; This add support for CubicSpline built using real array. ; Also add a test for both real and imag arrays + using both PPoly (parent class of CubicSpline) and Bspline (another spline class of scipy.). bug reported in: https://groups.google.com/g/qutip/c/MS0r6YNFkd8/m/0_cPnqheAQAJ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2397:436,test,test,436,https://qutip.org,https://github.com/qutip/qutip/pull/2397,1,['test'],['test']
Testability,"**Description**; `qzero_like` used on `QobjEvo` would call it (it needed `qevo(0).data`), which is both slow and could break `jax.jit`.; I added `Qobj.dtype` and `QobjEvo.dtype` to be used instead of accessing the data directly.; For `QobjEvo`, the `dtype` property still call the object when the type is unclear (mixed or function based), but it should be faster otherwise.; Tested that the example in qutip/qutip-jax#33 works.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2325:376,Test,Tested,376,https://qutip.org,https://github.com/qutip/qutip/pull/2325,1,['Test'],['Tested']
Testability,**Description**; `simdiags` didn't have any test... Add some. **Changelog**; Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1681:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/pull/1681,2,['test'],"['test', 'tests']"
Testability,**Description**; `svd`'s states are defined up to a sign.; We used both numpy and scipy for the tests and that difference in sign could make the tests fail randomly.; This makes the tests independent of the signs.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2092:96,test,tests,96,https://qutip.org,https://github.com/qutip/qutip/pull/2092,3,['test'],['tests']
Testability,**Description**; `test_nm_mcsolve.test_super_H` [failed in master's test](https://github.com/qutip/qutip/actions/runs/8807804559/job/24175678290). . Same issue as #2344. The tolerance is too tight and the test can fail randomly with a low probability.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2407:68,test,test,68,https://qutip.org,https://github.com/qutip/qutip/pull/2407,2,['test'],['test']
Testability,"**Description**; `test_super_H` can randomly fail, as seen in https://github.com/qutip/qutip/actions/runs/8112849659/job/22174928821. Trying it locally, it fail with a probability of `~1/500`.; Which is very close to what is expected with the tolerance used in the test.; I loosen the test `atol` for an expected rate of failure of about ~1/100000.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2344:265,test,test,265,https://qutip.org,https://github.com/qutip/qutip/pull/2344,2,['test'],['test']
Testability,"**Description**; refactor with fstring to format string to make code more Pythonic. **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2281:562,test,tests,562,https://qutip.org,https://github.com/qutip/qutip/pull/2281,1,['test'],['tests']
Testability,"**Is your feature request related to a problem? Please describe.**; A lot of issues in test fail seem to arise from random objects (as well as low-level math in MKL and/or cython issues). . **Describe the solution you'd like**; There are several options at hand. . ### stick to pytest and be creative; A possible fix in testing may be to add randomly generated data that then is pointed at or fix seeds.; **Pros**: fast (?); **Cons**: technical debt. ### pytest-randomly plugin; [pytest-randomly](https://github.com/pytest-dev/pytest-randomly) is a pytest plugin that addresses this kind of issues. It allows to control `random.seed`, rather than `numpy.random.seed`. ; **Pros**: pytest plugin, supports doctest. ; **Cons**: not super popular, not designed for numpy; ; ### property-based testing with Hypothesis; Hypothesis is a library that aims at changing the way tests are designed, allegedly: it should go from testing an instance to designing a test that applies to a domain of instances ([property-based testing](https://hypothesis.works/)). It is not super clear to me right now. ; It contains various randomness-related features, including a [seed function](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.seed). **Pros**: sounds powerful and clever, popular and growing, well documented, more robust even beyond this randomness problems.; **Cons**: radical change of testing framework (?), steep learning curve (?), overkill (?). I also admit I used nose until recently / used with pytest tests thought for nose, without taking advantage of pytest full power.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:87,test,test,87,https://qutip.org,https://github.com/qutip/qutip/issues/1268,9,['test'],"['test', 'testing', 'tests']"
Testability,"**Issue**; Currently, to develop qutip from source (e.g., installing from)the installation guide says to do ; ```; python setup.py develop; ```; However, it is [suggested](https://stackoverflow.com/questions/30306099/pip-install-editable-vs-python-setup-py-develop) to use the command; ```; pip -e .[development]; ```; This currently is not supported as there is no `development_requirements.txt` file. Also, in dev mode, one needs to install pytest, otherwise the `qt.run()` fails. If pytest as well as cython numpy and scipy were specified in such file, this should be done automatically. . Additionally, it may be ideal to pin only minor versions with tilde, stuff like `numpy~=1.18.1`, which should update micro releases but not minor. . **Describe the solution you'd like**; Add a `development_requirements.txt` file and in setup add; ```; extras_require={; 'development': set(dev_requirements),; 'test': dev_requirements,; ```; the set option should be needed for how pypi wants it given. . Add tildes pinning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263:903,test,test,903,https://qutip.org,https://github.com/qutip/qutip/issues/1263,1,['test'],['test']
Testability,"**Testing fails on several platforms**; In QuTiP 4.5.1, several `skipif`have been introduced to avoid build fail on Mac. Similarly, there are other issues related to robust random objects testing. . **Describe the solution you'd like**; An option could be using [`xdist`](https://docs.pytest.org/en/3.0.1/xdist.html) to allow specifics of certain tests, as it seems to have, beyond parallelization, some potentially interesting multi-platform coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1267:2,Test,Testing,2,https://qutip.org,https://github.com/qutip/qutip/issues/1267,3,"['Test', 'test']","['Testing', 'testing', 'tests']"
Testability,"+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 6.76e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 7.81e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 8.35e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:13769,Test,Test,13769,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,", assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21796,test,testing,21796,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2633,test,testing,2633,https://qutip.org,https://github.com/qutip/qutip/pull/1551,3,['test'],"['testing', 'tests']"
Testability,- A Qobj times a dense vector would result in a recursive loop and; crash the computer.; - Made the multi array check better about handling dtypes and added; test. The output is a dense array. However if we do create a dense Qobj class (as described in #437) then that should be the returned object.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/443:158,test,test,158,https://qutip.org,https://github.com/qutip/qutip/pull/443,1,['test'],['test']
Testability,"- Added random stochastic operators.; - rand_herm and rand_dm can be passed an array of eigenvalues that will be the eigenvalues of the resulting random operators. This is done via complex Jacobi rotations, but is really only suitable for operators with dimensionality <~=1000.; - Added unit tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/419:292,test,tests,292,https://qutip.org,https://github.com/qutip/qutip/pull/419,1,['test'],['tests']
Testability,- Can now convert from COO to CSR structs inplace with inplace indices sort; - zcsr_mult now has the option to sort indices or not.; - sp_reshape now calls zcsr_reshape that does an in-place reshape.; - Handy functions for quickly builting structs from COO and CSR SciPy matrices.; - Unit tests for cython structs.; - Random objects with a given eigenspectra are now sorted.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/641:289,test,tests,289,https://qutip.org,https://github.com/qutip/qutip/pull/641,1,['test'],['tests']
Testability,"- Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2073,Test,TestSESolve,2073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,- Fixed seeds inadvertently being reused.; - Added test to verify seeds not being reused.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/275:51,test,test,51,https://qutip.org,https://github.com/qutip/qutip/pull/275,1,['test'],['test']
Testability,"- ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Excep",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24012,Test,TestMESolveStepFuncCoeff,24012,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestMESolveStepFuncCoeff']
Testability,- Propagator can now be run in parallel.; - Simplified dissipative calling by unifying 'sparse' and dense calls when dissipative.; - Added propagator unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/496:155,test,tests,155,https://qutip.org,https://github.com/qutip/qutip/pull/496,1,['test'],['tests']
Testability,- Remove Python 2.7 (probably good to drop support at this stage); - Bumped Python version numbers up.; - Added OSX test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/923:116,test,test,116,https://qutip.org,https://github.com/qutip/qutip/pull/923,1,['test'],['test']
Testability,- Remove dependence on networkx for graph_degree test.; - Add test to check list input for ntraj in mcsolver.; - Added fidelity and trace distance tests.; - Shorten names of tests that are longer than 80 chars.; - Updated installation and release notes.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/280:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/280,4,['test'],"['test', 'tests']"
Testability,- Removed yield commands as they output to the console.; - Removed the lgmres steady state tests since this will be removed.; - Fixed test name going over 80 chars.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/458:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/pull/458,2,['test'],"['test', 'tests']"
Testability,- Restructure code to avoid multiple copies of code snippets.; - Optionally return dict with details on solution and solver details.; - Allow for building preconditioner separately so that different; iterative methods can be applied.; - Calculates inf-norm of residual at output.; - Returns number of iterations performed.; - Allow for inputing initial guess vector.; - Calculate a lower bound on the condition number of a preconditioner.; - Residual norm is given when iterative method fails to converge.; - Removed bicg method since it is not compatible.; - General docstring edits.; - Add tests for bicgstab method.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221:592,test,tests,592,https://qutip.org,https://github.com/qutip/qutip/pull/221,1,['test'],['tests']
Testability,"- The debug setting is off by default so conditional loading of the; logging feature does not work. Here we load the logger by default, but; do not log anything unless the debug feature is set.; - Also got rid of the inspect stack as I do not see the point of that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261:69,log,logging,69,https://qutip.org,https://github.com/qutip/qutip/pull/261,3,['log'],"['log', 'logger', 'logging']"
Testability,"- This pull contains a sparse kron function that does not need to convert to COO format to do the product. It is possible to get up to ~20x performance over the SciPy implementation.; - This function can likely be recast to use OPENMP on the outer-loop.; - Added random tests comparing this method vs the SciPy sparse kron. Here are speed ups for various random objects (dims in range [2,100]) with random densities:; ![oper-oper](https://cloud.githubusercontent.com/assets/1249193/18156290/76e1f8d4-6fd2-11e6-91b4-e898429ecf1c.png); ![oper-ket](https://cloud.githubusercontent.com/assets/1249193/18156291/784e4204-6fd2-11e6-95e1-221a90c3d20b.png); ![ket-ket](https://cloud.githubusercontent.com/assets/1249193/18156292/796a22fc-6fd2-11e6-9646-04214cdf3af4.png). The graphs show a relatively constant speedup. However, the results are a bit better than displayed here when using the `timeit` module directly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/530:270,test,tests,270,https://qutip.org,https://github.com/qutip/qutip/pull/530,1,['test'],['tests']
Testability,- occasional unit tests error due to tight tolerance; - warning when calling `choi_to_chi`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/129:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/129,1,['test'],['tests']
Testability,"- output; ```python; U1 != U2; myFid: 0.158 qutipFid: 2.746; myFid: 0.167 qutipFid: 3.371; myFid: 0.117 qutipFid: 2.769; myFid: 0.164 qutipFid: 3.479; myFid: 0.255 qutipFid: 2.700; myFid: 0.255 qutipFid: 2.662; myFid: 0.293 qutipFid: 2.768; myFid: 0.166 qutipFid: 2.658; myFid: 0.195 qutipFid: 3.453; myFid: 0.292 qutipFid: 2.807. U1 == U2; myFid: 1.000 qutipFid: 2.650; myFid: 1.000 qutipFid: 2.857; myFid: 1.000 qutipFid: 1.855; myFid: 1.000 qutipFid: 2.506; myFid: 1.000 qutipFid: 1.926; myFid: 1.000 qutipFid: 1.556; myFid: 1.000 qutipFid: 1.916; myFid: 1.000 qutipFid: 1.989; myFid: 1.000 qutipFid: 2.971; myFid: 1.000 qutipFid: 1.835; ```; - to reproduce; ```python; import numpy as np; from qutip import *. def fid(A, B):; assert A.shape == B.shape; fids = []; A = A.T; B = B.T; for i in range(A.shape[0]):; v1 = A[i]; v2 = B[i]; fidi = ( np.abs( np.dot( np.conj(v1), v2 ) ) )**2; fids.append(fidi); return np.mean(np.array(fids)). def test2():; def compare(U1, U2):; myFid = fid(U1.full(), U2.full()); qutipFid = fidelity(U1, U2); print('myFid: %.3f qutipFid: %.3f' % (myFid, qutipFid)); print(""U1 != U2""); for i in range(10):; U1 = rand_unitary(5); U2 = rand_unitary(5); compare(U1, U2); print(""\nU1 == U2""); for i in range(10):; U1 = rand_unitary(5); compare(U1, U1). test2(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1372:730,assert,assert,730,https://qutip.org,https://github.com/qutip/qutip/issues/1372,1,['assert'],['assert']
Testability,"-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4132,Test,TestCircuitProcessor,4132,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testGetObjevo']"
Testability,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13104,test,tests,13104,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13887,test,tests,13887,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17723,test,tests,17723,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/d,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19831,test,tests,19831,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39633,test,tests,39633,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18692,test,tests,18692,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/core; copying numpy/core/numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:15707,test,tests,15707,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/byteswapping.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/structured,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27671,test,tests,27671,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38543,test,testutils,38543,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['testutils']
Testability,-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39364,test,tests,39364,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44102,test,tests,44102,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42079,test,tests,42079,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46582,test,tests,46582,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46748,test,tests,46748,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16473,test,tests,16473,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27228,test,tests,27228,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18112,test,tests,18112,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18977,test,tests,18977,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16964,test,tests,16964,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18212,test,tests,18212,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18302,test,tests,18302,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30929,test,tests,30929,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10271,test,tests,10271,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9120,test,testing,9120,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14065,test,tests,14065,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13290,test,tests,13290,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,". However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1499,test,testing,1499,https://qutip.org,https://github.com/qutip/qutip/pull/2416,2,['test'],['testing']
Testability,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465:4119,test,testing,4119,https://qutip.org,https://github.com/qutip/qutip/pull/1465,3,['test'],"['test', 'testing']"
Testability,". This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally very well covered, but arguing between 63% and 71% when we should be aiming to get to >95% is missing the point. Fixes #1339.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:1686,test,test,1686,https://qutip.org,https://github.com/qutip/qutip/pull/1347,2,['test'],['test']
Testability,". self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f40>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_10_happy_breakdown_e_ops_none(self, happy_breakdown_parameters):; ""krylovsolve: check e_ops=None at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.check_e_ops_none(; H, psi0, tlist, dim, krylov_dim=krylov_dim; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:469: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:274: in check_e_ops_none; krylov_outputs = krylovsolve(H, psi0, tlist, krylov_dim, e_ops=None); stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:1217,test,tests,1217,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,".................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; from itertools import combinations; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:4874,assert,assert,4874,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,['assert'],['assert']
Testability,"............s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; from itertools import combinations; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""}",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:5000,Assert,AssertionError,5000,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,".0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4225,test,tests,4225,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18784,test,tests,18784,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19073,test,tests,19073,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35949,test,tests,35949,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3879,test,tests,3879,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,".1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work.; 2. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default.; 3. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1146,test,tests,1146,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13200,test,tests,13200,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,".]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:7840,Test,TestKrylovSolve,7840,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21639,test,tests,21639,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14758,test,tests,14758,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15448,test,tests,15448,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14842,test,tests,14842,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17537,test,tests,17537,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31583,test,tests,31583,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.0; Cython Version: 3.0.10; Matplotlib Version: 3.9.0; Python Version: 3.12.4; Number of CPUs: 10; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5452,test,tests,5452,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16385,test,tests,16385,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26696,test,tests,26696,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26908,test,tests,26908,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27120,test,tests,27120,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36881,test,tests,36881,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36785,test,tests,36785,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36227,test,tests,36227,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test modu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23797,test,tests,23797,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:7017,Test,TestPlot,7017,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestPlot', 'tests']"
Testability,".run(self); 186 ; 187 def build_extensions(self):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. /home/caidish1234/anaconda3/lib/python3.6/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 572 except KeyError:; 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 ; 576 # Return *all* object filenames, not just the ones we just built. /home/caidish1234/anaconda3/lib/python3.6/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 118 extra_postargs); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 ; 122 def create_static_lib(self, objects, output_libname,. ImportError: Building module rhs82342421 failed: [""distutils.errors.CompileError: command 'gcc' failed with exit status 1\n""]; ```. So, I opened my server's log,it showed lots of:; `cc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]`. And an error:; `gcc: error trying to exec '/usr/lib/gcc/x86_64-linux-gnu/4.8/cc1plus': execv: Argument list too long`. After killing the kernel, open the notebook again...Everything is ok...I'm puzzled now...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:5613,log,log,5613,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['log'],['log']
Testability,".test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve current",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:6095,test,tests,6095,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,".test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[ 4. 0...0. 0. 0. 0. 0. -1. 0. 0. 0. 0. -1. -2. 0.]; [ 0. 0. 0. -1. 0. 0. 0. 0. 0. -1. 0. 0. -1. 0. 0. -4.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve cu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8999,test,tests,8999,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,".testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6619,test,testing,6619,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Version",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8751,test,test,8751,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16677,test,test,16677,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Fram",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24016,test,test,24016,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9990,test,testing,9990,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14878,test,test,14878,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7628,test,tests,7628,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11191,test,tests,11191,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15358,test,tests,15358,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/pol,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40311,test,tests,40311,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17715,test,test,17715,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framework",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25822,test,test,25822,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28528,test,test,28528,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39269,test,tests,39269,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16198,test,tests,16198,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/index_t,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:33075,test,tests,33075,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44006,test,tests,44006,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43505,test,tests,43505,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4603,Test,TestCircuitProcessor,4603,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testChooseSolver']"
Testability,/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44691,test,testing,44691,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20276,test,test,20276,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24784,test,test,24784,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32802,test,tests,32802,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22591,test,testing,22591,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7764,test,tests,7764,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19871,test,testing,19871,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull request from GHSA-34jh-p97f-mpxf</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/29cfd02f66376c61bd20f1725477925106321f68""><code>29cfd02</code></a> Fix handling of OpenSSL 3.2.0 new error message &quot;record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3137"">#3137</a>)</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recre",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:3519,test,tests,3519,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['test'],['tests']
Testability,"0""><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/230"">#230</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:1371,test,testing,1371,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['test'],['testing']
Testability,"0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:22713,test,test,22713,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['test', 'tests']"
Testability,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18876,test,tests,18876,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16867,test,tests,16867,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31685,test,tests,31685,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31788,test,tests,31788,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30444,test,tests,30444,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35475,test,tests,35475,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42613,test,tests,42613,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44319,test,tests,44319,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6082,Test,TestMESolveStepFuncCoeff,6082,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12408,test,tests,12408,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13637,test,tests,13637,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"0000000e+000 +0.00000000e+000j 0.00000000e+000 +5.29328215e+180j; 5.29328215e+180 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+241j; 5.37624943e+241 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; ```; I did the same test on two machines and on my old laptop it works fine, so it probably is something architecture dependent. The output of lscpu is:; ```; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 8; On-line CPU(s) list: 0-7; Thread(s) per core: 1; Core(s) per socket: 8; Socket(s): 1; NUMA node(s): 1; Vendor ID: GenuineIntel; CPU family: 6; Model: 63; Model name: Intel(R) Core(TM) i7-5960X CPU @ 3.00GHz; Stepping: 2; CPU MHz: 1199.890; CPU max MHz: 3500,0000; CPU min MHz: 1200,0000; BogoMIPS: 5989.11; Virtualization: VT-x; L1d cache: 32K; L1i cache: 32K; L2 cache: 256K; L3 cache: 20480K; NUMA node0 CPU(s): 0-7; Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/681:2469,test,test,2469,https://qutip.org,https://github.com/qutip/qutip/issues/681,1,['test'],['test']
Testability,"07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/quti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5090,test,tests,5090,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"1 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2900,test,testing,2900,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"1. Gate T and S were defined at qutip.qip.operation. Since Pauli-X, Pauli-Y and Pauli-Z exist in qutip.operators, they were imported as functions into qutip.qip.operation. All functions were tested. ; 2. Each of the new gates was added to the circuit.py file. ; 3. Not apply.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209:191,test,tested,191,https://qutip.org,https://github.com/qutip/qutip/pull/1209,1,['test'],['tested']
Testability,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414:310,log,logic,310,https://qutip.org,https://github.com/qutip/qutip/pull/1414,2,['log'],['logic']
Testability,1. _unit_site_H() is added that is used by display_unit_cell() and display_lattice(); 2. ImportError for matplotlib.pyplot is added.; 3. Some logical problems were fixed. @hodgestar Please review this branch.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1702:142,log,logical,142,https://qutip.org,https://github.com/qutip/qutip/pull/1702,1,['log'],['logical']
Testability,"1. version 3.2.0 can not run testing in my mac system OS X EI Capitan. When I try:; `$ python3 -c ""import qutip.testing as qt; qt.run()""`; I get the follow message:; ; > ---; > ; > Ran 0 tests in 0.000s; 2. However, the testing.py and the folder 'tests' exist. I can run the test in the 'tests' folder one-by-one. For example, when I run:; `$ sudo python3 test_mesolve.py`; I get; ; > .....................; > Ran 21 tests in 48.167s; > ; > OK; 3. `sudo` is needed here for permission. For example, when I run: ; `$ python3 test_mesolve.py`; I get a set of the following error message. > # .....E...E.E...E..E..; > ## ERROR: mesolve: time-dependence as array with super as init cond; > ; > Traceback (most recent call last):; > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; > self.test(*self.arg); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/tests/test_mesolve.py"", line 638, in testMETDDecayAsArray; > out1 = mesolve(H, psi0, tlist, c_op_list, []); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 277, in mesolve; > progress_bar); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 661, in _mesolve_list_str_td; > cgen.generate(config.tdname + "".pyx""); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 116, in generate; > self.file(filename); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 78, in file; > self.file = open(filename, ""w""); > PermissionError: [Errno 13] Permission denied: 'rhs165050.pyx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:29,test,testing,29,https://qutip.org,https://github.com/qutip/qutip/issues/445,9,['test'],"['test', 'testing', 'tests']"
Testability,1.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16105,test,tests,16105,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12238,test,tests,12238,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4045,test,tests,4045,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"2 improvement to Qobj:; - `inv` method. (close #1102); - faster `ptrace` using dense matrix (taken from #1076); Both dense and sparse method are kept. Default is use sparse method when the matrix density in under 10%. `inv` method also has a sparse and dense version, but sparse is almost always slower. Some improvement to random Qobj to remove edge case. Tests are updated. (Not merge ready yet.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1113:357,Test,Tests,357,https://qutip.org,https://github.com/qutip/qutip/pull/1113,1,['Test'],['Tests']
Testability,"2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:3005,Assert,AssertionError,3005,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3311,test,test,3311,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31991,test,tests,31991,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,3 tests fail,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:2,test,tests,2,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead to problems with the documentation, since the docstrings in; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L50-L53; and; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L71-L74; are out-of-date. I find that the only uses of `qutip.graph` are in `qutip.steadystate`, which uses `reverse_cuthill_mckee` and `weighted_bipartite_matching`. The former can be replaced directly with the `scipy` version, at the cost of ~10% speed. The latter is not yet in `scipy`, so we ought to perhaps keep it, since it is used and documented for `qutip.steadystate.steadystate`. All other functions in `qutip.graph` are not used, and not documented (and in `scipy` anyway). While obviously I don't want to trample on anybody's code, I think it might be worth considering how we can reduce the package complexity of `qutip`, especially while significant new complexity is frequently being added in the interests of speed. We only have a finite amount of resources to maintain the codebase, and it's already quite difficult to get a handle on bug reports, documentation, testing (what I'm working on in #1181), and keeping old features up-to-date with the new. In the tracking down of these points, I can also strongly advocate for a stricter policy on `git` commit messages and keeping the commit history tidy and descriptive, but I'll live to fight another day on that one!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:4001,test,testing,4001,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['testing']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3184,test,test,3184,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11392,test,test,11392,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19372,test,test,19372,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23115,test,test,23115,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16678,test,tests,16678,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18504,test,tests,18504,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,4-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12584,test,tests,12584,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,4-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43039,test,tests,43039,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27014,test,tests,27014,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26586,test,tests,26586,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11711,test,tests,11711,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts ==============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:7160,test,tests,7160,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 self.format = 'csr'. AttributeError: property 'format' of 'fast_csr_matrix' object has no setter; ```. ### Expected Behaviour. I expected to be able to import qutip :) . ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.11.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. The environment above was generated with `scipy==1.10.1` (which still worked); I've changed the Scipy version to `1.11.0` manually in that list. Forcing `scipy==1.10.1`, resolves the problem. Hence, I'm under the impression that the recent bump of `scipy` to `1.11.0` is causing the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:3077,test,test-env-scipy-qutip,3077,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"8549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coef",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23402,Test,TestTimeDependence,23402,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13374,test,tests,13374,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13718,test,tests,13718,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13803,test,tests,13803,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-70.0.0 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/vector.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/ssystem.pyx because it depends on",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3657,test,testresources,3657,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['test'],['testresources']
Testability,"9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15915,test,test,15915,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22080,test,test,22080,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18602,test,tests,18602,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_re,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31015,test,tests,31015,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45401,test,testing,45401,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:13004,test,tests,13004,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1358,test,test-env-scipy-qutip,1358,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1182,test,tests,1182,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,":127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10810,test,tests,10810,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,":3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27997,test,testing,27997,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H F,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6937,test,tests,6937,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25036,test,tests,25036,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,":; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1440,test,test,1440,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['test']
Testability,":; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5241,test,test,5241,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,['test'],"['test', 'tests']"
Testability,":\Users\daniel\Anaconda\lib\site-packages\Cython\Distutils\build_ext.py"", line 163, in run; _build_ext.build_ext.run(self); File ""C:\Users\daniel\Anaconda\lib\distutils\command\build_ext.py"", line 337, in run; self.build_extensions(); File ""C:\Users\daniel\Anaconda\lib\site-packages\Cython\Distutils\build_ext.py"", line 171, in build_extensions; self.build_extension(ext); File ""C:\Users\daniel\Anaconda\lib\distutils\command\build_ext.py"", line 496, in build_extension; depends=ext.depends); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 473, in compile; self.initialize(); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 383, in initialize; vc_env = query_vcvarsall(VERSION, plat_spec); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 271, in query_vcvarsall; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module qutip.cy.spmatfuncs failed: ['DistutilsPlatformError: Unable to find vcvarsall.bat\n']. I tried testing to see if it was installed correctly by typing import qutip.testing as qt and I get. Traceback (most recent call last):; File ""C:\Users\daniel\Anaconda\lib\site-packages\IPython\core\interactiveshell.py"", line 2883, in run_code; exec(code_obj, self.user_global_ns, self.user_ns); File ""<ipython-input-3-ae6395ba7937>"", line 1, in <module>; import qutip.testing as qt; File ""C:\Program Files (x86)\JetBrains\PyCharm Community Edition 4.0.4\helpers\pydev\pydev_import_hook.py"", line 21, in do_import; module = self._system_import(name, _args, *_kwargs); File ""C:\Users\daniel\Anaconda\lib\site-packages\qutip__init__.py"", line 62, in <module>; qutip.settings.ipython = False; AttributeError: 'module' object has no attribute 'settings'. I have also tried downloading the file, putting it in the folder Anaconda\pkgs, opening a command window, setting the path and installing it there. I don't get any error messages but I still cannot seem to import QuTiP. What am I doing wrong?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/343:4246,test,testing,4246,https://qutip.org,https://github.com/qutip/qutip/issues/343,3,['test'],['testing']
Testability,":test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2263,test,testPlot,2263,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['testPlot']
Testability,":test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1476,test,tests,1476,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"; >>> import qutip; >>> qutip.cnot(); __main__:1: DeprecationWarning: Importing functions/classes of the qip submodule directly from the namespace qutip is deprecated. Please import them from the submodule instead, e.g. qutip.qip import `func_name`.; Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[1. 0. 0. 0.]; [0. 1. 0. 0.]; [0. 0. 0. 1.]; [0. 0. 1. 0.]]; >>> import qutip # warning appears only once.; >>> qutip.cnot(); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[1. 0. 0. 0.]; [0. 1. 0. 0.]; [0. 0. 0. 1.]; [0. 0. 1. 0.]]; ```. The help function still works correctly:; ```; >>> help(cnot); Help on function cnot in module qutip.qip.gates:; cnot(N=None, control=0, target=1); Quantum object representing the CNOT gate. Returns; -------; cnot_gate : qobj; Quantum object representation of CNOT gate. Examples; --------; >>> cnot(); Quantum object: dims = [[2, 2], [2, 2]], shape = [4, 4], type = oper, isHerm = True; Qobj data =; [[ 1.+0.j 0.+0.j 0.+0.j 0.+0.j]; [ 0.+0.j 1.+0.j 0.+0.j 0.+0.j]; [ 0.+0.j 0.+0.j 0.+0.j 1.+0.j]; [ 0.+0.j 0.+0.j 1.+0.j 0.+0.j]]; ```. The only flaw I found is that the traceback will stop at the wrapper function if the arguments are wrong; ```; >>> cnot(wrong_arg=1); __main__:1: DeprecationWarning: Importing functions/classes of the qip submodule directly from the namespace qutip is deprecated. Please import them from the submodule instead, e.g. qutip.qip import `func_name`.; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""c:\users\boxi\onedrive\studium\qutip-project\qutip\qutip\__init__.py"", line 240, in deprecated_func; return func(*args, **kwargs); TypeError: cnot() got an unexpected keyword argument 'wrong_arg'; ```; Anyone would like to try it out and see if the behaviour is the same? For instance, running `test_entropy.py` now will give a warning because the importation is wrong there. All tests still pass.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1074:2872,test,tests,2872,https://qutip.org,https://github.com/qutip/qutip/pull/1074,1,['test'],['tests']
Testability,"; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15505,test,testing,15505,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:1413,test,testPropHOSteadyPar,1413,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['test'],['testPropHOSteadyPar']
Testability,"; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6415,test,testing,6415,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3527,Test,TestKrylovSolve,3527,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2817,Test,TestIntegratorCte,2817,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['Test'],['TestIntegratorCte']
