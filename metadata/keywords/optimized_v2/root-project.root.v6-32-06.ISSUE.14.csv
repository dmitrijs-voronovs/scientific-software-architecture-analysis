quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,Thanks for fixing this clicko (typo with a click) error :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14372#issuecomment-1899116541:50,error,error,50,https://root.cern,https://github.com/root-project/root/issues/14372#issuecomment-1899116541,1,['error'],['error']
Availability,Thanks for investigating and finding the faulty commit @ferdymercury ! This is now reverted in master and v6-26-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9740#issuecomment-1025688997:41,fault,faulty,41,https://root.cern,https://github.com/root-project/root/issues/9740#issuecomment-1025688997,1,['fault'],['faulty']
Availability,"Thanks for merging this, @pcanal. @dpiparo I will add the test as soon as I come back from vacation. The chunking introduces partial reduction of the results (one per chunk). This reduces memory allocation in the Map stage. The propagated error in these partial results will differ with the number of data elements processed per chunk. As a consequence, the final reduction step will be carried out with differing implicit errors when specifying different numbers of chunks. This is normal and expected. Would you have it otherwise? I could see to apply the reduction step with a compensated sum if so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-392248316:239,error,error,239,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-392248316,2,['error'],"['error', 'errors']"
Availability,"Thanks for noting this problem. Note that the first new Error message is inaccurate. For example,; ```; gInterpreter->GenerateDictionary(""std::vector<TNamed*>"","""");; ```; works perfectly. And in my opinion the 2nd error message might be too noisy for this kind of error. Either way, my understanding of the problem is simply a missing nullptr checking which was apply to 'just' TCint.cxx at a time we had both TCint and TCintWithCling.cxx:; ```; commit 40ff05f286d494f930c00d81942b845f240a74f9; Author: Axel Naumann <Axel.Naumann@cern.ch>; Date: Thu Jan 19 09:46:31 2012 +0000. Fix Coverity 39060 (deref of 0 ptr); ; ; git-svn-id: http://root.cern.ch/svn/root/trunk@42716 27541ba8-7e3a-0410-8455-c3a389f83636. diff --git a/core/meta/src/TCint.cxx b/core/meta/src/TCint.cxx; index 311e2f2d99..b9babb70e6 100644; --- a/core/meta/src/TCint.cxx; +++ b/core/meta/src/TCint.cxx; @@ -1165,6 +1165,7 @@ Int_t TCint::GenerateDictionary(const char *classes, const char *includes /* = 0; // gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");; ; if (classes == 0 || classes[0] == 0) return 0;; + if (!includes) includes = """";; ; // Split the input list; std::vector<std::string> listClasses;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724#issuecomment-371907648:214,error,error,214,https://root.cern,https://github.com/root-project/root/pull/1724#issuecomment-371907648,5,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks for pointing out the question regarding checksumming compressed or uncompressed data. I considered it an error in the text but missed to explicitly mention it. My main reason to checksum compressed data is that we can verify data integrity without decompressing the data. A small benefit is that we need to checksum fewer bytes. I think that checksumming of the underlying storage layer will be hard to reuse in a meaningful way because most likely the checksummed byte ranges do not align with RNTuple structures (page, page group or similar). So what the underlying storage layer does is fine, and maybe the user decides that the storage layer is so reliable that one can skip application-level checksums altogether but I think that is as far as it goes. An advantage of checksumming uncompressed data is that they are stable when different encodings or compression algorithms are applied. I'm not sure though if we can exploit that anywhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15921#issuecomment-2193948400:112,error,error,112,https://root.cern,https://github.com/root-project/root/pull/15921#issuecomment-2193948400,2,"['error', 'reliab']","['error', 'reliable']"
Availability,"Thanks for the clarification!. Running `Unload` doesn't seem to solve the problem. ```python; >>> import ROOT; >>> ROOT.gSystem.CompileMacro(""file1.cxx""); Info in <TUnixSystem::ACLiC>: creating shared library /home/vpadulan/Projects/rootcode/gsystem-compilemacro/file1_cxx.so; 1; >>> ROOT.gSystem.Unload(""file1.cxx""); >>> for filename in os.listdir():; ... if filename.startswith(""file1""):; ... os.remove(filename); ... ; >>> ROOT.gSystem.CompileMacro(""file2.cxx""); Info in <TUnixSystem::ACLiC>: creating shared library /home/vpadulan/Projects/rootcode/gsystem-compilemacro/file2_cxx.so; sh: -c: line 1: unexpected EOF while looking for matching `""'; sh: -c: line 2: syntax error: unexpected end of file; Error in <ACLiC>: Executing ...; ```. But I see your point about deleting an in-use file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10640#issuecomment-1136930368:674,error,error,674,https://root.cern,https://github.com/root-project/root/issues/10640#issuecomment-1136930368,2,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks for the education, I just wrote down what I learned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/564#issuecomment-300600704:39,down,down,39,https://root.cern,https://github.com/root-project/root/pull/564#issuecomment-300600704,1,['down'],['down']
Availability,"Thanks for the fast response. The issue 11025 is definitely the same that I observe. The last variable in the list of protected variables is TSelectorList *fOutput;. Same signature as my issue. Concerning Ubuntu, yes, it is the same ROOT version, but different compiler. I will download 6.22/04 and compile. Using the nightly build does not work, source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-slc6-gcc7-opt/setup.sh ; python; import ROOT; ModuleNotFoundError: No module named 'ROOT'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6856#issuecomment-732698715:278,down,download,278,https://root.cern,https://github.com/root-project/root/issues/6856#issuecomment-732698715,1,['down'],['download']
Availability,"Thanks for the great comments @guitargeek! All the ones I didn't comment on I agree with, so will implement those soon. I agree that it has become quite a complex class. It would be nice if things could be refactored at some time. However, part of it is also inevitable, I fear, because `RooMinimizer` has to bridge between two rather different frameworks, that of Minuit2 and RooFit, and now due to all the parallel processing work will have to deal with even more stuff than before. By the way, just as a historical aside: at some point I had turned `RooMinimizer` into a fully templated class, which made it even more horrible to maintain and time consuming to develop (since the header had to be recompiled on every change). I managed to trim the template horror down to just the constructor by introducing `RooAbsMinimizerFcn`. That introduced its own complexity here and there, as we discussed above :) But it was better in the end, I think. Note that the sole reason the template parameter is still necessary in the constructor is that the `MinimizerFcn` needs the proper constructor inside the `RooMinimizer` constructor. I like your suggestion of also using the template class argument instead of the `dynamic_cast` using `std::is_same`, but this is not strictly necessary like using the proper constructor is. By the way, note also that in the upcoming TestStatistics PR, there will be yet another `RooMinimizer` constructor, also with template arguments, but different ones, namely the concrete calculator classes for the likelihood and gradient. Maybe it would be better to discuss this design aspect further in that PR, because then we have the full picture.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-879703750:767,down,down,767,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879703750,1,['down'],['down']
Availability,"Thanks for the hint, I tested the following two cases and did not see a problem:; - Test example, identical outcome as our quick and dirty fix, as I expected; - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) ; Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12242#issuecomment-1433310934:554,error,error,554,https://root.cern,https://github.com/root-project/root/issues/12242#issuecomment-1433310934,1,['error'],['error']
Availability,"Thanks for the hint. I just tried that, now I do not get a crash, but rather a warning and the button name is not changed:. `Error in <TClingCallFunc::exec>: The method ChangeText is called without an object.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779077717:125,Error,Error,125,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779077717,1,['Error'],['Error']
Availability,"Thanks for the nice example. It works on Ubuntu, too.; (Sorry, my last message was an error on my side, I was passing a nullptr as myButton). Why is SetText() leading to a crash?. Maybe we could add a short comment here in the documentation:; https://root.cern/doc/master/classTGTextButton.html#aa2d8b609e96fb43c0a11b6b9ece52c83. ""If you use a signal-slot connection with inline argument passed as (text) value, use ChangeText instead of SetText"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779120010:86,error,error,86,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779120010,1,['error'],['error']
Availability,"Thanks for the ping, @StefanBruens . We are now preparing the IANA form content, I expect to get the process started next week. Apologies for keeping this open and unaddressed for so long! I will update this issue once we have a decision from IANA, which will include the file magic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6771#issuecomment-1498759750:15,ping,ping,15,https://root.cern,https://github.com/root-project/root/issues/6771#issuecomment-1498759750,1,['ping'],['ping']
Availability,"Thanks for the ping, @eguiraud! :-). I had some work on a branch that fixes this and other related issues (grouped in #10049), but I still need to find the time to polish that code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1164165206:15,ping,ping,15,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1164165206,1,['ping'],['ping']
Availability,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:; 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled.; 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14084#issuecomment-1822503869:147,error,errors,147,https://root.cern,https://github.com/root-project/root/issues/14084#issuecomment-1822503869,1,['error'],['errors']
Availability,"Thanks for the report!. It's probably related to https://github.com/root-project/root/pull/13771 so pinging @ellert @guitargeek . ![image](https://github.com/root-project/root/assets/10653970/ea1005c0-c53e-41b3-90e0-6f266e6bd623). If you need a quick solution, try reverting: https://github.com/root-project/root/pull/13771 or fiddling around with TPRegexp::MatchInternal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15986#issuecomment-2209076660:100,ping,pinging,100,https://root.cern,https://github.com/root-project/root/issues/15986#issuecomment-2209076660,1,['ping'],['pinging']
Availability,"Thanks for the report, I did a quick test with master and I can't reproduce on an Ubuntu18, compiling ROOT from sources. Can it be a permissions issue? E.g. the `kernel.json` of the ROOT kernel should be readable. Let's assume you compile from sources, you do `source bin/thisroot.sh` in the build directory and then run `root --notebook`. This should have created `$HOME/.rootnb/kernels/root/kernel.json`, which should be readable. Can you confirm that with these steps you also reproduce the error?. On the other hand, I'm using `metakernel` 0.24.4, what is the version you are using?. Finally, if you run `jupyter kernelspec list`, what does it say?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6608#issuecomment-709037423:494,error,error,494,https://root.cern,https://github.com/root-project/root/issues/6608#issuecomment-709037423,1,['error'],['error']
Availability,"Thanks for the review @dpiparo!. So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:; https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777#issuecomment-1743507531:50,failure,failure,50,https://root.cern,https://github.com/root-project/root/pull/13777#issuecomment-1743507531,2,['failure'],['failure']
Availability,"Thanks for the review!; I have downgraded the deprecation messages, just mentioning the alternative. How do you like it now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14754#issuecomment-1949917116:31,down,downgraded,31,https://root.cern,https://github.com/root-project/root/pull/14754#issuecomment-1949917116,1,['down'],['downgraded']
Availability,"Thanks for the suggestions! ; I built ROOT from source for two Python versions. Python 2.7 works fine, it imports ROOT without errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8110#issuecomment-834209615:127,error,errors,127,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-834209615,1,['error'],['errors']
Availability,"Thanks for the tip! Adding `-fno-rtti` to cling works, but only in the case where the function is defined inline in the header. When the function is defined in a separate TU which is linked into the host application, cling fails to find the symbol. I've updated the test case here: https://github.com/jeaye/cling-linkage-error-test-case. Basically just moved `test::integer::to_string` into its own cpp file, which then brings the linker errors back when trying to call it from cling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193155383:321,error,error-test-case,321,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193155383,2,['error'],"['error-test-case', 'errors']"
Availability,"Thanks for the updates again! The jenkins tests passed, so I think you can merge it now, @hageboeck. Note that there are some remaining Travis CI failures, but as far as I can tell they are not related to the changes in this PR, right? They relate to the `checkLimits()` call in `RooBinIntegrator`, which has already been there before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8167#issuecomment-858071426:146,failure,failures,146,https://root.cern,https://github.com/root-project/root/pull/8167#issuecomment-858071426,1,['failure'],['failures']
Availability,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14813#issuecomment-2038169206:398,failure,failure,398,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206,2,['failure'],['failure']
Availability,Thanks for this Jonas. It looks good but before merging we need too undrrstand the test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9458#issuecomment-996737995:88,failure,failures,88,https://root.cern,https://github.com/root-project/root/pull/9458#issuecomment-996737995,1,['failure'],['failures']
Availability,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15105#issuecomment-2031929972:402,mainten,maintenance,402,https://root.cern,https://github.com/root-project/root/pull/15105#issuecomment-2031929972,1,['mainten'],['maintenance']
Availability,"Thanks for this detailed report! I do not really understand how your ""proposed solution"" is different from what we had before. It looks like you only changed the way the error message is printed. Maybe I missed something...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592#issuecomment-1929074051:170,error,error,170,https://root.cern,https://github.com/root-project/root/issues/14592#issuecomment-1929074051,1,['error'],['error']
Availability,"Thanks for this report. These errors refer to `fork`: are we sure the resource we are lacking are threads and not PIDs? Is the configuration of the machine ""sane"", i.e. allowing an adequate number of subprocesses per process?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552#issuecomment-2380868189:30,error,errors,30,https://root.cern,https://github.com/root-project/root/issues/16552#issuecomment-2380868189,1,['error'],['errors']
Availability,"Thanks for this submission! This CI failure is strange, but probably unrelated to what you were doing. Well, if unrelated it should resolve itself on the next push anyway. I like where this is going, but you may want to cover a bit more of the public RHistConcurrentFiller and RHistConcurrentFillManager API, including the part that's inherited from RHistBufferedFillBase. In particular, I would really like to see some coverage for `Flush()` because it's a surprisingly subtle part of the API that [we've gotten wrong before](https://sft.its.cern.ch/jira/browse/ROOT-10407). (Speaking of which, reading through the code again, I also wonder if users won't find it surprising that `RHistConcurrentFiller::FillN` and its RHistBBufferedFill equivalent doesn't flush pending data points from previous calls to `Fill`. We may want to discuss that design with @Axel-Naumann next Thursday.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4958#issuecomment-584175572:36,failure,failure,36,https://root.cern,https://github.com/root-project/root/pull/4958#issuecomment-584175572,1,['failure'],['failure']
Availability,Thanks for working on this! I only now realise how sensitive patch files are to these errors. Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12833#issuecomment-1551201999:86,error,errors,86,https://root.cern,https://github.com/root-project/root/pull/12833#issuecomment-1551201999,1,['error'],['errors']
Availability,"Thanks for you comments @lmoneta.; I'm sorry for my late reply but since nothing happened here for over a month, I stopped watching. The reason I used double pointers for the 2D arrays was to have the most low level datatype possible, have full felxibility and stay consistent with the other TGraph classes which are all using pointers for 1D arrays. Nevertheless I understand your concerns since double pointers for arrays are a rather dirty way of programming. I think it might be a good compromise to use the ROOT array wrapper class TArrayD. Then the two dimensional Arrays could be represented by an 1D array of TArrayD objects. The functions SetPointEY, SetPointEYL and SetPointEYH were implemented by me to keep full consistency with the TGraphAsymmErrors class. They are overloaded with one version taking the point and an array in which case the array cointains all errors of the named point for the different dimensions. My idea was to alter the TGraphAsymmErrors notation as little as possible so TGraphAsymmErrors::SetPointEY(i, el, eh) would translate to TGraphMultiErrors::SetPointEY(i, &el, &ey) in the case of only one error dimension which would be equal to a TGraphAsymmErrors. The idea of the function SetDimensionEY, SetDimensionEYL and SetDimensionEYH is basically the same. They set the errors of all points in the given dimension. My idea was to think of a way to convert from multiple TGraphAsymmErrors objects to one single TGraphMultiErrors object like in this small example:; ```; TGraphAsymmErrors* statisticErrors = ...; TGraphAsymmErrors* systematicErrors = ... TGraphMultiErrors* theGraph = new TGraphMultiErrors(statisticErrors->GetN(), 2, statisticErrors->GetX(), statisticErrors->GetY(), statisticErrors->GetEXlow(), statisticErrors->GetEXhigh());; theGraph->SetDimensionEY(0, statisticErrors->GetEYlow(), statisticErrors->GetEYhigh());; theGraph->SetDimensionEY(1, systematicErrors->GetEYlow(), systematicErrors->GetEYhigh());; ```. But again I see your point since ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-516408489:875,error,errors,875,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-516408489,1,['error'],['errors']
Availability,"Thanks for you reply @couet, I see your point that it's not ideal to define an attribute that is only used by approximatly half of all available styles. The main reason I wanted to have this feature is that I realized that lines with a width of 1 can become badly visible in presentations or on posters which is why I prefer to use line width 2 as default everywhere. For the implementation via the marker styles as you propose I see basically 2 ways to implement this:; 1. At the moment we have marker styles up to 49. One could just start to redefine all existing marker styles where a linewidth makes sense from 50 upwards with a linewidth of 1, 2, 3 ...; However, I think this might become confusing if further styles are added in the future, because then there will be no logic behind the numbers and the corresponding markers, although there is not much logic behind the style numbers right now too.; 2. One could define it in a way that adding 100 to the marker style corresponds to an increase of the linewidth of 1. As an example the regular + marker with linewidth 1 would be 2, with linewidth 2 it would be 102, with linewidth 3 202 ...; I know this would be rather equal to defining a standalone linewidth attribute, but it would allow us to add up to 50 additional marker styles in the future without breaking the logic and I doubt we will have more than 100 different marker styles one day. Since you are the responsible coordinator for the graphics part of ROOT, I think this decision should be up to you. ----------------------------------------------------------------------------------------------------. Could you also comment on the differences in the drawing of markers 3, 5 (and 31) between classes inheriting from TVirtualX and classes inheriting from TVirtualPS? The following picture shows the difference for marker style 3:; ![temp](https://user-images.githubusercontent.com/5320187/72247392-11cb0980-35f5-11ea-941b-b1ef892442e6.jpg); I think the different implementations sh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-573591881:135,avail,available,135,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-573591881,1,['avail'],['available']
Availability,"Thanks for your testing.; I use `metakernel` 0.27.0 and `python` 3.8.5. I also tried `metakernel` 0.24.4.; For your suggested steps; `jupyter kernelspec list` ; says; ` root ~/root/etc/notebook/kernels/root`. With the manual installation I get a different error but the result is the same; ```; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; LC_ALL=C x86_64-linux-gnu-g++-9 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++; /p' -e '}'; Results was:; With exit code 0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6608#issuecomment-709429204:256,error,error,256,https://root.cern,https://github.com/root-project/root/issues/6608#issuecomment-709429204,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,Thanks so much @pcanal !. It was an error in my code. I fixed it :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5283#issuecomment-608626339:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/5283#issuecomment-608626339,1,['error'],['error']
Availability,"Thanks so much. I checked it, it works great, I saw just a couple of issues:; - If I go all the way down to the last entry, I need press twice 'up' key to go the second entry. Probably, some issue between index 0 and index 1.; - Maybe, index 0 should correspond to the 'empty' comannd line window, or whatever the user had typed in the beginning before pressing the arrows. For example, ` if (te) { fCommand->SetText(te->GetText()->GetString()); } else { fCommand->SetText(temporaryString); }`, where temporaryString was whatever was in the TGTextEntry before scrolling in the history. Maybe `const char *string = fCommandBuf->GetString();` ?; - The ROOT history is still not saved even if I call `plugin->SetHistAdd();` which means that somehow `Gl_histadd((char *)string);` is not working in a standalone CMake TApplication?. Thanks for the excellent support.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7180#issuecomment-779778438:100,down,down,100,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-779778438,1,['down'],['down']
Availability,"Thanks to a very productive exchange with @bellenot I think I now understand the situation much better. We need Python during the build, for example to build the pch file. That does not automatically imply that a user specifying a certain Python version via the `-DPYTHON_EXECUTABLE` Cmake option also needs PYROOT. I am closing the issue as clarified. Should more information become available, we can always re-open.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8095#issuecomment-1925314142:384,avail,available,384,https://root.cern,https://github.com/root-project/root/issues/8095#issuecomment-1925314142,1,['avail'],['available']
Availability,Thanks you for providing the patch.; The proposed change looks OK to me (removal of those two header files).; The test failures do not seem related to this patch.; I'll make a few additional cross checks and then I'll merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1861#issuecomment-381672320:119,failure,failures,119,https://root.cern,https://github.com/root-project/root/pull/1861#issuecomment-381672320,1,['failure'],['failures']
Availability,"Thanks! I think if not including `RConfig.h` would cause a problem, I think we'd have some compiler errors here. If some problems unexpectedly pop up later, we can probably find them easily and fix them in a followup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10231#issuecomment-1090239424:100,error,errors,100,https://root.cern,https://github.com/root-project/root/pull/10231#issuecomment-1090239424,1,['error'],['errors']
Availability,Thanks! Is there a page explaining the dependencies? I tried and I get this error:; `ImportError: No module named nbformat`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-910349680:76,error,error,76,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910349680,1,['error'],['error']
Availability,"Thanks! It looks as if with the new fix, they introduced a new problem https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText:. ```; Error in line 1: Opening and ending tag mismatch.; error: failed to run qhelpgenerator on index.qhp; ```. Could you share again the qhp file with me so that I can take a look ? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9649#issuecomment-1021998628:179,Error,Error,179,https://root.cern,https://github.com/root-project/root/pull/9649#issuecomment-1021998628,2,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10796#issuecomment-1162739243:187,error,errors,187,https://root.cern,https://github.com/root-project/root/pull/10796#issuecomment-1162739243,1,['error'],['errors']
Availability,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:; ```; warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. ; use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");; Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian; *** Break *** segmentation violation; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14993#issuecomment-2004737253:618,Error,Error,618,https://root.cern,https://github.com/root-project/root/pull/14993#issuecomment-2004737253,1,['Error'],['Error']
Availability,Thanks!. FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):; ```; 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o; 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o ; 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13571#issuecomment-1700410866:43,error,errors,43,https://root.cern,https://github.com/root-project/root/pull/13571#issuecomment-1700410866,1,['error'],['errors']
Availability,Thanks!. It seems we are getting now a different kind of error on the jenkins master log:; ```; PatchinError in line 1: Premature end of document.; error: failed to run qhelpgenerator on index.qhp; g output file 29883/29885; Patching output file 29884/29885; Patching output file 29885/29885; Running qhelpgenerator...; lookup cache used 484195/1048576 hits=9429473 misses=518740; finished...; ```. Could you share the index.qhp file to take a closer look? Maybe it's a multithreading issue?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1018306859:57,error,error,57,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1018306859,2,['error'],['error']
Availability,"Thanks!; You can disable a specific error by adding a comment on the relevante line, e.g.; `HackyCode = xyz;// NOLINT(cert-err58-cpp)`. See https://stackoverflow.com/questions/37950439/inline-way-to-disable-clang-tidy-checks; https://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412#issuecomment-794182724:36,error,error,36,https://root.cern,https://github.com/root-project/root/issues/7412#issuecomment-794182724,1,['error'],['error']
Availability,"Thanks!; ```; -bash-4.2$ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/setup.sh; which root; -bash-4.2$ which root; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/bin/root; -bash-4.2$ python -c 'from PyCool import cool; cool.FieldSelection'; cling::DynamicLibraryManager::loadLibrary(): liblcg_CoralBase.so: cannot open shared object file: No such file or directory; In file included from input_line_26:1:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/python/PyCool/_internal/PyCool_headers_and_helpers.h:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/FolderSpecification.h:7:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/IFolderSpecification.h:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/IRecordSpecification.h:6:; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/types.h:7:10: fatal error: 'CoralBase/Blob.h' file not found; #include ""CoralBase/Blob.h""; ^~~~~~~~~~~~~~~~~~; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/python/PyCool/__init__.py"", line 25, in <module>; raise RuntimeError(""ERROR! Could not include PyCool headers""); RuntimeError: ERROR! Could not include PyCool headers; -bash-4.2$ client_loop: send disconnect: Broken pipe; ```. What else do I need to set up?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359#issuecomment-694246485:1141,error,error,1141,https://root.cern,https://github.com/root-project/root/issues/6359#issuecomment-694246485,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13057#issuecomment-1611048723:320,error,error,320,https://root.cern,https://github.com/root-project/root/pull/13057#issuecomment-1611048723,1,['error'],['error']
Availability,"Thanks, @will-cern ! Last thing - could you drop the commit / revert pair in this branch so I can apply this with rebase? If you prefer I can do that for you :-). (And never mind the Windows test failure - it's a bug in our infra that forces people to clone https://github.com/root-project/roottest or else that build fails...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7988#issuecomment-827411117:196,failure,failure,196,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-827411117,1,['failure'],['failure']
Availability,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5119#issuecomment-596946102:35,error,error,35,https://root.cern,https://github.com/root-project/root/pull/5119#issuecomment-596946102,1,['error'],['error']
Availability,"Thanks, I have fixed the comment in TRint. See the test failure for why this change cannot go in. Close?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1430#issuecomment-350257384:56,failure,failure,56,https://root.cern,https://github.com/root-project/root/pull/1430#issuecomment-350257384,1,['failure'],['failure']
Availability,"Thanks, I see it now.; @bellenot any idea where this error might be coming from in Windows?. `[2022-10-18T15:48:41.690Z] hudson.AbortException: script returned exit code -1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588#issuecomment-1305694455:53,error,error,53,https://root.cern,https://github.com/root-project/root/pull/11588#issuecomment-1305694455,1,['error'],['error']
Availability,"Thanks, I will see what's wrong then. This is a fresh build? Did you start up xcode once to allow it to download the macOS SDK?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1506440497:104,down,download,104,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1506440497,1,['down'],['download']
Availability,"Thanks, Vassil, I think this was the right way forward. Once people remove CXXFLAGS from their rootcling calls, then we can turn the warnings into errors. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4356#issuecomment-529081007:147,error,errors,147,https://root.cern,https://github.com/root-project/root/pull/4356#issuecomment-529081007,1,['error'],['errors']
Availability,"Thanks, good point! I also use the typed version of the `EvalBackend` parameter now, so that we would also get a compiler error if the legacy backend is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14755#issuecomment-1951674740:122,error,error,122,https://root.cern,https://github.com/root-project/root/pull/14755#issuecomment-1951674740,2,"['avail', 'error']","['available', 'error']"
Availability,"Thanks, that seems like a good workaround for the reproducer. ; But, if I understand correctly, that would require that I always include that in a python script before using that class, which seems hard. There isn't one global entry point where cppyy is loaded where I could just add this to protect every user that would possibly interact with the problematic class. . Are you aware of any examples of how to use the C++ callbacks that are mentioned on the same page? ; That could work as a more robust solution I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7179#issuecomment-778286708:497,robust,robust,497,https://root.cern,https://github.com/root-project/root/issues/7179#issuecomment-778286708,1,['robust'],['robust']
Availability,Thanks. Does Ninja show the same issue?. I'm asking all these questions because in all our builds we have never seen that error.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6366#issuecomment-694195047:122,error,error,122,https://root.cern,https://github.com/root-project/root/issues/6366#issuecomment-694195047,1,['error'],['error']
Availability,Thanks. I am able reproduce that error. I am investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2150204393:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2150204393,1,['error'],['error']
Availability,"Thanks. I do no find the .cxx, just the .pcm as a binary ; [compare_Compton3_cpp_ACLiC_dict_rdict.pcm.zip](https://github.com/root-project/root/files/5577670/compare_Compton3_cpp_ACLiC_dict_rdict.pcm.zip). See error log here:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.23/01 https://root.cern |; | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Nov 18 2020, 17:03:24 |; | From heads/master@v6-23-01-RF-binSampling-155-g2cc56b30d2 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. Processing compare_Compton3.cpp+(""XYZ_1209"",""RangePMMA"",27)...; Info in <TUnixSystem::ACLiC>: creating shared library /home/ferdym/Documents/Física/PhD/G39InVitoDosZrv/Analysis/XYZ_1209/ComptonReco/./compare_Compton3_cpp.so; In file included from /opt/root_bld/include/RConfig.h:23,; from /home/ferdym/Documents/Física/PhD/G39InVitoDosZrv/Analysis/XYZ_1209/ComptonReco/compare_Compton3_cpp_ACLiC_dict.cxx:13:; /home/ferdym/Documents/Física/PhD/G39InVitoDosZrv/Analysis/XYZ_1209/ComptonReco/compare_Compton3_cpp_ACLiC_dict.cxx:3:60: error: stray ‘\303’ in program; #define R__DICTIONARY_FILENAME dIhomedIferdymdIDocumentsdIF��sicadIPhDdIG39InVitoDosZrvdIAnalysisdIXYZ_1209dIComptonRecodIcompare_Compton3_cpp_ACLiC_dict; ^; /opt/root_bld/include/ROOT/RConfig.hxx:436:39: note: in definition of macro ‘_NAME3_’; # define _NAME3_(name1,name2,name3) name1##name2##name3; ^~~~~; /opt/root_bld/include/ROOT/RConfig.hxx:455:32: note: in expansion of macro ‘_R__JOIN3_’; # define _R__UNIQUE_DICT_(X) _R__JOIN3_(R__DICTIONARY_FILENAME,X,__LINE__); ^~~~~~~~~~; /opt/root_bld/include/ROOT/RConfig.hxx:455:43: note: in expansion of macro ‘R__DICTIONARY_FILENAME’; # define _R__UNIQUE_DICT_(X) _R__JOIN3_(R__DICTIONARY_FILENAME,X,__LINE__); ^~~~~~~~~~~~~~~~~~~~~~; /home/ferdym/Documents/Física/PhD/G39InVitoDosZrv/Analysis/XYZ_1209/Compto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6837#issuecomment-731577667:210,error,error,210,https://root.cern,https://github.com/root-project/root/issues/6837#issuecomment-731577667,1,['error'],['error']
Availability,Thanks. I get now this error:; `jupyter_client.kernelspec.NoSuchKernel: No such kernel named python2`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-910384720:23,error,error,23,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910384720,1,['error'],['error']
Availability,Thanks. To make progress towards v6.24 I will merge https://github.com/root-project/root/pull/7752 and https://github.com/root-project/root/pull/7767 - IIUC they improve the situation also for CMS (they do for ATLAS). I hope that this does not complicate finding the source of the comparison failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-811713699:292,failure,failure,292,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-811713699,1,['failure'],['failure']
Availability,"That Jenkins ""failure"" looks spurious. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9533#issuecomment-1010013619:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/9533#issuecomment-1010013619,1,['failure'],['failure']
Availability,That Windows error is just the log parser having a grep hit within the commit log :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8223#issuecomment-845923159:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/8223#issuecomment-845923159,1,['error'],['error']
Availability,"That command gives me errors:; ```; $ voms-proxy-init; No credentials found!; ```; outside of Singularity and inside:; ```; Singularity> voms-proxy-init; Unable to find user certificate or key: /afs/cern.ch/user/j/jhahnfel/.globus/usercred.p12; ```. Note that I'm not a CMS member, so maybe I'm missing some permissions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1680227618:22,error,errors,22,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1680227618,1,['error'],['errors']
Availability,That failure is unrelated / preexisting (and it might benefit from your brain's input on why it fails with `bad_alloc` - I couldn't find any reason yet).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13451#issuecomment-1685115275:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/13451#issuecomment-1685115275,1,['failure'],['failure']
Availability,That failure is unrelated to the pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5398#issuecomment-618358408:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/5398#issuecomment-618358408,1,['failure'],['failure']
Availability,"That include has been added to `libcpp_string_view.h` a while ago (see https://github.com/root-project/root/pull/8287 and backports down to 6.18). I wasn't aware we had so many string view headers, I will understand this better and include the header everywhere is needed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8513#issuecomment-866589323:132,down,down,132,https://root.cern,https://github.com/root-project/root/issues/8513#issuecomment-866589323,1,['down'],['down']
Availability,That is just a warning I added. The real failure is due to soversion=ON on Linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3183#issuecomment-448259890:41,failure,failure,41,https://root.cern,https://github.com/root-project/root/pull/3183#issuecomment-448259890,1,['failure'],['failure']
Availability,"That is the reduced version:. ```c++; cat ../root/tutorials/hsimple.C . #include <TFile.h>; #include <TNtuple.h>; #include <TH2.h>; #include <TProfile.h>; #include <TCanvas.h>; #include <TFrame.h>; #include <TROOT.h>; #include <TSystem.h>; #include <TRandom3.h>; #include <TBenchmark.h>; #include <TInterpreter.h>. TFile *hsimple(Int_t getFile=0); {; if (!gSystem->AccessPathName("""",kFileExists)) {; }; return 0;; }; ```. I got it down to `root.exe -l -b -e 'gSystem->AccessPathName("""",kFileExists)'`. and we get:. ```; ROOT_INCLUDE_PATH=/scratch/cmsbuild/vvasilev/rootobj/include/ root.exe -l -b -q tutorials/hsimple.C ; Disabling gnu++: clang has no __float128 support on this target!; Parse symbols:; emitSection SectionID: 0 Name: .data obj addr: 0x1002151e4f8 new addr: 0x3fff8d1d0000 DataSize: 16 StubBufSize: 0 Allocate: 16; 	Type: 1 Name: _ZN5cling7runtime10gClingOptsE SID: 0 Offset: 0x8 flags: 66; 	Type: 1 Name: _ZN5cling7runtime6gClingE SID: 0 Offset: (nil) flags: 66; emitSection SectionID: 1 Name: .text obj addr: 0x1002151e440 new addr: 0x3fff8d1f0000 DataSize: 180 StubBufSize: 176 Allocate: 356; 	Type: 4 Name: at_quick_exit SID: 1 Offset: 0x68 flags: 66; 	Type: 4 Name: atexit SID: 1 Offset: 0x8 flags: 66; Parse relocations:; 	SectionID: 1; 		RelType: 44 Addend: -8 TargetName: .TOC.; 		SectionID: 1 Offset: 0; 		RelType: 10 Addend: 0 TargetName: __cxa_atexit; 		SectionID: 1 Offset: 48; Create a new stub function; 		RelType: 44 Addend: -8 TargetName: .TOC.; 		SectionID: 1 Offset: 96; 		RelType: 10 Addend: 0 TargetName: __cxa_atexit; 		SectionID: 1 Offset: 144; Stub function found; ----- Contents of section .data before relocations -----; 0x00003fff8d1d0000: b0 46 b9 20 00 01 00 00 44 48 b9 20 00 01 00 00; ----- Contents of section .text before relocations -----; 0x00003fff8d1f0000: 00 00 00 00 00 00 00 00 f8 ff 4c e8 14 62 42 7c; 0x00003fff8d1f0010: a6 02 08 7c 10 00 01 f8 e1 ff 21 f8 00 01 80 38; 0x00003fff8d1f0020: c6 07 84 78 b9 20 84 64 b0 46 85 60 00 00 80 38; 0x00",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-981977924:431,down,down,431,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-981977924,1,['down'],['down']
Availability,"That last error is caused by the code looking for a json file and using `__file__` to get the directory where the python script is stored, because that's where the json file is also stored. And `__file__` does not exist in the notebook",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1106187497:10,error,error,10,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1106187497,1,['error'],['error']
Availability,That should fix a recent nightly failure with gcc11,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276:33,failure,failure,33,https://root.cern,https://github.com/root-project/root/pull/12276,1,['failure'],['failure']
Availability,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396463790:366,down,downstream,366,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790,2,['down'],['downstream']
Availability,"That's all there is, which is confusing! here are 2 zip files with all the log files in the builds; [ROOT_v6-28-12-XROOT-error.zip](https://github.com/root-project/root/files/14137175/ROOT_v6-28-12-XROOT-error.zip); [ROOT-v6-26-10-TBB-error.zip](https://github.com/root-project/root/files/14137176/ROOT-v6-26-10-TBB-error.zip)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14520#issuecomment-1923295193:121,error,error,121,https://root.cern,https://github.com/root-project/root/issues/14520#issuecomment-1923295193,4,['error'],['error']
Availability,That's fixing the CMS preprocessor / duplicate definition errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1403#issuecomment-348166225:58,error,errors,58,https://root.cern,https://github.com/root-project/root/pull/1403#issuecomment-348166225,1,['error'],['errors']
Availability,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526#issuecomment-702072629:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629,2,['error'],['error']
Availability,That's what c++ does. I never understood why this warning is not a error. Cling can promote this warning into an error though...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15537#issuecomment-2116934538:67,error,error,67,https://root.cern,https://github.com/root-project/root/issues/15537#issuecomment-2116934538,2,['error'],['error']
Availability,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:10,Error,Error,10,https://root.cern,https://github.com/root-project/root/pull/13646,4,['Error'],['Error']
Availability,The 'failure' is:; ```; 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4266#issuecomment-524043091:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/4266#issuecomment-524043091,1,['failure'],['failure']
Availability,"The 'succeed' job seems to get to:. ```; [2020-12-18 14:29:25.905501 +0000][Debug ][XRootDTransport ] [xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request, username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&xrd.info=&xrd.hostname=tatls002-2188754.0-lcg2453.gridpp.rl.ac.uk&xrd.rn=v4.10.0, dual-stack: false, private IPv4: true, private IPv6: false; ```. but the failed ends before this point. I can upload the files of these two logs, if it would help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-749432504:110,echo,echo,110,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-749432504,1,['echo'],['echo']
Availability,The 2 failure seems unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2807#issuecomment-431284336:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/2807#issuecomment-431284336,1,['failure'],['failure']
Availability,The 2 failures are pre-exisiting (Mac-Beta due to XCode upgrade and TMapFile random behavior).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16202#issuecomment-2284525091:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/16202#issuecomment-2284525091,1,['failure'],['failures']
Availability,The 2 sets of failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7094#issuecomment-785504463:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/7094#issuecomment-785504463,1,['failure'],['failures']
Availability,"The 32 bit build seems stall. I do not expect any failures as there is no cuda there, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4588#issuecomment-547370087:50,failure,failures,50,https://root.cern,https://github.com/root-project/root/pull/4588#issuecomment-547370087,1,['failure'],['failures']
Availability,The 32bit projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec failure looks real?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-879707415:74,failure,failure,74,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-879707415,1,['failure'],['failure']
Availability,"The AddressSanitizer build seems quite unhappy about this: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/1037/console. Also we have lots of failures in `treetreeplayertestUnit` since this merge... (cc @Axel-Naumann; I believe this change also went into 6.28, which could / should potentially block the release)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11908#issuecomment-1399947341:191,failure,failures,191,https://root.cern,https://github.com/root-project/root/pull/11908#issuecomment-1399947341,1,['failure'],['failures']
Availability,"The CI build error detection logic is not very clever.; I quoted the error the PR is fixing in the git commit message.; The CI build puts the commit message from the PR in the CI build log.; Then scans the log for errors and tags the quoted error in the commit message as a failure...; The log actually says: 100% tests passed, 0 tests failed out of 1120",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366#issuecomment-856589322:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/8366#issuecomment-856589322,5,"['error', 'failure']","['error', 'errors', 'failure']"
Availability,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11104#issuecomment-1204387911:30,error,errors,30,https://root.cern,https://github.com/root-project/root/pull/11104#issuecomment-1204387911,1,['error'],['errors']
Availability,The CI failure is unrelated to this commit. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11094#issuecomment-1203873391:7,failure,failure,7,https://root.cern,https://github.com/root-project/root/pull/11094#issuecomment-1203873391,1,['failure'],['failure']
Availability,"The CI failures are unrelated to this PR. You can find them also in other PRs, for example https://github.com/root-project/root/pull/9601.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9444#issuecomment-1016472365:7,failure,failures,7,https://root.cern,https://github.com/root-project/root/pull/9444#issuecomment-1016472365,1,['failure'],['failures']
Availability,"The CI pages are hanging when I try to check what went wrong, @Axel-Naumann are the errors seen above expected? I don't think my change is causing them. I could see the error on a Windows build:; ```; The following tests FAILED:; 19998; 	274 - test-stressmathmore-interpreted (Failed); ```. Other Windows build:; ```; The following tests FAILED:; 19541; 	276 - test-stressmathmore-interpreted (Failed); 19542; 	403 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12528#issuecomment-1547499633:84,error,errors,84,https://root.cern,https://github.com/root-project/root/pull/12528#issuecomment-1547499633,2,['error'],"['error', 'errors']"
Availability,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13739#issuecomment-1741000952:40,failure,failures,40,https://root.cern,https://github.com/root-project/root/pull/13739#issuecomment-1741000952,1,['failure'],['failures']
Availability,"The CI warnings and error are not related to the changes in this PR. They seem to be related to the external dependencies TBB, CFITSIO, and GSL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9157#issuecomment-948684699:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/9157#issuecomment-948684699,1,['error'],['error']
Availability,"The CMAKE_OSX_SYSROOT exports the exact version of the sdk which we build against. However, this means that binary releases become sensitive to minor sdk upgrades (eg. MacOSX11.1.sdk -> MacOSX11.2.sdk). Our infrastructure is relatively resilient to such changes. This patch introduces a workaround to address this issue -- it uses the fact that the current sdk's parent directory has a symlink MacOSX.sdk which points to the current sdk. This should resolve root-project/root#7021.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7625:236,resilien,resilient,236,https://root.cern,https://github.com/root-project/root/pull/7625,1,['resilien'],['resilient']
Availability,"The CMAKE_OSX_SYSROOT exports the exact version of the sdk which we build; against. However, this means that binary releases become sensitive to minor sdk; upgrades (eg. MacOSX11.1.sdk -> MacOSX11.2.sdk). Our infrastructure is; relatively resilient to such changes. This patch introduces a workaround to address this issue -- it uses the fact; that the current sdk's parent directory has a symlink MacOSX.sdk which points; to the current sdk. This should resolve root-project/root#7021.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7628:239,resilien,resilient,239,https://root.cern,https://github.com/root-project/root/pull/7628,2,['resilien'],['resilient']
Availability,"The CMake build is now much more heavily integrated with the folder structure. This has the positive side that less copying is going on, and the downside that it has to fill in the source directory with the items it needs from ROOT (they are ignored and easy to clean with `make purge`, though). Like before, you can build in place or make a redistributable source package. Only added one `.gitignore`. Haven't really touched the ROOT Minuit2 build system, though some fixes would be good there too, but that's a later PR. (Instructions have not been updated to new version yet, and not as well tested yet). I can revert to the old system if that's better. The original reason for using CMake to do the copy also was because that avoided having to write a `.sh` file, and was more portable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369603935:145,down,downside,145,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369603935,1,['down'],['downside']
Availability,"The Core module is now just called `Core`, and no longer `libCore.so`,; which leads to the confusing PCM file name `libCore.so.pcm` which is 75%; just boilerplate prefixes and suffixes. This also make the error; messages from clang more readable now as they use the same module name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/878:205,error,error,205,https://root.cern,https://github.com/root-project/root/pull/878,1,['error'],['error']
Availability,"The Debian i686 errors are due to a node upgrade, ignore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8564#issuecomment-870427298:16,error,errors,16,https://root.cern,https://github.com/root-project/root/pull/8564#issuecomment-870427298,1,['error'],['errors']
Availability,"The Failure is visible on the GCC 12 / Fedora 36 build: https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3285/LABEL=ROOT-fedora36,SPEC=default,V=master/testReport/junit/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/; for example:; ```; +Error in <TTree::Branch>: The class requested (vector<int>) for the branch ""vec"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (vector<int>) to avoid to write corrupted data.; ```; This indicates that the generation of the dictionary for `std::vector<int>` failed even-though it is explicitly requested as part of the G__Core.cxx dictionary. . And indeed when inspecting the build log we see for `G__Core.cxx`:; ```; Warning: Unused class rule: vector<Int_t> ; ```. I narrowed down the problem to the presence of:; ```; -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ; ```; on the command line. And it can easily be reproduce with the files:; ```; // a.h; #include <vector>; ```; and; ```; // aLinkDef.h ; #pragma link C++ class vector<Int_t>+;; ```; and with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx a.h aLinkDef.h; ```; we get a proper dictionary for the vector. While with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes a.h aLinkDef.h ; ```; we get an empty dictionary and the warning:. ```; Warning: Unused class rule: vector<Int_t> ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11329:4,Failure,Failure,4,https://root.cern,https://github.com/root-project/root/issues/11329,3,"['Error', 'Failure', 'down']","['Error', 'Failure', 'down']"
Availability,"The Fedora 29 failures are due to what I talked about before lunch. I think it's caused by recent changes to roottest that now pick up any installed ROOT over the one from the build directory that was configured with `-Droottest=ON`. @oshadura said she will take a look. BTW, the failures started happening because I ran `yum install root` on the Fedora 29 nodes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3971#issuecomment-502661207:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/3971#issuecomment-502661207,2,['failure'],['failures']
Availability,"The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:; ```; $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js ; [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js; 57:24:invalid property id; ```; 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it.; ```; $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js ; [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js; 509:75:missing ) after formal parameters; ```; ```; $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m; Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73; = function (divid, netobj, oldStructure=false) {; ^; SyntaxError: Unexpected token operator «=», expected punc «,»; ```; 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some portin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1520:707,ERROR,ERROR,707,https://root.cern,https://github.com/root-project/root/pull/1520,1,['ERROR'],['ERROR']
Availability,"The G__matchfilename() implements a file comparison check used; specifically for loading/unloading of the libraries and the source code.; On UNIX-like systems the basic filename comparison is supplemented an; additional file match condition is based on comparing file attributes; returned by the stat() syscall. On a typical load/unload call, the; G__matchfilename() is iterated over items of G__srcfile, which produces; a number of stat() calls that is quadratic in number of loaded files. In our specific case we observe an occasional poor performance on AFS; network filesystem. The suggested change introduces a cache for the; stat() calls that should allow to reduce the number of calls to scale; linearly. # This Pull request:. ## Changes or fixes:. Fixes downstream issue star-bnl/star-sw#115. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010:762,down,downstream,762,https://root.cern,https://github.com/root-project/root/pull/9010,1,['down'],['downstream']
Availability,"The Homebrew build is also affected:; ```; $ brew install root; ...; ==> Installing root; ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz; ...; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.26/06 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Jul 28 2022, 18:08:51 |; | From tags/v6-26-06@v6-26-06 |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();; Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled; root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }; root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);; root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);; root [4] gaus->SetParameters(1,0,1);; root [5] h1->FillRandom(""gaus1d"",10000);; root [6] auto res = h1->Fit(gaus,""L0S"");; FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL; EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE; EXT PARAMETER STEP FIRST; NO. NAME VALUE ERROR SIZE DERIVATIVE; 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05; 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03; 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01; ERR DEF= 0.5; root [7] cout << TVirtualFitter::GetFitter() << endl;; 0x0; root [8]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041#issuecomment-1595062044:1179,ERROR,ERROR,1179,https://root.cern,https://github.com/root-project/root/issues/13041#issuecomment-1595062044,2,['ERROR'],['ERROR']
Availability,"The IMT failure is infra-related, failed to download a file:; ```; Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8); Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12; ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1320#issuecomment-344192419:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/1320#issuecomment-344192419,4,"['Error', 'down', 'failure']","['Error', 'download', 'failure']"
Availability,"The IO for the tests statistics never worked anyway, not even for a simple Gaussian likelihood. It is better to exclude the old test statistics classes complete from IO. Like this, the users don't even attempt to do IO with them, and to developers it's clear that IO backwards compatibility is not necessary, taking away some maintenance burden. Here are some simple scripts to show that storing test statistics doesn't work anyway. Create a NLL object, write it of file and minimize it:; ```c++; void write(); {; using namespace RooFit;. RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. auto *data = gauss.generateBinned(x, 10000);. auto nll = gauss.createNLL(*data);. RooWorkspace ws(""ws"");; ws.import(*nll);. ws.Print();. ws.writeToFile(""ws.root"");. RooMinimizer m{*nll};; m.setPrintLevel(-1);; m.minimize(""Minuit"", ""migrad"");; auto res = m.save();. res->Print();; }; ```. Attempt to read the NLL and minimize it again:; ```c++; void open() {. auto f = TFile::Open(""ws.root"");. auto ws = f->Get<RooWorkspace>(""ws"");. ws->Print();. ws->function(""nll_gauss_genData"")->Print();. auto nll = static_cast<RooNLLVar*>(ws->function(""nll_gauss_genData""));. auto& pdf = nll->function();; auto& data = nll->data();. RooMinimizer m{*nll};; m.setPrintLevel(-1);; m.minimize(""Minuit"", ""migrad"");; auto res = m.save();. res->Print();; }; ```. The result is completely off this time. It was also confirmed with Wouter in one of the RooFit meetings that IO of the old test statistics never really worked and was also not intended to be done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11909:326,mainten,maintenance,326,https://root.cern,https://github.com/root-project/root/pull/11909,1,['mainten'],['maintenance']
Availability,"The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12046:337,recover,recover,337,https://root.cern,https://github.com/root-project/root/pull/12046,1,['recover'],['recover']
Availability,"The Jenkins ""failure"" seems to be caused by Jenkins itself; all builds succeeded. Merging to fix CMS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9951#issuecomment-1048535252:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/9951#issuecomment-1048535252,1,['failure'],['failure']
Availability,"The Jenkins failures are either pre-existing or problems with the node configurations (some of which have been fixed in the mean time), so this should be good to go. @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9342#issuecomment-983489732:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/9342#issuecomment-983489732,1,['failure'],['failures']
Availability,"The JupyROOT failure is a master branch failure unrelated to this PR. Other than that, CI passes now. I think it should be ready to merge if you have no further change requests @lmoneta.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369#issuecomment-867624476:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/8369#issuecomment-867624476,2,['failure'],['failure']
Availability,The LGTM error is unrelated to the changes in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8413#issuecomment-859545533:9,error,error,9,https://root.cern,https://github.com/root-project/root/pull/8413#issuecomment-859545533,1,['error'],['error']
Availability,The New CI failures seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200#issuecomment-1851737030:11,failure,failures,11,https://root.cern,https://github.com/root-project/root/pull/14200#issuecomment-1851737030,1,['failure'],['failures']
Availability,The PR changes modules-related code. The failure in non-modules config is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5348#issuecomment-615060761:41,failure,failure,41,https://root.cern,https://github.com/root-project/root/pull/5348#issuecomment-615060761,1,['failure'],['failure']
Availability,"The PR looks good, thanks a lot! The windows failures are unrelated. I will merge after adding corresponding tests to roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5272#issuecomment-607223231:45,failure,failures,45,https://root.cern,https://github.com/root-project/root/pull/5272#issuecomment-607223231,1,['failure'],['failures']
Availability,"The PR you are referring to had quite a lot of interactions seems to me. It is a histogram related and Lorenzo is the person to ping. Regarding this new functionality you are requesting, you produced a tool. Seems to me that's enough for now. May be @lmoneta can comment if it is something we want to be built in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10660#issuecomment-1466221183:128,ping,ping,128,https://root.cern,https://github.com/root-project/root/issues/10660#issuecomment-1466221183,1,['ping'],['ping']
Availability,"The RArrowDS in v6.16 did not support recent arrow versions.; This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5505:206,failure,failures,206,https://root.cern,https://github.com/root-project/root/pull/5505,1,['failure'],['failures']
Availability,"The RException class is supposed to serve as base class for all ROOT; exceptions. It contains an `RError` member with diagnostic information.; The `RResult<T>` class can be used as a return value of operations that; may fail. The `RResult<T>` object wraps either a valid value or an `RError`.; If an error state remains unchecked, the `RResult` class will throw an; exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4683:300,error,error,300,https://root.cern,https://github.com/root-project/root/pull/4683,1,['error'],['error']
Availability,The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10871:192,redundant,redundant,192,https://root.cern,https://github.com/root-project/root/issues/10871,1,['redundant'],['redundant']
Availability,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202#issuecomment-2074364045:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2074364045,1,['failure'],['failure']
Availability,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique); [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique); [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic); [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14064#issuecomment-1816063640:579,avail,available,579,https://root.cern,https://github.com/root-project/root/issues/14064#issuecomment-1816063640,1,['avail'],['available']
Availability,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4399#issuecomment-533575316:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/4399#issuecomment-533575316,1,['failure'],['failure']
Availability,"The ROOT-ubuntu18.04-i386 failures are ""expected"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2778#issuecomment-481977086:26,failure,failures,26,https://root.cern,https://github.com/root-project/root/pull/2778#issuecomment-481977086,1,['failure'],['failures']
Availability,"The RooAbsMinimizerFcn object is copied by the fitter, so the; `_evalCounter` of the original object will never be increased. Hence,; `RooMinimizer::evalCount()` will always return zero, which is; unexpected. To make `RooMinimizer::evalCount()` reliable again, this commit suggests; to habe a second counter variable that is a member of the `RooMinimizer`; itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10598:245,reliab,reliable,245,https://root.cern,https://github.com/root-project/root/pull/10598,1,['reliab'],['reliable']
Availability,"The RooAbsPdf version number is incremented, going with the removal of; some unused data members:. * `_rawValue`; * `_traceCount`; * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it; is only related to logging, counting the logged errors to avoid printing; errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:267,error,errors,267,https://root.cern,https://github.com/root-project/root/pull/11093,2,['error'],['errors']
Availability,"The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects.; However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas).; However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit.; With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3922:553,error,error,553,https://root.cern,https://github.com/root-project/root/pull/3922,1,['error'],['error']
Availability,"The RooFit test statistic classes give wrong results if they are; constructed from multiple comma-separated ranges. This can cause errors,; such as the one reported in Jira issue [ROOT-10038](https://sft.its.cern.ch/jira/browse/ROOT-10038). This commit suggests to throw an exception if multiple comma-separated; ranges are detected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:131,error,errors,131,https://root.cern,https://github.com/root-project/root/pull/7827,1,['error'],['errors']
Availability,"The RooFitDriver mutates the RooAbsArgs it evaluates by setting a; specific index token to quickly look up cached information for a given; RooAbsArg. Because of this, it's not possible to evaluate two computation graphs; that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is; often happens that different likelihoods based on the same model are; instantiated. The key to the solution in this commit is the insight that for each; likelihood, almost the full compute graph is cloned anyway, *except* for; the parameters. Therefore, the solution proposed in this commit is to; not set the data tokens for the parameters and not fill the data map; with their values. Instead, when querying their values, they are just; retrieved from the object itself. This is possible because parameters; are always scalar, and the RooAbsReal can already cache scalar members; in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12925:968,failure,failure,968,https://root.cern,https://github.com/root-project/root/pull/12925,1,['failure'],['failure']
Availability,"The Spark backend doesn't suffer from this issue because Spark does not try to serialize the C++ error object instance before sending it to the user. The error raised is more verbose (it includes the full Java stacktrace), but correctly reports the original C++ error:. ```; $: python test_spark.py; [...]; 22/07/27 16:51:03 ERROR Executor: Exception in task 0.0 in stage 0.0 (TID 0); org.apache.spark.api.python.PythonException: Traceback (most recent call last):; File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 112, in distrdf_mapper; mergeables = get_mergeable_values(rdf_plus.rdf, current_range.id, computation_graph_callable, optimized); File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 69, in get_mergeable_values; resultptr_list = computation_graph_callable(starting_node, range_id); File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/ComputationGraphGenerator.py"", line 219, in trigger_computation_graph; ROOT.Internal.RDF.TriggerRun(rnode); cppyy.gbl.std.runtime_error: void ROOT::Internal::RDF::TriggerRun(ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase,void>& node) =>; runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/worker.py"", line 619, in main; process(); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/worker.py"", line 611, in process; serializer.dump_stream(out_iter, outfile); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/serializers.py"", line 259, in dump_stream; vs = list(itertools.islice(iterator, batch)); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pysp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11050#issuecomment-1196878051:97,error,error,97,https://root.cern,https://github.com/root-project/root/issues/11050#issuecomment-1196878051,4,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"The TBB directory comes apparently from http://threadingbuildingblocks.org wanted confirmation by means of a telephone number. Wouldn't it anyway be good to provide http://threadingbuildingblocks.org and on my build directory I see down in the tar file in TBB-prefix that there is a vs2013 directory and nothing newer. So I probably have to see what I can do with the license without providing telephone numbers and alike ... Just as a side note:; On the page: https://software.intel.com/content/www/us/en/develop/articles/intel-oneapi-threading-building-blocks-system-requirements.html I see that there are newer (source) versions which also support: Microsoft* Visual C++ 14.2 (Microsoft* Visual Studio* 2019, Windows* OS only) so maybe there is a distribution yjat you could use as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887783565:232,down,down,232,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887783565,1,['down'],['down']
Availability,"The TChain::Add() documentation says. `Wildcard treatment is triggered by any of the special characters: []*? which may be used in the file name`. While `[]` and `*` work, I have found that `?` does not. Consider a script `chTest.C` containing the following:; `{` ; ` TChain* ch = new TChain(""ch"", ""ch"");`; ` ch->Add(""file?.root"");`; ` ch->GetEntry(0);`; `}`. Then run the following lines at the terminal:; ` % touch file1.root`; ` % touch file1.root`; ` % root chtest.C`. The output is:; `root [0]`; `Processing chtest.C...`; `Error in <TFile::TFile>: file /Users/jasondet/Work/Coding/chtest/file does not exist`. Replacing the line `ch->Add(""file?.root"");` with `ch->Add(""file*.root"");` or `ch->Add(""file[12].root"");` gives expected file read errors, indicating that those wildcards are working correctly. I'm using:; ` % root --version`; `ROOT Version: 6.26/00`; `Built for macosx64 on Mar 03 2022, 06:51:13`; `From tags/v6-26-00@v6-26-00`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10239:528,Error,Error,528,https://root.cern,https://github.com/root-project/root/issues/10239,2,"['Error', 'error']","['Error', 'errors']"
Availability,"The TFile objects need to be closed before the ROOT files can be; deleted. Otherwise, we get errors such as these on Windows 10:. ```; Traceback (most recent call last):; File ""C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/pyroot/pyroot006_tcontext_context_manager.py"", line 56, in <module>; os.remove(""pyroot006_file_{}.root"".format(i)); PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pyroot006_file_1.root'; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_pyroot_pyroot006_tcontext_context_manager_py/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10378:93,error,errors,93,https://root.cern,https://github.com/root-project/root/pull/10378,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"The TGVSlider class supports mouse wheel scroll on Linux. Does it also work on Windows?. If yes, then I guess the differences are here:. https://github.com/root-project/root/blob/master/gui/gui/src/TGSlider.cxx#L141; --> they use the different mask of my previous post.; https://github.com/root-project/root/blob/master/gui/gui/src/TGSlider.cxx#L213; --> Here they do not check for button-press type (which is ok for Linux, but maybe not for Windows)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7272#issuecomment-784421062:244,mask,mask,244,https://root.cern,https://github.com/root-project/root/pull/7272#issuecomment-784421062,1,['mask'],['mask']
Availability,"The TestData target is currently declared ALL, which means it is always executed during the build.; However, the data it downloads is only used for running the stressProof test, so if this test is not run the downloaded data files are not needed. By removing the TestData target from ALL and making it a requirement of the test-stressproof target instead, the files are only downloaded if they are needed. Disabling the stressProof test now also disables the download of the data files. This is important when building in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/402:121,down,downloads,121,https://root.cern,https://github.com/root-project/root/pull/402,4,['down'],"['download', 'downloaded', 'downloads']"
Availability,The Travis parse failures are a bit worrisome... I'll merge nonetheless :smiling_imp: We can revert if this fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5618#issuecomment-635544956:17,failure,failures,17,https://root.cern,https://github.com/root-project/root/pull/5618#issuecomment-635544956,1,['failure'],['failures']
Availability,"The Vavilov test fails on 32 bit ix86 in Fedora 29. Testing Cdf and Cdf_c; kappa = 0.01; Max abs diff: 1.2e-07, max rel diff: 1.9e-05, max diff cdf+cdf_c-1: 6.2e-15, pass=0; kappa = 0.04; Max abs diff: 1.4e-07, max rel diff: 1.9e-05, max diff cdf+cdf_c-1: 1.1e-15, pass=1; kappa = 0.07; Max abs diff: 2.5e-06, max rel diff: 0.061, max diff cdf+cdf_c-1: 1.6e-15, pass=1; kappa = 0.1; Max abs diff: 6.1e-06, max rel diff: 0.038, max diff cdf+cdf_c-1: 6.7e-16, pass=1; kappa = 0.4; Max abs diff: 1.7e-06, max rel diff: 0.018, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 0.7; Max abs diff: 2.5e-06, max rel diff: 0.0092, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 1; Max abs diff: 1.9e-06, max rel diff: 0.0072, max diff cdf+cdf_c-1: 4.4e-16, pass=1; kappa = 4; Max abs diff: 2e-06, max rel diff: 0.15, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 7; Max abs diff: 1.7e-06, max rel diff: 0.026, max diff cdf+cdf_c-1: 4.4e-16, pass=1; kappa = 10; Max abs diff: 2.2e-06, max rel diff: 0.033, max diff cdf+cdf_c-1: 2.2e-16, pass=1; Number of failed tests: 1. This PR changes the allowed error from 5e-15 to 7e-15, allowing the 6.2e-15 result to pass. The test does not fail on Fedora 28 which uses the same compiler (gcc 8.1.1). The default compiler flags for ix86 have changed between Fedora 28 and 29 though, and the following flags were added: -msse2 -mfpmath=sse -mstackrealign. The -msse2 flag is my guess for the cause of the difference.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2273:1089,error,error,1089,https://root.cern,https://github.com/root-project/root/pull/2273,1,['error'],['error']
Availability,"The Windows ""failure"" seems spurious:; ```; 18:21:16 Build failed because:; [Pipeline] echo; 18:21:16 hudson.AbortException: script returned exit code -1; ```; even though all tests have passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12045#issuecomment-1396537983:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/12045#issuecomment-1396537983,2,"['echo', 'failure']","['echo', 'failure']"
Availability,"The Windows build seems to need some fixes after the rename of TVec -> RVec:; ```; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2039: 'Detail': is not a member of 'ROOT::VecOps::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2039: 'VecOps': is not a member of 'ROOT::VecOps::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C3083: 'Detail': the symbol to the left of a '::' must be a type [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C3083: 'VecOps': the symbol to the left of a '::' must be a type [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2039: 'RAdoptAllocator': is not a member of 'ROOT::VecOps::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2065: 'RAdoptAllocator': undeclared identifier [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2275: 'T': illegal use of this type as an expression [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RVec.hxx(148): error C2974: 'std::vector': invalid template argument for '_Alloc', type expected [C:\build\workspace\root-pullrequests-build\build\math\vecops\ROOTVecOps.vcxproj]; 21:23:47 C:\build\workspace\ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2113#issuecomment-393417016:169,error,error,169,https://root.cern,https://github.com/root-project/root/pull/2113#issuecomment-393417016,4,['error'],['error']
Availability,"The Windows error; ```; [2022-12-13T12:03:53.345Z] clingInterpreter.lib(IncrementalJIT.obj) : error LNK2019: unresolved external symbol ""class llvm::JITEventListener * __cdecl cling::createPerfJITEventListener(void)"" (?createPerfJITEventListener@cling@@YAPAVJITEventListener@llvm@@XZ) referenced in function ""private: virtual class llvm::Expected<class std::unique_ptr<class llvm::orc::ObjectLayer,struct std::default_delete<class llvm::orc::ObjectLayer> > > __thiscall std::_Func_impl_no_alloc<class <lambda_d2417646b7f0987897d54736770e7a35>,class llvm::Expected<class std::unique_ptr<class llvm::orc::ObjectLayer,struct std::default_delete<class llvm::orc::ObjectLayer> > >,class llvm::orc::ExecutionSession &,class llvm::Triple const &>::_Do_call(class llvm::orc::ExecutionSession &,class llvm::Triple const &)"" (?_Do_call@?$_Func_impl_no_alloc@V<lambda_d2417646b7f0987897d54736770e7a35>@@V?$Expected@V?$unique_ptr@VObjectLayer@orc@llvm@@U?$default_delete@VObjectLayer@orc@llvm@@@std@@@std@@@llvm@@AAVExecutionSession@orc@3@ABVTriple@3@@std@@EAE?AV?$Expected@V?$unique_ptr@VObjectLayer@orc@llvm@@U?$default_delete@VObjectLayer@orc@llvm@@@std@@@std@@@llvm@@AAVExecutionSession@orc@4@ABVTriple@4@@Z) [C:\build\workspace\root-pullrequests-build\build\core\rootcling_stage1\rootcling_stage1.vcxproj]. [2022-12-13T12:03:53.345Z] C:\build\workspace\root-pullrequests-build\build\bin\rootcling_stage1.exe : fatal error LNK1120: 1 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\rootcling_stage1\rootcling_stage1.vcxproj]; ```; seems both real and unnecessary :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882#issuecomment-1348615087:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/11882#issuecomment-1348615087,3,['error'],['error']
Availability,"The Windows failure is unrelated, merging. Thanks again @bendavid !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-827715191:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-827715191,1,['failure'],['failure']
Availability,"The Windows failures are unrelated, it's the know problem with the compiler that can run out of heap space.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12928#issuecomment-1571706452:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/12928#issuecomment-1571706452,1,['failure'],['failures']
Availability,The Windows failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16067#issuecomment-2239123290:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/16067#issuecomment-2239123290,1,['failure'],['failures']
Availability,The Windows failures on the climate tutorials is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7253#issuecomment-785246944:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/7253#issuecomment-785246944,1,['failure'],['failures']
Availability,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13057#issuecomment-1611051341:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/13057#issuecomment-1611051341,1,['failure'],['failures']
Availability,"The [TDirectory::WriteObject](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/core/base/inc/TDirectory.h#L265-L268) method allows writing objects to files. If the written object actually has a title, this should be discarded because the function doesn't manage it as a TObject-derived instance on purpose. For example, the program below:. ```cpp; int main(){; TFile f{""myfile.root"",""recreate""};; TH1F h{""myhistoname"",""myhistotitle"",100,0,100};; f.WriteObject(&h, h.GetName());; f.Close();; }; ```. When executed creates a file where the object ""h"" gets the default title ""object title"":. ```bash; $ rootls -l myfile.root; TH1F Aug 21 10:41 2021 myhistoname;1 ""object title""; ```. This is because The [TKey constructor that accepts a void pointer](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/io/io/src/TKey.cxx#L299-L300) calls the parent TNamed constructor with a default title, because in general there is no guarantee the object has the interface `GetTitle(),SetTitle()` and there is no extra ""title"" parameter to the constructor. This commit provides a solution by creating a new overload for `TDirectory::WriteObject`, using SFINAE to make it available for types that are derived from TObject. The method redirects to `WriteTObject` instead of `WriteObjectAny`. This way, the correct TKey constructor is called that uses the actual object title. As a result, the example above will now output a file like this:. ```; $ rootls -l myfile.root; TH1F Aug 21 11:00 2021 myhistoname;1 ""myhistotitle""; ```. The already present method is modified with SFINAE as well, to only be available if the type T of the template is not derived from TObject.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8934:1221,avail,available,1221,https://root.cern,https://github.com/root-project/root/pull/8934,2,['avail'],['available']
Availability,The [error](https://github.com/root-project/root/pull/14930#issuecomment-1992256961) is real and likely serious.; Its error symptoms:; ```; +Error in <TTreeFormula::DefinedVariable>: m_signal_process_vertex is not a datamember of HepMC::GenEvent; ```; is a consequent of the earlier symptom:; ```; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenEvent is available; ```; which indicates that for some reason the system now believes that the dictionary for `HepMC::GenEvent` is available when it is not.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1992633951:5,error,error,5,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1992633951,5,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,The [test_webgui_ping](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158835/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/) failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11687#issuecomment-1312241541:165,failure,failure,165,https://root.cern,https://github.com/root-project/root/pull/11687#issuecomment-1312241541,1,['failure'],['failure']
Availability,"The `-Dall` option is for enabling all ROOT features, which should not include dedicated tests. The DistRDF tests should only be used by developers and packagers, so it's not a ""feature"" that should automatically be enabled. Also, if someone enables these tests it's clearly intentional. If the requirements for the tests are not present, there should therefore be a configuration failure, no matter if `fail-on-missing` is enabled or not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15464:381,failure,failure,381,https://root.cern,https://github.com/root-project/root/pull/15464,1,['failure'],['failure']
Availability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16314:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/16314,2,"['avail', 'down']","['available', 'down']"
Availability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. (cherry picked from commit fd97311519a5d64f0110686db46e0d912503751c, backport of https://github.com/root-project/root/pull/16314)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16318:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/16318,2,"['avail', 'down']","['available', 'down']"
Availability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. This differs from commit fd97311519a5d64f0110686db46e0d912503751c in master because LLVM doesn't support passing move-only lambdas. ---. This aims to backport https://github.com/root-project/root/pull/16314, but it's a bit more complicated with LLVM 13. We need to decide if we want this or just leave v6.30 and v6.28 alone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16319:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/16319,2,"['avail', 'down']","['available', 'down']"
Availability,"The `ClingMMapper` must remain available until all `ClingMemoryManagers` are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. This differs from commit fd97311519a5d64f0110686db46e0d912503751c in master because LLVM doesn't support passing move-only lambdas. (cherry picked from commit 41cbd5bafaf5037f52dec9864fc01d500d54578f, backport of https://github.com/root-project/root/pull/16314 / https://github.com/root-project/root/pull/16319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16387:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/16387,2,"['avail', 'down']","['available', 'down']"
Availability,"The `DataFormats/Histograms` dictionary generation fails with assertion failure; ```; rootcling: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/cling/lib/Utils/AST.cpp:1561: clang::NestedNameSpecifier* cling::utils::CreateNestedNameSpecifierForScopeOf(const clang::ASTContext&, const clang::Decl*, bool, const clang::ClassTemplateSpecializationDecl*): Assertion `Spec && ""Cannot determine type's scope""' failed.; #0 0x00001529359d3acc llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:22; #1 0x00001529359d3ec6 PrintStackTraceSignalHandler(void*) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:641:1; #2 0x00001529359d19bd llvm::sys::RunSignalHandlers() /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:104:20; #3 0x00001529359d34fb SignalHandler(int) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1; #4 0x000015292dff2d20 __restore_rt (/lib64/libpthread.so.0+0x12d20); #5 0x000015292ccf652f raise (/lib64/libc.so.6+0x4e52f); #6 0x000015292ccc9e65 abort (/lib64/libc.so.6+0x21e65); #7 0x000015292ccc9d39 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d39); #8 0x000015292cceee86 (/lib64/libc.so.6+0x46e86); #9 0x000015292f2f3d10 cling::utils::CreateNestedNameSpecifierForScopeOf(clang::ASTContext const&, clang::De",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332005936:72,failure,failure,72,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332005936,1,['failure'],['failure']
Availability,The `DataFormats/Histograms` failure seems to occur when the `rootcling` is processing [`MEtoEDM<double>::MEtoEDMObject`](https://github.com/cms-sw/cmssw/blob/CMSSW_14_2_X_2024-09-03-2300/DataFormats/Histograms/src/classes_def.xml#L47),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332092438:29,failure,failure,29,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332092438,1,['failure'],['failure']
Availability,"The `FlexibleInterpVar` and the `PiecewiseInterpolation` classes in; HistFactory can both interpolate asymmetric up-and-down variations; between the +/- one standard deviation such that both the first and; second derivatives of the scale factors are smooth. The `PiecewiseInterpolation` class is more general, because instead of; taking constant interpolation parameters, it takes other `RooAbsReals`.; That means it makes no sense for that class to cache the polynomial; coefficients that have to re recomputed anyway each time the input; changes. It uses an optimized formula to do the interpolation on the; fly. The `FlexibleInterpVar` however precomputes and caches the polynomial; coefficients. This has serveral disadvantages:. * High cost in memory (the big ATLAS models can have thousands of; `FlexibleInterpVars`. * It's inconsistent with the `PiecewiseInterpolation`, which should be; equivalent. * Most importantly, and this was the motivation for this PR now:; when we do the code generation for AD, we can't pre-compute cached; coefficients because it would bloat the generated code with constant; arrays. Computing on the fly is much more AD-friendly. Validation of the new `FlexibleInterpVar` values for `low=0.9` and; `high=1.2` that shows the interpolated values are agreeing to the 5e-4; level. This is completely accepatable for such an ad-hoc polynomial; motivation, where the shape is not given by any physical meaning anyway; but just by the continuity condition at the boundaries. And at the; boundaries (and `param=0`), the difference between both implementations; goes to zero. It was also checked that this change has no performance; effect on fitting the full ATLAS Higgs combination modes. ```txt; param ref new diff_abs diff_rel; 0 -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00; 1 -0.95 0.9047424331 0.9047437816 0.0000013485 1.49E-06; 2 -0.85 0.9140836603 0.9141118876 0.0000282273 3.09E-05; 3 -0.75 0.9230659064 0.9231653329 0.0000994265 1.08E-04; 4 -0.65 0.9317",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13067:120,down,down,120,https://root.cern,https://github.com/root-project/root/pull/13067,1,['down'],['down']
Availability,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:; https://github.com/jupyter/notebook/pull/4139; Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4497#issuecomment-547770609:27,failure,failure,27,https://root.cern,https://github.com/root-project/root/pull/4497#issuecomment-547770609,1,['failure'],['failure']
Availability,"The `RPyROOTApplication` is a `TApplication` that sets up the nuts and bolts for interactive ROOT use from Python, closely following `TRint`. This PR adds the basic behaviour for `TApplication` implemented in C++, i.e. parsing of arguments, configuration of some ROOT globals and setup of an error message handler that is able to translate ROOT warnings into Python warnings. The custom parsing of arguments can be disabled by the user by specifying a configuration option after importing ROOT:; ```python; import ROOT; ROOT.PyConfig.IgnoreCommandLineOptions = True; ```. Moreover, this PR also brings in some logic that is located in `ROOT.py` in the current PyROOT. Such logic makes it possible to use ROOT interactive graphics from Python. The graphics are activated only if the batch mode is off, and they are configured by means of hooks: no thread is explicitly created to process the GUI events as before. The batch mode can be activated by doing:; ```python; import ROOT; ROOT.gROOT.SetBatch(True); ```; or in the command line:; ```bash; > python my_script.py -b; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3731:292,error,error,292,https://root.cern,https://github.com/root-project/root/pull/3731,1,['error'],['error']
Availability,"The `R__ALWAYS_INLINE` macro was introduced by commit b7c9be5 in TBufferJSON. However, it breaks the build with GCC and the `-Og` flag, for debug-compatible optimizations:. ```txt; In member function ‘void TBufferJSON::JsonWriteFastArray(const T*, Int_t, const char*, void (TBufferJSON::*)(const T*, Int_t, const char*)) [with T = bool]’,; inlined from ‘virtual void TBufferJSON::WriteFastArray(const Bool_t*, Int_t)’ at /home/rembserj/spaces/master-debug/root/src/root/io/io/src/TBufferJSON.cxx:3296:22:; /home/rembserj/spaces/master-debug/root/src/root/io/io/src/TBufferJSON.cxx:3034:23: error: inlining failed in call to ‘always_inline’ ‘void TBufferJSON::JsonWriteArrayCompress(const T*, Int_t, const char*) [with T = bool]’: function not considered for inlining; 3034 | R__ALWAYS_INLINE void TBufferJSON::JsonWriteArrayCompress(const T *vname, Int_t arrsize, const char *typname); ```. Libraries other than ROOT have also encountered similar problems: https://github.com/Cyan4973/xxHash/pull/804. The `R__ALWAYS_INLINE` macro is probably not necessary for these templated functions, because the compiler figures out itself whether it's worth to inline the templated functions or not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13894:590,error,error,590,https://root.cern,https://github.com/root-project/root/pull/13894,1,['error'],['error']
Availability,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1152086743:61,error,error,61,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1152086743,2,['error'],['error']
Availability,"The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are; implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users; that this should be no problem, and doing so will greatly increase the; developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9874:530,down,downcasting,530,https://root.cern,https://github.com/root-project/root/pull/9874,1,['down'],['downcasting']
Availability,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:185,redundant,redundant,185,https://root.cern,https://github.com/root-project/root/pull/11983,1,['redundant'],['redundant']
Availability,"The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:151,error,errors,151,https://root.cern,https://github.com/root-project/root/pull/10465,11,"['error', 'redundant', 'toler']","['error', 'errors', 'redundant', 'tolerance']"
Availability,"The `TestGauss` unit tests in roottest are failing with Jonas' ROOT; build (gcc 10 on Arch Linux). The failure was tracked down to a; `nullptr` dereferencing in when accessing `RunContext::spans`. The origin of the `nullptr` is in `RooVectorDataStore::getBatches`,; where the `unordered_map` with pointers to the variables is filled via; `unordered_map::emplace`. For some reason, the key becomes a nullptr; *right after emplacing* ([link to code](https://github.com/root-project/root/blob/https://github.com/root-project/root/blob/9296e5ed912b3010456fa4b50db77f2c4c97a09a/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345)). For some other reason, wrapping the `RooAbsReal const*` pointer in a; struct that is used as the key for `RunContext::spans` solves the; problem. This is implemented in this commit. This PR is more of a draft PR for now, because before merging I would really like to understand what's going on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8590:103,failure,failure,103,https://root.cern,https://github.com/root-project/root/pull/8590,2,"['down', 'failure']","['down', 'failure']"
Availability,The `bits/utility` compilation error has been fixed in latest master by @hahnjo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518#issuecomment-1118878202:31,error,error,31,https://root.cern,https://github.com/root-project/root/issues/10518#issuecomment-1118878202,1,['error'],['error']
Availability,"The `c++ --print-file-name` command now seems to work, and it is indeed the more appropriate way to get the location of the asan shared library on MacOS. Also fix the following problems occurring when building on MacOS with -Dasan=ON. Error:; ```; CMake Error at cmake/modules/CheckAtomic.cmake:59 (message):; Host compiler appears to require libatomic, but cannot find it.; ```; Fix: fix typos in asan symbols (extra `_`) and specify correct linker flag (-U). Error:; ```; error: static AddressSanitizer runtime is not supported on darwin; ```; Fix: remove `-static-libsan` flag. This is required by latest MacOS Xcode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16499:235,Error,Error,235,https://root.cern,https://github.com/root-project/root/pull/16499,4,"['Error', 'error']","['Error', 'error']"
Availability,The `cling::CIFactory` error you get it when opening the ROOT C++ kernel from Jupyter?. @stwunsch could you please try if you can reproduce this on arch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6608#issuecomment-709936639:23,error,error,23,https://root.cern,https://github.com/root-project/root/issues/6608#issuecomment-709936639,1,['error'],['error']
Availability,"The `computeCategoryOldStyle` function in the RooMultiCategory class; gave wrong results in case the multi-category uses categories where the; ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for; assertions in debug mode, this caused unnecessary assertion failures as; reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in; `RooMultiCategory::evaluate()` clearly demonstrated that the old-style; implementation is wrong. As the new implementation is already tested for a few releases now, the; most sustainable way to fix the wrong assertion failure is to simply; remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated; `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that; deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11117:333,failure,failures,333,https://root.cern,https://github.com/root-project/root/pull/11117,2,['failure'],"['failure', 'failures']"
Availability,"The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4019:51,avail,available,51,https://root.cern,https://github.com/root-project/root/pull/4019,1,['avail'],['available']
Availability,"The `dnn_cuda` library is only an intermediate library that is not meant to be installed with ROOT, so it needs to be static since TMVA needs to export its dependencies and if this library is shared; the dependency won't be there after a `make install'. Therefore the error in CMake:. ```; CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""TMVA"" which requires target ""dnn_cuda"" that is not in the export set.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3066:268,error,error,268,https://root.cern,https://github.com/root-project/root/pull/3066,2,"['Error', 'error']","['Error', 'error']"
Availability,"The `gMainDict` should be borrowed, i.e. we are not calling Py_INCREF(gMainDict). Like this, we avoid unexpectedly affecting how long `__main__` is kept alive. The `gMainDict` is only used in `Exec()`, `ExecScript()`, and `Eval()`, which should not be called after `__main__` is garbage collected anyway. Closes #16402. Needs to be backported to 6.32. Equivalent CPyCppyy PR:; https://github.com/wlav/CPyCppyy/pull/37",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:153,alive,alive,153,https://root.cern,https://github.com/root-project/root/pull/16403,1,['alive'],['alive']
Availability,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/740,1,['error'],['error']
Availability,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors. Cherry-pick conflicts:; 	tree/treeplayer/inc/ROOT/TDFNodes.hxx; 	tree/treeplayer/src/TDFNodes.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/743:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/743,1,['error'],['error']
Availability,"The `numpy` failures are because of `np.bool` and `np.object` (missing backports), `roottest_root_treeformula_schemaEvolution_make` very likely fails because of https://github.com/root-project/root/commit/e48ba0494b8f26b8b30a3b758eba47f8295768ed but not having the proper commit backported to `roottest`, and `mac12arm` is unhappy about newer `libc++` headers that were updated in the meanwhile...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14626#issuecomment-1933834029:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/14626#issuecomment-1933834029,1,['failure'],['failures']
Availability,"The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12857:241,failure,failures,241,https://root.cern,https://github.com/root-project/root/pull/12857,1,['failure'],['failures']
Availability,"The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13617:54,error,errors,54,https://root.cern,https://github.com/root-project/root/pull/13617,1,['error'],['errors']
Availability,"The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via; `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:; https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12696:136,error,error,136,https://root.cern,https://github.com/root-project/root/pull/12696,1,['error'],['error']
Availability,The `roottest-root-roofitstats-RooDataSet_ASCII_out_WILL_FAIL` failures on Windows are known and will be fixed soon (a PR is there already),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14628#issuecomment-1936130583:63,failure,failures,63,https://root.cern,https://github.com/root-project/root/pull/14628#issuecomment-1936130583,1,['failure'],['failures']
Availability,"The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list; ```; Fatal: rule->GetTarget() != nullptr violated at line 1006 of; `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'; aborting; ```; Therefore, in principle we should also allow these rules for now. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049:195,error,error,195,https://root.cern,https://github.com/root-project/root/pull/12049,1,['error'],['error']
Availability,"The above centos8 failure is not related to this PR. The Windows failure is expected (roofit_multiprocess=ON is not supported on Windows). Other CI runs were successful:; ![Schermafbeelding 2021-12-20 om 20 40 21](https://user-images.githubusercontent.com/6146598/146823280-f0257eba-8dc3-4f22-b83b-f99d1d01e9a4.png). Will now do another CI run without the MultiProcess flags, just to be sure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9473#issuecomment-998217203:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/9473#issuecomment-998217203,2,['failure'],['failure']
Availability,"The above example throws an expected error in `cling`:; ```; [cling]$ auto h1 = new int(any_undeclared_variable_here);; input_line_5:2:20: error: use of undeclared identifier 'any_undeclared_variable_here'; auto h1 = new int(any_undeclared_variable_here);; ^; ```; ```; [cling]$ if(true) {auto h1 = new int(any_undeclared_variable_here);}; input_line_4:2:30: error: use of undeclared identifier 'any_undeclared_variable_here'; if(true) {auto h1 = new int(any_undeclared_variable_here);}; ^; ```. In root, the first example gives a syntax error instead (which is already wrong). This is because `ROOT` tries to resolve `any_undeclared_variable_here` at runtime:; ```; root [0] auto h1 = new int(any_undeclared_variable_here);; ROOT_prompt_0:1:1: error: Syntax error; auto h1 = new int(any_undeclared_variable_here);; ^; FunctionDecl 0x55555714b7c8 <input_line_8:1:1, ROOT_prompt_0:3:1> input_line_8:1:6 __cling_Un1Qu30 'void (void *)'; |-ParmVarDecl 0x55555714b710 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x555557161e30 <col:42, ROOT_prompt_0:3:1>; | |-DeclStmt 0x555557161e10 <line:1:1, col:48>; | | `-VarDecl 0x55555714b918 <col:1, col:47> col:6 h1 'int *':'int *' cinit; | | `-CXXNewExpr 0x555557161ce8 <col:11, col:47> 'int *' Function 0x55555714bb40 'operator new' 'void *(std::size_t)'; | | `-ParenListExpr 0x55555714bad0 <col:18, col:47> 'NULL TYPE'; | | `-DeclRefExpr 0x55555714ba90 <col:19> '<dependent type>' lvalue Var 0x55555714b988 'any_undeclared_variable_here' '<dependent type>'; | `-NullStmt 0x555557161e28 <line:2:1>; `-AnnotateAttr 0x55555714b9f0 <<invalid sloc>> Implicit R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; <<<NULL>>>; root [1] ; ```. And we get a segfault when added inside an if clause: ; ```; root [1] if(true) {auto h1 = new int(any_undeclared_variable_here);}; root.exe: /home/dvalapar/work/root/dev.bug-fixes/interpreter/llvm-project/clang/include/clang/AST/Type.h:752: const clang::ExtQualsTypeCommonBase* clang::QualType::getCommonPtr() const: As",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13252#issuecomment-2082487744:37,error,error,37,https://root.cern,https://github.com/root-project/root/issues/13252#issuecomment-2082487744,4,['error'],['error']
Availability,"The actual / underlying error is probably right before:; ```; In file included from ROOT_prompt_0:1:; In file included from /Users/ktf/src/sw/osx_arm64/boost/v1.75.0-local1/include/boost/program_options.hpp:17:; In file included from /Users/ktf/src/sw/osx_arm64/boost/v1.75.0-local1/include/boost/program_options/parsers.hpp:295:; In file included from /Users/ktf/src/sw/osx_arm64/boost/v1.75.0-local1/include/boost/program_options/detail/parsers.hpp:9:; /Users/ktf/src/sw/osx_arm64/boost/v1.75.0-local1/include/boost/program_options/detail/convert.hpp:36:55: error: reference to unresolved using declaration; const std::codecvt<wchar_t, char, std::mbstate_t>& cvt);; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cuchar:49:1: note: using declaration annotated with 'using_if_exists' here; using ::mbstate_t _LIBCPP_USING_IF_EXISTS;; ^; ```; I'm afraid that this looks more like an issue with boost than something we can address on our side. Does a stand-alone compilation of `boost/program_options.hpp` and some use of it (to force the relevant instantiations) trigger the same error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12762#issuecomment-1535795915:24,error,error,24,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535795915,3,['error'],['error']
Availability,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:758,avail,available,758,https://root.cern,https://github.com/root-project/root/pull/4171,2,['avail'],['available']
Availability,"The array interface now inferes the size of the data-type with `sizeof` by itself. This fixes [this](https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/1703/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6-i686/testReport/junit/projectroot.bindings.pyroot/test/pyunittests_pyroot_array_interface/) failure for `long` types on 32bit sytems not being 8 bytes long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925:304,failure,failure,304,https://root.cern,https://github.com/root-project/root/pull/1925,1,['failure'],['failure']
Availability,"The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5468:125,failure,failure,125,https://root.cern,https://github.com/root-project/root/pull/5468,1,['failure'],['failure']
Availability,"The assertion failure is not visible anymore (git-bisect points to commit 580fa949b0 even though that looks unrelated), so revert the change for now. This reverts commit ffe867985b715305d11e7b7adcbde9793bc9fd52.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13099:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/13099,1,['failure'],['failure']
Availability,"The backport action does not mesh well with our repository. As seen in:; ```; Warning: Your repository allows merge commits and rebase merging.; However, Backport only supports rebased and merged pull requests with a single commit and squashed and merged pull requests.; ```; and then later; ```; /usr/bin/git push --set-upstream origin backport-15408-to-v6-32-00-patches; remote: error: GH006: Protected branch update failed for refs/heads/backport-15408-to-v6-32-00-patches. ; remote: error: This branch must not contain merge commits. You're not authorized to push to this branch. Visit https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches for more information. ; To https://github.com/root-project/root.git; ! [remote rejected] backport-15408-to-v6-32-00-patches -> backport-15408-to-v6-32-00-patches (protected branch hook declined); error: failed to push some refs to 'https://github.com/root-project/root.git'; Error: Error: The process '/usr/bin/git' failed with exit code 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15388#issuecomment-2101271804:381,error,error,381,https://root.cern,https://github.com/root-project/root/pull/15388#issuecomment-2101271804,5,"['Error', 'error']","['Error', 'error']"
Availability,The bogus XML designation causes the file to fail XML diagnostic tests. Test description:; Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:; ----. Result: VERIFY; 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:; Extra content at the end of the document. Suggested Remedy:; Correct the reported errors in the XML document,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11646:508,error,errors,508,https://root.cern,https://github.com/root-project/root/pull/11646,1,['error'],['errors']
Availability,"The buffer tests for histograms have slightly different rounding errors between buffered/not buffered histograms which exceed a few epsilons, so the test fails if the tolerances are too strict. *Note:* This test doesn't fail on Jenkins, but *does* fail on my machine without this patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2138:65,error,errors,65,https://root.cern,https://github.com/root-project/root/pull/2138,2,"['error', 'toler']","['errors', 'tolerances']"
Availability,The build errors are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1467#issuecomment-352071359:10,error,errors,10,https://root.cern,https://github.com/root-project/root/pull/1467#issuecomment-352071359,1,['error'],['errors']
Availability,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs); ```; In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:; Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory; 27 | #include <XrdCl/XrdClFileSystem.hh>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14180#issuecomment-1880687658:233,Error,Error,233,https://root.cern,https://github.com/root-project/root/pull/14180#issuecomment-1880687658,4,"['Error', 'error']","['Error', 'error']"
Availability,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3009#issuecomment-473953700:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/3009#issuecomment-473953700,1,['failure'],['failure']
Availability,The build on Windows didn't fail. This stupid Jenkins is taking the `error C2664: ...` in the commit log as real errors...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8789#issuecomment-891812150:69,error,error,69,https://root.cern,https://github.com/root-project/root/pull/8789#issuecomment-891812150,2,['error'],"['error', 'errors']"
Availability,"The builtin xrootd version 4.8.5 has the -Werror flag in release mode,; which causes build errors with future compilers such as happened with; gcc9. The -w flag suppresses all warnings even if -Werror is set; afterwards. Future xrootd releases (4.12 and later) have the -Werror; flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6294:91,error,errors,91,https://root.cern,https://github.com/root-project/root/pull/6294,1,['error'],['errors']
Availability,"The centos8 built failed with an unrelated error:; ```; gmake[2]: *** No rule to make target 'lib/libvdt.so', needed by 'lib/libROOTVecOps.so.6.29.01'. Stop.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12614#issuecomment-1496716105:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/12614#issuecomment-1496716105,1,['error'],['error']
Availability,"The challenge here is that the code does silenty the 'wrong' thing. The compiler and the case where shadowing is disabled, correctly fail with a good error. While the current prompt will do the wrong thing completely. On the other hand the issue is likely not severe as this only affect the prompt (where one would possibly cast to get a 'better' printout) and would not affect scripts. (I.e. despite being silent, the user might still notice).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8304#issuecomment-2021416536:150,error,error,150,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-2021416536,1,['error'],['error']
Availability,"The change is not a debug printout, it inserts a new line in the SVG file before the `<\text>` tag. This avoids the syntax error the user sees when inserting a very long text.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1928978464:123,error,error,123,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1928978464,1,['error'],['error']
Availability,The change is on the cmake hotspot used by virtually everybody. The risk to make an error here is high due to the complexity of the routine. Taking such risk weeks before the release should be very well weighted with the actual gain. It seems to me that the gain is not big enough to justify taking this direction for the release branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763#issuecomment-574165892:84,error,error,84,https://root.cern,https://github.com/root-project/root/pull/4763#issuecomment-574165892,1,['error'],['error']
Availability,"The change looks fine to me, thanks for proposing it. Maybe a doubt, which could be clarified by C++ experts (@silverweed @hahnjo) do you know whether we can prevent *at compile time* with an error/warning the situation where a user defines a default c'tor for classes ultimately inheriting from TObject?; If that's not possible, should we also think about a way to check this at dictionary generation level via the Clang interface, when we have the entire AST at disposal?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16218#issuecomment-2285348825:192,error,error,192,https://root.cern,https://github.com/root-project/root/pull/16218#issuecomment-2285348825,1,['error'],['error']
Availability,"The changed tests were failing with errors like the one below:. ```; Traceback (most recent call last):; File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",; line 22, in test_dynamiccast; self.assertEquals(type(o_upcast), TObject); ^^^^^^^^^^^^^^^^^; AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'.; Did you mean: 'assertEqual'?; ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11655:36,error,errors,36,https://root.cern,https://github.com/root-project/root/pull/11655,2,['error'],['errors']
Availability,"The changes are ok, but we might want to fix the root cause (pun intended) rather than the symptom. Constructing a std::string from a TString should _not_ be ambiguous, `TString` has a conversion operator defined for this purpose. @criezy what platform are you on? and can you please post the full compilation error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8477#issuecomment-864043888:310,error,error,310,https://root.cern,https://github.com/root-project/root/pull/8477#issuecomment-864043888,1,['error'],['error']
Availability,The changes in the commits are taken from upstream. Each commit references the upstream commit(s) that were needed to implement those changes. This should fix #13410 and hopefully not provoke other test failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13821:203,failure,failures,203,https://root.cern,https://github.com/root-project/root/pull/13821,1,['failure'],['failures']
Availability,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:876,error,errors,876,https://root.cern,https://github.com/root-project/root/pull/13651,1,['error'],['errors']
Availability,"The changes in this pull request fix several compilation errors when compiling with gcc 8.2 and c++17.; The errors are all of the type:; ```; tree/dataframe/src/RDFInterfaceUtils.cxx:155:39: error: call of overloaded ‘basic_string(std::remove_reference<TString&>::type)’ is ambiguous; return std::string(std::move(ss));; ^; tree/dataframe/src/RDFInterfaceUtils.cxx:179:63: error: call of overloaded ‘basic_string(std::remove_reference<TString&>::type)’ is ambiguous; return ParsedExpression{std::string(std::move(exprWithVars)), std::move(usedCols), std::move(varNames)};; ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8477:57,error,errors,57,https://root.cern,https://github.com/root-project/root/pull/8477,4,['error'],"['error', 'errors']"
Availability,"The changes of this PR cause new test failures which are related to the iteration of `std::vector`. Possibly the `value_type` and `value_size` fields are linked to the iteration too, and some additional changes are required there. Needs investigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11623#issuecomment-1290785557:38,failure,failures,38,https://root.cern,https://github.com/root-project/root/pull/11623#issuecomment-1290785557,1,['failure'],['failures']
Availability,The changes to fix the build process with GCC6 mentioned in [ROOT-8180](https://sft.its.cern.ch/jira/browse/ROOT-8180) only apply to GCC6. The same problem occurs again using GCC7 because of the equality check to major version 6. . The commit is tested on Arch Linux 64Bit and fixes the compile errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/731:295,error,errors,295,https://root.cern,https://github.com/root-project/root/pull/731,1,['error'],['errors']
Availability,"The clang-tidy errors are not a part of this PR. In any case some parts might not be actual errors, some parts might require further inspection by more knowledgeable eyes (Lorenzo). Not touching clang-format for the fit files in this PR outside of touched lines. Don't agree with most of the suggestions, but I can take a look again in the upcoming PR deploying this executor in the fitting files",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327#issuecomment-726125712:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/6327#issuecomment-726125712,2,['error'],['errors']
Availability,"The cling argument `--cuda-path` is necessary if the CUDA SDK is not installed under `/usr/local/cuda`, e.g. on HPC systems. The integration tests are also updated to handle a CUDA SDK under a non-standard location. # Additional diagnostic. To find the bug, I also add some diagnostic functions for the PTX compiler. 1. Now error messages are prefixed in CUDA mode to better decide which of the two compiler pipelines is causing the error. example; ```; - example before:; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes. - example after:; cling: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; cling-ptx: error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; cling-ptx: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; ```. 2. Now, the class `cudaIncrementalDeviceCompiler` available through reflection via the `gCling` object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707:324,error,error,324,https://root.cern,https://github.com/root-project/root/pull/6707,9,"['avail', 'error']","['available', 'error']"
Availability,"The cmsUnload test fails on other PRs, too. PS: The failures in debug do not seem related.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499356709:52,failure,failures,52,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499356709,1,['failure'],['failures']
Availability,"The code inlining mechanism uses the doxygen command [`\include`](https://www.doxygen.nl/manual/commands.html#cmdinclude). This command does not allow to specify the type of code to be inlined (C++ or python) the only two options available are `doc` and `lineno`. I guess the ""code"" is considered as C/C++ that's why the highlighting is not correct for that python example. I'll try to find a solution. The simplest would have been an option `.py` like for the `\code` doxygen command (see help). I tried but it does not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12851#issuecomment-1558888571:230,avail,available,230,https://root.cern,https://github.com/root-project/root/issues/12851#issuecomment-1558888571,2,['avail'],['available']
Availability,The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:. ```log; $ root -b -q -x -e 1+2; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:179,error,error,179,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,2,['error'],['error']
Availability,"The command executed by root is:; ```; gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf; ```; I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```; root [5] c1->Print(""Test.pdf"",""EmbedFonts"");; Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560#issuecomment-1697296935:375,error,error,375,https://root.cern,https://github.com/root-project/root/issues/13560#issuecomment-1697296935,3,"['Error', 'error']","['Error', 'error']"
Availability,"The comments in `ROOT_ADD_GTEST` suggest that the macro can also be used; in your own projects based on ROOT, only that when ROOT was configured; with `testing=OFF`, the ROOT::TestSupport library is not available. However, in the case where ROOT::TestSupport is not available, the; ROOT_ADD_GTEST macro is dysfunctional because the linkage against; `gtest` is missing. It is only indirectly picked up via; ROOT::TestSupport. This breaks the compilation of all tests, even if; they don't use the TestSupport library. To make this work again without; the user having to explicitly link against `gtest`, this PR suggests; to always link against `gtest` in the ROOT_ADD_GTEST macro. Also, make the linking against ROOT::TestSupport in RooFit tests explicit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16243:203,avail,available,203,https://root.cern,https://github.com/root-project/root/pull/16243,2,['avail'],['available']
Availability,The commit implements a few new unit tests and also fixes one bug related to the normalization of a RooAddPdf when the custom normalization set of its components is reset. There is also some code improvement by removing a redundant data member of the `RooAddPdf` and `RooAddModel` classes. More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:222,redundant,redundant,222,https://root.cern,https://github.com/root-project/root/pull/11485,1,['redundant'],['redundant']
Availability,"The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4316:57,failure,failure,57,https://root.cern,https://github.com/root-project/root/pull/4316,1,['failure'],['failure']
Availability,"The compilation error seems to be due to a mismatch between the toolchain that was used to compile ROOT and the toolchain you are using to compile your program (e.g. different glibc version). I don't know enough about nixOS to suggest a fix. The massif output shows little memory usage (`mem_heap_B=72938`). Can you try using `root.exe` instead of `root` as the command? By removing one layer of indirection we might help massif see things properly (but of course if we can run on a compiled program rather than through the interpreter it makes everything simpler). Cheers,; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-951644988:16,error,error,16,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-951644988,2,['error'],['error']
Availability,"The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4727:25,avail,available,25,https://root.cern,https://github.com/root-project/root/pull/4727,1,['avail'],['available']
Availability,"The connection check only makes sense for `fail-on-missing=OFF`, where the result is used to decide whether to download a missing dependency as a builtin from the internet, or to disable the feature that has the missing dependency. With `fail-on-missing=ON`, it doesn't matter because disabling features is not allowed. Therefore, we can skip the connection check to save some configuration overhead and just assume we have internet: if a builtin can't be downloaded there will be a configuration failure either way. Closes #11603 without introducing an additional flag. To be backported to 6.32, because it will improve the packaging of the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15467:111,down,download,111,https://root.cern,https://github.com/root-project/root/pull/15467,3,"['down', 'failure']","['download', 'downloaded', 'failure']"
Availability,"The context is; ```; 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX; 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util ; ```; This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before?; This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1401704523:106,error,error,106,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1401704523,2,['error'],['error']
Availability,"The crash happens on line `2598` of `TDecompSparse.cxx`:. `w1 = w[ipiv]*a[apos];`. because `apos = 3493762`. but `fFact.N = 3493234`. Not sure what the best way is to solve this, so pinging @lmoneta . The reproducer is:. ```; #include ""TFile.h""; #include ""TDecompSparse.h"". void decomp() {; auto f = TFile::Open(""/tmp/matrix_fail.root"");; f->ls();; TMatrixTSparse<double>* M = (TMatrixTSparse<double>*)f->Get(""M"");; M->Print();; TVectorT<double>* x = (TVectorT<double>*)f->Get(""x"");; TDecompSparse solver(*M,0);; Bool_t ok;; TVectorD xx = solver.Solve(*x, ok);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14554#issuecomment-2134945068:182,ping,pinging,182,https://root.cern,https://github.com/root-project/root/issues/14554#issuecomment-2134945068,1,['ping'],['pinging']
Availability,"The crash occurs due to a missing guard that prevents `libcudart.so` from being loaded. Loading a library requires an executor which is not available in syntax-only mode. Without guard, the following assert is triggered in a debug build:; ```; cling: /home/sehrig/workspace/cling/llvm/tools/cling/lib/Interpreter/Interpreter.cpp:1657: const cling::DynamicLibraryManager *cling::Interpreter::getDynamicLibraryManager() const: Assertion `m_Executor.get() && ""We must have an executor""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10659:140,avail,available,140,https://root.cern,https://github.com/root-project/root/pull/10659,1,['avail'],['available']
Availability,The cuDNN failure is unrelated to this PR; it's happening since two nights in the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16759#issuecomment-2447080828:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/16759#issuecomment-2447080828,1,['failure'],['failure']
Availability,"The current failure in snapshot is due to an ABI incompatibility (or so it seems) that we may have encountered before.; The failing line is:; {code:c++}; auto snapshotRDF = std::make_shared<RInterface<RLoopManager>>(std::make_shared<RLoopManager>(nullptr, validCols));; {code}; and one of the component of make_shared is the call to the following shared_ptr constructor; {code:c++}; // This constructor is non-standard, it is used by allocate_shared.; template<typename _Alloc, typename... _Args>; shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,; _Args&&... __args); : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...); { }; {code}; Note the use of std::forward. The snapshot test has 2 steps:. 1. Do the work, including a call to SnapshotImpl which contains the problem line, with only compiled code; 2. Do the same work relying on interpreted code, in which case SnapshotImpl is called via the interpreter. The symptoms of the failure is that **if** the snapshot test is compiled with optimization then. a. The compiled version works fine; b. In the interpreted version the constructor of the RInterface is wrong because the shared_ptr its constructor sees is **not** initialized. If the snapshot test is compiled without optimization then both steps succeeds. The main difference between the two is the amount of fully realized (i.e. non-inlined) functions emitted by the compiler. In the success fully case we have a stack like. {code}; interp SnapshotImpl calls; compiled std::make_shared<ROOT::Detail::RDF::RLoopManager … [in debug mode. this routine and down are used compiled]; compiled std::allocate_shared<ROOT::Detail::RDF::RLoopManager; ... implementation details .. all compiled.; compiled ROOT::Detail::RDF::RLoopManager::RLoopManager; compiled std::make_shared<ROOT::RDF::RInterface …; compiled std::allocate_shared<ROOT::RDF::RInterface …; compiled std::shared_ptr< ROOT::RDF::RInterface; compiled std::__shared_ptr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2158:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/2158,2,['failure'],['failure']
Availability,"The current failures stem from the excessive deserialization with call stack:; ```; frame #58: 0x00000001042e4611 libCling.so`TClingMethodInfo::SpecIterator::SpecIterator(this=0x00007fff5fbf7fc0, decl=0x0000000102b143c8) at TClingMethodInfo.cxx:66; frame #59: 0x00000001042e02dd libCling.so`TClingMethodInfo::SpecIterator::SpecIterator(this=0x00007fff5fbf7fc0, decl=0x0000000102b143c8) at TClingMethodInfo.cxx:66; frame #60: 0x00000001042de711 libCling.so`TClingMethodInfo::InternalNext(this=0x000000011b4805d0) at TClingMethodInfo.cxx:439; frame #61: 0x00000001042e0345 libCling.so`TClingMethodInfo::Next(this=0x000000011b4805d0) at TClingMethodInfo.cxx:463; frame #62: 0x000000010418b5f1 libCling.so`TCling::MethodInfo_Next(this=0x0000000100d2c4a0, minfo=0x000000011b4805d0) const at TCling.cxx:8023; frame #63: 0x0000000100411d70 libCore.so`TListOfFunctions::Load(this=0x000000011b4803d0) at TListOfFunctions.cxx:391; frame #64: 0x00000001003b8623 libCore.so`TClass::GetListOfMethods(this=0x000000011b480050, load=true) at TClass.cxx:3673; frame #65: 0x000000011acc89c4 libPyROOT.so`Cppyy::GetNumMethods(scope=10) at Cppyy.cxx:662; frame #66: 0x000000011ad28c71 libPyROOT.so`PyROOT::CreateScopeProxy(scope_name=""ROOT"", parent=0x0000000000000000) at RootWrapper.cxx:592; ```. @yamaguchi1024, that might be a good hint for you, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-372030221:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-372030221,1,['failure'],['failures']
Availability,"The current implementation is broken (fObjPtr.release() deletes the; object thet we then return by pointer) and in general it is extremely; awkward to convince a std::shared_ptr to release ownership (and for good; reason, it only makes sense if you can be absolutely sure that there is; only one shared_ptr alive that owns that object). Instead of using RResultPtr::Release, we recommend moving the result; out of the RResultPtr. This effectively reverts commit 03fd58eec04ddf96c1596c02d4269185fef42b9f.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7485:307,alive,alive,307,https://root.cern,https://github.com/root-project/root/pull/7485,2,['alive'],['alive']
Availability,"The current implementation of `optimize_npartitions` of the Dask backend; queries information about the workers from the Dask client object. The; information is stored in the `client.scheduler_info()` return value; which is a dictionary that can have the key `workers`. Supposedly, when this key exists it means the Dask client has the needed; information. This is not always true. In certain scenarios, for example; when waiting for a batch system to return the available workers to the; dask client, the `workers` key will be present but its value will be an; empty dictionary. This is because the scheduler doesn't already know; which nodes of the cluster will become workers (this can be mitigated by; calling the `client.wait_for_workers` function beforehand). This commit makes the check a bit stronger, getting the value of the; dictionary key `workers` and then checking if that value actually; contains something. fixes #9429",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9431:463,avail,available,463,https://root.cern,https://github.com/root-project/root/pull/9431,1,['avail'],['available']
Availability,"The current logic of pseudo-automatic modulemap discovery is a little fragile as it mounts a virtual file named module.modulemap in the location where the a give system library header is found (cuda.h, etc). However, if the libraries are squashed into a single folder then we end up mounting a file over another virtual file. This should be a hard error, however, on systems such as OSX some libraries already come with modulemap files and we should just not mount our predefined ones. This makes it very difficult to distinguish when to issue the hard error. While this patch is not a solution for the general when the modulemaps are automatically discovered (-fimplicit-module-maps), we can use the real file stems in cases where we are called with -fno-implicit-module-maps. As a side effect this fixes the *non-recommended* squashing of library header files into a single folder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5177:348,error,error,348,https://root.cern,https://github.com/root-project/root/pull/5177,2,['error'],['error']
Availability,"The current valgrind report hints at the jit relocation:; ```; bash-4.2$ ROOT_INCLUDE_PATH=/scratch/cmsbuild/vvasilev/rootobj/include/ valgrind root.exe -l -b -q tutorials/hsimple.C ; ==92602== Memcheck, a memory error detector; ==92602== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==92602== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==92602== Command: root.exe -l -b -q tutorials/hsimple.C; ==92602== ; Disabling gnu++: clang has no __float128 support on this target!; ==92602== Source and destination overlap in memcpy(0x1fff0021f8, 0x1fff0021f8, 12); ==92602== at 0x408BCF4: memcpy (in /cvmfs/cms.cern.ch/slc7_ppc64le_gcc820/external/valgrind/3.15.0/lib/valgrind/vgpreload_memcheck-ppc64le-linux.so); ==92602== by 0x1129C867: void llvm::SmallVectorTemplateBase<char, true>::uninitialized_copy<char const, char>(char const*, char const*, char*, std::enable_if<std::is_same<std::remove_const<char const>::type, char>::value, void>::type*) (SmallVector.h:294); ==92602== by 0x1128FF7B: void llvm::SmallVectorImpl<char>::append<char const*, void>(char const*, char const*) (SmallVector.h:392); ==92602== by 0x115F49F3: void llvm::SmallString<256u>::append<char const*>(char const*, char const*) (SmallString.h:75); ==92602== by 0x115F21BB: llvm::SmallString<256u>::operator+=(llvm::StringRef) (SmallString.h:285); ==92602== by 0x1168DAFF: llvm::SmallString<256u>::operator=(llvm::StringRef) (SmallString.h:281); ==92602== by 0x1773BE63: llvm::vfs::RedirectingFileSystemParser::parseEntry(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*, bool) (VirtualFileSystem.cpp:1311); ==92602== by 0x1773D81B: llvm::vfs::RedirectingFileSystemParser::parse(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*) (VirtualFileSystem.cpp:1501); ==92602== by 0x1772AF77: llvm::vfs::RedirectingFileSystem::create(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, void (*)(llvm::SMDiagnostic const&, void*), llvm::StringRef, void*, llvm::In",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:213,error,error,213,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['error'],['error']
Availability,"The dataframe test failure is expected and fixed by a PR in roottest, as far as I'm concerned this PR is good to go :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/924#issuecomment-326728883:19,failure,failure,19,https://root.cern,https://github.com/root-project/root/pull/924#issuecomment-326728883,1,['failure'],['failure']
Availability,"The dataframe_simple failure is not due to your changes. We had a problem with the externals, but it should be fixed by now. As for the typo and other fixes, if you added the line you are fixing in another commit, the amend should go there. If the fix is for something on master, then it's fine to have a commit on its own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333490713:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333490713,1,['failure'],['failure']
Availability,"The declaration of `obj` has been moved to an outer scope in PR #15179, resulting in a warning (or error) from `-Wshadow`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15256:99,error,error,99,https://root.cern,https://github.com/root-project/root/pull/15256,1,['error'],['error']
Availability,"The default `SIGPIPE` handler installed by `TUnixSystem` does not do anything except print a message and possibly causing an endless loop of `SIGPIPE` handling:. ```; echo 'std::cout << ""foo"" << std::endl;' | root -l |& true; python -c 'import ROOT; print ""foo""' |& true; ```. This fixes ROOT-4568 and ROOT-7659. The alternative would be to remove all pending sigpipe signals which might have occurred while handling the signal itself. This would keep the current behavior and still fix the endless loop. . However think that not handling SIGPIPE by default would be a wiser choice as I don't see a real use case for printing that a SIGPIPE was received and then continuing normally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/413:167,echo,echo,167,https://root.cern,https://github.com/root-project/root/pull/413,1,['echo'],['echo']
Availability,"The default was to lock the units by default, but this forced the user to unlocking via LockDefaultUnits(false) even if no geometry was created, otherwise a Fatal was issued. The patch allows changing the units once in the beginning and locks them automatically upon the definition of any element/material. # This Pull request:; Fixes an unintended behavior. ## Changes or fixes:; The static flag `gGeometryLocked` is now set to false by default, and changed to true upon the first invocation of SetDefaultUnits, which all element/material constructors call. As a result, any subsequent attempt to change the units must be made by manual unlocking via `LockDefautUnits(false)`, or it will issue a fatal error. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11789:703,error,error,703,https://root.cern,https://github.com/root-project/root/pull/11789,1,['error'],['error']
Availability,The definition of `TExecutor::GetPoolSize()` causes errors in builds with `runtime_cxxmodules=OFF`:; ```; IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!; You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const; Maybe you need to load the corresponding shared library?; atexit not defined; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033:52,error,errors,52,https://root.cern,https://github.com/root-project/root/pull/7033,1,['error'],['errors']
Availability,"The different overloads of `RooAbsRealLValue::inRange()` implemented; different tolerances when checking if a value `x` falls inside a; specific range. Some overloads checked if the interval; `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload; checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit; suggests to leave out these epsilon margins that were never documented.; For backwards compatibility, one can set a custom relative or absolute; epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were; removed. They were mathematically redundant, since in RooFit, +/-; infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:; ```C++; RooRealVar x{""x"", ""x"", 1e-6, 2e-6};; RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;; std::cout << y.inRange(0.0, nullptr) << std::endl;; // both checks will return true without this PR!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11999:80,toler,tolerances,80,https://root.cern,https://github.com/root-project/root/pull/11999,2,"['redundant', 'toler']","['redundant', 'tolerances']"
Availability,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13798#issuecomment-1745696812:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812,2,['failure'],['failure']
Availability,"The documentation is pretty large (774 Mb) vs 166MB for the whole source (which, as I understand, includes all docs in docstrings, and more), though both are tar.gz. Maybe I'll download it another time. . Maybe it could use a better compression, like .xz or .bz2? Open a feature request or I could do that if you find it reasonable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787078845:177,down,download,177,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787078845,1,['down'],['download']
Availability,"The downside is that builtin_xrootd requires an internet connection. So by making users that expect ROOT + remote files to ""just work"" happy, we might upset users that need want a way to build ROOT offline. There is a precedent: TBB is in the exact same situation and builtin_tbb is on by default.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5276:4,down,downside,4,https://root.cern,https://github.com/root-project/root/pull/5276,1,['down'],['downside']
Availability,"The downsteam code, -- like RooAddPdf::getValV for example -- assume; that a nullptr is passed when no normalization is requested. The case of; an empty norm set is not handled correctly in RooAddPdf::getValV,; leading to wrong results. However, some calling code passes an empty norm set to; RooAbsReal::getVal instead of a `nullptr` in an attempt to disable; normalization. This commit suggests to solve this ambiguity at the highest possible; level: right at the beginning of RooAbsReal::getVal. If the; normalization set is empty, the pointer pointing to it will be set to; `nullptr`. This fixes issue #8307. To give some context: the code in RooAddPdf that doesn't handle the ambiguity correctly was introduced in f6d1543, which was also backported to 6.24. Hence, a backport to 6.24 is necessary also for this PR. The backport PR to 6.24 is https://github.com/root-project/root/pull/8372, which first go included in 6.24.02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8364:4,down,downsteam,4,https://root.cern,https://github.com/root-project/root/pull/8364,1,['down'],['downsteam']
Availability,The env variable ROOTTEST_IGNORE_NUMBA is set in; rootspi/jenkins/root-build.cmake and select nodes; with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5476:115,failure,failures,115,https://root.cern,https://github.com/root-project/root/pull/5476,1,['failure'],['failures']
Availability,The error above is due to a problem in rootspi which I just fixed. Trying again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3890#issuecomment-498127904:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3890#issuecomment-498127904,1,['error'],['error']
Availability,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4358#issuecomment-529572756:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/4358#issuecomment-529572756,2,['error'],['error']
Availability,The error are pre-existing/unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3015#issuecomment-440438579:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3015#issuecomment-440438579,1,['error'],['error']
Availability,The error are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3014#issuecomment-440444091:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3014#issuecomment-440444091,1,['error'],['error']
Availability,The error does not seem related to the current pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13269#issuecomment-1644066967:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/13269#issuecomment-1644066967,1,['error'],['error']
Availability,"The error happens outside of a package manager as well:; ```; $ env DESTDIR=${PWD}/install cmake --build . --target install; ...; -- Installing: /srv/root/build/install/usr/local/lib/libcppyy_backend3_8.so; -- Set runtime path of ""/srv/root/build/install/usr/local/lib/libcppyy_backend3_8.so"" to ""/usr/local/lib""; CMake Error: failed to create symbolic link '/usr/local/python/site-packages/libcppyy_backend3_8.so': no such file or directory; ...; -- Installing: /srv/root/build/install/usr/local/lib/libcppyy3_8.so; -- Set runtime path of ""/srv/root/build/install/usr/local/lib/libcppyy3_8.so"" to ""/usr/local/lib""; CMake Error: failed to create symbolic link '/usr/local/python/site-packages/libcppyy3_8.so': no such file or directory; ...; ```; To reproduce, just configure `CMAKE_INSTALL_PYTHONDIR` to be different than `CMAKE_INSTALL_LIBDIR` and run the command above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7964#issuecomment-824780134:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/7964#issuecomment-824780134,3,"['Error', 'error']","['Error', 'error']"
Availability,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7082#issuecomment-767645305:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/7082#issuecomment-767645305,1,['error'],['error']
Availability,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2184#issuecomment-396705784:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2184#issuecomment-396705784,1,['error'],['error']
Availability,"The error is ""real"":; ```; Warning in <THnSparse::CreateHnAny>: Unknown Type of Histogram; Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments.; const int dim ( s->GetNdimensions() );; ^; ```; Could you have a look at `root -l -b test/stressHistogram.cxx`, please? That seems to fail after your change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-875590903:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-875590903,2,"['Error', 'error']","['Error', 'error']"
Availability,The error is concerning because it is in a test directly involving address calculation. The changes seems all very reasonable so it might actually be pre-existing (but have an 'arbitrary undefined' behavior). I'll take a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8013#issuecomment-828542735:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/8013#issuecomment-828542735,1,['error'],['error']
Availability,The error is due to protobuf that is missing on the machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10461#issuecomment-1110624754:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/10461#issuecomment-1110624754,1,['error'],['error']
Availability,The error is induced by these changes. I am not sure why yet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8144#issuecomment-841350480:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/8144#issuecomment-841350480,1,['error'],['error']
Availability,"The error is not connected with my changes:; `21:24:19 ""C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj"" (default target) (330) ->; 21:24:19 (ClCompile target) -> ; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(141): error C2143: syntax error: missing ';' before 'function-style cast' [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(142): error C2059: syntax error: '' [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(142): error C2334: unexpected token(s) preceding '{'; skipping apparent function body [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(213): error C2144: syntax error: 'int' should be preceded by ';' [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(213): error C2208: 'int': no members defined using this type [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]; 21:24:19 c:\build\workspace\root-pullrequests-build_2\build\include\thttpcallarg.h(229): error C2144: syntax error: 'int' should be preceded by ';' [C:\build\workspace\root-pullrequests-build_2\build\net\http\RHTTP.vcxproj]`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2930#issuecomment-436404322:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2930#issuecomment-436404322,11,['error'],['error']
Availability,The error is now:. [centos7-gcc7-Debug] ### Errors:; [centos7-gcc7-Debug] - Error: Had to build non-system module ROOTGpadv7 implicitly. You first need to ; [centos7-gcc7-Debug] - Error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/bin/rootcling: compilation failure (/mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libROOTGraphicsPrimitives958fc13e42_dictUmbrella.h) . The error message seems truncated . ; Some ideas on what the problem is now ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2091#issuecomment-392473662:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2091#issuecomment-392473662,6,"['Error', 'error', 'failure']","['Error', 'Errors', 'error', 'failure']"
Availability,The error is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924#issuecomment-934566974:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/5924#issuecomment-934566974,1,['error'],['error']
Availability,The error is unrelated (resource contention on Windows).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12628#issuecomment-1500360862:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/12628#issuecomment-1500360862,1,['error'],['error']
Availability,"The error is unrelated; ```; Error in <ROOT [WebDisplay] Log ../root/gui/webdisplay/src/RWebWindowsManager.cxx:406 in unsigned int ROOT::Experimental::RWebWindowsManager::ShowWindow(ROOT::Experimental::RWebWindow&, bool, const ROOT::Experimental::RWebDisplayArgs&)>: Cannot display window in native; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2960#issuecomment-438851351:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2960#issuecomment-438851351,2,"['Error', 'error']","['Error', 'error']"
Availability,"The error message changed, but there is more needed, it seems:. ```console; ❯ cat reproducer.def; Bootstrap: docker; From: fedora:36. %post; dnf -y update; dnf -y install git make cmake gcc-c++ gcc binutils ninja-build patch \; libX11-devel libXpm-devel libXft-devel libXext-devel python openssl-devel; dnf -y clean all. mkdir /reproducer && cd /reproducer; git clone -b master --depth 1 http://github.com/root-project/root source; git -C source log; patch -d source -p1 <<EoF; diff --git a/interpreter/cling/include/cling/std.modulemap b/interpreter/cling/include/cling/std.modulemap; index 5498b949c5..c82959a440 100644; --- a/interpreter/cling/include/cling/std.modulemap; +++ b/interpreter/cling/include/cling/std.modulemap; @@ -428,4 +428,8 @@ module ""std"" [system] {; export *; header ""bits/stl_tree.h""; }; + module ""bits/utility.h"" {; + export *; + header ""bits/utility.h""; + }; }; EoF; cmake -GNinja -S source -B build -Dxrootd=OFF; cmake --build build; ```. -->. ```; FAILED: core/G__Core.cxx lib/Core.pcm /reproducer/build/core/G__Core.cxx /reproducer/build/lib/Core.pcm; cd /reproducer/build/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/reproducer/build/lib:/.singularity.d/libs /reproducer/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /reproducer/build/lib/libCore.so -excludePath /reproducer/source -excludePath /reproducer/build/ginclude -excludePath /reproducer/build/externals -excludePath /reproducer/build/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/c++/12/x86_64-redhat-linux -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-redhat-linux/12/include -compilerI/usr/local/include -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-redhat-linux/12/include -compil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10478#issuecomment-1113253160:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/10478#issuecomment-1113253160,1,['error'],['error']
Availability,"The error message is inaccurate, it did not take into account jagged filling of the TTreeCache. In this case, the cache was filled with a little more than one cluster and when it needs to do the next refill it restarted from the cluster start boundary of that partially downloaded cluster which is “indeed” within the range of the last TreeCache fill (i.e. the error).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8048#issuecomment-829528504:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/8048#issuecomment-829528504,3,"['down', 'error']","['downloaded', 'error']"
Availability,"The error message we get is not very explicit ... at least for me. ; @Axel-Naumann, @vgvassilev do you have an idea to go further with this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2091#issuecomment-392521340:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2091#issuecomment-392521340,1,['error'],['error']
Availability,"The error messages in `treetreeplayertestUnit2` are expected, but should be checked",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642578286:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642578286,1,['error'],['error']
Availability,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:; ```; pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff; diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h; index d5d6722e70..02d310f1cd 100644; --- a/io/io/inc/TFile.h; +++ b/io/io/inc/TFile.h; @@ -71,7 +71,8 @@ public:; enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:; - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far; +int fnewmember;; +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far; Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far; Long64_t fBytesWrite{0}; ///<Number of bytes written to this file; Long64_t fBytesRead{0}; ///<Number of bytes read from this file; ```; and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:; ```; ninja RIO; ```; (otherwise ninja/make will correctly rebuild the pcm) and then:; ```; pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q; [26/26] Linking CXX shared library lib/libRIO.so; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTTMVASofie; input_line_4:2:2: error: unknown type name 'include'; #include ""TError.h""; ^; etc ....; ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704#issuecomment-932732690:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/7704#issuecomment-932732690,3,['error'],['error']
Availability,"The error occurs only when `loadLibrary()` is called with the argument `resolved = false`.; The const reference of lResolved in the statement `const std::string& canonicalLoadedLib = resolved ? libStem.str() : lResolved;` is a copy because the compiler insert the copy constructor and creates a temporary object. This is required, that the return type of libStem.str() and lResolved has the same value; type: prvalue. ## Checklist:. - [ ] tested changes locally. Related cling PR: https://github.com/root-project/cling/pull/455",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/10593,1,['error'],['error']
Availability,The error on MacOS could possibly be related to the header files removed. Re-running the test to verify that it is not from something else than this PR. @phsft-bot build with flags -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2755#issuecomment-437128344:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2755#issuecomment-437128344,1,['error'],['error']
Availability,"The error on Windows is actually not an error, it picks up the errors in the commit log...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035#issuecomment-927926791:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/9035#issuecomment-927926791,3,['error'],"['error', 'errors']"
Availability,The error on Windows is not an error (it's coming from the commit log). Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9613#issuecomment-1017171613:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/9613#issuecomment-1017171613,2,['error'],['error']
Availability,The error on Windows is not due to the changes done in this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3724#issuecomment-486214966:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3724#issuecomment-486214966,1,['error'],['error']
Availability,The error on `ROOT-performance-centos8-multicore/cxx17` is as usual related to `lvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10961#issuecomment-1184195689:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/10961#issuecomment-1184195689,1,['error'],['error']
Availability,The error on mac1014/python3 seems unrelated (missing roottest build product ```roottest/scripts/recordtiming_cc.so```. @phsft-bot build just on mac1014/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924#issuecomment-649021118:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/5924#issuecomment-649021118,1,['error'],['error']
Availability,The error on macOS is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3721#issuecomment-486262248:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3721#issuecomment-486262248,1,['error'],['error']
Availability,"The error says; `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`; which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2435#issuecomment-455587098:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/2435#issuecomment-455587098,2,['error'],['error']
Availability,"The error seems an unresolved symbol on Win; ```; 2024-09-14T07:01:53.2104016Z Creating library Z:/foobar/lib/libRooFitCore.lib and object Z:/foobar/lib/libRooFitCore.exp; 2024-09-14T07:01:53.4308777Z RooXYChi2Var.obj : error LNK2001: unresolved external symbol ""public: virtual void __cdecl RooAbsArg::fillVariableGroups(class RooFit::VariableGroups &)const "" (?fillVariableGroups@RooAbsArg@@UEBAXAEAVVariableGroups@RooFit@@@Z) [Z:\foobar\build\roofit\roofitcore\RooFitCore.vcxproj]; 2024-09-14T07:01:53.4311585Z RooAbsTestStatistic.obj : error LNK2001: unresolved external symbol ""public: virtual void __cdecl RooAbsArg::fillVariableGroups(class RooFit::VariableGroups &)const "" (?fillVariableGroups@RooAbsArg@@UEBAXAEAVVariableGroups@RooFit@@@Z) [Z:\foobar\build\roofit\roofitcore\RooFitCore.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16394#issuecomment-2350937523:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/16394#issuecomment-2350937523,3,['error'],['error']
Availability,The error sql light is because of failure to connect.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4735#issuecomment-572190726:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/4735#issuecomment-572190726,2,"['error', 'failure']","['error', 'failure']"
Availability,"The error was introduced by a commit here https://epsft-jenkins.cern.ch/job/root-nightly-master/2198/LABEL=ROOT-ubuntu18.10,SPEC=cxx17/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/ (for v6-18). How do the failure, these commits and your fix correlate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3918#issuecomment-499756232:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/3918#issuecomment-499756232,2,"['error', 'failure']","['error', 'failure']"
Availability,The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14633:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/14633,1,['error'],['error']
Availability,The error/failure are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1548#issuecomment-359859066:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/1548#issuecomment-359859066,2,"['error', 'failure']","['error', 'failure']"
Availability,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13823#issuecomment-1751693842:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/13823#issuecomment-1751693842,1,['error'],['errors']
Availability,The errors are all legit. I need to examine them one by one and fix them (printing warnings *does* have an effect on our tests!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16208#issuecomment-2278276832:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/16208#issuecomment-2278276832,1,['error'],['errors']
Availability,The errors are pre-existing or infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2146#issuecomment-395559117:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/2146#issuecomment-395559117,1,['error'],['errors']
Availability,The errors are related to this PR (i.e. library not found),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7566#issuecomment-801449728:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/7566#issuecomment-801449728,1,['error'],['errors']
Availability,The errors are unrelated (remote file connection failures).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924#issuecomment-650238144:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/5924#issuecomment-650238144,2,"['error', 'failure']","['errors', 'failures']"
Availability,The errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7275#issuecomment-784554905:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/7275#issuecomment-784554905,5,['error'],['errors']
Availability,The errors are unrelated.; ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:; df105_WBosonAnalysis_py: timeout; roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-759120884:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-759120884,2,['error'],"['error', 'errors']"
Availability,The errors contains:; ```; 03:51:11 -- Looking for ZSTD; 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR); ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541334976:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541334976,2,"['Error', 'error']","['Error', 'errors']"
Availability,The errors in VectorisedPDF are fixed by https://github.com/root-project/roottest/pull/730,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8601#issuecomment-874048623:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/8601#issuecomment-874048623,1,['error'],['errors']
Availability,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-760532814:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-760532814,1,['error'],['errors']
Availability,The errors seems related to the changes. (i.e they are unexpected).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14760#issuecomment-1953177360:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/14760#issuecomment-1953177360,1,['error'],['errors']
Availability,The errors seen in the CI such as ; ```; Error in <TFile::TFile>: file /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/roottest/python/distrdf/dask/distrdf_check_friend_trees_alignment_dask_file_1.root/distrdf_check_friend_trees_alignment_dask_tree_1.root does not exist; ```; Show that something is wrong with the file names. Notice the double file name above. Probably in the creation of the spec passed to the task-local RDF something is wrong,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526#issuecomment-1340847807:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/11526#issuecomment-1340847807,2,"['Error', 'error']","['Error', 'errors']"
Availability,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713438085:341,mask,mask,341,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713438085,1,['mask'],['mask']
Availability,"The extended term needs a special correction, it should not just be; reevaluated with the squared weights replacing the weights. This is not; implemented correctly. The way how weights are handled in the batch mode was also simplified.; Previously, a dummy `RooRealVar` was created for the weight and the; squared weight each, but now the conventional name for the weight; variable is used directly to look up the names in the data map. In the second commit, a unit test is added for this, inspired by the following forum post:; https://root-forum.cern.ch/t/batchmode-gives-wrong-errors-with-sumw2errors/49597/8",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10467:580,error,errors-with-,580,https://root.cern,https://github.com/root-project/root/pull/10467,1,['error'],['errors-with-']
Availability,"The fact that gradient computations are supported in a `ROOT::Math`; function wrapper was only transmitted by the static class type. However, this is rather inconvenient:. 1. If you forget to downcast your function to the gradient type, the; provided gradient won't be used. 2. Many minimizer function signatures must be overloaded for both the; function with and without gradients. 3. In RooFit, this caused particular pain: depending on if an external; gradient is provided, the function wrapper in the `RooMinimizer`; needs to have a different base class, and the RooMinimizer needs to; cast it correctly when fitting. This commit suggests two new virtual functions:. * `IBaseFunctionMultiDimTempl::HasGradient()` for multi-dim functions. * `IBaseFunctionOneDim::HasGradient()` for 1D functions. Like this, the gradient support can be queried without dynamic casting; at runtime, simplifying lots of other code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12257:192,down,downcast,192,https://root.cern,https://github.com/root-project/root/pull/12257,1,['down'],['downcast']
Availability,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3087#issuecomment-444164323:43,fault,fault,43,https://root.cern,https://github.com/root-project/root/pull/3087#issuecomment-444164323,2,['fault'],['fault']
Availability,"The failing test seems to trigger some llvm bug:; ```; valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on unin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250106081:948,error,error,948,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250106081,1,['error'],['error']
Availability,"The failure above on macOS is due to `-Dfail-on-missing=ON` being passed, and PCRE not being found, which is the expected behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3975#issuecomment-503033864:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/3975#issuecomment-503033864,1,['failure'],['failure']
Availability,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4425#issuecomment-534694988:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4425#issuecomment-534694988,1,['failure'],['failure']
Availability,The failure are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5391#issuecomment-618457821:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5391#issuecomment-618457821,1,['failure'],['failure']
Availability,The failure are unrelated (deprecated code not removed yet). Can you make a PR against v6.28 patch branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11958#issuecomment-1364055288:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/11958#issuecomment-1364055288,1,['failure'],['failure']
Availability,The failure are unrelated (testProxies is due to the change in std::pair handling in TClass) and the other 2 are related to template instantiation within Cling.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10206#issuecomment-1076717212:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/10206#issuecomment-1076717212,1,['failure'],['failure']
Availability,The failure are unrelated so this is ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5365#issuecomment-620118826:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5365#issuecomment-620118826,1,['failure'],['failure']
Availability,The failure are unrelated to the patch. . Thanks for this contribution :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1358#issuecomment-347019472:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/1358#issuecomment-347019472,1,['failure'],['failure']
Availability,The failure are unrelated.(or so it seems),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6728#issuecomment-720725974:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/6728#issuecomment-720725974,1,['failure'],['failure']
Availability,"The failure in ROOT-fedora29/python3. is infrastructure related (""-j9 command does not exist"" :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3915#issuecomment-499533112:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/3915#issuecomment-499533112,1,['failure'],['failure']
Availability,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14969#issuecomment-1998609408:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/14969#issuecomment-1998609408,1,['failure'],['failure']
Availability,"The failure in Windows is; `21:22:41 C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\dataframe_nodes.cxx(97): error C3493: 'nBinsExpected' cannot be implicitly captured because no default capture mode has been specified [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_nodes.vcxproj]`; Therefore, ready to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3639#issuecomment-491179897:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/3639#issuecomment-491179897,2,"['error', 'failure']","['error', 'failure']"
Availability,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13121#issuecomment-1613428881:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/13121#issuecomment-1613428881,1,['failure'],['failure']
Availability,The failure in ```tutorial-roofit-rf408_RDataFrameToRooFit-py``` is actually a real error which wasn't being caught before (a rather subtle SFINAE problem),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1478486627:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1478486627,2,"['error', 'failure']","['error', 'failure']"
Availability,The failure in `aclicDataMemberSelection` is pre-existing (seemingly on the same platform as the issue this PR fixes). I double locally checked that this PR fix the intended issue on Ubuntu 22.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1278098555:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1278098555,1,['failure'],['failure']
Availability,"The failure in `dataframe_interface` is bad, investigating.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5488#issuecomment-621224099:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5488#issuecomment-621224099,1,['failure'],['failure']
Availability,The failure in `datasource_sqlite` should be fixed by #6214 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6208#issuecomment-675904401:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/6208#issuecomment-675904401,1,['failure'],['failure']
Availability,The failure in `roottest_root_meta_runMemberComments` is expected and just a reference file update. The failure in `issue-6840.roottest_root_meta_tclass_issue_6840_emulatePairsTest` is unexpected .. humm actually it is likely a consequence of changing to `%p` in the printf ... to be confirmed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7778#issuecomment-812244373:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/7778#issuecomment-812244373,2,['failure'],['failure']
Availability,The failure in `test_misc` is fixed by PR #1046 and a similar PR to roottest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331726017:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331726017,1,['failure'],['failure']
Availability,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input; TChain for that _thread_ in TTreeProcessorMT, causing a destruction of; the previous _thread-local_ TTree.; At the same time, the initialization of a new task _in a different; thread_ could delete the output TTree of a multi-thread Snapshot; action, which was listed in the fClones of the input TTree.; ; This race caused the input ~TTree to access an output tree just; after its deletion, in TTree::CopyAddresses.; ; The root cause of this issue is that TTreeProcessorMT uses thread-local; variables while RDataFrame uses processing slots which threads can; exchange between themselves. I see two options to solve this:; 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy.; 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think?; I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-398737985:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-398737985,2,['failure'],['failure']
Availability,The failure in `tutorial_graphics_AtlasExample` [is preexisting](https://github.com/root-project/root/pull/12543),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12752#issuecomment-1533566296:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/12752#issuecomment-1533566296,1,['failure'],['failure']
Availability,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2260#issuecomment-401026079:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2260#issuecomment-401026079,1,['failure'],['failure']
Availability,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2217#issuecomment-400861137:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2217#issuecomment-400861137,1,['failure'],['failure']
Availability,The failure in projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make is unusual and possibly introduced by this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2848#issuecomment-432781096:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2848#issuecomment-432781096,1,['failure'],['failure']
Availability,The failure in projectroot.runtutorials.tutorial_tmva_envelope_classification are unique to this PR. The failure from jupiter on MacOS seems infrastructure related (but not seen consistently in other PR). . The failure projectroot.runtutorials.tutorial_multicore_imt101_parTreeProcessing is also not consistently seen elsewhere but the complain seem unrelated to this PR (error while opening input file).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5752#issuecomment-637157327:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5752#issuecomment-637157327,4,"['error', 'failure']","['error', 'failure']"
Availability,The failure in roottest_root_tree_branches_make is real and was due to the `fDirectory` member being reset too early. Turns out that the `TBranch` destructor still need it to have a valid value. A new version correcting this has been uploaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021#issuecomment-925167678:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/9021#issuecomment-925167678,1,['failure'],['failure']
Availability,The failure is 'lost connection' to worker so we don't know the actual result.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-542879383:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-542879383,1,['failure'],['failure']
Availability,The failure is [execCheckClusterRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195807/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/) is surprising.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1949014653:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1949014653,1,['failure'],['failure']
Availability,The failure is due to a flaky test TGraphMultiErrorsTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4743#issuecomment-572503247:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4743#issuecomment-572503247,1,['failure'],['failure']
Availability,The failure is from broken reference string. I do not see how this could relate to this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5056#issuecomment-591049988:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5056#issuecomment-591049988,1,['failure'],['failure']
Availability,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4332#issuecomment-527828358:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4332#issuecomment-527828358,1,['failure'],['failure']
Availability,The failure is in runtime_cxxmodules mode and it is sporadic. It is not caused by this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2745#issuecomment-436206062:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2745#issuecomment-436206062,1,['failure'],['failure']
Availability,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4430#issuecomment-535429830:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4430#issuecomment-535429830,1,['failure'],['failure']
Availability,The failure is infrastructure related and not due to this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1549#issuecomment-360242460:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/1549#issuecomment-360242460,1,['failure'],['failure']
Availability,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4198#issuecomment-521180922:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4198#issuecomment-521180922,1,['failure'],['failure']
Availability,The failure is not related to the PR. This PR has NFC.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4545#issuecomment-541907243:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4545#issuecomment-541907243,1,['failure'],['failure']
Availability,The failure is not related.; ```; 11:19:57 C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\dataframe_nodes.cxx(97): error C3493: 'nBinsExpected' cannot be implicitly captured because no default capture mode has been specified [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_nodes.vcxproj]; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3788#issuecomment-491235778:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/3788#issuecomment-491235778,2,"['error', 'failure']","['error', 'failure']"
Availability,The failure is pre-existing (python config on mac),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6973#issuecomment-749801450:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/6973#issuecomment-749801450,1,['failure'],['failure']
Availability,The failure is probably due to https://github.com/root-project/root/pull/4699,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4698#issuecomment-566538218:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4698#issuecomment-566538218,1,['failure'],['failure']
Availability,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7628#issuecomment-804055888:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/7628#issuecomment-804055888,1,['failure'],['failure']
Availability,"The failure is spurious and fixed by https://github.com/root-project/root/pull/15891 . I restarted the failing build. For me the PR can be merged as is, as pointed out in the review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16337#issuecomment-2322772091:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/16337#issuecomment-2322772091,1,['failure'],['failure']
Availability,The failure is unrelated (Cling issue with symbols),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11292#issuecomment-1234585645:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/11292#issuecomment-1234585645,1,['failure'],['failure']
Availability,The failure is unrelated (I need to debug but no time),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8613#issuecomment-878916490:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/8613#issuecomment-878916490,1,['failure'],['failure']
Availability,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7083#issuecomment-767084733:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/7083#issuecomment-767084733,1,['failure'],['failure']
Availability,The failure is unrelated (can't open the v7 web display in a tutorial).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2928#issuecomment-436360143:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2928#issuecomment-436360143,1,['failure'],['failure']
Availability,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008; Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15016#issuecomment-2007690268:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/15016#issuecomment-2007690268,1,['failure'],['failure']
Availability,"The failure is unrelated to this PR ""SysError in <TFile::TFile>: could not delete C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\snapshotandshortsyntaxforcollectionsizes.root (errno: 13) Permission denied""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8275#issuecomment-850615568:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/8275#issuecomment-850615568,1,['failure'],['failure']
Availability,The failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099#issuecomment-1065993752:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/10099#issuecomment-1065993752,7,['failure'],['failure']
Availability,The failure is unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8657#issuecomment-879137086:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/8657#issuecomment-879137086,1,['failure'],['failure']
Availability,The failure is unrelated. Merging. Thank you very much!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4673#issuecomment-562305573:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4673#issuecomment-562305573,1,['failure'],['failure']
Availability,"The failure is unrelated:; ```; Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4583#issuecomment-547444966:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4583#issuecomment-547444966,3,"['Error', 'Failure', 'failure']","['Error', 'Failure', 'failure']"
Availability,The failure looks unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11590#issuecomment-1282472072:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/11590#issuecomment-1282472072,1,['failure'],['failure']
Availability,"The failure of AtlasExample.C is understood. I have changed the solid circle marker to a hollow one. Here is what I get. On the right the current master on the left the version with this fix applied. One can see extra lines (inward error bars) on the right one because the marker is larger than the error bars. Of course that generates extra lines and the size of the SVG file changes. Once this PR is applied, I guess the reference file will need to be regenerated. <img width=""1203"" alt=""Screenshot 2024-09-06 at 13 30 58"" src=""https://github.com/user-attachments/assets/7a1f7c5c-c913-468c-b40f-c4949c70f034"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16372#issuecomment-2333866218:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/16372#issuecomment-2333866218,3,"['error', 'failure']","['error', 'failure']"
Availability,"The failure of `roottest_root_meta_tuple_exec_configtype_unload_auto` is an interesting one: It is a deserialization triggered by the `DeclUnloader`, which in turn makes the `DeclCollector` (rightfully) complain about the ""missing transaction during deserialization"". The reason for the deserialization is that `DeclUnloader` calls `spec_begin` requiring to load all specializations. I'm more and more eying to completely revert the lazy loading, as proposed in https://github.com/root-project/root/pull/12238 so that a situation like that can never happen...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1535797912:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1535797912,1,['failure'],['failure']
Availability,The failure of `test_stressgraphics` is due to https://github.com/root-project/root/pull/12235.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12335#issuecomment-1433608097:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/12335#issuecomment-1433608097,1,['failure'],['failure']
Availability,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541813601:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541813601,1,['failure'],['failure']
Availability,"The failure of the snapshot test is understood, a complementary PR will come for roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1764#issuecomment-377179819:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/1764#issuecomment-377179819,1,['failure'],['failure']
Availability,The failure on Arm64 is understdood (see https://github.com/root-project/root/pull/16718). Good to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16711#issuecomment-2423681562:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/16711#issuecomment-2423681562,1,['failure'],['failure']
Availability,"The failure on Ubuntu 22.04 without C++ modules is likely because `core/metacling` doesn't depend on `Tree` (sorry for not spotting this earlier) - can you just try something like `new int`? If we're lucky, this also explains the Windows failures, which doesn't have modules either and was just failing to compile altogether :crossed_fingers:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1985207240:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1985207240,2,['failure'],"['failure', 'failures']"
Availability,The failure on `ROOT-debian10-i386/cxx14` is not a real failure. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8849#issuecomment-899385661:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/8849#issuecomment-899385661,2,['failure'],['failure']
Availability,"The failure on fedora 31 looks like a glitch on the machine, but better verify.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5739#issuecomment-635934573:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/5739#issuecomment-635934573,1,['failure'],['failure']
Availability,The failure on mac1014/cxx17 is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3144#issuecomment-445988234:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/3144#issuecomment-445988234,1,['failure'],['failure']
Availability,The failure on macos is pre-existing (missing python module),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6821#issuecomment-750494882:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/6821#issuecomment-750494882,1,['failure'],['failure']
Availability,The failure seem to be due to directory reuse on the worker node and not related to this PR. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1550#issuecomment-360242246:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/1550#issuecomment-360242246,1,['failure'],['failure']
Availability,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1433440718:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1433440718,1,['failure'],['failure']
Availability,"The failure seen in ROOT-9336 merging ATLAS histogram was caused by a bug in TH1::IsEmpty and ; TH1::ResetStats/GetStats ; TH1::ResetStats was setting the entries to zero for histograms with labels and the function TH1::IsEmpty was assuming than an histogram is empty if fTsumw AND entries == 0. Now we fix the protected function Th1::IsEmpty used in TH1Merger for the cas…e when both fTSumw=0 and fEntries=0, but in reality the bin contents are not zero.; We Add in this case a check to all bin contents, including underflow/overflows. We fix also TH1::GetStats() for the case of labels histograms. In this case when you have fTSumw=0 and fEntries !=0 (happening for the cases after calling SetBinContent or TH1::ResetStats) you want to compute the correct fTsumw and fTsumw2 values.; With these fixes now ResetStats() works correctly and set the correct histogram statistics (e.g. number of entries).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2114:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/2114,1,['failure'],['failure']
Availability,"The failure to unload broken declarations (@jalopezg-git FYI), does that still happen after this PR, or is this addressed by the PR? I'm not sure I understand how much of the PR description describes _this_ PR vs what's left to be done?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1459673044:4,failure,failure,4,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1459673044,1,['failure'],['failure']
Availability,"The failures (compiler crash building clang, infrastructure problems) are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5137#issuecomment-598351415:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5137#issuecomment-598351415,1,['failure'],['failures']
Availability,The failures (multicore tutorials) are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021#issuecomment-926198385:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/9021#issuecomment-926198385,1,['failure'],['failures']
Availability,The failures above are not related to this pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2156#issuecomment-395085296:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/2156#issuecomment-395085296,1,['failure'],['failures']
Availability,The failures actually mean this PR is ok. The changes introduced by this PR should have had impact on how we configure. The failing tests show that we went past this phase and fail in the testing phase which is something that we probably broke long ago. LGTM!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4750#issuecomment-573601138:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/4750#issuecomment-573601138,1,['failure'],['failures']
Availability,The failures are already present in master. There are not related to this PR and I am working on fixing them (see #11422),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11435#issuecomment-1259357053:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/11435#issuecomment-1259357053,1,['failure'],['failures']
Availability,"The failures are because I merged. The build passed several times before, and I tested locally on Linux and Mac (and Windows for some cases).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1636#issuecomment-367350707:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/1636#issuecomment-367350707,1,['failure'],['failures']
Availability,"The failures are definitely due to my changes. Did not see them on my machine, will investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5544#issuecomment-624137437:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5544#issuecomment-624137437,1,['failure'],['failures']
Availability,The failures are due to failing rebase and network outage.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6309#issuecomment-699547921:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6309#issuecomment-699547921,2,"['failure', 'outage']","['failures', 'outage']"
Availability,The failures are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3496#issuecomment-471195040:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/3496#issuecomment-471195040,2,['failure'],['failures']
Availability,"The failures are known problems, so ready to merge. (For the one on windows, you would have to fork roottest to your github, if I'm not mistaken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5506#issuecomment-623965343:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5506#issuecomment-623965343,1,['failure'],['failures']
Availability,"The failures are not real failures, so I merge this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1657#issuecomment-367290548:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/1657#issuecomment-367290548,2,['failure'],['failures']
Availability,"The failures are not related to my changes. I will merge and if any problem arises in the nightlies, I will revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3357#issuecomment-459504508:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/3357#issuecomment-459504508,1,['failure'],['failures']
Availability,The failures are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12193#issuecomment-1413542875:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12193#issuecomment-1413542875,1,['failure'],['failures']
Availability,The failures are obviously not related to this change... :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5067#issuecomment-592035127:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5067#issuecomment-592035127,1,['failure'],['failures']
Availability,The failures are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6740#issuecomment-737364635:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6740#issuecomment-737364635,2,['failure'],['failures']
Availability,The failures are pre-existing. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-444133769:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-444133769,1,['failure'],['failures']
Availability,The failures are present in other PRs and seem unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1399202433:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1399202433,1,['failure'],['failures']
Availability,The failures are present in the last nightly builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5485#issuecomment-620793014:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5485#issuecomment-620793014,1,['failure'],['failures']
Availability,The failures are seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-618018265:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-618018265,1,['failure'],['failures']
Availability,The failures are seen elsewhere in the PRs and they seem unrelated to this particular proposed change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12075#issuecomment-1399202355:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12075#issuecomment-1399202355,1,['failure'],['failures']
Availability,The failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8995#issuecomment-1017069266:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/8995#issuecomment-1017069266,2,['failure'],['failures']
Availability,The failures are unrelated (caused by me merging https://github.com/root-project/root/pull/9041 prematurely) and are fixed by https://github.com/root-project/root/pull/9046,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9045#issuecomment-930278065:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/9045#issuecomment-930278065,1,['failure'],['failures']
Availability,The failures are unrelated (pre-existing and infrastructure respectively).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12624#issuecomment-1497951316:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12624#issuecomment-1497951316,1,['failure'],['failures']
Availability,The failures are unrelated and most likely due to a glitch in the EOS based file server.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15900#issuecomment-2182761259:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/15900#issuecomment-2182761259,1,['failure'],['failures']
Availability,"The failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13576#issuecomment-1702238336:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/13576#issuecomment-1702238336,1,['failure'],['failures']
Availability,"The failures are unrelated, understood and fixed by https://github.com/root-project/roottest/pull/1180",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16344#issuecomment-2322770824:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/16344#issuecomment-2322770824,1,['failure'],['failures']
Availability,The failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6680#issuecomment-718942185:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6680#issuecomment-718942185,14,['failure'],['failures']
Availability,The failures are unrelated. @ellert This is ready to merge once the commit log is updated :). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5944#issuecomment-663156349:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5944#issuecomment-663156349,1,['failure'],['failures']
Availability,The failures are unrelated. ROOT does not use the boost modulemap.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7568#issuecomment-801987792:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/7568#issuecomment-801987792,1,['failure'],['failures']
Availability,The failures are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9620#issuecomment-1017051442:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/9620#issuecomment-1017051442,1,['failure'],['failures']
Availability,The failures are unreleated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5359#issuecomment-614790470:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5359#issuecomment-614790470,1,['failure'],['failures']
Availability,The failures cannot be related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5798#issuecomment-644729691:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5798#issuecomment-644729691,1,['failure'],['failures']
Availability,The failures have nothing to do with this PR. ; I will then merge it Thank you for this contribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5159#issuecomment-628659144:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5159#issuecomment-628659144,1,['failure'],['failures']
Availability,The failures in `projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt` are actually successes:. ```; NUMTASKS(chain):2000; [IMT]TTreeProcessorMT::Processwith4threads; [IMT]Globalmaxptis7.90285; -NUMTASKS(tentrylist):2000; -NUMEMPTYTASKS(tentrylist):1997; +NUMTASKS(tentrylist):3; +NUMEMPTYTASKS(tentrylist):0; NUM1-ENTRYTASKS(tentrylist):3; ```. Same numerical output with 1997 less tasks scheduled :smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5667#issuecomment-633707742:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/5667#issuecomment-633707742,1,['failure'],['failures']
Availability,The failures in regression_zeroentries are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/99),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1200#issuecomment-337915441:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/1200#issuecomment-337915441,1,['failure'],['failures']
Availability,The failures in roottest_root_io_cpp11Containers_Names are unrelated (the test needs updating to match the master). So merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2054#issuecomment-391021164:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/2054#issuecomment-391021164,1,['failure'],['failures']
Availability,"The failures in the new CI only refer to windows, other builds are ""green"" but the tutorials are not actually run. I need to understand how to force running also these tutorials in the new CI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1647411113:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1647411113,1,['failure'],['failures']
Availability,The failures of python tutorials on mac nodes are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6073#issuecomment-667992177:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6073#issuecomment-667992177,1,['failure'],['failures']
Availability,"The failures on Fedora 34 don't seem to be related, but this commit actually fixes the warning seen in the linked PR https://github.com/root-project/root/pull/9066#issuecomment-933646782",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9065#issuecomment-933835764:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/9065#issuecomment-933835764,1,['failure'],['failures']
Availability,"The failures on Travis are not due to this PR (old Fitting code). I find he format ones make the code less legible, so I would not apply them. In any case I'm opening another PR adapting those files next, so that would be the place to address any concerns.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327#issuecomment-707097251:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6327#issuecomment-707097251,1,['failure'],['failures']
Availability,The failures on Ubuntu 24 are very similar to those that led to https://github.com/root-project/root/pull/15415 . My first instinct is that the new global `gConvFactories` is not thread-safe and we are hitting this problem in distrdf as usual,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2158533120:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2158533120,1,['failure'],['failures']
Availability,"The failures on Windows Jenkins are the occasional out-of-heap-space of the compiler. It has nothing to do with this PR, and the new CI is green for Windows 32 bit and 64 bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877#issuecomment-1978955862:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/14877#issuecomment-1978955862,1,['failure'],['failures']
Availability,The failures on Windows are unrelated @bellenot ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10341#issuecomment-1094751108:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/10341#issuecomment-1094751108,1,['failure'],['failures']
Availability,The failures on mac and ROOT-fedora30/cxx14. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6073#issuecomment-672284612:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6073#issuecomment-672284612,1,['failure'],['failures']
Availability,"The failures on mac, alma9 and tests are unrelated to this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2363261667:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2363261667,1,['failure'],['failures']
Availability,The failures on windows are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443#issuecomment-1284289896:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/11443#issuecomment-1284289896,1,['failure'],['failures']
Availability,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-319056306:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-319056306,1,['failure'],['failures']
Availability,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4405#issuecomment-533433722:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/4405#issuecomment-533433722,1,['failure'],['failures']
Availability,The failures seem to be unrelated. They are in coming from a previous changes to span.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4354#issuecomment-528926439:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/4354#issuecomment-528926439,1,['failure'],['failures']
Availability,The failures seem unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2706#issuecomment-425184718:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/2706#issuecomment-425184718,1,['failure'],['failures']
Availability,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12252#issuecomment-1433442365:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12252#issuecomment-1433442365,2,['failure'],['failures']
Availability,The failures seem unrelated. Let's merge this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1434349915:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1434349915,1,['failure'],['failures']
Availability,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13705#issuecomment-1731598750:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/13705#issuecomment-1731598750,1,['failure'],['failures']
Availability,The failures should be independent. I will try however to rebuild this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3024#issuecomment-441251445:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/3024#issuecomment-441251445,1,['failure'],['failures']
Availability,The failures unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9633#issuecomment-1017832384:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/9633#issuecomment-1017832384,1,['failure'],['failures']
Availability,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2993#issuecomment-439389917:11,failure,failure,11,https://root.cern,https://github.com/root-project/root/pull/2993#issuecomment-439389917,1,['failure'],['failure']
Availability,The fedora39 failure are unrelated (a system compiler update was not followed by a full rebuild thus leading to a run-time imcompatibility).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15663#issuecomment-2137756002:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/15663#issuecomment-2137756002,1,['failure'],['failure']
Availability,"The file `/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1519` doesn't exist/was removed. I tried to reproduce the error with `1529` by loading the stripped down header file (`root test.h`)instead and I now get a different error message. ```; Processing temp.h... ; In file included from input_line_8:1: ; In file included from /afs/cern.ch/user/d/dvalapar/temp.h:2: ; In file included from /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20: ; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:35:21: error: redefinition of 'CLID_ProtoParticle' ; static const CLID CLID_ProtoParticle = 803; ; ^ ; input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple times, additional include site here ; #include ""/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h"" ; ^ ; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple ; times, additional include site here ; #include ""Event/ProtoParticle.h"" ; ^ ; ...; ...SKIPPED LINES; ...; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:55:9: error: redefinition of 'ProtoParticle' ; class ProtoParticle final : public KeyedObject<int> { ; ^ ; input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple times, additional include site here ; #include ""/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patche",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2161120817:119,error,error,119,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2161120817,4,"['down', 'error']","['down', 'error']"
Availability,"The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1216:241,error,error,241,https://root.cern,https://github.com/root-project/root/pull/1216,1,['error'],['error']
Availability,The fit tutorials errors is; ```; Processing /build/jenkins/workspace/root-pullrequests-build/root/tutorials/fitsio/FITS_tutorial8.C...; Warning in <TFITSHDU::LoadHDU>: error opening FITS file. Details: could not open the named file; libc++abi.dylib: terminating with uncaught exception of type int; CMake Error at /build/jenkins/workspace/root-pullrequests-build/build/RootTestDriver.cmake:238 (message):; error code: Child aborted; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-597148699:18,error,errors,18,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-597148699,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"The fix for newer TBB versions is in master, but 6.22.06 and below cannot use TBB 2021 and above, so CMake should reject these versions during the configuration phase. The error at compilation is known (usage of deprecated functionality which is dropped in TBB 2021.1.1):; ```; root-6.22.06/core/imt/src/TPoolManager.cxx:10:10: fatal error: tbb/task_scheduler_init.h: No such file or directory; #include ""tbb/task_scheduler_init.h""; ^~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6933:172,error,error,172,https://root.cern,https://github.com/root-project/root/issues/6933,2,['error'],['error']
Availability,"The fix is 'simple':; ```; diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx; index 7fe65825ea..656396ffcd 100644; --- a/core/metacling/src/TCling.cxx; +++ b/core/metacling/src/TCling.cxx; @@ -6646,9 +6646,13 @@ void TCling::RefreshClassInfo(TClass *cl, const clang::NamedDecl *def, bool alia; cl->ResetCaches();; TClass::RemoveClassDeclId(cci->GetDeclId());; if (def) {; - // It's a tag decl, not a namespace decl.; - cci->Init(*cci->GetType());; - TClass::AddClassToDeclIdMap(cci->GetDeclId(), cl);; + if (cci->GetType()) {; + // It's a tag decl, not a namespace decl.; + cci->Init(*cci->GetType());; + TClass::AddClassToDeclIdMap(cci->GetDeclId(), cl);; + } else {; + Error(""RefreshClassInfo"", ""Should not need to update the classInfo a non type decl: %s"", oldDef->getNameAsString().c_str());; + }; }; }; } else if (!cl->TestBit(TClass::kLoading) && !cl->fHasRootPcmInfo) {; ```; ```; root [0] namespace std { namespace Detail {} }; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x12ef3d7b0; root [2] namespace Detail {}; Error in <TInterpreter::RefreshClassInfo>: Should not need to update the classInfo a non type decl: Detail; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2372486833:696,Error,Error,696,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2372486833,2,['Error'],['Error']
Availability,"The fix was backported to 6.24 patches (will be available in 6.24/02), closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169#issuecomment-827419391:48,avail,available,48,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-827419391,1,['avail'],['available']
Availability,"The following reproducer uses an excessive amount of memory:. ```python; import ROOT; ROOT.gROOT.SetBatch(True); ROOT.EnableImplicitMT(). h = {}; df = ROOT.RDataFrame('Events', 'DYJetsToLL.root'). # Types with vector<bool> are broken, see #6675; columns = [str(col) for col in df.GetColumnNames() if not 'Bool' in str(df.GetColumnType(col))]. for col in columns:; h[col] = df.Histo1D(col). for col in columns:; c = ROOT.TCanvas(col, col, 600, 600); h[col].Draw(); c.SaveAs(col + '.png'); ```. I could not let the script finish without filling 16GB memory + 20GB swap. Here's the max res size from the interrupted run:. ```bash; $ /usr/bin/time python rep.py ; Command terminated by signal 15; 769.89user 56.57system 3:57.31elapsed 348%CPU (0avgtext+0avgdata 13316884maxresident)k; 17064208inputs+0outputs (215131major+12346853minor)pagefaults 0swaps; ```. And two screenshots of `htop` during the run of the script and right after killing the process. So it's not chrome which fills my memory ;); ![Screenshot from 2020-10-20 14-17-01](https://user-images.githubusercontent.com/6951222/96585018-4df76d00-12df-11eb-921c-eea94afbd06b.png); ![Screenshot from 2020-10-20 14-17-28](https://user-images.githubusercontent.com/6951222/96585045-55b71180-12df-11eb-8001-75f12d2f3030.png). I've used ROOT from conda v6.22/02. You can download the file here (http://opendata.web.cern.ch/record/12353#).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676:1323,down,download,1323,https://root.cern,https://github.com/root-project/root/issues/6676,1,['down'],['download']
Availability,"The following standalone reproducer tells the story. The issue is an error that just appears if we snapshot an empty tree from a chain as input. ```python; import ROOT. # Make two files with a single branch of vector<float>; # NOTE: The bug does not happen with fundamental types; for name in ('file1.root', 'file2.root'):; ROOT.RDataFrame(1).Define('x', 'vector<float>(1)').Snapshot('tree', name). # This runs fine, note that we use just a single file as input.; ROOT.RDataFrame('tree', 'file1.root').Filter('false').Snapshot('tree', 'file3.root'). # This call has a bug and prints the error; # TChain::CopyAddresses:0: RuntimeWarning: Could not find branch named 'x' in tree named 'tree'; ROOT.RDataFrame('tree', ('file1.root', 'file2.root')).Filter('false').Snapshot('tree', 'file3.root'); ```. Present on master in commit ff0c693e49d6857d3c7b089720adc012f379a45e (2020 Oct 8) but also seen in 6.22",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6848:69,error,error,69,https://root.cern,https://github.com/root-project/root/issues/6848,2,['error'],['error']
Availability,The following tutorials need to be disabled in old PyROOT because they; use a pythonization available only in experimental:. ~~tutorials/roofit/rf501_simultaneouspdf.py~~; tutorials/roofit/rf502_wspacewrite.py; tutorials/roofit/rf504_simwstool.py; tutorials/roofit/rf509_wsinteractive.py; tutorials/roofit/rf511_wsfactory_basic.py. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10736,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5529:92,avail,available,92,https://root.cern,https://github.com/root-project/root/pull/5529,1,['avail'],['available']
Availability,"The following, very particular, combination triggers a test failure:; * Fedora 39; * C++20; * ROOT built in Release mode (-O3); * The test `dataframe-vecops`, which needs to be run via ctest and using gtest infrastructure; * The test being compiled in release mode too. The failure is:; ```; 730/2406 Test #393: gtest-tree-dataframe-test-dataframe-vecops ........................................................***Failed 5.01 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RDFAndVecOps; [ RUN ] RDFAndVecOps.ReadStdVectorAsRVec; [ OK ] RDFAndVecOps.ReadStdVectorAsRVec (4678 ms); [ RUN ] RDFAndVecOps.DefineRVec; [ OK ] RDFAndVecOps.DefineRVec (0 ms); [ RUN ] RDFAndVecOps.SnapshotRVec; [ OK ] RDFAndVecOps.SnapshotRVec (6 ms); [ RUN ] RDFAndVecOps.RVecBool; double free or corruption (out); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```. And gdb says:; ```; 0 0x00007f25d4eae834 in __pthread_kill_implementation () from /lib64/libc.so.6; 1 0x00007f25d4e5c8ee in raise () from /lib64/libc.so.6; 2 0x00007f25d4e448ff in abort () from /lib64/libc.so.6; 3 0x00007f25d4e457d0 in __libc_message.cold () from /lib64/libc.so.6; 4 0x00007f25d4eb87a5 in malloc_printerr () from /lib64/libc.so.6; 5 0x00007f25d4eba840 in _int_free_merge_chunk () from /lib64/libc.so.6; 6 0x00007f25d4ebd3de in free () from /lib64/libc.so.6; 7 0x00007f25d6c5efa8 in TList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 8 0x00007f25d6c56566 in THashList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 9 0x00007f25d67235b5 in TDirectoryFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 10 0x00007f25d6741406 in TFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 11 0x00000000004324",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:60,failure,failure,60,https://root.cern,https://github.com/root-project/root/pull/14803,3,"['Error', 'failure']","['Error', 'failure']"
Availability,The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. ; In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12592:57,error,error,57,https://root.cern,https://github.com/root-project/root/issues/12592,2,['error'],"['error', 'errors-in-weighted-tprofiles']"
Availability,The friend.make problem is likely due to a missing dependency in ctest (root-tree-friend-make depends and root-io-event); The windows failure is due to missing M_PI declaration.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3591#issuecomment-479203327:134,failure,failure,134,https://root.cern,https://github.com/root-project/root/pull/3591#issuecomment-479203327,3,['failure'],['failure']
Availability,"The gdb output with your -ex .... H4lAnalRun2 INFO processEvents: try to open file:; root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/90/56/DAOD_HIGG2D1.23315538._000001.pool.root.1; [New Thread 0x2aaae4902700 (LWP 2522)]; [New Thread 0x2aaae50e7700 (LWP 2523)]; [New Thread 0x2aaae58cc700 (LWP 2524)]; [New Thread 0x2aaae60b1700 (LWP 2525)]; [New Thread 0x2aaae6896700 (LWP 2526)]. Program received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x2aaae4902700 (LWP 2522)]; 0x00002aaad6426e5d in __res_context_search () from /lib64/libresolv.so.2. Thread 6 (Thread 0x2aaae6896700 (LWP 2526)):; #0 0x00002aaaac84fbf9 in syscall () from /lib64/libc.so.6; #1 0x00002aaae2becb5d in XrdCl::JobManager::RunJobs() () from; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2; #2 0x00002aaae2bece99 in RunRunnerThread () from; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2; #3 0x00002aaaabfa1ea5 in start_thread () from /lib64/libpthread.so.0; #4 0x00002aaaac8558dd in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x2aaae60b1700 (LWP 2525)):; #0 0x00002aaaac84fbf9 in syscall () from /lib64/libc.so.6; #1 0x00002aaae2becb5d in XrdCl::JobManager::RunJobs() () from; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2; #2 0x00002aaae2bece99 in RunRunnerThread () from; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2; #3 0x00002aaaabfa1ea5 in start_thread () from /lib64/libpthread.so.0; #4 0x00002aaaac8558dd in clone () from /lib64/libc.so.6. Thread 4 (Thread 0x2aaae58cc700 (LWP 2524)):; #0 0x00002aaaac84fbf9 in syscall () from /lib64/libc.so.6; #1 0x00002aaae2becb5d in XrdCl::JobManager::RunJobs() () from; /cvmfs/atlas.cern.ch/repo/sw/softw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760218827:462,fault,fault,462,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760218827,1,['fault'],['fault']
Availability,"The generated compiler invocation in TSystem::CompileMacro doesn't add the `-rpath` option. The output of `root-config --libs` contains that option on MacOS, so we should also have it here. This should fix errors seen in MacOS 14 when loading a shared library obtained via ACLiC. Fixes #13734",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13737:206,error,errors,206,https://root.cern,https://github.com/root-project/root/pull/13737,1,['error'],['errors']
Availability,"The goal is to connect to other slots passing arguments by value, for example TGButton, ChangeText(=""Value was modified""), independently on the specific value set. The other available signals have arguments, so they can not be reused for this purpose.; Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7262:174,avail,available,174,https://root.cern,https://github.com/root-project/root/pull/7262,1,['avail'],['available']
Availability,"The good news is that I have been able to reproduce your success with our build of 6.24/04 and 6.24/06. Unfortunately, I was also able to reproduce our failures with 6.28/00-rc1 in the same environment. I'd be grateful if you could turn your attention to investigating why the fix does not work for more recent ROOT source. BTW: in order to use Ninja, one needs simply to execute `setup ninja` before executing the CMake command.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1401209723:152,failure,failures,152,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1401209723,2,['failure'],['failures']
Availability,The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4704:46,failure,failure,46,https://root.cern,https://github.com/root-project/root/pull/4704,1,['failure'],['failure']
Availability,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-797417462:121,reliab,reliably,121,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462,4,"['failure', 'reliab']","['failures', 'reliably']"
Availability,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:499,redundant,redundant,499,https://root.cern,https://github.com/root-project/root/pull/12010,1,['redundant'],['redundant']
Availability,"The idea was to have an executable that is linked statically against ROOT and other dependencies so that it can be used as the legacy version of a certain software package which is being retired in favour of new software. For example in order to run it using a gitlab runner for various cross-checks without the need to install root from source (multiple times even, for every testing stage) or ship it together with huge CentOS images. For the gitlab this just seems to be almost unfeasible, even with existing root docker containers from the docker hub. I understand that if ROOT was never meant to be used in this way, there just won't be resources to dedicate to this. So I will probably have to find a way to access such an exectuable from somewhere else while running those tests or run them offline. Nevertheless, having the `BUILD_SHARED_LIBS` flag available now can be misleading, that point stands on its own of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8448#issuecomment-865043312:857,avail,available,857,https://root.cern,https://github.com/root-project/root/issues/8448#issuecomment-865043312,1,['avail'],['available']
Availability,"The implementation of `TPython::Eval()` is fragile, and the funcitonality it provides is redundant. One can always communicate between Python and C++ using variables known to the ROOT interpreter. To make the output-variable-pattern easy to use in `TPython::Exec()`, a new output parameter of type `std::any` is introduced. Closes #12182.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175:89,redundant,redundant,89,https://root.cern,https://github.com/root-project/root/pull/16175,1,['redundant'],['redundant']
Availability,"The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12174:482,avail,available,482,https://root.cern,https://github.com/root-project/root/pull/12174,1,['avail'],['available']
Availability,"The incremental, for example: https://epsft-jenkins.cern.ch/job/root-incremental-master/LABEL=ROOT-performance-centos7-multicore,SPEC=default/8204/console; fails with:; ```; CMake Error at interpreter/cling/CMakeLists.txt:178 (message):; NVPTX backend is not activated. Please enable it via -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"". -- Configuring incomplete, errors occurred!; See also ""/data/sftnight/wsincrmaster/LABEL/ROOT-performance-centos7-multicore/SPEC/default/build/CMakeFiles/CMakeOutput.log"".; See also ""/data/sftnight/wsincrmaster/LABEL/ROOT-performance-centos7-multicore/SPEC/default/build/CMakeFiles/CMakeError.log"".; gmake: *** [cmake_check_build_system] Error 1; Command exited with the value: 2; ```; What is the best solution?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4618#issuecomment-551202916:180,Error,Error,180,https://root.cern,https://github.com/root-project/root/pull/4618#issuecomment-551202916,3,"['Error', 'error']","['Error', 'errors']"
Availability,"The installation instructions in the README were outdated: they only; mentioned pre-compiled binaries, while https://root.cern/install offers; a more complete overview of available installation channels. The building instructions were misleading (see e.g.; https://root-forum.cern.ch/t/cmake-generate-step-failed-rhel8/45400/16); and incomplete (they don't mention pre-requisites and make certain; assumptions about `pwd` and directory names).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8457:171,avail,available,171,https://root.cern,https://github.com/root-project/root/pull/8457,1,['avail'],['available']
Availability,"The io/doc/TFile directory (from 2009!) can be used as a descriptive specification, but there are a few points to fix:. * an off-by-one error in the freesegments.txt file (description of `fLast`); * a likely change in the interpretation of the first two bytes of a TDirectory header, from two bools (`Modified` and `Writable`) to a version (`TDirectory::Class_Version()`, which is now `5`); * some missing indicators of how 32-bit values expand into 64-bit values. This PR only addresses the files that it modifies: header.txt, TFile.txt, TDirectory.txt, and freesegments.txt. In cases where I think the format might have changed, I left the original text in the file. If I'm wrong about that, the original text can be deleted. To demonstrate the way TDirectory works now (no `Modified` and `Writable` booleans), the following script creates a file with a few objects and a subdirectory, then interprets its raw bytes to show that the first two bytes of both root directory and subdirectory are `5`, [in agreement with the current class version](https://github.com/root-project/root/blob/df70fffe7e759f35e281f7e52dc81297c0458bfb/core/base/inc/TDirectory.h#L278). Here's the script (Python 3.6+), and below it is sample output. ```python; import datetime; import struct; import uuid. import ROOT. file = ROOT.TFile(""sample.root"", ""recreate""); x = ROOT.TObjString(""one""); x.Write(); file.mkdir(""subdir""); file.cd(""subdir""); y = ROOT.TObjString(""two""); y.Write(); file.Close(). def datime(number):; return datetime.datetime(; ((number & 0b11111100000000000000000000000000) >> 26) + 1995,; ((number & 0b00000011110000000000000000000000) >> 22),; ((number & 0b00000000001111100000000000000000) >> 17),; ((number & 0b00000000000000011111000000000000) >> 12),; ((number & 0b00000000000000000000111111000000) >> 6),; ((number & 0b00000000000000000000000000111111)),; ). file = open(""sample.root"", ""rb""). (; magic,; fVersion,; fBEGIN,; fEND,; fSeekFree,; fNbytesFree,; nfree,; fNbytesName,; fUnits,; fCompress,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7817:136,error,error,136,https://root.cern,https://github.com/root-project/root/pull/7817,1,['error'],['error']
Availability,"The issue happens in this [function](https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1507), when trying to get the return type normalized name of the `helper_function` function in the reproducer above. This is a C++ reproducer of the problem:; ```C++; #include <utility>. template <typename T>; class MySofieFunctorHelper {; };. auto helper_function() -> MySofieFunctorHelper<std::make_index_sequence<1>>; {; return MySofieFunctorHelper<std::make_index_sequence<1>>();; }. void sofie_repro(); {; auto f = gROOT->GetGlobalFunction(""helper_function"");; auto ret_type = f->GetReturnTypeName();; cout << ret_type << endl; // prints MySofieFunctorHelper<make_index_sequence<1> > ; auto ret_type_norm = f->GetReturnTypeNormalizedName(); // breaks; }; ```; When calling `GetReturnTypeNormalizedName()` on the `TFunction` object of `helper_function`, an assertion error shows up. E.g. from lxplus:; ```; [etejedor@lxplus768 ~]$ source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc11-dbg/setup.sh ; [etejedor@lxplus768 ~]$ root -q sofie_repro.C ; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 28 2022, 03:01:00 |; | From heads/master@v6-25-02-1592-ge9fa243 |; | With g++ (GCC) 11.2.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. Processing sofie_repro.C...; MySofieFunctorHelper<make_index_sequence<1> >; root.exe: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/include/clang/AST/TemplateBase.h:257: clang::QualType clang::TemplateArgument::getAsType() const: Assertion `getKind() == Type && ""Unexpected kind""' failed.; ```. I think we need @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10684#issuecomment-1168652229:928,error,error,928,https://root.cern,https://github.com/root-project/root/issues/10684#issuecomment-1168652229,1,['error'],['error']
Availability,"The issue is initially reported and discussed on the ROOT forum [here](https://root-forum.cern.ch/t/rdataframe-tree-friends-branches-with-identical-variable-name-but-different-types/42701/4). ### Describe the bug. RDataFrame has two tree friends.; Both tree friends have a branch with identical name.; Type of a branch in the 1st friend tree: XYZVector; Type of a branch in the 2nd friend tree: vector\<XYZTVector>. 1st friend tree is attached to RDataFrame before 2nd friend tree.; Access of 2nd friend tree branch results in error due to unexpected type of the branch assumed by RDataFrame as shown in the stand alone example bellow. ### To Reproduce. Run this stand alone example:. ```; import ROOT. vectors = '''; #include ""Math/Vector3D.h""; #include ""Math/Vector4D.h""; #include ""TFile.h""; #include ""TTree.h""; #include <vector>; using namespace ROOT::Math;; using namespace ROOT::VecOps;. RVec <double> getArrZ(const RVec<XYZTVector>& vec){; auto getItemZ = [](const XYZTVector& item) { return item.Z(); };; return Map(vec, getItemZ);; }. '''. ROOT.gInterpreter.Declare(vectors). if __name__ == ""__main__"":; ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(10, 10, 10)"").Snapshot(""Particle"", ""f1.root""); ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(20, 20, 20)"").Snapshot(""Cluster"", ""f2.root""); ROOT.RDataFrame(1).Define(""vec"", ""std::vector<XYZTVector>{XYZTVector(30, 30, 30, 30)}"").Snapshot(""Vertex"", ""f3.root""). ch1 = ROOT.TChain(""Particle""); ch1.Add(""f1.root""); ch2 = ROOT.TChain(""Cluster""); ch2.Add(""f2.root""); ch3 = ROOT.TChain(""Vertex""); ch3.Add(""f3.root""). ch1.AddFriend(ch2, ""cluster""); ch1.AddFriend(ch3, ""vertex""). df = ROOT.RDataFrame(ch1); print(df.Define(""particle_z"", ""vec.Z()"").Histo1D(""particle_z"").GetMean()); print(df.Define(""cluster_z"", ""cluster.vec.Z()"").Histo1D(""cluster_z"").GetMean()); print(df.Define(""vertex_z"", ""getArrZ(vertex.vec)"").Histo1D(""vertex_z"").GetMean()); ```. which results in the error on 3rd print. Full output:. ```; 10.0; 20.0; input_line_99:2:142: error: no matc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944:527,error,error,527,https://root.cern,https://github.com/root-project/root/issues/6944,1,['error'],['error']
Availability,"The issue is that if we have two methods (as in `TProfile`):. ```; virtual Int_t Fill(const char *namex, Double_t y, Double_t w); ; ```; and ; ```; virtual Int_t Fill(const char *namex, Double_t y); ; ```; If I set default `w` to 1. `Fill` becomes ambiguous:. ```; root [0] Double_t p1(Double_t x){return x;}; root [1] Double_t p1(Double_t y, Double_t w = 1.){ return y*w; }; root [2] p1(3.2); ROOT_prompt_2:1:1: error: call to 'p1' is ambiguous; p1(3.2); ^~; ROOT_prompt_0:1:10: note: candidate function; Double_t p1(Double_t x){return x;}; ^; ROOT_prompt_1:1:10: note: candidate function; Double_t p1(Double_t y, Double_t w = 1.){ return y*w; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010#issuecomment-590832248:413,error,error,413,https://root.cern,https://github.com/root-project/root/pull/5010#issuecomment-590832248,1,['error'],['error']
Availability,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:; 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible; 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" .; Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide ; a. The slot and the entry if needed; b. The steps needed for the implementation are already well understood; c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used; d. Would seamlessly work in PyROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1133#issuecomment-334451301:312,avail,available,312,https://root.cern,https://github.com/root-project/root/pull/1133#issuecomment-334451301,1,['avail'],['available']
Availability,The jenkins failure appears unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5212#issuecomment-604443691:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/5212#issuecomment-604443691,1,['failure'],['failure']
Availability,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232#issuecomment-1245087471:40,failure,failure,40,https://root.cern,https://github.com/root-project/root/pull/11232#issuecomment-1245087471,1,['failure'],['failure']
Availability,"The jupyter notebook test fails because of:; ```; [NbConvertApp] ERROR | Permissions assignment failed for secure file: '/tmp/tmpnbhpku44.json'. Got '0o655' instead of '0o0600'.; ```; This issue is mentioned at https://github.com/jupyter/notebook/issues/5058. For me setting `JUPYTER_RUNTIME_DIR` did not work (it did not change the location of the file). The problem was ""solved"" by setting:; ```; JUPYTER_ALLOW_INSECURE_WRITES=true; ```; at the price of seeing this message:; ```; WARNING: Insecure writes have been enabled via environment variable 'JUPYTER_ALLOW_INSECURE_WRITES'! If this is not intended, remove the variable or set its value to 'False'.; ```. This is possibly due to my docker (well I mean `podman`) to be configured to use the ""overlay"" driver. List of test:; ```; 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242#issuecomment-2292474568:65,ERROR,ERROR,65,https://root.cern,https://github.com/root-project/root/issues/16242#issuecomment-2292474568,1,['ERROR'],['ERROR']
Availability,The larger discussion about whether `ROOT.std.any` should be available by default is probably better suited for upstream cppyy (https://github.com/wlav/cppyy).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11647#issuecomment-1297291759:61,avail,available,61,https://root.cern,https://github.com/root-project/root/issues/11647#issuecomment-1297291759,1,['avail'],['available']
Availability,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/781#issuecomment-316369254:37,error,error,37,https://root.cern,https://github.com/root-project/root/pull/781#issuecomment-316369254,2,['error'],['error']
Availability,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:168,error,errors,168,https://root.cern,https://github.com/root-project/root/pull/11394,2,['error'],['errors']
Availability,The last failure may be related to the LLVM 16 upgrade (maybe),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13900#issuecomment-1867017695:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/13900#issuecomment-1867017695,1,['failure'],['failure']
Availability,The last push was only tested on mac11 and mac12; mac1015 seems completely broken with 300+ test failures...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11424#issuecomment-1274154636:97,failure,failures,97,https://root.cern,https://github.com/root-project/root/pull/11424#issuecomment-1274154636,1,['failure'],['failures']
Availability,"The last remaining Jenkins failures are not from this PR, so ready for review @lmoneta @guitargeek @hageboeck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694#issuecomment-884108582:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/8694#issuecomment-884108582,1,['failure'],['failures']
Availability,"The last test failures are different to the ones this PR wanted to solve. They are related to not finding ipython, similar to what was observed in the 32 bit machine:. `sh: ipython3: command not found`. So it has nothing to do with the changes of this PR. I am therefore merging to fix the first issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5478#issuecomment-620720704:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/5478#issuecomment-620720704,1,['failure'],['failures']
Availability,"The last three commits are for Cling's CUDA support. It still doesn't fully work on my machine, but the errors are the same as `master` with LLVM 9 (complains about not finding symbols from `libcudart.so` even though that has been loaded; could be related to the CUDA version?) *without* assertions that I see tripping on `master`. Do we know which setup used to work for these tests? Maybe I'll have to install older versions of CUDA...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1092999970:104,error,errors,104,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1092999970,1,['error'],['errors']
Availability,"The latest commit reintroduces the `Option_t*` parameter in `TChain::SetEntryList` and adds another possible value for it `""sync""`. With this new option, we can support the usecase described in this PR while still relying on the preexisting default behaviour. The option assumes that there is a 1:1 mapping between the trees in the chain and the sub lists in the entry list. This assumption is verified in two ways:; 1. The number of sub lists is equal to the number of trees in the chain. If not, the following error is thrown; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the number of sub entry lists in the input TEntryList (1) is not equal to the number of files in the chain (2); Aborted (core dumped); ```; 2. That each sub list corresponds to the correct treename, filename at the same index in the chain. If not, the following error is thrown:; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the sub entry list at index 1 doesn't correspond to treename 'entries' and filename 'file_20entries_1.root': it has treename 'entries' and filename 'file_20entries_2.root'; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660#issuecomment-879923488:512,error,error,512,https://root.cern,https://github.com/root-project/root/pull/8660#issuecomment-879923488,2,['error'],['error']
Availability,The left over failures are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5038#issuecomment-589285884:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/5038#issuecomment-589285884,1,['failure'],['failures']
Availability,"The line.cxx example has been modified accordingly. But when executed it gives errors messages like:; error: no matching literal operator for call to 'operator""""_normal'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1915:79,error,errors,79,https://root.cern,https://github.com/root-project/root/pull/1915,2,['error'],"['error', 'errors']"
Availability,The linked PR fixes the problem with `compiledata.sh` mentioned above. The next thing that fails is at build time:. ```; [ 0%] Generating include/module.modulemap; /usr/bin/cmake -E copy /home/blue/ROOT/root\ sources/build/unix/module.modulemap /home/blue/ROOT/root\ sources/cmake-build-foo/include/module.modulemap; cat /home/blue/ROOT/root\\ sources/cmake-build-foo/include/module.modulemap.extra >> /home/blue/ROOT/root\\ sources/cmake-build-foo/include/module.modulemap; cat: sources/cmake-build-foo/include/module.modulemap.extra: No such file or directory; cat: sources/cmake-build-foo/include/module.modulemap: No such file or directory; make[2]: *** [CMakeFiles/copymodulemap.dir/build.make:75: include/module.modulemap] Error 1; make[2]: *** Deleting file 'include/module.modulemap'; make[2]: Leaving directory '/home/blue/ROOT/root sources/cmake-build-foo'; make[1]: *** [CMakeFiles/Makefile2:7772: CMakeFiles/copymodulemap.dir/all] Error 2; make[1]: Leaving directory '/home/blue/ROOT/root sources/cmake-build-foo'; make: *** [Makefile:156: all] Error 2; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7311#issuecomment-1070979646:729,Error,Error,729,https://root.cern,https://github.com/root-project/root/issues/7311#issuecomment-1070979646,3,['Error'],['Error']
Availability,"The linking of rootcling_stage1 and libCling requires a lot of memory.; Since these are linked from mostly the same objects, the build is ready; to link them at the same time. If you make a parallel build this means; that the two targets that require the most amount of memory are being; linked in parallel. This exhausts the available memory, and the; computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is; not really there since it is not needed for building, but it prevents the; two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes; (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between; rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1516:326,avail,available,326,https://root.cern,https://github.com/root-project/root/pull/1516,1,['avail'],['available']
Availability,"The logic in `TDecompLU` where a separate `bool` was tracking if a given; pointer should be ""deleted"" caused some compiler errors warnings like:. ```; root/math/matrix/src/TDecompLU.cxx: In static member function ‘static Bool_t TDecompLU::InvertLU(TMatrixD&, Double_t, Double_t*)’:; root/math/matrix/src/TDecompLU.cxx:883:17: warning: ‘void operator delete [](void*)’ called on unallocated object ‘workd’ [-Wfree-nonheap-object]; 883 | delete [] pWorkd;; | ^~~~~~; root/src/root/math/matrix/src/TDecompLU.cxx:847:13: note: declared here; 847 | Double_t workd[kWorkMax];; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10582:123,error,errors,123,https://root.cern,https://github.com/root-project/root/pull/10582,1,['error'],['errors']
Availability,The logs are reporting:. > fatal error: vdt/vdtMath.h: No such file or directory. That doesn't sound like this PR...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1946#issuecomment-385921030:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/1946#issuecomment-385921030,1,['error'],['error']
Availability,The long line produces a syntax error. The `</text>` was truncated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1928901732:32,error,error,32,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1928901732,1,['error'],['error']
Availability,"The long tests requested by @lmoneta finished now. There are indeed some test failures on `ROOT-debian10-i386/default` that seem related to this PR, which I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11435#issuecomment-1259344577:78,failure,failures,78,https://root.cern,https://github.com/root-project/root/pull/11435#issuecomment-1259344577,1,['failure'],['failures']
Availability,"The mac failure seems infrastructure related:; ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756#issuecomment-637158026:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/5756#issuecomment-637158026,1,['failure'],['failure']
Availability,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12264#issuecomment-1487038195:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/12264#issuecomment-1487038195,1,['failure'],['failure']
Availability,"The mac1014 error on macphsft17 is due the difference of opinion between XCode 11, MacOS 10.14 and CMake on which version and what part of python to use ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4603#issuecomment-548464807:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/4603#issuecomment-548464807,1,['error'],['error']
Availability,The mac11 failures are likely spurious. The machine is unstable; I'm doing hardware debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7586#issuecomment-801929212:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/7586#issuecomment-801929212,1,['failure'],['failures']
Availability,"The mac11.0/cxx17 error is unrelated:; ```; + ""SystemError: initialization of libcppyy3_8 did not return an extension module\n""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952#issuecomment-746398818:18,error,error,18,https://root.cern,https://github.com/root-project/root/pull/6952#issuecomment-746398818,1,['error'],['error']
Availability,"The mac11.0/cxx17 failure is unrelated: `""SystemError: initialization of libcppyy3_8 did not return an extension module\n""`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-749179953:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-749179953,1,['failure'],['failure']
Availability,The mac11/cxx17 failures are pre-existing (issues with template instantiations in cling),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9581#issuecomment-1016604187:16,failure,failures,16,https://root.cern,https://github.com/root-project/root/pull/9581#issuecomment-1016604187,1,['failure'],['failures']
Availability,"The macos failure are unrelated and 'seem' to be due to an environment setup problem.; The error is not finding the davix library:; ```; +Error in <TInterpreter::TCling::AutoLoad>: failure loading library libRDAVIX.so for TDavixFile; +cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; + Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; + Reason: image not found; ```; and loading on the machine running 'setup.sh' and thisroot.sh lead to inconsistent results; ```; cd /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/roottest/root/io/webfile; root.exe -b -l -q runCloseTWebFile.C; Processing runCloseTWebFile.C...; ```; succeeds whereas the jenkins builds failed this test.; Loading the library explicit also works:; ```; macitois19:build sftnight$ root.exe -b -l ; gSroot [0] gSystem->Load(""libRDAVIX.so""); (int) 0; ```; but running rootls fails; ```; macitois19:build sftnight$ /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/bin/rootls -1 http://root.cern.ch/files/pippa.root; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; Reason: image not found; Error in <TInterpreter::TCling::AutoLoad>: failure loading library libRDAVIX.so for TDavixFile; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; Reason: image not found; WARNING: File http://root.cern.ch/files/pippa.root does not exist; ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1517#issuecomment-358462709:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/1517#issuecomment-358462709,6,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"The macos failure is an infrasture issue:; ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7794#issuecomment-814363593:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/7794#issuecomment-814363593,1,['failure'],['failure']
Availability,"The macos failure is infrastructure related (git area needs cleanup, an incomplete apply has left traces).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6519#issuecomment-704565558:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/6519#issuecomment-704565558,1,['failure'],['failure']
Availability,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6668#issuecomment-714750071:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/6668#issuecomment-714750071,1,['failure'],['failure']
Availability,The macos failures are unrelated:; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/root-pullrequests-build/build/lib/MathCore.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'MathMore' in '/build/jenkins/workspace/root-pullrequests-build/build/lib/MathMore.pcm'; Module ; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6251#issuecomment-680943135:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/6251#issuecomment-680943135,2,"['error', 'failure']","['error', 'failures']"
Availability,"The macos1014 failure is due to CMake not finding NumPy and Development for Python3, to be solved by installing them in the node.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5764#issuecomment-638014286:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/5764#issuecomment-638014286,1,['failure'],['failure']
Availability,"The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via; `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:95,redundant,redundant,95,https://root.cern,https://github.com/root-project/root/pull/677,1,['redundant'],['redundant']
Availability,"The main motivation concerning speedup is that currently, the documentation takes between 5 and 7 hours to build, which makes it hard to debug and improve. The 'slow part' happens in 'filter.cxx' (which does some parsing that slows down doxygen), as well as when the tutorials are run. That being said, I did not benchmark if pre-compiling makes things considerably faster, so maybe this PR is not worth it, I agree...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075133935:232,down,down,232,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075133935,1,['down'],['down']
Availability,"The minimizer test quite often did not converge. As a result there were; many spurious test failures. The test is tuned to converge _much_ more reliably by increasing the; learning rate (0.0001 -> 0.001), and the number of early stopping epochs; (5 -> 50). This commit also makes the `testMinimization` test the minimizer; _without_ using momentum (this code path was previously untested here). The following code was used to benchmark changes (only single precision; part of the test was tested and some aux text was commented out if you; want to reproduce):; ```; for i in `seq 100`; do tmva/tmva/test/DNN/testMinimizationCpu; done | awk '{print $6;}' | python -c 'import numpy; import fileinput; a = map(float, fileinput.input()); print(numpy.std(a), numpy.mean(a), numpy.min(a), numpy.max(a))'; ```. Results (typical values):; - Old version: 2.70*10^{-7} (std dev), 3.34*10^5 (mean), 2.27*10^{-6} (min), 0.0017 (max); - New verstion: 2.59 * 10^{-6} (std dev), 2.51*10*{-6} (mean), 1.16*10*{-7} (min), 1.37*10^{-5} (max). Time taken is roughly doubled (~1 sec -> ~2 secs). All results on local mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:92,failure,failures,92,https://root.cern,https://github.com/root-project/root/pull/1958,2,"['failure', 'reliab']","['failures', 'reliably']"
Availability,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4360#issuecomment-529219111:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/pull/4360#issuecomment-529219111,1,['failure'],['failure']
Availability,The multicore test failure is unrelated (and fixed by https://github.com/root-project/roottest/pull/535),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5780#issuecomment-638990942:19,failure,failure,19,https://root.cern,https://github.com/root-project/root/pull/5780#issuecomment-638990942,1,['failure'],['failure']
Availability,"The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then); * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11606:874,down,downstream,874,https://root.cern,https://github.com/root-project/root/pull/11606,1,['down'],['downstream']
Availability,The new CI failures is expected and solved by the yet to be review https://github.com/root-project/root/pull/14052,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1894433859:11,failure,failures,11,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1894433859,1,['failure'],['failures']
Availability,The new CI is able to trigger this kind of error in distrdf tests; ```; Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written.; ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1658478151:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1658478151,3,"['Error', 'error']","['Error', 'error']"
Availability,"The newest ROOT version in LCG dev3 nightlies crashes in a situation where the earlier versions (<6.27) printed this message:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState: ; Missing FileEntry for TestClassPrimitives.h ; requested to autoload type TestClassPrimitives ; ```; Now I see this stack trace instead:. ```; #0 0x00007fffebc82b61 in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState(clang::Decl*, std::pair<llvm::StringRef, llvm::StringRef>)::{lambda(llvm::StringRef, bool)#1}::operator()(llvm::StringRef, bool) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #1 0x00007fffebc835ac in cling::AutoLoadingVisitor::VisitDecl(clang::Decl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #2 0x00007fffebc970c9 in clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseCXXRecordDecl(clang::CXXRecordDecl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #3 0x00007fffebc8274a in cling::AutoloadCallback::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #4 0x00007fffebc64088 in cling::MultiplexInterpreterCallbacks::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #5 0x00007fffebce26f7 in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #6 0x00007fffebce5429 in cling::IncrementalP",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11933:132,Error,Error,132,https://root.cern,https://github.com/root-project/root/issues/11933,1,['Error'],['Error']
Availability,"The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568:72,failure,failures,72,https://root.cern,https://github.com/root-project/root/pull/1568,1,['failure'],['failures']
Availability,"The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4742:41,avail,available,41,https://root.cern,https://github.com/root-project/root/pull/4742,1,['avail'],['available']
Availability,"The number of cores available in the Dask cluster object, i.e. those; that are already known to the scheduler, can be retrieved from the; client object through the `ncores()` method. In some cases, the scheduler has no information about the worker; nodes when the user first creates it. Most notably, when connecting; to batch resources with e.g. an HTCondorCluster. In this case, the; number of cores is actually known only when the resource manager; starts the requested jobs and this can happen much later in the; application. In these cases, we can infer the number of cores that; will be available from the specification that was passed by the user; to when creating the cluster object. This is stored in dictionary; attributes of the cluster itself. In order to dispatch the logic on the types of clusters that; connect to batch computing resources, we have to import also the; dask_jobqueue module, which effectively becomes another runtime; dependency when using the Dask backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10747:20,avail,available,20,https://root.cern,https://github.com/root-project/root/pull/10747,2,['avail'],['available']
Availability,The numerous failures are fixed by this PR https://github.com/root-project/root/pull/13696,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13700#issuecomment-1729505757:13,failure,failures,13,https://root.cern,https://github.com/root-project/root/pull/13700#issuecomment-1729505757,1,['failure'],['failures']
Availability,"The old PyROOT (pre 2019) had a slightly different `atexit` handler than the new one. The hard shutdown mode is different: `ClearProxiedObjects()` is called before the final `gROOT->EndOfProcessCleanups()`. I had the impresstion that this is redundant, and indeed the old PyROOT didn't do it. This commit suggests to only call `ClearProxiedObjects()` in soft shutdown mode, in an attempt to avoid the frequent crashes seen at the end of PyROOT tutorials, especially on Ubuntu 24.10. See also the original PRs where this functionality was introduced:. * https://github.com/root-project/root/pull/4687; * https://github.com/root-project/root/pull/4753",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16671:242,redundant,redundant,242,https://root.cern,https://github.com/root-project/root/pull/16671,1,['redundant'],['redundant']
Availability,"The old client library libXrdClient is removed.; Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already; disabled by default - give error if someone enables it while building; with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6031:168,error,error,168,https://root.cern,https://github.com/root-project/root/pull/6031,2,['error'],['error']
Availability,The one failure is unrelated (externals not downloading).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11908#issuecomment-1398356597:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/11908#issuecomment-1398356597,2,"['down', 'failure']","['downloading', 'failure']"
Availability,The one failure is unrelated (seems to be a problem with dependency in roottest's cmake.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-466483143:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-466483143,1,['failure'],['failure']
Availability,"The one failure on Fedora 39 is unrelated:; ```; Failed; test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT ... ERROR. ======================================================================; ERROR: test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libb2; - libgomp; If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------; Ran 1 test in 1.405s. FAILED (errors=1); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1836056879:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1836056879,6,"['ERROR', 'Error', 'error', 'failure']","['ERROR', 'Error', 'error', 'errors', 'failure']"
Availability,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1155#issuecomment-334969829:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/1155#issuecomment-334969829,1,['failure'],['failure']
Availability,"The only error caused by latest TObject changes, already fixed by Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7346#issuecomment-791284263:9,error,error,9,https://root.cern,https://github.com/root-project/root/pull/7346#issuecomment-791284263,1,['error'],['error']
Availability,"The only failure is due to TMVA, merging this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15385#issuecomment-2085195395:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/15385#issuecomment-2085195395,1,['failure'],['failure']
Availability,"The only failure is due to missing Windows nodes. It is unclear why the Jenkins CI build is stuck in the ""Pending - Building"" phase. See https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/8935/console for the actual results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2911#issuecomment-485504073:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/2911#issuecomment-485504073,1,['failure'],['failure']
Availability,The only failure is fedora28/native which is due to the 'shared_ptr' incompatibility crash: https://sft.its.cern.ch/jira/browse/ROOT-9704 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2731#issuecomment-426438908:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/2731#issuecomment-426438908,1,['failure'],['failure']
Availability,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2281#issuecomment-402768878:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/2281#issuecomment-402768878,1,['failure'],['failure']
Availability,The only failure is the missing Windows nodes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1993#issuecomment-485444398:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/1993#issuecomment-485444398,2,['failure'],['failure']
Availability,"The only test failure happens for very obscure reasons only when LLVM is built in release mode. We use the linkage cache which is for some reason computed as internal. We can fix the problem by removing the `using` clause. ```cpp; #include ""ROOT/TDataFrame.hxx"" ; using namespace ROOT::Experimental; // The using clause causes the misbehavior. void test_readTotemNtuple() {; TDataFrame d(0);; auto validate_x = [](){ };; d.Foreach(validate_x);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-376315166:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-376315166,1,['failure'],['failure']
Availability,"The original idea was a one-time check to see if we could successfully create a small `io_uring` instance (checking for errors like `ENOSYS`). Even then, the implementation was not ideal because it only tried to construct a `RIoUring` with queue depth 1, while the default constructor uses a much larger depth of 1024, so systems with low memlock limits will run right into this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-823492207:120,error,errors,120,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823492207,1,['error'],['errors']
Availability,"The original idea was to have to interface GetBulkEntries and GetEntriesSerialized where in the former the byte-swap is done by the routine and in the later the byte-swap is done by the user. (See SimpleReadFunc vs SimpleBulkReadFunc in https://github.com/root-project/root/blob/28f728b67b5409580ec0ba4d71fa9ab35683fb26/tree/tree/test/BulkApi.cxx). GetBulkEntries was updating the buffer associated with the TBasket in place and thus is no longer reusable (unless the leaf reading was non destructive .. for example for char). GetEntriesSerialized was not modifying the buffer and hence did not care about the destructiveness ... It looks like somewhere down the line (likely around the time we introduced the TBufferFile as the content passing mechanism) this distinction became moot (GetBulkEntries is discarding the basket anyway and in the lastest PR, I have to make a copy when it make not be done) .... . But then again, scanning through the git history, I am even more confused ... (why would TLeafF ever be considered non-destructive ...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-701717286:654,down,down,654,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701717286,1,['down'],['down']
Availability,"The original issue is with some python tutorial failing on macOS nodes due to; ```; <TNetXNGFile::Open>: [FATAL] Auth failed; ```; Which in turn is due to a failure in loading some xrootd security libraries, among which; ```; [Error ][Utility ] Unable to pre-load libXrdSecpwd.so: Plugin unable to load libXrdSecpwd-4.so; dlopen(libXrdSecpwd-4.so, 256): image not found; ```. This happens because the library depends on other libraries (`libXrdCrypto`, `libXrdUtils`) and cannot find them since the `@rpath` palceholder is not substituted with the correct path to the libraries directory at runtime.; While this is true for the xrootd libraries in `build/lib`, it's not for the ones in `build/XROOTD-prefix/../src` which have the `LC_RPATH` variable set. The difference can be shown with `otool -l`; ```; $ otool -l build/lib/libXrdSecpwd-4.so > libXrdSecpwd_buildlib.txt; $ otool -l build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so > libXrdSecpwd_xrootdprefixlib.txt; $ diff libXrdSecpwd_buildlib.txt libXrdSecpwd_xrootdprefixlib.txt; < build/lib/libXrdSecpwd-4.so:; ---; > build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so:; 307a308,311; > cmd LC_RPATH; > cmdsize 80; > path /Users/sftnight/vpadulan/build/XROOTD-prefix/src/XROOTD-build/src (offset 12); > Load command 14; 312c316; < Load command 14; ---; ```. This `LC_RPATH` variable is set for our own libraries, e.g. `libHtml.so`; ```; $ otool -l build/lib/libHtml.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/build/lib (offset 12); ```; But for some reason this information is lost after building `builtin_xrootd` (probably while installing the libraries from the prefix to the install directory). A way to solve this is by manually adding the `CMAKE_INSTALL_RPATH` option to the `cmake` invokation of `builtin_xrootd` as is done in this PR. The result is:; ```; $ otool -l build/lib/libXrdSecpwd-4.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128:157,failure,failure,157,https://root.cern,https://github.com/root-project/root/pull/6128,2,"['Error', 'failure']","['Error', 'failure']"
Availability,The osx failure is because the bot could not upload the successful build & test to cdash.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631270380:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631270380,1,['failure'],['failure']
Availability,The other PRs' failures of `unloadCMS` are due to the `assert` fixed by this PR; the failures of this PR in `unloadCMS` are new. I heard rumors that making MLP an option (that was made an option and which wasn't enabled in the Jenkins builds) migt have triggered this. That indeed hints at an independent issue. - See https://github.com/root-project/root/pull/3918 for the fix; - MLP is now re-enabled in Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499486279:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499486279,2,['failure'],['failures']
Availability,"The other RMergeableValue types return a `T&` from the `GetValue` method, so I don't see an immediate parallel with this method that returns a `const vector<unique_ptr<RMergeableValue<T>>&`. So I'm probably missing something (again) but possible solutions might be to have a `RMergeableVariations<T>::GetValue(const std::string &variation) -> T&`, which is the generalization of `RMergeableValue<T>::GetValue` that I would expect, or for `RMergeableVariations<T>` to have its own typed data member `fValues` and do the downcast once in the converting constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9942#issuecomment-1061954514:519,down,downcast,519,https://root.cern,https://github.com/root-project/root/pull/9942#issuecomment-1061954514,1,['down'],['downcast']
Availability,"The output using [this build script](https://github.com/peter-jansson/appnuc/blob/eeb736f4137591f86a2070231f3fb1e8b3d7c8a9/scripts/install-root.sh) is available [here](https://github.com/peter-jansson/appnuc/runs/5468207882?check_suite_focus=true). The log indicated more error log information in a XROOTD build log file, which is copy/pasted below. It is indeed v5.4.1 but some other error compared to before in this issue thread. Perhaps the pthread libraries shipped with Alpine Linux is missing `pthread_rwlockattr_setkind_np` et.c.?. ```; [I] No git repository info found. Trying to interpret VERSION_INFO; [I] Using the user supplied version: v5.4.1; [I] src/XrdVersion.hh successfully generated; In file included from /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysE2T.cc:35:; /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/./XrdSys/XrdSysPthread.hh: In constructor 'XrdSysRWLock::XrdSys; RWLock(XrdSysRWLock::PrefType)':; /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/./XrdSys/XrdSysPthread.hh:357:30: error: 'PTHREAD_RWLOCK_PREFER; _WRITER_NONRECURSIVE_NP' was not declared in this scope; 357 | PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/./XrdSys/XrdSysPthread.hh:356:22: error: 'pthread_rwlockattr_se; tkind_np' was not declared in this scope; did you mean 'pthread_rwlockattr_setpshared'?; 356 | pthread_rwlockattr_setkind_np(&attr,; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; | pthread_rwlockattr_setpshared; /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/./XrdSys/XrdSysPthread.hh: In member function 'void XrdSysRWLoc; k::ReInitialize(XrdSysRWLock::PrefType)':; /.../root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD/src/./XrdSys/XrdSysPthread.hh:373:22: error: 'PTHREAD_RWLOCK_PREFER; _WRITER_NONRECURSIVE_NP' was not declared in this scope; 373 | PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);; | ^~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9173#issuecomment-1062037565:151,avail,available,151,https://root.cern,https://github.com/root-project/root/issues/9173#issuecomment-1062037565,3,"['avail', 'error']","['available', 'error']"
Availability,"The overload taking a path opens the file and then `mmap` its contents. This can cause bus errors when another process truncates the file while we are trying to read it. Instead just read the first 1024 bytes, which should be enough for `identify_magic` to do its work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11174:91,error,errors,91,https://root.cern,https://github.com/root-project/root/pull/11174,1,['error'],['errors']
Availability,"The overload taking a path opens the file and then `mmap` its contents. This can cause bus errors when another process truncates the file while we are trying to read it. Instead just read the first 1024 bytes, which should be enough for `identify_magic` to do its work. (cherry picked from commit 588e13c4da4a63427ef156f2624f5a5a15bfd298). Backport of PR https://github.com/root-project/root/pull/11174",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11187:91,error,errors,91,https://root.cern,https://github.com/root-project/root/pull/11187,1,['error'],['errors']
Availability,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12242#issuecomment-1499201970:174,ping,pinged,174,https://root.cern,https://github.com/root-project/root/issues/12242#issuecomment-1499201970,1,['ping'],['pinged']
Availability,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13793#issuecomment-1771755592:132,error,error,132,https://root.cern,https://github.com/root-project/root/pull/13793#issuecomment-1771755592,1,['error'],['error']
Availability,"The platform is Linux (Debian 9).; The full compilation errors for `RDFInterfaceUtils.cxx` is:; ```; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx: In lambda function:; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx:155:39: error: call of overloaded ‘basic_string(std::remove_reference<TString&>::type)’ is ambiguous; return std::string(std::move(ss));; ^; In file included from GCC-8.2.0-linux64/include/c++/8.2.0/string:52,; from root-6.24.00/core/meta/inc/TSchemaHelper.h:17,; from root-6.24.00/core/meta/inc/TGenericClassInfo.h:21,; from root-6.24.00/core/base/inc/Rtypes.h:191,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/RColumnReaderBase.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/ColumnReaderUtils.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/RAction.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:14,; from root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx:11:; GCC-8.2.0-linux64/include/c++/8.2.0/bits/basic_string.h:3562:7: note: candidate: ‘std::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’; basic_string(basic_string&& __str); ^~~~~~~~~~~~; GCC-8.2.0-linux64/include/c++/8.2.0/bits/basic_string.h:3545:7: note: candidate: ‘std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’; basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());; ^~~~~~~~~~~~; GCC-8.2.0-linux64/include/c++/8.2.0/bits/basic_string.h:3498:7: note: candidate: ‘std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’; basic_string(const basic_string& __str);; ^~~~~~~~~~~~; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx: In function ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8477#issuecomment-864130448:56,error,errors,56,https://root.cern,https://github.com/root-project/root/pull/8477#issuecomment-864130448,2,['error'],"['error', 'errors']"
Availability,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3096#issuecomment-446889677:52,avail,available,52,https://root.cern,https://github.com/root-project/root/pull/3096#issuecomment-446889677,2,['avail'],['available']
Availability,The previous errors with the VM was due to incorrect setup of the Debian distro (dependency resolution failure related to a messed-up `source.list`). `Thank you for your patience!. All the tests passed after running `./stressGraphics`; ```; Create ./cernstaff.root; (TFile *) nullptr; **********************************************************************; * Starting Graphics - S T R E S S suite *; **********************************************************************; * Starting Basic Graphics - S T R E S S *; **********************************************************************; Test 1: TLine..................................................... OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 2: TMarker................................................... OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 3: TPolyLine................................................. OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 4: Fill patterns............................................. OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1128447944:13,error,errors,13,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1128447944,2,"['error', 'failure']","['errors', 'failure']"
Availability,"The problem here is that the lambda you are passing to the constructor of `TF1` is a temporary that is (can be) garbage collected right after the constructor call of `TF1` returns. That's what the `callable was deleted` error is saying. If you define the lambda beforehand and bind it to a variable so that it's still alive when you draw, you can solve that problem (notice also that the lambda needs to accept two parameters instead of one):; ```python; from ROOT import TF1; l = lambda x, p: x[0]; f = TF1('f', l, 0, 1); f.Draw(); ```. The fact that it was working with other versions of Python was by pure chance (the object was still not deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9465#issuecomment-998030606:220,error,error,220,https://root.cern,https://github.com/root-project/root/issues/9465#issuecomment-998030606,2,"['alive', 'error']","['alive', 'error']"
Availability,The problem is I don't know what `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` could be; we cannot forward declare and we cannot include `json_fwd.hpp` nor the full `json.hpp`. The last PR just errors in this case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1220358720:184,error,errors,184,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1220358720,1,['error'],['errors']
Availability,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2365248206:483,fault,faulty,483,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206,4,"['error', 'fault']","['error', 'faulty']"
Availability,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? ; If not please add the correct errors and the test will work correctly. ; In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. ; Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13697#issuecomment-1750792805:59,error,errors,59,https://root.cern,https://github.com/root-project/root/issues/13697#issuecomment-1750792805,3,['error'],"['error', 'errors']"
Availability,"The problem was not even AutoParsing, it was that we're failing to unload any function.; For example, this fails:; ```; root [0] struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; root [1] .L lib/libEdm.so; root [2] .L lib/libStrip.so; root [3] Marker m1;; root [4] Marker m2;; root [5] Marker(); (Marker) @0x559ab2f03100; root [6] .undo 3; root [7] SiStripCluster *s; ; root [8] SiStripCluster obj; ; SiStripCluster; ROOT_prompt_8:1:16: error: variable has incomplete type 'SiStripCluster'; SiStripCluster obj;; ^; libStrip dictionary forward declarations' payload:5:132: note: forward declaration of 'SiStripCluster'; class __attribute__((annotate(R""ATTRDUMP(splitLevel@@@0)ATTRDUMP""))) __attribute__((annotate(""$clingAutoload$SiStripCluster.h""))) SiStripCluster;; ```. Some evil side effect is happening when a function is called..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435986645:447,error,error,447,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435986645,2,['error'],['error']
Availability,"The problem with this test is that it is comparing an analytical; solution of the derivative against the center difference formula; f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact.; The choice of dx was too large for the tolerance accepted for the; maximum relative error. Using a smaller dx for the center difference; calculation fixes this issue by reducing the error in the numerical; derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/534:239,toler,tolerance,239,https://root.cern,https://github.com/root-project/root/pull/534,3,"['error', 'toler']","['error', 'tolerance']"
Availability,The prune-container step would have to run `n_runners` times in a matrix to be helpful and it also pollutes the PR job overview. Additionally it shouldn't be the job of the workflow definition to do node maintenance. Decided to move this functionality in the puppet files instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12309#issuecomment-1429827363:204,mainten,maintenance,204,https://root.cern,https://github.com/root-project/root/pull/12309#issuecomment-1429827363,1,['mainten'],['maintenance']
Availability,"The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:; 1. The wording of the error message; 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this; ```python; >>> import ROOT; >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor; raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])); ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead.; ```; ```; $: root.exe; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |; | From heads/master@v6-25-02-1893-ge1d4a59786 |; | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};; Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead; ```; ```; $: ./",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11063:158,error,error,158,https://root.cern,https://github.com/root-project/root/pull/11063,6,"['Error', 'down', 'error']","['Error', 'downside', 'error', 'error-distrdf-release', 'errors']"
Availability,"The python failure are due xrootd authentication problem. The root-meta-tclass, root-io-buffer and root-io-transient test were not run due to a build system issue (probably due to a ROOT rebuild triggered by ctest because of the ar timestamp bug)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6062#issuecomment-672318996:11,failure,failure,11,https://root.cern,https://github.com/root-project/root/pull/6062#issuecomment-672318996,1,['failure'],['failure']
Availability,The pythonization RDataFrame.AsNumpy looks for the attribute; RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found.; This error can not be triggered if ROOT is imported but is raised if; RDataFrame is accessed through cppyy.gbl. This PR implements a; protection for this skipping the pythonization if the pythonizer; function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4362:124,error,error,124,https://root.cern,https://github.com/root-project/root/pull/4362,2,['error'],['error']
Availability,"The pythonizations suggested in this issue have been implemented, so it can be closed. For any further specific RooFit pythonization ideas, please open a new issue or a PR directly. The Pythonization of RooArgLists that I suggested before is not so useful after all, because now that RooArgLists can be replaced by Python lists to begin with it would be redundant to reimplement the list behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7217#issuecomment-1155603383:354,redundant,redundant,354,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-1155603383,1,['redundant'],['redundant']
Availability,"The recently introduced pythonizations for the RDataFrame API allow passing; Python callables to operations such as Define and Filter, but there is no; support for other operations. For now, hide this functionality for the 6.28; release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12053:255,avail,available,255,https://root.cern,https://github.com/root-project/root/pull/12053,1,['avail'],['available']
Availability,"The remaining errors on mac1014/cxx17 :. https://github.com/root-project/root/pull/4766#issuecomment-573734088. are due to the the fact that some Python2.7 headers (e.g. https://github.com/python/cpython/blob/2.7/Include/unicodeobject.h#L534) still use the `register` keyword, which is not supported anymore in cxx17. Since Python2 is not maintained anymore, those headers will not be updated to support cxx17. Therefore, users of Python2.7 should either not compile with cxx17 or migrate to Python3.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4766#issuecomment-573750464:14,error,errors,14,https://root.cern,https://github.com/root-project/root/pull/4766#issuecomment-573750464,1,['error'],['errors']
Availability,The remaining failures should be gone when the docker image for the Linux platforms is updated tonight with the `onnx` Python package included:; https://github.com/root-project/root/pull/14685,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15288#issuecomment-2067716150:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/15288#issuecomment-2067716150,1,['failure'],['failures']
Availability,"The remaining test failures on MacOS are trickier than previous ones. I built with debug symbols on the CI nodes and I could get the following stack trace; ```; [/Users/sftnight/vpadulan/rootproject/rootinstall/batch-generator-debug/lib/libCling.so] TClingCallFunc::compile_wrapper(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) /Users/sftnight/vpadulan/rootproject/rootsrc/core/metacling/src/TClingCallFunc.cxx:144; [/Users/sftnight/vpadulan/rootproject/rootinstall/batch-generator-debug/lib/libCling.so] TClingCallFunc::make_wrapper() /Users/sftnight/vpadulan/rootproject/rootsrc/core/metacling/src/TClingCallFunc.cxx:1016; [/Users/sftnight/vpadulan/rootproject/rootinstall/batch-generator-debug/lib/libCling.so] TClingCallFunc::IFacePtr() /Users/sftnight/vpadulan/rootproject/rootsrc/core/metacling/src/TClingCallFunc.cxx:1728; [/Users/sftnight/vpadulan/rootproject/rootinstall/batch-generator-debug/lib/libCling.so] TCling::CallFunc_IFacePtr(CallFunc_t*) const /Users/sftnight/vpadulan/rootproject/rootsrc/core/metacling/src/TCling.cxx:7886; [/Users/sftnight/vpadulan/rootproject/rootinstall/batch-generator-debug/lib/libcppyy_backend3_9.so] GetCallFunc(long) /Users/sftnight/vpadulan/rootproject/rootsrc/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:734; ```. Which points to problems in `TClingCallFunc`. Now, most probably it is true that `compile_wrapper` needs a lock (as well as many other places in `TClingCallFunc`, but adding the lock did not fix the failure on the CI node unfortunately. One particularity in `TClingCallFunc` w.r.t. other files that were changed in this PR is that the locks that are currently already present use the macro `R__LOCKGUARD_CLING` instead of `R__LOCKGUARD`, so some different strategy might be needed here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1656714911:19,failure,failures,19,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1656714911,2,['failure'],"['failure', 'failures']"
Availability,"The replacements removes the -Werror option for externals, which is intended.; However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5902:186,failure,failures,186,https://root.cern,https://github.com/root-project/root/pull/5902,1,['failure'],['failures']
Availability,"The reproducer fails for me with a seg fault and the following valgrind report:; ```; ==2486== Invalid read of size 2; ==2486== at 0x48529E0: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so); ==2486== by 0x10DCD2: reproducer(TFile*) (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak); ==2486== by 0x10DF26: main (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak); ==2486== Address 0x22d38604 is 6,878,660 bytes inside a block of size 6,878,661 alloc'd; ==2486== at 0x484A2F3: operator new[](unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so); ==2486== by 0x4BB2526: TStorage::ReAllocChar(char*, unsigned long, unsigned long) (TStorage.cxx:283); ==2486== by 0x4B5B6C2: TBuffer::Expand(int, bool) (TBuffer.cxx:242); ==2486== by 0x55E1855: R__InitializeReadBasketBuffer(TBuffer*, int, TFile*) (TBasket.cxx:418); ==2486== by 0x55E21FF: TBasket::ReadBasketBuffers(long long, int, TFile*) (TBasket.cxx:585); ==2486== by 0x55F3590: TBranch::GetBasketImpl(int, TBuffer*) (TBranch.cxx:1266); ==2486== by 0x55F3D62: TBranch::GetBasketAndFirst(TBasket*&, long long&, TBuffer*) (TBranch.cxx:1388); ==2486== by 0x55F45BE: TBranch::GetEntriesSerialized(long long, TBuffer&, TBuffer*) (TBranch.cxx:1550); ==2486== by 0x10E0A6: TBranch::GetEntriesSerialized(long long, TBuffer&) (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak); ==2486== by 0x10E13F: ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized(long long, TBuffer&) (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak) ; ==2486== by 0x10DC17: reproducer(TFile*) (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak); ==2486== by 0x10DF26: main (in /home/pcanal/root_working/test/2022-tree/bulk-leak/bulkleak); ```. which may or may not be the same issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11853#issuecomment-1341827725:39,fault,fault,39,https://root.cern,https://github.com/root-project/root/issues/11853#issuecomment-1341827725,1,['fault'],['fault']
Availability,"The reproducer is the following line in the ROOT prompt:. ```cpp; ROOT::RDataFrame(""Events"", ""DYJetsToLL.root"").Histo1D(""Muon_tightId"").GetValue();; ```. The stack trace is as follows:. ```; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:303:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &x0 : x0s) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillParHelper<TH1D>::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > > >::Run' requested here; RAction(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' re",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:309,error,error,309,https://root.cern,https://github.com/root-project/root/issues/6675,1,['error'],['error']
Availability,The required backports in LLVM are available here: https://github.com/hahnjo/root/tree/riscv-backports,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12351#issuecomment-1435933224:35,avail,available,35,https://root.cern,https://github.com/root-project/root/pull/12351#issuecomment-1435933224,1,['avail'],['available']
Availability,"The return type of `foo(int)` is `void`, which causes an assertion failure in `lib/Interpreter/Value.cpp:163`: ""Type not supported"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282:67,failure,failure,67,https://root.cern,https://github.com/root-project/root/pull/13282,1,['failure'],['failure']
Availability,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:415,Failure,Failures,415,https://root.cern,https://github.com/root-project/root/pull/8491,1,['Failure'],['Failures']
Availability,The roofit error on ROOT-ubuntu16/nortcxxmod are pre-existing (see https://github.com/root-project/root/pull/3760#issuecomment-858157849),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-858165761:11,error,error,11,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-858165761,1,['error'],['error']
Availability,"The roostats error is once again llvm related, and not to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10811#issuecomment-1163521087:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/10811#issuecomment-1163521087,1,['error'],['error']
Availability,"The root cause of the dataframe test failures is probably the same as for https://github.com/root-project/root/issues/7366 . It is related to cling, @jalopezg-r00t was looking into it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823924036:37,failure,failures,37,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823924036,1,['failure'],['failures']
Availability,"The roottest-python-cmdLineUtils test sometimes fails with error along the line of:; ```; 16/22 Test #1217: roottest-python-cmdLineUtils-SimpleRootrm1CheckOutput .......***Failed 0.86 sec; -- TEST COMMAND --; cd /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /home/pcanal/root_working/build/master-debug/bin/rootls -1 victim1.root; -- BEGIN TEST OUTPUT --; dir; hprof; hprof; hpxpy; hpxpy; tof. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/pcanal/root_working/code/root/roottest/python/cmdLineUtils/SimpleRootrm.ref Thu Dec 3 17:25:54 2020; +++ /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils/SimpleRootrm1CheckOutput.log Fri Jan 15 15:57:03 2021; @@ -1,4 +1,6 @@; dir; hprof; +hprof; +hpxpy; hpxpy; tof. -- END OUTDIFF OUTPUT --. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7054:59,error,error,59,https://root.cern,https://github.com/root-project/root/issues/7054,1,['error'],['error']
Availability,"The same issue exists for the Double32_t data type.; ```cpp; #include <TFile.h>; #include <TTreeReader.h>. int main() {; {; TFile f(""d32.root"", ""recreate"");; TTree t(""t"", ""t"");; double x = 42.;; t.Branch(""x"", &x, ""x/d"");; t.Fill();; f.Write();; }. {; TFile f(""d32.root"");; TTreeReader r(""t"", &f);; TTreeReaderValue<Double32_t> rv(r, ""x"");; r.Next();; }; return 0;; }; ```. Error produced:; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch x contains data of type Double32_t, which does not have a dictionary.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10645#issuecomment-1155350629:373,Error,Error,373,https://root.cern,https://github.com/root-project/root/issues/10645#issuecomment-1155350629,2,['Error'],['Error']
Availability,"The same symptom also appears if I try to make a field for a class with no default constructor:; ```python; import ROOT. ROOT.gInterpreter.Declare(""""""\; class NoDefaultCtor {; public:; NoDefaultCtor(int x) : data1_(x) {};. private:; int data1_;; };; """"""). model = ROOT.Experimental.RNTupleModel.Create(). try:; model.MakeField[""NoDefaultCtor""](""test""); except ValueError as ex:; print(ex). # fails; model.MakeField[""std::vector<float>""](""test2""); ```. There, I even get; ```; cling JIT session error: Failed to materialize symbols: { (main, { _ZSt7forwardIRPN4ROOT12Experimental6Detail10RFieldBaseEEOT_RNSt16remove_referenceIS6_E4typeE }) }; ```; which is very weird, why would we be making the symbol; ```; ROOT::Experimental::Detail::RFieldBase*& std::forward<ROOT::Experimental::Detail::RFieldBase*&>(std::remove_reference<ROOT::Experimental::Detail::RFieldBase*&>::type&); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13910#issuecomment-1772929625:494,error,error,494,https://root.cern,https://github.com/root-project/root/issues/13910#issuecomment-1772929625,1,['error'],['error']
Availability,"The second ""bigger"" problem are the `filemerger` tests on macOS AArch64 that compare the expected compressed file size of `hsimple.root`. These turn out to be caused by how LLVM 16 optimizes `pz = px*px + py*py;` in `hsimple.C`, resulting in slightly different floating point results and therefore different compression. I have no really good solution here other than updating the expected reference sizes / their tolerance. An alternative would be to check in a ""known"" `hsimple.root` and not generate it on the fly. What do you think @pcanal ?. edit: I found a better solution by disabling floating point contractions when producing `hsimple.root` for these tests, see https://github.com/root-project/roottest/pull/989.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1649423962:414,toler,tolerance,414,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1649423962,1,['toler'],['tolerance']
Availability,"The second cases you report seem unrelated at a first look:; ```; In module 'Vc':; /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Vc/1.4.2/x86_64-centos7-gcc11-opt/include/Vc/common/simdarray.h:501:18: error: 'Vc_1::SimdArray<type-parameter-0-0, N, type-parameter-0-2, N>::SimdArray<type-parameter-0-0, N, type-parameter-0-2, N>' from module 'Vc' is not present in definition of 'SimdArray<type-parameter-0-0, N, type-parameter-0-2, N>' in module 'Vc'; Vc_INTRINSIC SimdArray(private_init_t, VectorType &&x) : data(std::move(x)) {}; ^; ```. and. ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' is out of date and needs to be rebuilt: signature mismatch; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/MathCore.pcm'; input_line_4:2:2: error: unknown type name 'include'; #include ""TError.h""; ^; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015627319:214,error,error,214,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015627319,3,['error'],['error']
Availability,"The second kind of error (`no constructor available for 'TChain'`) happens when invoking the constructor of TChain from `__init__`, in particular an overload with default arguments. The issue is that a match does not happen with the `(const char *name, const char *title="""")` overload when just providing `name`. This needs to be fixed. @Allen319 , as a temporary workaround in case you need it, you can do `n = Ntuple(""DataTree"", """")` instead of `n = Ntuple(""DataTree"")` and that should prevent the constructor error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6467#issuecomment-704100330:19,error,error,19,https://root.cern,https://github.com/root-project/root/issues/6467#issuecomment-704100330,3,"['avail', 'error']","['available', 'error']"
Availability,"The signature has to match the declaration in RooAbsArg.h:. ```C++; std::ostream& operator<<(std::ostream& os, const RooAbsArg &arg);; ```. This problem was spotted by users in the forum:; https://root-forum.cern.ch/t/error-while-extracting-getrealvalue-of-roorealvar-defined-with-range/44922/6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8208:218,error,error-while-extracting-getrealvalue-of-roorealvar-defined-with-range,218,https://root.cern,https://github.com/root-project/root/pull/8208,1,['error'],['error-while-extracting-getrealvalue-of-roorealvar-defined-with-range']
Availability,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2583#issuecomment-425675655:118,error,error,118,https://root.cern,https://github.com/root-project/root/pull/2583#issuecomment-425675655,1,['error'],['error']
Availability,"The std.condition_variable module can be exported via the std.condition_variable; module or std.memory. On some platforms (gcc10) that causes definition mismatch; problems of kind:. In module 'std' imported from input_line_1:1:; c++/10.3.0/bits/unique_ptr.h:208:12: error: 'std::__uniq_ptr_data<std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >, std::default_delete<std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > > >, true, true>' has different definitions in different modules; definition in module 'std.condition_variable' is here; struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>; ^; /c++/10.3.0/bits/unique_ptr.h:208:12: note: definition in module 'std.condition_variable' is here. Try fixing cms-sw/cmssw#36700",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9566:266,error,error,266,https://root.cern,https://github.com/root-project/root/pull/9566,1,['error'],['error']
Availability,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719#issuecomment-2427294206:869,error,error,869,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206,2,['error'],['error']
Availability,"The test errors are due to a bug in my implementation, will fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5667#issuecomment-631991854:9,error,errors,9,https://root.cern,https://github.com/root-project/root/pull/5667#issuecomment-631991854,1,['error'],['errors']
Availability,The test failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8932#issuecomment-917159968:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/8932#issuecomment-917159968,1,['failure'],['failure']
Availability,The test failure can be ignored it is due to PR #4988.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4985#issuecomment-586208971:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/4985#issuecomment-586208971,1,['failure'],['failure']
Availability,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1271#issuecomment-341643407:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/1271#issuecomment-341643407,1,['failure'],['failure']
Availability,The test failure in [fit/combinedFit.py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/135926/testReport/projectroot/runtutorials/tutorial_fit_combinedFit_py/) is unrelated see https://github.com/root-project/root/pull/3760#issuecomment-1026103150.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486#issuecomment-1026290791:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/9486#issuecomment-1026290791,1,['failure'],['failure']
Availability,The test failure is due to #4988 which was a hotfix for 09934e9d6a2a55248efca3ad9659e684850b2426,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4987#issuecomment-586209411:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/4987#issuecomment-586209411,1,['failure'],['failure']
Availability,"The test failure is real, the test reference needs updating too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12875#issuecomment-1563106183:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/12875#issuecomment-1563106183,1,['failure'],['failure']
Availability,The test failure is related to the std::string case. Is the desired behaviour here really to loop over characters? (and allow them to be implicitly converted to doubles when filling a TH1D for example),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-994577581:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-994577581,1,['failure'],['failure']
Availability,"The test failure is resolved by avoiding the `oss.str()` check https://github.com/root-project/root/pull/7879#discussion_r653468750, we will apply the same changes here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7749#issuecomment-866125500:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/7749#issuecomment-866125500,1,['failure'],['failure']
Availability,The test failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14356#issuecomment-1895629055:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/14356#issuecomment-1895629055,1,['failure'],['failure']
Availability,"The test failure is unrelated (and should be fixed by https://github.com/root-project/root/pull/8352), merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8349#issuecomment-855884266:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/8349#issuecomment-855884266,1,['failure'],['failure']
Availability,The test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953#issuecomment-327518536:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/953#issuecomment-327518536,1,['failure'],['failure']
Availability,The test failure is unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7914#issuecomment-822476558:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/7914#issuecomment-822476558,1,['failure'],['failure']
Availability,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4414#issuecomment-534549047:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/4414#issuecomment-534549047,1,['failure'],['failure']
Availability,The test failure of centos7/gcc49 is because that platform is lacking a BLAS installation and cannot run DNN. Should I remove the DNN from the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1514#issuecomment-358025605:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/1514#issuecomment-358025605,1,['failure'],['failure']
Availability,"The test failure on Windows is real, @ikabadzhov can you please investigate with @bellenot 's help when you are back?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10607#issuecomment-1141231952:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/10607#issuecomment-1141231952,1,['failure'],['failure']
Availability,The test failure on fedora28/native are unrelated (likely race condition in cmake/ctest or lack of cleanup),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2691#issuecomment-424830883:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/2691#issuecomment-424830883,1,['failure'],['failure']
Availability,The test failure on mac13 is not due to the changes of this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2324674072:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2324674072,1,['failure'],['failure']
Availability,"The test failure on macOS should be https://github.com/root-project/root/pull/9314, now backporting in https://github.com/root-project/root/pull/9408. Not sure about the failure on Ubuntu, but cannot be related to this PR since the changes only touch PPC, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9407#issuecomment-990824535:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/9407#issuecomment-990824535,2,['failure'],['failure']
Availability,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1125#issuecomment-334084833:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/1125#issuecomment-334084833,1,['failure'],['failure']
Availability,The test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3550#issuecomment-473619991:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/3550#issuecomment-473619991,1,['failure'],['failure']
Availability,"The test failure was related to this PR, the problem was with the `PUBLIC` keyword in combination with `INSTALL_INTERFACE`. I pushed an equivalent change that does not break the test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-368563308:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-368563308,1,['failure'],['failure']
Availability,"The test failures are all due to "" Could not resolve host: github.com""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16624#issuecomment-2398117893:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/16624#issuecomment-2398117893,1,['failure'],['failures']
Availability,The test failures are due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6043#issuecomment-660543813:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/6043#issuecomment-660543813,1,['failure'],['failures']
Availability,The test failures are errors that were previously silent and are there at least since the switch to lexertk. Not sure what to do about them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3407#issuecomment-462061881:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/3407#issuecomment-462061881,2,"['error', 'failure']","['errors', 'failures']"
Availability,"The test failures are just due to a reference that needs updating, will do asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10653#issuecomment-1137776625:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/10653#issuecomment-1137776625,1,['failure'],['failures']
Availability,"The test failures are not related to this PR, they are present in the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-590248656:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-590248656,1,['failure'],['failures']
Availability,"The test failures are related, I will look again at `ReadObjectAny` internals.; I think some of the failures are harmless (a new line added to the log, e.g. `roottest-root-io-emulated-make` ), but some are perhaps real errors because I didn't call `ReadObjectAny` with `0` as an argument e.g. `roottest-root-io-cpp11Containers-unorderedSet`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6016#issuecomment-656284583:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656284583,3,"['error', 'failure']","['errors', 'failures']"
Availability,"The test failures are unrelated (mac1015/cxx17 : python configuration problem. WIndows: test with known problem, this time ""maybe"" related to the message `Warning in <TClassTable::Add>: class ROOT::Detail::TTypedIter<class TEnumConstant> already in TClassTable`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6519#issuecomment-701711449:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/6519#issuecomment-701711449,1,['failure'],['failures']
Availability,"The test failures are unrelated, are we ready to merge this @couet or you need to make further changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3676#issuecomment-483624530:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/3676#issuecomment-483624530,1,['failure'],['failures']
Availability,The test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2715#issuecomment-425667017:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/2715#issuecomment-425667017,1,['failure'],['failures']
Availability,The test failures are unrelated. This can be merged,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7139#issuecomment-780143074:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/7139#issuecomment-780143074,1,['failure'],['failures']
Availability,"The test failures look real, @ikabadzhov can you take a look at what's going on?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10040#issuecomment-1059007431:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/10040#issuecomment-1059007431,1,['failure'],['failures']
Availability,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1133#issuecomment-334287020:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/1133#issuecomment-334287020,1,['failure'],['failures']
Availability,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-895859603:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603,2,['failure'],['failures']
Availability,"The test failures seems to come from a slightly difference in the Poisson implementation between TMath::Poisson(n,mu) and ROOT::Math::poisson_pdf(n,mu) for n = 0.; In teh first case it was computing 1./exp(mu) while in the second exp(-mu). For small mu (e.g. mu= 0.001) the results is different at one bit level. exp(-mu) is more correct and I think we should then update the tests reference files",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5477#issuecomment-620689786:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/5477#issuecomment-620689786,1,['failure'],['failures']
Availability,The test failures seems unrelated (library compilation/loading failure),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8228#issuecomment-848055016:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/8228#issuecomment-848055016,2,['failure'],"['failure', 'failures']"
Availability,"The test is broken with `-march=native` on my machine without this fix. Tolerance seems too strict in some places. I am using `1.0e-12` relative error, which amounts to a few times epsilon for `double`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2832:72,Toler,Tolerance,72,https://root.cern,https://github.com/root-project/root/pull/2832,2,"['Toler', 'error']","['Tolerance', 'error']"
Availability,"The test output is; ```; cd /mnt/build/jenkins/workspace/root-pullrequests-build/build/roottest/root/aclic/misc; /mnt/build/jenkins/workspace/root-pullrequests-build/build/bin/root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/jenkins/workspace/root-pullrequests-build/build/roottest/root/aclic/misc"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/jenkins/workspace/root-pullrequests-build/build/roottest/root/aclic/misc"")' -e 'gROOT->SetMacroPath(""/mnt/build/jenkins/workspace/root-pullrequests-build/roottest/root/aclic/misc"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/jenkins/workspace/root-pullrequests-build/build/roottest/root/aclic/misc"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/jenkins/workspace/root-pullrequests-build/build/externals//mnt/build/jenkins/workspace/root-pullrequests-build/install/include"")' -q -l -b /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/root/aclic/misc/runrelpath.C; -- BEGIN TEST OUTPUT --. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/root/aclic/misc/runrelpath.C...; In file included from <<< cling interactive line includer >>>:1:; /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/root/aclic/misc/script.C:4:10: fatal error: 'nested_dir1.h' file not found; #include ""nested_dir1.h""; ^~~~~~~~~~~~~~~; ```. Just cd-ing there, starting ROOT and running the script might reproduce it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-352393921:1740,error,error,1740,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-352393921,1,['error'],['error']
Availability,The test roottest/root/meta/genreflex/ROOT-5768 currently include `boost` header files and thus is disable. This test the `--interpreteronly` flag of genreflex. See https://sft.its.cern.ch/jira/browse/ROOT-5768. The test needs to be trimmed down to no longer include the boost header files OR rewritten without them.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11484:241,down,down,241,https://root.cern,https://github.com/root-project/root/issues/11484,1,['down'],['down']
Availability,The test succeeds with master (https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-handler/29326/console) and thus the failure is directly connected (however odd it looks).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863415572:134,failure,failure,134,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863415572,1,['failure'],['failure']
Availability,The testForeignDraw failure seems to be more subtil. It 'only' fails on 2 platforms. Do we understand why?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775#issuecomment-430160653:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/pull/2775#issuecomment-430160653,1,['failure'],['failure']
Availability,The tests failed on fedora38 are unrelated:; ```console; The following tests FAILED:; 	106 - gtest-core-metacling-test-TClingLoadUnloadFile (Failed); 	116 - test-webgui-ping (Failed); 	1095 - tutorial-rcanvas-rline.cxx (Failed); 	1187 - tutorial-rcanvas-df104-py (Failed); 	1188 - tutorial-rcanvas-df105-py (Failed); 	1577 - roottest-python-regression-regression (Failed); ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13371#issuecomment-1662021455:169,ping,ping,169,https://root.cern,https://github.com/root-project/root/pull/13371#issuecomment-1662021455,1,['ping'],['ping']
Availability,"The tests that are added in this PR work with Cl, but there are still failures because of this:; * https://github.com/vgvassilev/clad/issues/890. It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107150086:70,failure,failures,70,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107150086,1,['failure'],['failures']
Availability,"The things we need to do before merging this PR and can probably be done by various people in parallel. Cling standalone:; - [x] Fix cling CUDA tests; - [ ] Fix the remaining test failures (6, see below); - [x] Revert the commit 'FIXME: Undo this change and debug why we have PendingInstances.'. <details>; <summary>Cling test failures</summary>. Failures in `master` on my system:; ```; Cling :: CodeUnloading/PCH/VTables.C; Cling :: DynamicLibraryManager/callable_lib_L_AB_order1.C; ```. Remaining failures (excluding the ones above):; ```; Cling :: CodeGeneration/Symbols.C; Cling :: CodeUnloading/AtExit.C; Cling :: CodeUnloading/PCH/VTablesClingPCH.C; Cling :: CodeUnloading/RereadFile.C; Cling :: ErrorRecovery/StoredState.C; Cling :: MultipleInterpreters/MultipleInterpreters.C; ```; </details>. ROOT:; - [x] Compare the build size against master; - [x] Compare the `.pcm` file size against master; - [ ] Add flags to ignore compilation warnings coming from llvm; - [x] Remove the FIXME from commit 'Add another symbol generator to resolve the generated lazy symbol' - the explanation is in the commit; - [x] Fix the llvm::StringRef conversion failures on OSX. <details>; <summary>; Binary Size this PR needs 13% more space (2.3 vs 2. GB); </summary>. ```; du -hs root-release-llvm13; 2.3G	.; (base) vvassilev@vv-nuc /build/vvassilev/root-release-llvm13 $ du -hs ../root-release-master/; 2.0G	../root-release-master/; ```. </details>. <details>; <summary>; Module files need ~5% more space on disk (215 vs 206 MB); </summary>. ```; diff -y llvm13 master ; 424K	lib/ASImageGui.pcm				 |	444K	lib/ASImageGui.pcm; 468K	lib/ASImage.pcm					 |	484K	lib/ASImage.pcm; 4.2M	lib/_Builtin_intrinsics.pcm			 |	4.0M	lib/_Builtin_intrinsics.pcm; 48K	lib/_Builtin_stddef_max_align_t.pcm		 |	44K	lib/_Builtin_stddef_max_align_t.pcm; 200K	lib/Cling_Runtime_Extra.pcm			 |	132K	lib/Cling_Runtime_Extra.pcm; 100K	lib/Cling_Runtime.pcm					100K	lib/Cling_Runtime.pcm; 11M	lib/Core.pcm					 |	9.6M	lib/Core.pcm; 56",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294:180,failure,failures,180,https://root.cern,https://github.com/root-project/root/pull/10294,5,"['Error', 'Failure', 'failure']","['ErrorRecovery', 'Failures', 'failures']"
Availability,The transient Windows error is a known race condition in the roottest build system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11261#issuecomment-1232028318:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/11261#issuecomment-1232028318,1,['error'],['error']
Availability,"The travis-ci fails on the piece of code which was not affected by my patch, apparently the RootClingMain has a general potential problem of dereferencing of a nullptr:; ````; +RESULT_OUTPUT='/home/travis/build/root-project/root/core/dictgen/src/rootcling_impl.cxx:4892:7: error: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]. modGen.WriteRegistrationSource(*dictStream, fwdDeclnArgsToKeepString, headersClassesMapString, fwdDeclsString,. ^; ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609401998:273,error,error,273,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609401998,2,['error'],"['error', 'errors']"
Availability,"The triggering issue for these modifications was the presence of such errors in our CI (see for example https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/176461/consoleFull):; ```; /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx: In member function ‘void ROOT::Internal::RDF::RVariedAction<Helper, PrevNode, ColumnTypes_t>::InitSlot(TTreeReader*, unsigned int)’:; /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:106:7: error: reference to ‘RDFInternal’ is ambiguous; RDFInternal::RColumnReadersInfo info{GetColumnNames(), GetColRegister(), fIsDefine.data(), *fLoopManager};; ^~~~~~~~~~~. In file included from /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/src/RResultPtr.cxx:13:0:; /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RResultPtr.hxx:95:44: note: candidates are: namespace ROOT::RDF::RDFInternal = ROOT::Internal::ROOT::Internal::RDF;; namespace RDFInternal = ROOT::Internal::RDF;; ^; In file included from /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RResultPtr.hxx:16:0,; from /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/src/RResultPtr.cxx:13:; /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RLoopManager.hxx:99:44: note: namespace ROOT::Detail::RDF::RDFInternal = ROOT::Internal::ROOT::Internal::RDF;; namespace RDFInternal = ROOT::Internal::RDF;; ```. The errors refer to the definition of `namespace RDFInternal` in both RResultPtr.hxx and RLoopManager.hxx. To be more precise, the namespace alias was defined:; * Inside of namespace `ROOT::RDF` within RResultPtr.hxx; * Inside of namespace `ROOT::Detail::RDF` within RLoopManager.hxx. Although this is not a real issue per se, the ambiguity spawns from the fact that some headers included; ```; using namespace ROOT::Detail::RDF;; using namespace ROOT::RDF;; ```; For example in ROOT/RDF/U",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12981:70,error,errors,70,https://root.cern,https://github.com/root-project/root/pull/12981,2,['error'],"['error', 'errors']"
Availability,"The tutorial is actually using the SPlots class wrong. It is calculating; sWeights for the isolation based on the invariant mass and the isolation; itself. That’s wrong. For sPlots, the control variable should not be in; the set of discriminating variables for the likelihood fit! See; https://arxiv.org/pdf/physics/0402083.pdf. That means when using the SPlot class, you should exclude the isolation; variable from the dataset that you pass. Big thanks to Dongliang for reporting this on the ROOT Forum!. https://root-forum.cern.ch/t/strange-results-in-rs301-splot-c. A second commit applies some other improvements to the tutorial:. * Code modernization. * Don't define number of events in toy data redundantly. * Add also plots of isolation models",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11475:701,redundant,redundantly,701,https://root.cern,https://github.com/root-project/root/pull/11475,1,['redundant'],['redundantly']
Availability,The tutorial on manual data conversion from TTree to RNTuple has been removed now that the importer is available. The importer comes with its own tutorial (`ntpl008_import`). The importer handles VLA correctly. Closing this. Please feel free to reopen if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996#issuecomment-2381901509:103,avail,available,103,https://root.cern,https://github.com/root-project/root/issues/13996#issuecomment-2381901509,1,['avail'],['available']
Availability,"The tutorial will trigger errors with python 3.8, tracked by [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5175#issuecomment-601745334:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/5175#issuecomment-601745334,1,['error'],['errors']
Availability,"The two JupyROOT test failures are not caused by this PR, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5570#issuecomment-625684626:22,failure,failures,22,https://root.cern,https://github.com/root-project/root/pull/5570#issuecomment-625684626,1,['failure'],['failures']
Availability,The two build failures were unrelated to the work discussed here. Let's wait for tomorrow to check the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4640#issuecomment-572169702:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/4640#issuecomment-572169702,1,['failure'],['failures']
Availability,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:971,error,errors,971,https://root.cern,https://github.com/root-project/root/pull/8065,1,['error'],['errors']
Availability,"The two specializations for the relative_error functions were removed this [commit](https://github.com/root-project/root/commit/43aac3fb4bc5f215ac3cb7755791372f05a5da72) by @amadio. However, the; general function template does not protect against the division by values that are numerically close; to zero and lead to large relative errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/798:333,error,errors,333,https://root.cern,https://github.com/root-project/root/pull/798,1,['error'],['errors']
Availability,"The unit test for RooWorkspace tests failures when importing models into the workspace.; Since RooFit will print `ERROR` messages, it looks like there is a problem in the test.; The error messages are now silenced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3379:37,failure,failures,37,https://root.cern,https://github.com/root-project/root/pull/3379,3,"['ERROR', 'error', 'failure']","['ERROR', 'error', 'failures']"
Availability,"The unittest works as intended, as do the requirements at `requirements.txt`. ROOT does not enforce any build-time Python dependencies (except for `numpy`) and the packages listed in `requirements.txt`. The unittest is merely checking that our test suite will find the packages it needs for the *optional*, *runtime* dependencies that we want to test ourselves. What happened is the following:; 1. There was the necessity to start testing a certain subset of TMVA, which was never tested before (see https://github.com/root-project/root/issues/15197); 2. The packages were added to `requirements.txt` so that the docker images built for Linux runners of the new CI infrastructure could pick them up (the images are built nightly and they install in the virtual environment of the docker container all the packages in `requirements.txt` available in `master` at the time of building the image).; 3. Jenkins has been disabled since more than a week now so these packages were not manually installed on the Linux nodes of the old Jenkins instance. So I will close this issue as everything was working as intended. Jenkins builds should not longer appear for PRs as far as I am aware. If there is the necessity, a member of the team can manually install those packages on the Jenkins nodes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2050606767:836,avail,available,836,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2050606767,1,['avail'],['available']
Availability,"The unused parameter warnings would be fixed with this PR: https://github.com/zeromq/libzmq/pull/4211. The dtor-name warnings are fixed in a later ZeroMQ version. I first want to include the RooFitZMQ and MultiProcess things before I start changing the ZeroMQ version, to avoid introducing potential errors already (didn't try it yet). If a newer version doesn't work, I will suppress the warnings for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-858556647:300,error,errors,300,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-858556647,1,['error'],['errors']
Availability,"The use case in question is like this:; For reasons of cross-validation, it has become a customary technique within ATLAS (and probably other collaborations as well) to construct a ""Hybrid Dataset"", that is equal to the real data in the control regions, but only contains asimov data in the signal region (""partically unblinded""). If you want to have both the Hybrid Dataset and the Dataset in the same workspace to reduce the bookkeeping and turnaround time of the unblinding procedure (first only look at hybrid data, and if the fit to hybrid data looks okay, also look at real data), the most convenient way to do this would be to include it from the get-go using this feature, rather than having to somehow construct or import it down the line when the workspace already exists, or to maintain two completely different workspaces that have the same model and only different datasets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10538#issuecomment-1122140490:734,down,down,734,https://root.cern,https://github.com/root-project/root/issues/10538#issuecomment-1122140490,1,['down'],['down']
Availability,"The user could modify the content of the original TFile, which holds a portion of the data in the TTree, i.e. https://gist.github.com/vepadulano/ed0644351771d97ff2624f0ddf015b83. I get the output; ```; Fill: Switching to new file: tree_setmaxsize_seq_1.root; Fill: Switching to new file: tree_setmaxsize_seq_2.root; Entries in tree: Error in <TFile::ReadBuffer>: error reading all requested bytes from file tree_setmaxsize_seq_2.root, got 270 of 300; Error in <TFile::Init>: tree_setmaxsize_seq_2.root failed to read the file type data.; 15966; ```. Maybe it's just something that we leave to the thoughtful user to avoid?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528#issuecomment-702258885:333,Error,Error,333,https://root.cern,https://github.com/root-project/root/pull/6528#issuecomment-702258885,3,"['Error', 'error']","['Error', 'error']"
Availability,The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3435:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/3435,1,['error'],['error']
Availability,"The warnings are still there:; ```txt; In file included from /home/rembserj/spaces/master/root/src/root/io/rootpcm/src/rootclingIO.cxx:19:; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TProtoClass.h:50:10: error: declaration shadows a variable in the global namespace [-Werror,-Wshadow]; 50 | kIsPointer = BIT(2), // data member is a pointer; | ^; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TDictionary.h:78:4: note: previous declaration is here; 78 | kIsPointer = 0x00001000,; | ^; In file included from /home/rembserj/spaces/master/root/src/root/io/rootpcm/src/rootclingIO.cxx:22:; In file included from /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:18:; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TVirtualStreamerInfo.h:77:7: error: declaration shadows a variable in the global namespace [-Werror,-Wshadow]; 77 | kIsCompiled = BIT(16),; | ^; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TDictionary.h:86:4: note: previous declaration is here; 86 | kIsCompiled = kIsCCompiled,; | ^; In file included from /home/rembserj/spaces/master/root/src/root/io/rootpcm/src/rootclingIO.cxx:22:; In file included from /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:18:; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TVirtualStreamerInfo.h:91:59: error: declaration shadows a variable in the global namespace [-Werror,-Wshadow]; 91 | kBase = 0, kOffsetL = 20, kOffsetP = 40, kCounter = 6, kCharStar = 7,; | ^; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TDataType.h:34:4: note: previous declaration is here; 34 | kCounter = 6, kCharStar = 7, kBits = 15 /* for compatibility with TStreamerInfo */,; | ^; In file included from /home/rembserj/spaces/master/root/src/root/io/rootpcm/src/rootclingIO.cxx:22:; In file included from /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:18:; /home/rembserj/spaces/master/root/src/root/core/meta/inc/TVirtualStreamerInfo.h:91:75: erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15379#issuecomment-2083159907:218,error,error,218,https://root.cern,https://github.com/root-project/root/pull/15379#issuecomment-2083159907,2,['error'],['error']
Availability,The warnings on windows are because of the usual problem with jenkins picking up warnings from the GitHub PR description. The build failure on windows was introduced by https://github.com/root-project/root/pull/8416 I think,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432#issuecomment-861570989:132,failure,failure,132,https://root.cern,https://github.com/root-project/root/pull/8432#issuecomment-861570989,1,['failure'],['failure']
Availability,"The way you wrote it will execute the ""else"" part of the test and the logic of the method is based on w and h taken from the Canvas ... so the ""else"" part might be a non sense as the canvas does not exist ... If the Canvas does not exits you should exit with some Error message I guess. I let you change the PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6459#issuecomment-698982326:264,Error,Error,264,https://root.cern,https://github.com/root-project/root/pull/6459#issuecomment-698982326,1,['Error'],['Error']
Availability,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4215#issuecomment-521594030:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/4215#issuecomment-521594030,1,['failure'],['failure']
Availability,"The window error are about git gc's failing to run:; ```; 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists.; 18:55:18 ; 18:55:18 Another git process seems to be running in this repository, e.g.; 18:55:18 an editor opened by 'git commit'. Please make sure all processes; 18:55:18 are terminated then try again. If it still fails, a git process; 18:55:18 may have crashed in this repository earlier:; 18:55:18 remove the file manually to continue.; ```; which seems to already have been forseen but the work-around was not extended enough?; ```; 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root; ```. Any way ... in the end the build actually suceeded:; ```; 20:45:01 ; 20:45:01 Processing hsimple.C...; 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds; 20:45:01 (TFile *) 0xa21a568; 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt; 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date.; 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt; 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date.; 20:45:03 Command exited with the value: 0; 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount; 20:45:03 0 Compiler errors; 20:45:03 50 or more Compiler warnings; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4239#issuecomment-522708844:11,error,error,11,https://root.cern,https://github.com/root-project/root/pull/4239#issuecomment-522708844,3,['error'],"['error', 'errors']"
Availability,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707#issuecomment-773865371:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/6707#issuecomment-773865371,2,['error'],['error']
Availability,"The windows ""failure"" isn't a failure but had just a warning, which is the usual mis-parse of the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11861#issuecomment-1396534330:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/11861#issuecomment-1396534330,2,['failure'],['failure']
Availability,The windows (infrastructure) and MacOS (odd missing library) errors are pre-exisiting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3761#issuecomment-488711738:61,error,errors,61,https://root.cern,https://github.com/root-project/root/pull/3761#issuecomment-488711738,1,['error'],['errors']
Availability,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3253#issuecomment-454060483:141,failure,failures,141,https://root.cern,https://github.com/root-project/root/pull/3253#issuecomment-454060483,1,['failure'],['failures']
Availability,The windows build failure is unrelated (RDataFrame related).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2741#issuecomment-426821543:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/2741#issuecomment-426821543,1,['failure'],['failure']
Availability,The windows error is unrelated (hang in a test that does not use http).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-816056438:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-816056438,1,['error'],['error']
Availability,The windows error is unrelated. It seems that a build area used for the older Cling version (using llvm v5) is being reused.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7794#issuecomment-814358682:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/7794#issuecomment-814358682,1,['error'],['error']
Availability,The windows failure are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588#issuecomment-1344658799:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/11588#issuecomment-1344658799,1,['failure'],['failure']
Availability,"The windows failure boils down to:; ```; cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l; root [0] #include ""Math/CladDerivator.h""; root [1] double arr[2] = {0,1};; root [2] clad::array_ref<Double_t> _d_pi(arr);; root [3] double _r0 = 1;; root [4] _d_pi[0] = 1;; ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a; ka 'array_ref<double>'); and 'int'); _d_pi[0] = 1;; ~~~~~^~; C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function ; CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }; ^; C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function ; CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }; ^; ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int); _d_pi[0] = 1;; ^; ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int); ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int); ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int); ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators?. @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1925277657:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1925277657,3,"['down', 'error', 'failure']","['down', 'error', 'failure']"
Availability,The windows failure is a GIT pull retry,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1494#issuecomment-356021212:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/1494#issuecomment-356021212,1,['failure'],['failure']
Availability,The windows failure is a comminucation failure between the node and github.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3628#issuecomment-479139682:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/3628#issuecomment-479139682,2,['failure'],['failure']
Availability,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4461#issuecomment-537281629:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/4461#issuecomment-537281629,1,['failure'],['failure']
Availability,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2290#issuecomment-403049452:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/2290#issuecomment-403049452,1,['failure'],['failure']
Availability,The windows failure is unrelated (due to a git lock).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11291#issuecomment-1234585426:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/11291#issuecomment-1234585426,1,['failure'],['failure']
Availability,The windows failure is unrelated (infrastructure),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12553#issuecomment-1518279633:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/12553#issuecomment-1518279633,1,['failure'],['failure']
Availability,The windows failure is unrelated merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4651#issuecomment-565191915:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/4651#issuecomment-565191915,1,['failure'],['failure']
Availability,The windows failure is unrelated to this PR (and extremely weird).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11314#issuecomment-1239026143:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/11314#issuecomment-1239026143,1,['failure'],['failure']
Availability,The windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12418#issuecomment-1453804267:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/12418#issuecomment-1453804267,2,['failure'],['failure']
Availability,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210#issuecomment-1665278956:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/13210#issuecomment-1665278956,1,['failure'],['failure']
Availability,The windows failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3602#issuecomment-479377556:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/3602#issuecomment-479377556,1,['failure'],['failure']
Availability,The windows failure seems unrelated to the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190#issuecomment-781145762:12,failure,failure,12,https://root.cern,https://github.com/root-project/root/pull/7190#issuecomment-781145762,1,['failure'],['failure']
Availability,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-815001376:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-815001376,1,['failure'],['failures']
Availability,The windows failures seems to be infrastructure related (missing roottest fork?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5039#issuecomment-589303136:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/5039#issuecomment-589303136,1,['failure'],['failures']
Availability,The windows test errors seems unusual and the actual error are not obvious. We should re-run them before merging to check if it is just a transient issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1276753455:17,error,errors,17,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1276753455,2,['error'],"['error', 'errors']"
Availability,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13243#issuecomment-1669562875:17,failure,failure,17,https://root.cern,https://github.com/root-project/root/pull/13243#issuecomment-1669562875,3,"['failure', 'ping']","['failure', 'ping']"
Availability,The windows/python errors are unrelated (seems to be a mismatch installation of python 2/3),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11516#issuecomment-1275258253:19,error,errors,19,https://root.cern,https://github.com/root-project/root/pull/11516#issuecomment-1275258253,1,['error'],['errors']
Availability,"The ~~test~~ compilation failures are real (locally I was building without RooFit), work in progress :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8353#issuecomment-855807611:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/8353#issuecomment-855807611,1,['failure'],['failures']
Availability,Then it definitively weird :( ... Would have to see whether the cutoff is down in TSelectorDraw itself or somehow in the histogram ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-790845557:74,down,down,74,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-790845557,1,['down'],['down']
Availability,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/831#issuecomment-321348145:16,error,errors,16,https://root.cern,https://github.com/root-project/root/pull/831#issuecomment-321348145,1,['error'],['errors']
Availability,"There are a number of trivial operations that users often want to perform on dataframes that are surprisingly hard to get right, for example adding several `Define`s in a loop or conditionally adding a `Filter` depending on a runtime boolean (both use-cases are challenging in C++, trivial in python). The way I see it, difficulties boil down to the fact that different dataframe nodes have different types (because their types incorporate e.g. the type of the callable passed to a `Filter` and the type of their parent node in the computation graph). In this PR I propose to add a common base class `ROOT::RDF::RNode` to all nodes of the graph (except leaves a.k.a results, which have a completely different interface),; so that users can, for example:; * take any dataframe node by reference in non-template functions as `RNode&`; * `emplace_back` dataframe nodes in ~`std::vector<RNode>`~ `vector<RInterface<RNode>>`; * have non-const pointers to dataframe nodes. and so on. For example, conditionally adding a `Range` do a dataframe now looks like this:. ```c++; auto maybe_ranged = [&df, mustAddRange] { ; return mustAddRange ? ROOT::RDF::RNode(d.Range(1)); : ROOT::RDF::RNode(d); ; }(); ; ```. while before this PR one would have to add fake `Filter(""true"")` filters to normalize the return type of the lambda, involving the interpreter for no reason. Internal `RDataFrame` code is also simplified by the introduction of this common base class.; The only downside I can think of is that if this mechanism is abused users might end up with extra, unnecessary virtual calls in their event loop -- on the other hand, this mechanism should only be used in situations that required either complex template magic or dirty and slow tricks before. Questions:; * can we come up with a better name than `ROOT::RDF::ToCommonNodeType` for the function that upcasts any dataframe object to the same type?; * should this cast only be explicit through an upcasting function call or should we allow implicit cas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182:338,down,down,338,https://root.cern,https://github.com/root-project/root/pull/2182,1,['down'],['down']
Availability,There are failures checking out the repo...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1970#issuecomment-386314797:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/1970#issuecomment-386314797,1,['failure'],['failures']
Availability,There are issues trying to compile ROOT7 code with only c++11-capable compiler - see error messages from `ROOT-performance-centos7-multicore` platform. ; I just remove several commits. Current state was tested on all other platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508670401:85,error,error,85,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508670401,1,['error'],['error']
Availability,"There are lots of configuration errors on this branch on different platforms, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3310#issuecomment-457908756:32,error,errors,32,https://root.cern,https://github.com/root-project/root/pull/3310#issuecomment-457908756,1,['error'],['errors']
Availability,There are many errors in python testing - no idea if it has something to do with that PR?; I can provide separate small bugfix for TGLManager::Instance only,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2652#issuecomment-423283981:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/2652#issuecomment-423283981,1,['error'],['errors']
Availability,"There are some build errors in the CI:; ```; Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory; 97 | #include ""TFitParametersDialog.h""; | ^~~~~~~~~~~~~~~~~~~~~~~~; ```; Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15177#issuecomment-2046152687:21,error,errors,21,https://root.cern,https://github.com/root-project/root/pull/15177#issuecomment-2046152687,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"There are three ways to get the code of latest-stable:; a) git clone as suggested by https://root.cern/install/: 1.4GiB; b) git clone with --depth=20: 673MiB; c) unpacking the zip file download from github: 477MiB. I think for 99% of the users, option a offers no benefits over option b. If you are testing or writing feature branches, it might not be worth figuring out how to fetch only the relevant parts (--shallow-exclude?). And if you were writing a paper on the history of ROOT, you will want the full version history. . Option c has some serious downsides as well. github just calls the directory root-latest-stable, which is a lot less specific than what you would get from a versioned tarball. (Apparently, the version is in build/version_number). Furthermore, lack of a git repository is bad for anyone who might change stuff locally -- reunpacking the zip file and running diff -r is a lot less fun than using git diff. . I would thus argue that option b is the way to go by default: it reduces the space requirements by some 53% while also retaining the ability to make changes and easily contribute them, should the need arise. . Of course, many users will not care about space requirements as any --human-readable output not containing by the Si prefix P is considered small fries anyhow. But for grad students working on their own laptops, or anyone fetching root with limited bandwidth, the difference might still matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10238:185,down,download,185,https://root.cern,https://github.com/root-project/root/issues/10238,2,['down'],"['download', 'downsides']"
Availability,"There are two functions, [GetErrorYhigh](https://root.cern.ch/doc/master/classTGraphErrors.html#aa4864989829fc9f9b3d132b24d28112b)() and [GetErrorYlow](https://root.cern.ch/doc/master/classTGraphErrors.html#a329d183f60726d97cf543b996b65251f), where the docs erroneously write ""It returns the error along *X* at point i."" - it must be *Y*.; I would fix it myself, but I don't have the recent root source. Maybe it would be worth adding a word about ""high"" and ""low"" errors in the corresponding place. What ""error high"" or ""error"" would be if there is only ""error"" or ""error high""?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9098:292,error,error,292,https://root.cern,https://github.com/root-project/root/issues/9098,6,['error'],"['error', 'errors']"
Availability,"There are two parts to this:; - for this PR to be correctly validated we need to have tested a setup where the build directory is not available anymore at runtime. Does CMS test this, @smuzaffar @vgvassilev ?; - we should have a dedicated test for this in ROOT (as standalone cling doesn't use modules). Do we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139421018:134,avail,available,134,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139421018,1,['avail'],['available']
Availability,There is 2 PR to cherry pick. I did on my local 620-patches branch. But then I cannot push:. Pushing to ssh://github.com/root-project/root.git; remote: error: GH006: Protected branch update failed for refs/heads/v6-20-00-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4818#issuecomment-576259300:152,error,error,152,https://root.cern,https://github.com/root-project/root/pull/4818#issuecomment-576259300,1,['error'],['error']
Availability,"There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15488:318,error,error,318,https://root.cern,https://github.com/root-project/root/pull/15488,1,['error'],['error']
Availability,"There is a configuration failure in 32 bits, investigating.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6313#issuecomment-688765130:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/6313#issuecomment-688765130,1,['failure'],['failure']
Availability,"There is a constructor of the RooAddPdf that takes no coefficients and; only a list of PDFs. This only makes sense if all of the PDFs are; extendible. Indeed, there are error messages when a PDF is not; extendible, but it would be better to throw an exception because this is; an error that will certainly break your model. This change is inspired by the following forum post:; https://root-forum.cern.ch/t/roofftconvpdf-not-working-in-product-with-rooaddpdf-even-in-new-root-versions/51442. One user error that resulted in the post was using the no-coefficient constructor with non-extendible PDFs, which would have been prevented by throwing an error as suggested in this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11323:169,error,error,169,https://root.cern,https://github.com/root-project/root/pull/11323,4,['error'],['error']
Availability,"There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:; ```; $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs); higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':; higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'; 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,; | ; ```; Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:; ```; Warning in <TCanvas::Constructor>: Deleting canvas with same name: c; ...; Warning in <TCanvas::Constructor>: Deleting canvas with same name: c; ...; Warning in <TCanvas::Constructor>: Deleting canvas with same name: c; ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11124:261,error,error,261,https://root.cern,https://github.com/root-project/root/issues/11124,1,['error'],['error']
Availability,"There is a problem on ALMA 8, where `std::reduce` is not available even though it is supposedly C++17. @rybkine can you work around this, e.g. use `std::accumulate` with larger types?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16113#issuecomment-2252638706:57,avail,available,57,https://root.cern,https://github.com/root-project/root/pull/16113#issuecomment-2252638706,1,['avail'],['available']
Availability,"There is a suspicious failure, this assertion is triggered by the failing test:; ```; root.exe: /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:146: llvm::orc::SymbolStringPool::~SymbolStringPool(): Assertion `Pool.empty() && ""Dangling references at pool destruction time""' failed.; ```; I cannot judge if this could be related to the fix in LLVM or not. @Axel-Naumann and @vgvassilev, please advise. Should I drop that change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10890#issuecomment-1173932209:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/pull/10890#issuecomment-1173932209,1,['failure'],['failure']
Availability,"There is a test failure in `python-regression-regression` that needs to be investigated, we can't merge this for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5797#issuecomment-639357969:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/5797#issuecomment-639357969,1,['failure'],['failure']
Availability,"There is a ugly workaround to check for network:; ```; execute_process(; COMMAND ping www.github.com -n 2 -w 1000; RESULT_VARIABLE NO_CONNECTION; ); ```; And then use `NO_CONNECTION` like for example:; ```; if(builtin_tbb); if(NO_CONNECTION EQUAL 1); if(fail-on-missing); message(FATAL_ERROR ""No internet connection. Please check your connection, or either disable the 'builtin_tbb' option or the 'fail-on-missing' to automatically disable options requiring internet access""); else(); message(STATUS ""No internet connection, disabling 'builtin_tbb' option""); set(builtin_tbb OFF CACHE BOOL ""Disabled because there no internet connection"" FORCE); set(imt OFF CACHE BOOL ""Disabled because 'builtin_tbb' was set but there no internet connection"" FORCE); endif(); else(); ...; ```; I quickly tried and the principle works, but I'll need time to make it working properly and that will complexify (again) CMake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-864912549:81,ping,ping,81,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864912549,1,['ping'],['ping']
Availability,"There is actually at least 2 branches with 'problems'. This command:; ```; root.exe ~/Downloads/ship.conical.Pythia8-TGeant4_rec.root -b -l -q -e 'cbmsim->GetBranch(""FitTracks"")->GetIconName()' -e 'cbmsim->GetBranch(""Digi_UpstreamTaggerHits"")->GetIconName()'```. reproduces the problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12537#issuecomment-1481730550:86,Down,Downloads,86,https://root.cern,https://github.com/root-project/root/issues/12537#issuecomment-1481730550,1,['Down'],['Downloads']
Availability,"There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be; `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12704:12,error,error,12,https://root.cern,https://github.com/root-project/root/issues/12704,2,['error'],['error']
Availability,"There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be; `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12707:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/12707,2,['error'],['error']
Availability,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:954,error,error,954,https://root.cern,https://github.com/root-project/root/pull/15106,1,['error'],['error']
Availability,There is build problem on mac11 nodes:; ```; FAILED: core/thread/G__Thread.cxx lib/Thread.pcm ; /Users/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: 'tbb/enumerable_thread_specific.h' file not found; ```; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115867/console. It is because of that PR: https://github.com/root-project/root/pull/7260. It exposes TBB to public includes - via ROOT/TReentrantRWLock.hxx file. First of all one should specify that `Thread` library depend on `TBB` builtins - thats easy. But also one should export `TBB_INCLUDE_DIRS` and `TBB_CXXFLAGS` as INTERFACE (not PRIVATE) properties of `Thread` library. Do we want this?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8022:205,error,error,205,https://root.cern,https://github.com/root-project/root/issues/8022,1,['error'],['error']
Availability,"There is indeed a missing protection/warning message. We currently do not support storing `std::array` as a top level objects. Instead you need to wrap it into a struct. For example, this can be done in your example by adding:; ```; #ifdef __ROOTCLING__; #pragma link C++ class std::vector<std::vector<int>>+;; #pragma link C++ class Binner+;; #endif; ```; to a linkdef file (or your script if you load it via ACLiC). and writing with ; ```; fout->WriteObject(this,""binner""); // i.e. you using don't need to give the class name, the compiler can pass enough information.; ```; and read with:; ```; auto binner = f->Get<Binner>(""binner""); // Not casting needed here, binner will be a `Binner*`; ```. With the updated version of the script I get:; [example.C.txt](https://github.com/root-project/root/files/10025600/example.C.txt). ```; $ root.exe -b -l; root [0] .L example.C+; Info in <TMacOSXSystem::ACLiC>: creating shared library /Users/pcanal/Downloads/./example_C.so; root [1] finderBinner(); Creating std::array<std::array<std::vector<std::vector<Int_t>>, LAYER1>, LAYER2> in FinderBinning.root; root [2] loadFinderBinning(); Loading FinderBinning.root; root [3] ; ```. Cheers,. Philippe. PS. Side note the example.C contained:; ```; mBinsS = castedBinsS;; ```; which ended up copying all the data from castedBinsS to mBinsS which was wastefull. See my alternative in the updated script.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11722#issuecomment-1317651615:947,Down,Downloads,947,https://root.cern,https://github.com/root-project/root/issues/11722#issuecomment-1317651615,1,['Down'],['Downloads']
Availability,"There is much easier solution - do not introduce boolean variables and make check in place like:. if ((where == ""local"") || (where == ""qt5"")). I just want to keep code more clear - first parsing of all options and then creating web output. ; I will provide better solution - if nor CEF neither Qt5 available, ""local"" option is error and should be indicated so. I will add appropriate commit soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1964#issuecomment-386075518:298,avail,available,298,https://root.cern,https://github.com/root-project/root/pull/1964#issuecomment-386075518,4,"['avail', 'error']","['available', 'error']"
Availability,"There is no ""undefined"" value for an integer variable. The test failures are because with these changes we are printing errors that were not printed before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861684735:64,failure,failures,64,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861684735,2,"['error', 'failure']","['errors', 'failures']"
Availability,"There is problems with the doxygen head:; ```; build % cmake .. ; CMake Error at /Applications/CMake.app/Contents/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE); Call Stack (most recent call first):; /Applications/CMake.app/Contents/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); /Applications/CMake.app/Contents/share/cmake-3.22/Modules/FindPythonInterp.cmake:169 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); CMakeLists.txt:112 (find_package). -- Configuring incomplete, errors occurred!; See also ""/Users/couet/git/doxygen/build/CMakeFiles/CMakeOutput.log"".; See also ""/Users/couet/git/doxygen/build/CMakeFiles/CMakeError.log"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1080460317:72,Error,Error,72,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1080460317,2,"['Error', 'error']","['Error', 'errors']"
Availability,There is still failures.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2126843864:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2126843864,1,['failure'],['failures']
Availability,There seems to be infrastructure issues :( : ; ```; 07:41:59 Error when uploading file: /home/sftnight/build/workspace/root-pullrequests-build/build/Testing/20200610-1234/Update.xml; 07:41:59 Error message was: Operation too slow. Less than 1 bytes/sec transferred the last 120 seconds; 07:41:59 Problems when submitting via HTTP; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603#issuecomment-642024757:61,Error,Error,61,https://root.cern,https://github.com/root-project/root/pull/5603#issuecomment-642024757,2,['Error'],['Error']
Availability,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:25,fault,fault,25,https://root.cern,https://github.com/root-project/root/pull/10754,1,['fault'],['fault']
Availability,"There was some naming inconsistency between `minuit2-*` and `minuit2_*` CMake options; this standardizes that to match ROOT (`minuit2_*`); due to a mismatch, mpi and openmp could not be enabled in the standalone build. This also fixes an error in commit 1a75a687f19 that has incorrect CMake syntax (mixing `set_property` and `set_target_properties` style - would only affect CMake < 3.9 due to surrounding if statement). Running tests with MPI enabled will actually try to run the tests with MPI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1809:238,error,error,238,https://root.cern,https://github.com/root-project/root/pull/1809,1,['error'],['error']
Availability,There was some random/spurrious unrelated failure on WIndows in ./roottest/./root/meta/tclass/execReadTmplt.cxx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15472#issuecomment-2120958781:42,failure,failure,42,https://root.cern,https://github.com/root-project/root/pull/15472#issuecomment-2120958781,1,['failure'],['failure']
Availability,"There were several fixes available now in the master for having consistent behavior when using Root versus Geant4 units, which can be set now once before defining any elements or materials without having to lock/unlock:; `TGeoManager::SetDefaultUnits(TGeoManager::kG4Units);`; The default units are Root ones (as described in the docs). Please modify this ticket if you observe any other inconsistency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8695#issuecomment-1353077241:25,avail,available,25,https://root.cern,https://github.com/root-project/root/issues/8695#issuecomment-1353077241,1,['avail'],['available']
Availability,"There will be many aspects of implementing `XKCD` style.; Axes, labels and all kinds of drawing options for histograms, graphs, functions, ...; And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus.; It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. ; I could try to implement alternative there.; I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6682#issuecomment-713443611:653,avail,available,653,https://root.cern,https://github.com/root-project/root/issues/6682#issuecomment-713443611,1,['avail'],['available']
Availability,"There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3442:449,failure,failures,449,https://root.cern,https://github.com/root-project/root/pull/3442,1,['failure'],['failures']
Availability,"There's something that looks like a fix for this TChainParsing test failure in recent master, let me try to rebase that branch and see if that helps...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5062#issuecomment-591454596:68,failure,failure,68,https://root.cern,https://github.com/root-project/root/pull/5062#issuecomment-591454596,1,['failure'],['failure']
Availability,Therewith removing all the intermittent failures in the integration builds for this branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15099:40,failure,failures,40,https://root.cern,https://github.com/root-project/root/pull/15099,1,['failure'],['failures']
Availability,"These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/523:343,avail,available,343,https://root.cern,https://github.com/root-project/root/pull/523,1,['avail'],['available']
Availability,"These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:; - https://github.com/opencv/opencv/issues/15278; - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```; [100%] Linking CXX shared library ../../lib/libRIO.so; CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':; TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':; TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':; TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':; TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':; TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':; TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':; TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In functio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561:718,error,errors,718,https://root.cern,https://github.com/root-project/root/pull/4561,1,['error'],['errors']
Availability,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6995#issuecomment-756031491:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/6995#issuecomment-756031491,1,['failure'],['failures']
Availability,"These changes are on top of the first draft that I submitted, that was merged as part of [PR13929](https://github.com/root-project/root/pull/13929). The requested changes can be tracked in my personal drafts repo [here](https://github.com/QuillPusher/QP_Drafts/pull/3). Changes:. - RooFit intro before AD support -> already covered in ""Overview on RooFit implementation details..."" section by @guitargeek. - **Extracting free functions** to a separate header file is **optional**, re-wrote it as one of the two currently recommended approaches. - changed to ""Support **Code Generation**"" instead of ""AD Support"" in most places. - minor formatting and spelling errors changed. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14018:660,error,errors,660,https://root.cern,https://github.com/root-project/root/pull/14018,1,['error'],['errors']
Availability,"These changes fix a periodic crash which was occuring while running the threaded version of CMS' reconstruction code. The problem was a bad interaction between rebinning of a TProfile while being filled and the cloning of a TFormula. The problem stemmed from insufficient locking of cint data structures.; As part of the change, additional error reporting for the case where cloning fails was added. These reports were extremely useful in tracking down the problem and may prove useful in the future if a similar problem surfaces again.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/32:340,error,error,340,https://root.cern,https://github.com/root-project/root/pull/32,2,"['down', 'error']","['down', 'error']"
Availability,"These changes passed all tests before, so I doubt the failures are related. If libCore got built and linked correctly, then this PR should be fine, as it's just a refactoring on how to build libCore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1401487159:54,failure,failures,54,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1401487159,1,['failure'],['failures']
Availability,"These changes seem to have more implications than I thought (I only ran the relevant tests, not others). Will investigate the test failures asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5140#issuecomment-597840578:131,failure,failures,131,https://root.cern,https://github.com/root-project/root/pull/5140#issuecomment-597840578,1,['failure'],['failures']
Availability,"These commits are related to the binary distribution of runtime modules, and will fix the errors like https://root-forum.cern.ch/t/module-stl-imported-by-ast-file-found-in-a-different-module-map-file/32461/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3342:90,error,errors,90,https://root.cern,https://github.com/root-project/root/pull/3342,1,['error'],['errors']
Availability,"These days, ClassImp() causes more harm than good. See e.g. https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2563:89,error,error-cling-loadlibrary-while-compiling-in-root-,89,https://root.cern,https://github.com/root-project/root/pull/2563,1,['error'],['error-cling-loadlibrary-while-compiling-in-root-']
Availability,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2991#issuecomment-444948477:6,error,errors,6,https://root.cern,https://github.com/root-project/root/pull/2991#issuecomment-444948477,2,['error'],['errors']
Availability,"These errors should have definitely come up on my system, but it didn't. I think it will be best to flush my system of anything related to `Vc` or `VecCore` cause that it definitely causing confusion with `builtin_vc` or `builtin_veccore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-401594113:6,error,errors,6,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-401594113,1,['error'],['errors']
Availability,These failures are expected in this (old-ish) branch with distro packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3329#issuecomment-459679636:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/3329#issuecomment-459679636,1,['failure'],['failures']
Availability,These failures are indeed unrelated (and should now be fixed in master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4688#issuecomment-565165881:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/4688#issuecomment-565165881,1,['failure'],['failures']
Availability,These failures are present elsewhere too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11423#issuecomment-1264704575:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/11423#issuecomment-1264704575,1,['failure'],['failures']
Availability,These failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-876391541:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-876391541,1,['failure'],['failures']
Availability,These failures cannot be caused by this PR as it mostly deals with the way we build dictionaries with rootcling...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10241#issuecomment-1079781959:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/10241#issuecomment-1079781959,1,['failure'],['failures']
Availability,These failures seem unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14794#issuecomment-1972717880:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/14794#issuecomment-1972717880,2,['failure'],['failures']
Availability,These failures seem unrelated. We have run successfully the test suite on windows last time. After that the changes were squashing the review comments into the relevant commit to keep good history.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1415093433:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1415093433,1,['failure'],['failures']
Availability,These failures will be fixed in https://github.com/root-project/roottest/pull/468 https://github.com/root-project/root/pull/5180,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5178#issuecomment-601178151:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/5178#issuecomment-601178151,1,['failure'],['failures']
Availability,These files are available in the source tree. By trying these local copies before trying the remote copies it is possible to run the tests without network access.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/403:16,avail,available,16,https://root.cern,https://github.com/root-project/root/pull/403,1,['avail'],['available']
Availability,These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5673:67,avail,available,67,https://root.cern,https://github.com/root-project/root/pull/5673,1,['avail'],['available']
Availability,These includes may be used in dictionaries and therefore should; be available already in core libs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5265:68,avail,available,68,https://root.cern,https://github.com/root-project/root/pull/5265,1,['avail'],['available']
Availability,"These minor changes seem to affect the way in which TTreeCache interacts with different IO classes, e.g. TTree/TChain vs TTreeReader. In `TTreeCache::FillBuffer` the change in values of `fEntryCurrent` and `fEntryNext`, respectively the first entry of the current cluster and the first entry of the next cluster, has been moved before an `if` condition that was causing an early exit from the function.; This, in conjunction with the change in `TTreeReader::SetEntriesRange` apparently fixes the issues with the cache when running a simple program that uses only TTreeReader. At the same time, the changes affect the interaction of the cache with a TTree-only program in a way that now is throwing a log error:; ```Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=821695 fEntryCurrent=821695 fNextClusterStart=1643390 but fEntryCurrent should not be in between the two```. I'm not sure why these changes affect positively the TTreeReader examples and negatively the TTree ones. Some links to these examples follow.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5365:704,error,error,704,https://root.cern,https://github.com/root-project/root/pull/5365,2,"['Error', 'error']","['Error', 'error']"
Availability,"These test failures are unexpected, will investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5356#issuecomment-613900297:11,failure,failures,11,https://root.cern,https://github.com/root-project/root/pull/5356#issuecomment-613900297,1,['failure'],['failures']
Availability,These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3475:75,avail,available,75,https://root.cern,https://github.com/root-project/root/pull/3475,1,['avail'],['available']
Availability,These tests failures are not related. Some of them are due to missing backports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5353#issuecomment-615131549:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/5353#issuecomment-615131549,1,['failure'],['failures']
Availability,"They currently trigger segfaults in TClass*/cling of the like:. ```; RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511.; *** Break *** abort; Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree); {; if (withFree) {; if (!nary) {; delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; else {; delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; }; else {; typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;; if (!nary) {; ((Nm*)obj)->~Nm();; }; else {; do {; (((Nm*)obj)+(--nary))->~Nm();; } while (nary);; }; }; ```. ```; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:236,Error,Error,236,https://root.cern,https://github.com/root-project/root/pull/13290,1,['Error'],['Error']
Availability,They need to be temporarily disabled until a fix is available in clad.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15018:52,avail,available,52,https://root.cern,https://github.com/root-project/root/pull/15018,1,['avail'],['available']
Availability,"They were picked up as side effects of classes, but not forward declared as; and by themselves. This fixes namespaces and enums not being available / known at the ROOT prompt despite their dictionary being loaded:; https://root-forum.cern.ch/t/enum-in-namespace-not-available-after-loading-dictionary/45757",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8661:138,avail,available,138,https://root.cern,https://github.com/root-project/root/pull/8661,2,['avail'],"['available', 'available-after-loading-dictionary']"
Availability,"Thinking about it some more, surely this was some number crunching from the 32-bit days when we could only store a max of seven decimal digits reliably? I'm not sure what a good resolution would be, considering that taking it out is not backward compatible at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11954#issuecomment-1362030104:143,reliab,reliably,143,https://root.cern,https://github.com/root-project/root/issues/11954#issuecomment-1362030104,1,['reliab'],['reliably']
Availability,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov ; > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?. The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1219172690:422,error,error,422,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1219172690,1,['error'],['error']
Availability,"This (temporary) work-around silents the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug (as reported here: https://developercommunity.visualstudio.com/content/problem/225022/wrong-error-c2668-ambiguous-call-to-overloaded-fun.html)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2942:41,error,error,41,https://root.cern,https://github.com/root-project/root/pull/2942,2,['error'],"['error', 'error-']"
Availability,"This PR addresses the code quality issues identified by @Axel-Naumann and @lmoneta . One of the points raised can be tackled in multiple ways. The purpose of publishing this PR now with the **[Do Not Merge]** tag is to facilitate discussion (see last section). I can then apply what we agree upon, update the PR and Lorenzo can merge. . ## Solved; The following issues have been addressed (1 commit per issue more or less): . * Compilation warnings are solved.; * Assumptions about the size of passed matrices are asserted where appropriate.; * Flow of control in unit tests is simplified by exiting early with an error code when a test fails.; * Floating point arithmetic issue solved when checking whether a float is actually an int. ## Discussion. One of the comments has to do with the overly verbose signature of propagation functions in all architectures. This is caused because we always need to pass the convolution parameters besides the actual inputs and outputs (strides, padding, kernel sizes are already 7 parameters that are often passed together). . One proposed solution is to capture them in a struct (perhaps called `ConvParams`) and then pass this struct around instead. I like this approach because it greatly simplifies the signatures. . An alternative approach could be to let the layer methods pass a pointer (or reference) to the calling object (`this`). The advantage is that the verbose functions accept different parameters, for example the forward prop expects the convolution parameters (stride, padding, kernel size) while the backward pass expects the input and output size. Passing a reference to the layer itself will allow each function to pick what it needs, thus allowing us to simplify all calls with a common strategy. I would like to hear opinions on which method to choose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2321:614,error,error,614,https://root.cern,https://github.com/root-project/root/pull/2321,1,['error'],['error']
Availability,This PR addresses:; - Bug fix to plotting datasets horizontal error bars; - Bug fix to obtaining datasets of reduced pdfs (i.e. get the corresponding reduced dataset); - Beginning to add some documentation for xRooNode; - Adds a cling interpreter method for xRooNode to print the names of the child nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14900:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/14900,1,['error'],['error']
Availability,"This PR adds (a first version of) the `RNTupleIndex`, which is an in-memory structure that maps RNTuple field values (or combinations thereof) to an entry index in the RNTuple for which the index was built. Currently, the index only resides in memory and thus has to be (re)build each time. `RNTupleIndex` will be used by the `RNTupleProcessor` to enable dataset joins and will be as transparent as possible to users. Currently, no public interface is foreseen. At this point, no persistification is foreseen, but this might be added in the future. The implementation of the `RNTupleIndex` in this PR is hash-based. An implementation that is vector-based (but with the same interface) will also be considered. The idea is to benchmark and evaluate both implementations (and potentially more). Based on the results we can decide which one to actually use (or alternatively make multiple implementations available if they show clear tradeoffs in different use cases).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116:902,avail,available,902,https://root.cern,https://github.com/root-project/root/pull/15116,1,['avail'],['available']
Availability,"This PR adds a new callback to the PyKeras method.; I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:; `sudo pip install keras --upgrade`; `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'.; Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`; Now you can open the link from your terminal and visualize the network and training. ; The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1353:80,error,errors,80,https://root.cern,https://github.com/root-project/root/pull/1353,1,['error'],['errors']
Availability,"This PR adds an extra factory function for creating an `RNTupleImporter` by directly providing a pointer to the `TTree` to import, rather than the tree name and file name. With this, it should also become possible to import `TChain`s down the road, but this will require another PR. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12475:234,down,down,234,https://root.cern,https://github.com/root-project/root/pull/12475,1,['down'],['down']
Availability,This PR adds some meaningful error message printing when a pythonization fails to be injected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9729:29,error,error,29,https://root.cern,https://github.com/root-project/root/pull/9729,1,['error'],['error']
Availability,"This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface.; `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`; * `#include ""liburing/io_uring.h""`; * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919:396,down,download,396,https://root.cern,https://github.com/root-project/root/pull/5919,1,['down'],['download']
Availability,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:238,redundant,redundant,238,https://root.cern,https://github.com/root-project/root/pull/11161,1,['redundant'],['redundant']
Availability,"This PR brings compile options of the classic build closer to what the CMake system has.; There is also a fix for stressEntryList, which was failing on ICC because of rounding errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/755:176,error,errors,176,https://root.cern,https://github.com/root-project/root/pull/755,1,['error'],['errors']
Availability,This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5586:154,error,errors,154,https://root.cern,https://github.com/root-project/root/pull/5586,1,['error'],['errors']
Availability,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2353#issuecomment-409446728:1338,error,error,1338,https://root.cern,https://github.com/root-project/root/pull/2353#issuecomment-409446728,1,['error'],['error']
Availability,"This PR enables cling diagnostics to be reported via the ROOT error handler, as required by the experiments. Independently, this error handler may be changed by the user (see TError.h). This is a backport of PR https://github.com/root-project/root/pull/8737/ and is required for the unit tests of another backport: https://github.com/root-project/root/pull/10120. This PR closes JIRA issue [ROOT-7587](https://sft.its.cern.ch/jira/browse/ROOT-7587).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/10123,2,['error'],['error']
Availability,"This PR enables cling diagnostics to be reported via the ROOT error handler, as required by the experiments. Independently, this error handler may be changed by the user (see `TError.h`), e.g. ```; root [0] int f() { return; }; ROOT_prompt_0:1:11: non-void function 'f' should return a value [-Wreturn-type]; int f() { return; }; ^. root [1] gInterpreter->ReportDiagnosticsToErrorHandler();; root [2] int f() { return; }; Error in <cling>: ROOT_prompt_2:1:11: non-void function 'f' should return a value [-Wreturn-type]; int f() { return; }; ^; root [3] // Note the previous error is reported through the default ROOT error handler.; ```; ## Changes in this PR; - Required changes to `FilteringDiagConsumer` (in IncrementalParser.cpp). ; - Two member functions have been added to the `Interpreter` class:; - `void replaceDiagnosticConsumer(clang::DiagnosticConsumer* Consumer, bool Own)`: replaces the default CIFactory-provided diagnostic consumer.; - `bool hasReplacedDiagnosticConsumer()`: returns whether the default diagnostic consumer has been replaced.; - Added `void TCling::ReportDiagnosticsToErrorHandler(bool enable)` member function. This PR closes JIRA issue [ROOT-7587](https://sft.its.cern.ch/jira/browse/ROOT-7587). Link to sibling PR in `roottest` repository: https://github.com/root-project/roottest/pull/761.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8737:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/8737,5,"['Error', 'error']","['Error', 'error']"
Availability,"This PR enables the support to create Vectorized TFormula expression by adding a signature using ; ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, ; i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1275:136,avail,available,136,https://root.cern,https://github.com/root-project/root/pull/1275,1,['avail'],['available']
Availability,"This PR extends the type templation that was already present in some classes in the GenVector library to improve support for using vectorised (Vc) types. Specifically it :-. 1. Extends the templation to the Plane3D, Transformation3D and Translation3D types.; 2. Where necessary provides specialised methods for the vector types, when the original code was not generic enough to work in both scalar and vector scenarios. Typically this happens in the case of conditionals, where the differences required (booleans versus masks) are difficult to avoid. This PR is not complete, in that there are still some classes in GenVector that still do not support Vc types, as they are still not templated, such as the Rotation like transformations. It would be nice to add this at some point, but the code associated to these is more extensive (3DConversions.cxx for instance) and that will require some work. My changes pass the built in ROOT tests. In addition I have prepared a simple test case for the Vc types (attached) that I have used to check the scalar and vector types give equivalent results. Tested on OS X with the compilation command. clang++ -O3 -mavx2 -mfma `root-config --cflags` -I/Users/chris/Projects/Vc/install/include main.cpp `root-config --libs` -lGenVector /Users/chris/Projects/Vc/install/lib/libVc.a. [main-cpp.txt](https://github.com/root-project/root/files/820450/main-cpp.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394:520,mask,masks,520,https://root.cern,https://github.com/root-project/root/pull/394,1,['mask'],['masks']
Availability,"This PR fixes a regression introduced in a recent update to extend the templation in GenVector (PR #394). It turns out that this update broke the multiplication of a Transform3D by a Plane3D. This regression was spotted in the LHCb nightly build which tests against the master of ROOT. e.g. https://lhcb-nightlies.cern.ch/logs/build/nightly/lhcb-lcg-dev3/105/x86_64-centos7-gcc62-opt/LHCb/#show_error1538. The error is. ```; /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichHPDPanel.cpp:673:52: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'); 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;. /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichPMTPanel.cpp:407:46: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'); 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;; ```. This PR fixes this by adding an explicit operator for this. I have also extended the GenVector Vc test to explicitly cover this operation, as it was clearly one not covered in the ROOT tests so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/453:410,error,error,410,https://root.cern,https://github.com/root-project/root/pull/453,3,['error'],['error']
Availability,This PR fixes an issue in parsing correctly the Convolution operator from an ONNX file. . In addition an utility funciton to convert the tensor shape to a string is added to improve the produced error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8993:195,error,error,195,https://root.cern,https://github.com/root-project/root/pull/8993,1,['error'],['error']
Availability,"This PR fixes building of Core module on Windows. . ```; /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'?; const _CharT* __r = _VSTD::__find_end(; ~~~~~~~^~~~~~~~~~; find_end; ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5636:117,error,error,117,https://root.cern,https://github.com/root-project/root/pull/5636,1,['error'],['error']
Availability,This PR fixes compiling the code for parsing Keras model when the C-API of Python 2 is used. In this case some functions are not available in Python.h. Those functions are used to parse the convolutional layers from Keras. ; This PR excludes the parsing of this layer and avoid calling those functions available only in Python3. ; Also the tests using the cone layer parsing are disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11950:129,avail,available,129,https://root.cern,https://github.com/root-project/root/pull/11950,2,['avail'],['available']
Availability,This PR fixes following failures:; 1. http://cdash.cern.ch/testDetails.php?test=42006642&build=497548; 2. http://cdash.cern.ch/testDetails.php?test=42274691&build=497583. Before merging it should be understood why. @etejedor The tests for `TTree.AsMatrix` run all fine but the tutorial fails occasionally with a segfault (only on Mac OS and only on these two versions). It is not related to the `TTree.AsMatrix` code but to the creation of a `TFile` inside a Python function. Any ideas?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1957:24,failure,failures,24,https://root.cern,https://github.com/root-project/root/pull/1957,1,['failure'],['failures']
Availability,"This PR fixes https://github.com/root-project/root/issues/12043 . It should also address sporadic failures seen in our jenkins CI due to sometimes Dask assigning two tasks to the same worker process, thus the second task using the same DefinePerSample node of the first task and collapsing into the same situation as the linked issue. The first commit contains the actual fix, then tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787:98,failure,failures,98,https://root.cern,https://github.com/root-project/root/pull/13787,1,['failure'],['failures']
Availability,This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT; In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5702:204,error,error,204,https://root.cern,https://github.com/root-project/root/pull/5702,1,['error'],['error']
Availability,This PR fixes the 1st issue described here: https://github.com/root-project/root/issues/16070. When error-bars exceed to y range limits the end of error bars are nevertheless displayed on the x-bottom and top axis. So it looks like it is the total error bar while it is indeed not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16093:100,error,error-bars,100,https://root.cern,https://github.com/root-project/root/pull/16093,3,['error'],"['error', 'error-bars']"
Availability,"This PR fixes the copy constructor of the `ROOT::Fit::BinDtaa` class, ; solving the problem reported in ; https://root-forum.cern.ch/t/globalchi2-function-for-many-histograms-in-root-fitfcn/42016/10. In addition this PR fixes a small issue of one mathcore tests, which was reporting a linking error in case both IMT and VECCORE were not present",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6776:293,error,error,293,https://root.cern,https://github.com/root-project/root/pull/6776,1,['error'],['error']
Availability,"This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers.; ```; /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]; CRITICAL_SECTION waiters_count_lock_;; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here; typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;; ^; ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5681:18,error,errors,18,https://root.cern,https://github.com/root-project/root/pull/5681,2,['error'],"['error', 'errors']"
Availability,"This PR fixes the initialisation of the gradient function pointer which caused a failure in TFormula::Print(""V""). The PR introduces also a test for TFormula::Print",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2962:81,failure,failure,81,https://root.cern,https://github.com/root-project/root/pull/2962,1,['failure'],['failure']
Availability,This PR fixes the remaining ASAN build test failures in RooFit. More detail can be found in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11192:44,failure,failures,44,https://root.cern,https://github.com/root-project/root/pull/11192,1,['failure'],['failures']
Availability,This PR fixes the remaining build failures with C++20 (modules and non-modules related). It might still leave something broken in C++20 - but it does not break C++14 or 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12519:34,failure,failures,34,https://root.cern,https://github.com/root-project/root/pull/12519,1,['failure'],['failures']
Availability,This PR fixes: ; - stressHistoFit - so not use colour (even black) to keep a nice output log; - TMVA Keras tutorial: use different output file to avoid sporadic failures; - mathmore (GSL) : add a check for correct GSL version (2.3) introducing the new function `gsl_linalg_cholesky_decomp1`. Use the older `gsl_linalg_cholesky_decomp` for the old versions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13047:161,failure,failures,161,https://root.cern,https://github.com/root-project/root/pull/13047,1,['failure'],['failures']
Availability,"This PR fixes; - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp; if (fNewData) {; InitFromNewData();; SetKernel();; return;; }; ```; or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -; With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used; Inversing that gives the infinity in the Iteration:Fixed case. This fix:; - adds the call to SetBinCountData() in InitFromNewData(); - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`); - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp; auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);; for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }; std::cout<<kde->GetValue(2)<<""\n""; ; ```. Gives ; 0.487581",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14740:499,error,error,499,https://root.cern,https://github.com/root-project/root/pull/14740,1,['error'],['error']
Availability,"This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14749:38,down,down,38,https://root.cern,https://github.com/root-project/root/pull/14749,1,['down'],['down']
Availability,"This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>; <summary>Notes on previous sort approach</summary>; <br>; We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. ; I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5848:222,down,down,222,https://root.cern,https://github.com/root-project/root/pull/5848,1,['down'],['down']
Availability,"This PR implements the feature to read numpy arrays with `RDataFrame`. See following example for the use-case:. ```python; data = {; ""x"": numpy.array([1, 2, 3]),; ""y"": numpy.array([4, 5, 6]); }. df = ROOT.ROOT.RDF.MakeNumpyDataFrame(data); df2 = df.Filter(""x>1"").Define(""z"", ""x*y""). assert(df2.Mean(""z"").GetValue(), 14); ```. Edit: Up to now it works only with C++17 since `std::string_view` is not yet available in experimental PyROOT as backport.; Edit: Renamed `MakeRDataFrame` to `MakeNumpyDataFrame`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3424:403,avail,available,403,https://root.cern,https://github.com/root-project/root/pull/3424,1,['avail'],['available']
Availability,"This PR implements the possibility to store global observables in RooFit datasets, and makes the necessary changes in the `RooAbsPdf::fitTo` code path to consider the global observables in the data if available. If one wants to restore the old behavior of taking the global observable values from the model even if they are stored in the data, one can use the new `GlobalObservablesSource` command argument. . Unit tests for all new functionality is also implemented. Please find the more information in the commit messages. Ideas for future developments in future PRs:; 1. make it possible to specify the global observables when generating a dataset:; `model.generate(x, 1000, GlobalObservables(g))`; 2. make it possible to also sample global observable values when generating a toy dataset:; `model.generate({x, g}, 1000, GlobalObservables(g))`; 3. Add a tutorial to show all the new functionality related to global observables. Closes https://github.com/root-project/root/issues/8123.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8878:201,avail,available,201,https://root.cern,https://github.com/root-project/root/pull/8878,1,['avail'],['available']
Availability,This PR in roottest should fixe the errors: https://github.com/root-project/roottest/pull/911,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11645#issuecomment-1301893440:36,error,errors,36,https://root.cern,https://github.com/root-project/root/pull/11645#issuecomment-1301893440,1,['error'],['errors']
Availability,"This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13608:22,toler,tolerance,22,https://root.cern,https://github.com/root-project/root/pull/13608,2,['toler'],['tolerance']
Availability,"This PR introduces (with unit tests!) the concept of a forward-compatibility feature break flag for `TBasket`. This allows the `TBasket` class to identify if the object being deserialized was written by a newer version of ROOT using a feature that breaks forward-compatibility. Note that much care was taken so older versions of ROOT that *don't* recognize the new flag will believe the file is corrupt; they will give a misleading error message, but will not silently serve corrupted data. If this approach goes forward, I intend to backport the flags to older versions of ROOT -- they should be able to recognize files they aren't supposed to read. I do not plan to backport the new IO features themselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959:432,error,error,432,https://root.cern,https://github.com/root-project/root/pull/959,1,['error'],['error']
Availability,"This PR introduces the functionality offered by `ROOT::RDF::RunGraphs` in distributed RDataFrame. Some things may still need polishing or discussion.; - [x] Implement function for the Spark backend; - [x] Implement generic function available in the distributed module; - [x] Add test for the Spark backend; - [ ] Discuss whether we should keep the logic that all actions should be triggered by the same type of distributed backend (i.e. a user can submit N Spark jobs concurrently, but not N Spark jobs and M Dask jobs from the same call to RunGraphs); - [ ] Discuss default value of `concurrent_runs` parameter, i.e. number of jobs submitted concurrently from the client to the scheduler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8972:232,avail,available,232,https://root.cern,https://github.com/root-project/root/pull/8972,1,['avail'],['available']
Availability,"This PR introduces the logic necessary in TTreeReader to detect when an entry being read is ""incomplete"" for the following situations:; * When switching to a new tree in the chain, if a branch that was expected to be found is not available; * When doing event matching with TTreeIndex, in case one or more of the friend trees did not match the index value for the current entry. It also introduces new functionality in RDataFrame to allow users to act upon the situations described above:; * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded. The tutorials `df036_missingBranches` and `df037_TTreeEventMatching` show example usage of the new functionalities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:230,avail,available,230,https://root.cern,https://github.com/root-project/root/pull/15641,2,['avail'],['available']
Availability,"This PR is a 'downgrade' is code simplicity that should not be necessary. However the underlying fix is not ready (and won't until August), so we could temporarily merge this if need be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2194299016:14,down,downgrade,14,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2194299016,2,['down'],['downgrade']
Availability,"This PR is based on PR #11200. ; The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. ; ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13519:149,down,down,149,https://root.cern,https://github.com/root-project/root/pull/13519,2,"['avail', 'down']","['available', 'down']"
Availability,This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1544:25,down,down,25,https://root.cern,https://github.com/root-project/root/pull/1544,1,['down'],['down']
Availability,"This PR is on top of #1777 and adds the method `TTree.AsMatrix(columns)` as pythonization, which returns the content of the tree as numpy array powered by `TDataFrame` and the memory adption with the `__array_interface__`. TODO:; - ~~Infere the final datatype of the numpy array in a clever way (currently `double` is the default). Implicit type conversion is done by the lambda passed to `TDataFrame` in the backend.~~ Done in python, with tests.; - ~~More error-handling?~~ Can't think of any more checks.; - ~~More tests? Corner-cases missed?~~ Ideas? Any corner-cases missed?; - ~~What about not supported datatypes? Currently implemented for `float`, `double`, `int`, `unsigned int`, `long`, `unsigned long`. This is dependent on the memory adption feature of #1777 for `std.vector`.~~ Added proper error-handling.; - ~~Apply `clang-format`~~ ~~ Let's travis do this.; - ~~Shall we provide a `TTree.AsMatrix()` without given columns, which defaults to all columns? -> Most likely: Yes (but with proper error-handling!) -> White-listing branch types?~~ Done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856:458,error,error-handling,458,https://root.cern,https://github.com/root-project/root/pull/1856,3,['error'],['error-handling']
Availability,"This PR is to address GitHub issue https://github.com/root-project/root/issues/9353. So far, it is only a revert of d91509e so I can see the failures in the CI (on my system, the RooFit tests are still passing even after reverting said commit).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9374:141,failure,failures,141,https://root.cern,https://github.com/root-project/root/pull/9374,1,['failure'],['failures']
Availability,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7954#issuecomment-824721395:1342,down,down,1342,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395,2,['down'],['down']
Availability,"This PR makes the vectorised version of the mathematical functions provided by VecCore available to ROOT vey instantiating them in ROOT Mathcore. ; The symbols will be available automatically at the ROOT prompt and by bringing in the Vc symbols, functions like std::sin or std::cos with vector types (std::sin(ROOT::Double_v) will be available",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1102:87,avail,available,87,https://root.cern,https://github.com/root-project/root/pull/1102,3,['avail'],['available']
Availability,"This PR purges the old ; ```c++; ""evaluateBatch|getValBatch|getLogValBatch""(std::size_t begin, std::size_t batchSize); ```; interface of the roofit classes with the ; ```c++; ""evaluateSpan|getValues|getLogs""(BatchHelpers::RunContext& evalData, const RooArgSet* normSet); ```. To this point, both interfaces exist. In this PR the old methods are deleted and the code is cleared, with the exception of marking the purged methods as `= delete` in RooAbsReal.cxx, to prevent users that write their own PDF classes to use them or overwrite them. In the very few cases where users have already implemented such a deleted function, they will get a compilation error, so I will make sure that there's a detailed and easy walkthrough in the release notes of the next versions of how to port their code to use the new interface. The process is very simple, so the users that have used the old interface are more advanced than needed to make this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6841:653,error,error,653,https://root.cern,https://github.com/root-project/root/pull/6841,1,['error'],['error']
Availability,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:674,error,error-reporting,674,https://root.cern,https://github.com/root-project/root/pull/16090,1,['error'],['error-reporting']
Availability,"This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):; * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;; * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1218:509,failure,failures,509,https://root.cern,https://github.com/root-project/root/pull/1218,2,['failure'],['failures']
Availability,This PR should fix TMVA_RNN_Classification.py tutorial failures seen in many CI node in the nightly builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11347:55,failure,failures,55,https://root.cern,https://github.com/root-project/root/pull/11347,1,['failure'],['failures']
Availability,This PR should fix some of sporadic failures observed in some TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15109:36,failure,failures,36,https://root.cern,https://github.com/root-project/root/pull/15109,1,['failure'],['failures']
Availability,"This PR should fix the JupyROOT failures on MacOS 10.15, such as:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/5479/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/. by ensuring `libJupyROOT` is generated with the `.so` suffix as the other libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5478#issuecomment-620512213:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/5478#issuecomment-620512213,1,['failure'],['failures']
Availability,This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12168:23,failure,failures,23,https://root.cern,https://github.com/root-project/root/pull/12168,1,['failure'],['failures']
Availability,"This PR sits on top of #1871. Adds pythonization `TTree.Asmatrix(columns, dtype)`. `columns` can be `None`, which results in taking all branches. `dtype` is by default `double` but can be set to all types, which are supported by the array interface of `std.vector` (error-handling provided).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1872:266,error,error-handling,266,https://root.cern,https://github.com/root-project/root/pull/1872,1,['error'],['error-handling']
Availability,This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5911:99,error,error,99,https://root.cern,https://github.com/root-project/root/pull/5911,2,['error'],['error']
Availability,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107#issuecomment-1825792260:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/14107#issuecomment-1825792260,1,['failure'],['failures']
Availability,"This PR supersedes #3424. The reference counting is greatly improved and the data is kept alive until the datasource dies, which gets delete at the end of the lifetime of the computational graph. See here for the use-case:. ```python; import ROOT; import numpy. data = {; ""x"": numpy.array([1, 2, 3]),; ""y"": numpy.array([4, 5, 6]); }. df = ROOT.ROOT.RDF.MakeNumpyDataFrame(data); df = df.Define(""z"", ""x + y""). print(df.Mean(""z"").GetValue()) # Returns 7.0; ```. The feature plays well along with the `RDataFrame.AsNumpy` feature:. ```python; import ROOT. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""(int)rdfentry_""); data = df.AsNumpy(). df2 = ROOT.ROOT.RDF.MakeNumpyDataFrame(data); df2.Snapshot(""tree"", ""file.root""); ```. TODO:. - [x] Figure out how to install the header needed for the `NumyDataSource`; - [x] How to call the header (current name `MakeNumpyDataFrame.hxx`)? We should put it in a scope.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3669:90,alive,alive,90,https://root.cern,https://github.com/root-project/root/pull/3669,1,['alive'],['alive']
Availability,"This PR supersedes https://github.com/root-project/root/pull/15476 since there were changes to be made also in roottest, available at https://github.com/root-project/roottest/pull/1127. From the original PR:. # This Pull request:; Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:; - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method; - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15672:121,avail,available,121,https://root.cern,https://github.com/root-project/root/pull/15672,1,['avail'],['available']
Availability,This PR touches the ppc llvm backend. I do not see how this could be related to the failures we see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9398#issuecomment-989891848:84,failure,failures,84,https://root.cern,https://github.com/root-project/root/pull/9398#issuecomment-989891848,1,['failure'],['failures']
Availability,"This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove; https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does; https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when; https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated; https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated; https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python; https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:; https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated; Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4264:1130,avail,available,1130,https://root.cern,https://github.com/root-project/root/pull/4264,1,['avail'],['available']
Availability,"This PR was approved, are the test failures related? Otherwise I believe we could merge and close the issue? @linev @couet",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14671#issuecomment-1966734646:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/14671#issuecomment-1966734646,1,['failure'],['failures']
Availability,This PR:. Removes CINT from function name; Minor improvement in error ellipsoid example,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15728:64,error,error,64,https://root.cern,https://github.com/root-project/root/pull/15728,1,['error'],['error']
Availability,This PR:; * Removes CINT from function name; * Minor improvement in error ellipsoid example,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15705:68,error,error,68,https://root.cern,https://github.com/root-project/root/pull/15705,1,['error'],['error']
Availability,"This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. ; - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. ; - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed.; - Replaces some duplicated string literals that specify ntuples and models for variables.; - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12106:886,error,error,886,https://root.cern,https://github.com/root-project/root/pull/12106,2,['error'],['error']
Availability,"This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it.; - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend.; - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores.; - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`.; - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12109:888,error,error,888,https://root.cern,https://github.com/root-project/root/pull/12109,1,['error'],['error']
Availability,This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial.; It also provides a fix for an error message in the RooUnitTest class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9134:205,error,error,205,https://root.cern,https://github.com/root-project/root/pull/9134,1,['error'],['error']
Availability,This Pull request removes the final check on the MSE (Minimal Square Error) in the Keras Regression test since too few events are used to train the model. . Revert also the commit disabling pymva,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15403:69,Error,Error,69,https://root.cern,https://github.com/root-project/root/pull/15403,1,['Error'],['Error']
Availability,"This Pull request resets correctly the original error definition in the Minimizer class and fixes the problem of calling two times RooMinimizer::contour() (issue #10440). The problem is that resetting as before using the FitConfig class does not work because the ; values stored in the FitConfig are set in the Minimizer only before Fitting or when calling Hesse or Minos. So, the resetting works for a following call to migrad() but not for a call to contour(). . This PR fixes #10440",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10651:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/10651,1,['error'],['error']
Availability,This Pull request should fix a failure seen in the nortcxxmod builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11545:31,failure,failure,31,https://root.cern,https://github.com/root-project/root/pull/11545,1,['failure'],['failure']
Availability,This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12819:128,avail,available,128,https://root.cern,https://github.com/root-project/root/pull/12819,1,['avail'],['available']
Availability,This Pull request: fixes some error messages and spelling mistakes in operators . ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10435:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/10435,1,['error'],['error']
Availability,This addresses test failures like:; ```; 998/1157 Test #997: tutorial-v7-draw_mt.cxx .............................................***Failed 8.47 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_mt.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1007/1157 Test #1007: tutorial-v7-draw_subpads.cxx ........................................***Failed 6.81 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_subpads.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1017/1157 Test #1005: tutorial-v7-draw_rh3.cxx ............................................***Failed 28.52 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_rh3.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8417:20,failure,failures,20,https://root.cern,https://github.com/root-project/root/pull/8417,7,"['Error', 'error', 'failure']","['Error', 'error', 'failures']"
Availability,"This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4649:74,error,error-writing-trees-with-snapshot-and-implicitmt,74,https://root.cern,https://github.com/root-project/root/pull/4649,2,['error'],"['error', 'error-writing-trees-with-snapshot-and-implicitmt']"
Availability,This addresses the following errors:. Test 5: TText 1 (Text attributes)................................. OK; PDF output.......................................... 5 FAILED; Result = 12968; Reference = 12802; Error = 166 (was 150); GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK. Test 43: Divided pads and TLatex................................... OK; PDF output......................................... 43 FAILED; Result = 14206; Reference = 14075; Error = 131 (was 100); GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5957:29,error,errors,29,https://root.cern,https://github.com/root-project/root/pull/5957,3,"['Error', 'error']","['Error', 'errors']"
Availability,"This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};; Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};; Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};; Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};; Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author. [1] https://github.co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1546:512,down,down,512,https://root.cern,https://github.com/root-project/root/pull/1546,1,['down'],['down']
Availability,"This affects all ROOT versions so far, and it means that simultaneous fits don't work with the `SumW2Error()` option. I noticed this problem now because it's also an issue for the JSON IO. Reproducer:; ```C++; void repro(); {; using namespace RooFit;. RooRealVar x{""x"", ""x"", 0, 10};; RooCategory cat{""cat"", ""cat"", {{""sample_0"", 0}}};; RooRealVar weight{""weight"", ""weight"", 1.0};. RooDataSet data1{""data"", ""data"", {x, cat, weight}, WeightVar(weight), StoreError(weight)};. data1.add({x, cat}, 2.0, 0.3);. std::unique_ptr<TList> dataList{data1.split(cat, true)};; auto& data2 = static_cast<RooDataSet&>(*dataList->At(0));. data1.get(0);; std::cout << data1.weightError() << std::endl;; data2.get(0);; std::cout << data2.weightError() << std::endl;; }; ```. The output will be:. ```; [#0] ERROR:DataHandling -- An event weight error was passed to the RooDataSet 'sample_0', but the weight variable 'weight' does not store errors. Check `StoreError` in the RooDataSet constructor.; 0.3; 0; ```. In ROOT releases before 6.28.00, you don't even get error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12453:786,ERROR,ERROR,786,https://root.cern,https://github.com/root-project/root/issues/12453,4,"['ERROR', 'error']","['ERROR', 'error', 'errors']"
Availability,This allows downstream packages to also use the `ROOT_ADD_GTEST` macro in CMake with all its convenience.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16568:12,down,downstream,12,https://root.cern,https://github.com/root-project/root/pull/16568,1,['down'],['downstream']
Availability,"This allows the header files to spell the std math functions unqualified and; this way to allow template instantiations with vector types to swap them with; vector functions. Consider:; ```cpp. namespace N {; void call(double);; }. inline namespace __1 {; using N::call; // Enables ADL in a nicer and more transparent way; template <class T>; struct S {; int f() {; using namespace N; // enables ADL but it looks ugly...; call(T()); // call is an unqualified id, thus ADL will kick in. If we had `N::call(T())` we would have a compiler error.; return 42;; }; };; }. namespace N {; struct V{};; void call(V);; }. int res = S<N::V>().f(); // The compiler will add lookup candidates from namespace N. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445:536,error,error,536,https://root.cern,https://github.com/root-project/root/pull/445,1,['error'],['error']
Availability,This allows to avoid awkward errors due to the absence of moves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2490:29,error,errors,29,https://root.cern,https://github.com/root-project/root/pull/2490,1,['error'],['errors']
Availability,This also fixes an unused variable warning. Thanks for the ping @couet !,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9274:59,ping,ping,59,https://root.cern,https://github.com/root-project/root/pull/9274,1,['ping'],['ping']
Availability,"This appears to have broken Windows builds, as signaled by both Jenkins and the new CI... Unfortunately I cannot see a real error message. FYI @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14773#issuecomment-1958878427:124,error,error,124,https://root.cern,https://github.com/root-project/root/pull/14773#issuecomment-1958878427,1,['error'],['error']
Availability,This appease the bots' sporadic failures about missing gRandom while we are investigating.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4410:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/4410,1,['failure'],['failures']
Availability,"This avoids an error in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl008_import/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13447:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/13447,1,['error'],['error']
Availability,This avoids problems during ctest like:; ```; 512/838 Test #516: tutorial-multicore-mp001_fillHistos .................................***Failed Error regular expression found in output. Regex=[Error in <] 2.61 sec; Processing /builddir/build/BUILD/root-6.14.06/tutorials/multicore/mp001_fillHistos.C...; SysError in <TFile::TFile>: could not delete myFile_3.root (errno: 2) (No such file or directory); Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (myHisto_3) has not been written.; (int) 0; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:144,Error,Error,144,https://root.cern,https://github.com/root-project/root/pull/3029,3,['Error'],['Error']
Availability,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:359,avail,available,359,https://root.cern,https://github.com/root-project/root/pull/709,1,['avail'],['available']
Availability,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):; ```; 51 COMPILER = GNU; 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config; 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly; 54 -- Looking for Root...; 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root; 56 -- Looking for Root... - version 6.30.00; >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):; 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":; 59 syntax error, unexpected exp_NUMBER, expecting end of file (5).; 60 Call Stack (most recent call first):; 61 src/CMakeLists.txt:57 (find_package); ```; I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1816889422:17,down,downstream,17,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1816889422,3,"['Error', 'down', 'error']","['Error', 'downstream', 'error']"
Availability,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13752#issuecomment-1838159186:171,error,error,171,https://root.cern,https://github.com/root-project/root/pull/13752#issuecomment-1838159186,2,['error'],['error']
Availability,"This broke the tests:; ```; 729: Processing /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C...; 729: In file included from input_line_10:1:; 729: /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C:39:43: error: use of undeclared identifier 'scat'; 729: TPaletteAxis *palette = (TPaletteAxis*)scat->GetGraph()->GetListOfFunctions()->FindObject(""palette"");; 729: ^; ```. Tutorials are executed as part of the CI and therefore should *never* be merged with `[skip-ci]`! The simple fix is in https://github.com/root-project/root/pull/15923.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15871#issuecomment-2188647929:207,error,error,207,https://root.cern,https://github.com/root-project/root/pull/15871#issuecomment-2188647929,2,['error'],['error']
Availability,"This bug Edward reports was described at the ROOT forum two years ago by me in [this thread](https://root-forum.cern.ch/t/integral-with-limits-under-frac/31891). The MWE from that thread of mine can be further simplified down to just three lines of code actually:; ```; void drawl(); {; TLatex l;; l.DrawLatex(0.5, 0.3, ""#frac{#int_{0} v dt}{2}"");; }; ```; This snippet crashes (when ran in 6.14/04) with the same; ```; *ERROR<TLatex>: Missing denominator for #frac; ==> #frac{@{#int_{0}} v dt}{2@}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6851#issuecomment-731616986:221,down,down,221,https://root.cern,https://github.com/root-project/root/issues/6851#issuecomment-731616986,3,"['ERROR', 'down']","['ERROR', 'down']"
Availability,"This bug report is the result of the initial report at https://root-forum.cern.ch/t/crashes-when-reading-a-ttree-with-a-friend. Initially a tree t2 has a friend t1, and both are stored to a TFile, t2 with t1 stored as a friend. When opening both t2 and t1 from the file, then calling TFile::Close(), there is a crash. Most likely it is a matter of deletion order, where a tree already deleted is deleted again due to ""friendliness"". . Please find attached C++ and PyROOT scripts that reproduce the bug. The bug can be worked around by calling t2.RemoveFriend(t1) before calling TFile::Close(). Fixing this bug is important in a PyROOT workflow, where the branches values are accessible as attributes of the TTree. In such a case t2.GetEntry(x) also gets an entry in t1. If t1 is read from the file, both t1 and t2 branches values are available through their attributes - the most convenient way to access them in PyROOT. This behaviour does not exist in C++, thus I suspect in C++ hardly anyone opens both t1 and t2 and encounter this bug. Encountered on ROOT 6.24.00 compiled from sources on Fedora 34.; [test_friends.zip](https://github.com/root-project/root/files/6725477/test_friends.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8549:834,avail,available,834,https://root.cern,https://github.com/root-project/root/issues/8549,1,['avail'],['available']
Availability,"This bug report:; ![obraz_2021-01-05_030717](https://user-images.githubusercontent.com/483575/103598565-36ee1180-4f03-11eb-891b-2a66e7bb2062.png). Reference from tutorial: https://root.cern.ch/doc/master/alice__vsd_8C.html; ![image](https://user-images.githubusercontent.com/483575/103598652-6e5cbe00-4f03-11eb-9716-f77d792b80e9.png). ### Describe the bug; By running one of the ROOT tutorials:. $ root alice_vsd.C. I do not see any button to change events (see the image above). Apparently, from the log:. > gif2ASImage():2300:</usr/lib/root/6.22/icons/GoBack.gif> (null); > Warning in <TASImage::GetMask>: No image; > gif2ASImage():2300:</usr/lib/root/6.22/icons/GoForward.gif> (null); > Warning in <TASImage::GetMask>: No image. however:; ```; $ ls -all /usr/lib/root/6.22/icons/GoBack.gif /usr/lib/root/6.22/icons/GoForward.gif; -rw-r--r-- 1 root root 1177 11-27 16:00 /usr/lib/root/6.22/icons/GoBack.gif; -rw-r--r-- 1 root root 1166 11-27 16:00 /usr/lib/root/6.22/icons/GoForward.gif; ```. ### Expected behavior; I expect to see buttons with figures. ### To Reproduce; $ root alice_vsd.C. from the eve tutorials. ### Setup. 1. ROOT version: 6.22.06; 2. Operating system: Linux Gentoo; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself: compiled from sources via Gentoo package manager/portage, uses external libafterimage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985:1247,down,download,1247,https://root.cern,https://github.com/root-project/root/issues/6985,1,['down'],['download']
Availability,This can be merge as soon as centos7/clang39 is disabled in jenkins (otherwise we will have a spurrious error for other PRs).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889#issuecomment-435213448:104,error,error,104,https://root.cern,https://github.com/root-project/root/pull/2889#issuecomment-435213448,1,['error'],['error']
Availability,"This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12908:105,failure,failure,105,https://root.cern,https://github.com/root-project/root/pull/12908,1,['failure'],['failure']
Availability,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4349#issuecomment-528822213:75,failure,failures,75,https://root.cern,https://github.com/root-project/root/pull/4349#issuecomment-528822213,1,['failure'],['failures']
Availability,"This change is introduced to fix a problem with redefinition of RooMath; when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:; https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:; ```; Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx...; In file included from input_line_8:1:; In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:; /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'; class RooMath {; ^; /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'; #include ""RooMath.h""; ^; /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here; module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }; ^; /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here; #include ""RooMath.h""; ^; CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):; error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:153,error,errors,153,https://root.cern,https://github.com/root-project/root/pull/9214,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"This change looks good to me, do we have a plan what to do with the current failures?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273270910:76,failure,failures,76,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273270910,1,['failure'],['failures']
Availability,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3256#issuecomment-454738865:51,failure,failures,51,https://root.cern,https://github.com/root-project/root/pull/3256#issuecomment-454738865,1,['failure'],['failures']
Availability,This class creates a TGraph2D with asymmetric errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10347:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/10347,1,['error'],['errors']
Availability,"This code assumed that rootcling doesn't return zero when we; print an error, but this is not the case. Let's downgrade it to; a warning that we actually still return a zero exit code. Also the method now just returns true instead of writing 'true'; twice to the same result variable and then returning that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/946:71,error,error,71,https://root.cern,https://github.com/root-project/root/pull/946,2,"['down', 'error']","['downgrade', 'error']"
Availability,"This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure; The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where; result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,; 0.059684301 evaluates to 0.059684301000000002, and; 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5867:104,error,error,104,https://root.cern,https://github.com/root-project/root/pull/5867,2,"['Failure', 'error']","['Failure', 'error']"
Availability,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:134,error,errors,134,https://root.cern,https://github.com/root-project/root/pull/13926,4,"['Error', 'error', 'failure']","['Error', 'errors', 'failures']"
Availability,This commit fixes a duplicate include error which occurs on configuring Cmake options.; This happens because the directory is included again in a few lines later.; @vgvassilev . ```; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):; The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build; source directory. E:/root/builtins/glew. Specify a unique binary directory name.; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5525:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/5525,2,"['Error', 'error']","['Error', 'error']"
Availability,"This commit fixes the error received on building MathCore.pcm on Windows. ```; In file included from input_line_16:9:; In file included from C:/root-build/include\Fit/FitConfig.h:23:; C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math; core\G__MathCore.vcxproj]; { return finite(x); }; ^; C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'; # define finite _finite; ^; ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5800:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/5800,2,['error'],['error']
Availability,"This commit introduces a new layer on top of RDataFrame to enable distributed computations. It is a port of the previously known PyRDF python package, that includes all changes discussed recently in the team. The python package, inside bindings/experimental/distrdf, is dynamically injected into the ROOT.RDF namespace. TODO:; 1. Figure out a better approach to injection, currently the following happens:; ```; >>> import ROOT # ok; >>> import ROOT.RDF # ok; >>> from ROOT import RDF # ok; >>> from ROOT.RDF import Distributed # ok; >>> Distributed; <module 'DistRDF' from '/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/DistRDF/__init__.py'>; >>> import ROOT.RDF.Distributed; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/ROOT/_facade.py"", line 121, in _importhook; return _orig_ihook(name, *args, **kwds); ModuleNotFoundError: No module named 'ROOT.RDF'; 'ROOT' is not a package; >>> from ROOT.RDF.Distributed import Spark; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/ROOT/_facade.py"", line 121, in _importhook; return _orig_ihook(name, *args, **kwds); ModuleNotFoundError: No module named 'ROOT.RDF.Distributed'; 'ROOT.RDF' is not a package; ```; 2. Remove `DistRDF` from the available modules in a python session, e.g. this should not be possible (I believe); ```; >>> import DistRDF; >>> DistRDF; <module 'DistRDF' from '/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/DistRDF/__init__.py'>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7139:1387,avail,available,1387,https://root.cern,https://github.com/root-project/root/pull/7139,1,['avail'],['available']
Availability,This commit provides improvement to the BrentRootFinder and to TF1::GetX which uses it.; Now the bracketing is improved and the algorithms find in case of multiple roots the one with lower x value. ; In case the interval does not contain a ROOT an error message is produced and a NaN is returned instead of returning a random value as before.; This commit fixes the problem reported in ; ROOT-4998. The current test. testRootFinder is improved using gtest and adding the case of multiple roots and of log grid searchj that BrentRootFinder supports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3425:248,error,error,248,https://root.cern,https://github.com/root-project/root/pull/3425,1,['error'],['error']
Availability,"This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3635:165,ERROR,ERROR,165,https://root.cern,https://github.com/root-project/root/pull/3635,1,['ERROR'],['ERROR']
Availability,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:365,mask,mask,365,https://root.cern,https://github.com/root-project/root/pull/9168,4,"['error', 'mask', 'redundant']","['error', 'mask', 'masking', 'redundant']"
Availability,"This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available.; I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4591:204,avail,available,204,https://root.cern,https://github.com/root-project/root/pull/4591,1,['avail'],['available']
Availability,"This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5683:667,avail,available,667,https://root.cern,https://github.com/root-project/root/pull/5683,2,"['avail', 'failure']","['available', 'failure']"
Availability,"This conservative assert intended to capture future uses of the; shouldPermanentlyIgnore routine and check if we have specified an absolute; non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may; move files around. Then the iterable (official) filename's real path might; differ at the point of iteration and the point of the check. Some file systems; use a temporary filename while copying/moving file and the rename it to the; real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the; iterator gives the expected real path of the filename which is not yet available; when we ask for the real path of that path we get something different (using the; same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5741:674,avail,available,674,https://root.cern,https://github.com/root-project/root/pull/5741,2,"['avail', 'failure']","['available', 'failure']"
Availability,This conveniently also allows looking at columns through a `typedef` that might only be available with a dictionary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16698:88,avail,available,88,https://root.cern,https://github.com/root-project/root/pull/16698,1,['avail'],['available']
Availability,"This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated.; - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake.; - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing; Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:; ```; ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy); ```; Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:; ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938:1087,failure,failure,1087,https://root.cern,https://github.com/root-project/root/pull/5938,1,['failure'],['failure']
Availability,This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6197:101,error,error,101,https://root.cern,https://github.com/root-project/root/pull/6197,1,['error'],['error']
Availability,This error is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2435#issuecomment-465919502:5,error,error,5,https://root.cern,https://github.com/root-project/root/pull/2435#issuecomment-465919502,1,['error'],['error']
Availability,This error: http://cdash.cern.ch/viewBuildError.php?buildid=567476; was caused because modules couldn't merge definition of struct __pthread_internal_list,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2695:5,error,error,5,https://root.cern,https://github.com/root-project/root/pull/2695,1,['error'],['error']
Availability,"This example would need to be modified before being put in tutorials:. 1. It should be formatted the proper way. See for instance [this one](https://github.com/root-project/root/blob/master/tutorials/graphics/arrows.C). The header should be formatted that way with a proper author name at the end.; 2. The description of the macro should be more than just a brief. May be some explanation about the site it refers to would help. In particular the download link should be to ScientificColourMaps7.zip I guess.; 3. You are using a TTree do read the .txt file. Why not, but that might be a bit ""too much"" just to read an ascii file of 3 columns. A standard C/C++ ASCII file reading is enough.; 4. The files have already 255 colors. So you do not need CreateGradientColorTable to interpolate the colors simply build the palette with the colors you read.; 5. Yes a static function in TColor would be also a possibiblity but the same comments apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8098#issuecomment-968998294:447,down,download,447,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-968998294,2,['down'],['download']
Availability,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1189#issuecomment-336724554:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/1189#issuecomment-336724554,1,['failure'],['failure']
Availability,"This failure exists since ROOT 6: while CINT happily converted 1 to the world, cling refuses to convert it to e.g. const char*. Pass `0` which is ""more compatible"" with datatypes. This is still terrible design, but at least it is not making things worse, only better... Before TNamed::SetName was looked up as a call `named.SetName(1)` which - with cling - means that no method is found. Now `named.SetName(0)` finds the right method. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12956:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/12956,1,['failure'],['failure']
Availability,"This failure is because Cling is failing to correctly unload AutoParse regardless of whether it has modules or not. It's the same error that we saw in #2848. This change in Clang is in review (https://reviews.llvm.org/D53925) but Richard has a better alternative (https://reviews.llvm.org/D54986). I would like to close this PR, but we should remember that Cling has an issue in unloading of AutoParse..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-455151740:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-455151740,2,"['error', 'failure']","['error', 'failure']"
Availability,This failure seems unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11571#issuecomment-1279698574:5,failure,failure,5,https://root.cern,https://github.com/root-project/root/pull/11571#issuecomment-1279698574,1,['failure'],['failure']
Availability,"This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3540:99,error,error,99,https://root.cern,https://github.com/root-project/root/pull/3540,2,['error'],['error']
Availability,"This finally fixes https://github.com/scikit-hep/iminuit/issues/637. The following changes are implemented:. 1) Store information that MnHesse reached call limit in MinimumError; - Add new states MnUnset, MnPosDef, and MnReachedCallLimit to MinimumError::Status; - Switch MinimumError status storage from bools to enum, since there is actually only one unique state at a time and toggling the bools correctly is error-prone; it also simplifies the implementation. 2) Propagate information from MinimumError to FunctionMinimum via Add. I slightly simplified the implementation of VariableMetricBuilder, the variable `hessianComputed` was not needed, the information whether Hesse was run can be obtained from the MinimumState object. Other changes (which could be broken into a separate PR):; - Removed trivial implementations of copy ctor and copy assignment in MnUserParameterState, the defaults should be used instead (rule of 0)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8176:412,error,error-prone,412,https://root.cern,https://github.com/root-project/root/pull/8176,1,['error'],['error-prone']
Availability,This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5925:255,avail,available,255,https://root.cern,https://github.com/root-project/root/pull/5925,1,['avail'],['available']
Availability,"This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12532:406,error,error,406,https://root.cern,https://github.com/root-project/root/pull/12532,1,['error'],['error']
Availability,"This fixes #8987 (case where the base class deletes operator=). In case where the class generated by MakeProject derived from a class that deletes the operator= then in some compiler we get the error below (which is expected since the class generated by MakeProject has a copy constructor which is needed by stl collection). ```; SRChh_ROOT6_mcgenProjectSource.cxx: In copy constructor ‘KKceex::KKceex(const KKceex&)’:; SRChh_ROOT6_mcgenProjectSource.cxx:922:54: error: use of deleted function ‘KKpart& KKpart::operator=(const KKpart&)’; 922 | for (Int_t i=0;i<101;i++) m_Phot[i] = rhs.m_Phot[i];; | ^; In file included from KKceex.h:21,; from KKhh2f.h:22,; from SRChh_ROOT6_mcgenProjectHeaders.h:1,; from SRChh_ROOT6_mcgenProjectSource.cxx:3:; KKpart.h:15:7: note: ‘KKpart& KKpart::operator=(const KKpart&)’ is implicitly declared as deleted because ‘KKpart’ declares a move constructor or move assignment operator; 15 | class KKpart : public TObject {; | ^~~~~~; c++: error: SRChh_ROOT6_mcgenProjectSource.o: No such file or directory; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8995:194,error,error,194,https://root.cern,https://github.com/root-project/root/pull/8995,9,['error'],['error']
Availability,"This fixes 2 out of 3 failing cases in ROOT-9946 (https://sft.its.cern.ch/jira/browse/ROOT-9946),; and throws an exception with a clearer error for the third case (i.e. escaped strings, which still requires fixing I think?). @dpiparo in particular, lexertk fails to correctly tokenize a string like this, due to the escaped double quotes:; ```c++; std::cout << \""check\"" << std::endl; return x;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3407:138,error,error,138,https://root.cern,https://github.com/root-project/root/pull/3407,1,['error'],['error']
Availability,"This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,; the previous implementation was attempting to valuePrint the pointee (rather than the pointer value); but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4487:259,fault,fault,259,https://root.cern,https://github.com/root-project/root/pull/4487,1,['fault'],['fault']
Availability,"This fixes ROOT-10504. the script:; ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away; struct TTUBE {};. }}. ```; reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:; ```; static const char* fwdDeclCode = R""DICTFWDDCLS(; extern int __Cling_Autoloading_Map;; ....; ```. The order of parsing is (with many ellipsis):; ```; ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”; standalone.C : line 1 : #pragma GCC diagnostic push; standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map; standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map; standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string; input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map; input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map; input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map; ```; The last line triggers the assert because when recording the state change, it records it as being from; ```; standalone.C : line 12; ""<<< cling interactive line includer >>>"" : line 9; ```; but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),; which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4882:120,failure,failure,120,https://root.cern,https://github.com/root-project/root/pull/4882,2,['failure'],['failure']
Availability,"This fixes ROOT-10712. Note, that the problem appears if; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();; ```; is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();; ```; works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```; InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5463:231,down,down,231,https://root.cern,https://github.com/root-project/root/pull/5463,1,['down'],['down']
Availability,"This fixes ROOT-10712. Note, that the problem appears if; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();; ```; is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();; ```; works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```; InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:231,down,down,231,https://root.cern,https://github.com/root-project/root/pull/5462,1,['down'],['down']
Availability,This fixes ROOT-7608.; Move to protected also the functions of TH1 that do not make sense for TH2Poly.; Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3568:143,error,error,143,https://root.cern,https://github.com/root-project/root/pull/3568,1,['error'],['error']
Availability,"This fixes ROOT-9839 by computing an optimal stepwise depending on the result fit error. ; Now for parameter which have a very small error the step size is correctly estimated. ; The difference can be seen by fitting a gaussian with very small sigma (~ 10^-5) and computing the; confidence intervals. . Also the fixed parameters are now correctly handled, although before, their contribution was not included due to their zero value in the covariance matrix",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3853:82,error,error,82,https://root.cern,https://github.com/root-project/root/pull/3853,2,['error'],['error']
Availability,"This fixes [ROOT-9322](https://sft.its.cern.ch/jira/browse/ROOT-9322). If a `TTreeReaderValue` is used to read fixed or variable size array, TTreeReader now complains and does not finish construction successfully (rather than successfully construct and read only the first element of the array). When such a (wrongly constructed) `TTreeReaderValue `is used, the following error messages are printed on screen:. ```; Error in <TTreeReaderValueBase::GetBranchDataType()>: Must use TTreeReaderArray to read branch arr: it contains an array or a collection.; Error in <TTreeReaderValueBase::CreateProxy()>: The branch arr contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; Error in <TTreeReaderValue::Get()>: Value reader not properly initialized, did you remember to call TTreeReader.Set(Next)Entry()?; ```. I could not find a way to avoid the last two `Error`s and still have `TTreeReaderValue::IsValid` return `false`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1842:372,error,error,372,https://root.cern,https://github.com/root-project/root/pull/1842,5,"['Error', 'error']","['Error', 'error']"
Availability,"This fixes a bug when a parameter is ""released"" when it was not ""fixed"" before. Without the fix, the internal consistency of MnUserParameterState is destroyed when a user calls Release() on a parameter that is not fixed, since the call appends a wrong index to fIntParameters. The issue was discovered by an iminuit user and I tracked down the source, see https://github.com/scikit-hep/iminuit/issues/648",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8175:335,down,down,335,https://root.cern,https://github.com/root-project/root/pull/8175,1,['down'],['down']
Availability,This fixes a cmssw llvm9 plus modules issue:. error: 'ROOT::Math::ParamFunction' has different definitions in different modules; first difference is defined here found method 'SetParameters' with body. cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7101:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/7101,1,['error'],['error']
Availability,This fixes a test failure on i686:. 17/593 Test #94: test-stressmathcore ........................................***Failed Error regular expression found in output. Regex=[FAILED|Error in] 3.21 sec; Beta distribution 		................ OK; Gamma distribution 		................ OK; Chisquare distribution 		................ OK; Normal distribution 		................ OK; BreitWigner distribution 		................ OK; F distribution 		................ OK; lognormal distribution 		................ OK; Exponential distribution 		................ OK; Landau distribution 		................ OK; Uniform distribution 		................ OK; ******************************************************************************; 	Test of Physics Vector (GenVector package); ******************************************************************************; XYVector creation 		................ OK; XYVector addition 		................ OK; XYVector creation 		................ OK; XYVector setting 		................ OK; XYVector -> Polar2DVector 		................ OK; Vector conversion 		................ OK; XYVector operations 		..............; Polar2DVector operations 		................ OK; XYVector delta values 		..............; Polar2DVector delta values 		................ OK; XYVector write 		................ OK; XYVector read 		................ OK; XYVector after read 		................ OK; Polar2DVector write 		................ OK; Polar2DVector read 		................ OK; Polar2DVector after read 		................ OK; XYZVector creation 		................ OK; XYZVector addition 		................ OK; XYZVector creation 		................ OK; XYZVector setting 		................ OK; XYZVector -> Polar3DVector 		................ OK; Vector conversion 		................ OK; XYZVector operations 		..............; Polar3DVector operations 		................ OK; XYZVector delta values 		..............; Polar3DVector delta values 		................ OK; XYZVector write 		................ OK; XYZ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/401:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/401,3,"['Error', 'failure']","['Error', 'failure']"
Availability,"This fixes a test failure on i686:. 95/593 Test #45: mathmore-testSpecFunc ......................................***Failed 0.40 sec; tgamma(9.0) :	 OK; lgamma(0.1) :	 OK; inc_gamma(1,0.001) :	 OK; inc_gamma(100,99) :	 OK; inc_gamma_c(100,99) :	 OK; inc_gamma_c(1000,1000.1) :	 OK; erf(0.5) :	 OK; erfc(-1.0) :	 OK; beta(1.0, 5.0) :	 OK; inc_beta(1,1,1) :	 OK; inc_beta(0.5,0.1,1.0) :	 OK; assoc_laguerre(4, 2, 0.5) :	 OK; assoc_legendre(10, 1, -0.5) :	 OK; comp_ellint_1(0.50) :	 OK; comp_ellint_2(0.50) :	 OK; comp_ellint_3(0.5, 0.5) :	 OK; conf_hyperg(1, 1.5, 1) :	 OK; cyl_bessel_i(1.0, 1.0) :	 OK; cyl_bessel_j(0.75, 1.0) :	 OK; cyl_bessel_k(1.0, 1.0) :	 OK; cyl_neumann(0.75, 1.0) :	 OK; ellint_1(0.50, PI/3.0) :	 OK; ellint_2(0.50, PI/3.0) :	 OK; ellint_3(-0.50, 0.5, PI/3.0) :	 OK; expint(1.0) :	 OK; hyperg(8, -8, 1, 0.5) :	 OK; laguerre(4, 1.) :	 FAILED ; Discrepancy in laguerre(4, 1.) () :; -0.625000000000000555 != -0.625 discr = 1 (Allowed discrepancy is 4.44089209850062616e-16); legendre(10, -0.5) :	 OK; riemann_zeta(-0.5) :	 OK; sph_bessel(1, 10.0) :	 OK; sph_legendre(3, 1, PI/2.) :	 OK; sph_neumann(0, 1.0) :	 OK; airy_Ai(-0.5) :	 OK; airy_Bi(0.5) :	 OK; airy_Ai_deriv(-2) :	 OK; airy_Bi_deriv(-3) :	 OK; airy_zero_Ai(2) :	 OK; airy_zero_Bi(2) :	 OK; airy_zero_Ai_deriv(2) :	 OK; airy_zero_Bi_deriv(2) :	 OK; Error: Special Functions Test FAILED !!!!!; CMake Error at /builddir/build/BUILD/root-6.08.06/cmake/modules/RootTestDriver.cmake:201 (message):; error code: 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/400:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/400,4,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,This fixes an error when using RDataFrame with an RArrowDS with integer columns.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2479:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/2479,1,['error'],['error']
Availability,"This fixes an error when using RDataFrame with an RArrowDS with integer columns. Somehow it used to work with Long64_t, but not with Long32_t.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2478:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/2478,1,['error'],['error']
Availability,"This fixes random failures of the `R__USE_IMT` part of the `datasource-root` test on Windows, due to file name corruptions, like for example:; ```; [ RUN ] TRootTDS.DefineSlotMT; Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist; [ OK ] TRootTDS.DefineSlotMT (191 ms); [ RUN ] TRootTDS.FromARDFMT; Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file; C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 23; [ FAILED ] TRootTDS.FromARDFMT (6 ms); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13469:18,failure,failures,18,https://root.cern,https://github.com/root-project/root/pull/13469,4,"['Error', 'error', 'failure']","['Error', 'error', 'failures']"
Availability,This fixes test failure:; ```; 745/1157 Test #729: tutorial-multicore-mp102_readNtuplesFillHistosAndFit ................***Failed 1.55 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/multicore/mp102_readNtuplesFillHistosAndFit.C...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMPC1Ej' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::TTreeProcessorMP(unsigned int); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMP11ReplyToIdleEP7TSocket' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::ReplyToIdle(TSocket*); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/8366,3,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,This fixes that regex characters in the source directory path; cause the CMake configuration to fail with cryptic error messages. This happens because we interpret the source directory as a regex in a; few places in our CMake code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/923:114,error,error,114,https://root.cern,https://github.com/root-project/root/pull/923,1,['error'],['error']
Availability,This fixes the ASAN failures that are related to the BatchMode. More detail can be found in the commit descriptions. Should be backported to 6.26.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11195:20,failure,failures,20,https://root.cern,https://github.com/root-project/root/pull/11195,1,['failure'],['failures']
Availability,"This fixes the ASAN test failure of `testLikelihoodSerial` seen in the; nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/12880,1,['failure'],['failure']
Availability,"This fixes the error ""TorchScript requires source access in order to carry out compilation, make sure original .py files are available""; it can not be executed with exec in python. Best ; Omar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6934:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/6934,2,"['avail', 'error']","['available', 'error']"
Availability,This fixes the errors in #3222. Patch by Oksana and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3242:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/3242,1,['error'],['errors']
Availability,"This fixes the following (potentially erroneous) error:; Error in <CloseStreamerInfoROOTFile>: Unique pointer unique_ptr<TUnuranBaseDist,default_delete<TUnuranBaseDist > > has zero data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2910:49,error,error,49,https://root.cern,https://github.com/root-project/root/pull/2910,2,"['Error', 'error']","['Error', 'error']"
Availability,"This fixes the following compilation errors on Windows:; TGeoTessellated.cxx(385,67): error C2027: use of undefined type 'std::array<CellVec_t,1000000>'. And on MacOS:; TGeoTessellated.cxx:385:23: error: implicit instantiation of undefined template 'std::__1::array<std::__1::vector<int, std::__1::allocator<int> >, 1000000>'; auto grid = new std::array<CellVec_t, ngrid * ngrid * ngrid>;; ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5117:37,error,errors,37,https://root.cern,https://github.com/root-project/root/pull/5117,3,['error'],"['error', 'errors']"
Availability,"This fixes the following compilation errors on Windows:; ```; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' mus",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:37,error,errors,37,https://root.cern,https://github.com/root-project/root/pull/11153,2,['error'],"['error', 'errors']"
Availability,"This fixes the following error when running (for example) tmva004_RStandardScaler.C:; ```; IncrementalExecutor::executeFunction: symbol '?AddDefinesToGraph@GraphDrawing@RDF@Internal@ROOT@@YA?AV?$shared_ptr@VGraphNode@GraphDrawing@RDF@Internal@ROOT@@@std@@V56@ABVRBookedDefines@234@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@6@@Z' unresolved while linking function '??__Eid@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@YAXXZcling_module_12_'!; You are probably missing the definition of class std::shared_ptr<class ROOT::Internal::RDF::GraphDrawing::GraphNode> __cdecl ROOT::Internal::RDF::GraphDrawing::AddDefinesToGraph(class std::shared_ptr<class ROOT::Internal::RDF::GraphDrawing::GraphNode>,class ROOT::Internal::RDF::RBookedDefines const &,class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > const &); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6897:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/6897,1,['error'],['error']
Availability,"This fixes the following error:; ```; error G34C21FBE: static_assert expression is not an integral constant expression; static_assert(offsetof(TEveVectorT, fZ) == offsetof(TEveVectorT, fX) + 2*sizeof(TT),; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\ucrt\stddef.h:42:31: note: expanded from macro 'offsetof'; #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))); ^; TEveProjections.h:174:71: note: in instantiation of member function 'TEveVectorT<float>::Arr' requested here; virtual Float_t* GetProjectedCenter() { return fProjectedCenter.Arr(); }; ^; TEveVector.h:55:21: note: cast that performs the conversions of a reinterpret_cast is not allowed in a constant expression; static_assert(offsetof(TEveVectorT, fZ) == offsetof(TEveVectorT, fX) + 2*sizeof(TT),; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\ucrt\stddef.h:42:32: note: expanded from macro 'offsetof'; #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))); ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1150:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/1150,2,['error'],['error']
Availability,"This fixes the following errors:; ```; TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]; C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'; with; [; _Ty=ROOT::Experimental::TDF::TRootDS; ]; C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:; or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'; with; [; _Ty=ROOT::Experimental::TDF::TRootDS; ]; TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'; TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]; TTrivialDS.cxx; TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]; C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'; with; [; _Ty=ROOT::Experimental::TDF::TTrivialDS; ]; C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:; or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'; with; [; _Ty=ROOT::Experimental::TDF::TTrivialDS; ]; TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'; TTrivialDS.cxx(82): error C2512: 'ROOT:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1151:25,error,errors,25,https://root.cern,https://github.com/root-project/root/pull/1151,2,['error'],"['error', 'errors']"
Availability,This fixes the following failure of the test-stresshistofit-interpreted test:. 151: Processing C:/Users/sftnight/git/master/test/stressHistoFit.cxx...; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:117:9: warning: 'FOREGROUND_BLUE' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_BLUE 1; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:35:9: note: previous definition is here; 151: #define FOREGROUND_BLUE 0x0001 // text color contains blue.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:118:9: warning: 'FOREGROUND_GREEN' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_GREEN 2; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:36:9: note: previous definition is here; 151: #define FOREGROUND_GREEN 0x0002 // text color contains green.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:119:9: warning: 'FOREGROUND_RED' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_RED 4; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:37:9: note: previous definition is here; 151: #define FOREGROUND_RED 0x0004 // text color contains red.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:120:9: warning: 'FOREGROUND_INTENSITY' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_INTENSITY 8; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:38:9: note: previous definition is here; 151: #define FOREGROUND_INTENSITY 0x0008 // text color is intensified.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:124:19: error: functions that differ only in their return type cannot be overloaded; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/3312,1,['failure'],['failure']
Availability,This fixes the following type of error with recent versions of Visual Studio (v17.6):; ```; 800: Processing C:/root-dev/git/debug/tutorials/roofit/rf614_binned_fit_problems.C...; 800: IncrementalExecutor::executeFunction: symbol '__std_find_trivial_8' unresolved while linking [cling interface function]!; 800: You are probably missing the definition of __std_find_trivial_8; 800: Maybe you need to load the corresponding shared library?; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13254:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/13254,1,['error'],['error']
Availability,"This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5002:525,Error,Error,525,https://root.cern,https://github.com/root-project/root/pull/5002,2,"['Error', 'error']","['Error', 'errors']"
Availability,This fixes the missing include errors occurred while building ROOT on Windows with the flag Druntime_cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5086:31,error,errors,31,https://root.cern,https://github.com/root-project/root/pull/5086,1,['error'],['errors']
Availability,This fixes the obscure failure in #988,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/991#issuecomment-329397905:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/991#issuecomment-329397905,1,['failure'],['failure']
Availability,This fixes the problem described in http://root-forum.cern.ch/t/ttreecache-fillbuffer-error-with-root-6-14-04/30914/1 (And avoid the same error message in another circumstance).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2786:86,error,error-with-root-,86,https://root.cern,https://github.com/root-project/root/pull/2786,4,['error'],"['error', 'error-with-root-']"
Availability,"This fixes the run of `roottest.root.meta.enums.execTEnumGetEnum` on Windows (the roottest PR removes the `will fail`). The failure on Windows was due to `typeinfo(enum_type)` returning a name with the format `enum enumname` and until the addition (in this PR) of the name normalization step, this was incorrectly handled by `TEnum::GetEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15408#issuecomment-2096922161:124,failure,failure,124,https://root.cern,https://github.com/root-project/root/pull/15408#issuecomment-2096922161,1,['failure'],['failure']
Availability,"This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4589:39,error,error,39,https://root.cern,https://github.com/root-project/root/pull/4589,3,"['Error', 'Failure', 'error']","['Error', 'Failure', 'error']"
Availability,"This fixes what was probably a typo in ROOT_GENERATE_DICTIONARY. With this fix this CMakeLists is broken: https://github.com/root-project/rootbench/pull/161/files#diff-b605e888bcff10e766b8f07a585786ad , resulting in the following build error:. ```; input_line_12:3:10: fatal error: 'inc/classes.h' file not found; #include ""inc/classes.h""; ^~~~~~~~~~~~~~~; Error: /home/eguiraud/ROOT/build_cxx17/bin/rootcling: compilation failure (/home/eguiraud/ROOT/build_rootbench/root/tree/dataframe/wmass/libSignalAnalysis81f7406343_dictUmbrella.h); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6056:236,error,error,236,https://root.cern,https://github.com/root-project/root/pull/6056,4,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"This follows up on 46642ca1c40, reducing the relative tolerance in one case to make the test pass again on macOS ARM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107:54,toler,tolerance,54,https://root.cern,https://github.com/root-project/root/pull/14107,1,['toler'],['tolerance']
Availability,"This follows up on a previous commit 92fbd0db47 with the title:; ```; [RF] Modernize `RooVectorDataStore::RealFullVector` class; ```. It changed the type of the `RooVectorDataStore::RealFullVector` members from `std::vector<double>*` to `std::unique_ptr<std::vector<double>>` while increasing the class version. However, while reasing old workspaces with the previous class version worked perfectly fine, there were logged errors when writing and then reading back a dataset with weight errors in ROOT `master`:. ```; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecE from type: vector<double> to type: vector<double>, skip element; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecEH from type: vector<double> to type: vector<double>, skip element; ```. This was very unexpected. Maybe there is some problem with the IO of class members of type `std::unique_ptr<std::vector<double>>`. This commit suggests to fix this problem by using `std::vector<double>` directly, which makes the code much simpler anyway. It also allows us to get rid of a workaround in `RealFullVector::Streamer()` where it was not clear if this workaround is still needed or not. The class version is not incremented further, because the last increment only happened a few days ago, and no new ROOT version has been released since then.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12503:423,error,errors,423,https://root.cern,https://github.com/root-project/root/pull/12503,2,['error'],['errors']
Availability,"This goes hand-in-hand with #169 . ; These were found in a different way, though: ; By creating them with their default constructor and trying to stream them to a memory buffer (the ""StreamingTest"" of https://github.com/olifre/rootStaticAnalyzer ). . This PR demotes some class-versions for classes which break when streamed (and which are not supposed to be streamed) and makes one more member transient which should be transient (in TTreeFormula). . There's one more remaining issue:. ```; Error in <TStreamerInfo::Build>: TRandom1, discarding: const unsigned int* fTheSeeds, no [dimension]; ```. I'm not sure what the ""dimension"" should be for this member - it's not so clear from the ranlux code to me. . More issues are probably still there since rootStaticAnalyzer right now excludes some classes from testing completely if their construction / destruction using the default constructor fails.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/170:492,Error,Error,492,https://root.cern,https://github.com/root-project/root/pull/170,1,['Error'],['Error']
Availability,"This has been changed:. - Refactor PyRandomForest (coding style, smoother python integration, easier multi-class integration); - Enable multi-class classification; - Create unit-test usable with `ctest -V -R PyMVA-RandomForest` for binary classification; - Add return error codes to `PyMethodBase::Unserialize()` function; - Mark ` tmva/pymva/test/Classification.C` as deprecated (lacks dataloader, I'll remove it if PyGTB is ported as well to ctest unit-test)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/303:268,error,error,268,https://root.cern,https://github.com/root-project/root/pull/303,1,['error'],['error']
Availability,"This header is directly included by TObject.h and directly including; it from some other header doesn't seem to be supported. As C++ modules; with submodule visibility simulate directl including each module header,; we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the; ROOT_GENERATE_DICTIONARY call which prevents it from getting directly; included in the `Core` C++ module. We can also remove it from the header; blacklist after this change. The normal dictionary won't be affected by this. This header is anyway; not supposed to contain TVersionCheck.h but only TObject.h which will; still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1459:236,error,errors,236,https://root.cern,https://github.com/root-project/root/pull/1459,1,['error'],['errors']
Availability,"This https://github.com/root-project/root/pull/5048 should fix the `asnumpy` test failure, which is not related to the changes of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5036#issuecomment-589728485:82,failure,failure,82,https://root.cern,https://github.com/root-project/root/pull/5036#issuecomment-589728485,1,['failure'],['failure']
Availability,"This idea is to have an optional ROOT variable we can set in the PanDA pilot or the PanDA worker node wrapper environment that allows to limit the number of threads spawned on the worker node by ROOT. We did this in the past e.g. with `ProofLite.Workers` to prevent prooflite processes to grab all available CPU cores on a worker node instead of the actual usual 8 cores on a WLCG multi-core slot. We steer AthenaMP and MT jobs via the environment variables ATHENA_PROC_NUMBER and ATHENA_CORE_NUMBER and set them to the PanDA queue core count. Asking the GDB might be a bit too high level committee, but if needed this could be brought up in some WLCG operations meetings if others would be interested to steer ROOT in a similar way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805#issuecomment-1030031260:298,avail,available,298,https://root.cern,https://github.com/root-project/root/issues/9805#issuecomment-1030031260,1,['avail'],['available']
Availability,"This introduces TStatusBitsChecker which allows to check whether there is 'Status bits' overlap in a given class hierarchy. Expectedly, there are several overlaps .... This merge request also annotate (by properly naming the enum type as EStatusBits) as needed and resolves the reported errors in core, io/io, tree/tree and hist/hist. Some overlaps can not be resolve to preserve forward compatibility and after analysis of which bit is overlapping should be 'harmless' and thus are marked to be ignored by the checker tools (by adding a enum type named EStatusBitsDupExceptions). Usage example:; ```; return TStatusBitsChecker::CheckAlClasses();. // or without EStatusBitsDupExceptions in TStreamerElement.; TStatusBitsChecker::Check(""TStreamerElement"");. Error in <TStatusBitsChecker>: In TStreamerElement class hierarchy, there are duplicates bits:; Error in <TStatusBitsChecker>: Bit 6 used in TStreamerElement as kHasRange; Error in <TStatusBitsChecker>: Bit 6 used in TObject as kCannotPick; Error in <TStatusBitsChecker>: Bit 13 used in TStreamerElement as kDoNotDelete; Error in <TStatusBitsChecker>: Bit 13 used in TObject as kInvalidObject; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/917:287,error,errors,287,https://root.cern,https://github.com/root-project/root/pull/917,6,"['Error', 'error']","['Error', 'errors']"
Availability,"This is CPyCppyy upstream's commit:; https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799#issuecomment-1174770897:175,failure,failures,175,https://root.cern,https://github.com/root-project/root/issues/10799#issuecomment-1174770897,1,['failure'],['failures']
Availability,"This is a *very common* problem that keeps hitting out users and even our own builds in Jenkins. We need to fail to configure with mismatched versions of Python and its libraries, as ROOT will fail at runtime with such a broken configuration anyway. The error message should be enough to quickly fix the configuration.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3044:254,error,error,254,https://root.cern,https://github.com/root-project/root/pull/3044,1,['error'],['error']
Availability,This is a backport of #12025 by @hahnjo and fixes the corresponding test failure in v6-28-00-patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12212:73,failure,failure,73,https://root.cern,https://github.com/root-project/root/pull/12212,1,['failure'],['failure']
Availability,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt; 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`; 5d5e1bcce1 [RF] Fix build due to changed compute() signature; f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU; a3294b725f [RF] Code format for `testNaNPacker.cxx`; 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute; 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute; 84870e3207 [RF] Less use of the `RunContext` class in RooFit; aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashConte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12722:657,error,error,657,https://root.cern,https://github.com/root-project/root/pull/12722,1,['error'],['error']
Availability,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:1332,redundant,redundant-string-cstr,1332,https://root.cern,https://github.com/root-project/root/pull/13295,1,['redundant'],['redundant-string-cstr']
Availability,"This is a backward incompatible change that [breaks DD4Hep](http://cdash.cern.ch/upload/2c049c68eb2e49d8ad4eeda23b283bae0d5ffd75/DD4hep-01-10-build.log). Please revert or provide a fix. Relevant part of the log is pasted below:; ```; [ 40%] Building CXX object DDCore/CMakeFiles/DDCorePlugins.dir/src/plugins/DetectorHelperTest.cpp.o; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp: In function ‘long int gdml_extract(dd4hep::Detector&, int, char**)’:; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:178:87: error: no matching function for call to ‘TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoVolume*, const TString)’; extract.WriteGDMLfile(&description.manager(), vol.ptr(), uri.GetRelativePart()); ^; In file included from /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:27:; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘const char*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoNode*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, TGeoNode* top_node, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘TGeoNode*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:156",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4160#issuecomment-519477877:626,error,error,626,https://root.cern,https://github.com/root-project/root/pull/4160#issuecomment-519477877,1,['error'],['error']
Availability,"This is a breakthrough: thanks for insisting to the end.; The code looks good to me.; Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1173#issuecomment-336022015:482,failure,failures,482,https://root.cern,https://github.com/root-project/root/pull/1173#issuecomment-336022015,1,['failure'],['failures']
Availability,"This is a bugfix, since the `ROOT_ADD_GTEST` macro doesn't work as intended on a ROOT build with `testing=OFF`. In the lines just below the ones I changed, there is code that issues a warning if you use `ROOT_ADD_GTEST` with `testing=OFF`:; > The target ROOT::TestSupport is missing. It looks like the test is declared against a ROOT build that is configured with -Dtesting=OFF. If this test sends warning or error messages, this will go unnoticed. Looks to me like the intention was that `ROOT_ADD_GTEST` can be used without `ROOT::TestSupport` with this caveat, otherwise that should be an error. However, it can't be used in that case without adding an additional linking against `gtest`, which is a major annoyance and was for sure not intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16279#issuecomment-2301679152:409,error,error,409,https://root.cern,https://github.com/root-project/root/pull/16279#issuecomment-2301679152,2,['error'],['error']
Availability,"This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:; https://github.com/root-project/root/pull/3579; is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3581:228,failure,failures,228,https://root.cern,https://github.com/root-project/root/pull/3581,1,['failure'],['failures']
Availability,This is a follow-up on 872886bcc. That commit was reordering code in the wrong way: the initialization of the `useKerasCNN` and `usePyTorchCNN` variables should have also been moved to the top. This fixes the current failures on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15295:217,failure,failures,217,https://root.cern,https://github.com/root-project/root/pull/15295,4,['failure'],['failures']
Availability,"This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15594:183,failure,failures,183,https://root.cern,https://github.com/root-project/root/pull/15594,1,['failure'],['failures']
Availability,"This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15595:140,failure,failures,140,https://root.cern,https://github.com/root-project/root/pull/15595,1,['failure'],['failures']
Availability,"This is a follow-up to 15a14ae6b4c. The `FindCUDA` module is deprecated since CMake 3.10 and the mentioned; commit therefore removed the usage of it. This was fine for RooFit, but TMVA not only compiles sources with the; NVidia compiler but also uses the CUDA toolkit in regular C++. This was fine for RooFit, but TMVA not only compiles sources with the; NVidia compiler but also uses the CUDA toolkit in regular C++. Therefore, that commit broke the TMVA GPU features. Unfortunately, I didn't notice before, because of this check; in `cmake/modules/SearchInstalledSoftware.cmake`:; ```cmake; if(tmva-gpu AND NOT CUDA_FOUND); set(tmva-gpu OFF CACHE BOOL ""Disabled because cuda not found"" FORCE); endif(); ```. The `CUDA_FOUND` variable is not set anymore now that `FindCUDA` is not; used. That means that `tmva-gpu` was silently disabled, and not building; successfully (which I had wrongly concluded because of the absence of; errors). This check needs to be replaced with; `if( NOT CMAKE_CUDA_COMPILER)`. As recommended in the CMake docs, this should be done with the; `FindCUDAToolkit` module, which is what this PR suggests. The `CUDA_ADD_EXECUTABLE` command is also replaced with the regular; `add_executable`, because `CUDA_ADD_EXECUTABLE` was also deprecated with; `FindCUDA`. Furthermore, all `cuda AND tmva-gpu` checks were replaced with only; `tmva-gpu`, because `tmva-gpu` implies `cuda`. Finally, `stressTMVA` is moved to the `tmva` subdirectory so that it is built in the same cmake project as ROOT; itself, so that we can query the `tmva-gpu` and `tmva-cpu` flags. See also:. * https://cmake.org/cmake/help/latest/module/FindCUDA.html; * https://cmake.org/cmake/help/latest/module/FindCUDAToolkit.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13991:928,error,errors,928,https://root.cern,https://github.com/root-project/root/pull/13991,1,['error'],['errors']
Availability,"This is a followup to 5e424e4, where the Python finding was moved into `SearchInstalledSoftware.cmake`. However, what I missed is that there was a check in `RootBuildOptions` that disabled PyROOT by default if Python is not found, which is now not the case at that point! Therefore, ROOT builds won't have PyROOT by default anymore, which is a bad mistake. Fortunately, the check is entirely redundant and this commit suggests to remove it. There is already a check in `SearchInstalledSoftware` where PyROOT (and `tmva-pymva`) are disabled when the Python development headers where not found. Also, this kind of logic to conditionally change the defaults it bad because it doesn't go well with the ""fail on missing"" paradigm (if `fail-on-missing` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15471:392,redundant,redundant,392,https://root.cern,https://github.com/root-project/root/pull/15471,1,['redundant'],['redundant']
Availability,"This is a general refactoring of the class test/stressMathMore.cxx.; It involves using Google test for assertions, test fixtures, and general; refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586:168,Ping,Ping,168,https://root.cern,https://github.com/root-project/root/pull/586,1,['Ping'],['Ping']
Availability,"This is a leftover from e6d7c53889f35bfbb986bf1890a89501b6900d41,; dependency for rootd.rc.d needs to be deleted. This patch fixes this error when you run install:; ```; CMake Error at cmake_install.cmake:132 (file):; file INSTALL cannot find; ""/build/yuka/build-py2-rootpy/BUILD/slc7_amd64_gcc700/lcg/root/6.15.01-cms/build/etc/daemons/rootd.rc.d"".; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3094:136,error,error,136,https://root.cern,https://github.com/root-project/root/pull/3094,2,"['Error', 'error']","['Error', 'error']"
Availability,"This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:; ```; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'; constexpr pointer operator->() const; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match; ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12811:563,error,error,563,https://root.cern,https://github.com/root-project/root/pull/12811,2,['error'],['error']
Availability,This is a pull request based on the patch in https://sft.its.cern.ch/jira/browse/ROOT-5494. Fixes compilation errors and warnings in the THDFS module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/89:110,error,errors,110,https://root.cern,https://github.com/root-project/root/pull/89,1,['error'],['errors']
Availability,"This is a pull request based on the patch in https://sft.its.cern.ch/jira/browse/ROOT-7541. The public (installed) header TXSocket.h #includes the private (not installed) header XrdProofConn.h. This means it can not be used in compilations:. g++ -I/usr/include/root -x c++ - <<< '#include ""TXSocket.h""'; In file included from <stdin>:1:0:; /usr/include/root/TXSocket.h:47:26: fatal error: XrdProofConn.h: No such file or directory; compilation terminated. A possible fix is provided in the attached patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/88:382,error,error,382,https://root.cern,https://github.com/root-project/root/pull/88,1,['error'],['error']
Availability,"This is a reproducer for the Python failures:. ```python; import ROOT; rvec = ROOT.VecOps.RVec(""float"")(); ```. Stacktrace at the point of crash is:. ```; #0 0x00007ffff726c389 in __gnu_cxx::new_allocator<CPyCppyy::PyCallable*>::construct<CPyCppyy::PyCallable*, CPyCppyy::PyCallable* const&> (this=0x7ffff72c93df, __p=0x5f3a3a726f746365) at /usr/include/c++/10.2.0/ext/new_allocator.h:150; 150		{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }; >>> bt; #0 0x00007ffff726c389 in __gnu_cxx::new_allocator<CPyCppyy::PyCallable*>::construct<CPyCppyy::PyCallable*, CPyCppyy::PyCallable* const&> (this=0x7ffff72c93df, __p=0x5f3a3a726f746365) at /usr/include/c++/10.2.0/ext/new_allocator.h:150; #1 0x00007ffff726bf06 in std::allocator_traits<std::allocator<CPyCppyy::PyCallable*> >::construct<CPyCppyy::PyCallable*, CPyCppyy::PyCallable* const&> (__a=..., __p=0x5f3a3a726f746365) at /usr/include/c++/10.2.0/bits/alloc_traits.h:512; #2 0x00007ffff726bc7a in std::vector<CPyCppyy::PyCallable*, std::allocator<CPyCppyy::PyCallable*> >::push_back (this=0x7ffff72c93df, __x=@0x7fffffffd630: 0x555559389d80) at /usr/include/c++/10.2.0/bits/stl_vector.h:1192; #3 0x00007ffff72760a9 in CPyCppyy::CPPOverload::AdoptMethod (this=0x7ffff73136e0 <CPyCppyy::CPPOverload_Type>, pc=0x555559389d80) at ../../../../../rvec2/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:945; #4 0x00007ffff72b3ba6 in CPyCppyy::TemplateProxy::AdoptMethod (this=0x7fffe9222280, pc=0x555559389d80) at ../../../../../rvec2/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:111; #5 0x00007ffff72a4233 in CPyCppyy::BuildScopeProxyDict (scope=16, pyclass=0x555559379ca0) at ../../../../../rvec2/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:254; #6 0x00007ffff72a6273 in CPyCppyy::CreateScopeProxy (name=""ROOT::VecOps::RVec<float>"", parent=0x555558e398c0) at ../../../../../rvec2/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:676; #7 0x00007ffff72830eb in (anonymous namespace)::MakeCppTemplateClass (args=0x7ffff73e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-802953879:36,failure,failures,36,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-802953879,1,['failure'],['failures']
Availability,"This is a specialization of iterator::next for vector<bool> that always returns a nullptr and should never be used.; IIUC, this code only exists to avoid compilation errors when compiling I/O code for `vector<bool>`. With this patch we error out rather than silently returning a nullptr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6891:166,error,errors,166,https://root.cern,https://github.com/root-project/root/pull/6891,2,['error'],"['error', 'errors']"
Availability,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1161642175:346,error,error,346,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1161642175,2,['error'],"['error', 'errors']"
Availability,"This is a workaround for https://bugs.python.org/issue21591 which; affect Python 2 versions before 2.7.9. This includes Python 2.7.5; which is the Python 2 version on RHEL/CentOS 7. The packaging of root on EPEL 7 with the new pyroot implementaion fails with the followin error:; ```; + /usr/lib/rpm/brp-python-bytecompile /usr/bin/python 1; Bytecompiling .py files below /builddir/build/BUILDROOT/root-6.22.00-1.el7.x86_64/usr/lib64/python2.7 using /usr/bin/python2.7; Compiling /builddir/build/BUILDROOT/root-6.22.00-1.el7.x86_64/usr/lib64/python2.7/site-packages/ROOT/_numbadeclare.py ...; SyntaxError: unqualified exec is not allowed in function 'inner' it is a nested function (_numbadeclare.py, line 198); error: Bad exit status from /var/tmp/rpm-tmp.RNRIsm (%install); ```. ### test1.py. This is a minimal reproducer of the existing code:; ```python; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; exec('print(a); b = 456', glob, locals()); print(locals()['b']); return inner(); test(); ```; This produces the expected output with Python 3:; ```; $ python3 test1.py ; 123; 456; ```; But when using Python 2 it reproduces the error from the root build:; ```; $ python2 test1.py ; File ""test1.py"", line 5; exec('print(a); b = 456', glob, locals()); SyntaxError: unqualified exec is not allowed in function 'inner' it is a nested function; ```. ### test2.py . If the Python 2 syntax is used for the exec command:; ```python; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; exec('print(a); b = 456') in glob, locals(); print(locals()['b']); return inner(); test(); ```; Then Python 3 fails as expected since this syntax is not valid Pathon 3:; ```; $ python3 test2.py ; Traceback (most recent call last):; File ""test2.py"", line 8, in <module>; test(); File ""test2.py"", line 7, in test; return inner(); File ""test2.py"", line 5, in inner; exec('print(a); b = 456') in glob, locals(); File ""<string>"", line 1, in <module>; NameError: name 'a' is not defined; `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5960:272,error,error,272,https://root.cern,https://github.com/root-project/root/pull/5960,2,['error'],['error']
Availability,This is a workaround for the issue reported as [Another fatal error C1001: Internal compiler error](https://developercommunity.visualstudio.com/t/another-fatal-error-c1001-internal-compiler-error/1441527),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8338:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/8338,4,['error'],"['error', 'error-']"
Availability,"This is actually still buggy and we now have a use case where not having it brings down the storage of some site, due to the excessive number of IOPS per server (50 IOPS, 720 concurrent accesses to 3 storage servers for a total of 0.2PB of data being read). Enabling this would allow us to reduce the IOPS by a factor ~5. The actual error that we get by enabling it is:. ```; [1923904:internal-dpl-aod-reader]: Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1679 of `/local/workspace/DailyBuilds/DailyO2Physics-slc9/daily-tags.nRQdop69vk/SOURCES/ROOT/v6-32-06-alice1/v6-32-06-alice1/tree/tree/src/TBranch.cxx'; [1923904:internal-dpl-aod-reader]: aborting; ```. I can provide some file which has the issue, if needed. This becomes rather urgent for us now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8962#issuecomment-2393067291:83,down,down,83,https://root.cern,https://github.com/root-project/root/issues/8962#issuecomment-2393067291,2,"['down', 'error']","['down', 'error']"
Availability,"This is an error title!; py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5672:11,error,error,11,https://root.cern,https://github.com/root-project/root/pull/5672,1,['error'],['error']
Availability,"This is an update to PR #40 that includes:; - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017); - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**; However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to; ```C++; ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);; opts.SetIntValue(""lambda"",lambda);; ```; Code above now appears to fail with errors such as:; ```; root [0] .L tutorials/fit/cmaesFitBench.C++g; Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so; In file included from input_line_11:9:; ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; Error in <ACLiC>: Dictionary generation failed!; ```; Help is needed to fix the above. **How to build**; ```; cd build; cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on; make; ```; The build will fail because of the header issue mentioned above, so do:; ```; cd include; ln -s eigen3/Eigen .; ln -s eigen3/unsupported .; cd ..; make; ```; You can then use the newly built ROOT and test that CMA-ES is",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507:959,error,errors,959,https://root.cern,https://github.com/root-project/root/pull/507,1,['error'],['errors']
Availability,"This is done for consistency with the other backports.; The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core; (or anyway a regeneration of the cmake rules for it) in build; directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1635:396,down,downsides,396,https://root.cern,https://github.com/root-project/root/pull/1635,1,['down'],['downsides']
Availability,"This is done to avoid a compiler warning (or an error for me, as I treated compiler warnings as errors).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8159:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/8159,2,['error'],"['error', 'errors']"
Availability,"This is done to better separate CUDA-specific code from the generic code; in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but; it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,; which where only implemented in the CUDA case. So an abstraction; didn't make much sense there. It's better to move the CUDA specifics; to a new `roofitcuda` library. Then, the functions from this library; are used in `batchcompute` and `roofitcore` behind preprocessor; macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only; available to `nvcc`, and in case gcc is used, these were forward; declared as stucts. This is a hack that should be avoided. In; particular, it can cause linker errors because the types are not the; same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`; pointers into C++ structs that are in the new CUDA support library,; and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function; should not be too backend specific, but it took the `cudaStream_t`; directly. This parameter is removed. Now, the CUDA stream is stored; in a `RooBatchCompute::Config` struct that is passed around in the; `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13409:717,avail,available,717,https://root.cern,https://github.com/root-project/root/pull/13409,2,"['avail', 'error']","['available', 'errors']"
Availability,This is done to reduce the feature divergence between PyROOT and C++ ROOT. Also improves code performance and robustness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16707:110,robust,robustness,110,https://root.cern,https://github.com/root-project/root/pull/16707,1,['robust'],['robustness']
Availability,"This is first attempt to provide support of custom classes in web-based canvas; For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas.; Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4094:336,mainten,maintenance,336,https://root.cern,https://github.com/root-project/root/pull/4094,1,['mainten'],['maintenance']
Availability,"This is first step to make Web GUI code running in multiple threads.; There are many threads introduced and many communication patterns are supported. 1. Provide special thread, which handle all http requests of THttpServer.; This thread serves JavaScript/HTML files and redirects websocket requests to recipients.; Try to reduce access to global ROOT structures from that thread - only list of classes for the moment is used. Potentially many THttpServer instances with such thread can run fully independent. 2. Let run websocket handlers (THttpWSHandler) in separate threads. ; Requires correct locking of shared resources. 3. Support special threads for sending data via websocket from server to clients. ; When many clients are connected to the same TWebWindow, slowest client can ; break down performance. With use of such specialized thread problem can be solved. 4. Implement all necessary locks and protections to use many TWebWindows in different user threads. ; Provide TWebWindow::Run(double) method, which allows to run window code in any user thread. . Introduce tutorials/v7/draw_mt.cxx macro, which shows how three RCanvas instances can run; in three independent thread and regularly updated. Of course, default behavior should work - all functionality runs in main thread. ; Means THttpServer requests processing, websockets processing, RCanvas handling - ; everything runs in main application thread. Simple, but not scalable. This is very preliminary code , I still plan to change/extend some API.; Any comments comments are welcome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487:793,down,down,793,https://root.cern,https://github.com/root-project/root/pull/2487,1,['down'],['down']
Availability,"This is great! The detection of names of used branches with regexps has always been a dark corner of RDF. Some time ago @axelnaumann suggested to use cling directly for this purpose, hook into the jitting of the expression itself and react upon ""undeclared variable"" errors, but this seems cleaner. @pcanal TString::Tokenize does not understand c++, here we need to get tokens in the programming language parser sense of the term. I.o.w. the regexp that one would need to pass to Tokenize to properly separate c++ token is way too complex, if it even exists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3324#issuecomment-457922148:267,error,errors,267,https://root.cern,https://github.com/root-project/root/pull/3324#issuecomment-457922148,1,['error'],['errors']
Availability,"This is how browser looks for me:. ![browser](https://user-images.githubusercontent.com/4936580/69444646-0f64d580-0d51-11ea-8ba5-d49112563036.png). Still missing icons, but this can be improved.; On windows instead of ""fs"" should letter ""c:"" appears (or that is in current path).; And later full list of available drivers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4638#issuecomment-557609445:304,avail,available,304,https://root.cern,https://github.com/root-project/root/pull/4638#issuecomment-557609445,1,['avail'],['available']
Availability,"This is just a proposal for a simple but hopefully useful feature.; The idea is to let people check the type of a given RDF column:; ```cpp; df.GetColumnType(""x""); // returns e.g. ""int""; ```. Some usecases in which `GetColumnType` might be useful:; 1. a help to use RDF in interpreted C++ (check the type of a column, then call `df.Take<T>(""x"")` with the right type; 2. a help to write PyROOT utilities on top of RDF: often such utilities need to jit some RDF call but have no way to know what are the required template types; 3. easy way to programmatically get the type of a TTree branch (`TTree::Print` is easy but does not return anything, `TLeaf::GetTypeName` is less straightforward to use correctly, e.g. if I'm not mistaken it returns `int` for an `int[n]`). What do people think? Pinging @stwunsch @amadio @dpiparo @etejedor @Axel-Naumann",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2393:789,Ping,Pinging,789,https://root.cern,https://github.com/root-project/root/pull/2393,1,['Ping'],['Pinging']
Availability,"This is meant to address the issues described in [ROOT-9739](https://sft.its.cern.ch/jira/browse/ROOT-9739). The update to the Davix configuration should not be controversial, I just added arguments forcing Davix to use the same LibXml2 library found by ROOT as well. The update to VDT is a bit weirder though. 😦 Unfortunately VDT executes a python script simply by calling `python <script>` during the CMake configuration. If there is not `python` executable in `$PATH` at this time, that fails. Now, ideally the `python` name should not be hardcoded into the VDT code at all, it should be set dynamically to whatever [FindPythonInterp](https://cmake.org/cmake/help/v3.0/module/FindPythonInterp.html) finds as `PYTHON_EXECUTABLE`. But I wanted to solve it at ""this level"" for now. So I changed the code to call CMake explicitly for configuring VDT, in an environment in which `python` should be available. (As long as it **is** called `python`. But let's not worry about that for now...). Overall, this is all for making it possible to build ROOT in the very small Ubuntu virtual machines that I use to provide ATLAS analysis release images for our users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2829:896,avail,available,896,https://root.cern,https://github.com/root-project/root/pull/2829,1,['avail'],['available']
Availability,This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4806:48,Error,Error,48,https://root.cern,https://github.com/root-project/root/pull/4806,2,['Error'],['Error']
Availability,"This is necessary to give the user a clear error message, since otherwise the build will go on and fail anyway with a cryptic message. See [ROOT-9441](https://sft.its.cern.ch/jira/browse/ROOT-9441).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2150:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/2150,1,['error'],['error']
Availability,"This is not a bug. The histogram read from a file is managed by the file, so it is deleted when the file is deleted. So if you use the unique_ptr the histogram will be deleted when exiting the macro and will also be deleted from the TCanvas. ; If your intention is to keep the histogram alive after executing the macro you should not use the unique_ptr to open the file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13369#issuecomment-1665765890:287,alive,alive,287,https://root.cern,https://github.com/root-project/root/issues/13369#issuecomment-1665765890,1,['alive'],['alive']
Availability,"This is not looking good, I can reproduce all these failures also on Arch Linux with Python 3.13...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2442490095:52,failure,failures,52,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442490095,1,['failure'],['failures']
Availability,"This is not the only problem with this example. I removed completely the `argparse`management. The script execute well with python. but hone trying to do nbconvert I get:; ```; $ python3 converttonotebook.py /home/sftnight/couet/root/tutorials/dataframe/df105_WBosonAnalysis.py /home/sftnight/rootdoc/notebooks; 0.022516250610351562; [NbConvertApp] Converting notebook /home/sftnight/rootdoc/notebooks/df105_WBosonAnalysis.py.ipynb to notebook; [NbConvertApp] Executing notebook with kernel: python3; [NbConvertApp] ERROR | Error while converting '/home/sftnight/rootdoc/notebooks/df105_WBosonAnalysis.py.ipynb'; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/nbconvert/nbconvertapp.py"", line 410, in export_single_notebook; output, resources = self.exporter.from_filename(notebook_filename, resources=resources); File ""/usr/lib/python3/dist-packages/nbconvert/exporters/exporter.py"", line 179, in from_filename; return self.from_file(f, resources=resources, **kw); File ""/usr/lib/python3/dist-packages/nbconvert/exporters/exporter.py"", line 197, in from_file; return self.from_notebook_node(nbformat.read(file_stream, as_version=4), resources=resources, **kw); File ""/usr/lib/python3/dist-packages/nbconvert/exporters/notebook.py"", line 32, in from_notebook_node; nb_copy, resources = super(NotebookExporter, self).from_notebook_node(nb, resources, **kw); File ""/usr/lib/python3/dist-packages/nbconvert/exporters/exporter.py"", line 139, in from_notebook_node; nb_copy, resources = self._preprocess(nb_copy, resources); File ""/usr/lib/python3/dist-packages/nbconvert/exporters/exporter.py"", line 316, in _preprocess; nbc, resc = preprocessor(nbc, resc); File ""/usr/lib/python3/dist-packages/nbconvert/preprocessors/base.py"", line 47, in __call__; return self.preprocess(nb, resources); File ""/usr/lib/python3/dist-packages/nbconvert/preprocessors/execute.py"", line 405, in preprocess; nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources); File ""/usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1106181358:516,ERROR,ERROR,516,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1106181358,2,"['ERROR', 'Error']","['ERROR', 'Error']"
Availability,"This is now fixed in ROOT master. Thanks a lot!. ```; ==100870== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==100870== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info; ==100870== Command: root.exe -n -l -b -q; ==100870== Parent PID: 25804; ==100870== ; ==100870== ; ==100870== HEAP SUMMARY:; ==100870== in use at exit: 49,467,260 bytes in 12,108 blocks; ==100870== total heap usage: 106,943 allocs, 94,835 frees, 148,855,407 bytes allocated; ==100870== ; ==100870== LEAK SUMMARY:; ==100870== definitely lost: 0 bytes in 0 blocks; ==100870== indirectly lost: 0 bytes in 0 blocks; ==100870== possibly lost: 0 bytes in 0 blocks; ==100870== still reachable: 49,437,618 bytes in 11,658 blocks; ==100870== of which reachable via heuristic:; ==100870== multipleinheritance: 3,552 bytes in 6 blocks; ==100870== suppressed: 29,642 bytes in 450 blocks; ==100870== Reachable blocks (those to which a pointer was found) are not shown.; ==100870== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==100870== ; ==100870== For lists of detected and suppressed errors, rerun with: -s; ==100870== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 143 from 72); ```. Should we add a test in roottest for it now that it's clean?. Such as:; https://honeytreelabs.com/posts/memory-checking-unit-tests/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7207#issuecomment-1827477107:1103,error,errors,1103,https://root.cern,https://github.com/root-project/root/issues/7207#issuecomment-1827477107,3,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,"This is presumbaly a bit controversial. safeDeleteList remove elements in order in a RooAbsCollection,; starting with the ones that only have clients and no servers. This is a slow process, and takes 25% of CPU time on large workspace; manipulation workflows, as it takes place at each workspace::import; call. It can also lead to slow ~RooWorkspace. The point is, I don't think this logic is needed at all.; ~RooAbsArg takes care of properly breaking all the client-server links,; both uplinks and downlinks, for every object. I couldn't find a logical; case where a crash would occur if the safeDeleteList logic were to be; removed. All RooFit tests pass after this patch. No problem for my heavy; workspace manipulation worflows either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:499,down,downlinks,499,https://root.cern,https://github.com/root-project/root/pull/9685,1,['down'],['downlinks']
Availability,This is probably due to the fact that pymva is not available. You need to protect for this in the tutorial.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14434#issuecomment-1910126908:51,avail,available,51,https://root.cern,https://github.com/root-project/root/pull/14434#issuecomment-1910126908,1,['avail'],['available']
Availability,"This is ready for final review (@jblomer and @Axel-Naumann's comments (so far) has been addresses) and the 2 failures are pre-existing (mac11.0/cxx17 is missing ""SystemError: initialization of libcppyy3_8 did not return an extension module\n"" and ROOT-fedora32/noimt is having problems with std::unique_ptr, see https://github.com/root-project/root/pull/3760#issuecomment-747061692 for the same failure with master).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-747065567:109,failure,failures,109,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-747065567,2,['failure'],"['failure', 'failures']"
Availability,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16526#issuecomment-2375944990:158,failure,failure,158,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990,2,['failure'],['failure']
Availability,This is revised version of #1227.; Main change is the addition of an auto adjust mode that removes the need of a final adjust.; Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref .; A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1305:167,failure,failure,167,https://root.cern,https://github.com/root-project/root/pull/1305,2,"['avail', 'failure']","['available', 'failure']"
Availability,"This is still a problem in 6.26.04:. ```; root [0] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ROOT_prompt_0:1:52: error: no member named 'DrawClone' in 'ROOT::RDF::RResultPtr<TH1D>'; did you mean to use '->' instead of '.'?; ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ^; ->; root [1] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"")->DrawClone(); root.exe: /home/conda/feedstock_root/build_artifacts/root_base_1654795774398/work/root-source/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:1187: std::string cling::Dyld::searchLibrariesForSymbol(llvm::StringRef, bool): Assertion `!llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(mangledName) && ""Library already loaded, please use dlsym!""' failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1158723732:136,error,error,136,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1158723732,1,['error'],['error']
Availability,"This is still present in v6.28.04 (LLVM 13) but the error is much more verbose:. ```; /tmp root -l; root [0] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ROOT_prompt_0:1:52: error: no member named 'DrawClone' in 'ROOT::RDF::RResultPtr<TH1D>'; did you mean to use '->' instead of '.'?; ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ^; ->; root [1] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"")->DrawClone(); IncrementalExecutor::executeFunction: symbol '_ZSt4swapIP4TH1DENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::enable_if<__and_<std::__not_<std::__is_tuple_like<TH1D*> >, std::is_move_constructible<TH1D*>, std::is_move_assignable<TH1D*> >::value, void>::type std::swap<TH1D*>(TH1D*&, TH1D*&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt11make_sharedIN4ROOT8Internal3RDF13RJittedActionEJRNS0_6Detail3RDF12RLoopManagerERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EERNS2_15RColumnRegisterESI_EESt10shared_ptrINSt9enable_ifIXntsr8is_arrayIT_EE5valueESN_E4typeEEDpOT0_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<std::enable_if<!is_array<ROOT::Internal::RDF::RJittedAction>::value, ROOT::Internal::RDF::RJittedAction>::type> std::make_shared<ROOT::Internal::RDF::RJittedAction, ROOT::Detail::RDF::RLoopManager&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:52,error,error,52,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,2,['error'],['error']
Availability,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1402180699:324,error,error,324,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1402180699,1,['error'],['error']
Availability,This is the commit that fixes the serialization of the ROOT facade https://github.com/root-project/root/commit/7768b4ea83320cc7d6b624742d6c3ca71165e027 . It should work for Python2 and 3 alike so I'm not sure what could be the cause of the error if you have pulled root with that commit included,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823951448:240,error,error,240,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823951448,1,['error'],['error']
Availability,This is the continuation of the campaign to slim down the public RooFit interface:. 1. Remove deprecated `RooCatType`; 2. Make `RooGenProdProj` private; 3. Get rid of `RooScaledFunc`.; 4. Remove RooAbsRootFinder; 5. Remove deprecated RooAbsString; 6. Remove internal `RooFormula` from public RooFit interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12800:49,down,down,49,https://root.cern,https://github.com/root-project/root/pull/12800,1,['down'],['down']
Availability,"This is the first time I have contributed to a project and used GitHub, sorry for the errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3647#issuecomment-480193776:86,error,errors,86,https://root.cern,https://github.com/root-project/root/pull/3647#issuecomment-480193776,1,['error'],['errors']
Availability,This is the log of the failed test:; ```; Test 38: TGraph2D 1 (TRI2 and P0).................................. OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result...................................... 38 FAILED; Result = 1456040; Reference = 1463263; Error = 7223 (was 7000); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/312:468,Error,Error,468,https://root.cern,https://github.com/root-project/root/pull/312,1,['Error'],['Error']
Availability,"This is the underlying issue related to a CMSSW issue:; * https://github.com/cms-sw/cmssw/issues/42979. To reproduce, download this ROOT file with a single `TH2F`:; [histo.zip](https://github.com/root-project/root/files/12886644/histo.zip). And then fit a subset of the 1D slices:; ```c++; std::unique_ptr<TFile> file{TFile::Open(""histo.root"", ""READ"")};; auto hist = file->Get<TH2>(""dxyres_vs_eta"");; hist->FitSlicesY(nullptr, 10, 21, 0, ""QNR"");; ```; You will see a Minuit2 error:; ```txt; Error in <Minuit2>: VariableMetricBuilder Initial matrix not pos.def.; ```. Note that this doesn't happen with the old Minuit, which you can select like this at the beginning of the script:; ```c++; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit"", ""Migrad"");; ```. There is something weird going on, because this happens in the fit for bin 21, but it is necessary to fit all the slices 10 to 20 before. Otherwise there is no error. In other words, fitting the TH1 from the 21th slice in isolation doesn't result in the error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13852:118,down,download,118,https://root.cern,https://github.com/root-project/root/issues/13852,5,"['Error', 'down', 'error']","['Error', 'download', 'error']"
Availability,"This is to enable the supression of file modification error and module relocation error provided by Clang. File modification error is emitted when source file is changed after implicit pcm was generated, but what we want for Clang is to just re-generate new pcm and replace it, rather than emitting errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2686:54,error,error,54,https://root.cern,https://github.com/root-project/root/pull/2686,4,['error'],"['error', 'errors']"
Availability,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:; ```; -bash-4.2$ glxgears; X Error of failed request: BadValue (integer parameter out of range for operation); Major opcode of failed request: 149 (GLX); Minor opcode of failed request: 3 (X_GLXCreateContext); Value in failed request: 0x0; Serial number of failed request: 26; Current serial number in output stream: 27; -bash-4.2$ . ```; Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13016#issuecomment-1598312054:150,Error,Error,150,https://root.cern,https://github.com/root-project/root/issues/13016#issuecomment-1598312054,1,['Error'],['Error']
Availability,"This is what's available on CentOS 6, unfortunately:; ```; =======================================================================================================================; Package Arch Version Repository Size; =======================================================================================================================; Installing:; cmake3 x86_64 3.6.1-3.el6 epel 6.2 M; ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2636#issuecomment-422434617:15,avail,available,15,https://root.cern,https://github.com/root-project/root/pull/2636#issuecomment-422434617,2,['avail'],['available']
Availability,"This is work done by Alex Saperstein, and ANL SULI who worked with me. While working on TTreeCache learning, our Summer Intern (Alex Saperstein) observed that for simple TTrees, the basket size optimization isn’t optimal for two reasons: 1) rounding down to 512 byte blocks 2) neglecting to accommodate for ROOT offsets stored in the baskets. As a result, e.g. with simple (constant size) float array branches the basket size is to small resulting in two baskets per auto-flush. The change would be pretty straight-forward: tree/tree/src/TTree.cxx. Line; -6583 newBsize = newBsize - newBsize%512;. Should become:; +6583 if (pass) { // only on the second pass so that it doesn't interfere with scaling; +6583 Int_t nevbuf = branch->GetBasket(0)->GetNevBuf();; +6583 newBsize = newBsize + (nevbuf \* sizeof(Int_t) \* 2); // make room for meta data; +6583 newBsize = newBsize - newBsize%512 + 512; // rounds up; +6583 }. Tests on simple data show that with this the baskets end up more appropriately sized so that all the auto-flush data fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/238:250,down,down,250,https://root.cern,https://github.com/root-project/root/pull/238,1,['down'],['down']
Availability,"This issue is just a reminder that we need to resolve this TODO:. https://github.com/root-project/root/blob/89776f40f6f9a0f1ea769ed86f8280696b85e01f/tree/dataframe/src/RNTupleDS.cxx#L288-L296. so that e.g. the following wrong usage errors out:. ```cpp; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleDS.hxx>; #include <ROOT/RDataFrame.hxx>. int main() {; {; auto m = ROOT::Experimental::RNTupleModel::Create();; auto x = m->MakeField<int>(""x"", 42);; auto r = ROOT::Experimental::RNTupleWriter::Recreate(std::move(m), ""n"",; ""f.root"");; r->Fill();; }. auto df = ROOT::Experimental::MakeNTupleDataFrame(""n"", ""f.root"");; df.Filter([] (std::string &x) { return !x.empty(); }, {""x""}).Count().GetValue();; }; ```. (on my machine the test above executes without crashes, but that's just luck)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10749:232,error,errors,232,https://root.cern,https://github.com/root-project/root/issues/10749,1,['error'],['errors']
Availability,"This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates.; For example, this is how my graph looks like drawn with “colz” option:; <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:; ```; root yield_graphs.root; graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value; graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value; graph_yield_nom->Interpolate(770, 500) // this returns zero; graph_yield_nom->Interpolate(780, 500) // this returns zero; graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value; graph_yield_nom->Interpolate(800, 500) // this returns zero; ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12535:458,down,download,458,https://root.cern,https://github.com/root-project/root/issues/12535,1,['down'],['download']
Availability,This issue is most likely due to a change that inadvertently broke forward compatibility: https://github.com/root-project/root/issues/14793. You should have seen this already with 6.30 though. Is there an explanation why 6.30 did not trigger the error?. There are two ways to proceed (if the issue is what we think it is):; - Backport the fix to 6.10 and 6.08 (as Philippe suggested/submitted); - Set the compatibility flag `file->SetBit(TFile::k630forwardCompatibility)` (see [#15006](https://github.com/root-project/root/pull/15006)) when you produce the file with 6.32. The second option would be useful to run at least once to confirm that we identified the right cause.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964#issuecomment-2203013897:246,error,error,246,https://root.cern,https://github.com/root-project/root/issues/15964#issuecomment-2203013897,1,['error'],['error']
Availability,"This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. I have implemented the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```; Fixed in ; - https://github.com/root-project/root/pull/14695",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7196#issuecomment-1941955488:1214,avail,available,1214,https://root.cern,https://github.com/root-project/root/issues/7196#issuecomment-1941955488,1,['avail'],['available']
Availability,"This issue only occurs when the conda environment is activated.; I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py); https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py; But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well).; The error message:; ```; Traceback (most recent call last):; File ""./example_ntuple.py"", line 9, in <module>; n = Ntuple(""DataTree""); File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__; TChain.__init__(self, name); TypeError: none of the 2 overloaded methods succeeded. Full details:; TChain::TChain() =>; TypeError: takes at most 0 arguments (1 given); no constructor available for 'TChain'; ```; It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6467:479,error,error,479,https://root.cern,https://github.com/root-project/root/issues/6467,2,"['avail', 'error']","['available', 'error']"
Availability,"This last failure is related to Bulk I/O, not my changes:; ```; -- TEST COMMAND -- ; cd /build/jenkins/workspace/root-pullrequests-build/roottest/scripts; /usr/bin/make utils; -- BEGIN TEST OUTPUT --. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; --- Using ROOT from /build/jenkins/workspace/root-pullrequests-build/build; make: *** No rule to make target `/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/TBulkBranchRead.hxx', needed by `/build/jenkins/workspace/root-pullrequests-build/roottest/scripts/recordtiming_cc.so'. Stop. -- END TEST ERROR --; CMake Error at /build/jenkins/workspace/root-pullrequests-build/root/cmake/modules/RootTestDriver.cmake:186 (message):; got exit code 2 but expected 0; ```; I think we can safely merge this now. I guess bulk I/O is not there for 6.16. The PR build probably used the master of roottest from my fork, which is outdated, or something similar to that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3763#issuecomment-489659558:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/3763#issuecomment-489659558,4,"['ERROR', 'Error', 'failure']","['ERROR', 'Error', 'failure']"
Availability,This leads to errors due to absolute paths if ROOT is already; installed in the configured prefix (e.g. /usr/lib64/root):. CMake Error at cmake/modules/RootNewMacros.cmake:288 (message):; Header path; '/usr/lib64/root/include/ROOT/RVirtualCanvasPainter.hxx'; /usr/lib64/root/include/ROOT/RVirtualCanvasPainter.hxx; is not relative!; Call Stack (most recent call first):; cmake/modules/RootNewMacros.cmake:968 (ROOT_GENERATE_DICTIONARY); graf2d/gpadv7/CMakeLists.txt:6 (ROOT_STANDARD_LIBRARY_PACKAGE),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3303:14,error,errors,14,https://root.cern,https://github.com/root-project/root/pull/3303,2,"['Error', 'error']","['Error', 'errors']"
Availability,This looks good for cmssw. No build error found and all unit tests/relvals/addon tests passed ( https://github.com/cms-sw/root/pull/197 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14444#issuecomment-1912184221:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/14444#issuecomment-1912184221,1,['error'],['error']
Availability,"This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:; In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:; interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found; #include ""clang/AST/DeclNodes.inc""; ^~~~~~~~~~~~~~~~~~~~~~~~~; 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14238:298,error,error,298,https://root.cern,https://github.com/root-project/root/pull/14238,3,['error'],['error']
Availability,"This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:; In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:; interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found; #include ""clang/AST/DeclNodes.inc""; ^~~~~~~~~~~~~~~~~~~~~~~~~; 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14264:298,error,error,298,https://root.cern,https://github.com/root-project/root/pull/14264,3,['error'],['error']
Availability,"This looks real:; ```; [ RUN ] TRootTDS.FromARDFMT; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(176): error: Expected equality of these values:; 0.; Which is: 0; *min; Which is: 7; [ FAILED ] TRootTDS.FromARDFMT (11 ms); ```; where the test is:; ```cpp; std::unique_ptr<RDataSource> tds(new ROOT::Internal::RDF::RRootDS(treeName, fileGlob));; RDataFrame tdf(std::move(tds));; auto max = tdf.Max<int>(""i"");; auto min = tdf.Min<int>(""i"");; auto c = tdf.Count();. EXPECT_EQ(30U, *c);; EXPECT_DOUBLE_EQ(29., *max);; EXPECT_DOUBLE_EQ(0., *min);; ```; I just checked with `valgrind` locally (on my fedora) and it had no complaints. I will rerun the test on windows ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11504#issuecomment-1271188053:146,error,error,146,https://root.cern,https://github.com/root-project/root/pull/11504#issuecomment-1271188053,1,['error'],['error']
Availability,"This makes it possible to create a pre-downloaded cache before running the tests, so that it is possible to run the tests in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:39,down,downloaded,39,https://root.cern,https://github.com/root-project/root/pull/404,1,['down'],['downloaded']
Availability,"This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13620:41,reliab,reliable,41,https://root.cern,https://github.com/root-project/root/pull/13620,1,['reliab'],['reliable']
Availability,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence; ```; Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap; Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found!; ```; rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14145#issuecomment-1833430490:189,Error,Error,189,https://root.cern,https://github.com/root-project/root/pull/14145#issuecomment-1833430490,1,['Error'],['Error']
Availability,This means that 2 different part of rootcling disagree on whether TFormula has a Streamer member function. Namely the part that should have written down the implementation of the wrapper found **wrongly** that there was no TFormula::Streamer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-411915705:148,down,down,148,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-411915705,1,['down'],['down']
Availability,This might help with some unclear Windows errors seen sporadically in the CI e.g. https://github.com/root-project/root/actions/runs/7674413699/job/20918943965?pr=14463,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472:42,error,errors,42,https://root.cern,https://github.com/root-project/root/pull/14472,1,['error'],['errors']
Availability,"This might or might not fix the failures at https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/10051/testReport/junit/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_samplecallback/ , but it's anyway an improvement",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9047:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/9047,1,['failure'],['failures']
Availability,This needs some fixing for gtest to be available:. https://github.com/root-project/root/blob/78936428fb4bc7767e8486b6cadfd319dfac6d2b/cmake/modules/SearchInstalledSoftware.cmake#L1773-L1778,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396209658:39,avail,available,39,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396209658,1,['avail'],['available']
Availability,This new release includes some improvements:; * Add support for pushforward- and pullback-style functions; * More supported constructs in forward and reverse mode; * Forward mode support for CUDA programs; * AD-based Floating Point Error Estimation Framework; * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11544:232,Error,Error,232,https://root.cern,https://github.com/root-project/root/pull/11544,1,['Error'],['Error']
Availability,This new release includes some improvements:; * Improvements in the array handling in the Error Estimation Framework; * Fixed numerical stability of the pow pushforward; * Fixed handling of for-loop conditions in reverse mode; * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12075:90,Error,Error,90,https://root.cern,https://github.com/root-project/root/pull/12075,1,['Error'],['Error']
Availability,This now depends on #12981 for the failures on ubuntu18,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1584649695:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1584649695,1,['failure'],['failures']
Availability,"This now shows the error that we know about:; ```; In file included from input_line_3:2:; In file included from /Users/sftnight/ROOT-CI/build/include/Rtypes.h:193:; /Users/sftnight/ROOT-CI/build/include/TGenericClassInfo.h:22:10: remark: building module 'std_vector' as '/Users/sftnight/ROOT-CI/build/lib/std_vector.pcm' [-Rmodule-build]; #include <vector>; ^; Error: Building module 'std_vector' implicitly. If 'std_vector' requires a ; dictionary please specify build dependency: 'G__Core.cxx' depends on 'std_vector'.; Otherwise, specify '-mByproduct std_vector' to disable this diagnostic.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14897#issuecomment-1981259299:19,error,error,19,https://root.cern,https://github.com/root-project/root/pull/14897#issuecomment-1981259299,2,"['Error', 'error']","['Error', 'error']"
Availability,This one time unfortunately that is not the case. The written file were incorrectly and could lead to spurious crash. The new file when read in unpatched old version can lead to 'just' spurious error message (that can be suppress with the insertion of custom ROOT error handler).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1998568671:194,error,error,194,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1998568671,2,['error'],['error']
Availability,This optimizes the ROOT startup for C++ Modules by avoiding deserialization of redundant declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998:79,redundant,redundant,79,https://root.cern,https://github.com/root-project/root/pull/2998,1,['redundant'],['redundant']
Availability,"This option gives clean/raw Cling without any includes. This is intended; to be used for debugging purposes. ```; [yuka@yuka-arch module-release]$ bin/root.exe --pedantic. ****************** CLING ******************; * Type C++ code and press enter to run it *; * Type .q to exit *; *******************************************; [cling]$ int a = 1;; [cling]$ a; (int) 1; [cling]$ std::vector<int> b;; input_line_7:2:7: error: no member named 'vector' in namespace 'std'; std::vector<int> b;; ~~~~~^; input_line_7:2:17: error: expected '(' for function-style cast or type construction; std::vector<int> b;; ~~~^; input_line_7:2:19: error: use of undeclared identifier 'b'; std::vector<int> b;; ^; [cling]$ #include <vector>; [cling]$ std::vector<int> b;; [cling]$ b = {1,2,3}; (std::vector &) { 1, 2, 3 }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2561:418,error,error,418,https://root.cern,https://github.com/root-project/root/pull/2561,3,['error'],['error']
Availability,This otherwise leads to compilation errors when we do `::fileno`; as OpenBSD implemented fileno as a macro (which seems to be allowed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1320:36,error,errors,36,https://root.cern,https://github.com/root-project/root/pull/1320,1,['error'],['errors']
Availability,"This patch adds `df.DefinePerSample`, a method that lets user define; new columns that are only updated per ""data-block"" rather than per; entry, where a ""data-block"" is made of several entries that have the; same data-block ID (e.g. that belong to the same TTree in a TChain). The data-block ID is passed as an argument to the callback, so that; quantities can be defined based on the sample being processed. Currently a jitted version is not available and RDataSources have; no way to hook into the mechanism (they get one data-block per task; with empty data-block ID). Support for these cases will be added by; later commits. This resolves #6745. This PR should make @stwunsch happy. To do:. - [x] test `RDataBlockID` with entry ranges; - [x] naming: `RDataBlockID -> RDataBlockInfo`? `DefinePerSample -> DefinePerDataBlock`?; - [x] add support for jitted `df.DefinePerSample(""myconstant"", ""rdfdatablock_.Contains(\""MC\"") ? 42. : 8."")`; - [ ] add release notes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8841:443,avail,available,443,https://root.cern,https://github.com/root-project/root/pull/8841,1,['avail'],['available']
Availability,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:31,redundant,redundant,31,https://root.cern,https://github.com/root-project/root/pull/760,1,['redundant'],['redundant']
Availability,This patch already landed in llvm. Clang emits error when implicit modules was relocated from the; first build directory. However this was biting our usecase where we copy; the contents of build directory to another directory in order to; distribute.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2407:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/2407,1,['error'],['error']
Availability,This patch fixes a few recent runtime_cxxmodules failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2331:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/2331,1,['failure'],['failures']
Availability,This patch fixes a few recent runtime_cxxmodules failures. Fixes ROOT-9709.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2977:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/2977,1,['failure'],['failures']
Availability,This patch fixes the following error:. In file included from input_line_12:3:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-16/build/include\TGWin32.h:24:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-16/root/graf2d/win32gdk/gdk/src\gdk/gdk.h:30:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-16/root/graf2d/win32gdk/gdk/src\gdk/gdkcc.h:4:; C:/build/night/LABEL/windows10/SPEC/default/V/6-16/root/graf2d/win32gdk/gdk/src\gdk/gdktypes.h:32:10: fatal error: 'glib.h' file not found; #include <glib.h>; ^~~~~~~~,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5142:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/5142,2,['error'],['error']
Availability,This patch fixes the following error:. In file included from input_line_12:3:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-18/build/include\TGWin32.h:24:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-18/root/graf2d/win32gdk/gdk/src\gdk/gdk.h:30:; In file included from C:/build/night/LABEL/windows10/SPEC/default/V/6-18/root/graf2d/win32gdk/gdk/src\gdk/gdkcc.h:4:; C:/build/night/LABEL/windows10/SPEC/default/V/6-18/root/graf2d/win32gdk/gdk/src\gdk/gdktypes.h:32:10: fatal error: 'glib.h' file not found; #include <glib.h>; ^~~~~~~~; CUSTOMBUILD : error : C:/build/night/LABEL/windows10/SPEC/default/V/6-18/build/bin/rootcling.exe: compilation failure (C:/build/night/LABEL/windows10/SPEC/default/V/6-18/build/bin/libWin32gdk1fec221199_dictUmbrella.h) [C:\build\night\LABEL\windows10\SPEC\default\V\6-18\build\graf2d\win32gdk\G__Win32gdk.vcxproj],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5067:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/5067,4,"['error', 'failure']","['error', 'failure']"
Availability,"This patch fixes the histhistv7testUnit test, which was failing with the following errors:. 77: [ OK ] AxisTest.Irregular (0 ms); 77: [ RUN ] AxisTest.Labels; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:83,error,errors,83,https://root.cern,https://github.com/root-project/root/pull/5054,4,['error'],"['error', 'errors']"
Availability,"This patch includes:; - Remove existing modulemap.overlay files; Cling now can generate virtual overlay files on-demand.; - Implement `-modulemap_overlay` flag to Cling; This flag is used to tell Cling the location of modulemaps to be; overlayed. (eg. stl.modulemap, libc.modulemap); - Generate and load virtual modulemap in Cling; It is in Interpreter constructor, happens as part of cxxmodules; initialization step.; - Implement an interface to Clang CompilerInvocation which can take FileSystem pointer; Previously, Clang only took a ""string of filenames"" which clearly doesn't; work for our usecase. We already discussed this new interface at; modules meeting, so this change will land upstream.; - Add a file existence check in Clang; When compiling a pcm and when Clang saw the #include with which pcm was available; (or being generated implicitly), Clang was putting a notation of the full path to this pcm.; This caused an error when build directory was deleted, because the path didn't exist anymore. This patch enables modules to be binary distributed, and to make it; work in CMSSW enviroment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3267:812,avail,available,812,https://root.cern,https://github.com/root-project/root/pull/3267,2,"['avail', 'error']","['available', 'error']"
Availability,This patch instead prints an error with some useful debugging; information that should help identify the cause of this issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/777:29,error,error,29,https://root.cern,https://github.com/root-project/root/pull/777,1,['error'],['error']
Availability,"This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml; input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden; ^; rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and; on the distribution machine. We should probably rely on an environment variable; to turn off this diagnostic selectively and more the reponsibility if something goes; wrong to the distribution team. They should have better knowledge what is safe to; be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4495:420,error,error,420,https://root.cern,https://github.com/root-project/root/pull/4495,2,['error'],['error']
Availability,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10696#issuecomment-1146203166:145,failure,failures,145,https://root.cern,https://github.com/root-project/root/pull/10696#issuecomment-1146203166,1,['failure'],['failures']
Availability,This patch makes the implementation reusable and ready to configure it such; that we can remove the redundant information for modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3687:100,redundant,redundant,100,https://root.cern,https://github.com/root-project/root/pull/3687,1,['redundant'],['redundant']
Availability,"This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522:480,error,errors,480,https://root.cern,https://github.com/root-project/root/pull/522,1,['error'],['errors']
Availability,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3095#issuecomment-444213232:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/3095#issuecomment-444213232,1,['failure'],['failures']
Availability,"This prevent the inappropriate execution on a rule intent for; an inner object on the outer object('s memory space). In a case where the top level branch is:; ```; 1 edm::Wrapper<std::vector<pat::CompositeCandidate, std::allocator<pat::CompositeCandidate> > >; ```; which contains; ```; 2 16, obj, vector<pat::CompositeCandidate> simple base pat::PATObject<reco::CompositeCandidate>; 3 360, overlapItems_, vector<edm::PtrVector<reco::Candidate> > simple base edm::PtrVectorBase; 4 48, cachedItems_, atomic<vector<const void*>*> ***TRANSIENT-WITH-RULE**; ```; The TStreamerInfo Action Sequence for (4) was being executed the obj branch/level. The bug was that GatherArtificialElements would drill through (3) eventhough; it was not split and it did so because it did not recognize there was a branch for; it because it added (errorneously) the name of the base class in the branch prefix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2860:825,error,errorneously,825,https://root.cern,https://github.com/root-project/root/pull/2860,2,['error'],['errorneously']
Availability,"This prevents certain ugly error messages in case an exception is; thrown during a multi-thread event loop: before this patch, in that; case the thread's slot number was never returned to the RSlotStack; and it could result in some misleading error messages being printed on; screen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6601:27,error,error,27,https://root.cern,https://github.com/root-project/root/pull/6601,4,['error'],['error']
Availability,"This probably does not help, but just in case:; https://github.com/openstreetmap/mod_tile/issues/201; https://root-forum.cern.ch/t/number-5-is-alive/52310; https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78969",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13216#issuecomment-1627696904:143,alive,alive,143,https://root.cern,https://github.com/root-project/root/issues/13216#issuecomment-1627696904,1,['alive'],['alive']
Availability,"This problem affects multi-range fits with `RooAbsPdf::fitTo` and was; reported in Jira issue [ROOT-9530](https://sft.its.cern.ch/jira/browse/ROOT-9530). Each RooNLLVar was created with the normalization set corresponding to; the subrange, not the union range like it should be. This commit adds an; extra term to the final likelihood function to cancel this normalization; problem. The extra term doesn't have to be added for the extended fit, because; adding extension terms for the likelihoods in each range as currently; done is mathematically equivalent to applying the normalization correction term; plus adding a global extension term. I'm not sure if I should call this a bug or not. On the one hand, the result that was computed previously was not wrong, it just didn't use all the information (relative number of events in each subrange was not considered). On the other hand, the result was not the best possible estimate given the information in all sub-ranges, and users expects the maximum likelihood estimate to be the best estimate available given the information. There is also a [PDF document](https://github.com/root-project/root/files/6245069/Multi_range_likelihood_fits_in_RooFit.pdf) that explains the math behind this pull request, in particular why the normalization correction doesn't have to be applied for the extended fit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7719:1048,avail,available,1048,https://root.cern,https://github.com/root-project/root/pull/7719,1,['avail'],['available']
Availability,"This problem has been already reported in https://sft.its.cern.ch/jira/browse/ROOT-8085. We need to have a new implementation of TH1::GetQuantiles, extending what is available in `TMath::Quantiles` for weighted data set.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9364#issuecomment-1012925419:166,avail,available,166,https://root.cern,https://github.com/root-project/root/issues/9364#issuecomment-1012925419,1,['avail'],['available']
Availability,"This problem is blocking ATLAS in adopting ROOT 6.28.x in production. . We use an ATLAS specific pyROOT script 'diff-root' that compares AODs branch-by-branch in our CI and integration tests that is not working in ROOT 6.28.x with the symptoms described above. The original error message of this script is:. ```; [..]; Py:diff-root INFO comparing [2932] leaves over entries...; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPKN4xAOD28CaloClusterBadChannelData_v1ES5_EEbT_S6_T0_' unresolved while linking symbol '__cf_295'!; You are probably missing the definition of bool std::__equal<false>::equal<xAOD::CaloClusterBadChannelData_v1 const*, xAOD::CaloClusterBadChannelData_v1 const*>(xAOD::CaloClusterBadChannelData_v1; const*, xAOD::CaloClusterBadChannelData_v1 const*, xAOD::CaloClusterBadChannelData_v1 const*); Maybe you need to load the corresponding shared library?; cling JIT session error: Failed to materialize symbols: { (main, { _ZSteqISt6vectorIN4xAOD28CaloClusterBadChannelData_v1ESaIS2_EESaIS4_EEbRKS0_IT_T0_ESA_ }) }; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK20TrigRoiDescriptor_p3S4_EEbT_S5_T0_' unresolved while linking symbol '__cf_452'!; You are probably missing the definition of bool std::__equal<false>::equal<TrigRoiDescriptor_p3 const*, TrigRoiDescriptor_p3 const*>(TrigRoiDescriptor_p3 const*, TrigRoiDescriptor_p3 const*, Trig; RoiDescriptor_p3 const*); Maybe you need to load the corresponding shared library?; cling JIT session error: Failed to materialize symbols: { (main, { _ZN16__cppyy_internal8is_equalI30TrigRoiDescriptorCollection_p3S1_EEbRKT_RKT0_ }) }; cling JIT session error: Failed to materialize symbols: { (main, { _ZN16__cppyy_internal8is_equalI30TrigRoiDescriptorCollection_p3S1_EEbRKT_RKT0_ }) }; [..] ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1543771925:274,error,error,274,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1543771925,4,['error'],['error']
Availability,This problem was reported here: https://root-forum.cern.ch/t/hide-error-bars-behind-tpavestats/27996/2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1684#issuecomment-369296483:66,error,error-bars-behind-tpavestats,66,https://root.cern,https://github.com/root-project/root/pull/1684#issuecomment-369296483,1,['error'],['error-bars-behind-tpavestats']
Availability,"This proposed new Strategy in minuit2 is the same migrad behaviour as Strategy=2 but with the following changes to the Hesse calculation:; * The step and g2 tolerances have been zeroed so that the 7 cycles are forced in the diagonal-term calculation. This was found to be necessary in cases where asimov datasets were used for the minimization and there were very few iterations for the approximate covariance to be determined from. ; * Central finite difference is used for mixed partial derivatives. This requires 3 extra function evaluations per derivative, but is necessary in the case of minima where there is high curvature (in the case of high stats) and the forward finite difference (default) behaviour leads incorrectly to a non-positive-definite covariance matrix; * Return the uncorrected covariance matrix, even if it is not positive definite. This useful for checking just how far from positive-definiteness the matrix is by being able to examine the eigenvalues. . Additionally, a lower bound on the precision allowed for the spread of eigenvalues of the ""hessian"" correlation matrix (computing a correlation matrix with the hessian as if it was a covariance matrix) was reduced from 1e-6 to 1e-12 (see MnHesse.cxx) ... it is not clear why 1e-6 was the lower bound previously, but current machine precision can beat that (I get locally 1e-8). I left a comment about whether this lower bound should be made configurable or not... This new strategy was tested with a model with high statistics (almost 50 million events) where the migrad minimization was successful but the hessian was being forced positive definite. With this new Strategy 3 the hessian is accurate and positive definite in all cases tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13109:157,toler,tolerances,157,https://root.cern,https://github.com/root-project/root/pull/13109,1,['toler'],['tolerances']
Availability,"This pull request **fixes 1 alert** when merging e86a1c60cf638cc906d71b58b57cb7121b92b830 into a367caf03a4cea20042a8aaa3c35b4302426803f - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-80b182500b3254cd49d8862a73c0c1ccfe1a7cab). **fixed alerts:**. * 1 for Unused variable, import, function or class; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11775#issuecomment-1327454519:433,down,down,433,https://root.cern,https://github.com/root-project/root/pull/11775#issuecomment-1327454519,1,['down'],['down']
Availability,"This pull request **fixes 3 alerts** when merging c52f87d70dc8d71b833772a824d8ab2bafb24a6e into 7a90392f2a59bb4ebeb3841b44893e39224419fc - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-e77fd08e10c0c969f9c5653007c7cb982b83e9b3). **fixed alerts:**. * 2 for Useless conditional; * 1 for Unused variable, import, function or class; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11705#issuecomment-1315121371:463,down,down,463,https://root.cern,https://github.com/root-project/root/pull/11705#issuecomment-1315121371,1,['down'],['down']
Availability,This pull request **introduces 1 alert** when merging 04e729216836e7bd3b0e811c0e2f9428f2cd50af into 3d17c9ea2b9ec8a20b2820c55bea7f4a27d7c22e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-3b92f1f7be0125920dcf43822457e94a20a81f90). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184#issuecomment-984545730:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/9184#issuecomment-984545730,1,['error'],['error']
Availability,This pull request **introduces 1 alert** when merging 19c94c1d74551e9faade216083539327fe596967 into 6cb78dcb67252d230024c7690f0590a6088e5803 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-039cf3ee2eaf71853b461e7cf3849577e5878f29). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9346#issuecomment-981608436:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/9346#issuecomment-981608436,1,['error'],['error']
Availability,This pull request **introduces 1 alert** when merging 37f761c2bdd73fcbd3c28c843e53882ca4473490 into 12807aa251590c5b297bbe4dedf823bc77e1193f - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-a70fa534295ca161d315f4ae253cebb82de29756). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184#issuecomment-984574294:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/9184#issuecomment-984574294,1,['error'],['error']
Availability,This pull request **introduces 1 alert** when merging 40c2b148292c74d91ddb2fd1044043839ec909ee into f0a240b8554d08f4f3269e02e000d86d10381946 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-d116da91d3dab2210f0c898651e28bad009c7fd6). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11458#issuecomment-1261021594:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/11458#issuecomment-1261021594,1,['error'],['error']
Availability,This pull request **introduces 1 alert** when merging 6c75a476a93bc12e9d1d37e5bc91fde7792bf51e into 9940f7d41859db49ce8ef83a6929fb495e3c7a48 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-ed1f12b5a0a9788c24f23b69b6f70d4e895e57b1). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8658#issuecomment-879060466:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/8658#issuecomment-879060466,1,['error'],['error']
Availability,"This pull request **introduces 1 alert** when merging 7120c47b4d4ef120d5ae21aeba7c1ca46f96aa5e into cb16d59940f05df1e04fd4fe161099af22522300 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-3162fe654b1a03a79ae08b10fe96d9b188ffe79a). **new alerts:**. * 1 for Unused variable, import, function or class; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11762#issuecomment-1325324109:436,down,down,436,https://root.cern,https://github.com/root-project/root/pull/11762#issuecomment-1325324109,1,['down'],['down']
Availability,This pull request **introduces 1 alert** when merging eb57d62d91a9466486402db6dd438769376d7d0e into 12cf2101e299a70d2bbe808df21b1a403cfdb9cd - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1d1c09772c0e436a78e28a80a3dccc63c8d789cc). **new alerts:**. * 1 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10896#issuecomment-1180587787:290,error,error,290,https://root.cern,https://github.com/root-project/root/pull/10896#issuecomment-1180587787,1,['error'],['error']
Availability,This pull request **introduces 12 alerts** and **fixes 28** when merging d8abd1f34e39c10631645cbe41f0f1615c47447c into 35b5aaef38b6635e131e7d93a0c96f69bb293b9d - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-fbfb9f959e1ab826e33aea9db3bf9dfe711aec22). **new alerts:**. * 11 for Non\-callable called; * 1 for Syntax error. **fixed alerts:**. * 27 for Use of the return value of a procedure; * 1 for Module imports itself,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8884#issuecomment-903613362:340,error,error,340,https://root.cern,https://github.com/root-project/root/pull/8884#issuecomment-903613362,1,['error'],['error']
Availability,This pull request **introduces 13 alerts** when merging 4b215c9502aaa13b57362bbf21515001e4f43626 into 896c3f006888ee147770a8b9c1cde2b113472841 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-f9afdfe7d4f5d9d8a4a032fd42933549e93229fe). **new alerts:**. * 11 for Syntax error; * 2 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8701#issuecomment-882717566:293,error,error,293,https://root.cern,https://github.com/root-project/root/pull/8701#issuecomment-882717566,2,['error'],['error']
Availability,This pull request **introduces 13 alerts** when merging 834c2e541674b42e219935d762ffb94a6e0d18e0 into 55a7841e24ac8a65d92e996f85449c0027424b64 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-fda8ce8deb672fe0f864853c034a74e6cac80fbf). **new alerts:**. * 11 for Syntax error; * 2 for Syntax error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8701#issuecomment-883198551:293,error,error,293,https://root.cern,https://github.com/root-project/root/pull/8701#issuecomment-883198551,2,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 03d813216d18476ac00690bfa45be6ebd6d2b573 into bf347a53dbcfe469a4e6d39c5537f24300fb9f04 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-92a0815d02256d3c41de76bd78ed59927ecd130f). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1319074850:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1319074850,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 09f6fdde14fee71f3c446e3a14d566642fcb2d73 into 99032172f6216154e7e0824a3d32925fcb650e7a - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-9ad5e3f5cd2964950fd551d8ce94224629042540). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1319879474:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1319879474,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 223e6f3db47f44a29ff090bcbb30ed4e8a9a295c into 5764b6aa3d04ec2fceaa15ddbfd20541418ebee7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-f996be376a861fda1eaf0677132494825b6c234f). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1317515271:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1317515271,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 22dd7f86a60ff4f26b8894876c571f45567ceb3a into 323c21416cea9a64080698c23a7e2f6f6d1808bf - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-73ac36cca67998ddc3d7a0c5abf7a5f2eafbc059). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1321128585:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1321128585,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 279de79f8fd0e28b7533159580fa55a684636b77 into 323c21416cea9a64080698c23a7e2f6f6d1808bf - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-f9b6bd1caa67ccf4e235d3545b39b2bc1a4b7806). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1321115038:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1321115038,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 2aab582da8bbc4239c5b01fcbee3b9b6bfe78129 into 8cc176c9ee7dde3b72501a2b657534bc6bd10418 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-164d20e4477aecfba59e6df34e740d67a18bf884). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1298731089:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1298731089,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 2baacf55f58ed7760e58f67416386b87be5c567a into b53640813aa29e458ddab421141e39a4e2fd1842 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-7bde1faa8fd87621fa26b58d22df74db38cbb583). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1318390950:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1318390950,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 2cced58c48a01ada3ef4551fd9525fc4830181a6 into cde3a487f63e7dcf88f691c14d255f13e18278f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-d9b8b0ec762c71e293c3893c4d53a78ea9f1dfb0). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326673110:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326673110,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 3b962fc8f64df0affeccf447df3e44afc378cb06 into 8ce27408659062a17c48b7b572352a1ba05e8a81 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-9b25ed4e94cd087caf948fc41cdf3bcbf8423014). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1269769470:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1269769470,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 3f8879a815ba5feee8e8c491a9d801c5849d2866 into c273a91abdad22b46d8e62073535fcd6945218e0 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-65b3d984207e8361dba35bb8cac074be20d9d0ab). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1319669763:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1319669763,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 50d2b0f54e14bf4b3093f87d5feed57cc60611ef into bd200315c50ac1520f75f959a852c6d3333f8aa9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-a10fba1d231d7d7d3a751bf31b1b5e5467ab99e6). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1316480401:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1316480401,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 5a65bccb74ff97f2b75b9256edd90a2d013df4e2 into c273a91abdad22b46d8e62073535fcd6945218e0 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-aee71e086e22a434d2ce32d60528b934404d9d38). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1319305629:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1319305629,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 5db66d712f9befd939e52112b322e039ae105b93 into 64386a8122b1f7d9f4870c2e7f85484a9007167e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-caafc9282c3c85ce07dfe9beb02190fcd1012a4e). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326180372:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326180372,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 6e9cad524f71b65f0fd6b37c108bda566c999e9d into cde3a487f63e7dcf88f691c14d255f13e18278f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1b79fb391da41767bf765089dabab41748d7a570). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1327156328:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1327156328,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 819d5b611ef1776359a461722351c91d40e731ba into a05d4beded1481a86a65e450826352eb528b03e7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-e1509770a8aca1335d81c9a3513917c741f1d8a3). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312403732:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312403732,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 8343c77a1628d0e21b30fc4336d8af827319b083 into a05d4beded1481a86a65e450826352eb528b03e7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-e6f899b8ff13cb1721741226596581f9aea782d5). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312502311:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312502311,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging 8525d27e44b45c61df2fd800b52fdeff1900d14a into 43016f031b870f7ea1f30a245b8072017af485bb - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-620d019b72d7396600683749c777dd32c11a2fb3). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1306336762:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1306336762,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging a8636e39ac994000a37222b2ad8cd0c940356d59 into a3809f82b0430a6e942a85e2cf1488463542d4a6 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-68fcee0c9c9b76fd0f76abf073c208f0af6afa22). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1339788387:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1339788387,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging a902835e2ac1feaeb680737da93405a6e29922ce into cde3a487f63e7dcf88f691c14d255f13e18278f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-07223dd3ebacfd9db350aa8404a665d40c7c05a1). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326899987:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326899987,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging b63f25db5304aa3c90896512558a4041ba46c950 into a05d4beded1481a86a65e450826352eb528b03e7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-bd7bbba29ccc9c550b9369e9fa672ed67a52058b). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312663226:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312663226,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging c3a88ba7ffb460af1dba7c068b42e3a0ebbd4ad5 into a17ad74c4b825dcdcdea5d1eb5f9df805caa63fa - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-916dea89ec2912f7bfeb85f75d7d8c907291e540). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1324927415:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1324927415,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging ca2f9bd19ed10dc95b0badc6964c0f2e034611df into 7a90392f2a59bb4ebeb3841b44893e39224419fc - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-47ead4ddbbad2478e73a72a1b2c2978cd1aab44b). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1314341155:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1314341155,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging cd86f17ccba2fc44977303b920a9a89dacb8af95 into 194180c84f5b59658be46e69660094a0aa4dd3c0 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-559804ead09a31a00889f39793818f6b40b554ad). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312008553:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312008553,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging e4dad5d121f7f66784f802a06334953f8fb17a45 into 99a241911450b020762237b7fd772846dd718bb7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-d661dc38afd686d57395777cd26df572c621c5ab). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1325314054:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1325314054,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging e581df924f2dd2aa3c6c7a485f3d84d8eb144522 into b13756d544d91803e31c7b6aa0c32ae05481e7f8 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-d32d2d614dea682b1ca981ca695dd2d6e81b01b6). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1271470899:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1271470899,1,['error'],['error']
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging f711a806ac0d3f10bf0e520d7d06b00d860678a2 into 229004bbd8fe222fafe7850d5df7f1eada2493a3 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-8bd21265cc371f5af81e77bd0009096f29972242). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error; ---. **Heads-up: LGTM.com's PR analysis will be disabled on the 5th of December**, and LGTM.com will be shut down ⏻ completely on the 16th of December 2022. Please enable GitHub code scanning, which uses the same CodeQL engine :gear: that powers LGTM.com. For more information, please check out [our post on the GitHub blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1342758071:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1342758071,2,"['down', 'error']","['down', 'error']"
Availability,"This pull request **introduces 71 alerts** and **fixes 30** when merging f7f290378e1c787724b4558e1355560469006c22 into a05d4beded1481a86a65e450826352eb528b03e7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-582dc477cc11db50d85c3537d7d7938c234981b4). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class. **fixed alerts:**. * 12 for Unused import; * 10 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Syntax error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312716655:1034,error,error,1034,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312716655,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 0124e04a5908d7698b4dd2568f6acb9b0746c658 into 70f96ca797b5b4f16368b8081a34b72edbc70461 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-0b41c05b3a57484dd727310f32041fa8109ffd25). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1185519236:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1185519236,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 012e0ba63d28aaf6396c293ce1db7b828c8b8c6a into f7dd633e20241d34784cf3e2a1d3d1d30b2835bf - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-6ca38551d818df3f78c6b60f90b41a93928f186c). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1183349537:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1183349537,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 0ab07763c4b9d13725e2e946886364e830ae6d6d into 4e1e5432242c0b1d3b315bf91fb4d7dd3b4cc925 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1c57ee6a6a7b5ed3ebe82cb34d0f40c60722ac36). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1255864233:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1255864233,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 0cc7300d48c70207bae2cf885e3afd00549aeb8c into dea9a9dcc556003d6c0e90519fc1973df776cc26 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-34c811028aca24558777d78ce4448951cf208c8c). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1142350501:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1142350501,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 0f25036e31620e79ff765652ee299474a77e0cfd into a1155ed9696a98d4680992bf543b419b1d2925b0 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-7e4ee52059a674c7183a9dc5bfc77df8b3653ac2). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1185359130:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1185359130,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 1dde2ff9b9d60d5c988866e47ed918ec71cb6645 into 0fb78b951d33a0d4ccf69739e0fa97f57ee79b1e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-c87abdfe59f00a74a10ee47b8256685219421d53). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1176025561:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1176025561,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 1e6cba884340c827430a50489f15abb13ff4ebab into 84171a53922501c4fc433abc2806d1822fa15e9c - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-cbec4d424cb96411b3efea7c0c743521fba74e60). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1252020558:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1252020558,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 1ee458515e89f364a21914e0b80fa4d801f5d051 into e1d4a59786dea09cddc23735a4526f9838a1bd8e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-5249555f5d0e23964f0a912b9c1971c47e74bad4). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1196647392:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1196647392,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 21b8a9d0cf3e71d04f565cac2e231d71deb42f43 into f27c7bcbd3de0820f21729d6581574568095add1 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-cc920449224dda7a021fd64bea82310306ef2432). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1256056379:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1256056379,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 2201bf07c5afb714e8a37bd33f2b4d369e8b15d0 into cf2dea0780f99ebabaad56c6549de16f861f34d1 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-319d95f5ea51f303675cf9388494adb779aa0834). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1164062018:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1164062018,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 236a838ee9c71bb835877e9cf66f56dfd1709620 into 0fb78b951d33a0d4ccf69739e0fa97f57ee79b1e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-9ee53b134d082bcfb176fd95ec8d4e4a0d18908c). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175996773:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175996773,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 2757afd228821af33f08ffb7b08960689b4d75dd into 7e58e5a3f59dca0b4a7e180643cd6f7215fa7ace - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-439efe2ad5b9cf4e4198be981cb99b60ba827b68). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1114209622:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1114209622,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 2907b190230381f9fb4a1d2c4be0ba14e6546b02 into 8e6f7236bc02d28cd5d767fc3d1462b1da211c64 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-18140221d2c10c266d0e7322f8dabe9c15dfb24e). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1134790050:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1134790050,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 3c4278877aab1add69cc4e4443c9a055e0d97630 into b890efd8e8b87d7cc1f5cc803d67aa9717fb4920 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-433e91d1d934a7850d71097c30966d9d6a1a5f38). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1178671610:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1178671610,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 3d9e47b0bedf418074a886bc495626368f2996b4 into 1679bc9525ded9876fabc42c9f5e5165a97b23c7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-730add8f3f6934ba6450c22baffd6a9c3f51065e). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1137111530:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1137111530,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 416f1ab273ea97a28be68d58f1ea3a43309a59fb into 2130fb2ef097120b27bce92e1c8837153dc039ba - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-c9060e848a5cf57791f70796ba9728bafca32b71). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1243329272:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1243329272,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 4417a2cd34effdc6ea59797c2d86b6ef8ca8717a into 9114cacb2aaeb19bbad9009b624d27f2e6e0e62d - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-44ee86a553d4b54d27d767f30583bdd503408a21). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1135914477:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1135914477,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 45c0f48f3c3c631d291e0a7a32fd1ba292e79160 into 0496657ffe037b0c2aebf2449634bc7af19f8412 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-c681281095aef9ddf22067c1671870cd3d74a021). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1135179553:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1135179553,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 5164bdef5ca01cb2cec3f422d19de08415dbe0a8 into 7ed0fd11ad6d2c45bd916bb74c635ad031905890 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-c90f3a937f0926c6bb356042d3b585b7efc6d5e2). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1200309830:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1200309830,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 51f0808cd1bf90bcf426e87b3017463df672c5f9 into d00bd5cb306de12b064d88153f84892ad3108e24 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-e25f8e38f980d68b35406007ca118f832d4d56ff). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1163320367:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1163320367,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 56119361df619965632fc256108dc197c5eac4fc into 0fb78b951d33a0d4ccf69739e0fa97f57ee79b1e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-a8dbe171023386f152bcd2c245c0e1f7fb475e71). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1176105979:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1176105979,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 56b7989c254113c23702493f58093e9737c3535c into 1922b4eb44e94cc8737863d8e420ebfdbcf5d481 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-eddca500b4a15274cbe9ec1384c0bc310a58abb7). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1180225642:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1180225642,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 5751b893022331c6232db48a9f34b9e68816f0c0 into 2a004822dcae19df3595c41246249ad58e21a928 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-69b9eaea4a03341648c8d5387bf07948b8f7bc24). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1086724874:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1086724874,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 69fd09240c1fe6edd876922aba5a480d8ff06f65 into 91a8064b2c93a51ec30c30d8099748082c8c591e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-8325a34d0c7d5205c24beefb9f901f33bfd7a64f). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1144975777:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1144975777,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 6ebdc7a98666a254929b0c17c9e93e7888c42284 into 027ad1f921f4739f23b50ec34a015f253b59265a - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-ea589c9115bd3056f1fc6426aafbaf535950c4e4). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1180042325:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1180042325,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 82dbd2b2efddbdf8532240f78b90ff61798ee3f1 into a80015d5230036ef5e1fa29f90723914e8f9c080 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-9d1b90f0611e234234ec0d684e067aef0f9e1cc4). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1252446081:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1252446081,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 86d72d7ece122425aceb7434d724692086d6b7b7 into 01855594063a5832ff1e9a87bebb2fcdfed9122b - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-9a342f4b1c7e15ae1628a6d3273484da89b692a6). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143539635:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143539635,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 8e20719c827b49f991254816891d2c5e65d74bbe into a12f3b736a9c69e0d69e7f483e50e7cdf59d9fd2 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-2d796dc8a3236b7fbc341cc5ac15f6d1d4df2299). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1153736023:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1153736023,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging 95226c98a9b59bb4131336f5c18f5d9f8086d8a6 into 91a8064b2c93a51ec30c30d8099748082c8c591e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-dcdcc36be88a3e2f3a3f7128617e56d9b7eaffc7). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1145202640:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1145202640,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging a09bd28f6a31560341393600f9f1b24027815531 into fa36d6d9dfdc636a9ad565d5c18adae04879d35d - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-defb493ae30eb56ab82329917d13fb77331a5dcc). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1251942957:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1251942957,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging a1d53138e3d5d3abb93e5c2b0dd998566d42300f into 660ef262c064fbb7eaedc560f0466b7d6eb24fd1 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-87753c2a66aff81ff501e8ae1161c705b59184bb). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1176327071:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1176327071,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging a252561168653e910bb5628191a26e74c502b817 into d40155c5c495e309eb89041d07d2ae08b298c34c - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1a153127e9b9a2032a9aa0bb37a54132941ec0bf). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143318888:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143318888,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging a4fd2c10067a5d5dd4ae1d75349838f843d64943 into b223c3fb586d4c6a9a72cfecc96fbef73b6eec30 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1724b0adf30e2db3f19352fbf4539b4ac73b7053). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1243920735:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1243920735,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging b82b11717ca1534b5ef7b4b249983de343cd08d3 into 5c2ee26a9dd0b63636747fa76da6cacfe8b0b320 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-d2fa9321e0620eda4b4c3072b790c6ee6550261d). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1141686054:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1141686054,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging b8540cefe726db1b2e424c60dc58c1c7925b3844 into 304a9abefac7484b9c359d5c5afdb76e8e25f98d - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1daba1a97156e48061da6c08e7939877eeac1211). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1248368558:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1248368558,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging d3ee2334d04999118154320a0a0744c60e881ccf into 2f33ff0fa80e3d91790823a9e30bf8ebe28c634e - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-3141d327f7251913eb8bfbde9e0e85aa2cc1cd7f). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1177550958:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1177550958,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging e7a789fdac328d99d7cdb595b07e0d86a1595e5d into 3ee659694fc8e264591cba40a89d3e3bbbf12a00 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-1e4afcfe36a446768b570cb9b670d439c64360bd). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1245673060:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1245673060,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging f4eed55018e380c5886af02c3fe22c200786d23d into 1b2afa8452567f1dc95334dca35e79cd52e51aec - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-b05a901645f906eccf540b3e987682650161df70). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1138864358:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1138864358,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging f6d4f910702bfee44d3fb7b06b76f5a06570c3ea into 1679bc9525ded9876fabc42c9f5e5165a97b23c7 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-ac84f99d182cacab44d07d89fa686cf685638b50). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1137051771:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1137051771,1,['error'],['error']
Availability,"This pull request **introduces 73 alerts** and **fixes 33** when merging f7ffa920c073a3ca5def62dbb93e763920cf5cfe into 40620e494ecf609b029c07f0aa43dbc2635fd5bb - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-0ff418d8618e468d4813953b5e0606f852b27e24). **new alerts:**. * 32 for Missing variable declaration; * 13 for Unused import; * 8 for Except block handles &#39;BaseException&#39;; * 6 for Unused local variable; * 3 for Deleting non\-property; * 2 for Conditional comments; * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;; * 2 for Wrong number of arguments in a class instantiation; * 1 for Useless conditional; * 1 for &#39;input&#39; function used in Python 2; * 1 for Nested loops with same variable; * 1 for Unused variable, import, function or class; * 1 for Unguarded next in generator. **fixed alerts:**. * 12 for Unused import; * 11 for Except block handles &#39;BaseException&#39;; * 3 for Unused local variable; * 2 for Uncontrolled data used in path expression; * 1 for Testing equality to None; * 1 for Module is imported more than once; * 1 for Should use a &#39;with&#39; statement; * 1 for Syntax error; * 1 for Property in old\-style class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175092033:1169,error,error,1169,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175092033,1,['error'],['error']
Availability,"This pull request adds [VecCore](https://gitlab.cern.ch/VecGeom/VecCore) external project and build options to ROOT. Some comments:. Vc is used by VecCore, and since it is not relocatable, it must be built by the VecCore build system in order to avoid the situation in which VecCore finds a broken temporary installed version of Vc in ROOT's `${CMAKE_BINARY_DIR}`. It is perfectly fine to use a builtin VecCore with an externally installed Vc, however. Ideally, though, both should be externally installed. When both are enabled as builtins, they will get installed at the end along with ROOT into the final prefix, with correct configurations. I can not test the build on ARM, please let me know if Jenkins shows any failures. @xvallspl Since you have been using VecCore within ROOT, could you please try this branch out? I did not find any code currently in ROOT that uses VecCore. I've marked this as work in progress to be able to make sure everything is ok prior to merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393:718,failure,failures,718,https://root.cern,https://github.com/root-project/root/pull/393,1,['failure'],['failures']
Availability,"This pull request adds an intermediate buffering mode between ""normal ROOT IO"" and the prefetching system. When enabled, it will cache a remote file to the local disk (uses the same logic as prefetching to determine what is ""remote"") for as long as it is opened and automatically cleans up afterward. This is useful in cases where you want to hide the effects of network latency (for various use cases which work poorly with `TTreeCache`, such as when an unpredictable set of branches are used or non-sequential scans) but do not want to set aside a directory to use as a persistent cache or have a cache-unfriendly workflow. The approach has been ported from CMSSW (there, it is called `lazy-download`) where it has been in use for several years.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146:693,down,download,693,https://root.cern,https://github.com/root-project/root/pull/146,1,['down'],['download']
Availability,"This pull request adds the `EmptyBase` class to CustomStructLinkDef.h (required now by the `ntuple_modelext` test). It also renames the class to `EmptyStruct`, which probably makes more sense now. This should fix the `ntuple_modelext` on Windows, that was complaining due to; ```; unknown file: error: C++ exception with description: ""RField: no I/O support for type EmptyBase; At:; _cdecl ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >, class std::basic_string_view<char,struct std::char_traits<char> >, class TClass *) [C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx:1117]; "" thrown in the test body.; ```. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12979:295,error,error,295,https://root.cern,https://github.com/root-project/root/pull/12979,1,['error'],['error']
Availability,"This pull request applies a number of fixes after the merge or PR #5913 (see below). ## Changes or fixes:; - Fix issues with documentation generation on macOS. In particular: ; 1. Fix `mktemp` command lines to only use template `X`s at the end.; 2. Use `sysctl -n hw.ncpu` instead to get the number of available CPUs on Darwin.; 3. Move OS-dependent variable assignments to the `Makefile`; - Ensure `libs.C` is ACLiC'ed before `modifyClassWebpage.sh` runs. Specifically, `modifyClassWebpages.sh` might spawn many `modifyClassWebpage.sh` processes via `xargs -P`. In turn, `modifyClassWebpage.sh` depends on `libs.C` which is ACLiC'ed if to generate `libs_C.so` where required.; However, if `libs_C.so` does not exist, multiple processes might race to create it. Thus, ensure that the macro is ACLiC'ed before `modifyClassWebpage.sh` runs. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10930:302,avail,available,302,https://root.cern,https://github.com/root-project/root/pull/10930,1,['avail'],['available']
Availability,"This pull request contains the changes to add initial support for RISC-V. It was developed during the past months on a StarFive VisionFive v1 that was kindly provided to me as part of the [RISC-V Developer Boards Program](https://riscv.org/risc-v-developer-boards/). More details about the challenges are available in the form of a [blog post on my website](https://www.hahnjo.de/blog/2023/01/28/riscv-higgs.html), a [presentation at the CaaS meeting in January](https://compiler-research.org/meetings/#caas_12Jan2023), and a [recording of that talk](https://youtu.be/3PWeLGrF41g). Please note that this PR only contains the necessary changes to the build system and ROOT's configuration files and utilities. Making the interpreter actually functional requires a number of backports to ROOT's copy of LLVM 13, that are available separately in a branch (https://github.com/hahnjo/root/tree/riscv-backports).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12351:305,avail,available,305,https://root.cern,https://github.com/root-project/root/pull/12351,2,['avail'],['available']
Availability,"This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are; ```; 1: Failed Tests (2):; 1: Cling :: CodeUnloading/AtExit.C; 1: Cling :: MultipleInterpreters/MultipleInterpreters.C; ```; , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look?; ; ## Changes or fixes:; - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`.; The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`; now defaults to 0 in `makeDefaultCompilationOptions()`.; - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`.; - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH.; Per ld(1) manual page: `By default, the new dynamic tags are not created.`; - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to; `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855:36,failure,failures,36,https://root.cern,https://github.com/root-project/root/pull/12855,5,"['Error', 'error', 'failure']","['ErrorMacro', 'error', 'failure', 'failures']"
Availability,"This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855.; ; ## Changes or fixes:; - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`.; The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`; now defaults to 0 in `makeDefaultCompilationOptions()`.; - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`.; - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH.; Per ld(1) manual page: `By default, the new dynamic tags are not created.`; - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to; `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12856:36,failure,failures,36,https://root.cern,https://github.com/root-project/root/pull/12856,5,"['Error', 'error', 'failure']","['ErrorMacro', 'error', 'failure', 'failures']"
Availability,This pull request fixes a remaining issue after merging #5913 and #10930 (see below). ## Changes or fixes:; - Remove the `.so` suffix and any trailing whitespace in the output generated by `libs.C`. This should fix the following errors found in the log:; ```; Error: file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/html/libRMVA.so __coll__graph.svg not found.; ```; - Remove dead code in `libs.C`. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10943:229,error,errors,229,https://root.cern,https://github.com/root-project/root/pull/10943,2,"['Error', 'error']","['Error', 'errors']"
Availability,"This pull request fixes an issue introduced accidentally in PR #12751. In particular, the `.exe` suffix is not expected in non-Windows builds. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes some failures seen in the nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12785:246,failure,failures,246,https://root.cern,https://github.com/root-project/root/pull/12785,1,['failure'],['failures']
Availability,"This pull request fixes the search for contour points in Minuit2. ; Three separated problems were identified (see the commit messages); - a bug in Minos for computing errors when close to the border; - an issue in finding the contour point in case the first attempt failed.; - an issue in the seed when one of the second derivative is zero. Use now an arbitrary value (e.g. 1) instead of using a very small g2, resulting in a very large covariance causing later on problem in the minimization. . This PR fixes the issue #13729",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13918:167,error,errors,167,https://root.cern,https://github.com/root-project/root/pull/13918,1,['error'],['errors']
Availability,"This pull request introduces a structure (`RDaosKey`) to represent a blob's location within DAOS containers (comprising object ID, distribution key and attribute key) and adds a new mapping between ntuple pages to DAOS. The new mapping ( `kOidPerCluster` ) allocates one object per cluster and determines the distribution key from the column ID - with each page addressable by its own attribute key - , thus perpetuating the adjacency of values in the same cluster and column in the distributed store. I.e., neighboring values that are likely to be fetched together are coalesced to the same physical device in DAOS. The original mapping remains available as `kOidPerPage`, where each page is uniquely allocated its own object. In future, other mappings may be easily added by modifying the templated function `GetPageDaosKey` with that use case. RW calls in `RPageStorageDaos` use the mapping set in `kDefaultDaosMapping`, which is `kOidPerCluster`. ## Changes or fixes:; - Introduces `RDaosKey` as an abstract representation of a blob's location in DAOS comprising object ID, distribution key and attribute key.; - Mapping strategies are listed in the enumerator `EDaosMapping`, currently with values `kOidPerPage`, `kOidPerCluster`. ; - The function `GetPageDaosKey` determines the correct `RDaosKey` from page metadata in accordance with the strategy given by the templated argument of type `EDaosMapping`.; - The variable `kDefaultDaosMapping`, set to `kOidPerCluster`, holds the mapping for `RPageStorageDaos` RW calls.; - RNTuple page metadata (anchor, header, footer) blobs are mapped to a single object with three attribute keys, while a dedicated object is allocated to hold the pagelists (one for each cluster group). ## Checklist:. - [x] tested changes locally and on openlab cluster: passes unit tests, LHCb dataset on DAOS 2.0; - [x] updated the docs (if necessary). This PR partially fixes #8080 by introducing the new mapping that stores ""page groups"" as sharing the same object and di",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10927:646,avail,available,646,https://root.cern,https://github.com/root-project/root/pull/10927,1,['avail'],['available']
Availability,"This pull request sets up GitHub code scanning for this repository. Once the scans have completed and the checks have passed, the analysis results for this pull request branch will appear on [this overview](/root-project/root/security/code-scanning?query=pr%3A13007+tool%3ASonarCloud+is%3Aopen). Once you merge this pull request, the 'Security' tab will show more code scanning analysis results (for example, for the default branch). Depending on your configuration and choice of analysis tool, future pull requests will be annotated with code scanning analysis results. For more information about GitHub code scanning, check out [the documentation](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13007#issuecomment-1589877841:762,error,errors,762,https://root.cern,https://github.com/root-project/root/pull/13007#issuecomment-1589877841,1,['error'],['errors']
Availability,"This pull request:. 1. Closes #12453, where is was reported that weight errors are lost when splitting weighted datasets.; 2. Avoids the associated errors printed when doing the JSON IO of combined RooDataSets (run the unit test `gtest-roofit-hs3-test-testHS3SimultaneousFit` with ROOT master to see them); 3. Avoids the creation of dummy weight variables when constructing RooDataSets in all of RooFit. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:72,error,errors,72,https://root.cern,https://github.com/root-project/root/pull/12459,2,['error'],['errors']
Availability,This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:; - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function.; - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:; - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158:246,redundant,redundant,246,https://root.cern,https://github.com/root-project/root/pull/9158,1,['redundant'],['redundant']
Availability,"This pull-request disables the warning `redundant parentheses surrounding declarator [-Wredundant-parens]` for everything except input parsed via `Interpreter::process()` (e.g., for prompt input). ## Changes or fixes:; - `CompilationOptions::IgnorePromptDiags` extended to >1 bit and renamed to `CompilationOptions::IgnoreDiagsMask`. Several values from the `IgnoreDiags` enumeration can be bitwise-OR'd together. The original purpose of `IgnorePromptDiags` now corresponds to the `IgnoreDiags::kPromptBasic` flag.; - `FilteringDiagConsumer` has been extended to handle groups of diagnostics that can be masked via `CompilationOptions::IgnoreDiagsMask`.; - Default ignore diagnostics mask can be (optionally) specified as an argument to `Interpreter::makeDefaultCompilationOpts()`. All interface functions use `IgnoreDiags::kPromptExtended` except `Interpreter::process()`. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9695:40,redundant,redundant,40,https://root.cern,https://github.com/root-project/root/pull/9695,3,"['mask', 'redundant']","['mask', 'masked', 'redundant']"
Availability,"This pull-request fixes an issue ([ROOT-5219](https://sft.its.cern.ch/jira/browse/ROOT-5219)) updating the TRint prompt after incomplete input on a nested call to `TROOT::ProcessLine()`. Specifically, `TRint::ProcessLineNr()` used the output parameter `error` to tell if the collected input was incomplete (i.e., it contains unbalanced braces or the last line was terminated by a `\` character). While this works most of the time, it fails if there is a nested call to `ProcessLine()` that provides incomplete input, e.g.:; ```c++; $ root -l -b; root [0] gROOT->ProcessLine(""fprintf(stdout,\""the inner is printing\""\n""); (long) 0; root [1] 12; root (cont'ed, cancel with .@) [2].@; root [3] .q; ```. In this case, there are two nested `ProcessLine()` calls; the inner-most has incomplete input (missing a `)`), but the `error` output parameter is ignored. The outer-most call, however, has complete input, which is what was seen by TRint. This created inconsistency between the collected input in cling's InputValidator (which was incomplete) and the ROOT prompt string, that was not showing `root (cont'ed, cancel with .@) []`. Thus, the correct behavior would have been:; ```c++; root [0] gROOT->ProcessLine(""fprintf(stdout,\""the inner is printing\""\n"");; root (cont'ed, cancel with .@) [0]);; the inner is printing; ```. ## Changes or fixes:; - Add `InputValidator::getLastResult()` and `MetaProcessor::waitingMoreInput()` which allow to query whether the collected input is incomplete, either because it contains unbalanced braces or we found a backslash-newline (the last seen token is a `\`).; - Properly implement the `TInterpreter::GetMore()` function based on `MetaProcessor::waitingMoreInput()`. Get rid of the `fMore` member (which was not even updated correctly).; - Use `gCling->GetMore()` in `TRint::ProcessLineNr()` to tell if we are waiting for more input, and thus we should show the continuation prompt. ## Checklist:; - [X] tested changes locally. This PR fixes [ROOT-5219](https://",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9733:253,error,error,253,https://root.cern,https://github.com/root-project/root/pull/9733,2,['error'],['error']
Availability,This pull-request is a backport of PR #9781; see details there. A bug in DeclExtractor was preventing names introduced by an anonymous scopeless enum to become available in the parent scope. ## Checklist:; - [X] tested changes locally. This PR fixes ROOT-6095.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9789:160,avail,available,160,https://root.cern,https://github.com/root-project/root/pull/9789,1,['avail'],['available']
Availability,This pull-request makes sure that the enumerators in a (anonymous) scopeless `enum` are made visible in the enclosing scope.; A bug in DeclExtractor was preventing names introduced by an anonymous scopeless enum to become available in the parent scope. ## Changes or fixes:; - Do not skip the `InnerDC->makeDeclVisibleInContext()` call for enumerators of anonymous scopeless `enum`s. . ## Checklist:; - [X] tested changes locally. This PR fixes [ROOT-6095](https://sft.its.cern.ch/jira/browse/ROOT-6095).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9781:222,avail,available,222,https://root.cern,https://github.com/root-project/root/pull/9781,1,['avail'],['available']
Availability,"This puts us into the unfortunate spot that the solution which is widely used across most other software packages dealing with this kind of situation (ie, allowing the rounding errors) is not acceptable, but at the same time nobody is willing to spend the (considerable amount of) time to find another solution that you would be happy with. /cc @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1539568415:177,error,errors,177,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1539568415,1,['error'],['errors']
Availability,"This recent roottest failure looks related to this issue https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/13090/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/ . (it's a test that was never run before, I am resurrecting it, and that's why the failure was triggered only now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-1724978817:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1724978817,2,['failure'],['failure']
Availability,"This reduces the time required by jitting dramatically in many common scenarios, as we do not need a different template specialization of types that are expensive to instantiate for each Define or Filter expression. Performance measurements available [here](https://indico.cern.ch/event/909884/)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329:241,avail,available,241,https://root.cern,https://github.com/root-project/root/pull/5329,1,['avail'],['available']
Availability,"This reminds me of https://sft.its.cern.ch/jira/browse/ROOT-8544 and https://sft.its.cern.ch/jira/browse/ROOT-8523 which is the end where fixed by a7b0b3e647409c7510b38198b08ff94fd079f857. Most likely the way the interpreter sets up the stack frames does not match the expectation of the exception handler (usually implemented in (g)libc). It is very plausible to be a problem similar to the one leading to the ""can not reallocate code"" errors. So I see two plausible path forward: (a) fix the reallocate code error and hopefully it also fix this (b) installed a debug version of (g)libc and trace/debug the exception handlers handling of this case ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-800461229:437,error,errors,437,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-800461229,2,['error'],"['error', 'errors']"
Availability,This repairs crash seem in [testProxiesAndCategories](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139900/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testProxiesAndCategories/) on the v6.24 branches and a few additional issues seen during testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10230:5,repair,repairs,5,https://root.cern,https://github.com/root-project/root/pull/10230,1,['repair'],['repairs']
Availability,"This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481; and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside; an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,; since it is a new member compared to the layout on file, none of the objects; from the new; member down to the object on which the rules need to be run) are actually streamed and the; code gathering the information to run the rule got a bit lost ; it is likely (I am checking; as we speak) that in previous release the rule was not even attempted to be run ... which; might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which; are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9913:402,down,down,402,https://root.cern,https://github.com/root-project/root/pull/9913,1,['down'],['down']
Availability,"This reverts commit 1e8c04dd4beff8fc3d34cfd21e45358e85ae0f79.; In this commit, main idea was to use clang binary to retrieve information; about resource-clang-dir. Sadly ROOT patched LLVM/Clang is built; without clang binary and ROOT CMake crash then with next error:. -- /home/oksana/CERN_sources/llvm-clang-root/inst/bin; CMake Error at core/clingutils/CMakeLists.txt:80 (message):; Cannot determine clang resource directory path",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4259:261,error,error,261,https://root.cern,https://github.com/root-project/root/pull/4259,2,"['Error', 'error']","['Error', 'error']"
Availability,"This reverts commit 2a265a3a, which caused failures in the nightlies even though the CI in #16274 was green.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16278:43,failure,failures,43,https://root.cern,https://github.com/root-project/root/pull/16278,1,['failure'],['failures']
Availability,"This reverts commit 2ecf45e5a37ab3f1108c5a9068b3cf330242b9dd, and makes some extra adjustments for Davix 0.6.7 to build or provide a clear error if something is missing in the system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1907:139,error,error,139,https://root.cern,https://github.com/root-project/root/pull/1907,1,['error'],['error']
Availability,"This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276.; It fixes:; ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:; In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^; While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:; In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3599:319,error,error,319,https://root.cern,https://github.com/root-project/root/pull/3599,1,['error'],['error']
Availability,This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id; const Double_t PI = TMath::Pi();; /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'; #define PI M_PI; /usr/include/math.h:777:16: note: expanded from macro M_PI; CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):; error code: 1`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3589:158,error,error,158,https://root.cern,https://github.com/root-project/root/pull/3589,3,"['Error', 'error']","['Error', 'error']"
Availability,"This reverts commit 5298b418eec4129351888f41cb7c3bfc90161e22. This commit was mistakenly committed. PR was opened in #1730, but it was; closed and moved to #1761. I didn't notice this and created another PR; in #1980. This change was causing 100+ failures in runtime cxxmodules nightlies.; (Eg. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29183/testReport/junit/projectroot/runtutorials/tutorial_fit_FittingDemo/); We want to have **proper** PrebuildModulesPaths which information were; extracted from LD_LIBRARY_PATH and DYLD_LIBRARY_PATH, not a random ""."". Because of this commit, we were trying to autoload libraries generated; by roottest on-demand (for example ""./h1analysisTreeReader_C.so"") This; is not an intentional behavior, these autogenerated libraries are; already loaded by roottest and what we want to do is to load **proper**; libraries like libHist.so instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2160:247,failure,failures,247,https://root.cern,https://github.com/root-project/root/pull/2160,1,['failure'],['failures']
Availability,This reverts commit 6657223efbc8d356fe3103c7010922dded6791a2.; It caused [failures](http://cdash.cern.ch/testDetails.php?test=40653603&build=483771); in gtest-tree-treeplayer-test-dataframe-snapshot (see discussion at #1800 ).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1813:74,failure,failures,74,https://root.cern,https://github.com/root-project/root/pull/1813,1,['failure'],['failures']
Availability,This reverts commit 87801d05a76cdf10a1cf9d7ee33540d3e0e314bf.; This should fix the failures (not understood) in dataframe_nodes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2231:83,failure,failures,83,https://root.cern,https://github.com/root-project/root/pull/2231,1,['failure'],['failures']
Availability,"This reverts commit b327dd8fd159494666842607708140c429fa4055.; This should fix the following error:; ```; Error in <TPServerSocket::Authenticate>: can't find SrvAuthenticate; ```; as reported on the forum: [Getting ""can't find SrvAuthenticate"" in authserver.C](https://root-forum.cern.ch/t/getting-cant-find-srvauthenticate-in-authserver-c/54469)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14149:93,error,error,93,https://root.cern,https://github.com/root-project/root/pull/14149,2,"['Error', 'error']","['Error', 'error']"
Availability,This reverts commit d6b623fff5a6d47ae66ec6db09dad26e987deb4e to no longer restrict numba versions to <0.6 which also unlocks support for numpy 2.0. The corresponding PR in rootest (https://github.com/root-project/roottest/pull/1162) updates the error style in the numba test to be backwards compatible. The numpy version is temporarily locked to below 2.0 to prevent both upgrades at the same time. - [X] tested changes locally. Fixes https://github.com/root-project/root/issues/16201,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16209:245,error,error,245,https://root.cern,https://github.com/root-project/root/pull/16209,1,['error'],['error']
Availability,"This reverts commit f84668d78f3911ad8a67b4ba03145cd5845f14fb.; It leads to test failures on centos7, while all other systems are ok.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3263:80,failure,failures,80,https://root.cern,https://github.com/root-project/root/pull/3263,1,['failure'],['failures']
Availability,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2183#issuecomment-396428995:136,error,error,136,https://root.cern,https://github.com/root-project/root/pull/2183#issuecomment-396428995,1,['error'],['error']
Availability,"This seems to work now and the changes LGTM in principle. We'll break running with `-O0` until the last commit, but I understand that's to make it easier to revert later on. The message of the first commit should be reflowed to not be one very long line. Otherwise, is this ready @devajithvs ? ping @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1907702045:294,ping,ping,294,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1907702045,1,['ping'],['ping']
Availability,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:669,avail,available,669,https://root.cern,https://github.com/root-project/root/pull/7286,1,['avail'],['available']
Availability,This should be done by the caller to properly handle errors and ensure lifetime longer than the `RPageSinkFile`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14501:53,error,errors,53,https://root.cern,https://github.com/root-project/root/pull/14501,1,['error'],['errors']
Availability,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:; ```cmake; find_package(LLVM 5.0 REQUIRED); find_package(Clang REQUIRED); find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir; OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE); ```; This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x).; Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:; ```; CMake Error at CMakeLists.txt: (find_package):; Could not find a configuration file for package ""Clang"" that is compatible; with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown; /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown; /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown; /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown; /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown; ```; (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3273#issuecomment-455169593:672,Error,Error,672,https://root.cern,https://github.com/root-project/root/pull/3273#issuecomment-455169593,1,['Error'],['Error']
Availability,"This should be fixed by:; - moving your code to a dictionary C++ modules (available in later ROOT versions); we can share the details on how to do that, please let me know! ; - splitting this into two dictionaries or even libraries, such that loading `MyClass` is independent of loading `OtherClass`. I realize that the second option is a workaround, but the modules *are* the propose solution here. Please let me know if we can close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1148738184:74,avail,available,74,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1148738184,1,['avail'],['available']
Availability,"This should fix clang's compilation error:; ""constructor for 'ROOT::TTreeProcessorMT' must explicitly initialize the const member 'fFriendInfo'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2174:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/2174,1,['error'],['error']
Availability,This should fix failures in `test_readTotemNtuple` that started happening after the switch from `Calc` to `ProcessLine` (the access to the zero-length ReaderArrays was caught by `ProcessLine`'s instrumentation).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:16,failure,failures,16,https://root.cern,https://github.com/root-project/root/pull/1938,1,['failure'],['failures']
Availability,This should fix some of the failures observed for builds without rdataframe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13660:28,failure,failures,28,https://root.cern,https://github.com/root-project/root/pull/13660,1,['failure'],['failures']
Availability,This should fix some sporadic failures in cling's symbol resolution; in builds without runtime cxx modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8682:30,failure,failures,30,https://root.cern,https://github.com/root-project/root/pull/8682,1,['failure'],['failures']
Availability,This should fix the compilation failures when we build ROOT with modules; in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4451:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/4451,1,['failure'],['failures']
Availability,This should fix the cuda failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4594:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/4594,1,['failure'],['failures']
Availability,This should fix the error [reported on the forum](https://root-forum.cern.ch/t/windows-visual-studio-binary-root-v6-28-04-win64-vc17-exe-fitio-fails/55244),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12982:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/12982,2,['error'],['error']
Availability,"This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4457:20,error,errors,20,https://root.cern,https://github.com/root-project/root/pull/4457,1,['error'],['errors']
Availability,This should fix the errors we see in the nighly builds on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16253:20,error,errors,20,https://root.cern,https://github.com/root-project/root/pull/16253,2,['error'],['errors']
Availability,This should fix the failure observed when RDF is not built that one needs to not include the RTensor pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11422:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/pull/11422,1,['failure'],['failure']
Availability,This should fix the failures in `roottest-root-tree-reader-make` that we see in the v6.14 nightlies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2768:20,failure,failures,20,https://root.cern,https://github.com/root-project/root/pull/2768,1,['failure'],['failures']
Availability,This should fix the following error on Windows:; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1518 (message):; PyROOT: Python development package not found and pyroot component required; (python executable: C:/Python38-32/python.exe),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5414:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/5414,2,"['Error', 'error']","['Error', 'error']"
Availability,This should fix the following error; ```; C:\ROOT-CI\src\core\metacling\src\TCling.cxx : fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14314:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/14314,2,['error'],['error']
Availability,This should fix the following potential error when building clad:; ```; Command failed: 2; ‘/usr/local/bin/cmake’ ‘–build’ ‘.’ ‘–config’ ‘.’; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16239:40,error,error,40,https://root.cern,https://github.com/root-project/root/pull/16239,1,['error'],['error']
Availability,"This should fix the recent test failures seen in `gtest-tree-treeplayer-test-treetreeplayertestUnit`. Full lldb stack traces at https://codimd.web.cern.ch/s/QKEMHg5H1. # PR description. The test was dynamically allocating the array data members of the `Data` struct, but never deallocating them. This commit polishes the `Data` struct definition and ensures proper management of the data members. The previous way of writing data to the TTree was leading to a bad memory access in the ReadBasicPointer inlined function in TStreamerInfoReadBuffer.cxx while reading the `double*` array. In particular, the issue arises when accessing and then deallocating the array at the current index provided by the `TCompInfo` object. ```; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x00000001044cf140 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this=<unavailable>, b=<unavailable>, arr=<unavailable>, compinfo=<unavailable>, first=<unavailable>, last=<unavailable>, narr=<unavailable>, eoffset=<unavailable>, arrayMode=0) at TStreamerInfoReadBuffer.cxx:923:65 [opt]; 920 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong: ReadBasicPointer(Long_t); continue;; 921 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong64: ReadBasicPointer(Long64_t); continue;; 922 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat: ReadBasicPointer(Float_t); continue;; -> 923 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble: ReadBasicPointer(Double_t); continue;; 924 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUChar: ReadBasicPointer(UChar_t); continue;; 925 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUShort: ReadBasicPointer(UShort_t); continue;; 926 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUInt: ReadBasicPointer(UInt_t); continue;; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x000000010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16501:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/16501,1,['failure'],['failures']
Availability,"This should fix the warnings with cl.exe and errors with clang_cl.exe as reported in the issue #13091: With cl.exe:; ```; graf2d\mathtext\src\mathtextencode.cxx(353,19): warning C4066: characters beyond first in wide-character constant ignored; ```; With clang_cl.exe; ```; graf2d\mathtext\src\mathtextencode.cxx(174,33): error: character too large for enclosing character literal type; default: _glyph = L'\U0001d538' + (_code[0] - 'A');; ```; Note that this PR doesn't make it working, since wchar_t is 16 bit on Windows and 32 bit on Linux and Mac, and to make it working with all possible characters on all platforms, one would need to use `char32_t` everywere, also in `TMathText` and `TLatex`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13132:45,error,errors,45,https://root.cern,https://github.com/root-project/root/pull/13132,2,['error'],"['error', 'errors']"
Availability,"This should fixe some sporadic failures observed in the CI builds. Before the CrossValidation class was created using the same name as in the `TestCrossValidationMultiProc.cxx`, and with the same `DataLoader` name. For this, the XML file created in the training phase was having the same name and being located in the same directory as the file created by the other tests. This was causing a conflict when the tests are run in parallel. ; This PR changes to use now different names, solving this conflict.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10018:31,failure,failures,31,https://root.cern,https://github.com/root-project/root/pull/10018,1,['failure'],['failures']
Availability,This should hopefully fix sporadic failures happening when deleting the files create in these tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9415:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/9415,1,['failure'],['failures']
Availability,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:185,redundant,redundant,185,https://root.cern,https://github.com/root-project/root/pull/6190,1,['redundant'],['redundant']
Availability,"This slightly changes lookup order: Namely, the system-folder ""/usr/include/postgresql""; is now preferred over ""/usr/include/"" even if both container libpq-fe.h.; This finds the correct path on a standard Gentoo installation, where ""/usr/include/postgresql""; is a symlink to the folder with all include-files for the user-selected postgresql-version,; while ""/usr/include/libpq-fe.h"" is a single symlink provided for backwards-compatibility. Since ROOT uses also e.g. ""pg_config.h"", selecting ""/usr/include/"" over ""/usr/include/postgresql""; leads to failure on Gentoo. I hope this will not break any other existing setups but I don't see how it should. ; That should prevent any downstream-patching which Gentoo is doing right now for old-style configure once it has moved to cmake.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/159:550,failure,failure,550,https://root.cern,https://github.com/root-project/root/pull/159,2,"['down', 'failure']","['downstream-patching', 'failure']"
Availability,"This snippet:; ; ```; #include ""TFile.h""; #include ""TTree.h"". void nested(); {; auto f = new TFile(""nestedclones.root"");; TTree* TopTree = (TTree*)f->Get(""TopTree"");; TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");; }; ```. fails with. ```; Warning in <TTreeFormula::DefinedVariable>: TClonesArray object was not retrievable for Objects.SecondaryVertexArray.TrackIndices.index!; Error in <TTreeFormula::Compile>: Bad numerical expression : ""Objects.SecondaryVertexArray.TrackIndices.index""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {Objects.SecondaryVertexArray.TrackIndices.index,}; ```. If I open a TBrowser and then double click on the relevant leaf, it draws ""Empty"" and says:; `Warning in <TSelectorDraw::ProcessFillObject>: Not implemented for TClonesArray`. Funnily, if I then call again from the prompt:; `TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");`. then it is drawn correctly and no warning is raised. ![image](https://github.com/root-project/root/assets/10653970/fbfe2dda-8e5f-42eb-94ca-8a51d9ce1de6). So I guess that Axel was suggesting that, once this bug is fixed, this snippet should go back into roottest to prevent future regressions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8744#issuecomment-2068055777:397,Error,Error,397,https://root.cern,https://github.com/root-project/root/issues/8744#issuecomment-2068055777,1,['Error'],['Error']
Availability,This solves ROOT-9416. - users now do not have to take care that the head node of the dataframe remains in scope; - these kind of constructs are now allowed in python and C++:; ```c++; auto df = RDataFrame(...).Filter(...);; ```; - these kind of constructs are now allowed in python:; ```c++; df = RDataFrame(...); df = df.Filter(...); ```. EDIT:; Failures in roottests are fixed by [PR 212](https://github.com/root-project/roottest/pull/212) in roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2459:348,Failure,Failures,348,https://root.cern,https://github.com/root-project/root/pull/2459,1,['Failure'],['Failures']
Availability,"This solves problem on my desktop, where config like:; ```; c.NotebookApp.ip = '*'; ```; Leads to error when starting notebook.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4597#issuecomment-547878670:98,error,error,98,https://root.cern,https://github.com/root-project/root/pull/4597#issuecomment-547878670,1,['error'],['error']
Availability,"This somewhat huge commit mainly demotes many class-versions to 0. . If wanted, I can for sure squash some things (right now, the commit messages contain the underlying reasoning). . In ROOT, a lot of classes were equipped with class-versions > 0 even though they are not meant for IO / streaming. ; This produces unnecessary overhead (creation of Streamer() functions) and might be misleading for users (especially if they believe streaming of these classes would be ok and then lose parts of their data). That's even more helpful when testing framework's dataobject-code. . These classes were identified by https://github.com/olifre/rootStaticAnalyzer (a new project still in early stages) and I have created this PR to fix almost all these issues. . The last commit in the series also explicitly marks two members (of TSeqCollection and THashList) as transient, even though these classes are already class-version 0. This is purely to make it more explicit that these are not streamed - and allow for programmatic testing (since then the `kTransient` bit of the `TRealData` will be set correctly). . Several issues alerted by `rootStaticAnalyzer` still remain which are probably real bugs in ROOT 6. . Examples: . ```; TMVA/PDF.h:0: error: Data object class 'TMVA::PDF' will not stream the following indirect members: members 'fConfigName, fConfigDescription, fReferenceFile' from class 'TMVA::Configurable' (class-version 0)!; ```. It seems like `TMVA::PDF` is meant for streaming, but inherits from a base which is not. . Similar to that:. ```; include/TTreeResult.h:0: error: Data object class 'TTreeResult' will not stream the following indirect members: members 'fRowCount' from class 'TSQLResult' (class-version 0)!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/169:1236,error,error,1236,https://root.cern,https://github.com/root-project/root/pull/169,2,['error'],['error']
Availability,"This testSpecFuncSiCi failure is fixed after applying #2396, which enables the autoloading of libraries for ACLiC. The problem is that we were blindly putting libMathCore to ""need loading"" list for ACLiC, but now we have to get a proper callback from CompileMacro. We can try to land #2396, or we can do something like; ```; if (isACLiC); fInterpreter->Load(""libMathCore.so""); ```; in TCling or somewhere for workaround.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-434295309:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-434295309,1,['failure'],['failure']
Availability,This tutorial didn't produce the same results as the C++ equivalent.; As mentioned here:; https://root-forum.cern.ch/t/error-in-pyroot-tutorial-twoscales-py/47215/2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9110:119,error,error-in-pyroot-tutorial-twoscales-py,119,https://root.cern,https://github.com/root-project/root/pull/9110,1,['error'],['error-in-pyroot-tutorial-twoscales-py']
Availability,"This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"".; roottest dictionaries will always have full path names, so veto ""/roottest/"".; Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing; projectroot.roottest.root.tree.split.roottest_root_tree_split_make; projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make; projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make; projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make; projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make; projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make; projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make; projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make; projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make; projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make; projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make; projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState; projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto; projectroot.roottest.root.collection.roottest_root_collection_execMissing; projectroot.test.test_stresstmva_interpreted; projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make; projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make; projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3624:193,failure,failures,193,https://root.cern,https://github.com/root-project/root/pull/3624,1,['failure'],['failures']
Availability,"This was causing roottest-root-core-execStatusBitsCheck failure. TEmulatedTuple is injected to AST by creating virtual file called; `input_line_<number>`. This is the same way as we inject ""ClassDef(name,; id)"" and we need to `undef __ROOTCLING__` in that case (because it's not; ROOTCLING)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2112:56,failure,failure,56,https://root.cern,https://github.com/root-project/root/pull/2112,1,['failure'],['failure']
Availability,This was causing some test failures in cxx modules and in cling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1841:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/1841,1,['failure'],['failures']
Availability,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:21,redundant,redundant,21,https://root.cern,https://github.com/root-project/root/pull/2764,2,"['failure', 'redundant']","['failures', 'redundant']"
Availability,"This was discussed again in the [PPP](https://indico.cern.ch/event/1213092/).; It's important that misaligned friends can be detected. As a minimum, I would propose:; - Raise an error if the main tree/chain arrives at a certain index number, but the friend collection is smaller.; - If the main tree/chain is at the end, but the friend still has values, emit an informative warning. Ping @pcanal @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9137#issuecomment-1285630136:178,error,error,178,https://root.cern,https://github.com/root-project/root/issues/9137#issuecomment-1285630136,2,"['Ping', 'error']","['Ping', 'error']"
Availability,"This was first reported at: https://cdcvs.fnal.gov/redmine/issues/25615; with the error:; ```; Fatal Root Error: TBranchElement::InitializeOffsets; Could not find the real data member 'fOutputNames' when constructing the branch '4anab::MVADescriptions_emtrkmichelid_emtrkmichel_Reco1.obj' [Likely an internal error, please report to the developers].; ROOT severity: 6000; ```; during the creation of a branch. With a class like:; ```; class mystrarray {; public:; string fDataTag; ///< offset= 0 type=300 ,stl=365, ctype=365, Tag of the reco data products (art::InputTag format); string fOutputInstance; ///< offset= 32 type=300 ,stl=365, ctype=365, Instance name of the feature vector collection; string fOutputNames[4]; ///< offset= 64 type=320 ,stl=365, ctype=365, Feature vector entries names/meaning. static short Class_Version() { return 10; }; };; ```; creating any split branch containing this kind of object (or collection there of) will work fine. But if a file containing the `StreamerInfo` for `mystrarray` version 10 before loading the library containing its dictionary then the `StreamerInfo` from the file (since it has the same checksum has the one that would come from the dictionary info) is used. However, instead of; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames[4]""; ```; it produces:; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames""; ```; Which does not match the expectation of `TBranchElement::InitializeOffsets`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8033:82,error,error,82,https://root.cern,https://github.com/root-project/root/issues/8033,3,"['Error', 'error']","['Error', 'error']"
Availability,"This was in the context of build failures with Fedora 39 (e.g. [here](https://github.com/root-project/root/actions/runs/7555016304/job/20569070965?pr=14340)).I was hoping to escape the issue of Numba not yet supporting 3.12 by using the release candidate 0.59.0rc1 which is already available on PyPI and supports Python 3.12. But apparently the syntax used on the pip CLI is not the same as the one used in the requirements file. And anyway, this was a hack. The real fix should be having a way to tell our tests ""if this package is not available on the machine, skip the test"" (if the package is not available for good reasons like the one highlighted here). Closing this PR, will think about a better way to handle this case",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14371#issuecomment-1898034942:33,failure,failures,33,https://root.cern,https://github.com/root-project/root/pull/14371#issuecomment-1898034942,4,"['avail', 'failure']","['available', 'failures']"
Availability,"This was just to see if there are any failures, apologies for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11380#issuecomment-1249384477:38,failure,failures,38,https://root.cern,https://github.com/root-project/root/pull/11380#issuecomment-1249384477,1,['failure'],['failures']
Availability,"This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```; FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap; cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation; ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/623:196,error,errors,196,https://root.cern,https://github.com/root-project/root/pull/623,2,"['avail', 'error']","['available', 'errors']"
Availability,"This was missing in the default constructor. . Found automatically by https://github.com/olifre/rootStaticAnalyzer : . ```; include/TProtoClass.h:78: error: Streamed member 'unsigned int fCheckSum' of dataobject 'TProtoClass' not initialized by constructor!; ```. using the new test https://github.com/olifre/rootStaticAnalyzer/blob/master/src/tests/testStreamingUninitialized.cpp which identifies to-be-streamed members which are not initialized by the default constructors. ; There are likely more, but the other cases seem a bit more complex - I'm still working on improving the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/171:150,error,error,150,https://root.cern,https://github.com/root-project/root/pull/171,1,['error'],['error']
Availability,"This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13599:19,avail,available,19,https://root.cern,https://github.com/root-project/root/pull/13599,1,['avail'],['available']
Availability,This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13598:19,avail,available,19,https://root.cern,https://github.com/root-project/root/pull/13598,1,['avail'],['available']
Availability,"This was seen by the jupyter notebook which give the error:. ```; input_line_42:2:2: warning: 'norm' shadows a declaration with the same name in the 'std' namespace; use '::norm' to reference this declaration; TH1F *norm = new TH1F(""Normal Histogram"", ""Normal Histogram"", 100, 0, 100);; ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10462:53,error,error,53,https://root.cern,https://github.com/root-project/root/pull/10462,1,['error'],['error']
Availability,"This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:; ```py; >>> import ROOT; >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: none of the 5 overloaded methods succeeded. Full details:; RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>; TypeError: takes at most 1 arguments (3 given); RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>; TypeError: could not convert argument 2; RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>; TypeError: takes at most 2 arguments (3 given); RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>; TypeError: takes at most 1 arguments (3 given); RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>; TypeError: could not convert argument 3; ```; This is instead supposed to trigger:; ```cpp; RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end); {; if (fBegin > fEnd); throw std::logic_error(""The starting entry cannot be larger than the ending entry in the ""; ""creation of a dataset specification."");; }; ```; P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11051:97,error,error,97,https://root.cern,https://github.com/root-project/root/issues/11051,1,['error'],['error']
Availability,"This way, if another process requests the file from the cache while; the file is still being written/downloaded, it does not ""find"" it; and does not read an incomplete file. This should fix failures such as [these](https://github.com/root-project/root/pull/9495#issuecomment-1005637703) where multiple process (in this case multiple ROOT tests) require to cache the same file concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9479:101,down,downloaded,101,https://root.cern,https://github.com/root-project/root/pull/9479,2,"['down', 'failure']","['downloaded', 'failures']"
Availability,This will be replaced with a proper error message in the future; once we have a reliable way of implmenting such an error. For; now it's already an improvement if we always print a warning; when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1336:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/1336,3,"['error', 'reliab']","['error', 'reliable']"
Availability,"This works now fine on 6.28/04, it no longer crashes. ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_12:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [6] x; input_line_14:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_23:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [17] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178#issuecomment-1812233608:193,error,error,193,https://root.cern,https://github.com/root-project/root/issues/10178#issuecomment-1812233608,12,"['Error', 'error']","['Error', 'error']"
Availability,"Those 2 classes may or may not be the only 2 that have this kind of pattern in the wild, so it might be interesting to solve the underlying issue which is likely to be that `BindCppObject` is trying to bind to a type which has no interpreter info. So a fix could be to have either `CPyCppyy::BindCppObject` or `Cppyy::GetActualClass` to check for the presence of interpreter info before attempting to automatically bind to the ""actual class/type"". (In theory this should be done by testing `TClass::HasInterpreterInfo` but in this case it is returning an incorrect information and thus we have to use `TClass::GetClassInfo`). The change in behavior is that after this modification, `PyROOT/Cppyy` would no longer warn if the actual return type is inadvertently missing its interpreter info. However semantically this seems to be the right behavior, for example in our cases we would:; * have no warning; * PyROOT will report the type of the pointer as `TList`; * Usage of the meta routines (`IsA` and co.) would still give accurate information (access to the `TClass` for `TViewPubFunctions`); * Interfaces to the objects are the same as the one available from the equivalent C++ code (I.e. `TList`) (unless the user does an explicit dynamic_cast to the underlying type). * In other cases (for user provided functions and classes) where the interpreter information from the underlying class is missing by mistake (bad/broken configuration of the user code/libraries), the error/warning reporting about the missing interpreter info will be delayed until the user actually want to access the underlying class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16177#issuecomment-2271797820:1146,avail,available,1146,https://root.cern,https://github.com/root-project/root/pull/16177#issuecomment-2271797820,2,"['avail', 'error']","['available', 'error']"
Availability,Those dataframe failures look real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6258#issuecomment-681689635:16,failure,failures,16,https://root.cern,https://github.com/root-project/root/pull/6258#issuecomment-681689635,1,['failure'],['failures']
Availability,Those failures are present in the nightlies and are unrelated to this PR: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=1004,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5945#issuecomment-655456939:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/5945#issuecomment-655456939,1,['failure'],['failures']
Availability,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2041130955:11,failure,failures,11,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2041130955,1,['failure'],['failures']
Availability,Those report are challenging to parse with a human eye (where does one report end and the next start). Also they seems to be sorted by source file (which is good we have enough effort to address all of them) rather than categories (which is good if we need to prioritize the functional error (using an object after deletion) over the performance one (unused assigned variable).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7426#issuecomment-794534333:286,error,error,286,https://root.cern,https://github.com/root-project/root/issues/7426#issuecomment-794534333,1,['error'],['error']
Availability,Throw on dynamic expression error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/976:28,error,error,28,https://root.cern,https://github.com/root-project/root/pull/976,1,['error'],['error']
Availability,"Thsi fixes the following error:; ```; MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7265:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/7265,2,['error'],['error']
Availability,"To avoid having to use regex to parse trailing curly brackets with/without trailing whitespaces, the code command string is cleaned with the following strategy:; - Trim whitespaces at the borders; - Get the inner command (i.e. the part between quotes); - Trim whitespaces again; - Stitch back together. This should fix the unforeseen PyTorch failures brought by PyTorch's snafu (as described and https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091) and triggered by the use of std::regex introduced in https://github.com/root-project/root/pull/14716 . This replaces https://github.com/root-project/root/pull/14716 to fix https://github.com/root-project/root/issues/14462",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14773:342,failure,failures,342,https://root.cern,https://github.com/root-project/root/pull/14773,1,['failure'],['failures']
Availability,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-825086836:14,error,error,14,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-825086836,1,['error'],['error']
Availability,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-701704099:1507,Error,Error,1507,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099,1,['Error'],['Error']
Availability,"To be clear:. ```C++; 1 #include <TTree.h>; 2 #include <TBufferFile.h>; 3; 4 int foo() {; 5 // Otherwise, we keep with the current ROOT defaults.; 6 auto tree = new TTree(""T"", ""A ROOT tree."");; 7 short f = 1;; 8 tree->Branch(""myBranch"", &f, 32000, 1);; 9 for (Long64_t ev = 0; ev < 32000; ev++) {; 10 tree->Fill();; 11 }; 12 tree->Print();; 13; 14 TBufferFile branchbuf(TBuffer::kWrite, 32 * 1024);; 15 TBranch *branchF = tree->GetBranch(""myBranch"");; 16; 17 auto count = branchF->GetBulkRead().GetEntriesSerialized(0, branchbuf);; 18 return count;; 19 }; ```. does not work:. ```; Processing foo.cc...; ******************************************************************************; *Tree :T : A ROOT tree. *; *Entries : 32000 : Total = 65257 bytes File Size = 0 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :myBranch : myBranch/S *; *Entries : 32000 : Total Size= 64957 bytes All baskets in memory *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; Error in <TBranch::GetEntriesSerialized>: Encountered a branch with destructive deserialization; failing. (int) -1; ```. However if I change `f` to be an `int` or a `float`, it does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-703591130:1128,Error,Error,1128,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703591130,1,['Error'],['Error']
Availability,"To be honest, my interpretation of https://github.com/root-project/root/pull/13850#issuecomment-1867519153 is that most failures are solved by the upgrade to ROOT 6.30 / LLVM 13. We will not be backporting to ROOT 6.26 / LLVM 9 and I haven't see confirmation that this fixes anything on top of LLVM 13 or LLVM 16, so it's not on the top of my priority list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1934528168:120,failure,failures,120,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1934528168,1,['failure'],['failures']
Availability,To be merged in case those failures in `dataframe_nodes` pop up again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2231#issuecomment-399745500:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/2231#issuecomment-399745500,1,['failure'],['failures']
Availability,"To complement the info, here is the path followed when Branch() is called, which sets deeply inside the pointer to the TNamed object that is then later (corruptly) read:; ; ; ```; 1 TBranchElement::Unroll TBranchElement.cxx 6372 0x7fbbcd16e6d2 ; 2 TBranchElement::Init TBranchElement.cxx 456 0x7fbbcd133c49 ; 3 TBranchElement::TBranchElement TBranchElement.cxx 262 0x7fbbcd131ec9 ; 4 TBranchElement::Unroll TBranchElement.cxx 6170 0x7fbbcd16ce72 ; 5 TTree::BronchExec TTree.cxx 2586 0x7fbbcd285935 ; 6 TTree::Bronch TTree.cxx 2407 0x7fbbcd28470e ; 7 TTree::Branch TTree.cxx 2025 0x7fbbcd282660 ; 8 TTree::BranchImp TTree.cxx 1629 0x7fbbcd27f4a9 ; 9 TTree::Branch<TNamed> TTree.h 372 0x7fbbeb663f00 ; 10 invRead invRead.C 11 0x7fbbeb6638e9 ; 11 ?? 0x7fbbefa8002d ; 12 ?? 0x7fbc199f5940 ; 13 ?? 0x615000002d80 ; 14 ?? 0x7ffc3fc9a130 ; 15 cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value *) const 0x7fbbf38f35c3 ; ```. I triead, and the heap-after-free-error can be solved by changing in TStreamerInfoActions:255. `buf << *x;`. with. `buf << (x ? *x : T{});`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027#issuecomment-2079415101:974,error,error,974,https://root.cern,https://github.com/root-project/root/issues/8027#issuecomment-2079415101,1,['error'],['error']
Availability,To do that - simply checkout roottest into the `root` source directory. The build directory will utilize that instead of downloading its own copy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-174390878:121,down,downloading,121,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-174390878,1,['down'],['downloading']
Availability,"To have better diagnostics, `TRint::ProcessLineNr()` prepends a `#line 1 ""ROOT_prompt_xxx""` PP directive to each input line. However, this causes problems if the previous line is continued with '\\', e.g.; ```; root [0] #define m(x) printf(""%s"", \; root (cont'ed, cancel with .@) [1]x);; ROOT_prompt_0:2:2: error; '#' is not followed by a macro parameter; ^; ROOT_prompt_0:3:1: error; use of undeclared identifier 'x'; x);; ^; ```. This PR fixes issue #8762. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8772:307,error,error,307,https://root.cern,https://github.com/root-project/root/pull/8772,2,['error'],['error']
Availability,"To help cling autoloading. Should fix [these failures in Jenkins](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/2889/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/testReport/junit/projectroot/runtutorials/tutorial_dataframe_df024_Display/).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8393:45,failure,failures,45,https://root.cern,https://github.com/root-project/root/pull/8393,1,['failure'],['failures']
Availability,"To me it looks OK. The failure in slc6/gcc62 is not real failure (retry of git clone). What we should be testing is also for Python3, which is not obvious to me how to start it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1512#issuecomment-357709239:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/1512#issuecomment-357709239,2,['failure'],['failure']
Availability,To prevent `TypeError: aap` error in `addressof`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9075:28,error,error,28,https://root.cern,https://github.com/root-project/root/pull/9075,1,['error'],['error']
Availability,"To reproduce error, just call:; ```; TClass::GetClass(""TTreeCache"")->GetStreamerInfo(); ```; Produces crash with output:; ```; input_line_9:6:31: error: 'MissCache' is a protected member of 'TTreeCache'; default_delete<TTreeCache::MissCache> _1;; ^; /home/linev/build/json/include/TTreeCache.h:85:11: note: declared protected here; struct MissCache {; ^; input_line_9:7:16: error: 'MissCache' is a protected member of 'TTreeCache'; TTreeCache::MissCache* _0;; ^; /home/linev/build/json/include/TTreeCache.h:85:11: note: declared protected here; struct MissCache {; ^; Error in <Load>: Could not declare TEmulatedTuple<TTreeCache::MissCache*,default_delete<TTreeCache::MissCache> >. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; ```. There are also few other classes with similar problems:; ```; TClass::GetClass(""TMVA::VarTransformHandler"")->GetStreamerInfo();; TClass::GetClass(""TTreeCacheUnzip"")->GetStreamerInfo();; ```. Probably, issue https://github.com/root-project/root/issues/7276 connected with this one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8194:13,error,error,13,https://root.cern,https://github.com/root-project/root/issues/8194,4,"['Error', 'error']","['Error', 'error']"
Availability,"To reproduce, download http://ccdb-test.cern.ch:8080/download/d64bd450-1619-11ec-a9d5-200114580202 and open it in TBrowser. Works on ubuntu, but on mac I get:. ```; root [2] Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0xdc6299b4 for the class ""array<Long64_t,1>"" in /Users/ktf/Downloads/array<Long64_t,1>_1631706076679.root.; Error in <TBufferFile::CheckByteCount>: object of class array<Long64_t,1> read too few bytes: 6 instead of 14; ```. when clicking on `ccdb_object;1`. Both ROOT 6.24.02 and 6.24.06 seem to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9001:14,down,download,14,https://root.cern,https://github.com/root-project/root/issues/9001,5,"['Down', 'Error', 'down']","['Downloads', 'Error', 'download']"
Availability,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-543193289:547,error,errors,547,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-543193289,2,"['avail', 'error']","['available', 'errors']"
Availability,"To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of; helper functions, e.g. substituting SFINAE with simple function; overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11149:124,down,down,124,https://root.cern,https://github.com/root-project/root/pull/11149,1,['down'],['down']
Availability,Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1224:78,avail,available,78,https://root.cern,https://github.com/root-project/root/pull/1224,1,['avail'],['available']
Availability,"Today I read User's Guide and spotted many mistakes I noticed when reading it for the first time 15 years ago. I thought that now is the time for me to act and to finally fix them.; I'm not a native speaker, so I don't insist on all of them (I still doubt the usage of articles when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:1029,redundant,redundant,1029,https://root.cern,https://github.com/root-project/root/issues/7284,1,['redundant'],['redundant']
Availability,Too many errors and it is not easy to make TRatioPlot working after reading from the file. Need further investigations,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14861#issuecomment-1973524962:9,error,errors,9,https://root.cern,https://github.com/root-project/root/pull/14861#issuecomment-1973524962,1,['error'],['errors']
Availability,Tools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/unicodeobject.h:553:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/unicodeobject.h:575:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/unicodeobject.h:593:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/stringobject.h:173:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/stringobject.h:174:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/stringobject.h:175:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] ; - FAILED: bindings/pyroot_experimental/cppyy/CPyCppyy/CMakeFiles/cppyy.dir/src/CPPClassMethod.cxx.o ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister] . And 46 more. ### Warnings:; - CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:127 (message): ; - /build/jenkins/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1276:29: warning: lambda capture 'EnvPathDelimiter' is not required to be captured for this use [-Wunused-lambda-capture],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546714154:1272,error,error,1272,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546714154,3,['error'],['error']
Availability,"Tools\MSVC\14.29.30133\include\atomic(2250): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\FunctionAttrs.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] ; - [2022-02-14T16:10:47.599Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Constants.h(255,39): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGObjCMac.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-02-14T16:10:47.599Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/SymbolTableListTraits.h(113): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGExprScalar.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-02-14T16:10:47.599Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Constants.h(468,63): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCoroutine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-02-14T16:10:47.599Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(228,23): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\LoopPassManager.cpp) [C:\build\workspace\",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9880#issuecomment-1039281245:3032,error,error,3032,https://root.cern,https://github.com/root-project/root/pull/9880#issuecomment-1039281245,1,['error'],['error']
Availability,"Tools\MSVC\14.32.31326\include\xmemory(1370,19): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\LoopUnrollAndJam.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-12-07T08:54:39.234Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring(427,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\LoopUtils.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-12-07T08:54:39.234Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(3946,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\LoopUnrollRuntime.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-12-07T08:54:40.079Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(625,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LegalizeVectorTypes.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2022-12-07T08:54:40.079Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(1557,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\DAGCombiner.cpp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11400#issuecomment-1340616783:1966,error,error,1966,https://root.cern,https://github.com/root-project/root/pull/11400#issuecomment-1340616783,1,['error'],['error']
Availability,"Tools\MSVC\14.32.31326\include\xmemory(1757,1): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_b41f054bsy': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SwitchLoweringUtils.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-10-14T16:26:59.868Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xtree(1204,1): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_3d1e5283db': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetInstrInfo.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-10-14T16:27:00.539Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Error.h(1223,2): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_567e3d6bsy': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Driver\ToolChains\RISCVToolchain.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Driver\obj.clangDriver.vcxproj] ; - [2022-10-14T16:27:00.539Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/iterator_range.h(43,1): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_ebed891csy': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCoroutine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11570#issuecomment-1279221547:3226,Error,Error,3226,https://root.cern,https://github.com/root-project/root/pull/11570#issuecomment-1279221547,1,['Error'],['Error']
Availability,"Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:260:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:205:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:610:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:596:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:603:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:1412,error,error,1412,https://root.cern,https://github.com/root-project/root/issues/14302,1,['error'],['error']
Availability,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3232#issuecomment-454352383:29,fault,fault,29,https://root.cern,https://github.com/root-project/root/pull/3232#issuecomment-454352383,1,['fault'],['fault']
Availability,"Travis build failure is not connected with changes, I will merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3584#issuecomment-498976339:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/3584#issuecomment-498976339,1,['failure'],['failure']
Availability,"Travis complains about a potential memory leak but I think it's a false positive (@pcanal can confirm/deny). For the Windows failure we need @bellenot 's green light to merge, or his advice on how to fix it. EDIT:. > Thank you all for your patience. A PR probably doesn't usually take this long sweat_smile. you'd be surprised :P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-780674349:125,failure,failure,125,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-780674349,1,['failure'],['failure']
Availability,"Travis failure (clang-tidy, clang-modernize) happens in RooFit, so not related to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7980#issuecomment-825544193:7,failure,failure,7,https://root.cern,https://github.com/root-project/root/pull/7980#issuecomment-825544193,1,['failure'],['failure']
Availability,"Tree and one friend TTree, everything's good. The `GetFriendInfo` function will return the name of the friend tree. ## Case 2 above; If the dataset is made of two TChains, one main and one friend, we have the following:; 1. TTree::Print(""all"") will always only print information of the main chain, not the friend one; 2. If the friend chain has a name, both TTree::Scan and RDataFrame Display can see the friend column correctly. This use case should be taken into account in `GetFriendInfo`, and it is since the name of the friend chain will always appear as the ""alias"" component of any element of `RFriendInfo::fFriendNames`; 3. If the friend chain has no name, TTree::Scan behaves inconsistently. I can do `Scan(""y:treefriend1.y"")` but then `Scan(""y:treefriend[23].y"")` will both fail. RDataFrame always prints an error, so for the sake of the `GetFriendInfo` function this is not a valid usecase (as also Enrico said). ## Case 3 above; If the dataset is made of a main TTree with a friend TChain attached, then; 1. If we give a name to the chain and then reference its column via ""treefriend.y"", then TTree:Scan(""x:treefriend.y"") throws an error. Inconsistently, if we write TTree:Scan(""x:y""), it works; 2. RDataFrame always returns an error from TTreeReader, `The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.`. I don't know if it's a bug or a feature (imho it's better than what TTree::Scan does), but again for the sake of `GetFriendInfo` this usecase is not valid and we should not pay attention to it for this PR. ## Conclusion; It is fine to retrieve the first name of the trees in a chain, because even in the worst case if the tree has a different name wrt the friend chain, the alias of that tree name will be the name of the chain itself. If the name of the first tree is equal to the name of any other tree in the chain, then it's the name of the chain itself. Any other case is not supported by RDataFrame, so not important for this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-816513144:1207,error,error,1207,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816513144,2,['error'],['error']
Availability,"Try this script. Result shown in file:; [test_saveas.pdf](https://github.com/root-project/root/files/12340003/test_saveas.pdf); ```; #if __has_include(""spl_save.cc""); #include ""spl_save.cc""; #define SPL_TEST 1; #else; double spl_save(double x) { return 0; }; #endif. //--------------------------------------------------------------------; void errin_spline3() {; //--------------------------------------------------------------------. double Xmin = 0.075, Xmax = 0.375;; vector<double> y {; 1.00415, 0.975639, 0.983931, 0.995963, 0.99217, 0.991772, 1.00196; };. TSpline3* spline3 = new TSpline3("""",Xmin,Xmax,y.data(),y.size(),; ""b2e2"",0.,0.);. #ifndef SPL_TEST; spline3->SaveAs(""spl_save.cc"");; printf(""Spline is saved.""; "" Restart this function in root a second time.\n"");; return;; #endif. TCanvas* c1 = new TCanvas(""c1"",""splines"",0,0,900,700);; c1->cd();; gPad->SetGrid();. auto Lft = [](double* x,double* p) {; return spl_save(x[0]);; };; TF1* ft = new TF1(""Test TSpline.SaveAs() function"",Lft,0.05,0.40,0);; ft->SetLineColor(kRed);; ft->SetLineWidth(2);; ft->GetYaxis()->SetRangeUser(0.8,1.2);; ft->Draw(""L"");. spline3->SetLineColor(kBlue);; spline3->SetLineWidth(2);; spline3->SetMarkerColor(kBlue+2);; spline3->SetMarkerStyle(20);; spline3->SetMarkerSize(0.75);; spline3->Draw(""LCP SAME"");. TLegend* leg = new TLegend(0.60,0.75,0.88,0.88);; leg->AddEntry(spline3, ""original TSpline3"", ""LP"");; leg->AddEntry(ft, ""saved in file"", ""L"");; leg->Draw();. gPad->Update();; }; ```; Method TSpline.SaveAs() writes code with an error.; On line `if (klow < fNp-1) klow = fNp-1;` the ''<"" sign must be replaced with the "">"" sign.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13441#issuecomment-1678187182:1525,error,error,1525,https://root.cern,https://github.com/root-project/root/issues/13441#issuecomment-1678187182,1,['error'],['error']
Availability,Try to debug Windows Debug failures / timeouts (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16089:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/16089,1,['failure'],['failures']
Availability,"Try to fix an error when building the system PCH with cppyy's Root on Android, as described [on the forum](https://root-forum.cern.ch/t/errors-building-system-pch-with-cppyys-root-on-android/51961)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11579:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/11579,2,['error'],"['error', 'errors-building-system-pch-with-cppyys-root-on-android']"
Availability,Trying to fix the linker error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12036#issuecomment-1385410706:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/12036#issuecomment-1385410706,1,['error'],['error']
Availability,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```; [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m; if (v < std::numeric_limits<T>::max()) {; [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m; auto parseResult = ROOT::FromHumanReadableSize(input,res);; [NON-XML-CHAR-0x1B][0;1;32m ^; [NON-XML-CHAR-0x1B][0m1 warning generated.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321#issuecomment-526621721:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/4321#issuecomment-526621721,1,['failure'],['failure']
Availability,"TupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeHeader (0 ms); [ RUN ] RNTuple.SerializeFooter; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15052,Error,Error,15052,https://root.cern,https://github.com/root-project/root/issues/12426,1,['Error'],['Error']
Availability,"Turning off runtime cxx_modules for 10.15 and 10.14 causes the cling step to still fail, in the `Generating G__Core.cxx, ../lib/libCore.rootmap` step instead of the module generation. Same sorts of errors, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-825364930:198,error,errors,198,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-825364930,1,['error'],['errors']
Availability,"Turns out that error is present in the C++11 builds and it is impossible for me to reproduce. @oshadura, I would like to land this PR enabling more osx platforms to increase the chances ot reproducing the failures we see here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-616696420:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-616696420,2,"['error', 'failure']","['error', 'failures']"
Availability,Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:; * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363; * https://root.cern/doc/v610/group__tutorial__hist.html; * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1484:235,error,error-when-running-interactively,235,https://root.cern,https://github.com/root-project/root/pull/1484,1,['error'],['error-when-running-interactively']
Availability,Two ClassImp statements in the same compilation unit result in a redefinition error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10948:78,error,error,78,https://root.cern,https://github.com/root-project/root/issues/10948,1,['error'],['error']
Availability,"Two fixes here:; - `REQUIRED` flag in cmake function `find_python_module` did not work because of wrongly set variable; - If the module is not found, then the function prints the response of the `import <module>` python call. This pollutes probably the cmake output if the error message of python is not simply sth like 'no module found with this name' or the function is too often called on not available modules. It looks like this:. ```; -- Found py_keras: /usr/lib/python3.5/site-packages/keras ; -- Failed to find Python module theano: Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ImportError: No module named 'theano'; -- Could NOT find py_theano (missing: PY_THEANO) ; -- Found py_tensorflow: /usr/lib/python3.5/site-packages/tensorflow; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253640317:273,error,error,273,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253640317,2,"['avail', 'error']","['available', 'error']"
Availability,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-320457479:276,error,errors,276,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-320457479,1,['error'],['errors']
Availability,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects.; * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6640#issuecomment-708477402:261,avail,available,261,https://root.cern,https://github.com/root-project/root/issues/6640#issuecomment-708477402,1,['avail'],['available']
Availability,"Two substantive changes:; 1) Explicitly catch errors in pyroot when the wrapper function fails to compile (this is actually an expanded version of a partial fix which is already upstream in cppyy: https://github.com/wlav/cppyy-backend/commit/8de6ed5ffcabaeba52fba5b8471149c6bb1fe71d); 2) Make sure template instantiation fails by catching clang errors within LookupHelper and rolling back the transaction where appropriate (still not entirely sure this is exactly the right fix, @Axel-Naumann @jalopezg-git please take a look); 3) Implement a mechanism for redirecting cling diagnostics to a user provided ostream and use this in cppyy to capture the diagnostic output and append it to the python exceptions or warnings as appropriate. This PR fixes https://github.com/root-project/root/issues/11854. There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling ```TInterpreter::Declare``` in this respect. This is likely related to the issues described by @jalopezg-git in https://github.com/root-project/root/pull/12449#issuecomment-1467860880 and can be fixed in a future PR. Consider the following test case:. test.h:; ```cpp; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. test.py; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). print(""calling helper""). for i in range(2):; print(f""call attempt {i}""); try:; res = ROOT.call_helper(helper); print(""helper call succeeded:"", res); except Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/12449,3,"['error', 'rollback']","['errors', 'rollback']"
Availability,"Type=clang::serialization::MK_PrebuiltModule, ImportLoc=..., ClientLoadCapabilities=0, Imported=0x0); at /home/jun/dev/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4379; #24 0x00007ffff0495e2e in clang::CompilerInstance::loadModule (this=0x55555562fb60, ImportLoc=..., Path=..., Visibility=clang::Module::AllVisible, IsInclusionDirective=false); at /home/jun/dev/root/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1710; #25 0x00007ffff117e1dd in clang::Sema::ActOnModuleImport (this=0x5555556b5680, StartLoc=..., ExportLoc=..., ImportLoc=..., Path=...); at /home/jun/dev/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325; #26 0x00007fffef9655fa in cling::Interpreter::loadModule (this=0x5555555ef460, M=0x555555956a90, complain=true) at /home/jun/dev/root/interpreter/cling/lib/Interpreter/Interpreter.cpp:908; #27 0x00007fffef965326 in cling::Interpreter::loadModule (this=0x5555555ef460, Python Exception <class 'gdb.error'>: There is no member named _M_p.; moduleName=, complain=true) at /home/jun/dev/root/interpreter/cling/lib/Interpreter/Interpreter.cpp:872; #28 0x00007fffef85f5f6 in TClingCallbacks::findInGlobalModuleIndex (this=0x5555563ffde0, Name=..., loadFirstMatchOnly=false) at /home/jun/dev/root/core/metacling/src/TClingCallbacks.cxx:339; #29 0x00007fffef85f7ca in TClingCallbacks::LookupObject (this=0x5555563ffde0, DC=0x5555564f80b8, Name=...) at /home/jun/dev/root/core/metacling/src/TClingCallbacks.cxx:376; #30 0x00007fffef9735b7 in cling::MultiplexInterpreterCallbacks::LookupObject (this=0x5555556b8b30, DC=0x5555564f80b8, DN=...); at /home/jun/dev/root/interpreter/cling/lib/Interpreter/MultiplexInterpreterCallbacks.h:70; #31 0x00007fffef97e8f5 in cling::InterpreterExternalSemaSource::FindExternalVisibleDeclsByName (this=0x5555556b8040, DC=0x5555564f80b8, Name=...); at /home/jun/dev/root/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:278; #32 0x00007ffff09e4a0a in clang::MultiplexExternalSemaSour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1253760320:9852,error,error,9852,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1253760320,2,['error'],['error']
Availability,Typical copy-and-paste failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4172:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/4172,1,['failure'],['failure']
Availability,Typical problem - direct copy of self-allocated memory which will lead to error in destructor; Also adjust some assign operators where `Copy` can be used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10908:74,error,error,74,https://root.cern,https://github.com/root-project/root/pull/10908,1,['error'],['error']
Availability,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10825#issuecomment-1168059023:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/10825#issuecomment-1168059023,2,['failure'],['failure']
Availability,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2442692217:21,error,errors,21,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217,8,"['down', 'error']","['down', 'error', 'errors']"
Availability,UIT WARNING IN HESSE ============== Negative diagonal element 3 in Error Matrix MINUIT WARNING IN HESSE ============== 2456.94 added to diagonal of error matrix EIGENVALUES OF SECOND-DERIVATIVE MATRIX: -7.1929e+00 9.6978e-01 1.0000e+00 9.2231e+00 MINUIT WARNING IN HESSE ============== MATRIX FORCED POS-DEF BY ADDING 7.202092 TO DIAGONAL. FCN=-0.464708 FROM HESSE STATUS=NOT POSDEF 31 CALLS 32 TOTAL EDM=6.13113e+08 STRATEGY= 2 ERR MATRIX NOT POS-DEF EXT PARAMETER APPROXIMATE STEP FIRST NO. NAME VALUE ERROR SIZE DERIVATIVE 1 Lumi 1.00000e+00 1.33665e-03 2.14402e-03 -1.26169e+05 2 Nmu 5.00000e+04 1.26146e+03 1.18624e-03 -3.61664e+05 3 RawRDst 4.03350e-02 1.19551e-01 2.56936e-03 -4.53011e+03 4 alpha_BFD1 0.00000e+00 2.39988e-01 2.01358e-03 -5.82940e+03 ERR DEF= 0.5 MIGRAD MINIMIZATION HAS CONVERGED. MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX. COVARIANCE MATRIX CALCULATED SUCCESSFULLY FCN=-373434 FROM MIGRAD STATUS=CONVERGED 227 CALLS 228 TOTAL EDM=6.97829e-06 STRATEGY= 2 ERROR MATRIX ACCURATE EXT PARAMETER STEP FIRST NO. NAME VALUE ERROR SIZE DERIVATIVE 1 Lumi 3.00000e+00 1.68695e-05 2.00130e-03** at limit ** 2 Nmu 1.00000e+06 5.62344e+00 2.00135e-03** at limit ** 3 RawRDst 2.00000e-01 1.08871e-05 9.78010e-02** at limit ** 4 alpha_BFD1 3.00000e+00 2.35826e-04 5.29109e-03** at limit ** ; ERR DEF= 0.5 EXTERNAL ERROR MATRIX. NDIM= 25 NPAR= 4 ERR DEF=0.5 2.982e-16 5.637e-20 1.636e-27 1.292e-23 5.637e-20 9.972e-05 4.648e-18 1.119e-17; 1.636e-27 4.648e-18 2.073e-17 -4.928e-20; 1.292e-23 1.119e-17 -4.928e-20 1.309e-12; PARAMETER CORRELATION COEFFICIENTS; NO. GLOBAL 1 2 3 4; 1 0.00000 1.000 0.000 0.000 0.000; 2 0.00000 0.000 1.000 0.000 0.000; 3 0.00001 0.000 0.000 1.000 -0.000; 4 0.00001 0.000 0.000 -0.000 1.000; **********; ** 7 **SET ERR 0.5; **********; **********; ** 8 **SET PRINT 1; **********; **********; ** 9 **HESSE 2000; **********; COVARIANCE MATRIX CALCULATED SUCCESSFULLY; FCN=-373434 FROM HESSE STATUS=OK 23 CALLS 251 TOTAL; EDM=6.97828e-06 STRATEGY= 2 ERROR MAT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12729#issuecomment-1527705616:2367,ERROR,ERROR,2367,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527705616,1,['ERROR'],['ERROR']
Availability,Ubuntu failures are unrelated. Decided to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3165#issuecomment-447284161:7,failure,failures,7,https://root.cern,https://github.com/root-project/root/pull/3165#issuecomment-447284161,1,['failure'],['failures']
Availability,"Ugh, I'm sorry so many code owners got pinged :/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8083#issuecomment-831803989:39,ping,pinged,39,https://root.cern,https://github.com/root-project/root/pull/8083#issuecomment-831803989,1,['ping'],['pinged']
Availability,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1154806782:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1154806782,1,['failure'],['failure']
Availability,Uhm @pcanal the failure in `projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make` is real. Do you maybe have an idea of what it could be? Otherwise I'll throw valgrind at it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5340#issuecomment-611631248:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/5340#issuecomment-611631248,1,['failure'],['failure']
Availability,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-879713420:134,error,errors,134,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-879713420,1,['error'],['errors']
Availability,"Uhm now I'm getting your same error, `ar: libdeps specified more than once`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7345#issuecomment-789865344:30,error,error,30,https://root.cern,https://github.com/root-project/root/issues/7345#issuecomment-789865344,1,['error'],['error']
Availability,"Uhm....so this gtest:; ```c++; auto m = tdf.Min<double>(""x"");; double runningMin = std::numeric_limits<double>::max();; m.OnPartialResult(2, [&runningMin](double x) {; runningMin = x;; });; EXPECT_DOUBLE_EQ(runningMin, *m); ; ```; results in this error:; ```; [ RUN ] TDFCallbacks.Min; /Volumes/MacintoshHD/build/jenkins/workspace/root-pullrequests-build/root/tree/treeplayer/test/dataframe/dataframe_callbacks.cxx:126: Failure; Expected: runningMin; Which is: 1.7976931348623157e+308; To be equal to: *m; Which is: -3.0919523479251314; [ FAILED ] TDFCallbacks.Min (0 ms); ```; only on mac1012 and only for `Min` and `Max` which have the same kind of callback logic.; Do lambda captures work differently on mac? I'm stumped.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-333661341:247,error,error,247,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-333661341,2,"['Failure', 'error']","['Failure', 'error']"
Availability,Unfortunately I can't install Win64 version of Root 6.26 becasue of virus detection. See error during unzip and Btdefender report. ![error1](https://user-images.githubusercontent.com/75624059/193414303-f5b7d9c8-4837-431d-b7e2-e7f04c94e34b.JPG); ![error2](https://user-images.githubusercontent.com/75624059/193414309-ece88fe7-b75c-47ce-ac39-620b567ba7b3.JPG),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11473:89,error,error,89,https://root.cern,https://github.com/root-project/root/issues/11473,1,['error'],['error']
Availability,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1925610367:90,avail,available,90,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1925610367,1,['avail'],['available']
Availability,"Unfortunately not. The fact that it's ARM and that we see half of those same failures also on the march=native alma9 build makes me suspect something to do with a wrong assumption on floating point arithmetic. However, the issue for those march=native failures (and the same failing 6 tests on mac ARM, which all seem to be small floating point errors) may be a different one than the one causing the other 6 failing tests on mac which are more mysterious (huge difference there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15797#issuecomment-2158390462:77,failure,failures,77,https://root.cern,https://github.com/root-project/root/pull/15797#issuecomment-2158390462,3,"['error', 'failure']","['errors', 'failures']"
Availability,Unfortunately that's not the case. Developments in cling are quite coupled to the tests -- for example PR #5884 is blocked due to such failures. My experience is that those stress tests are actually quite useful when making changes to core of ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656639639:135,failure,failures,135,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656639639,1,['failure'],['failures']
Availability,"Unfortunately the commits do not even compile with some scary error; ```; /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingCallbacks.cxx: In constructor ‘AutoloadLibraryMU::AutoloadLibraryMU(const TClingCallbacks&, const string&, const SymbolNameVector&)’:; /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingCallbacks.cxx:90:120: error: cannot allocate an object of abstract type ‘llvm::orc::MaterializationUnit’; 90 | : MaterializationUnit({getSymbolFlagsMap(Symbols), nullptr}), fCallbacks(cb), fLibrary(Library), fSymbols(Symbols); ```. Can this be some difference between LLVM 13 and 16 that's causing it? @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1893791188:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1893791188,2,['error'],['error']
Availability,"Unfortunately the projectroot.roottest.root.io.double32.roottest_root_io_double32_make failure is a real issue. It, surpringly, fails to merge some consecutive `Double32_t` data member that it was able to before (so the issue appear in `TStreamerInfo::Compile`):; ```; - i= 3, ff2 type= 29, offset= [deleted from log], len=4, method= [deleted from log] [optimized]; - i= 4, ff4 type= 49, offset= [deleted from log], len=1, method= [deleted from log]; + i= 3, ff2 type= 29, offset= [deleted from log], len=3, method= [deleted from log]; + i= 4, ff3 type= 9, offset= [deleted from log], len=1, method= [deleted from log]; + i= 5, ff4 type= 49, offset= [deleted from log], len=1, method= [deleted from log]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008#issuecomment-921724322:87,failure,failure,87,https://root.cern,https://github.com/root-project/root/pull/9008#issuecomment-921724322,1,['failure'],['failure']
Availability,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:; https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37; now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(); /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x); ----> 2 import ROOT # script works, if remove this line; 3 return x; 4 ; 5 from ipyparallel import Client; 6 pool = Client(); /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(); 88 if hasattr(ip,""kernel""):; 89 import JupyROOT; ---> 90 import JsMVA; 91 ; 92 # Register cleanup; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds); 160 except Exception:; 161 pass; --> 162 return _orig_ihook(name, *args, **kwds); 163 __builtin__.__import__ = _importhook; 164 ; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(); 10 ip = get_ipython(); 11 extMgr = ExtensionManager(ip); 12 extMgr.load_extension(""JsMVA.JsMVAMagic""); 13 ; ---> 14 loadExtensions(); /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(); 8 ## This function will register JsMVAMagic class to ipython; 9 def loadExtensions():; ---> 10 ip = get_ipython(); 11 extMgr = ExtensionManager(ip); 12 extMgr.load_extension(""JsMVA.JsMVAMagic""); NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6974#issuecomment-866391935:66,error,error,66,https://root.cern,https://github.com/root-project/root/issues/6974#issuecomment-866391935,2,['error'],['error']
Availability,"Unfortunately this only solves half of the problem, now we have; ```; <<< cling interactive line includer >>>: fatal error: module file '/Users/sftnight/ROOT-CI/build/lib/std.pcm' is out of date and needs to be rebuilt: signature mismatch; <<< cling interactive line includer >>>: note: imported by module 'CustomStruct' in '/Users/sftnight/ROOT-CI/build/tree/ntuple/v7/test/CustomStruct.pcm'; ```; If we had assertions enabled (we probably should for `mac-beta`...), we would instead see; ```; Assertion failed: (decl.isFirstDecl() && ""Couldn't trace back include from a decl"" "" that is not from an AST file""), function GetFileName, file TClingUtils.cxx, line 3361.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14903#issuecomment-1983103890:117,error,error,117,https://root.cern,https://github.com/root-project/root/pull/14903#issuecomment-1983103890,1,['error'],['error']
Availability,"Unfortunately, coming back to this, I'm not sure this change (in its final form) is sufficient: The comment in `~RPageStorage` says that tasks may hold a reference to `this`, which is an instance of a derived subclass (as `RPageStorage` is abstract; and so are `RPageSink` and `RPageSource`). However, once control flow makes it to `~RPageStorage`, the subclass has already been destructed, including its member fields (if my recollection of C++ destructor chains in the presence of inheritance serves well), so we have a race with any task that may try to access one of them. As a concrete case, the summary mentions `RPageSinkBuf::CommitPageImpl()` where the tasks access `fBufferedColumns`. If one of the tasks is only started after `~RPageStorage` calls `WaitForAllTasks`, it will read from an already destructed `std::vector`, which would explain one of the failure modes I still see in CI runs. That said, I'm not an expert in the RNTuple design and cannot assess how this could be solved in the best way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12824#issuecomment-1564337823:863,failure,failure,863,https://root.cern,https://github.com/root-project/root/pull/12824#issuecomment-1564337823,1,['failure'],['failure']
Availability,"Unfortunately, nothing has happened here during the last 2 years. Has anyone from CERN or the ROOT project registered a mime type with IANA?. BTW, the magic match of `file` is quite sloppy:. ```; $> echo -e 'root\x00' > root.txt ; file root.txt; root.txt: ROOT file; $> file --mime-type ./root.txt; ./root.txt: application/octet-stream; ```; It does not even require a non-zero version field, or the existance of the fBEGIN field.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6771#issuecomment-1497824411:199,echo,echo,199,https://root.cern,https://github.com/root-project/root/issues/6771#issuecomment-1497824411,1,['echo'],['echo']
Availability,"Unfortunately, the failure on mac13 is not unrelated :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16285#issuecomment-2308747656:19,failure,failure,19,https://root.cern,https://github.com/root-project/root/pull/16285#issuecomment-2308747656,1,['failure'],['failure']
Availability,Unit test failures look like infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1039#issuecomment-331459237:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/1039#issuecomment-331459237,1,['failure'],['failures']
Availability,Unload is bad idea :). The fact that loading leads to failure seems to be an indication that having it happens 'here' leads to incorrect loading.(could be nesting of loading),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1992134659:54,failure,failure,54,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1992134659,1,['failure'],['failure']
Availability,Unrelated CI failure `10:43:05 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3580#issuecomment-475684249:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/3580#issuecomment-475684249,1,['failure'],['failure']
Availability,"Unrelated errors, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5930#issuecomment-650152127:10,error,errors,10,https://root.cern,https://github.com/root-project/root/pull/5930#issuecomment-650152127,1,['error'],['errors']
Availability,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11141#issuecomment-1209279850:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/11141#issuecomment-1209279850,1,['error'],['error']
Availability,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11115#issuecomment-1207739735:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/11115#issuecomment-1207739735,1,['failure'],['failures']
Availability,Until failures on Linux Fedora 39 are understood. This PR is marked as emergency since all fedora39 builds are failing because of this test failure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16684:6,failure,failures,6,https://root.cern,https://github.com/root-project/root/pull/16684,2,['failure'],"['failure', 'failures']"
Availability,"Until now, in the case where `VecCore` is enabled, only `BinData::fData` was padded to protect vectorized loops against memory access errors. This commit adds the same padding in the case `VecCore` is enabled to all coordinate, data and error vectors of `FitData` family; in particular:; * `FitData::fCoords[i]` (for every `i`); * `BinData::fCoordErrors[i]` (for every `i`); * `BinData::fData`, `BinData::fDataError`; * `BinData::fDataErrorHigh`; * `BinData::fDataErrorLow`; * `BinData::fBinEdge[i]` (for every `i`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/896:134,error,errors,134,https://root.cern,https://github.com/root-project/root/pull/896,2,['error'],"['error', 'errors']"
Availability,"Up to now comments were ignored:; ```; ClassDefOverride(name,version) // class comments; ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9934:103,error,error,103,https://root.cern,https://github.com/root-project/root/pull/9934,2,['error'],"['error', 'errors']"
Availability,"Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:; https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12639:153,error,errors,153,https://root.cern,https://github.com/root-project/root/issues/12639,1,['error'],['errors']
Availability,"Update:; Unfortunately, I couldn't manage to make docker container with both pyROOT and X11 graphics running...; So I don't have a nice reproducible for Oliver yet... However, I have tried to reproduce the same problem with plain C++.; And I have noticed something weird, when I try to match python code logic with:. ```cpp; //test.cpp; void test(){; ROOT::EnableImplicitMT();. ROOT::RDataFrame df = ROOT::RDataFrame(10);; auto df2 = df.Define(""x"", ""rdfentry_"").Define(""x2"", ""rdfentry_*rdfentry_"");; ; std::vector<TH1D*> histos;; auto h1 = df2.Histo1D({""h1"", ""h1; x; x"", 100, 0, 100}, ""x"");; auto h2 = df2.Histo1D({""h2"", ""h2; x; x2"", 100, 0, 100}, ""x2"");; histos.push_back(h1.GetPtr());; histos.push_back(h2.GetPtr());. for (auto* h : histos){; TCanvas* canvas = new TCanvas( Form(""%s"", h->GetName()) );; h->DrawClone();; std::cout<<""Successfully plotted the histogram. Please type something to get the next one: ""<<std::endl;; std::string dummy;; std::cin>> dummy;; }; }; ```; After running `root test.cpp` I get the output in the following order:. 1. ""Successfully plotted the histogram. Please type something to get the next one:"" from std::cout; 2. I send ""42"" for std::cin request; 3. ""Successfully plotted the histogram. Please type something to get the next one:"" from std::cout; **and single blank canvas appears**; 4. I send ""42"" for std::cin request; 5. **Two canvases filled with two histograms appear**. The order seems off from expected ""histogram per iteration"" logic and plotting happens at the very end of the for loop.; @couet could you reproduce this?. I assume this is reasonable with `ROOT::EnableImplicitMT();`, if the same happens with python then not all canvases might be alive in the end.. So far I couldn't get a seg. fault crash with C++. @eguiraud did you manage to reproduce it with lxplus or on your local setup?; If you have it reproducible on lxplus, maybe you can share it with Oliver.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1487016637:1696,alive,alive,1696,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1487016637,2,"['alive', 'fault']","['alive', 'fault']"
Availability,"Updated the file as per your suggestion Danilo, removing the doxygen style of comments. Left the formulation mostly intact, just a few small improvements. EDIT: ping @dpiparo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1476#issuecomment-356301976:161,ping,ping,161,https://root.cern,https://github.com/root-project/root/pull/1476#issuecomment-356301976,1,['ping'],['ping']
Availability,"Updates of the day:. ### 1; @Axel-Naumann suggested creating targets for the builtin_xrootd libraries . This should in theory give us the possibility of changing target properties through something like; `set(TARGET libXrdSecpwd-4 PROPERTY INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})`. We still want to keep all the building process in the `ExternalProject_Add` step, thus these new targets would be created as IMPORTED libraries. But unfortunately, CMake doesn't allow to install IMPORTED libraries as TARGETS ([SO post](https://stackoverflow.com/a/41179630), [CMake developer citation](https://public.kitware.com/Bug/view.php?id=14311) ). ### 2; I tried to create a post install script that manually invokes `install_name_tool` to change the rpath from the build directory to the install directory. This would be called in `SearchInstalledSoftware.cmake` through something like; `install(SCRIPT ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/XROOTDPostInstall.cmake"")`; and the script itself would work along these lines; ```; file(GLOB XROOTD_ALL_LIBRARIES; ""${CMAKE_INSTALL_PREFIX}/lib/libXrd*""; ); find_program(INSTALL_NAME_TOOL install_name_tool). if(INSTALL_NAME_TOOL); foreach(XRD_LIB_PATH ${XROOTD_ALL_LIBRARIES}); set(OLD_RPATH ${CMAKE_BINARY_DIR}/lib); set(NEW_RPATH ${CMAKE_INSTALL_PREFIX}/lib); execute_process(COMMAND ${INSTALL_NAME_TOOL} -rpath ${OLD_RPATH} ${NEW_RPATH} $$; endforeach(); endif(); ```; The problem with this idea, if not for its ad-hoc nature, is that `install_name_tool` would actually be called each time `cmake --install` is called causing errors from the second time since ${OLD_RPATH} is not set to the `build` folder anymore:; ```; error: install_name_tool: no LC_RPATH load command with path: /Users/sftnight/vpadulan/build/lib found in: /Users/sftnight/vpadulan/install/lib/libXrdClient.dylib (for architecture x86_64), required for specified option ""-rpath /Users/sftnight/vpadulan/build/lib /Users/sftnight/vpadulan/install/lib""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128#issuecomment-672083860:1571,error,errors,1571,https://root.cern,https://github.com/root-project/root/pull/6128#issuecomment-672083860,2,['error'],"['error', 'errors']"
Availability,"Updates on the failing tests:; * Centos8/multicore: Failure because the same wrong mechanism of changing files happens in `FinalizeSlot` instead of `Finalize` in `SnapshotHelperMT`. Weirdly this didn't happen on my machine with 8 threads but it does on this node with 16 threads, still not sure what's the real difference there.; * MacOS: Both failures happen in the dataframe test, but in the **single threaded** Snapshot, that is in the `Finalize` method of the `SnapshotHelper` class. At first this PR wasn't even considering the single threaded case, that's also why `SnapshotHelper` wasn't modified. So there was this difference between the single threaded Snapshot that still used the weird ChangeFile behaviour (although it shouldn't have triggered a segfault anyway since it's using a plain TFile), and the multithreaded Snapshot that got its behaviour changed to avoid the issue. Considering both types of failures, and the fact that a coherent behaviour across the two Snapshot modes is desirable, I would refactor the usage of `TTree::SetMaxTreeSize` inside of RDF Snapshot in a single common point that both single-thread and multi-thread operations have to go through, if that exists. Or in alternative, the workaround should be done at construction time of both helpers and then removed at destruction time (or in `Initialize` and `Finalize` methods).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720955137:52,Failure,Failure,52,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720955137,3,"['Failure', 'failure']","['Failure', 'failures']"
Availability,"Updating MethodBDT so that it can use different loss functions for regression. Edited MethodBDT.cxx, MethodBDT.h and added LossFunction.h and LossFunction.cxx to make this happen. Huber, Least Squares, and Absolute Deviation are now available for use.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/243:233,avail,available,233,https://root.cern,https://github.com/root-project/root/pull/243,1,['avail'],['available']
Availability,Updating PR because I used some C++ features that are not available in C++14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10412#issuecomment-1102849857:58,avail,available,58,https://root.cern,https://github.com/root-project/root/pull/10412#issuecomment-1102849857,1,['avail'],['available']
Availability,Upgrading the warning into an error.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15537#issuecomment-2168224936:30,error,error,30,https://root.cern,https://github.com/root-project/root/issues/15537#issuecomment-2168224936,1,['error'],['error']
Availability,"Uring.hxx:17:; /usr/include/liburing.h:1023:10: error: assigning to 'struct io_uring_cqe *' from incompatible type 'void *'; cqe = NULL;; ^~~~; /var/tmp/portage/sci-physics/root-6.26.06/work/root-6.26.06_build/etc/cling/lib/clang/9.0.1/include/stddef.h:89:16: note: expanded from macro 'NULL'; # define NULL ((void*)0); ^~~~~~~~~~; In file included from input_line_7:8:; In file included from /var/tmp/portage/sci-physics/root-6.26.06/work/root-6.26.06_build/include/ROOT/RIoUring.hxx:17:; /usr/include/liburing.h:1042:7: error: no matching function for call to '__io_uring_peek_cqe'; if (!__io_uring_peek_cqe(ring, cqe_ptr, NULL) && *cqe_ptr); ^~~~~~~~~~~~~~~~~~~; /usr/include/liburing.h:993:19: note: candidate function not viable: cannot convert argument of incomplete type 'void *' to 'unsigned int *' for 3rd argument; static inline int __io_uring_peek_cqe(struct io_uring *ring,; ^; /usr/include/liburing.h:1055:7: error: no matching function for call to '__io_uring_peek_cqe'; if (!__io_uring_peek_cqe(ring, cqe_ptr, NULL) && *cqe_ptr); ^~~~~~~~~~~~~~~~~~~; /usr/include/liburing.h:993:19: note: candidate function not viable: cannot convert argument of incomplete type 'void *' to 'unsigned int *' for 3rd argument; static inline int __io_uring_peek_cqe(struct io_uring *ring,; ^; /usr/include/liburing.h:1071:22: error: use of undeclared identifier 'memory_order_acquire'; unsigned int head = io_uring_smp_load_acquire(sq->khead);; ^; /usr/include/liburing/barrier.h:75:9: note: expanded from macro 'io_uring_smp_load_acquire'; memory_order_acquire); ^; In file included from input_line_7:8:; In file included from /var/tmp/portage/sci-physics/root-6.26.06/work/root-6.26.06_build/include/ROOT/RIoUring.hxx:17:; /usr/include/liburing.h:1086:9: error: cannot initialize return object of type 'struct io_uring_sqe *' with an rvalue of type 'void *'; return NULL;; ^~~~; /var/tmp/portage/sci-physics/root-6.26.06/work/root-6.26.06_build/etc/cling/lib/clang/9.0.1/include/stddef.h:89:16: note: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11381:24603,error,error,24603,https://root.cern,https://github.com/root-project/root/issues/11381,1,['error'],['error']
Availability,"Usages of `testing::internal::CaptureStd(err|out)` in RDataFrame tests:. ```; ~/W/R/root (credit_rquaglia) git grep -n 'CaptureStd\(err\|out\)' -- tree/dataframe/test/; tree/dataframe/test/dataframe_cache.cxx:148: testing::internal::CaptureStderr();; tree/dataframe/test/dataframe_nodes.cxx:55: testing::internal::CaptureStderr();; tree/dataframe/test/dataframe_nodes.cxx:79: testing::internal::CaptureStdout();; tree/dataframe/test/dataframe_report.cxx:22: testing::internal::CaptureStdout();; tree/dataframe/test/dataframe_report.cxx:72: testing::internal::CaptureStdout();; tree/dataframe/test/dataframe_report.cxx:81: testing::internal::CaptureStdout();; tree/dataframe/test/dataframe_snapshot.cxx:141: testing::internal::CaptureStderr();; tree/dataframe/test/dataframe_snapshot.cxx:686: testing::internal::CaptureStderr();; tree/dataframe/test/dataframe_snapshot.cxx:700: testing::internal::CaptureStderr();; ````; For example, https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L141-L143 for checking that no error is printed, or https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_snapshot.cxx#L686-L694 to check that an error is printed and the message is what we expect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-620060541:1056,error,error,1056,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-620060541,2,['error'],['error']
Availability,Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226:26,error,error,26,https://root.cern,https://github.com/root-project/root/pull/1226,1,['error'],['error']
Availability,Use Cling Interpreter to get at run time Python executable and avoid a compilation error when running the tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:83,error,error,83,https://root.cern,https://github.com/root-project/root/pull/10253,1,['error'],['error']
Availability,Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the ; model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5.; .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:81,error,error,81,https://root.cern,https://github.com/root-project/root/pull/13533,3,"['error', 'failure']","['error', 'failure', 'failures']"
Availability,"Use `${PYTHON_LIBRARIES}` to automatically select the correct (debug/release) Python library when both are installed. For example, with both debug and release versions of Python, `PYTHON_LIBRARIES` is set as:; ```; PYTHON_LIBRARIES:INTERNAL=optimized;C:/Python310/libs/python310.lib;debug;C:/Python310/libs/python310_d.lib; ```; And with only the release version:; ```; PYTHON_LIBRARIES:INTERNAL=C:/Python310/libs/python310.lib; ```; So the correct one will be used.; This fixes the following error when both versions are installed:; ```; CMake Error at bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt:61 (target_link_libraries):; The ""optimized"" argument must be followed by a library.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13013:493,error,error,493,https://root.cern,https://github.com/root-project/root/pull/13013,4,"['Error', 'error']","['Error', 'error']"
Availability,"Use `=delete` specifier for copy/assign methods which were marked as ""not implemented"". Remove copy/assign operator for following classes:; * TVirtualGeoTrack; * TGeoTrack; * TGeoUniformMagField; * TGeoPolygon; * TGeoBuilder; * TGeoPhysicalNode; * TGeoStateInfo; * TGeoManager. In most these classes copy constructor was copying pointer on internal allocated memory.; Means it was clearly errors and cannot be used this way. Also implement TGeoBoolNode::AssignPoints() method.; Used in all `GetNpoints` methods to set points arrays.; Plus modernize TGeoBoolNode classes - uses `override` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5058:389,error,errors,389,https://root.cern,https://github.com/root-project/root/pull/5058,1,['error'],['errors']
Availability,"Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:; ```; SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13576:167,error,error,167,https://root.cern,https://github.com/root-project/root/pull/13576,2,['error'],['error']
Availability,Use for bin edge comparisons an epsilon abs value that is computed a a fraction of bin width. This would give a more robust comparison test.; This PR should fix what has been suggested in ROOT-7752,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3341:117,robust,robust,117,https://root.cern,https://github.com/root-project/root/pull/3341,1,['robust'],['robust']
Availability,Use in Mathcore macros defined in Math/Error.h for reporting error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2947:39,Error,Error,39,https://root.cern,https://github.com/root-project/root/pull/2947,2,"['Error', 'error']","['Error', 'error']"
Availability,"Use the correct syntax for the `START` command, which is:; ```; START ""title"" [/D path] [options] ""command"" [parameters]; ```; This prevent the following error with the `.forum bug` command:; ```; root [0] .forum bug; The system cannot accept the START command parameter ""https://root-forum.cern.ch/new-topic?category=ROOT&tags=bug&body=___%0A_Please read [tips for efficient and successful posting](https:%2F%2Froot-forum.cern.ch%2Ft%2Ftips-for-efficient-and-successful-posting%2F28292) and [posting code](https:%2F%2Froot-forum.cern.ch%2Ft%2Fposting-code-read-this-first%2F28293)_%0A%0A%23%23%23 Describe the bug%0A<!--%0AA clear and concise description of what the wrong behavior is.%0A-->%0A%23%23%23 Expected behavior%0A<!--%0AA clear and concise description of what you expected to happen.%0A-->%0A%0A%23%23%23 To Reproduce%0A<!--%0ASteps to reproduce the behavior:%0A1. Your code that triggers the issue: at least a part%3B ideally something we can run ourselves.%0A2. Don't forget to attach the required input files!%0A3. How to run your code and %2F or build it, e.g. %60root myMacro.C%60, ...%0A-->%0A%0A%23%23%23 Setup%0A%60%60%60%0AROOT v6.29%2F01%0ABuilt for win32 on Jun 26 2023, 07:55:07%0AFrom heads%2Fmaster@v6-29-01-1740-ga5471d735c%0AWith MSVC 19.29.30146.0%0ABinary directory: C:\Users\bellenot\build\x86\release\bin%0A%60%60%60%0A%0A<!--%0APlease specify also how you obtained ROOT, such as %60dnf install%60 %2F binary download %2F you built it yourself.%0A-->%0A%0A%23%23%23 Additional context%0A<!--%0AAdd any other context about the problem here.%0A-->&"".; root [1]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13106:154,error,error,154,https://root.cern,https://github.com/root-project/root/pull/13106,4,"['down', 'error']","['download', 'error']"
Availability,"Use the same gStipples bitmap bits on Windows than other platforms, and invert (flip) the bits before using them. This should fix the following kind of error:; ```; In file included from C:/build/workspace/root-pullrequests-build/build/include/TGLPadUtils.h:18:; [2020-10-05T07:25:50.968Z] C:/build/workspace/root-pullrequests-build/build/include/RStipples.h(168,7): error G9F8B699F: constant expression evaluates to -171 which cannot be narrowed to type 'unsigned char' [-Wc++11-narrowing] [C:\build\workspace\root-pullrequests-build\build\graf3d\gl\G__RGL.vcxproj]; [2020-10-05T07:25:50.968Z] ~0xaa, ~0xaa, ~0x55, ~0x55, ~0xaa, ~0xaa, ~0x55, ~0x55, ~0xaa, ~0xaa, ~0x55, ~0x55,; [2020-10-05T07:25:50.968Z] ^~~~~; [2020-10-05T07:25:50.968Z] C:/build/workspace/root-pullrequests-build/build/include/RStipples.h:168:7: note: insert an explicit cast to silence this issue; [2020-10-05T07:25:50.968Z] ~0xaa, ~0xaa, ~0x55, ~0x55, ~0xaa, ~0xaa, ~0x55, ~0x55, ~0xaa, ~0xaa, ~0x55, ~0x55,; [2020-10-05T07:25:50.968Z] ^~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6551:152,error,error,152,https://root.cern,https://github.com/root-project/root/pull/6551,2,['error'],['error']
Availability,Use tolerance to compare floating point numbers in testGenVector.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/498:4,toler,tolerance,4,https://root.cern,https://github.com/root-project/root/pull/498,1,['toler'],['tolerance']
Availability,Used in `RCanvas::SaveAs()` method to avoid failure message when image production in ; tutorials macros is not possible. Should fix newly introduced errors in Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13115:44,failure,failure,44,https://root.cern,https://github.com/root-project/root/pull/13115,2,"['error', 'failure']","['errors', 'failure']"
Availability,"Users/runner/miniforge3/conda-bld/root_1607274686894/work=/usr/local/src/conda/root_base-6.22.6 -fdebug-prefix-map=/Users/michael/opt/anaconda3/envs/aslsRun2_ana=/usr/local/src/conda-prefix -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -I$ROOTSYS/include -I""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/etc/"" -I""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/etc//cling"" -I""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/include/"" -I""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/include"" -I""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/include/python3.9"" -D__ACLIC__ ""/Users/michael/Downloads/.wscode.4edcf1dc-72c9-11eb-94e5-a001a8c0beef.ws/RooSDSCBShape_cxx_ACLiC_dict.cxx"" ; x86_64-apple-darwin13.4.0-clang++ -O3 -DNDEBUG ""/Users/michael/Downloads/.wscode.4edcf1dc-72c9-11eb-94e5-a001a8c0beef.ws/RooSDSCBShape_cxx_ACLiC_dict.o"" -dynamiclib -Wl,-headerpad_max_install_names -m64 -single_module -Wl,-dead_strip_dylibs -undefined dynamic_lookup ""-lfakelink"" ""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/lib/libz.1.2.11.dylib"" ""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/lib/liblzma.5.dylib"" ""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/lib/libcrypto.1.1.dylib"" ""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/lib/libsqlite3.0.dylib"" ""/Users/michael/opt/anaconda3/envs/aslsRun2_ana/lib/libssl.1.1.dylib"" ""-lnetwork"" ""-lpcap.A"" ""-ldns_services"" ""-lz.1"" ""-lcoretls_cfhelpers"" ""-lapple_nghttp2"" ""-lenergytrace"" ""-lsqlite3"" ""-lMobileGestalt"" ""-lcoretls"" ""-lxar.1"" ""-lcompression"" ""-larchive.2"" ""-lxml2.2"" ""-llzma.5"" ""-lbz2.1.0"" ""-liconv.2"" ""-lcharset.1"" ""-lCheckFix"" ""-lmecabra"" ""-lmecab"" ""-lgermantok"" ""-lThaiTokenizer"" ""-lChineseTokenizer"" ""-lcmph"" ""-lutil"" ""-lapp_launch_measurement"" ""-lxslt.1"" ""/Users/michael/opt/anac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249#issuecomment-782161773:3529,Down,Downloads,3529,https://root.cern,https://github.com/root-project/root/issues/7249#issuecomment-782161773,1,['Down'],['Downloads']
Availability,"Users/runner/work/zevis/zevis/build/../some/install/dir/bin/zevis -b /Users/runner/work/zevis/zevis/build/../ZCNClient/eventlist_examples/45783_10.txt someout png; OSTYPE=darwin19; Variable ZARCH_TYPE is not set, looking for zevis.exe in the same directory; Warning in <TInterpreter::ReadRootmapFile>: class ZWebInfo found in libZevLib.dylib is already in libZCNClient.dylib ; Warning in <TClassTable::Add>: class ZWebInfo already in TClassTable; Using ZEVISDIR=/Users/runner/work/zevis/zevis/some/install/dir/share/zevis; Using CNDATAPREFIX=/Users/runner/work/zevis/zevis/build/../ZCNClient/eventlist_rootfiles/; Warning: fgets returned 0; Event list prepared, it is OK and contains 1 entries; Opening /Users/runner/work/zevis/zevis/build/../ZCNClient/eventlist_rootfiles/z/ntup/03/v08b/data/root/data_03_45783_45790_01.root; Error in <TStreamerInfo::Build>: TPolyLine3D, discarding: float* fP, illegal [3*fN] Array of 3-D coordinates (x,y,z). Error in <TStreamerInfo::Build>: ZPolygon2D, discarding: float* fP, illegal [3*fN] Points in world coordinates. *** Break *** floating point exception; Opening /Users/runner/work/zevis/zevis/build/../ZCNClient/eventlist_rootfiles/z/ntup/03/v08b/data/root/data_03_45783_45790_01.root; Entry 1: runnr=45783, eventnr=10, inputtree=orange, cnversion=v08b, scan=1 took 0.48 seconds ......... OK; It took 0 seconds, average time per event 0.48; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [<unknown binary>] (no debug info); [/Users/runner/work/zevis/zevis/root/lib/libCore.6.22.02.so] TColor::SetRGB(float, float, float) (no debug info); [/Users/runner/work/zevis/zevis/some/install/dir/lib/libZevLib.dylib] ZStyle::rootColorFromRGB(int, int, int) /Users/runner/work/zevis/zevis/ZevLib/src/ZStyle.cxx:110; [/Users/runner/work/zevis/zevis/some/install/dir/lib/libZevLib.dylib] ZStyleScheme::ZStyleScheme(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/runner/work/zevis/zevis/ZevLib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-694162214:1530,Error,Error,1530,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-694162214,1,['Error'],['Error']
Availability,"Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:848; [/Users/user/Z/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:1431; [/Users/user/Z/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:1485; [/Users/user/XXX/zevis/test/./frame.exe] main /Users/user/XXX/zevis/test/frame.cxx:81; [/usr/lib/system/libdyld.dylib] start (no debug info); ```. ### Expected behavior; No FPE. ### To Reproduce; ```; #include <TApplication.h>; #include <TGClient.h>; #include <TGFrame.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6758:2914,mask,masks,2914,https://root.cern,https://github.com/root-project/root/issues/6758,1,['mask'],['masks']
Availability,"Users\bellenot\git\master\interpreter\llvm\src\include\llvm/Support/Compiler.h(408,11): fatal error C1083:; Cannot open include file: 'sanitizer/asan_interface.h': No such file or directory (compiling source file C:\; Users\bellenot\git\master\interpreter\llvm\src\tools\clang\utils\TableGen\ClangDiagnosticsEmitter.cpp) [C:\Us; ers\bellenot\build\x86\sanitizer\interpreter\llvm\src\tools\clang\utils\TableGen\obj.clang-tblgen.vcxproj]; C:\Users\bellenot\git\master\interpreter\llvm\src\include\llvm/Support/Compiler.h(408,11): fatal error C1083:; Cannot open include file: 'sanitizer/asan_interface.h': No such file or directory (compiling source file C:\; Users\bellenot\git\master\interpreter\llvm\src\tools\clang\utils\TableGen\ClangOpenCLBuiltinEmitter.cpp) [C:\; Users\bellenot\build\x86\sanitizer\interpreter\llvm\src\tools\clang\utils\TableGen\obj.clang-tblgen.vcxproj]; C:\Users\bellenot\git\master\interpreter\llvm\src\include\llvm/Support/Compiler.h(408,11): fatal error C1083:; Cannot open include file: 'sanitizer/asan_interface.h': No such file or directory (compiling source file C:\; Users\bellenot\git\master\interpreter\llvm\src\tools\clang\utils\TableGen\ClangOptionDocEmitter.cpp) [C:\User; s\bellenot\build\x86\sanitizer\interpreter\llvm\src\tools\clang\utils\TableGen\obj.clang-tblgen.vcxproj]; C:\Users\bellenot\git\master\interpreter\llvm\src\include\llvm/Support/Compiler.h(408,11): fatal error C1083:; Cannot open include file: 'sanitizer/asan_interface.h': No such file or directory (compiling source file C:\; Users\bellenot\git\master\interpreter\llvm\src\tools\clang\utils\TableGen\ClangDataCollectorsEmitter.cpp) [C:; \Users\bellenot\build\x86\sanitizer\interpreter\llvm\src\tools\clang\utils\TableGen\obj.clang-tblgen.vcxproj]; C:\Users\bellenot\git\master\interpreter\llvm\src\include\llvm/Support/Compiler.h(408,11): fatal error C1083:; Cannot open include file: 'sanitizer/asan_interface.h': No such file or directory (compiling source file C:\; Users\bellenot\git\m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-1008835389:3230,error,error,3230,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-1008835389,1,['error'],['error']
Availability,Users\sftnight\AppData\Local\Temp\_CL_06de3fb0ex': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_regression.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\gui\guibuilder\src\TRootGuiBuilder.cxx(2598): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_39cb42d8in': No space left on device [C:\build\workspace\root-pullrequests-build\build\gui\guibuilder\GuiBld.vcxproj] ; - C:\build\workspace\root-pullrequests-build\build\include\TAttText.h(49): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_e9d9d5c8sy': No space left on device [C:\build\workspace\root-pullrequests-build\build\gui\guihtml\GuiHtml.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\memory(1816): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_c7706809ex': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_utils.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xmemory0(1101): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_9b60555fex': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\datasource_sqlite.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\streambuf(568): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_7eeb19c2sy': No space left on device [C:\build\workspace\root-pullrequests-build\build\gui\sessionviewer\SessionViewer.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\dataframe_report.cxx(100): fatal error C1088: Cannot flush compiler intermediate file: 'C:\User,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4317#issuecomment-527074091:1203,error,error,1203,https://root.cern,https://github.com/root-project/root/pull/4317#issuecomment-527074091,1,['error'],['error']
Availability,Uses a tolerance based on the bin width when comparing histogram axes . This fixes ROOT-10363,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4632:7,toler,tolerance,7,https://root.cern,https://github.com/root-project/root/pull/4632,1,['toler'],['tolerance']
Availability,Using TFile::Open produces an Error message catch by the jenkins rules declaring the doc failure. These changes test the file existence before using them. A warning (not an Error) is printed if not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10471:30,Error,Error,30,https://root.cern,https://github.com/root-project/root/pull/10471,3,"['Error', 'failure']","['Error', 'failure']"
Availability,"Using `.L` or `__attribute__((constructor))` or static initialization are good alternatives. However that does not improve usability of `.x` .; As mentioned in the first post, entry function still need renaming when file get renamed.; Also we get function redefinition error when `.x` or `.L` two scripts with same name. For example `dir0/test.C` and `dir1/dir2/test.C` (with completely different content) cannot both define their `test(...)` entry functions. They cannot be put into different namespaces either otherwise cling does not recognize them as entry functions. However, `__main__(...)` approach suffers from multiple definitions too. Unless cling unloads/drops symbol `__main__` after executing it (btw. In this case will static variables of `__main__` get destructed too?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11299#issuecomment-1235581331:269,error,error,269,https://root.cern,https://github.com/root-project/root/issues/11299#issuecomment-1235581331,2,['error'],['error']
Availability,"Using `RooMultiVarGaussian` together with `RooStats` objects like `RooStats::ModelConfig` and `RooStats::AsymptoticsCalculator` produces all sorts of errors. Consider the following example code:. ```Python; from ROOT import RooArgList,RooArgSet,RooRealVar,TMatrixDSym,RooMultiVarGaussian,RooFit,RooWorkspace,RooStats,RooExtendPdf; ; allvars = []; ; xvals = RooArgList(); variables = RooArgSet(); muvals = RooArgList(); ; for i in range(0,3):; mu = RooRealVar(""mu_{:d}"".format(i),""mu_{:d}"".format(i),1.,-10,10); muvals.add(mu); x = RooRealVar(""x_{:d}"".format(i),""x_{:d}"".format(i),1.); xvals.add(x); variables.add(x); ; # side problem: unless these two lines are executed, the python garbage collector deletes mu and x; # causing a segfault in the construction of the RooMultiVarGaussian; allvars.append(mu); allvars.append(x); ; covmat = TMatrixDSym(3); covmat[0][0] = 1.; covmat[1][1] = 2.; covmat[2][2] = 3.; covmat[0][1] = 0.2; covmat[1][0] = 0.2; covmat[1][2] = 0.6; covmat[2][1] = 0.6; covmat[2][0] = 0.3; covmat[0][2] = 0.3; ; nevents = 1000.; mvg = RooMultiVarGaussian(""mvg"",""mvg"",xvals,muvals,covmat); allvars.append(mvg); ; ws = RooWorkspace(""ws""); ws.Import(mvg); mc = RooStats.ModelConfig(""model"",""model"",ws); mc.SetObservables(xvals); mc.SetParametersOfInterest(muvals); mc.SetPdf(mvg.GetName()); ; # main problem: AsymptoticCalculator doesn't accept RooMultiVarGaussian; data = RooStats.AsymptoticCalculator.MakeAsimovData(mc,muvals,RooArgSet()); ```; ; Also, wrapping the Multivariate Gaussian in `RooExtendPdf` doesn't help either, as this results in lots of warnings saying `WARNING::Detected a bin with zero expected events- skip it` - probably that warning should only be emitted once.; Also, the resulting asimov dataset has 0 events. norm = RooRealVar(""norm"",""norm"",1000); extmvg = RooExtendPdf(""extPdf"",""extPdf"",mvg,norm); ws.Import(extmvg,RooFit.RecycleConflictNodes()); mc_cnt = RooStats.ModelConfig(""countingModel"",""countingModel"",ws); mc_cnt.SetObservables(xvals); mc_cnt.SetP",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7967:150,error,errors,150,https://root.cern,https://github.com/root-project/root/issues/7967,1,['error'],['errors']
Availability,"Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15587:64,error,errors,64,https://root.cern,https://github.com/root-project/root/pull/15587,1,['error'],['errors']
Availability,"Using template functions in the generated code can cause linker errors,; which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15502:64,error,errors,64,https://root.cern,https://github.com/root-project/root/pull/15502,1,['error'],['errors']
Availability,"Using the file `""http://root.cern.ch/files/h1/dstarmb.root""` and (when `xrootd` in enabled) `""root://eospublic.cern.ch//eos/root-eos/h1/dstarmb.root""` maybe something like:; ```; bool tester(const char *filename) {; auto f = TFile::Open(filename, ""READ_WITHOUT_GLOBALREGISTRATION"");; if (f && ! f->IsZombie() && nullptr == gROOT->GetListOfFiles()->FindObject(filename)) {; delete f;; return true;; } else {; // failure;; return false;; }; }; ```; (possibly separating all 3 failures types).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11321#issuecomment-1238577831:411,failure,failure,411,https://root.cern,https://github.com/root-project/root/pull/11321#issuecomment-1238577831,2,['failure'],"['failure', 'failures']"
Availability,"Using the same filename can cause races when running the tests in; parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```; $ rg test_ntuple_clusters.root; tree/ntuple/v7/test/ntuple_basics.cxx; 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx; 279: FileRaii fileGuard(""test_ntuple_clusters.root"");; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9192:108,failure,failure,108,https://root.cern,https://github.com/root-project/root/pull/9192,1,['failure'],['failure']
Availability,"Using valgrind:; ```; cd /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/tutorials && LD_LIBRARY_PATH=/builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 valgrind --suppressions=/builddir/build/BUILD/root-6.24.00/etc/valgrind-root.supp --track-origins=yes /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ==3856979== Memcheck, a memory error detector; ==3856979== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==3856979== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info; ==3856979== Command: /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ```; [ skipping some lines that seem irrelevant... ]; ```; ==3856979== Conditional jump or move depends on uninitialised value(s); ==3856979== at 0x4AD8468: TROOT::FindObject(char const*) const (TROOT.cxx:1267); ==3856979== by 0x186D05AF: ???; ==3856979== by 0x186D004F: ???; ==3856979== by 0x6A5C80F: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (IncrementalExecutor.cpp:376); ==3856979== by 0x6995A4F: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (Interpreter.cpp:1141); ==3856979== by 0x699F2B3: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (Interpreter.cpp:1391); ==3856979== by 0x699FD73: cling::Interpreter::echo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*) (Interpreter.cpp:1043); ==3856979== by 0x6AF224B: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (MetaSema.cpp:145); ==3856979== by 0x6B02C0F: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (MetaParser.cpp:319); ==3856979== by 0x6B050AF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-845027817:452,error,error,452,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-845027817,1,['error'],['error']
Availability,"V=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 882: Environment variables:; 882: ROOT_HIST=0; 882: Test timeout computed to be: 1500; 882: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 882: error code: -529697949; 882:; 882:; 5/16 Test #882: tutorial-dataframe-df006_ranges-py .......................***Failed 4.42 sec; test 883; Start 883: tutorial-dataframe-df007_snapshot-py. 883: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df007_snapshot.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 883: Environment variables:; 883: ROOT_HIST=0; 883: Test timeout computed to be: 1500; 883: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 883: error code: -529697949; 883:; 883:; 6/16 Test #883: tutorial-dataframe-df007_snapshot-py .....................***Failed 4.47 sec; test 884; Start 884: tutorial-dataframe-df008_createDataSetFromScratch-py. 884: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df008_createDataSetFromScratch.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 884: Environment variables:; 884: ROOT_HIST=0; 884: Test timeout computed to be: 1500; 884: input_line_40:2:211: warning: missing terminating '""' character [-Winvalid-pp-token]; 884: *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:4710,Error,Error,4710,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['Error'],['Error']
Availability,VC-download-Release.cmake && /usr/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VC-prefix/src/VC-stamp/VC-download ; - [2021-10-29T11:02:00.746Z] CMake Error at VC-stamp/VC-download-Release.cmake:49 (message): ; - [2021-10-29T11:02:00.746Z] FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/VDT-prefix/src && /usr/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/VDT-prefix/src/VDT-stamp/VDT-download-Release.cmake && /usr/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VDT-prefix/src/VDT-stamp/VDT-download ; - [2021-10-29T11:02:00.746Z] CMake Error at VDT-stamp/VDT-download-Release.cmake:49 (message): ; - [2021-10-29T11:02:04.031Z] FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src && /usr/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src/VECCORE-stamp/VECCORE-download-Release.cmake && /usr/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src/VECCORE-stamp/VECCORE-download ; - [2021-10-29T11:02:04.031Z] CMake Error at VECCORE-stamp/VECCORE-download-Release.cmake:49 (message): ; - [2021-10-29T11:02:04.031Z] FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src && /usr/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-download-Release.cmake && /usr/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-download ; - [2021-10-29T11:02:04.031Z] CMake Error at TBB-stamp/TBB-download-Release.cmake:49 (message): ; - [2021-10-29T11:02:25.960Z] FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/builtins/davix/DAVIX-prefix/src && /usr/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/builtins/davix/DAVIX-prefix/src/DAVIX-stamp/DAVIX-download-Release.cmake && /usr/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/builtins/davix/DAVIX-prefix/src/DAVIX-stamp/DAVI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-954652370:1493,down,download,1493,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-954652370,1,['down'],['download']
Availability,"VC\14.23.28105\include\memory(1808,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXTargetMachine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2021-04-12T13:13:32.980Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits(1394,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXProxyRegErasure.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2021-04-12T13:13:32.980Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector(193,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXTargetTransformInfo.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2021-04-12T13:13:32.980Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Analysis/LoopInfo.h(871,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXSubtarget.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2021-04-12T13:13:32.980Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple(315,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXReplaceImageHandles.cpp) [C:\build\wor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-817803469:1683,error,error,1683,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-817803469,1,['error'],['error']
Availability,"VC\14.29.30133\include\chrono(306,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCoroutine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(1480,85): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGAtomic.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(1393,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetLoweringBase.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(205,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Analysis\CallGraph.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/ConstantFolder.h(259,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetInstrInfo.cpp) [C:\build\workspace\root-pullreq",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10752#issuecomment-1155253007:3367,error,error,3367,https://root.cern,https://github.com/root-project/root/pull/10752#issuecomment-1155253007,1,['error'],['error']
Availability,"VC\14.32.31326\include\xutility(1272,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXFrameLowering.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2022-07-20T10:12:49.069Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits(725,56): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\TargetLowering.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2022-07-20T10:12:49.069Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(3967,62): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\PlaceSafepoints.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2022-07-20T10:12:49.069Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(143,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Target\NVPTX\NVPTXISelLowering.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Target\NVPTX\LLVMNVPTXCodeGen.vcxproj] ; - [2022-07-20T10:12:49.069Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/RecursiveASTVisitor.h(418,3): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ASTMatchers\ASTMatchF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10896#issuecomment-1190096683:1248,error,error,1248,https://root.cern,https://github.com/root-project/root/pull/10896#issuecomment-1190096683,1,['error'],['error']
Availability,"VC\Tools\MSVC\14.23.28105\include\tuple(42,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\DCE.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2021-06-29T17:43:14.300Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(103,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\TargetLowering.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2021-06-29T17:43:14.300Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono(83,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\StripDeadPrototypes.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] ; - [2021-06-29T17:43:14.300Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(172,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\PredicateInfo.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2021-06-29T17:43:14.300Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(617,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\Inliner.cpp) [C:\build\workspace\root-pullre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8568#issuecomment-870796912:1692,error,error,1692,https://root.cern,https://github.com/root-project/root/pull/8568#issuecomment-870796912,1,['error'],['error']
Availability,"VC\Tools\MSVC\14.29.30133\include\tuple(78,90): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\ASTImporter.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\chrono(306,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCoroutine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(1480,85): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGAtomic.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(1393,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetLoweringBase.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-06-14T14:13:31.709Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(205,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Analysis\CallGraph.cpp) [C:\build\workspace\root-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10752#issuecomment-1155253007:2923,error,error,2923,https://root.cern,https://github.com/root-project/root/pull/10752#issuecomment-1155253007,1,['error'],['error']
Availability,"VC\Tools\MSVC\14.29.30133\include\utility(313,72): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\InstCombine\InstCombineSelect.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\InstCombine\LLVMInstCombine.vcxproj] ; - [2022-03-21T12:01:19.119Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(274,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\CXXInheritance.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-03-21T12:01:19.119Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(1395,47): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\Pass.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2022-03-21T12:01:19.119Z] C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\include\clang/AST/Attrs.inc(7743,127): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\AttrImpl.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-03-21T12:01:19.119Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/Stmt.h(1057,64): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ASTMatchers\ASTMatchersInternal.cpp) [C:\build\workspace\root-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10183#issuecomment-1073816124:3459,error,error,3459,https://root.cern,https://github.com/root-project/root/pull/10183#issuecomment-1073816124,1,['error'],['error']
Availability,"VERSION_INFO; [I] src/XrdVersion.hh successfully generated; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Fstat(int, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:379:27: error: ‘_STAT_VER’ was not declared in this scope; 379 | : Xunix.Fstat64(_STAT_VER, fildes, (struct stat64 *)buf));; | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Lstat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:563:27: error: ‘_STAT_VER’ was not declared in this scope; 563 | ? Xunix.Lstat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Stat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:891:26: error: ‘_STAT_VER’ was not declared in this scope; 891 | ? Xunix.Stat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; make[5]: *** [src/CMakeFiles/XrdPosixPreload.dir/build.make:108: src/CMakeFiles/XrdPosixPreload.dir/XrdPosix/XrdPosix.cc.o] Error 1; make[4]: *** [CMakeFiles/Makefile2:1838: src/CMakeFiles/XrdPosixPreload.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2. I [disabled xrootd](https://root-forum.cern.ch/t/build-problem-with-xrootd-on-root-v6-22-00/40255/7) as was suggested on the forum with. cmake -Dxrootd=OFF -Dbuiltin_xrootd=OFF <source_dir>. ### Expected behavior; `xrootd` should compile or, if it's not needed, be optional (not default). I'm not sure whether I need that. ### To Reproduce; 1. Download and unpack a source .tar.gz, create and cd the build directory.; 2. cmake --build . --target install -- -j15. ### Setup; 1. 6.22.06; 2. Arch Linux.; 3. Source package from site, root_v6.22.06.source.tar.gz . ### Additional context; There exist reports on xrootd, but not connected to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7292:1774,error,error,1774,https://root.cern,https://github.com/root-project/root/issues/7292,1,['error'],['error']
Availability,VSTTree .......................................................***Failed Error regular expression found in output. Regex=[: error:] 0.99 sec ; - [2020-06-10T22:24:16.859Z] 613/2035 Test #359: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ...............................................***Failed Error regular expression found in output. Regex=[: error:] 0.71 sec ; - [2020-06-10T22:24:17.374Z] 615/2035 Test #353: tutorial-dataframe-df005_fillAnyObject ............................................................***Failed Error regular expression found in output. Regex=[: error:] 1.98 sec ; - [2020-06-10T22:24:17.374Z] 616/2035 Test #352: tutorial-dataframe-df004_cutFlowReport ............................................................***Failed Error regular expression found in output. Regex=[: error:] 2.14 sec ; - [2020-06-10T22:24:17.631Z] 618/2035 Test #360: tutorial-dataframe-df013_InspectAnalysis ..........................................................***Failed Error regular expression found in output. Regex=[: error:] 1.14 sec ; - [2020-06-10T22:24:17.631Z] 619/2035 Test #355: tutorial-dataframe-df007_snapshot .................................................................***Failed Error regular expression found in output. Regex=[: error:] 2.16 sec ; - [2020-06-10T22:24:18.146Z] 622/2035 Test #370: tutorial-dataframe-df023_aggregate ................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.75 sec . And 15 more. ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df008_createDataSetFromScratch](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86345/testReport/projectroot/runtutorials/tutorial_dataframe_df008_createDataSetFromScratch/); - [projectroot.runtutorials.tutorial_dataframe_df003_profiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86345/testReport/projectroot/runtutorials/tutorial_dataframe_df003_profile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-642302848:2201,Error,Error,2201,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-642302848,1,['Error'],['Error']
Availability,VSTTree .......................................................***Failed Error regular expression found in output. Regex=[: error:] 1.33 sec ; - [2020-06-10T22:20:28.893Z] 641/1992 Test #334: tutorial-dataframe-df010_trivialDataSource ........................................................***Failed Error regular expression found in output. Regex=[: error:] 1.97 sec ; - [2020-06-10T22:20:31.348Z] 644/1992 Test #338: tutorial-dataframe-df015_LazyDataSource ...........................................................***Failed Error regular expression found in output. Regex=[: error:] 1.89 sec ; - [2020-06-10T22:20:37.348Z] 652/1992 Test #344: tutorial-dataframe-df021_createTGraph .............................................................***Failed Error regular expression found in output. Regex=[: error:] 1.76 sec ; - [2020-06-10T22:20:39.777Z] 656/1992 Test #349: tutorial-dataframe-df027_SQliteDependencyOverVersion ..............................................***Failed Error regular expression found in output. Regex=[: error:] 1.51 sec ; - [2020-06-10T22:20:40.053Z] 657/1992 Test #351: tutorial-dataframe-df029_SQlitePlatformDistribution ...............................................***Failed Error regular expression found in output. Regex=[: error:] 1.16 sec ; - [2020-06-10T22:20:40.981Z] 660/1992 Test #352: tutorial-dataframe-df030_SQliteVersionsOfROOT .....................................................***Failed Error regular expression found in output. Regex=[: error:] 1.30 sec ; - [2020-06-10T22:20:42.149Z] 665/1992 Test #355: tutorial-dataframe-df102_NanoAODDimuonAnalysis ....................................................***Failed Error regular expression found in output. Regex=[: error:] 1.39 sec . And 3 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_friends](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86347/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_da,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-642302168:1926,Error,Error,1926,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-642302168,1,['Error'],['Error']
Availability,VSTTree .......................................................***Failed Error regular expression found in output. Regex=[: error:] 6.50 sec ; - [2020-06-10T22:18:29.731Z] 494/2084 Test #375: tutorial-dataframe-df007_snapshot .................................................................***Failed Error regular expression found in output. Regex=[: error:] 7.59 sec ; - [2020-06-10T22:18:31.406Z] 497/2084 Test #378: tutorial-dataframe-df010_trivialDataSource ........................................................***Failed Error regular expression found in output. Regex=[: error:] 7.68 sec ; - [2020-06-10T22:18:33.817Z] 500/2084 Test #386: tutorial-dataframe-df020_helpers ..................................................................***Failed Error regular expression found in output. Regex=[: error:] 3.30 sec ; - [2020-06-10T22:18:34.603Z] 501/2084 Test #382: tutorial-dataframe-df016_vecOps ...................................................................***Failed Error regular expression found in output. Regex=[: error:] 5.64 sec . And 10 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_regression/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_simple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_simple/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_helpers](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_helpers/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_rdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-642304262:2623,Error,Error,2623,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-642304262,1,['Error'],['Error']
Availability,"Various developments to prepare the `stressRooFit` executable for the; newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a; given test, but will only report the test as FAILED when there were any; errors. Tis is useful during development, allowing the developer to see which; tests pass and fail at one glance without having to endlessly scroll; through the ouput that gets chopped up by the detailed reports on which; comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch; mode. Finally, there is a little change such that all datasets in `stressRooFit` use; the vector datastore, including a bugfix in `RooAbsData` to make; `convertToVectorStore` work correctly even if the `storageType` was; wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9178:155,error,errors,155,https://root.cern,https://github.com/root-project/root/pull/9178,2,['error'],['errors']
Availability,"Vec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<Bool_t>>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x563bdc7d7910), {""Muon_tightId""}, 1, reinterpret_cast<weak_ptr<TH1D>*>(0x563bdc7d77a0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x563bdc7d7a80), reinterpret_cast<ROOT::Internal::RDF::RBookedCustomColumns*>(0x563bdc7d9150));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RVec.hxx:387:19: note: selected 'begin' function with iterator type 'ROOT::VecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:190:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &v : vs) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillHelper::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:4311,error,error,4311,https://root.cern,https://github.com/root-project/root/issues/6675,1,['error'],['error']
Availability,VecOps was renamed to ROOTVecOps at some point. The failure can be seen in https://github.com/root-project/root/pull/2890#issuecomment-434707107 for example,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2893:52,failure,failure,52,https://root.cern,https://github.com/root-project/root/pull/2893,1,['failure'],['failure']
Availability,Vector/LorentzVector.h:533:60: error: invalid use of incomplete type ‘class ROOT::Math::PtEtaPhiE4D&lt;double&gt;’ ; - [2021-08-27T11:16:53.217Z] /data/sftnight/workspace/root-pullrequests-build/root/math/genvector/inc/Math/GenVector/LorentzVector.h:669:21: error: ‘ROOT::Math::LorentzVector&lt;CoordSystem&gt;::fCoordinates’ has incomplete type ; - [2021-08-27T11:16:53.217Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:758:61: error: conversion from ‘LorentzVector&lt;ROOT::Math::PtEtaPhiM4D&lt;double&gt;&gt;’ to non-scalar type ‘LorentzVector&lt;ROOT::Math::PtEtaPhiE4D&lt;double&gt;&gt;’ requested ; - [2021-08-27T11:16:53.217Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:759:63: error: no match for ‘operator/’ (operand types are ‘const PtEtaPhiEVector’ {aka ‘const ROOT::Math::LorentzVector&lt;ROOT::Math::PtEtaPhiE4D&lt;double&gt; &gt;’} and ‘int’) ; - [2021-08-27T11:16:53.477Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:41:25: error: ‘const class ROOT::Math::LorentzVector&lt;ROOT::Math::PtEtaPhiM4D&lt;double&gt; &gt;’ has no member named ‘size’ ; - [2021-08-27T11:16:53.477Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:42:25: error: ‘const class ROOT::Math::LorentzVector&lt;ROOT::Math::PtEtaPhiE4D&lt;double&gt; &gt;’ has no member named ‘size’ ; - [2021-08-27T11:16:53.477Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:45:18: error: no match for ‘operator[]’ (operand types are ‘const ROOT::Math::LorentzVector&lt;ROOT::Math::PtEtaPhiM4D&lt;double&gt; &gt;’ and ‘unsigned int’) ; - [2021-08-27T11:16:53.477Z] /data/sftnight/workspace/root-pullrequests-build/root/math/vecops/test/vecops_rvec.cxx:45:24: error: no match for ‘operator[]’ (operand types are ‘const ROOT::Math::LorentzVector&lt;ROOT::Math::PtEtaPhiE4D&lt;double&gt; &gt;’ and ‘unsigned int’) . And 4 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903#issuecomment-907127781:1896,error,error,1896,https://root.cern,https://github.com/root-project/root/pull/8903#issuecomment-907127781,4,['error'],['error']
Availability,"Version 3.11 of `nlohmann/json` introduced ""versioned, ABI-tagged inline namespace""s, which breaks our forward declaration. Fortunately, we can assume the `json_fwd.hpp` header to be present starting from that same version because the `JSON_MultipleHeaders` option now defaults to `ON` and even if not, `json_fwd.hpp` is installed since patch version 3.11.2. For; earlier versions, both methods work but `json_fwd.hpp` isn't guaranteed to be installed. Still use it if available. Fixes https://github.com/root-project/root/issues/11130",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11205:469,avail,available,469,https://root.cern,https://github.com/root-project/root/pull/11205,1,['avail'],['available']
Availability,Viewer3D.h TVirtualX.h ROOT/RDirectoryEntry.hxx ROOT/RIndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TMacOSXSystem.h TUnixSystem.h /tmp/workspace/src/core/base/inc/LinkDef.h; 1.	<eof> parser at end of file; 2.	/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__algorithm/ranges_unique_copy.h:51:25: serializing 'std::ranges::__unique_copy::__fn::__get_algo_tag'; Subprocess aborted; make[2]: *** [core/G__Core.cxx] Error 1; make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2; ```; @vgvassilev FYI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12629#issuecomment-1499102403:11379,Error,Error,11379,https://root.cern,https://github.com/root-project/root/pull/12629#issuecomment-1499102403,2,['Error'],['Error']
Availability,Visible in test failure gtest_tree_treeplayer_test_treeprocessormt on ARM with 256 cores,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5049:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/5049,1,['failure'],['failure']
Availability,"Visual Studio 2017 doesn't use the registry anymore, so no need to try to find keys. This prevent picking wrong directories in the case there is another version installed on the computer, and prevent also the following errors when starting ROOT:; RegQueryValueEx: returned 2: The system cannot find the file specified.; RegOpenKeyEx: returned 2: The system cannot find the file specified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2678:219,error,errors,219,https://root.cern,https://github.com/root-project/root/pull/2678,1,['error'],['errors']
Availability,Visual Studio error C2026 with dictionaries.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6824:14,error,error,14,https://root.cern,https://github.com/root-project/root/issues/6824,1,['error'],['error']
Availability,"Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xtree(1933,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\Mem2Reg.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-27T11:13:15.619Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility(66,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\LoopExtractor.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] ; - [2022-09-27T11:13:15.619Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\tuple(327,32): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\LCSSA.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-27T11:13:15.619Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\atomic(2140,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\LoopUnroll.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-27T11:13:16.354Z] C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(700,5): error MSB8071: Cannot parse tool output 'C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Endian.h(225,1): fatal error C1060: compiler is out of heap sp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11285#issuecomment-1259354812:2975,error,error,2975,https://root.cern,https://github.com/root-project/root/pull/11285#issuecomment-1259354812,1,['error'],['error']
Availability,W.dir/src/glew.c.o -c /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:622:1: error: unknown type name ‘PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:623:1: error: unknown type name ‘PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:624:1: error: unknown type name ‘PFNGLSPECIALIZESHADERPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:638:1: error: unknown type name ‘PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:639:1: error: unknown type name ‘PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:640:1: error: unknown type name ‘PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:641:1: error: unknown type name ‘PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:698:1: error: unknown type name ‘PFNGLCOPYTEXTURELEVELSAPPLEPROC’ ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:718:1: error: unknown type name ‘PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC’ . And 235 more. ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:8912:18: warning: ‘_glewInit_GL_VERSION_4_6’ declared ‘static’ but never defined [-Wunused-function] ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:8916:18: warning: ‘_glewInit_GL_AMD_framebuffer_sample_positions’ declared ‘static’ but never defined [-Wunused-function] ; - /mnt/build/workspace/root-pullrequests-build/root/builtins/glew/src/glew.c:8931:18: warning: ‘_glewInit_GL_APPLE_copy_textu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-532666389:1301,error,error,1301,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-532666389,1,['error'],['error']
Availability,"Wait, but what about:; ```; root [0] auto A = std::experimental::make_array(1,2,3);; ROOT_prompt_0:1:29: error: no member named 'make_array' in namespace 'std::experimental'; auto A = std::experimental::make_array(1,2,3);; ~~~~~~~~~~~~~~~~~~~^; root [1] . ```; we do have `make_array`? (https://en.cppreference.com/w/cpp/experimental/make_array); Am I missing something here again? @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10924#issuecomment-1177751404:105,error,error,105,https://root.cern,https://github.com/root-project/root/issues/10924#issuecomment-1177751404,1,['error'],['error']
Availability,"Warnings and errors are preexisting, Windows is bogus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11700#issuecomment-1312763462:13,error,errors,13,https://root.cern,https://github.com/root-project/root/pull/11700#issuecomment-1312763462,1,['error'],['errors']
Availability,"Warnings and test failure are not related to this PR, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11393#issuecomment-1254661331:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/11393#issuecomment-1254661331,1,['failure'],['failure']
Availability,"We are getting the same error in a dummy PR: https://github.com/root-project/root/pull/7879#issuecomment-823543930 without any library changes, just the test. Is it possible the windows10/cxx14 machine is in a bad state? Maybe the test uncovered a latent issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7749#issuecomment-823554549:24,error,error,24,https://root.cern,https://github.com/root-project/root/pull/7749#issuecomment-823554549,1,['error'],['error']
Availability,"We assumed that we will always have module file and unconditionally disable; header parsing on demand. However, the major use-case is gradual migration; to modules. In this scenario (tested by root-meta-fwdDecls-fwdDeclarations),; we have a dictionary which has no module file and still relies on the old; behavior. This can realistically happen when users gradually migrate to; modules. For example, we have modules-aware ROOT and untouched third party; code. This patch enables header parsing on demand when we have no module file; available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2721:534,avail,available,534,https://root.cern,https://github.com/root-project/root/pull/2721,1,['avail'],['available']
Availability,We can change the code in the ROOT facade such that `gROOT` is always; retrieved via cppyy. This was done for `gInterpreter` and `gSystem`; already anyway. This is part of the general campaign of avoiding pythonization code in C++.; The experience of the last weeks has clearly shown that this is less robust than having the code on the Python side (see for example the discussion in #15788).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:302,robust,robust,302,https://root.cern,https://github.com/root-project/root/pull/15833,1,['robust'],['robust']
Availability,"We construct a vector of string pairs and pass it through to the; RNTuple::Merge function for merging. This implements a ""legacy bridge""; between hadd/TFileMerger and the new RNTuple library. We adhere to the Merge(TCollection*, TFileMergeInfo*) interface without; using either class in the implementation by carefully casting the; RNTuple information vector and output file string pointers. An example of this technique is shown here, which passes UBSan, ASan,; and strict aliasing checks on gcc 10 and clang 10: https://godbolt.org/z/7ff3e8. For demonstration, the `hadd` output for merging two `ntuple` files looks like: ; ```shell; $ ./bin/hadd -f dir/merged.root ntuple1.root ntuple2.root; hadd Target file: dir/merged.root; hadd compression setting for all output: 1; hadd Source file 1: ntuple1.root; hadd Source file 2: ntuple2.root; hadd Sources and Target have different compression levels; hadd merging will be slower; hadd Target path: dir/merged.root:/; Warning in <TFileMerger::MergeRecursive>: merging RNTuples is experimental. # note: TFileMerger debug output begins ; examining ntuple1.root:/; got key for type ROOT::Experimental::RNTuple with name ntuple; examining ntuple2.root:/; got key for type ROOT::Experimental::RNTuple with name ntuple; got ntuple from file 'ntuple1.root:/' named 'ntuple'; got ntuple from file 'ntuple2.root:/' named 'ntuple'. # note: RNTuple::Merge debug output begins; RNTuple merger output file is dir/merged.root:/; merging ntuple from file 'ntuple1.root:/ named 'ntuple'; merging ntuple from file 'ntuple2.root:/ named 'ntuple'; RNTuple merging is unimplemented. # control is passed back to TFileMerger::MergeRecursive; Error in <TFileMerger::MergeRecursive>: error merging RNTuples; Error in <TFileMerger::Merge>: error during merge of your ROOT files; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6101:1669,Error,Error,1669,https://root.cern,https://github.com/root-project/root/pull/6101,4,"['Error', 'error']","['Error', 'error']"
Availability,"We currently don't support numba 0.60.0 yet:; https://github.com/root-project/root/blob/master/requirements.txt#L17. One can see the problem when going into `roottest/python/numba` and running the test there:; ```bash; python PyROOT_numbatests.py; ```. Output with ROOT master and numba 0.59, where it's only a warning:; ```txt; PyROOT_numbatests.py::TestClasNumba::test03_inheritance; /home/rembserj/spaces/master/root/src/root/roottest/python/numba/PyROOT_numbatests.py:107: NumbaPendingDeprecationWarning: Code using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors; Exception origin:; File ""/home/rembserj/spaces/master/install/lib/root/cppyy/numba_ext.py"", line 349, in generic_resolve; f = typ._scope.__dict__[attr]; ~~~~~~~~~~~~~~~~~~~^^^^^^. return obj.get_one(). -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; ```. Supporting numba 0.60.0 would be nice, because 0.59.0 doesn't support NumPy 2 yet. Thus, our current environment falls back to NumPy 1 and we are lacking NumPy 2 test support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16201:571,error,error-capturing,571,https://root.cern,https://github.com/root-project/root/issues/16201,2,['error'],"['error-capturing', 'errors']"
Availability,"We currently fail to create a module for RootFit with the following error; message when merging a union in signal.h:; ```; In file included from input_line_12:67:; In file included from /build/jenkins/workspace/root-nightly-runtime-cxxmodules/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/RooErrorHandler.h:20:; In file included from /usr/include/signal.h:394:; /usr/include/bits/pthreadtypes.h:130:3: error: typedef redefinition with different types ('union pthread_cond_t' vs 'union pthread_cond_t'); } pthread_cond_t;; ^; /usr/include/sys/types.h:271:11: note: '/usr/include/bits/pthreadtypes.h' included multiple times, additional include site in header from module 'Hist.Foption.h'; ^; /build/jenkins/workspace/root-nightly-runtime-cxxmodules/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/module.modulemap:820:10: note: Hist.Foption.h defined here; module ""Foption.h"" { header ""Foption.h"" export * }; ^; /usr/include/signal.h:394:11: note: '/usr/include/bits/pthreadtypes.h' included multiple times, additional include site in header from module 'RooFitCore.RooErrorHandler.h'; ^; /build/jenkins/workspace/root-nightly-runtime-cxxmodules/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/include/module.modulemap:2449:10: note: RooFitCore.RooErrorHandler.h defined here; module ""RooErrorHandler.h"" { header ""RooErrorHandler.h"" export * }; ^; Error: /build/jenkins/workspace/root-nightly-runtime-cxxmodules/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/bin/rootcling: compilation failure (/build/jenkins/workspace/root-nightly-runtime-cxxmodules/BUILDTYPE/Debug/COMPILER/gcc62/LABEL/slc6/build/lib/libRooFitCorecbd7d3c40e_dictUmbrella.h); make[2]: *** [roofit/roofitcore/G__RooFitCore.cxx] Error 1; ```. This patch adds the header to the modulemap which prevents us from; trying to merge this struct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1020:68,error,error,68,https://root.cern,https://github.com/root-project/root/pull/1020,5,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"We currently get the error below from stdlib.h as we have problems merging; these special declarations with GCC annotations. We can't add stdlib.h to; the normal libc module as this would cause a dependency cycle between the; builtin modules of clang and libc, but having this as a standalone module; seems to work for me. ```; In file included from input_line_12:18:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:; In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:; /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous; extern lldiv_t lldiv (long long int __numer,; ^; /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'; } lldiv_t;; ^; /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'; } lldiv_t;; ^; In file included from input_line_12:18:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:; In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:; In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:; /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded; extern lldiv_t lldiv (lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1231:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/1231,1,['error'],['error']
Availability,"We currently have an issue on Windows, the master doesn't build due to our changes in `not_fn`. Could you clone roottest to verify that this fixes it? The error is:; ```; ""C:\build\night\LABEL\windows10\SPEC\default\build\ALL_BUILD.vcxproj"" (default target) (1) ->; ""C:\build\night\LABEL\windows10\SPEC\default\build\core\foundation\test\testNotFn.vcxproj"" (default target) (527) ->; (ClCompile target) -> ; C:\build\night\LABEL\windows10\SPEC\default\root\core\foundation\test\testNotFn.cxx(16): error C2039: 'not_fn': is not a member of 'std' ; ```; I don't know why this started to fail. Insights welcome!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3432#issuecomment-463941515:155,error,error,155,https://root.cern,https://github.com/root-project/root/pull/3432#issuecomment-463941515,2,['error'],['error']
Availability,"We currently have two ODR errors when using modules. One is when; using setjmp, the other is coming from TException. This patch; makes TException non-textual and moves it to the config module; to prevent cyclic dependencies. We also add setjmp to the; modulemap to fix the ODR errors on the setjmp struct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/876:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/876,2,['error'],['errors']
Availability,"We deferred the evaluation of dependent immediate invocations in https://reviews.llvm.org/D119375 until instantiation. We should also not consider them referenced from a non-consteval context. Fixes: https://github.com/llvm/llvm-project/issues/55601. ```; template<typename T>; class Bar {; consteval static T x() { return 5; }; public:; Bar() : a(x()) {}. private:; int a;; };. Bar<int> g();; ```; Is now accepted by clang. Previously it errored with: `cannot take address of consteval function 'x' outside of an immediate invocation Bar() : a(x()) {}`. Differential Revision: https://reviews.llvm.org/D132031. ---. Fixes https://github.com/root-project/root/issues/13698, a problem with the new C++ headers from the new macOS SDK.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13700:439,error,errored,439,https://root.cern,https://github.com/root-project/root/pull/13700,1,['error'],['errored']
Availability,"We did not see the problem with a local file because the TTreeCache usage is different. CMSSW take note of whether prefetching (asynchronous reads) is available for a while or not. In the setup CMSSW has, the prefetching (asynchronous reads) is available for the local file but not for the network/remote file. In addition when prefetching (asynchronous reads) is not available, CMSSW uses multiple TTreeCache for a given TTree while it uses only one when prefetching (asynchronous reads) is available. This results in the pattern of filling to be different between the 2 cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8048#issuecomment-829528569:151,avail,available,151,https://root.cern,https://github.com/root-project/root/issues/8048#issuecomment-829528569,4,['avail'],['available']
Availability,We disabled that test in https://github.com/root-project/root/pull/14281. Relevant test failure output:; ```; ROOT::TestSupport::ForbidDiagnostics::handler(): Diagnostic in 'TUnixSystem::ACLiC':; creating shared library /github/home/ROOT-CI/build/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121:88,failure,failure,88,https://root.cern,https://github.com/root-project/root/issues/14121,3,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"We do not support it at the moment, so better to raise an explicit error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12256:67,error,error,67,https://root.cern,https://github.com/root-project/root/pull/12256,1,['error'],['error']
Availability,We don't need any input_line declration from rootmap for startup time. However it may cause a failure on tests when they have custom dictionaries.; ; Should give 5MB improvements for modules.; ; Patch by Yuka Takahashi and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3043:94,failure,failure,94,https://root.cern,https://github.com/root-project/root/pull/3043,1,['failure'],['failure']
Availability,"We don't need any input_line declration from rootmap for startup time.; However it may cause a failure on tests when they have custom; dictionaries. Gives 5MB impr for modules, but still Testing!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2892:95,failure,failure,95,https://root.cern,https://github.com/root-project/root/pull/2892,1,['failure'],['failure']
Availability,"We don't need it, and with the upgrade to LLVM 16 the NVPTX target (correctly) errors that there is no (direct) JIT execution support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13482:79,error,errors,79,https://root.cern,https://github.com/root-project/root/pull/13482,1,['error'],['errors']
Availability,"We don't need the include of `tbb_config.h` at all, the other headers will pull the configuration in as needed and from where it is available",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8239#issuecomment-849407792:132,avail,available,132,https://root.cern,https://github.com/root-project/root/pull/8239#issuecomment-849407792,1,['avail'],['available']
Availability,"We don't want to change the spelling of the std types. The implementation can be in whatever namespace as long as it's different from the stdlib namespace (to cause linker errors if `std::foo` is passed to a ROOT-backport `std::foo`). I suppose that's still the case here, so: all good!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1257528989:172,error,errors,172,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1257528989,1,['error'],['errors']
Availability,We get:; ```; 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):; 10:31:27 list does not recognize sub-command JOIN; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2991#issuecomment-439337076:29,Error,Error,29,https://root.cern,https://github.com/root-project/root/pull/2991#issuecomment-439337076,1,['Error'],['Error']
Availability,"We had test failures in runtime nightlies such as this one:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/95/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/junit/projectroot.roottest.root.math/smatrix/roottest_root_math_smatrix_testKalman/. Failures were due to what @pcanal commented in #2135, that some so files in; roottest doesn't have external linkage. (It means that if you call; dlopen(libfoo.so), linux kernel can't find dependency libraries and it; emits ""undefined symbol"" error when they try to initialize global; variables in libfoo.so but couldn't find symbol definition); With pch, rootmap files were providing information about the depending library. However we stopped generating rootmap files in #2127 and that's why we; got these failures. To fix this issue, I implemented a callback to; TCling which gets called when DynamicLibraryManager fails with; ""undefined error"". I'm open to suggestion especially in DynamicLibraryManager.cpp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2154:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/2154,5,"['Failure', 'error', 'failure']","['Failures', 'error', 'failures']"
Availability,"We had test failures in runtime nightlies such as this one:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/95/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/junit/projectroot.roottest.root.math/smatrix/roottest_root_math_smatrix_testKalman/; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/lastCompletedBuild/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/. Failures were due to what @pcanal commented in #2135, that some so files in; roottest doesn't have external linkage. (It means that if you call; dlopen(libfoo.so), linux kernel can't find dependency libraries and it; emits ""undefined symbol"" error when they try to initialize global; variables in libfoo.so but couldn't find symbol definition); With pch, rootmap files were providing information about the depending library. However we stopped generating rootmap files in #2127 and that's why we; got these failures. To fix this issue, I implemented a callback to; TCling which gets called when DynamicLibraryManager fails with; ""undefined error"". I'm open to suggestion especially in DynamicLibraryManager.cpp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2148:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/2148,5,"['Failure', 'error', 'failure']","['Failures', 'error', 'failures']"
Availability,"We have a `fail-on-missing` option. When that's enabled, it should fail if missing. We can enable it with `all=ON`, though. I think that now that several people made changes to the options, it's out of sync again with the available options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5105#issuecomment-596629217:222,avail,available,222,https://root.cern,https://github.com/root-project/root/pull/5105#issuecomment-596629217,1,['avail'],['available']
Availability,"We have failures in our nightly builds for some MacOS builds, for example [here](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-22-00-patches/LABEL=mac1015,SPEC=noimt,V=6-22/lastCompletedBuild/testReport/) (v6.22, mac10.15). The issue seems to be caused by multiple python versions installed (e.g. system python3 and python3 coming with Xcode 12): it seems that ROOT picks up different versions at different times causing stacktraces that look like this:. ```; Processing /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/root/tutorials/tmva/TMVA_CNN_Classification.C...; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12PyMethodBase12PyInitializeEv' unresolved while linking [cling interface function]!; You are probably missing the definition of TMVA::PyMethodBase::PyInitialize(); Maybe you need to load the corresponding shared library?; CMake Error at /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/RootTestDriver.cmake:237 (message):",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6563:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/issues/6563,1,['failure'],['failures']
Availability,"We have moved to ROOT 6.30 for our latest production release. So this is not an issue any more for latest CMSSW releases.; For CMSSW release cycle e.g. for following release cycles which use root 6.26 we still have 25 relvals failing with error [a]; - 13.3.X https://cmssdt.cern.ch/SDT/html/cmssdt-ib/#/ib/CMSSW_13_3_X (based on root commit 9583d15fbe80462d1ed555b6664aa679e4633216); - 13.2.X https://cmssdt.cern.ch/SDT/html/cmssdt-ib/#/ib/CMSSW_13_2_X (based on root commit 65c222e5118e03035be81a458ac97ce868b82478). Although CMSSW_13_0_X, CMSSW_13_1_X also are based on root 6.26 patches branches but we do not get such failures for these releases. The root differences between 13.1.X and 13.2.X are https://github.com/root-project/root/compare/38994b6a72...a25c523160 . [a] https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/raw/el8_ppc64le_gcc11/CMSSW_13_2_X_2024-02-11-2300/pyRelValMatrixLogs/run/20034.0_TTbar_14TeV+2026D86/step2_TTbar_14TeV+2026D86.log; ```; #15 0x000010080ba32c48 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/cms-ib.cern.ch/sw/ppc64le/week0/el8_ppc64le_gcc11/cms/cmssw/CMSSW_13_2_X_2024-02-11-2300/external/el8_ppc64le_gcc11/lib/libCling.so; #16 0x000010080b998394 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/cms-ib.cern.ch/sw/ppc64le/week0/el8_ppc64le_gcc11/cms/cmssw/CMSSW_13_2_X_2024-02-11-2300/external/el8_ppc64le_gcc11/lib/libCling.so; #17 0x000010080ba4a354 in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/cms-ib.cern.ch/sw/ppc64le/week0/el8_ppc64le_gcc11/cms/cmssw/CMSSW_13_2_X_2024-02-11-2300/external/el8_ppc64le_gcc11/lib/libCling.so; #18 0x000010080ba4bb50 in cling::IncrementalParser::Compile(llvm::StringRef, cling::Compilati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940677735:239,error,error,239,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940677735,2,"['error', 'failure']","['error', 'failures']"
Availability,We hosted the first version of the samples on our own public EOS space but the data is now also available from the CERN Open Data portal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6109:96,avail,available,96,https://root.cern,https://github.com/root-project/root/pull/6109,1,['avail'],['available']
Availability,We implement a workaround for ctest. ROOT_ADD_TEST cmake macro adds a test executable by invoking CMAKE_COMMAND -DCMD=... This breaks our FindLibraryName function which depends on dladdr and the cmake executable confuses it. This branch is not taken outside of ctest where the code just works. This was broken before but worked because we scanned all possible dynamic paths for rdict files which is redundant.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:399,redundant,redundant,399,https://root.cern,https://github.com/root-project/root/pull/3747,1,['redundant'],['redundant']
Availability,"We just tried to replicate this on Summit today using the same toolchain as before, using both the latest and an older version of Celeritas, and we weren't able to replicate the error... so I guess this can be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1170926197:178,error,error,178,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1170926197,1,['error'],['error']
Availability,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:425,failure,failure,425,https://root.cern,https://github.com/root-project/root/pull/3896,1,['failure'],['failure']
Availability,"We need changes because of a new format for compression settings.; We can see failure on Windows. Test 2 : Check size & compression factor of a Root file........ FAILED; last =10034, comp=2.193206",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2938:78,failure,failure,78,https://root.cern,https://github.com/root-project/root/pull/2938,1,['failure'],['failure']
Availability,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4467#issuecomment-538276379:28,error,errors,28,https://root.cern,https://github.com/root-project/root/pull/4467#issuecomment-538276379,1,['error'],['errors']
Availability,We need to add a new category of initialized tensors in RModel that are not written in the weight file. These are for example tensors defining the shape and use as input to some operator such as Reshape. Its data are used when parsing and hard-coded then in the model. There is no need to generate or getting t heir value when using the model for inference. This Pull request should fix a failure reported in master after merging the PR on constant operator ( #15837 ),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15940:389,failure,failure,389,https://root.cern,https://github.com/root-project/root/pull/15940,1,['failure'],['failure']
Availability,"We need to be able to build release binaries. This is likely somehow connected also to the new CI :-) @smuzaffar I'd be interested to hear your thoughts on this... Maybe we can address this (and still enable https://github.com/root-project/root/issues/12270) by the following sequence for the regular CI:. 1. build ROOT; 2. build the (tar.gz|rpm|deb|...) package; 4. delete build and source dir; 5. unpack the tar.gz package; 6. run roottest; 7. if release: make package available on root.cern. Installing a `.pkg` file on macOS, or an install package on Windows will be very intrusive, so maybe there we can only do steps 5 and 6 using a tar.gz / zip, but that's already better than what we have today. The goal should be to ""test what we release"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12272:471,avail,available,471,https://root.cern,https://github.com/root-project/root/issues/12272,1,['avail'],['available']
Availability,We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4876:70,error,error,70,https://root.cern,https://github.com/root-project/root/pull/4876,2,"['Error', 'error']","['Error', 'error']"
Availability,We need to move LLVM in ROOT to use the new behavior of policy CMP0051; as it will be removed soon and the warning below will become an error:. CMake Deprecation Warning at interpreter/llvm/src/CMakeLists.txt:15 (cmake_policy):; The OLD behavior for policy CMP0051 will be removed from a future version; of CMake. The cmake-policies(7) manual explains that the OLD behaviors of all; policies are deprecated and that a policy should be set to OLD only under; specific short-term circumstances. Projects should be ported to the NEW; behavior and not rely on setting a policy to OLD.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2342:136,error,error,136,https://root.cern,https://github.com/root-project/root/pull/2342,1,['error'],['error']
Availability,"We need to stop relying on such hacks to deduce the types, because it will never work. If in the next version ICC decides to change the format of PRETTY_FUNCTION again, our code will become broken again. We need to use `typeid(T).name()` and then find a way to consistently demangle the name it returns, instead of trying to parse error messages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347652046:331,error,error,331,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347652046,1,['error'],['error']
Availability,We often parse the output of commands to get certain system; information. This however fails as soon as the system locale changes; which results in cryptic errors where certain variables have the; wrong content on an otherwise perfectly fine working system. This patch sets LANG=C from CMake to force all subprocesses that; we run to use the stable C locale that should prevent all those; errors in the future.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/780:156,error,errors,156,https://root.cern,https://github.com/root-project/root/pull/780,2,['error'],['errors']
Availability,"We removed the pytest shipped with roottest because the source code was from 2014 and incompatible with py3.9 (see #6597). However, this poses now the issue on MacOs with python2 that we have to install pytest. Without a virtual environment, MacOS does not allow to pip packages. Since roottest fails on configuration level without pytest, roottest is currently broken in this configuration. @axel @oshadura What should we do? Our CI always runs roottest against python3, so we currently don't see the issue in our infrastructure. I see three options:; 1. Ditch testing of python2 on MacOS and rely on the test coverage of other platforms (python2 is anyway dead); 2. Use a venv overlay in Jenkins for the MacOS nodes (haven't tested but it should work and is binary compatible with the system python); 3. We change the hard failure of roottest to a soft failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6686:825,failure,failure,825,https://root.cern,https://github.com/root-project/root/issues/6686,2,['failure'],['failure']
Availability,"We saw builtin-xrootd as an internal library, not exposed to the users, and as ROOT doesn't need the Python bindings we have disabled them. I'd still prefer that if you need something from xrootd that ROOT doesn't use / need that you built xrootd yourself, and make that build available to ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9967#issuecomment-1055299855:277,avail,available,277,https://root.cern,https://github.com/root-project/root/issues/9967#issuecomment-1055299855,1,['avail'],['available']
Availability,"We see more or less the same thing in dev4 now: ; Ironically the ""opt"" build gives more of an error message than the debug build; opt: https://lcgapp-services.cern.ch/cdash/testDetails.php?test=24134444&build=315763; dbg: https://lcgapp-services.cern.ch/cdash/testDetails.php?test=24138113&build=315805",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2003453893:94,error,error,94,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2003453893,1,['error'],['error']
Availability,We shall be able to fix the usage in regular I/O and TTree (which is also broken) when using dictionary. The proper support in bare ROOT might be harder (the underlying size information is a bit harder to find and in some case might not be (yet?) available (top level vector of enums)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2332571646:247,avail,available,247,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2332571646,1,['avail'],['available']
Availability,"We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675:112,down,down,112,https://root.cern,https://github.com/root-project/root/pull/4675,2,['down'],['down']
Availability,We should get this merged - seems like an improvement already (despite the Fedora failure).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12295#issuecomment-1476581247:82,failure,failure,82,https://root.cern,https://github.com/root-project/root/pull/12295#issuecomment-1476581247,1,['failure'],['failure']
Availability,"We should probably be extra explicit and provide an empty `__all__` list attribute in our `__init__.py`. In principle, we could also raise an exception every time a user tries `from ROOT import *` (beware that we have this in our own test suite, so we *will* see errors)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1926899762:263,error,errors,263,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1926899762,1,['error'],['errors']
Availability,"We should put the Python version check at the right place. Right now, the configuration logs tell you that ROOT requires Python; 3.0, because there is no minimum version yet, which can be misleading. Also, remove some redundant comments about the minimum C++ standard for `root7` and `webgui`. This PR should maybe be backported in one of the bulk backports, so the divergence between 6.32 and `master` doesn't increase too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15168:218,redundant,redundant,218,https://root.cern,https://github.com/root-project/root/pull/15168,1,['redundant'],['redundant']
Availability,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13621#issuecomment-1711534158:30,failure,failures,30,https://root.cern,https://github.com/root-project/root/pull/13621#issuecomment-1711534158,1,['failure'],['failures']
Availability,"We uncovered this bug from the changes in fail-on-missing behavior. The test uses only Vc, and uses it directly:. ```; root/test/testGenVectorVc.cxx:67:30: error: ‘Vc’ was not declared in this scope; typedef std::vector<Data, Vc::Allocator<Data>> Vector;; ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1988:156,error,error,156,https://root.cern,https://github.com/root-project/root/pull/1988,1,['error'],['error']
Availability,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15151#issuecomment-2278395982:179,fault,fault,179,https://root.cern,https://github.com/root-project/root/pull/15151#issuecomment-2278395982,1,['fault'],['fault']
Availability,"We will investigate and reproduce the error. I can still install Python 3.8 from the Arch User Repository, fortunately :). It's true that Python 3.8 is the oldest version that we still support. That was defined last year, because Python 3.8 was the oldest version that was not EOL yet. However, 3.8 will be end-of-life next month: https://devguide.python.org/versions/. So maybe something to ask @vepadulano: did you intend to follow the precedent of 6.32 and only support Python versions that are not EOL by the release of 6.34?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2370740723:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2370740723,1,['error'],['error']
Availability,"We will probably see an increasing amount of these failures with; C++ modules as we now deserialize all declarations instead of just; the PCH ones. To safe us a lot of debugging time on where to push; the needed transaction, let's directly print the stack trace here; in the rare case that we crash here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:51,failure,failures,51,https://root.cern,https://github.com/root-project/root/pull/921,1,['failure'],['failures']
Availability,"We would like to have an option to reparametrise shape-factors, i.e. the per-bin normalisation factors in HistFactory. This would be useful for template fits where different histograms represent different values of some parameter, e.g. mass. Currently, it seems that only NormFactors can be reparametrised and the code crashes with a seg fault when trying to reparametrise the shape factors. See the example attached. [shapeFactorCrash.zip](https://github.com/root-project/root/files/10581134/shapeFactorCrash.zip). ### Describe the solution you'd like; We would like to be able to use HistFactory::Measurement::AddPreprocessFunction for shapefactors. ### Describe alternatives you've considered; There is a workaround by doing this reparametrisation manually, but it cumbersome and errorprone. ### Additional context; Note that even if this is not supported, the code should probably not crash with a seg fault (tested with ROOT Version: 6.27/01)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12225:338,fault,fault,338,https://root.cern,https://github.com/root-project/root/issues/12225,3,"['error', 'fault']","['errorprone', 'fault']"
Availability,WebGui - do not produce error output when chrome not installed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4880:24,error,error,24,https://root.cern,https://github.com/root-project/root/pull/4880,1,['error'],['error']
Availability,"Webgraphics: canvas displayed, but many error printed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15340:40,error,error,40,https://root.cern,https://github.com/root-project/root/issues/15340,1,['error'],['error']
Availability,Weird Jenkins pipeline failure again :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2904#issuecomment-435363512:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/2904#issuecomment-435363512,1,['failure'],['failure']
Availability,"Weird coincidence that the only test failure is in a test that uses TBufferMerger, but it should be completely unrelated to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7550#issuecomment-800980312:37,failure,failure,37,https://root.cern,https://github.com/root-project/root/pull/7550#issuecomment-800980312,1,['failure'],['failure']
Availability,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation.; I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3063#issuecomment-442871884:6,error,errors,6,https://root.cern,https://github.com/root-project/root/pull/3063#issuecomment-442871884,1,['error'],['errors']
Availability,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment?. I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1836136993:187,failure,failure,187,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1836136993,1,['failure'],['failure']
Availability,"Well I believe you've found a bug, my bad! And thanks for reporting!; Indeed the expected behaviour is that the option should *quietly* turn OFF itself if pyspark can't be found or one of its dependencies (like Java) are not present. At least, this is the expected behaviour when `fail-on-missing` is not enabled, like in your case (it must be explicitly enabled with `-Dfail-on-missing=ON`). The error you see should happen only when `fail-on-missing` is ON. . I'll upload a PR very soon and you can tell me if that fixes the error you see :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7406#issuecomment-793570847:397,error,error,397,https://root.cern,https://github.com/root-project/root/pull/7406#issuecomment-793570847,2,['error'],['error']
Availability,"Well looking at the debug logs, all failed jobs die after ""kXR_protocol"" and before "" and before ""Sending out kXR_login request"". I haven't been able to download logs from too many successful jobs. But I have three - two reading from RAL and one reading in LAPP. I give a link to the log files and the last DEBUG line of the failed jobs and the same line plus the next for the successful jobs. So perhaps a question of what is happening in the code between these two points?. see you, RD. Successful RAL:. https://bigpanda.cern.ch//media/filebrowser/667e8363-d9bb-4ebd-800f-79d3495d1b3a/panda/tarball_PandaJob_4925629005_RAL/payload.stdout. [2020-12-18 14:20:13.919081 +0000][Debug ][XRootDTransport ] [xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server [], protocol version 400); [2020-12-18 14:20:13.919352 +0000][Debug ][XRootDTransport ] [xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request, username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&xrd.info=&xrd.hostname=tatls002-2010227.0-lcg2237.gridpp.rl.ac.uk&xrd.rn=v4.10.0, dual-stack: false, private IPv4: true, private IPv6: false. Successful UK WATERLOO:. https://bigpanda.cern.ch//media/filebrowser/772fff72-3e22-499f-8a3f-aa8956ea5636/panda/tarball_PandaJob_4926186410_RAL/payload.stdout. [2020-12-19 00:45:02.375203 +0000][Debug ][XRootDTransport ] [xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server [], protocol version 400); [2020-12-19 00:45:02.375430 +0000][Debug ][XRootDTransport ] [xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request, username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&xrd.info=&xrd.hostname=tatls002-2013477.0-lcg2259.gridpp.rl.ac.uk&xrd.rn=v4.10.0, dual-stack: false, private IPv4: true, private IPv6: false. Successful IN2P3 LAPP_LAKE. https://bigpanda.cern.ch//media/filebrowser/f9695015-c110-4e2e-9c62-d56eade824f8/panda/tarball_PandaJob_4926136184_IN2P3-LAPP_LAKE/payload.stdout. [2020-12-19 02:08:57.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758062082:153,down,download,153,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758062082,3,"['down', 'echo']","['download', 'echo']"
Availability,Well one more merging error to go it seems... let's wait with merging until Jenkins is back from the dead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1091#issuecomment-333485284:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/1091#issuecomment-333485284,1,['error'],['error']
Availability,"Well, I can shed some light on how the Xrootd client works (as I'm taking care of that part of xrootd):. - `succesful parsing of kXR_protol` comes from https://github.com/xrootd/xrootd/blob/93871f8241e478a308c8e722fd99aeaa08ff6459/src/XrdCl/XrdClXRootDTransport.cc#L1546-L1552, it means we successfully parsed the server response to `kXR_protocol` and this is the end of `ProcessProtocolResp` routine; - the next step is to generate the initial `kXR_login` request; https://github.com/xrootd/xrootd/blob/stable-4.12.x/src/XrdCl/XrdClXRootDTransport.cc#L441-L454; - if there is a problem in the xrootd client it will be in the `GenerateLogIn` method as by the end of that one the `Sending out kXR_login request ...` log line is printed: https://github.com/xrootd/xrootd/blob/stable-4.12.x/src/XrdCl/XrdClXRootDTransport.cc#L1711-L1716. That said, there's really not much happening in `GenerateLogIn` but I will inspect the code carefully once again ... Do we have the machine name that was hosting the job at CERN?. P. S. Just in case I will ping Andy so he can have a look at, maybe he will come up with some good explanation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758205094:1041,ping,ping,1041,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758205094,1,['ping'],['ping']
Availability,"Well, I wouldn't say I have identified solutions, I was hoping you would judge that, which is why I first opened an issue to discuss it. Anyway, [here](https://github.com/root-project/root/pull/9260) is a pull request draft which comprises all the changes mentioned here. I was able to apply this patch to the current stable release and successfully build it against glibc. With musl there are still some other errors to be solved - I will try to address these later when I have the time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963518448:411,error,errors,411,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963518448,1,['error'],['errors']
Availability,"Well, `dataframe_simple` has a problem: `RLoopManager::Run` prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to std::terminate. It would be enough to add a generic `ROOT_EXPECT_STDERR` to the other macros to make these kind of printouts easily checkable. @hageboeck @vgvassilev @reikdas what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-641453675:103,Error,Error,103,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-641453675,2,['Error'],['Error']
Availability,"Well, actually it was less work than I thought.; I implemented now all the additions, changes and suggestions from @lmoneta. I used now std::vector everywhere it's features are useful. For the rest I stayed with using arrays to stay similar to all other TGraph objects. I moved the functions GetPointX, GetPointY, SetPointX, SetPointY and GetObjectInfo to the TGraph class because they apply to any TGraph object and only were in my custom class cause I could not implement them in TGraph without using a custom Root installation. I replaced the funtion SetNErrorDimensions by the functions AddYError and DeleteYError as proposed by @lmoneta. Since I think the meaning of ""dimension"" might not be 100% clear, I exchanged it to a term claryfing that it corresponds to different y errors. Besides that I implemented some further features and fixed a memory leak in the function PaintGraphMultiErrors in the TGraphPainter class. I also added a test macro testing the most critical features like streaming the class, adding / deleting points and y errors and the summation of y errors for fitting with different methods.; Furthermore, I added a small tutorial macro that shows how to use the basic functionalities of the class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-559211358:779,error,errors,779,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-559211358,6,['error'],['errors']
Availability,"Well, including headers in extern ""C"" is considered as a bad practice. Such inclusion becomes a warning/error for modules builds. I'd rather reduce such cases (esp when they are no op) than keep piling them up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1570#issuecomment-361864049:104,error,error,104,https://root.cern,https://github.com/root-project/root/pull/1570#issuecomment-361864049,1,['error'],['error']
Availability,"Well, now I uninstalled it as Axel requested it. You will not see these errors on the PR anymore, but roottest is still broken if ROOT is installed. It needs to use the ROOT being tested, not the installed one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502815892:72,error,errors,72,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502815892,1,['error'],['errors']
Availability,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-747328346:320,failure,failures,320,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346,2,['failure'],['failures']
Availability,"Well, the failures are not related to the PR itself as it seems. Let's try later when the problems are fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4128#issuecomment-515973075:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/4128#issuecomment-515973075,1,['failure'],['failures']
Availability,"Well, we have other PRs tagged [WIP] ... so I guess that's fine.. I just do no like the idea of having clearly faulty code in a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704322903:111,fault,faulty,111,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704322903,2,['fault'],['faulty']
Availability,"Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below.; ```; Cloning into 'roottest'...; fatal: Remote branch master-13449 not found in upstream origin; CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?); ```. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13504:272,error,error,272,https://root.cern,https://github.com/root-project/root/pull/13504,2,"['Error', 'error']","['Error', 'error']"
Availability,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13606#issuecomment-2105974857:74,error,error,74,https://root.cern,https://github.com/root-project/root/pull/13606#issuecomment-2105974857,1,['error'],['error']
Availability,"What I can try is to remove ; ```; #ifdef WIN32; #include ""Windows4Root.h""; #endif; ```; Maybe this code is redundant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585678811:108,redundant,redundant,108,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585678811,1,['redundant'],['redundant']
Availability,What about Travis CI failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3043#issuecomment-489625973:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/pull/3043#issuecomment-489625973,1,['failure'],['failure']
Availability,"What about first deprecating it?. ```cpp; [[deprecated(""don't use, passed object gets ignored"")]] TList(TObject *) : fAscending(kTRUE) {}; ```. `explicit` will give a compile error. And really, if you're faced with a compile error, you'd better do the right thing: Use the normal default ctor. So let's first deprecate it and then remove it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15451#issuecomment-2100753744:175,error,error,175,https://root.cern,https://github.com/root-project/root/pull/15451#issuecomment-2100753744,2,['error'],['error']
Availability,What about we do this for `gnuinstall` as proposed by @stephanlachnit and error out if `gnuinstall` is passed on Windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10985#issuecomment-1189923407:74,error,error,74,https://root.cern,https://github.com/root-project/root/issues/10985#issuecomment-1189923407,1,['error'],['error']
Availability,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432#issuecomment-2001956688:229,avail,available,229,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688,2,['avail'],['available']
Availability,"What commands did you type exactly? And what error do you get, if any?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11819#issuecomment-1334891567:45,error,error,45,https://root.cern,https://github.com/root-project/root/issues/11819#issuecomment-1334891567,1,['error'],['error']
Availability,What does the build error message say? I can't read it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779824754:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779824754,1,['error'],['error']
Availability,What is the error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-780759661:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-780759661,1,['error'],['error']
Availability,What is the error? I can't open the console output,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-778178791:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-778178791,1,['error'],['error']
Availability,What is the stack trace of the hadd failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6016#issuecomment-656286995:36,failure,failure,36,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656286995,1,['failure'],['failure']
Availability,What is this error in readTotemNtuple? :eyes:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1658624725:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1658624725,1,['error'],['error']
Availability,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231#issuecomment-1420328372:184,error,error,184,https://root.cern,https://github.com/root-project/root/issues/12231#issuecomment-1420328372,1,['error'],['error']
Availability,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13771#issuecomment-1742430781:223,avail,available,223,https://root.cern,https://github.com/root-project/root/pull/13771#issuecomment-1742430781,1,['avail'],['available']
Availability,What we really need is just a tarball with the source. There is no need to build anything on your side.; I believe Spack uses this URL `https://root.cern/download/root_v6.16.00.source.tar.gz` as a template to download other versions of the source from the same location. https://github.com/star-bnl/star-spack/blob/main/packages/root/package.py#L16. Maybe there is trick to tell Spack to download the archive from GitHub instead but I am not very familiar with how to achieve that with minimal changes to the current package config. A human friendly tag would still help to pick up these accepted changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010#issuecomment-925226499:154,down,download,154,https://root.cern,https://github.com/root-project/root/pull/9010#issuecomment-925226499,3,['down'],['download']
Availability,"What would be the downside of renaming ROOT's `find_package` (say to `ROOT_FIND_PACKAGE`) and using that throughout ROOT? Would there be e.g. any side-effects for say package X used by ROOT which depends on package Y, which ROOT has already find, but now package X will find a different one? And what about users configuring against ROOT, what would be the side-effect they see? pulling @amadio in for opinions and expertise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633#issuecomment-878259600:18,down,downside,18,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-878259600,1,['down'],['downside']
Availability,What's the issue that gets fixed by this commit? Can you add the error messages?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12912#issuecomment-1568608064:65,error,error,65,https://root.cern,https://github.com/root-project/root/pull/12912#issuecomment-1568608064,1,['error'],['error']
Availability,"When HistFactory constructs gamma parameters, they don't have initial errors.; When trying to plot the prefit model, the missing errors will make problems.; By assigning the relative errors caused by the constraint terms, pre-fit plots; will succeed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3912:70,error,errors,70,https://root.cern,https://github.com/root-project/root/pull/3912,3,['error'],['errors']
Availability,"When I do `bin/root.exe -q -l` with this patch in release build, unsetting LD_LIBRARY_PATH and DYLD_LIBRARY_PATH, I get this error:; ```; [yuka@yuka-arch module-release]$ rm -rf /tmp/*; [yuka@yuka-arch module-release]$ source bin/thisroot.sh; [yuka@yuka-arch module-release]$ bin/root.exe -q -l; ; [yuka@yuka-arch module-release]$ unset DYLD_LIBRARY_PATH; [yuka@yuka-arch module-release]$ unset LD_LIBRARY_PATH; [yuka@yuka-arch module-release]$ bin/root.exe -q -l; input_line_1:1:10: remark: building module 'stl' as '/tmp/org.llvm.clang.yuka/ModuleCache/stl.pcm' [-Rmodule-build]; #include <new>; ^; input_line_1:1:10: remark: finished building module 'stl' [-Rmodule-build]; /home/yuka/module-release/include/libc.modulemap:1:8: fatal error: module 'libc' is defined in both '/tmp/org.llvm.clang.yuka/ModuleCache/libc.pcm' and '/home/yuka/module-release/lib/libc.pcm'; module ""libc"" [system] {; ^; Error in <TCling::LoadModule>: Module libc failed to load; Error in <TCling::LoadModule>: Module libc not found!; Error in <TCling::LoadModule>: Module ROOT_Foundation_C failed to load; Error in <TCling::LoadModule>: Module ROOT_Foundation_C not found!; Error in <TCling::LoadModule>: Module ROOT_Config failed to load; Error in <TCling::LoadModule>: Module ROOT_Config not found!; Error in <TCling::LoadModule>: Module ROOT_Foundation_Stage1_NoRTTI failed to load; Error in <TCling::LoadModule>: Module ROOT_Foundation_Stage1_NoRTTI not found!; terminate called after throwing an instance of 'std::runtime_error'; what(): >>> Interpreter compilation error:; Unexpected end of file; Aborted (core dumped); ```; As shown, Clang is still trying to generate implicit modules in `/tmp/org.llvm.clang.yuka/ModuleCache/`. This patch is adding `/home/yuka/module-release/lib:.:/home/yuka/module-release/lib:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib` to TCling path, so I guess the expected result is im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-377492896:125,error,error,125,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-377492896,2,['error'],['error']
Availability,"When PR #4279 was initially sent on Aug 25th, the search for Python was; moved to RootBuildMacros in order to avoid a build failure due ot the; search for another package and the declaration of one of the new CMake; variables.; This seem not to be a problem anymore (something changed in the; meantime?), so the search for Python can be put back to the original; place.; This could also fix the tests failing with cxx17 due to a mismatch; between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4686:124,failure,failure,124,https://root.cern,https://github.com/root-project/root/pull/4686,1,['failure'],['failure']
Availability,When VDT is available use for the CPU implementation the fast implementation of tanh,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2567:12,avail,available,12,https://root.cern,https://github.com/root-project/root/pull/2567,1,['avail'],['available']
Availability,When a library is re-loaded (via .L) we should reload the corresponding rdict file. However current ROOT (without modules) just re-reads the rdict file. This patch brings this behavior for modules and is intended to be a quick fix for the os nightly failures of kind:. Error in TCling::LoadPCM: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in TCling::LoadPCM: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in TCling::LoadPCM: In-memory ROOT PCM candidate /.../libASImage_rdict.pcmError in TCling::LoadPCM: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in TCling::LoadPCM: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in TCling::LoadPCM: In-memory ROOT PCM candidate /.../libASImage_rdict.pcm. The continuation of this work is in root-project/root#5420,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5422:250,failure,failures,250,https://root.cern,https://github.com/root-project/root/pull/5422,2,"['Error', 'failure']","['Error', 'failures']"
Availability,"When a root is not found in a given interval, an error message is produced written some information in the standard output. This is now fixed and the ROOT error message reporting system is now used, so the message can in case be suppressed. ; Thanks for the user that reported in https://root-forum.cern.ch/t/turn-off-error-messages-from-tf1-getx/38175",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5076:49,error,error,49,https://root.cern,https://github.com/root-project/root/pull/5076,3,['error'],"['error', 'error-messages-from-']"
Availability,"When asymptotically correct errors are used, the current implementation; breaks if variables don't have identical name and title. This is solved; by always using the name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5316:28,error,errors,28,https://root.cern,https://github.com/root-project/root/pull/5316,2,['error'],['errors']
Availability,"When building ROOT in optimized mode, we enable fast math which then; disables errno on math functions. But this only happens in TCling,; so all modules built by rootcling_stage1 are suddenly out of sync; and we get errors like this:; ```; error: errno in math functions was enabled in PCH file but is currently disabled; ```. This patch just applies the same setting in _stage1. In theory we; should make a central place where we have these extra flags, but; that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1229:216,error,errors,216,https://root.cern,https://github.com/root-project/root/pull/1229,2,['error'],"['error', 'errors']"
Availability,"When building ROOT on slc6, it will detect and use xz (version 4.999.9) provided by OS, which is reported to have compatibility issues (`R__unzipLZMA: error 8 in lzma_code`). The proposed change fixes that by using CMake's own module (present since CMake 3.0.2) for detecting xz *and* checking it's version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3838:151,error,error,151,https://root.cern,https://github.com/root-project/root/pull/3838,1,['error'],['error']
Availability,When building latest ROOT (6.28.02) with latest Protobuf 22.4 tmva/sofie_parsers build fails during linking step with errors of the type:; ```; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::log_internal::LogMessage::OstreamView::~OstreamView()...; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::Mutex::~Mutex()'; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `utf8_range::IsStructurallyValid(...; ```; The problem seems to be caused by adding new dependency of Protobuf on Abseil in Protobuf 22.x (https://protobuf.dev/news/2022-08-03/). To make the code build I needed to:; Add in file `cmake/modules/SearchInstalledSoftware.cmake` after line ; ```; find_package(Protobuf); ```; lines (probably this should be dependent on version of Protobuf); ```; find_package(absl REQUIRED); find_package(utf8_range REQUIRED); ```; In file `tmva/sofie_parsers/CMakeLists.txt` add inside linking after line; ```; ${Protobuf_LIBRARIES}; ```; lines; ```; absl::str_format_internal; absl::log_internal_message; absl::hash; absl::flat_hash_set; absl::log_internal_check_op; utf8_range::utf8_validity; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12770:118,error,errors,118,https://root.cern,https://github.com/root-project/root/issues/12770,1,['error'],['errors']
Availability,"When building on my GPU machine , using -Dcuda=On, I am getting this cuda errors in compiling:; ```; /home/moneta/rootgit/root_dev4/roofit/batchcompute/src/RooBatchCompute.cu(43): error: namespace ""std"" has no member ""transform""; ```; and ; ```; /home/moneta/rootgit/root_dev4/roofit/batchcompute/src/RooMath.cxx(284): error: A __device__ variable cannot be marked constexpr. /home/moneta/rootgit/root_dev4/roofit/batchcompute/src/RooMath.cxx(294): error: A __device__ variable cannot be marked constexpr. /home/moneta/rootgit/root_dev4/roofit/batchcompute/src/RooMath.cxx(304): error: A __device__ variable cannot be marked constexpr. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9004#issuecomment-972703882:74,error,errors,74,https://root.cern,https://github.com/root-project/root/pull/9004#issuecomment-972703882,5,['error'],"['error', 'errors']"
Availability,"When building root from source, I encountered an error that the SHA-256 hash in root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/download-XROOTD.cmake does not match the hash of the latest (5.4.2) version of the downloaded file. Most likely the hardcoded hash in this file needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10578:49,error,error,49,https://root.cern,https://github.com/root-project/root/issues/10578,3,"['down', 'error']","['download-XROOTD', 'downloaded', 'error']"
Availability,"When building the reference guide, some notebook generation for the TMVA tutorials generate errors:. ```; [NbConvertApp] Writing 3244 bytes to /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/notebooks/TMVA_SOFIE_ONNX.C.nbconvert.ipynb; In file included from input_line_8:1:; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/TMVA_SOFIE_ONNX.C:15:12: error: no type named 'RModelParser_ONNX' in namespace 'TMVA::Experimental::SOFIE'; SOFIE::RModelParser_ONNX Parser;; ~~~~~~~^; ```. ```; [NbConvertApp] Writing 4914 bytes to /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/notebooks/TMVA_SOFIE_RDataFrame.C.nbconvert.ipynb; In file included from input_line_8:1:; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/TMVA_SOFIE_RDataFrame.C:28:10: fatal error: 'Higgs_trained_model.hxx' file not found; #include ""Higgs_trained_model.hxx""; ^~~~~~~~~~~~~~~~~~~~~~~~~; Info in <TMVA_SOFIE_RDataFrame>: You need to run TMVA_Higgs_Classification.C to generate the Keras trained model; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10461:92,error,errors,92,https://root.cern,https://github.com/root-project/root/issues/10461,3,['error'],"['error', 'errors']"
Availability,"When building with #6385 I get the following error when building with `builtin_cling=OFF`. I haven't investigated in detail so it could be something wrong on my part:. ```log; [ 96%] Generating G__Core.cxx, ../lib/Core.pcm; cd /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/core && /home/conda/feedstock_root/build_artifacts/debug_1613296575343/_build_env/bin/cmake -E env LD_LIBRARY_PATH=/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/lib: /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/lib/libCore.so -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/ginclude -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/externals -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/include -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/ginclude -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/base/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/foundation/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/cont/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/gui/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7206:45,error,error,45,https://root.cern,https://github.com/root-project/root/issues/7206,1,['error'],['error']
Availability,When building with gcc49 on osx a linker assertion happens when linking interpreter module. Trial and error reveal that setting -O0 removes the linker assertion. Dan Riley found that adding the flag -fno-omit-frame-pointer also removed the linker assertion without removing other optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/64:102,error,error,102,https://root.cern,https://github.com/root-project/root/pull/64,2,['error'],['error']
Availability,"When building without root7 but with C++14, RLogger is used.; Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5775:70,avail,available,70,https://root.cern,https://github.com/root-project/root/pull/5775,1,['avail'],['available']
Availability,"When called repeatedly via TTree::GetBranch, the string allocations in; GetFullName have a notable runtime cost.; Here, the allocation is reduced to a single one in every branch. See here for a performance analysis where repeated invocations produced significant overhead.; ![image](https://user-images.githubusercontent.com/16205615/186901068-80db73be-e32a-47e5-8986-4dfe8d5e8dae.png). This seems to matter most if the branches have mothers, because in this case, the string composition kicks in. @pcanal; - Do you know if there's a test that covers this case?; - Do you agree that this brings down TString allocations?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11255:595,down,down,595,https://root.cern,https://github.com/root-project/root/pull/11255,1,['down'],['down']
Availability,"When cling is compiled standalone against an external instance of LLVM and clang, cling cannot be reliably used. This is because ```createCI()``` throws an error about a non-existing clang resource directory inside the cling directories and a crash occurs shortly afterwards, when a code to be interpreted is entered. The reason of the above seems to be the inability of cling and its build system to flag properly that there is no built-in LLVM/clang and therefore cling should use the external one instead. This PR fixes it by introducing the ```LLVM_PATH``` pre-processor definition which is populated automatically by CMake with the detected LLVM directory as soon as both ```builtin_llvm``` and ```builtin_clang``` are off. If I should have done this in a different way, there are pieces of code where ```LLVM_PATH``` should be also used but it isn't (or vice versa), or you have any other comments, I'm happy to hear your suggestions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13175:98,reliab,reliably,98,https://root.cern,https://github.com/root-project/root/pull/13175,2,"['error', 'reliab']","['error', 'reliably']"
Availability,"When cling is compiled standalone without the help of the Cling Packaging Tool, errors about missing ```llvm::jitlink``` symbols may occur. For example, I could not build cling against [an external instance of LLVM + clang](https://github.com/root-project/llvm-project/tree/cling-llvm13) compiled with ```BUILD_SHARED_LIBS=ON```. This PR fixes it by updating 2 offensive CMakeLists.txt's. (Contributing to the ROOT repository rather than the cling one by request of @Axel-Naumann)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13140:80,error,errors,80,https://root.cern,https://github.com/root-project/root/pull/13140,1,['error'],['errors']
Availability,"When compiled in debug mode, RooFit was outlining a normally inlined; function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4514:103,error,error,103,https://root.cern,https://github.com/root-project/root/pull/4514,1,['error'],['error']
Availability,"When compiled in with '-Ddev=ON', warning becomes errors. ```; In member function ‘std::string TMVA::Experimental::SOFIE::ROperator_Gemm<T>::Generate(std::string)’:; tmva/sofie/inc/TMVA/ROperator_Gemm.hxxROperator_Gemm.hxx:211:16: error: there are no arguments to ‘assert’ that depend on a template parameter, so a declaration of ‘assert’ must be available [-fpermissive]; 211 | assert(length == ConvertShapeToLength(fShapeC));; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9341:50,error,errors,50,https://root.cern,https://github.com/root-project/root/pull/9341,3,"['avail', 'error']","['available', 'error', 'errors']"
Availability,"When compiled with -Ddev=ON options, <cstdio> include is not provided. ```; Config.cxx:41:7: error: ‘printf’ was not declared in this scope; 41 | printf(""Warning: Config::setDefaultNWorkers cannot set number of workers after JobManager has been instantiated!\n"");; | ^~~~~~; /home/linev/git/webgui/roofit/multiprocess/src/Config.cxx:17:1: note: ‘printf’ is defined in header ‘<cstdio>’; did you forget to ‘#include <cstdio>’?; 16 | #include <thread> // std::thread::hardware_concurrency(); +++ |+#include <cstdio>; 17 | ; /home/linev/git/webgui/roofit/multiprocess/src/Config.cxx:43:7: error: ‘printf’ was not declared in this scope; 43 | printf(""Warning: Config::setDefaultNWorkers cannot set number of workers to zero.\n"");; | ^~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9452:93,error,error,93,https://root.cern,https://github.com/root-project/root/pull/9452,2,['error'],['error']
Availability,"When compiled with latest gcc / clib, one get warnings like:; ```; /usr/include/string.h:241:27: error: ‘char* __builtin_strchr(const char*, int)’ argument 1 declared attribute ‘nonstring’; ```. It is because of declaration:; ```; char ut_host[UT_HOSTSIZE]; __attribute_nonstring__; /* Hostname for remote login. */; ```. Seems to be, `ut_host` cannot be used as null-terminated string.; Therefore copy value in TString before using it. Plus replace 0 -> nullptr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10688:97,error,error,97,https://root.cern,https://github.com/root-project/root/pull/10688,1,['error'],['error']
Availability,"When composing the expressions to jit autoparsing is redundant as we; know what and when to synthesize. This patch has two effects, first it limits the recursive behavior of; autoparse and autoload (useful for modules); and secondly avoids deep call; chains of virtual function calls. EDIT: Rationale -- I was working on a new, cxxmodules-based implementation of TCling::GetClassSharedLibs which does not rely on rootmap files. I had to debug a few failures in RDF and I noticed the recursive calls to autoparse and autoload always without success. I thought it might be a simplification (and performance optimization) if we disabled that part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765:53,redundant,redundant,53,https://root.cern,https://github.com/root-project/root/pull/3765,2,"['failure', 'redundant']","['failures', 'redundant']"
Availability,"When configuring ROOT on the new M1 Max chip using Mac OS 12.1 and latest Xcode (Clang 13.0), it does not work when using the option `-Dall=On`.; By using `-Dall=On` the compiler flag `-mach=native` is added by CMake and this option is not recognised by clang.; When configuring:; ```; cmake ../root -Dall=On -Dbuiltin_glew=On; ```; There is an error in cmake caused by this problem, seen in the `CMakeFiles/CMakeError.log` file: . ```; Performing C++ SOURCE FILE Test HAVE_CXX_ATOMICS_WITHOUT_LIB failed with the following output:; Change Dir: /Users/moneta/root/git/temp/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/make -f Makefile cmTC_c3390/fast && /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/cmTC_c3390.dir/build.make CMakeFiles/cmTC_c3390.dir/build; Building CXX object CMakeFiles/cmTC_c3390.dir/src.cxx.o; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -DHAVE_CXX_ATOMICS_WITHOUT_LIB -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -march=native -Werror=unguarded-availability-new -std=c++11 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk -std=c++14 -MD -MT CMakeFiles/cmTC_c3390.dir/src.cxx.o -MF CMakeFiles/cmTC_c3390.dir/src.cxx.o.d -o CMakeFiles/cmTC_c3390.dir/src.cxx.o -c /Users/moneta/root/git/temp/CMakeFiles/CMakeTmp/src.cxx; clang: error: the clang compiler does not support '-march=native'; make[1]: *** [CMakeFiles/cmTC_c3390.dir/src.cxx.o] Error 1; make: *** [cmTC_c3390/fast] Error 2. ```. and then the Cmake checks fails and interpret that some libraries (e.g. lib atomic) is missing, but in reality this is not the case. . If configuring with just:. ```; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9687:345,error,error,345,https://root.cern,https://github.com/root-project/root/issues/9687,1,['error'],['error']
Availability,When constructing in Python a derived class from Fitter an error occurred caused probably of a not understanding a typedef. See issue #12391. This PR fixes #12391,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12397:59,error,error,59,https://root.cern,https://github.com/root-project/root/pull/12397,1,['error'],['error']
Availability,"When created JSON should be used outside ROOT application and without running THttpServer,; it is better to use batch mode for generation of JSON files. Places are:. 1. jupyter; 2. doxygen; 3. c1->SaveAs(""file.json""). Produced JSON is more robust and can be processed as is - how it is performed by the batch image production.; Main difference - extra JS modules directly embed into JSON. And `TF1` always store its values. Also configure `source_dir` of JSROOT when producing images. This let use local mathjax. Update JSROOT with Android/TGeo fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16783:240,robust,robust,240,https://root.cern,https://github.com/root-project/root/pull/16783,1,['robust'],['robust']
Availability,"When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood; 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12921:521,avail,available,521,https://root.cern,https://github.com/root-project/root/pull/12921,1,['avail'],['available']
Availability,"When creating the Asimov dataset, the errors in each bin were N, that; is, 100%. Now, they are set to sqrt(N).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5287:38,error,errors,38,https://root.cern,https://github.com/root-project/root/pull/5287,1,['error'],['errors']
Availability,"When cuda is not found, if the cmake cuda flag was ON it was not switched off, causing an error when building RooFit on a platform without cuda support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9437:90,error,error,90,https://root.cern,https://github.com/root-project/root/pull/9437,1,['error'],['error']
Availability,"When doing lookup on templates, instantiation can fail.; This can be triggered during templarte instantiation somewhere; in clang, autoloading, cling-lookup - and SFINAE errors that; occurr in cling-lookup must not bubble up to clang, or else; clang will think that there was a problem (where there was; none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda; was not found by clang, was tried to be autoloaded, TMetaUtils; produced a broken normalized type name, lookup on the broken; type name failed with a SFINAE error - and that ended up being; swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5615:170,error,errors,170,https://root.cern,https://github.com/root-project/root/pull/5615,6,['error'],"['error', 'errors']"
Availability,"When doing lookup on templates, instantiation can fail.; This can be triggered during templarte instantiation somewhere; in clang, autoloading, cling-lookup - and SFINAE errors that; occurr in cling-lookup must not bubble up to clang, or else; clang will think that there was a problem (where there was; none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda; was not found by clang, was tried to be autoloaded, TMetaUtils; produced a broken normalized type name, lookup on the broken; type name failed with a SFINAE error - and that ended up being; swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5609:170,error,errors,170,https://root.cern,https://github.com/root-project/root/pull/5609,3,['error'],"['error', 'errors']"
Availability,"When exporting collection proxies, the type was only checked against the RooArgList proxy, so RooArgSet proxies would not get correctly exported. It is better to check for the more general `RooAbsCollection` base class. This fixes the build failures on macos-beta. Needs to be backported to 6.32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15942:241,failure,failures,241,https://root.cern,https://github.com/root-project/root/pull/15942,1,['failure'],['failures']
Availability,"When fitting a TGraphErrors, with errors in the x coordinate, there is currently no support to perform the operation using milt-threads as it is currently done for TH1::Fit or TGraph::Fit. One needs to use the `TThreadExecutor` in the [`FitUtil::EvsluateEffectiveChi2](https://root.cern.ch/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html#a5c11d758b21c08a22b580747789ccdab) function. . This has been requested in https://root-forum.cern.ch/t/multithreading-on-minuit/46225/13",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10021:34,error,errors,34,https://root.cern,https://github.com/root-project/root/issues/10021,1,['error'],['errors']
Availability,"When generating the reference guide tutorial pages the doxygen ROOT filter invokes the Python script `makeimage.py` to generate the pictures produce by the tutorials. This Python script relies on the fact the canvases produced by the tutorial (Python ones) are still in memory after execution. They are retrieved with `ROOT.gROOT.GetListOfCanvases()` . ; In the case of most `df*.py` examples it works fine: the later command gives the list of canvases. But with `df103_NanoAODHiggsAnalysis.py` it gives an empty list of canvases because the canvases are created in a sub-function called `plot`. Python does some memory clean up at the end of `plot` and delete the canvas in memory. Adding `ROOT.SetOwnership(d, False)` allows to keep the canvases alive in the list of canvases after the macro execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5221:748,alive,alive,748,https://root.cern,https://github.com/root-project/root/pull/5221,1,['alive'],['alive']
Availability,"When generating the reference guide tutorial pages the doxygen ROOT filter invokes the Python script makeimage.py to generate the pictures produce by the tutorials. This Python script relies on the fact the canvases produced by the tutorial (Python ones) are still in memory after execution. They are retrieved with ROOT.gROOT.GetListOfCanvases() .; In the case of most df*.py examples it works fine: the later command gives the list of canvases. But with df103_NanoAODHiggsAnalysis.py it gives an empty list of canvases because the canvases are created in a sub-function called plot. Python does some memory clean up at the end of plot and delete the canvas in memory. Adding ROOT.SetOwnership(d, False) allows to keep the canvases alive in the list of canvases after the macro execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5230:733,alive,alive,733,https://root.cern,https://github.com/root-project/root/pull/5230,1,['alive'],['alive']
Availability,"When importing data from a TTree in a RooDataSet, if some of the branches are not existing in the Tree ; do not import any data and make an empty dataset. ; This avoid importing the variables using the current values, which will be identical for every event.; This fixes ROOT-5112. After https://github.com/root-project/root/commit/b5c2fb7909fbd1e483a3e17b21d24093409d67c1 an error message was printed, but this can pass easly unnoticed. . If one needs to add ad-hoc some column to the dataset, it is also very easy to add branches to a TTree, using RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7347:376,error,error,376,https://root.cern,https://github.com/root-project/root/pull/7347,1,['error'],['error']
Availability,"When integrating the discretely-sampled RooCurves, the algorithm; implemented in RooCurve::average() was unnecessarily complicated. The existing midpoints were only considered for the trapezoidal rule if; they are away from the interval limits with an arbitrary tolerance,; which seems like a premature optimization to me. In particular, the logic was not correct if all midpoints were close to; the limits without this tolerance, resulting in issue https://github.com/root-project/root/issues/9838. Instead of making that case work correctly by implementing more code; branches, this commit suggests to simply don't do this tolerace check; and use all available midpoints for the trapezoidal integration rule. A unit test with the reproducer from https://github.com/root-project/root/issues/9838 is also implemented. Closes https://github.com/root-project/root/issues/9838. There are two additional commits in this PR with general code improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16099:262,toler,tolerance,262,https://root.cern,https://github.com/root-project/root/pull/16099,4,"['avail', 'toler']","['available', 'tolerace', 'tolerance']"
Availability,"When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11698:226,failure,failure,226,https://root.cern,https://github.com/root-project/root/pull/11698,1,['failure'],['failure']
Availability,When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7298:234,failure,failures,234,https://root.cern,https://github.com/root-project/root/pull/7298,1,['failure'],['failures']
Availability,"When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12537:203,error,error,203,https://root.cern,https://github.com/root-project/root/issues/12537,2,"['Error', 'error']","['Error', 'error']"
Availability,"When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:; ```; -- Preferring Python version 3; -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development; -- Could NOT find Python (missing: Development) (found version ""2.7.15""); -- Looking for OpenGL; -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR); CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):; OpenGL package (with GLU) not found and opengl option required; Call Stack (most recent call first):; CMakeLists.txt:167 (include); ```; Looking at the variables I see a weird mixture of python 2 and python 3:; ```; //; PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program.; Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file.; Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library.; Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library.; Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file.; Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include; ```; This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4832:129,error,error,129,https://root.cern,https://github.com/root-project/root/pull/4832,2,"['Error', 'error']","['Error', 'error']"
Availability,"When previous node of a RRange or RFilter node was a RJittedFilter,; we were wrongly downcasting _varied_ filters to the RJittedFilter type,; but varied filters are _not_ jitted filters, they are copies of the; actual concrete filter. With this patch, if the type of the previous node is RJittedFilter,; we treat it everywhere as the generic base class RFilterBase, which; fixes the problem and it is consistent with what we already do in; RVariedAction. The PR comes with the corresponding regression test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10544:85,down,downcasting,85,https://root.cern,https://github.com/root-project/root/pull/10544,1,['down'],['downcasting']
Availability,"When registering a new specialization, we cannot assert that the; specialization is new, as in: has not been registered as a loadable; specialization before, at least not based on the ODRHash. The ODRHash is not unique for different types (hash collision), i.e.; different specialization template arguments might map to the same; ODRHash value. loadLazySpecializationsImpl() will thus load something,; and claim that the ""Specialization is already registered as lazy"",; but it will in fact be an unrelated specialization. Give up on asserting any of this. NOTE: it is unclear whether the ambiguity in which specialization will; be loaded is causing problems down the road; so far we have not observed; such problems in the wild. If so, the ODRHash must not be the lookup key,; but a mere lookup hint into a multimap or similar, where the search compares; the actual template arguments to identify which lazy specialization to load. Based on discussion with Vassil (and in turn Richard Smith). This fixes e.g.; ```; roottest/cling/threading/clinglock.C...; Assertion failed: (!loadLazySpecializationsImpl(Args) && ""Specialization is already registered as lazy""), function addSpecializationImpl, file /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/AST/DeclTemplate.cpp, line 253.; ```; on macOS 11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9621:658,down,down,658,https://root.cern,https://github.com/root-project/root/pull/9621,1,['down'],['down']
Availability,When run C++17 kernel in Jupyter notebook cause some errors; due to currently clang-5.0 in https://root.cern.ch/download/cling/ is not; support c++17.; So add support to C++1z for Jupyter kernel and we can try some new; features in Jupyter notebook. for avoiding following error:. [I 05:46:38.253 NotebookApp] Kernel restarted:; d3413fa0-7046-4b63-912b-a286610eacc1; error: invalid value 'c++17' in '-std=c++17'; note: use 'c++98' or 'c++03' for 'ISO C++ 1998 with amendments' standard; note: use 'gnu++98' or 'gnu++03' for 'ISO C++ 1998 with amendments and; GNU extensions' standard; note: use 'c++11' for 'ISO C++ 2011 with amendments' standard; note: use 'gnu++11' for 'ISO C++ 2011 with amendments and GNU; extensions' standard; note: use 'c++14' for 'ISO C++ 2014 with amendments' standard; note: use 'gnu++14' for 'ISO C++ 2014 with amendments and GNU; extensions' standard; note: use 'c++1z' for 'Working draft for ISO C++ 2017' standard; note: use 'gnu++1z' for 'Working draft for ISO C++ 2017 with GNU; extensions' standard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/952:53,error,errors,53,https://root.cern,https://github.com/root-project/root/pull/952,4,"['down', 'error']","['download', 'error', 'errors']"
Availability,When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated.; /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory; collect2: error: ld returned 1 exit status,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11643:68,error,error,68,https://root.cern,https://github.com/root-project/root/pull/11643,2,['error'],['error']
Availability,"When running ccmake in a root build directory, I noticed that some variable descriptions are empty (usually one sees a one-line description stemming from cmake/modules/RootBuildOptions.cmake). This happens when their value is forced in cmake/modules/SearchInstalledSoftware.cmake. This also affects the comments in builddir/CMakeCache.txt. I claim that when forcing these variables' values, the comment is even more important than when they remain at their defaults or user-set values. In the below patch, I basically ran an editor macro retaining the values of `${opt}_description` (as set by `ROOT_BUILD_OPTION`) and adds a very brief explanation of why the value got changed (usually by inspecting the immediate control flow and/or echoing the status message that is print out anyway). The comments are sometimes sub-optimal (when values are forced to the value that the user has set themselves anyway), but … I guess it's still nice to point out ""you had no choice here"". Unrelated to the main part:. `tmva-cuda` is force set, but nowhere else used, I suspect this should've been `tmva-gpu`. In one place I replaced; ```; if (something); else(); code; ```; by; ```; if (NOT something); code; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2056:735,echo,echoing,735,https://root.cern,https://github.com/root-project/root/pull/2056,1,['echo'],['echoing']
Availability,"When running rootcling to produce C++ modules we currently run; into this issue that is an issue in this specific LLVM revision; we are using in ROOT. The issue was fixed by Richard upstream; in r303373. The error we fix with this patch is:; ```; While building module 'Core':; While building module 'stl' imported from input_line_1:1:; In file included from <module-includes>:5:; In file included from /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/ccomplex:39:; In file included from /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/complex:42:; /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/cpp_type_traits.h:102:23: error: use of undeclared identifier '_Tp'; struct __are_same<_Tp, _Tp>; ^; /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/cpp_type_traits.h:318:25: error: use of undeclared identifier '_Tp'; struct __is_pointer<_Tp*>; ^; /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/cpp_type_traits.h:318:29: error: expected expression; struct __is_pointer<_Tp*>; ^; /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/cpp_type_traits.h:329:37: error: declaration of '_Tp' must be imported from module 'stl.ccomplex' before it is required; : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >; ^; /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/cpp_type_traits.h:327:21: note: previous declaration is here; template<typename _Tp>; ^; ```. Original patch description:. When we enter a module ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1016:208,error,error,208,https://root.cern,https://github.com/root-project/root/pull/1016,2,['error'],['error']
Availability,"When setting the branch proxy, report info about a missing branch to the user. This is done in the form of a printed error. The logic is only triggered if there are no other branch names in the list of available branches that begin with the current branch name being searched. This situation could arise for example with a skeleton analysis produced by TTree::MakeProxy and a TTree with a split object. In that case the generated code will try to create a TBranchProxy for the top-level branch, even though that branch is not available from the TTree, only the sub-branches are. See for more details the discussion at https://github.com/root-project/root/pull/3746",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16377:117,error,error,117,https://root.cern,https://github.com/root-project/root/pull/16377,3,"['avail', 'error']","['available', 'error']"
Availability,"When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:; Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630; This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5620:144,error,error,144,https://root.cern,https://github.com/root-project/root/pull/5620,2,['error'],['error']
Availability,"When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6415:82,failure,failure,82,https://root.cern,https://github.com/root-project/root/pull/6415,1,['failure'],['failure']
Availability,"When the expected number of events becomes negative, this can happen for some combinations of the parameters, ; `RooAbsPdf::extendedTerm` prints an error message, but return also a zero value. ; A zero value is WRONG bacause it is a valid value which is then used in the total likelihood computation, confusing the minimization and ending up in a good wrong result. . It should return a NaN, that is now correctly propagated and handle by RooFit. . Simple example reproducing the problem: ; ```; {; RooWorkspace w;; w.factory(""mu[1,-1.5,10]"");; w.factory(""prod::ns(1,mu)"");; w.factory(""prod::nb(b[1,0,10],theta[1])"");; w.factory(""sum::ntot(ns,nb)"");; w.factory(""Uniform::ff(x[0,1])"");; w.factory(""SUM::pdf(ntot*ff)"");. auto pdf = w.pdf(""pdf"");; auto x = w.var(""x"");; RooDataSet d(""data"",""data"",*x);; d.add(*x); ; auto nll = pdf->createNLL(d);. auto pl = w.var(""mu"")->frame();; nll->plotOn(pl);. pl->Draw();; }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8011:148,error,error,148,https://root.cern,https://github.com/root-project/root/issues/8011,1,['error'],['error']
Availability,"When the user passes a gradient to the `ROOT::Math::Minimizer` via inheriting from the `ROOT::Math::IMultiGradFunction`, the error level is only considered correctly if `SetFunction()` is **called after** `SetErrorDef()`, which is completely unexpected. This should either be fixed, or if not possible, the minimizer should error out if you try to set the function too early. This bug is the reason why it took me so long to figure out to use the analytical gradient provided by `clad` in the minimizer for RooFit: I just couldn't understand why the uncertainties were wrong and until now thought it was because the gradient was wrong or not handled correctly by the minimizer. But in the end, it was all just this simple configuration problem. This code reproduces the issue with the example of finding the minimum of a simple parabola:; ```C++; double eval(double x) { return x * x; }. double evalDerivative(double x) {return 2 * x; }. class MyFunc : public ROOT::Math::IMultiGenFunction {; public:; ROOT::Math::IMultiGenFunction *Clone() const override { return new MyFunc; }; unsigned int NDim() const override { return 1; }. private:; double DoEval(const double *x) const override { return eval(x[0]); }; };. class MyGradFunc : public ROOT::Math::IMultiGradFunction {; public:; ROOT::Math::IMultiGenFunction *Clone() const override { return new MyFunc; }; unsigned int NDim() const override { return 1; }; private:; double DoEval(const double *x) const override { return eval(x[0]); }; double DoDerivative(const double *x, unsigned int /*icoord*/) const override { return evalDerivative(x[0]); }; };. template<class Func>; void minimize(Func const& func); {; std::unique_ptr<ROOT::Math::Minimizer> m{ROOT::Math::Factory::CreateMinimizer(""Minuit2"")};; m->SetPrintLevel(1);. // Set initial value, step size, and range; m->SetLimitedVariable(0, ""x"", 10, 1, -50, 50);. // The error level will be ignored in the IMultiGradFunction case without; // any warning to the user! Swapping the next two lines ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12338:125,error,error,125,https://root.cern,https://github.com/root-project/root/issues/12338,2,['error'],['error']
Availability,"When there is a single server, it can become a bottleneck. What we did was to internally configure the server as a small cluster, with each XRootD daemon serving a subset of the available disks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12621#issuecomment-1926444072:178,avail,available,178,https://root.cern,https://github.com/root-project/root/issues/12621#issuecomment-1926444072,1,['avail'],['available']
Availability,When this tutorial is run as part of the documentation generation it fails with global name not defined errors. This results in this page being incomplete:; https://root.cern/doc/master/zdemo_8py.html. This pull reqest addresses this problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/310:104,error,errors,104,https://root.cern,https://github.com/root-project/root/pull/310,1,['error'],['errors']
Availability,"When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:; ```; : Preparing the Decorrelation transformation...; : Preparing the Gaussian transformation...; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; : Split TMVA training data in 6400 training events and 1600 validation events; : Print Training Model Architecture; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Program aborted due to an unhandled Error:; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12170:1151,Error,Error,1151,https://root.cern,https://github.com/root-project/root/issues/12170,1,['Error'],['Error']
Availability,"When trying to build the tests using CMake 3.10, `R__DAOS_TEST_POOL` was not; getting defined correctly which caused build errors like:. ```; expected ‘)’ before ‘R__DAOS_TEST_POOL’; 5 | std::string daosUri(""daos://"" R__DAOS_TEST_POOL "":1/a947484e-e3bc-48cb-8f71-3292c19b59a4"");; | ~ ^~~~~~~~~~~~~~~~~~; | ); ```. Moving from `COMPILE_OPTIONS` to `COMPILE_DEFINITIONS` seemed to fix it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8172:123,error,errors,123,https://root.cern,https://github.com/root-project/root/pull/8172,1,['error'],['errors']
Availability,"When trying to build with `-Dbuiltin_llvm=OFF` on Nixpkgs on NixOS (x86_64-linux),. ```; -- Configuring done; CMake Error at /nix/store/ixkz33c734kgvbpmyrcjclcns88gv4vj-llvm-13.0.1-dev/lib/cmake/llvm/AddLLVM.cmake:735 (add_dependencies):; The dependency target ""install-clang"" of target ""install-clang++"" does not; exist.; ```. <details>; <summary>Full build log</summary>; <pre wrap=true>; building '/nix/store/8xsj5zq00fkbndl1zzjngmxj3hhi51hd-root-6.28.00.drv'...; unpacking sources; unpacking source archive /nix/store/y5m4pr7c6vgjr34zqdz7wv819ln1mkj0-source; source root is source; patching sources; applying patch /nix/store/qljayx9yxgyx2xnf81b3rzzi99azd5d6-sw_vers.patch; patching file cmake/modules/SetUpMacOS.cmake; Hunk #1 succeeded at 8 with fuzz 1 (offset -20 lines).; Hunk #2 succeeded at 30 (offset -20 lines).; Hunk #3 succeeded at 74 (offset -34 lines).; patching file config/root-config.in; Hunk #1 succeeded at 313 (offset 1 line).; Hunk #2 succeeded at 373 (offset 1 line).; configuring; patching script interpreter paths in build/unix/; build/unix/makedistsrc.sh: interpreter directive changed from ""#! /bin/sh"" to ""/nix/store/qqa28hmysc23yy081d178jfd9a1yk8aw-bash-5.2-p15/bin/sh""; build/unix/coreteam.sh: interpreter directive changed from ""#!/bin/sh"" to ""/nix/store/qqa28hmysc23yy081d178jfd9a1yk8aw-bash-5.2-p15/bin/sh""; build/unix/compiledata.sh: interpreter directive changed from ""#!/usr/bin/env bash"" to ""/nix/store/qqa28hmysc23yy081d178jfd9a1yk8aw-bash-5.2-p15/bin/bash""; build/unix/makepchinput.py: interpreter directive changed from ""#! /usr/bin/env python"" to ""/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python""; build/unix/rootmapcat.py: interpreter directive changed from ""#! /usr/bin/env python"" to ""/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python""; build/unix/makereleasenotes.sh: interpreter directive changed from ""#! /bin/sh"" to ""/nix/store/qqa28hmysc23yy081d178jfd9a1yk8aw-bash-5.2-p15/bin/sh""; build/unix/pandoc-jira.sh: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1429284232:116,Error,Error,116,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1429284232,1,['Error'],['Error']
Availability,"When trying to define an operator in the cling cli repl, the ""function definition is not allowed here"" error is generated. ""cling -version"" reports ""0.8"". Here's a copy/paste of a session to demonstrate the issue:. <pre>; ****************** CLING ******************; * Type C++ code and press enter to run it *; * Type .q to exit *; *******************************************; [cling]$ #include &lt;iostream>; [cling]$ using namespace std;; [cling]$ struct A {; [cling]$ ? A(int val1, int val2) : pod1(val1), pod2(val2) {}; [cling]$ ? int pod1, pod2;; [cling]$ ? };; [cling]$ bool operator<=(const A &lhs, const A &rhs) {; [cling]$ ? return ((lhs.pod1 <= rhs.pod1) && (lhs.pod2 <= rhs.pod2));; [cling]$ ? }; input_line_6:2:46: error: function definition is not allowed here; bool operator<=(const A &lhs, const A &rhs) {; ^; </pre>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9449:103,error,error,103,https://root.cern,https://github.com/root-project/root/issues/9449,2,['error'],['error']
Availability,"When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12568:385,error,error,385,https://root.cern,https://github.com/root-project/root/pull/12568,1,['error'],['error']
Availability,"When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:; https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3579:78,error,error,78,https://root.cern,https://github.com/root-project/root/pull/3579,1,['error'],['error']
Availability,"When user invoke `InsertPointBefore(0, x, y)` with an empty TGraph (fNpoints==0), they will receive a message: . > Error in <TGraph::TGraph>: Inserted point index should be <= -1. This is confusing. The point index can not be -1. It also prevents insertion to an empty graph. People who familiar with `std::vector` may expect the behavior likes `vec.insert(vec.end(), value)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5149:115,Error,Error,115,https://root.cern,https://github.com/root-project/root/pull/5149,1,['Error'],['Error']
Availability,"When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do; ```c; // Define custom pdf; RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));; // Set formula for analytical integral; my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");; ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10763:238,error,errors,238,https://root.cern,https://github.com/root-project/root/issues/10763,1,['error'],['errors']
Availability,"When using only ```cmake ../source -DPYTHON_EXECUTABLE=/usr/bin/python3```, as suggested on the [webpage](https://root.cern/install/build_from_source/), the compiler would say that pyROOT libraries would be built for python3. When looking for the libraries at $ROOTSYS/lib, they are not there, and *import ROOT* in the python interpreter gives error. . Only after using ```cmake ../source -Dpyroot=ON -DPYTHON_EXECUTABLE=/usr/bin/python3``` that the pyROOT libraries were built and python could find them. . I'm installing ROOT on Fedora 33.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8095:344,error,error,344,https://root.cern,https://github.com/root-project/root/issues/8095,1,['error'],['error']
Availability,"When we add modules for system headers we are breaking this part; of the code that tries to track back via the include chain; the original header that includes this system header. In the; modules case we hit the ""module-includes:X"" include which; we then can't track down with the normal PP anymore. The reason for this code seems to be that we never know what header; is actually possible to be included and what is just some internal; (possibly non-standalone) header like ""bits/sys/types.h"". For normal rootcling informations we have to track down until; we leave the system includes or reach the top-level system; include to be sure that we can now actually include the; given path. For modules we already know when we are in the header that; is possible to be included by someone as this is the top; level module header, so we can just stop tracking once we hit the; top-level module header.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1036:267,down,down,267,https://root.cern,https://github.com/root-project/root/pull/1036,2,['down'],['down']
Availability,"When x is at the bin edge values numerical error can cause the computation of the bin to be the one before (or after). Correct for this case assuming the bin edge are computed as in `TH1::getBinLowEdge` and `TH1::GetBinUpEdge`. It is clear that the bin edge values are represented as floating point, so depending on how they are computed they can be sometime different. However, it is better to have teh consistency to return the correct value when computed as internally in TAxis. This should fix the problem reported in https://root-forum.cern.ch/t/bug-in-taxis-findbin/57210 and #14091. A test is also added for FindBin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14105:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/14105,1,['error'],['error']
Availability,"When you try to use GenVector you get errors like this:; ```; /home/yuka/root-build/include/Math/GenVector/Cartesian3D.h:116:50: error: could not convert ‘Vc_1::operator==<double, Vc_1::VectorAbi::Avx, Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >(((const ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >*)this)->ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >::fX, Vc_1::Vector<double, Vc_1::VectorAbi::Avx>(0, 0)).Vc_1::Mask<double, Vc_1::VectorAbi::Avx>::operator&&(Vc_1::operator==<double, Vc_1::VectorAbi::Avx, Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >(((const ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >*)this)->ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >::fY, Vc_1::Vector<double, Vc_1::VectorAbi::Avx>(0, 0))).Vc_1::Mask<double, Vc_1::VectorAbi::Avx>::operator&&(Vc_1::operator==<double, Vc_1::VectorAbi::Avx, Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >(((const ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >*)this)->ROOT::Math::Cartesian3D<Vc_1::Vector<double, Vc_1::VectorAbi::Avx> >::fZ, Vc_1::Vector<double, Vc_1::VectorAbi::Avx>(0, 0)))’ from ‘Vc_1::Mask<double, Vc_1::VectorAbi::Avx>’ to ‘bool’; return (fX == Scalar(0) && fY == Scalar(0) && fZ == Scalar(0)) ? Scalar(0) : atan2(Rho(), Z());; ```. When arguments of atan2 is both 0, it's supporsed to emit error rather; than just returning Scalar(0). Thus it's better just returning atan2; without checking its arguments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1692:38,error,errors,38,https://root.cern,https://github.com/root-project/root/pull/1692,6,"['Mask', 'error']","['Mask', 'error', 'errors']"
Availability,Where have you downloaded Starlight? Or where did you run `svn co http://starlight.hepforge.org/svn/trunk`? In which directory?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11626#issuecomment-1288573768:15,down,downloaded,15,https://root.cern,https://github.com/root-project/root/issues/11626#issuecomment-1288573768,1,['down'],['downloaded']
Availability,"Which parameter/feature of root rules that?. ```; $ root-config --features; cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml; ```; If this is libafterimage, then it is compiled to support gif:; ```; [I] media-libs/libafterimage; Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}; Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""); Homepage: http://www.afterstep.org/afterimage/index.php; Description: Afterstep's standalone generic image manipulation library; ```; Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985#issuecomment-759096761:418,Avail,Available,418,https://root.cern,https://github.com/root-project/root/issues/6985#issuecomment-759096761,1,['Avail'],['Available']
Availability,"While I believe this class and others probably could do with a big rework, in my attempts so far to find ways to use them in their current form I have stumbled across some very annoying behaviours -- this PR fixes one of these: that the results wouldn't copy reliably at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12936:259,reliab,reliably,259,https://root.cern,https://github.com/root-project/root/pull/12936,1,['reliab'],['reliably']
Availability,"While ROOT master is now building successfully for us, there are some downstream packages that suffer from this change. They can probably be fixed by exporting the ROOT_INCLUDE_PATH, but to better understand where things go wrong I made a very simple repeater. I think on any centos7 with the sft cvmfs this should work; ```; source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/CMake/3.20.0/x86_64-centos7-gcc10-dbg/CMake-env.sh; source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc10-dbg/ROOT-env.sh. git clone https://gitlab.cern.ch/sailer/root_repeater.git; cd root_repeater; mkdir build; cd build. cmake -D nlohmann_json_DIR=$JSONMCPP__HOME/lib64/cmake/nlohmann_json \; -D Python_ROOT_DIR=$PYTHON__HOME \; -D Vc_DIR=$VC__HOME/lib/cmake/Vc \; ..; make; ./RunTest; ```. Just linking an executable to ROOTTPython (https://gitlab.cern.ch/sailer/root_repeater/-/blob/master/CMakeLists.txt#L17); leads to an error like this; ```; ./RunTest ; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc10-dbg/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ProofDraw; Failed to load module Unuran; Failed to load module Quadp; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:70,down,downstream,70,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,4,"['down', 'error']","['downstream', 'error']"
Availability,"While attempting to debug a crash in CMS code, we ran valgrind and valgrind reported the following error. At this point, we don't know whether this is related to the crash we have seen or not. It is undefined behavior. The full error from valgrind follows:. ==15413== Source and destination overlap in memcpy(0x1ffeff0c78, 0x1ffeff0c78, 12); ==15413== at 0x40322A8: memcpy@@GLIBC_2.14 (in /cvmfs/cms-ib.cern.ch/nweek-02654/slc7_amd64_gcc820/external/valgrind/3.15.0-bcolbf2/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==15413== by 0x15A64868: void llvm::SmallVectorImpl::append<char const*, void>(char const*, char const*) (in /cvmfs/cms-ib.cern.ch/nweek-02654/slc7_amd64_gcc820/lcg/root/6.22.03-b2018e1d820c64836287b955b51776e2/lib/libCling.so); ==15413== by 0x17A3FD9F: (anonymous namespace)::RedirectingFileSystemParser::parseEntry(llvm::yaml::Node*, (anonymous namespace)::RedirectingFileSystem*) (in /cvmfs/cms-ib.cern.ch/nweek-02654/slc7_amd64_gcc820/lcg/root/6.22.03-b2018e1d820c64836287b955b51776e2/lib/libCling.so); ==15413== by 0x17A40C05: (anonymous namespace)::RedirectingFileSystem::create(std::unique_ptr<llvm::MemoryBuffer, std::default_deletellvm::MemoryBuffer >, void ()(llvm::SMDiagnostic const&, void), llvm::StringRef, void*, llvm::IntrusiveRefCntPtrclang::vfs::FileSystem) [clone .isra.519] (in /cvmfs/cms-ib.cern.ch/nweek-02654/slc7_amd64_gcc820/lcg/root/6.22.03-b2018e1d820c64836287b955b51776e2/lib/libCling.so); ==15413== by 0x17A40EC5: clang::vfs::getVFSFromYAML(std::unique_ptr<llvm::MemoryBuffer, std::default_deletellvm::MemoryBuffer >, void ()(llvm::SMDiagnostic const&, void), llvm::StringRef, void*, llvm::IntrusiveRefCntPtrclang::vfs::FileSystem) (in /cvmfs/cms-ib.cern.ch/nweek-02654/slc7_amd64_gcc820/lcg/root/6.22.03-b2018e1d820c64836287b955b51776e2/lib/libCling.so); ==15413== by 0x15A690B4: (anonymous namespace)::collectModuleMaps(clang::CompilerInstance&, llvm::SmallVectorImpl<std::__cxx11::basic_string<char, std::char_traits, std::allocator > >&) (in /cv",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6792:99,error,error,99,https://root.cern,https://github.com/root-project/root/issues/6792,2,['error'],['error']
Availability,"While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:1:; /private/tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'std'; #include <new>; ~~~~~~~~^; /private/tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error: could not build module 'std'; #include <string>; ~~~~~~~~^; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/Rtypes.h:23:; In file included from <module-includes>:1:; /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; In file included from input_line_3:2:; /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/Rtypes.h:23:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_C' imported from /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/Rtypes.h:29:; In file included from <module-includes>:1:; /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/ThreadLocalStorage.h:61:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/Rtypes.h:195:; In file included from <module-includes>:2:; /tmp/root-20210414-13675-19zg57u/root-6.24.00/builddir/include/ROOT/RStringView.hxx:19:10: fatal error: could not build module 'std'; #include <string_view>; ~~~~~~~~^; Error: Error loading the default rootcling header files.; [7241/9610] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881:3935,error,error,3935,https://root.cern,https://github.com/root-project/root/issues/7881,1,['error'],['error']
Availability,"While debugging a fitting the console gets clogged by a lot of messages of calling constructors and destructors of TFoamVect. I set the debug level needed to 5 for the messages to appear, and leaving the more important ones (like errors) as they were, in debug level 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6835:230,error,errors,230,https://root.cern,https://github.com/root-project/root/pull/6835,1,['error'],['errors']
Availability,"While debugging the failure triggered by a recent PR updating the behavior of `gDirectory`: https://github.com/root-project/root/pull/11908#issuecomment-1361086304 (The reported error is that a name/symbol that should have been detected and loaded by Cling was not found ... the direct cause was that `gDirectory` was unexpectedly `nullptr`), I discovered that notebooks (or a least the way they are run in the test `JupyROOT-ROOT_kernel_notebook`), runs several threads to actually execute the cells. It is also clear from my investigation that it does not enable thread safety. Whether we need to change depends on whether `Jupyter` (or the way it is use here) guaranteed that only one of the thread would ever be run concurrently (if not then we must enable thread safety). However, one more thing to consider is that when thread safety is enabled, each thread get its own thread local gDirectory pointers. If each cell is run in a separate thread, then change to `gDirectory` in one cell will not be reflected in the next cell. (this would be true also for any user level thread local variable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11955:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/issues/11955,2,"['error', 'failure']","['error', 'failure']"
Availability,"While fixing and old bug I used TError for the early termination of the function, and clang-tidy is not picking that up... Should I unnecesarily return some double as an error code or should I just ignore clang tidy? @lmoneta @Axel-Naumann ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-503995574:170,error,error,170,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-503995574,1,['error'],['error']
Availability,"While fixing the CI runs, I reordered the commits a bit as well:. 1. The first two commits are still separate from the main part of this PR, see description in first message.; 3. The third commit is the actual meat: it adds error handling to MultiProcess, including tests.; 4. The fourth commit is a bug fix, but since it is a rather rare bug that is only triggered in pathological cases (that I happened to trigger in one of the tests added in commit 3) and since it interacts with a specific other part (cache-and-tracking), I thought it was better to keep it separate, so that the commit can explain the rationale for that specific fix well.; 5. Commit 5 is again a minor refactoring to reduce some duplicated code.; 6. Commit 6 adds a strong warning message when fits end after only having tried parameters that give evaluation errors. In such a case, there will not actually be any valid value, but rather the error handling code will return zero as the function value. Minuit sees this as a valid function value and thinks the function converged and so RooFit would also think everything ended well. With this commit, at least a warning is issued. Perhaps this response should be stronger or weaker, that is up for discussion.; 7. Commit 7 applies a recommendation from the Form documentation to replace it with Format.; 8. Code formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15797#issuecomment-2183530657:224,error,error,224,https://root.cern,https://github.com/root-project/root/pull/15797#issuecomment-2183530657,3,['error'],"['error', 'errors']"
Availability,"While looking into other stuff yesterday, I think I came across the code that throws this error. If I understood correctly, this happens if you have a static ASan library linked into the executable (as we do for ROOT binaries) and then load a shared runtime library, for example via `LD_PRELOAD`. So what we likely have to do in here is figuring out if `LD_PRELOAD` is maybe set too aggressively and actually not needed / hurting for the tests listed above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10017#issuecomment-1064968595:90,error,error,90,https://root.cern,https://github.com/root-project/root/issues/10017#issuecomment-1064968595,1,['error'],['error']
Availability,"While looking into this again, I locally saw one test execution that had; ```; !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded; !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded; ```; at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121#issuecomment-1864125646:82,ERROR,ERROR,82,https://root.cern,https://github.com/root-project/root/issues/14121#issuecomment-1864125646,2,['ERROR'],['ERROR']
Availability,"While profiling the AGC running on local dask, we found that TChain::GetListOfBranches() allocated a large amount of memory. The reason is that when the function is called, TChain does a LoadTree(0), which results in the tree allocating a new TTreeCache. This piles up during the execution of the python tasks and results in a large memory overhead.; Since we don't really need the cache when only querying the branch list, this commit introduces a new private LoadTreeWithOptions() function that allows the TChain to internally disable the tree's cache (setting the cache size to 0) before performing the LoadTree. The original cache size is then restored.; This saves about 350 MB of memory during the AGC execution for no visible downside.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16063:733,down,downside,733,https://root.cern,https://github.com/root-project/root/pull/16063,1,['down'],['downside']
Availability,"While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:; ```; .; ├── setup.py; └── tests; └── test_test.py. 1 directory, 2 files; ```; Content of `setup.py`:; ```python; from setuptools import setup, find_packages. setup(; name=""root_cleanup_test"",; packages=find_packages(),; setup_requires=[""pytest-runner""],; test_suite=""tests"",; ); ```; Content of `test_test.py`; ```; import unittest; import ROOT. class TestTest(unittest.TestCase):; def test_test(self):; pass; ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````; ========== warnings summary ==========; /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S; message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html; ========== 1 passed, 1 warnings in 0.41 seconds ==========; Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup; facade = sys.modules[ __name__ ]; KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3595:695,error,error,695,https://root.cern,https://github.com/root-project/root/pull/3595,3,"['Error', 'error']","['Error', 'error']"
Availability,"While virtual `Copy(TObject &obj)` method is used in copy constructors, wrong cast may happen.; Simplest reproducer:; ```; TProfile p;; TH1D h(p);; ```; Causes fatal crash:; ```; Fatal in <TProfile::Copy>: Cannot copy a TProfile in a TH1D; aborting; #0 0x00007f2293b0a83a in wait4 () from /lib64/libc.so.6; #1 0x00007f2293a7403b in do_system () from /lib64/libc.so.6; #2 0x00007f22942c5a3d in TUnixSystem::StackTrace() () from /home/linev/build/webgui/lib/libCore.so; #3 0x00007f229418294c in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/linev/build/webgui/lib/libCore.so; #4 0x00007f22942497bd in ErrorHandler () from /home/linev/build/webgui/lib/libCore.so; #5 0x00007f22941988f4 in TObject::Fatal(char const*, char const*, ...) const () from /home/linev/build/webgui/lib/libCore.so; #6 0x00007f227d6fbde8 in TProfile::Copy(TObject&) const [clone .cold] () from /home/linev/build/webgui/lib/libHist.so; #7 0x00007f227d80aba7 in TH1D::TH1D(TH1D const&) () from /home/linev/build/webgui/lib/libHist.so; #8 0x00007f228c9dc028 in ?? (); #9 0x00007f2293f83460 in ?? (); #10 0x00007f228f062cfe in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #11 0x00007f228efd6ea4 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #12 0x00007f228f07511c in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /home/linev/build/webgui/lib/libCling.so; #13 0x00007f228f076c68 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/linev/build/webgui/lib/libCling.so; #14 0x00007f228efd4bb8 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10919:624,Error,ErrorHandler,624,https://root.cern,https://github.com/root-project/root/issues/10919,1,['Error'],['ErrorHandler']
Availability,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11106#issuecomment-1204549271:131,down,downloading,131,https://root.cern,https://github.com/root-project/root/pull/11106#issuecomment-1204549271,1,['down'],['downloading']
Availability,Why is `cling::printValue` not available in centos7/gcc7? -> https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28148/testReport/projectroot.bindings.pyroot/test/pyunittests_pyroot_pretty_printing/. ```; test_STLVector (pretty_printing.PrettyPrinting) ... vector<float>: ; input_line_39:2:36: error: no matching function for call to 'printValue'; *((std::string*)0x7ffe137c9f60) = cling::printValue((vector<float>*)0x136cb680);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-393044743:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-393044743,2,"['avail', 'error']","['available', 'error']"
Availability,Will make more pull requests to fully get rid of the E501 error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11010#issuecomment-1190864241:58,error,error,58,https://root.cern,https://github.com/root-project/root/pull/11010#issuecomment-1190864241,1,['error'],['error']
Availability,Will merge once this PR's windows build is fixed and the current failures in master are sorted out. I want to be able to see the performance effect of *this* PR (instead of the new shared library search).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8804#issuecomment-895591250:65,failure,failures,65,https://root.cern,https://github.com/root-project/root/pull/8804#issuecomment-895591250,1,['failure'],['failures']
Availability,"Will_Fail is the (now) expected result and lead to a 'succesfull' run of the test. What is ""new"" is that there is one platform where this failure is now a segmentation fault of sort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15481#issuecomment-2108706082:138,failure,failure,138,https://root.cern,https://github.com/root-project/root/issues/15481#issuecomment-2108706082,2,"['failure', 'fault']","['failure', 'fault']"
Availability,Windows 10 x64 failures are unrelated:; ```; TEST FAILURES:; 1330:roottest-cling-template-runtemplatefriend; 1736:roottest-root-io-transient-base-WriteFile; 1737:roottest-root-io-transient-base-hadd_autoload; 1785:roottest-root-meta-loadernotapp-build; 1786:roottest-root-meta-loadernotapp; 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15222#issuecomment-2052602443:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/15222#issuecomment-2052602443,2,"['FAILURE', 'failure']","['FAILURES', 'failures']"
Availability,Windows CI runs roottest despite build failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6441:39,failure,failure,39,https://root.cern,https://github.com/root-project/root/issues/6441,1,['failure'],['failure']
Availability,Windows and most of other platforms are fine - merging.; Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6739#issuecomment-720637638:57,Error,Error,57,https://root.cern,https://github.com/root-project/root/pull/6739#issuecomment-720637638,1,['Error'],['Error']
Availability,Windows error is due to a debug setup (temporary and unrelated);; CentOS7 issue is due to https://cern.service-now.com/service-portal?id=outage&n=OTG0057125,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5864#issuecomment-643459782:8,error,error,8,https://root.cern,https://github.com/root-project/root/pull/5864#issuecomment-643459782,2,"['error', 'outage']","['error', 'outage']"
Availability,"Windows error seems spurious, and we have a Jenkins / GH communication problem...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6826#issuecomment-729093178:8,error,error,8,https://root.cern,https://github.com/root-project/root/pull/6826#issuecomment-729093178,1,['error'],['error']
Availability,Windows errors seem unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11702#issuecomment-1313841820:8,error,errors,8,https://root.cern,https://github.com/root-project/root/pull/11702#issuecomment-1313841820,1,['error'],['errors']
Availability,"Windows fails on git lock file:; ```; 16:50:42 ERROR: Execution failed; 16:50:42 hudson.plugins.git.GitException: Command ""git checkout -f 326c0d60fa940ea4b743630e99937bf4209b45f3"" returned status code 128:; 16:50:42 stdout: ; 16:50:42 stderr: fatal: Unable to create 'C:/build/workspace/root-pullrequests-build/root/.git/index.lock': File exists.; 16:50:42 ; 16:50:42 Another git process seems to be running in this repository, e.g.; 16:50:42 an editor opened by 'git commit'. Please make sure all processes; 16:50:42 are terminated then try again. If it still fails, a git process; 16:50:42 may have crashed in this repository earlier:; 16:50:42 remove the file manually to continue.; 16:50:42 ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2072#issuecomment-391376969:47,ERROR,ERROR,47,https://root.cern,https://github.com/root-project/root/pull/2072#issuecomment-391376969,1,['ERROR'],['ERROR']
Availability,Windows failure due to CI bug / windows roottest. Merging; we can adjust the patch once we have the differential in llvm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7336#issuecomment-789547940:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/7336#issuecomment-789547940,1,['failure'],['failure']
Availability,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4426#issuecomment-534982824:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/4426#issuecomment-534982824,1,['failure'],['failure']
Availability,Windows failure is infrastructure related. Merging. Thank you very much for your contribution!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4649#issuecomment-561162296:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/4649#issuecomment-561162296,1,['failure'],['failure']
Availability,Windows failure is infrastructure. TMVA failure is unrelated. autocache failure requires an update to account for the caching improvements.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2018#issuecomment-389625801:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/2018#issuecomment-389625801,3,['failure'],['failure']
Availability,Windows failure is infrastructure. processExecutorH1Test is preexisting. autocache needs an update to the reference file to reflect the improved behavior.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2027#issuecomment-389832667:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/2027#issuecomment-389832667,1,['failure'],['failure']
Availability,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15011#issuecomment-2007378458:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/15011#issuecomment-2007378458,2,['failure'],"['failure', 'failures']"
Availability,Windows failure is not connected to my changes..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2737#issuecomment-426741097:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/2737#issuecomment-426741097,1,['failure'],['failure']
Availability,Windows failure is not related I think.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2023#issuecomment-389560764:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/2023#issuecomment-389560764,1,['failure'],['failure']
Availability,Windows failure is understood!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499795576:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499795576,1,['failure'],['failure']
Availability,"Windows failure is unrelated, I finally got it right, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7920#issuecomment-823246174:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/7920#issuecomment-823246174,1,['failure'],['failure']
Availability,"Windows failure is unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-996011816:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-996011816,1,['failure'],['failure']
Availability,Windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4435#issuecomment-535707018:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/4435#issuecomment-535707018,1,['failure'],['failure']
Availability,Windows failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11929#issuecomment-1358999434:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/11929#issuecomment-1358999434,1,['failure'],['failure']
Availability,"Windows failure was a git fetching error, not related to my changes:; ```; 13:51:59 > git config remote.origin.url http://root.cern/git/root.git # timeout=10; 13:52:30 Cleaning workspace; 13:52:30 > git rev-parse --verify HEAD # timeout=10; 13:53:05 Resetting working tree; 13:53:05 > git reset --hard # timeout=10; 14:03:09 ERROR: Timeout after 10 minutes; 14:03:22 ERROR: Error fetching remote repo 'origin'; 14:03:22 hudson.plugins.git.GitException: Failed to fetch from http://root.cern/git/root.git; 14:03:22 	at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:1000); 14:03:22 	at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1241); 14:03:22 	at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1301); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:125); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47); 14:03:22 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 14:03:22 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 14:03:22 	at java.lang.Thread.run(Thread.java:748); 14:03:22 Caused by: hudson.plugins.git.GitException: Command ""git reset --hard"" returned status code -1:; ```; Why is Jenkins trying to fetch from http://root.cern/git/root.git rather than from GitHub?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8197#issuecomment-843116543:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/8197#issuecomment-843116543,5,"['ERROR', 'Error', 'error', 'failure']","['ERROR', 'Error', 'error', 'failure']"
Availability,"Windows failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6288#issuecomment-684889829:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/pull/6288#issuecomment-684889829,1,['failure'],['failures']
Availability,Windows failures are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11125#issuecomment-1351786454:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/pull/11125#issuecomment-1351786454,1,['failure'],['failures']
Availability,Windows failures unrelated:; ```txt; TEST FAILURES:; 1330:roottest-cling-template-runtemplatefriend; 1736:roottest-root-io-transient-base-WriteFile; 1737:roottest-root-io-transient-base-hadd_autoload; 1785:roottest-root-meta-loadernotapp-build; 1786:roottest-root-meta-loadernotapp; 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180#issuecomment-2045811317:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/pull/15180#issuecomment-2045811317,2,"['FAILURE', 'failure']","['FAILURES', 'failures']"
Availability,Windows is not happy with the new test. I'm not sure how windows handles errors/warnings. Here's how the warning message looks now:; ![image](https://github.com/root-project/root/assets/29475282/2ddaff21-56d4-410e-95ef-852d02ba4d76),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1956072860:73,error,errors,73,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1956072860,1,['error'],['errors']
Availability,Windows machine was rebooted by IT while running the PR build. This PR passed on Windows and Linux before. I just dropped a single commit to not remove `-mfpmath=sse` from 32bit. I will just merge this as is.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3212#issuecomment-452612849:20,reboot,rebooted,20,https://root.cern,https://github.com/root-project/root/pull/3212#issuecomment-452612849,1,['reboot'],['rebooted']
Availability,"Windows:; ```; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: The ""GetOutOfDateItems"" task failed unexpectedly. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: System.IO.IOException: The process cannot access the file 'C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\x64\Release\X86CommonTableGen\X86Commo.12E1F1A7.tlog\CustomBuild.command.1.tlog' because it is being used by another process. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:1038,error,errorCode,1038,https://root.cern,https://github.com/root-project/root/pull/10247,1,['error'],['errorCode']
Availability,"With #9342, JIT time for 10k RDF nodes is down from 33.5s to 12.4s, compared to 8.7s with `-O0`. On Grafana, it's 17s before versus 23s now:. ![Bildschirmfoto vom 2021-12-02 16-58-32](https://user-images.githubusercontent.com/1613332/144457487-c34e166b-179c-4a00-86f5-2c8d35a9857a.png). `perf diff` says:; ```; 0.24% +1.26% libCling.so [.] llvm::AttributeList::hasAttribute; 2.27% +1.22% libc-2.28.so [.] __memcmp_avx2_movbe; 1.76% -1.10% [unknown] [k] 0xffffffff9f603885; 0.03% +0.85% libCling.so [.] llvm::TargetLibraryInfoImpl::getLibFunc; 2.76% -0.84% libCling.so [.] (anonymous namespace)::DAGCombiner::AddToWorklist; 0.13% +0.78% libCling.so [.] llvm::Value::getValueName; 1.69% -0.63% libCling.so [.] clang::LookupResult::resolveKind; +0.56% libCling.so [.] AddReachableCodeToWorklist; +0.50% libCling.so [.] llvm::InstCombiner::run; +0.49% libCling.so [.] (anonymous namespace)::DeadMachineInstructionElim::runOnMachineFunction; 1.47% -0.49% libCling.so [.] llvm::SelectionDAG::Combine; 0.01% +0.43% libCling.so [.] llvm::PMDataManager::findAnalysisPass; 0.02% +0.39% libc-2.28.so [.] __memchr_avx2; 0.18% +0.37% libCling.so [.] llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate; +0.36% libCling.so [.] computeKnownBits; +0.35% libCling.so [.] llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >::visitInst; 0.03% +0.35% libCling.so [.] llvm::CallBase::hasFnAttrOnCalledFunction; 1.15% -0.34% libCling.so [.] llvm::FoldingSetBase::FindNodeOrInsertPos; +0.33% libCling.so [.] llvm::removeUnreachableBlocks; +0.32% libCling.so [.] llvm::hash_c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-984765945:42,down,down,42,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-984765945,1,['down'],['down']
Availability,"With *all* these changes, I do not see anymore failures in a local run with the ubuntu 24.10 CI image. let's see if the rest of the CI agrees. Note that one of the changes is equivalent to https://github.com/root-project/root/pull/16671",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16837:47,failure,failures,47,https://root.cern,https://github.com/root-project/root/pull/16837,1,['failure'],['failures']
Availability,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp; #include ""TClassRef.h"". int main() {; TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");; cr->GetListOfMethods(true);; return 0;; }; ```. which breaks with the following stacktrace:. ```; #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6; #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6; #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6; #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6; #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182; #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140; #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159; #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438; #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017; #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391; #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803; #11 0x00005555555551dd in main () at repro.cpp:5; ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-819501708:72,failure,failures,72,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-819501708,1,['failure'],['failures']
Availability,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w.; But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-2048032253:166,error,error,166,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-2048032253,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"With @vepadulano we tracked the issue down to [here](https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1464), where cppyy is invoking `GetListOfMethods` of `std::function<void(foo::Foo*)>`. . Based on what cppyy uses from ROOT meta, the reproducer we came up with is:; ```python; import cppyy. cppyy.cppdef(r""""""\; #include <functional>. namespace foo {; class Foo {};; }. std::function<void(foo::Foo*)> f;; """"""). # This print shows the foo:: namespace; print(cppyy.gbl.f). c = cppyy.gbl.TClass(""std::function<void(foo::Foo*)>""); for i in range(c.GetListOfMethods().GetEntries()):; # This print does not show the foo::namespace; print(c.GetListOfMethods().At(i).GetName()); ```. which prints:; ```; <cppyy.gbl.std.function<void(foo::Foo*)> object at 0x7fd8d78e7050>; function<void(Foo*)>; function<void(Foo*)>; function<void(Foo*)>; function<void(Foo*)>; operator=; operator=; operator=; swap; operator bool; operator(); target_type; ~function<void(Foo*)>; ```. I.e. we can see that, while the first print of `f` still shows `foo::Foo`, when using `GetListOfMethods`, the returned constructors and destructor have lost the `foo::` namespace in the template argument. Pinging @Axel-Naumann so he's aware.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10680#issuecomment-1163250919:38,down,down,38,https://root.cern,https://github.com/root-project/root/issues/10680#issuecomment-1163250919,2,"['Ping', 'down']","['Pinging', 'down']"
Availability,"With Davix not present on the machine, the tutorials tutorials/v7/ntuple/ntpl004_dimuon.C is ran and fails:; ```; ""tutorial-v7-ntuple-ntpl004_dimuon"" start time: Dec 04 11:53 CST; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/v7/ntuple/ntpl004_dimuon.C...; terminate called after throwing an instance of 'std::runtime_error'; what(): Cannot find plugin handler for RRawFileDavix; CMake Error at /home/pcanal/root_working/build/master-opt/RootTestDriver.cmake:237 (message):; error code: Child aborted. <end of output>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6916:466,Error,Error,466,https://root.cern,https://github.com/root-project/root/issues/6916,2,"['Error', 'error']","['Error', 'error']"
Availability,"With PCH+Module, sometimes compiler gives a hard error:; _Module file ‘<some-file path>.pcm' is out of date and needs to be rebuilt._; Adding fmodules-disable-diagnostic-validation helps in situation if two compiler instances only differ in diagnostic options, the later instance will not invalidate the original pcm.; Details: https://reviews.llvm.org/D22773",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2680:49,error,error,49,https://root.cern,https://github.com/root-project/root/pull/2680,1,['error'],['error']
Availability,"With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user; interface, because it is an implementation detail of the RooFormulaVar; and RooGenericPdf. However, there are cases where people used the RooFormula interface to; access some information that was otherwise unavailable, like the set of; actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem; like these classes provide an interface to the actual variables; themselves:. ```c++; const RooArgList& dependents() const { return _actualVars; }; ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine; ```. However, `_actualVars` is containing **all** variables, not the actual; variables as the name suggests!. Fixing this removes the need to access the actual vars via the; `RooFormula`. This connects to a discussion that was held on GitHub:; https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12826:1273,error,errors,1273,https://root.cern,https://github.com/root-project/root/pull/12826,1,['error'],['errors']
Availability,"With `Int_t n = kMax;` on Fedora, root master version:; ```; root [0] ; Processing scan.C...; In file included from input_line_8:1:; /home/musinsky/scan.C:10:13: warning: variable length arrays in C++ are a Clang extension [-Wvla-cxx-extension]; Float_t a[kMax];; ^~~~; /home/musinsky/scan.C:10:13: note: read of non-const variable 'kMax' is not allowed in a constant expression; /home/musinsky/scan.C:8:9: note: declared here; Int_t kMax = 10;; ^; root [1] t->Scan(""a[0]""); ************************; * Row * a[0] *; ************************; ERROR leaf:a, len=22 and max=8; * 0 * -0.434764 *; ERROR leaf:a, len=22 and max=8; * 1 * 1.3911939 *; ERROR leaf:a, len=22 and max=8; * 2 * 1.1125664 *; ERROR leaf:a, len=22 and max=8; * 3 * 2.0609021 *; ERROR leaf:a, len=22 and max=8; * 4 * -0.182436 *; ************************; (long long) 5; root [2] ; ```; Also tested with `constexpr Int_t kMax = 10;` to same problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16730#issuecomment-2431829823:543,ERROR,ERROR,543,https://root.cern,https://github.com/root-project/root/issues/16730#issuecomment-2431829823,5,['ERROR'],['ERROR']
Availability,"With a file has several cluster range but has fAutoFlush set to a negative value: eg. t->Print(""clusters"");; ******************************************************************************; *Tree :t : t *; *Entries : 1000 : Total = 424803 bytes File Size = 33982 *; * : : Tree compression factor = 12.78 *; ******************************************************************************; Cluster Range # Entry Start Last Entry Size; 0 0 49 10; ….; 18 900 949 10; 19 950 999 -2000000. TClusterIterator was not estimate correctly the cluster size of the last range.; This resulted in some circumstances to message like:. Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=900 fEntryCurrent=950 fNextClusterStart=956 but fCurrentEntry should not be in between the two; Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=950 fEntryCurrent=950 fNextClusterStart=953 but fCurrentEntry should not be in between the two; Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=950 fEntryCurrent=950 fNextClusterStart=953 but fCurrentEntry should not be in between the two; Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=950 fEntryCurrent=950 fNextClusterStart=953 but fCurrentEntry should not be in between the two. A work-around is to increase the TTreeCacheSize to be large enough that it would contains; all the entries of the last range. See https://root-forum.cern.ch/t/ttreecache-fillbuffer-error-with-root-6-14-04/30914; the same problem was also reported by CMS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2741:617,Error,Error,617,https://root.cern,https://github.com/root-project/root/pull/2741,5,"['Error', 'error']","['Error', 'error-with-root-']"
Availability,"With https://github.com/root-project/root/pull/10561, the behavior on M1 should be:; ```; root [0] whatever; input_line_9:2:3: error: use of undeclared identifier 'whatever'; (whatever); ^; root [1]; ```; ie, the error is still reported but there is no exception thrown.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10548#issuecomment-1123368604:127,error,error,127,https://root.cern,https://github.com/root-project/root/issues/10548#issuecomment-1123368604,2,['error'],['error']
Availability,With latest libpng versions value 0 recognized as error and; produced results are wrong,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7359:50,error,error,50,https://root.cern,https://github.com/root-project/root/pull/7359,1,['error'],['error']
Availability,With latest libpng versions value 0 recognized as error and; produced results are wrong.; Mean on newest Linux distributions one get problem to use TASImage class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7357:50,error,error,50,https://root.cern,https://github.com/root-project/root/pull/7357,1,['error'],['error']
Availability,With new version (1.4) of scikit-learn the bool parameters must be passed as bool and not anymore as integers. In addition in AdaBoost base_estimator was renamed to estimator. This Pull request should fix failures observed in PR builds when the new version (1.4) of scikit-learn is used,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14977:205,failure,failures,205,https://root.cern,https://github.com/root-project/root/pull/14977,1,['failure'],['failures']
Availability,"With normal build I cannot reproduce error.; With `clang` and `-Dasan=ON` I getting compilation problem when generating G__Core.cxx dictionary.; ```; [ 44%] Generating G__Core.cxx, ../lib/Core.pcm; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:18:; In file included from /usr/include/c++/13/condition_variable:40:; /usr/include/c++/13/bits/chrono.h:251:29: error: redefinition of '__is_duration_v<duration<_Rep, _Period>>'; inline constexpr bool __is_duration_v<duration<_Rep, _Period>> = true;; ^; /usr/include/c++/13/chrono:41:10: note: '/usr/include/c++/13/bits/chrono.h' included multiple times, additional include site in header from module 'std.chrono'; #include <bits/chrono.h>; ```. Full error output: [makelog.txt](https://github.com/root-project/root/files/10519180/makelog.txt). I using clang 15",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1406493933:37,error,error,37,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1406493933,3,['error'],['error']
Availability,"With opengl disabled:; ```; //Enable support for OpenGL (requires libGL and libGLU); opengl:BOOL=OFF; ```; roottest-python-regression-regression runs but fails:; ```; ======================================================================; ERROR: Try invoking TGLVertex3::operator+ twice; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/pcanal/root_working/code/root/roottest/python/regression/PyROOT_regressiontests.py"", line 512, in test1TGLVertex3OperatorPlus; from ROOT import TGLVertex3, TGLVector3; ImportError: cannot import name 'TGLVertex3' from 'ROOT' (/home/pcanal/root_working/build/master-opt/lib/ROOT/__init__.py). ======================================================================; ERROR: Check that the right constructor of TGLLine3 is called; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/pcanal/root_working/code/root/roottest/python/regression/PyROOT_regressiontests.py"", line 524, in test2TGLLine3Constructor; from ROOT import TGLLine3, TGLVertex3, TGLVector3; ImportError: cannot import name 'TGLLine3' from 'ROOT' (/home/pcanal/root_working/build/master-opt/lib/ROOT/__init__.py). ----------------------------------------------------------------------. FAILED (errors=2); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6915:239,ERROR,ERROR,239,https://root.cern,https://github.com/root-project/root/issues/6915,3,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,"With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; ... but; So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:. ```; CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; Call Stack (most recent call first):; /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); ```. If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. Could you trigger the CI, please? I would like to know if these changes are at least working. To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY. ```cmake; IF(TARGET ${dictionary}); LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); ENDIF(); ```; ```cmake; IF(TARGET ${dictionary}); target_sources(${dictionary} PRIVATE ${gensrcdict}); ENDIF(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587575128:239,error,error,239,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587575128,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"With root 6.22.00, the following fragment. ```; import ROOT; class Foo (ROOT.TProfile): pass. ```. gives errors:. ```; >>> import ROOT; >>> class Foo (ROOT.TProfile): pass; ... ; input_line_38:8:19: error: redeclaration of using declaration; using TProfile::BufferFill;; ~~~~~~~~~~^; input_line_38:7:19: note: previous using declaration; using TProfile::BufferFill;; ^; input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'; using TProfile::SetBins;; ^; /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here; void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t); ^; input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'; using TProfile::SetBins;; ^; /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here; void SetBins(Int_t, const Double_t*, Int_t, const Double_t*); ^; input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'; using TProfile::SetBins;; ^; /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here; void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In...; ^; input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'; using TProfile::SetBins;; ^; /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here; void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t...; ^; input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'; using TProfile::Fill;; ^; /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here; Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}; ^; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: no python-side overrides supported (fai",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6345:105,error,errors,105,https://root.cern,https://github.com/root-project/root/issues/6345,5,['error'],"['error', 'errors']"
Availability,"With the attached example, the direct case takes 23.6s while original TTreeReader version takes 34.2s. With the included changes, the TTreeReader version is down to 28.7s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216:157,down,down,157,https://root.cern,https://github.com/root-project/root/pull/3216,1,['down'],['down']
Availability,"With the bundled MS corefonts, root license isn't completely free. What I ask is to make MS corefonts optional. A patch from Fedora is also available here https://src.fedoraproject.org/rpms/root/blob/rawhide/f/root-fontconfig.patch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8357:140,avail,available,140,https://root.cern,https://github.com/root-project/root/issues/8357,1,['avail'],['available']
Availability,"With the example below, we get:. ```; Error in <TTreeReaderArrayBase::GetBranchContentDataType()>: The branch h.fData.fPx contains a data type 9 for which the dictionary cannot be retrieved.; ```. This was seen during investigations by CMSSW team of leveraging `Double32_t` and `Float16_t` to reduce data size. Cheers,; Philippe. ```; #include ""TTree.h""; #include ""TTreeReader.h""; #include ""TTreeReaderArray.h"". struct Inside {; Double32_t fPx;; double fPy;; };. struct Holder {; std::vector<Double32_t> fValues;; std::vector<Inside> fData;; };. #ifdef __ROOTCLING__; #pragma link C++ class Inside+;; #pragma link C++ class Holder+;; #pragma link C++ class std::vector<Inside>+;; #pragma link C++ class std::vector<Double32_t>+;; #endif. void exec(); {; auto t = new TTree(""t"",""t"");; Holder h;; t->Branch(""h."", &h);; t->Fill();; t->Print();; TTreeReader r(t);; //TTreeReaderArray<Double32_t> arr1(r, ""h.fValues"");; TTreeReaderArray<Double32_t> arr2(r, ""h.fData.fPx"");; TTreeReaderArray<Double32_t> arr3(r, ""h.fData.fPy"");; r.Next();; // arr1.GetSize();; arr2.GetSize();; arr3.GetSize();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11260:38,Error,Error,38,https://root.cern,https://github.com/root-project/root/issues/11260,1,['Error'],['Error']
Availability,"With the following macro the error bars overlapped the stat box:. {; vector < float > X, Xerr;; vector < float > Y, Yerr;; for(int i=0 ; i<10 ; ++i) {; X.push_back(i*0.1); Xerr.push_back(1.);; Y.push_back(i*2.2); Yerr.push_back(1.);; }; auto g = new TGraphErrors(X.size(), &(X[0]), &(Y[0]), &(Xerr[0]), &(Yerr[0]));. auto f = new TF1(""f"",""pol1"",0.,1.); g->Fit(""f"",""QR"");; gStyle->SetOptFit(true);. g->Draw();; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1684:29,error,error,29,https://root.cern,https://github.com/root-project/root/pull/1684,1,['error'],['error']
Availability,"With the helpers for column creation introduced by #16116, memory consumption during compilation significantly increases (from ~200MB to ~600MB using clang) due to the fact that templated field types, and therefore all possible column representations are automatically instantiated. This commit prevents this automatic instantiation from happening by `extern`-alizing all `RSimpleField` template specializations and only instantiating them in `RField.cxx`, bringing down memory consumption to ~230MB.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16284:466,down,down,466,https://root.cern,https://github.com/root-project/root/pull/16284,1,['down'],['down']
Availability,"With the module generation in rootcling Clang rlies on AST consumers; to do the module generation work for it. Right now this doesn't work; however with the interpreter, as we just overwrite the deserialization; listener that clang added which will cause strange errors during; the module generation (the most prompinent error is that the number; of recorded submodules will be incorrect, as this it the first thing; that Clang checks before writing a module and which is recorded by; an ASTDeserializationListener). This patch just adds a multiplexer here that allows us to keep the; old listener while also adding the one we have.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/995:263,error,errors,263,https://root.cern,https://github.com/root-project/root/pull/995,2,['error'],"['error', 'errors']"
Availability,"With the objective of fixing tests, this PR exposes in the ROOT module some functionality of the CPyCppyy extension module. Such functionality is available in the current PyROOT and some tests rely on it. A more exhaustive investigation on which functionality of cppyy we want to expose via the ROOT module is required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3370:146,avail,available,146,https://root.cern,https://github.com/root-project/root/pull/3370,1,['avail'],['available']
Availability,"With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):; ```; Error in <readfile>: For entries 0 we have result=19200; ```; This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:; ```; if (!foundRelatedSplit) {; continue;; }; ```; which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```; diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx; index 58b50a93..e0aef7e1 100644; --- a/root/io/issue-9899/read_cmssw_class_v3.cxx; +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx; @@ -129,10 +129,8 @@ struct PersHighData {; }; int check(int slide = 1) {; int res = 0;; -#ifdef FIXED_ISSUE_99xx; for(auto &d : fPersLowData); res += d.check(slide, 0);; -#endif; for(auto &d : fLowData); res += d.check(slide * BIT(6), 10);; return res;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9924:136,Error,Error,136,https://root.cern,https://github.com/root-project/root/issues/9924,1,['Error'],['Error']
Availability,"With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12018:233,down,down,233,https://root.cern,https://github.com/root-project/root/pull/12018,1,['down'],['down']
Availability,"With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak; symbols that the JIT had already emitted, instead only looking at dlsym. This; causes a significant increase in JITted symbols, and thus a significant slow-down; of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12163:235,down,down,235,https://root.cern,https://github.com/root-project/root/pull/12163,1,['down'],['down']
Availability,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11945:434,down,down,434,https://root.cern,https://github.com/root-project/root/pull/11945,1,['down'],['down']
Availability,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12096:434,down,down,434,https://root.cern,https://github.com/root-project/root/pull/12096,1,['down'],['down']
Availability,"With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11517:110,mask,masked,110,https://root.cern,https://github.com/root-project/root/pull/11517,1,['mask'],['masked']
Availability,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754#issuecomment-1155267116:53,failure,failures,53,https://root.cern,https://github.com/root-project/root/pull/10754#issuecomment-1155267116,1,['failure'],['failures']
Availability,"With this patch, this code:. ```python; import ROOT; from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":; client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)); df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client); df = ROOT.RDataFrame(10); c = df.Count(); cs = ROOT.RDF.Experimental.VariationsFor(c); print(cs[""nominal""]); ```. breaks with this error:. ```; Traceback (most recent call last):; File ""/tmp/distrdf.py"", line 9, in <module>; cs = ROOT.RDF.Experimental.VariationsFor(c); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor; return rdf_variationsfor(resptr); ^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: Template method resolution failed:; ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>; TypeError: could not convert argument 1; Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)""; ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13248#issuecomment-1641068037:425,error,error,425,https://root.cern,https://github.com/root-project/root/pull/13248#issuecomment-1641068037,1,['error'],['error']
Availability,"Without memstat support, `root -memstat` should not be available",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6410:55,avail,available,55,https://root.cern,https://github.com/root-project/root/issues/6410,1,['avail'],['available']
Availability,"Without this patch we get:. ld: Undefined symbols:; TMacOSXSystem::TMacOSXSystem(), referenced from:; ROOT::new_TMacOSXSystem(void*) in G__Core.cxx.o; ROOT::new_TMacOSXSystem(void*) in G__Core.cxx.o; ROOT::newArray_TMacOSXSystem(long, void*) in G__Core.cxx.o; ROOT::newArray_TMacOSXSystem(long, void*) in G__Core.cxx.o; TMacOSXSystem::~TMacOSXSystem(), referenced from:; ROOT::newArray_TMacOSXSystem(long, void*) in G__Core.cxx.o; ROOT::newArray_TMacOSXSystem(long, void*) in G__Core.cxx.o; ROOT::deleteArray_TMacOSXSystem(void*) in G__Core.cxx.o; typeinfo for TMacOSXSystem, referenced from:; ROOT::GenerateInitInstanceLocal(TMacOSXSystem const*) in G__Core.cxx.o; clang: error: linker command failed with exit code 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14387:673,error,error,673,https://root.cern,https://github.com/root-project/root/pull/14387,1,['error'],['error']
Availability,"Without this patch, using python 3.6 in anaconda3:. ```; >>> import ROOT; >>> h = ROOT.TH1D('test', 'test', 100, 0, 1); AttributeError: type object 'TArray' has no attribute '__getitem__'. The above exception was the direct cause of the following exception:. SystemError: <built-in method mro of ROOT.PyRootType object at 0x17d57b8> returned a result with an error set; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/maxnoe/.local/root5/lib/ROOT.py"", line 459, in __getattr1; return getattr( self, name ); File ""/home/maxnoe/.local/root5/lib/ROOT.py"", line 486, in __getattr2; attr = _root.LookupRootEntity( name ); AttributeError: TH1D; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1005#issuecomment-330495278:359,error,error,359,https://root.cern,https://github.com/root-project/root/pull/1005#issuecomment-330495278,1,['error'],['error']
Availability,"Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/704:37,error,error,37,https://root.cern,https://github.com/root-project/root/pull/704,1,['error'],['error']
Availability,Work around to silent a compiler error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2942:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/2942,1,['error'],['error']
Availability,Workaround for potential `fatal error C1001: Internal compiler error` in `RelWithDebInfo` mode and fatal `error LNK1179: invalid or corrupt file: duplicate COMDAT` in `Debug` mode. This happens with `CMAKE_CXX_STANDARD=14` only (i.e. it works fine with `CMAKE_CXX_STANDARD=17`),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10163:32,error,error,32,https://root.cern,https://github.com/root-project/root/pull/10163,3,['error'],['error']
Availability,"Working on osx, I now can reproduce the failures. Apart from ttree_friends, they are due to some change between these two commits: d3b27fb46c..c82254e4de",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768#issuecomment-374752465:40,failure,failures,40,https://root.cern,https://github.com/root-project/root/pull/1768#issuecomment-374752465,1,['failure'],['failures']
Availability,"Works! Example output:. ```; -- stderr output is:; CMake Error at CMakeLists.txt:61 (find_package):; Could not find a package configuration file provided by ""LLVM"" with any of; the following names:. LLVMConfig.cmake; llvm-config.cmake. Add the installation prefix of ""LLVM"" to CMAKE_PREFIX_PATH or set; ""LLVM_DIR"" to a directory containing one of the above files. If ""LLVM""; provides a separate development package or SDK, be sure it has been; installed.; ```. (technically using the backport, #6819 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6816#issuecomment-728266387:57,Error,Error,57,https://root.cern,https://github.com/root-project/root/pull/6816#issuecomment-728266387,1,['Error'],['Error']
Availability,"Would it be nicer to catch and help the user ""please install python-pandas to run this tutorial"" and then exit 1 (aka error)? Else there will be an import error that users might not understand without Google's help? I'm asking, I don't have an opinion yet :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616459516:118,error,error,118,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616459516,2,['error'],['error']
Availability,"Would something like this be sufficient ?; It checks three materials against the PDG values from https://pdg.lbl.gov/2020/AtomicNuclearProperties; ```; $> root.exe test_material_units.C\(\""G4\""\); $> root.exe test_material_units.C\(\""ROOT\""\); ```; [test_material_units.C.txt](https://github.com/root-project/root/files/9207970/test_material_units.C.txt). Whenever it would say ""TEST FAILED"" an error condition occurred.; On Success:; ```; Processing ../test_material_units.C(""G4"")...; Info in <TGeoManager>: Changing system of units to Geant4 units (mm, ns, MeV).; Using Geant4 system of units. ; Element: SI Z=14 N=28.000000 A=28.085500 [g/mole]; Material Si A=28.0855 Z=14 rho=2.329 radlen=93.5361 intlen=457.729 index=0; TEST SUCCEEDED Si TGeoMaterial Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST SUCCEEDED Mix_1_Si TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST SUCCEEDED Mix_1_Si TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST SUCCEEDED Mix_2_Si TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST SUCCEEDED Mix_3_Si TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]; Material Fe A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=169.589 index=4; TEST SUCCEEDED Fe TGeoMaterial Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST SUCCEEDED Mix_1_Fe TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST SUCCEEDED Mix_1_Fe TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.028 % IntLen: 1.1 % ; TEST SUCCEEDED Mix_2_Fe TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST SUCCEEDED Mix_3_Fe TGeoMixture Units: Geant4 Deviation to PDG density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; Element: U Z=92 N=238.000000 A=238.028900 [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1197929515:395,error,error,395,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1197929515,1,['error'],['error']
Availability,"Would that mean that, for the default built users would use, the user will **not** be allowed to use a similar using statement and if they do then they would get obscure failure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-376323878:170,failure,failure,170,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-376323878,1,['failure'],['failure']
Availability,Wouldn't `RMergeableVariations<T>::Merge` just need to do a downcast from `RMergeableValueBase` to `RMergeableValue<T>`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9942#issuecomment-1061833734:60,down,downcast,60,https://root.cern,https://github.com/root-project/root/pull/9942#issuecomment-1061833734,1,['down'],['downcast']
Availability,Wouldn't it help in finding a better/alternative solution to understand the nature/mechanics/reason of the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1700#issuecomment-371171810:107,failure,failure,107,https://root.cern,https://github.com/root-project/root/pull/1700#issuecomment-371171810,1,['failure'],['failure']
Availability,"Wow, thanks for proving that this is possible!. I'm not a big fan of adding complexity that's mostly without effect for users: we had only one (1) complaint on this, ever, and that function is heavy stuff where I'm not sure whether all shells that currently support `thisroot.sh` will continue to be happy. Say ksh, zsh, etc... . Maybe an error message if `BASH_...` isn't available would be enough?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10332#issuecomment-1089164416:339,error,error,339,https://root.cern,https://github.com/root-project/root/pull/10332#issuecomment-1089164416,2,"['avail', 'error']","['available', 'error']"
Availability,"Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me. . BTW, when I try to run root locally, I meet some odd problems and it looks like I can proceed after cleanning the cache.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1972822091:65,error,errors,65,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972822091,3,['error'],['errors']
Availability,WriteAST now correctly checks for errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/539:34,error,errors,34,https://root.cern,https://github.com/root-project/root/pull/539,1,['error'],['errors']
Availability,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6686#issuecomment-714335476:292,reliab,reliably,292,https://root.cern,https://github.com/root-project/root/issues/6686#issuecomment-714335476,1,['reliab'],['reliably']
Availability,"Wy8Q8red4Pa6zme6lmNgs%3D&reserved=0>; How do I use curl to download on lxplus ?. regards,; Asoka. > On May 12, 2021, at 11:47 AM, Simon Liu ***@***.***> wrote:; > ; > Hi, Asoka; > ; > I'm not sure which exactly problem you are chasing for, as far as I can tell, there is no problem access webdav.lcg.triumf.ca from lxplus, and downloading files from there works fine.; > ; > thanks; > ; > Simon; > ; > On 5/12/2021 11:13 AM, Asoka De Silva wrote:; >> ah ... thanks, I missed that. So ping works from lxplus but I still cannot do a curl to ***@***.***; >> ; >> regards,; >> Asoka; >> ; >>> On May 12, 2021, at 11:11 AM, Di Qing ***@***.*** ***@***.***>> wrote:; >>> ; >>> Asoka,; >>> ; >>> There was a mistake in your ping command, did you see the 'ping' in the middle, so actually it was pinging host ping. ; >>> ; >>> Regards,; >>> ; >>> Di; >>> ; >>> On 2021-05-12 10:43 a.m., Asoka De Silva wrote:; >>>> hmm ... that was really unexpected for me for lxplus ...; >>>> ; >>>> ***@***.*** ~]$ ping -c 10 ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/>; >>>> PING (137.138.28.175) 56(124) bytes of data.; >>>> ; >>>> --- ping statistics ---; >>>> 10 packets transmitted, 0 received, 100% packet loss, time 8999ms; >>>> ; >>>> ***@***.*** ~]$ ; >>>> ; >>>> Vitaliy, shouldn't we expect that to be accessible from lxplus ?; >>>> ; >>>> regards,; >>>> Asoka; >>>> ; >>>>> On May 12, 2021, at 10:37 AM, Di Qing ***@***.*** ***@***.***>> wrote:; >>>>> ; >>>>> Maybe the connections were from commodity network? Are you able to ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/>?; >>>>> ; >>>>> Thanks,; >>>>> ; >>>>> Di; >>>>> ; >>>>>> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.*** ***@***.***>> wrote:; >>>>>> ; >>>>>> ﻿ Hi Axel,; >>>>>> ; >>>>>> I don't know but I'll add Simon and Di who are the Tier-1 experts and may have ideas.; >>>>>> ; >>>>>> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >>>>>> ; >>>>>> ; >>>>>>> ; >>>>>>>> s I crosscheck (to see ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:1559,ping,ping,1559,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,2,['ping'],['ping']
Availability,"X: 64; root [1] h.FillRandom(""gaus""); root [2] h.Draw(); Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTQt6WebDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTQt5WebDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTCefDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Info in <THttpEngine::Create>: Starting HTTP server on port 127.0.0.1:9005; Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTQt6WebDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTQt5WebDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Error in <TMacOSXSystem::FindDynamicLibrary>: libROOTCefDisplay[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /Users/build/lib:/Users/build/lib::.:/Users/build/lib:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Opening in existing browser session.; [2237:259:0425/163421.850831:ERROR:background_contents_service.cc(441)] No extensio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15340:1730,Error,Error,1730,https://root.cern,https://github.com/root-project/root/issues/15340,1,['Error'],['Error']
Availability,XX.cpp(324): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_384856fbdb': No space left on device [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\clangCodeGen.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/STLExtras.h(639): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_3df0240bdb': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCleanup.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\clangCodeGen.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SplitModule.cpp(264): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_8b86c3c0in': No space left on device [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/Decl.h(1498): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_96cc0c13db': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Parse\ParseExpr.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Parse\clangParse.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/Decl.h(431): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_2de6df6cdb': No space left on device (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4328#issuecomment-527145473:1129,error,error,1129,https://root.cern,https://github.com/root-project/root/pull/4328#issuecomment-527145473,1,['error'],['error']
Availability,"X] Checked for duplicates. ### Description. This https://github.com/root-project/root/pull/14703 (my guess on the changes, I did not confirm that this is the case) seems to have caused issues in python projects depending on root. E.g. https://lcgapp-services.cern.ch/cdash/testDetails.php?test=23867111&build=312289 ; ```; # setting LC_ALL to ""C""; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/__init__.py"", line 29, in <module>; from .Bindings import * # noqa: F401 F403; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/Bindings.py"", line 55, in <module>; import cppyy; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/__init__.py"", line 71, in <module>; from ._cpython_cppyy import *; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/_cpython_cppyy.py"", line 18, in <module>; c = loader.load_cpp_backend(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy_backend/loader.py"", line 79, in load_cpp_backend; raise RuntimeError(""could not load cppyy_backend library""); RuntimeError: could not load cppyy_backend library; ```. and many others in the list https://lcgapp-services.cern.ch/cdash/viewTest.php?onlyfailed&buildid=312289. Are we missing some required changes to build options?. ### Reproducer. On any centos7 machine with cvmfs (or use available stack for your OS); ```; source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc11-dbg/setup.sh; python -c ""import GaudiPython""; ```. ### ROOT version. Master from tonight.; Things were fine yesterday. ### Installation method. build from sources in lcgcmake, options https://gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt#L95. ### Operating system. centos7, alma9, alma8, ubuntu20, ubuntu22. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14904:1552,avail,available,1552,https://root.cern,https://github.com/root-project/root/issues/14904,1,['avail'],['available']
Availability,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1068#issuecomment-332827543:72,down,down,72,https://root.cern,https://github.com/root-project/root/pull/1068#issuecomment-332827543,1,['down'],['down']
Availability,"Xs& ...) [with Xs = {ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TH1D; decltype ((((ROOT::Internal::RDF::FillHelper&lt;HIST&gt;*)this)-&gt;ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::fObjects[slot]-&gt;Fill(*((ROOT::Internal::RDF::FillHelper*)this)-&gt;ROOT::Internal::RDF::FillHelper::MakeBegin(ROOT::Internal::RDF::FillHelper::Exec::xs)...), void())) = void]::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 1&gt;]’ ; - [2022-08-05T22:42:08.524Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:509:28: error: non-constant condition for static assertion ; - [2022-08-05T22:42:08.524Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:58: error: no matching function for call to ‘GetNthElement&lt;colidx&gt;(const ROOT::VecOps::RVec&lt;int&gt;&)’ ; - [2022-08-05T22:42:08.525Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:49: error: call to non-‘constexpr’ function ‘ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::Exec(unsigned int, const Xs& ...) [with Xs = {ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TProfile2D; decltype ((((ROOT::Internal::RDF::FillHelper&lt;HIST&gt;*)this)-&gt;ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::fObjects[slot]-&gt;Fill(*((ROOT::Internal::RDF::FillHelper*)this)-&gt;ROOT::Internal::RDF::FillHelper::MakeBegin(ROOT::Internal::RDF::FillHelper::Exec::xs)...), void())) = void]::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 3&gt;]’ ; - [2022-08-05T22:42:08.525Z]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11127#issuecomment-1207071169:2995,error,error,2995,https://root.cern,https://github.com/root-project/root/pull/11127#issuecomment-1207071169,1,['error'],['error']
Availability,Yeah we just had worse compilation errors :/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12692#issuecomment-1546716488:35,error,errors,35,https://root.cern,https://github.com/root-project/root/pull/12692#issuecomment-1546716488,1,['error'],['errors']
Availability,"Yeah well, certainly :-) I was afraid that my recently merged change to `R__LOAD_LIBRARY` caused these failures, but the failures are indeed local to this PR. Phew!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7566#issuecomment-801478822:103,failure,failures,103,https://root.cern,https://github.com/root-project/root/pull/7566#issuecomment-801478822,2,['failure'],['failures']
Availability,"Yeah, I know the problem, it is just an accident that I defined it twice. I mean if I comment out the draw statements (g->Draw(""AP""); ; or h->Draw(""HIST""); ), I can compile and run it without any problem; the error only appears with the draw statement, I can't understand it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256#issuecomment-849661921:209,error,error,209,https://root.cern,https://github.com/root-project/root/issues/8256#issuecomment-849661921,1,['error'],['error']
Availability,"Yeah, looks like ROOT/meta in master still does it wrong. Example:. ```; import cppyy; ; cppyy.cppdef(""""""\; class TOIClass {; public:; template<typename T>; bool operator<(T t) { return true; }; };""""""). from cppyy.gbl import TOIClass. assert (TOIClass() < 1); ```. which runs fine to completion, v.s.:. ```; import ROOT; ; ROOT.gInterpreter.Declare(""""""\; class TOIClass {; public:; template<typename T>; bool operator<(T t) { return true; }; };""""""). from ROOT import TOIClass. assert (TOIClass() < 1); ```. which gives me:; ```; input_line_39:6:43: error: no member named 'operator<<' in 'TOIClass'; new (ret) (bool) (((TOIClass*)obj)->operator<<int>(*(int*)args[0]));; ~~~~~~~~~~~~~~~~ ^; input_line_39:10:25: error: no member named 'operator<<' in 'TOIClass'; ((TOIClass*)obj)->operator<<int>(*(int*)args[0]);; ```. Sure, this is a trivial example, nothing to do with lookup per se, but it's one of many issues that are resolved by not calling operator functions explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-697743066:549,error,error,549,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697743066,2,['error'],['error']
Availability,"Yeah, the failure about the formatting is because the code is not conform with the clang-format style of ROOT:; https://github.com/root-project/root/blob/master/.clang-format. But since RooFit never followed the style to begin with (at least for all files older than a year), we will just ignore the errors. It was decided to not do the reformatting of the whole RooFit code for now, because this would obfuscate the development history with formatting changes in every line (`git blame` would not be so useful anymore). So this PR is ready to go as it is! I'll merge it once the Jenkins tests are passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11507#issuecomment-1271324440:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/pull/11507#issuecomment-1271324440,2,"['error', 'failure']","['errors', 'failure']"
Availability,"Yeah, they probably do some quirky simd stuff in there :). I realized yesterday that the stuff for creation of sdf textures always puts them in $ROOTSYS/ui5/eve7/ ... which will not be writable for experiment-wide / cvmfs installs. Would it be possible to do something like this:; 1. if $ROOTSYS/ is not writable, write to ./fonts/;; 2. forward requests for files in $ROOTSYS/ui5/eve7/ to some REveManager function that can then check where these fonts are actually available and route the GET to the proper local file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2172404599:466,avail,available,466,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2172404599,1,['avail'],['available']
Availability,"Yep, but it seems that this issue is still buggy in master. They suggest a workaround, but not sure... ```; QUICK FIXES FOR USERS:. If you personally encounter this ""Error in line 4595: Opening and ending tag; mismatch."", and you just want to fix that issue, then the solution is to; either make sure that all your enums are documented or that they are; appropriately hidden (nested in an undocumented class, or nested in a; filtered-out namespace (e.g., ""detail"")). This is what I did, it fixed all; my issues.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011076618:166,Error,Error,166,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011076618,1,['Error'],['Error']
Availability,"Yes I did — I ended up exiting the environment I made and ROOT ended up working through Python, so maybe I fixed my error by redownloading through conda. Sent from my iPhone. > On May 31, 2022, at 2:34 PM, Vincenzo Eduardo Padulano ***@***.***> wrote:; > ; > ﻿; > Hi @ethereal-space-cadet16 ,; > ; > Unfortunately without seeing the code you tried to run, your OS, Python version and ROOT version, it's hard to understand the actual cause of the crash.; > ; > Let's start easy. You said you tried conda, did you explicitly try the instructions at https://root.cern/install/#conda ?; > ; > $ conda config --set channel_priority strict; > $ conda create -c conda-forge --name myenv root; > $ conda activate myenv; > Then, after the command above runs succesfully, I will take the first example available from the document you link, that is:; > ; > import ROOT; > print(""This is my script""); > If this two steps still lead to errors or crashes please report back, with your OS, Python version (the one that conda uses), the output of echo $PYTHONPATH.; > ; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676#issuecomment-1142102654:116,error,error,116,https://root.cern,https://github.com/root-project/root/issues/10676#issuecomment-1142102654,4,"['avail', 'echo', 'error']","['available', 'echo', 'error', 'errors']"
Availability,"Yes I noticed that as well. I switched to 1533 and got the same seg fault. > The file `/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1519` doesn't exist/was removed. I tried to reproduce the error with `1529` by loading the stripped down header file (`root test.h`)instead and I now get a different error message.; > ; > ```; > Processing temp.h... ; > In file included from input_line_8:1: ; > In file included from /afs/cern.ch/user/d/dvalapar/temp.h:2: ; > In file included from /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20: ; > /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:35:21: error: redefinition of 'CLID_ProtoParticle' ; > static const CLID CLID_ProtoParticle = 803; ; > ^ ; > input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple times, additional include site here ; > #include ""/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h"" ; > ^ ; > /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple ; > times, additional include site here ; > #include ""Event/ProtoParticle.h"" ; > ^ ; > ...; > ...SKIPPED LINES; > ...; > /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:55:9: error: redefinition of 'ProtoParticle' ; > class ProtoParticle final : public KeyedObject<int> { ; > ^ ; > input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2161206521:68,fault,fault,68,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2161206521,5,"['down', 'error', 'fault']","['down', 'error', 'fault']"
Availability,Yes I see the command rans. The files are deleted once sync. Let me download the tar ball and see what's in.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011035817:68,down,download,68,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011035817,1,['down'],['download']
Availability,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-828637952:193,redundant,redundant,193,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952,2,['redundant'],['redundant']
Availability,"Yes `docbuild` was empty and I removed `docoutput`. I just redid it. I get the same. Elsewhere:; ```; Generating docs for compound TestTH3DRange...; Generating docs for compound TExceptionHandler...; doxygen(79550,0x70000e706000) malloc: *** error for object 0x7f822b76c000: pointer being freed was not allocated; doxygen(79550,0x70000e706000) malloc: *** set a breakpoint in malloc_error_break to debug; /bin/sh: line 1: 79550 Abort trap: 6 /Users/couet/bin/doxygen /tmp/docbuild/Doxyfile.dox; make[2]: *** [CMakeFiles/dox] Error 134; make[1]: *** [CMakeFiles/dox.dir/all] Error 2; make: *** [all] Error 2; couet@Oliviers-MBP docbuild % . ```; I typed ; ```; make -j8; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1077428404:242,error,error,242,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1077428404,4,"['Error', 'error']","['Error', 'error']"
Availability,"Yes but TTreeProcessorMT is implemented in terms of TThreadExecutor for everything related to tasks. If that ever changes, and a call to EnableThreadSafety is not otherwise added, several TTreeProcessorMT tests will crash. Do you want the (redundant) EnableThreadSafety call in TTreeProcessorMT's ctor as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609784958:240,redundant,redundant,240,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609784958,1,['redundant'],['redundant']
Availability,"Yes it can be closed. Sent from my iPhone. > On May 31, 2022, at 2:59 PM, Vincenzo Eduardo Padulano ***@***.***> wrote:; > ; > ﻿; > Probably the previous ROOT installation was clashing with the new one you downloaded through conda, glad that you can now run the example 👍 Can this issue be closed?; > ; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676#issuecomment-1143196406:206,down,downloaded,206,https://root.cern,https://github.com/root-project/root/issues/10676#issuecomment-1143196406,1,['down'],['downloaded']
Availability,"Yes it preserve the case if I add the line ; ```; 	set(DOXYGEN_CASE_SENSE_NAMES YES) # default value is system dependent, so need to set this !. ```; in `CMakeLists.txt` but now I have a other weird error:; ```; Processing libs.C+(""BinomialNeymanInterval"",)... Processing libs.C+(""FeldmanCousinsBinomialInterval"",)... Processing libs.C+(""DifferentDimension"",)... Processing libs.C+(""DifferentAxisLimits"",)... Processing libs.C+(""DifferentBinLimits"",)...; Processing libs.C+(""DifferentNumberOfBins"",)... Processing libs.C+(""BinomialProbHelper"",)... Processing libs.C+(""DifferentLabels"",)...; input_line_11:2:28: error: expected expression; input_line_11:2:28: error: expected expression; libs(""DifferentDimension"",) libs(""DifferentBinLimits"",). ^ ^. input_line_11:2:29: error: expected expression; libs(""DifferentAxisLimits"",); ^; input_line_11:2:40: error: expected expression; libs(""FeldmanCousinsBinomialInterval"",); input_line_11 ^:; 2:25: error: expected expression; libs(""DifferentLabels"",); ^; input_line_11:2:31: error: expected expression; libs(""DifferentNumberOfBins"",); ^; ```; It seems the 2nd parameter in calling libs.C is meeting. Let me download again the full PR from scars. I may have done some unwanted mods.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081535976:199,error,error,199,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081535976,8,"['down', 'error']","['download', 'error']"
Availability,Yes that line is the faulty one. That's the feature allowing to Draw histogram one after each other and automatically replace the previous one. I guess histogram is the only object doing that. But that's like that since ROOT exits. Difficult to change this behaviour now. Of course the right way is to use option same.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9869#issuecomment-1038010684:21,fault,faulty,21,https://root.cern,https://github.com/root-project/root/issues/9869#issuecomment-1038010684,1,['fault'],['faulty']
Availability,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10774#issuecomment-1171220620:127,error,error,127,https://root.cern,https://github.com/root-project/root/issues/10774#issuecomment-1171220620,1,['error'],['error']
Availability,Yes the tolerances are for significances (i.e. p-values) or limits values found by the HypoTestInverter class,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6195#issuecomment-675349166:8,toler,tolerances,8,https://root.cern,https://github.com/root-project/root/pull/6195#issuecomment-675349166,1,['toler'],['tolerances']
Availability,"Yes, I agree that we should now focus on the remaining test failures, both in Cling and ROOT. For the ""file name too long"" when building with GCC, I've posted https://github.com/root-project/root/pull/10387 (we'll have to rebase this PR afterwards and change a number of the new `.str()` calls). I also started looking into the slow JIT for RDF, and I noticed that it's completely hanging when ROOT is built with C++17. The stack trace of a stuck `./tree/dataframe/test/dataframe_interface --gtest_filter=RDataFrameInterface.GetFilterNamesFromNode` is; ```; #0 0x00007ffff697681d in __lll_lock_wait () from /lib64/libpthread.so.0; #1 0x00007ffff696fac9 in pthread_mutex_lock () from /lib64/libpthread.so.0; #2 0x00007fffefd8e953 in __gthread_mutex_lock (__mutex=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux/bits/gthr-default.h:748; #3 std::mutex::lock (this=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:103; #4 std::unique_lock<std::mutex>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:267; #5 std::unique_lock<std::mutex>::unique_lock (__m=..., this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:197; #6 llvm::orc::ExecutionSession::OL_applyQueryPhase1 (this=this@entry=0xbcb8b0, IPLS=std::unique_ptr<llvm::orc::InProgressLookupState> = {...}, Err=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2295; #7 0x00007fffefd8c8ec in llvm::orc::ExecutionSession::lookup(llvm::orc::LookupKind, std::vector<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags>, std::allocator<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags> > > const&, llvm::orc::SymbolLookupSet, llvm::orc::SymbolState, llvm::unique_function<void (llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr, llvm::JITEvaluatedSymbol",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1097659822:60,failure,failures,60,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1097659822,1,['failure'],['failures']
Availability,"Yes, I also observing such error only when build stops and I trying to continue the run.; Try to apply patch from pr: https://github.com/root-project/root/pull/7346",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7345#issuecomment-789874561:27,error,error,27,https://root.cern,https://github.com/root-project/root/issues/7345#issuecomment-789874561,1,['error'],['error']
Availability,"Yes, I can try to switch to the dev3 LCG view, which should have ROOT master. I'll check in a few days, when the fix should be available in the builds",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11597#issuecomment-1283665837:127,avail,available,127,https://root.cern,https://github.com/root-project/root/pull/11597#issuecomment-1283665837,1,['avail'],['available']
Availability,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference?. I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```; [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))); [5922]:; [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'; [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))); [5922]: ^; [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier; [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))); [5922]: ^; [5922]: input_line_59:2:92: error: expected ')'; [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))); [5922]: ^; [5922]: input_line_59:2:90: note: to match this '('; [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2478#issuecomment-413566449:167,error,error,167,https://root.cern,https://github.com/root-project/root/pull/2478#issuecomment-413566449,1,['error'],['error']
Availability,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1429251757:55,failure,failure,55,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757,10,"['error', 'failure']","['error', 'failure']"
Availability,"Yes, it addresses the failures uncovered by the added messages ... However there is still a category of case (ellided node in the hierarchy of branches) that trigger the message (because the branch those proxy might correspond to really does not exist).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3770#issuecomment-489635960:22,failure,failures,22,https://root.cern,https://github.com/root-project/root/pull/3770#issuecomment-489635960,1,['failure'],['failures']
Availability,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720#issuecomment-2425048725:194,failure,failure,194,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725,2,['failure'],['failure']
Availability,"Yes, it is still true that we need to remove/replace the `using namespace` (my note was just a side note and was not meant to undermine this report) and it is also true that making one's own headers more resilient to silly but legal usage is usually worth the slight (and debatable) decrease in readability (by having/adding more qualification).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13001#issuecomment-1593553122:204,resilien,resilient,204,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1593553122,1,['resilien'],['resilient']
Availability,"Yes, it is the faulty one. If I comment it the tick are ok. But that's in the Gl/3D part and you are not using PreferGL for you 2D pad. We are progressing ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8618#issuecomment-875407496:15,fault,faulty,15,https://root.cern,https://github.com/root-project/root/issues/8618#issuecomment-875407496,1,['fault'],['faulty']
Availability,"Yes, of course! I will also copy it here:. The rationale behind this change is that the public methods will (in most cases) be directly used by end users, so there is no need to further propagate potential errors. It removes the need to `Unwrap` the importer object returned by `Create`, making it more intuitive to use. As a potential downside, this means that in case the importer is used in more elaborate call; chains this propagation is of course not possible anymore. A possible solution could be to have methods for both, although this will obviously add some bloat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12565#issuecomment-1488072046:206,error,errors,206,https://root.cern,https://github.com/root-project/root/pull/12565#issuecomment-1488072046,4,"['down', 'error']","['downside', 'errors']"
Availability,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13001#issuecomment-1591318680:36,error,error,36,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680,8,['error'],"['error', 'errors']"
Availability,"Yes, see #6079 . Error is:; ```; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooChiSquarePdf.cxx.o; /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of type name ""std::string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(589): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(36): error: invalid redeclaration of type name ""std::u16string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(596): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(37): error: invalid redeclaration of type name ""std::u32string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(597): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(38): error: invalid redeclaration of type name ""std::wstring_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(591): here. 5 errors detected in the compilation of ""/build/root/src/root-6.22.00-cuda/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu"".; make[2]: *** [tmva/tmva/CMakeFiles/TMVA.dir/build.make:2253: tmva/tmva/CMakeFiles/TMVA.dir/src/DNN/Architectures/Cuda/CudaMatrix.cu.o] Error 1; make[2]: *** Waiting for unfinished jobs....; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooDecay.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooDstD0BG.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooExponential.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooFunctor1DBinding.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooFunctorBinding.cxx.o; /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(32): error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663594675:17,Error,Error,17,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663594675,5,"['Error', 'error']","['Error', 'error']"
Availability,"Yes, sorry about that. Your changes look ok at a quick glance (and anyway, the CI errors are definitely unrelated). We'll try to resolve this asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5393#issuecomment-616427545:82,error,errors,82,https://root.cern,https://github.com/root-project/root/pull/5393#issuecomment-616427545,1,['error'],['errors']
Availability,"Yes, that's to be expected because of the error in the command:; `qhelpgenerator index.qhp`. I checked locally and I am seeing the same error. It seems the index.qhp file is corrupted here because of a mismatch in section opening and closing tags:; ```. <toc>; <section title=""ROOT master"" ref=""index.html"">; <section title=""ROOT Reference Documentation"" ref=""index.html"">; <section title=""Introduction"" ref=""index.html#autotoc_md0"" />; <section title=""Manuals"" ref=""index.html#autotoc_md1"" />; <section title=""Tutorials and courses"" ref=""index.html#autotoc_md2"" />; <section title=""Provide your feedback"" ref=""index.html#autotoc_md3"" />; </section>; </section>; </section>; <section title=""Tutorials"" ref=""group__Tutorials.html"" />; ```; I guess I will have to file another bug report in doxygen :s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011056200:42,error,error,42,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011056200,4,['error'],['error']
Availability,"Yes, the error is unrelated to your patch (infrastructure problem).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1546#issuecomment-359856606:9,error,error,9,https://root.cern,https://github.com/root-project/root/pull/1546#issuecomment-359856606,1,['error'],['error']
Availability,"Yes, the error messages are now emitted directly in cmakes `find_package()` as we require the components explicitly.; For example:; ```txt; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:233 (message):; Could NOT find X11 (missing: Xext); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindX11.cmake:676 (find_package_handle_standard_args); CMakeLists.txt:5 (find_package); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16008#issuecomment-2220252508:9,error,error,9,https://root.cern,https://github.com/root-project/root/pull/16008#issuecomment-2220252508,2,"['Error', 'error']","['Error', 'error']"
Availability,"Yes, the other two failures need backporting of:. https://github.com/root-project/root/pull/9824. which I will do next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10206#issuecomment-1076784253:19,failure,failures,19,https://root.cern,https://github.com/root-project/root/pull/10206#issuecomment-1076784253,1,['failure'],['failures']
Availability,"Yes, the test failures are unrelated. Note that we track solved issues with ""projects"", not PRs :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9790#issuecomment-1028725521:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/9790#issuecomment-1028725521,1,['failure'],['failures']
Availability,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10776#issuecomment-1158620926:186,error,error,186,https://root.cern,https://github.com/root-project/root/pull/10776#issuecomment-1158620926,1,['error'],['error']
Availability,"Yes, this is correct: As explained in https://github.com/root-project/root/pull/12351, we didn't backport the necessary patches to LLVM 13 as found in ROOT 6.30.{02,04}. They are automatically available after the upgrade to LLVM 16 which doesn't have a ROOT release yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14509#issuecomment-1920773573:193,avail,available,193,https://root.cern,https://github.com/root-project/root/issues/14509#issuecomment-1920773573,1,['avail'],['available']
Availability,"Yes, this is the list of dependencies, but they are optional, we should not emit an error if the package is not installed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553#issuecomment-1945596698:84,error,error,84,https://root.cern,https://github.com/root-project/root/issues/14553#issuecomment-1945596698,1,['error'],['error']
Availability,"Yes. ( Although once compressed, the default is to download, there is no need to specifically set that.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10066#issuecomment-1066931626:51,down,download,51,https://root.cern,https://github.com/root-project/root/issues/10066#issuecomment-1066931626,1,['down'],['download']
Availability,Yes. Issue is clarified. - I can see the classlist on the browser at home and in the office.; - I cannot see it at the pit .... but this all hints to a funny browser setup there. I have to investigate. Thanks a lot to all for the clarification and please take my apologies for ; creating noise about an issue which was clearly my fault!. Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15906#issuecomment-2185817262:330,fault,fault,330,https://root.cern,https://github.com/root-project/root/issues/15906#issuecomment-2185817262,2,['fault'],['fault']
Availability,"Yes. The link goes into detail, but record arrays are essentially arrays of structs— contiguous in memory, rowwise across named, differently typed members. You can also specify per-member alignment, in case your operating system has weird alignment rules. The user can then refer to rows of the record array with integer slices and columns with strings in square brackets. Since the data are rectangular, these slices are accomplished through constant strides. I've often wondered what the big deal about Pandas was, since these are the features people describe as the benefits of Pandas, but they've been available in Numpy for years. I've since learned that Pandas additionally has smarter indexing than Numpy's position-based indexing, but that's not needed for something that's essentially a set, like a set of events. (Not needed until we aggregate somehow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1872#issuecomment-384268662:606,avail,available,606,https://root.cern,https://github.com/root-project/root/pull/1872#issuecomment-384268662,2,['avail'],['available']
Availability,"You are adding it to the target, the dependency is explicit in the fact that you need to have a target to pass as argument. You don't need to add the include that the dictionary needs to the executable, you could just add it to the directory includes, but adding to the target is better as it avoids leaking it to subdirectories. You only have to do it before because of Axel's changes that force a manual header search for the dictionary header, so the search paths need to be ready for you to actually find it. In earlier versions of ROOT, not finding this header would not cause a failure, but may have picked up the wrong header and injected a bunch of absolute paths to the dictionary which in turn would end up breaking things. For example, if you know the dictionary header will always just be in the current source directory, you could just set `CMAKE_INCLUDE_CURRENT_DIR` to `True` instead, and not add the current directory to the target includes.; ```; $ cmake --help-variable CMAKE_INCLUDE_CURRENT_DIR; CMAKE_INCLUDE_CURRENT_DIR; -------------------------. Automatically add the current source and build directories to the include path. If this variable is enabled, CMake automatically adds; ``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``; to the include path for each directory. These additional include; directories do not propagate down to subdirectories. This is useful; mainly for out-of-source builds, where files generated into the build; tree are included by files located in the source tree. By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856752467:584,failure,failure,584,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856752467,2,"['down', 'failure']","['down', 'failure']"
Availability,"You are night, we need to make sure that ROOT compiles if there is already ROOT on the system, or at least that you get a clear error. There is already an open issue about this, so I'll close this issue as duplicate:; https://github.com/root-project/root/issues/13101",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337#issuecomment-2046073774:128,error,error,128,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-2046073774,2,['error'],['error']
Availability,You are welcome! This feature will be available in the next stable release 6.32 :+1:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14815#issuecomment-1966725608:38,avail,available,38,https://root.cern,https://github.com/root-project/root/issues/14815#issuecomment-1966725608,1,['avail'],['available']
Availability,You can get that down by a couple by addressing:; ```; The 'numba>=0.47.0' distribution was not found and is required by the application; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436#issuecomment-993491610:17,down,down,17,https://root.cern,https://github.com/root-project/root/issues/9436#issuecomment-993491610,1,['down'],['down']
Availability,You can look also at the result of clang-format that will be available after I trigger a build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10435#issuecomment-1143432741:61,avail,available,61,https://root.cern,https://github.com/root-project/root/pull/10435#issuecomment-1143432741,1,['avail'],['available']
Availability,"You can reproduce it on a free online Ubuntu 20 browser-box:. - Go to https://www.onworks.net/os-distributions/ubuntu-based; - Select Ubuntu 20, Start; - Open a WebBrowser within it, google ""cern ROOT install"".; - Copy the line of the ""required dependencies""; - Open a Terminal; - sudo apt update; - Paste the line of the required dependencies to install missing packages; - Go back to web browser; - Copy link to download binary release; - Back to terminal, paste it there; - tar -xzvf ...; - source root/bin/thisroot.sh; - Back to browser, search ""cern root github"", go to Issues; - Download the reproducer of this issue; - unzip; - root -l test_zoom.cpp; - Then zoom. I did the process and it's the case the artifact is there on such a fresh independent install.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1026925002:414,down,download,414,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1026925002,2,"['Down', 'down']","['Download', 'download']"
Availability,"You can see the failure on 5 platforms (!) in our CI:; ```; In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:; Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory; 27 | #include <XrdCl/XrdClFileSystem.hh>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14170#issuecomment-1838166449:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/14170#issuecomment-1838166449,4,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"You can set different debugging levels for `RLogManager`. See enum in `ROOT/RLogger.hxx`:. ```; enum class ELogLevel : unsigned char {; kUnset,; kFatal, ///< An error which causes further processing to be unreliable; kError, ///< An error; kWarning, ///< Warnings about likely unexpected behavior; kInfo, ///< Informational messages; used for instance for tracing; kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; };; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14300#issuecomment-1878429143:161,error,error,161,https://root.cern,https://github.com/root-project/root/issues/14300#issuecomment-1878429143,2,['error'],['error']
Availability,"You convinced me that the subevent-section tests should be `EXPECT_DOUBLE_EQ`. > From what I can see, this is only working by chance right now. You are right! This can easily be confirmed (even just on my x86 laptop) by changing the seed on line 66. Setting it to some other values, the `SimBinnedConstrainedTest.EventSections` fails sometimes (e.g. seed = 24) and `SimBinnedConstrainedTest.SubEventSections` as well (e.g. seed = 255). Some seeds even make multiple tests fail, e.g. 25534 fails `BinnedDatasetTest.EventSections` and `SimBinnedConstrainedTest.EventSections` and 2 makes both `SimBinnedConstrainedTest` event-splitting tests fail. I was not able to find a seed that fails the other tests, so it seems to be contained to the `*EventSections` tests. To be complete, I think we should add the explanation of why this comparison doesn't work, which is that **the calculations are**, in fact, **different**. We're comparing a single-section (""all events"") calculation to multi-section (""events section 1"" + ""section 2"" + ...). Obviously, this can give differences due to rounding from FMA or just Kahan summation which also has a small error sometimes. In other tests in the `RooAbsL` and other `RooFit::TestStatistics` suite, this doesn't typically apply. In most of the tests, we're trying to do the exact same calculation (""same"" in terms of CPU operations as well), except either in parallel or through the `TestStatistics` classes instead of the old `RooNLLVar` tree. Sometimes different ordering can change results, like the extended term you mentioned, but also the subsidiary term. Anyway, for this PR: I will suggest an explanation comment and after that it can be merged (@guitargeek agrees, we discussed it in the RooFit dev meeting just now). I will also open an issue reminding us to also apply this change to the two `EventSections` tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1550987204:1146,error,error,1146,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1550987204,1,['error'],['error']
Availability,You may want to make a note in the commit that the requirement laid down in the (removed) comment are now satisfied (if they are).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1409#issuecomment-348480282:68,down,down,68,https://root.cern,https://github.com/root-project/root/pull/1409#issuecomment-348480282,1,['down'],['down']
Availability,"You need to `brew update` first, bintray shut down May 1st and brew had to migrate storage providers. You need brew 3.1+ to download packages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-840048152:46,down,down,46,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-840048152,2,['down'],"['down', 'download']"
Availability,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785897720:229,avail,available,229,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720,2,['avail'],['available']
Availability,"You think it's good to go like this? It does not have yet all dependencies, e.g., the ones for TMVA experimental are missing. Though we should could have with this a first run through the nightlies and fix failures in our infrastructure (missing packages, version mismatches, ...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654852533:206,failure,failures,206,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654852533,1,['failure'],['failures']
Availability,"You're missing a bracket (which was part of the [original commit](https://github.com/wlav/CPyCppyy/commit/e40a3fbab87304deb4ed37e217f66d87cc3ceba7):; ```txt; /github/home/ROOT-CI/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPClassMethod.cxx: In member function ‘virtual PyObject* CPyCppyy::CPPClassMethod::Call(CPyCppyy::CPPInstance*&, CPyCppyy_PyArgs_t, size_t, PyObject*, CPyCppyy::CallContext*)’:; Error: /github/home/ROOT-CI/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPClassMethod.cxx:38:43: error: expected ‘)’ before ‘{’ token; 38 | (fArgsRequired <= nargs-1) {; | ^~; | ); /github/home/ROOT-CI/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPClassMethod.cxx:37:12: note: to match this ‘(’; 37 | if ((CPPInstance_Check(arg0) && ((CPPInstance*)arg0)->ObjectIsA() == GetScope()) && \; | ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15228#issuecomment-2056335768:397,Error,Error,397,https://root.cern,https://github.com/root-project/root/pull/15228#issuecomment-2056335768,2,"['Error', 'error']","['Error', 'error']"
Availability,"You're right! I misunderstood, I thought `std::rotate` rotated the whole iterable (e.g. like https://numpy.org/doc/stable/reference/generated/numpy.roll.html), but I see now it only puts the selected part in front and shoves the rest aside to make room. But then apparently there are still situations that we are not catching. I think probably sometimes there will be yet another task executed before all tasks are in the queue. This is of course always possible, because the OS can delay processes and IPC in any way it sees fit. I can up the sleep time to compensate for this so it happens less often, but it is by the nature of the algorithm unavoidable that some statistical failures will still happen (given slow enough OS'es). What we can do to make sure that the test never fails is to iteratively go through all received tasks and modify the expected order until it matches, but of course in the extreme case that every step is reordered this would then defeat the purpose of the test. A more robust approach would be to wait with taking work off the queue until all tasks have been submitted, but this is not actually desirable functionality, because that would mean workers would be doing nothing when they could already be working. Introducing such functionality just for testing purposes seems silly. So not sure how to ""fix"" this. I will at least put `std::rotate` back in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627#issuecomment-1330419059:679,failure,failures,679,https://root.cern,https://github.com/root-project/root/pull/11627#issuecomment-1330419059,2,"['failure', 'robust']","['failures', 'robust']"
Availability,"You're right, but the error vanishes also replacing the pair with a `std::vector<MyClass>` instead of an array, and according to cppreference the value type of `std::vector` must be copy assignable. But honestly I don't know if and how the implementation checks for `is_copy_assignable`. Edit: for clarity, also this applies to the original reproducer in my first post, not to the modification reported in my second post.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1118501692:22,error,error,22,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1118501692,1,['error'],['error']
Availability,"Your understanding is correct, you can go ahead with v6.24/00. For the compile time pinning, from the discussion we had yesterday, we can have architecture specific builds, so that, for example, `x86_64-centos7-gcc9-opt` will stick to the basic `x86-64` instructions, while `haswell-centos7-gcc9-opt` will do its best using AVX2 and all other goodies you get on that platform (we can also use the microarchitecture levels like `x86-64-v2` which will be available as of GCC 11 and Clang 12). For the RooFit specific case, our analysis does not use the builds from SFT and we do not use RooFit in trigger and reconstruction (which are the cases that I'm most worried about). Let's see from somebody in ATLAS what they think. I anyway (as a matter of principle) would prefer if you can have dynamic architecture dispatching that I can turn off in specific builds. @oshadura also mention possible optimizations in compression algorithms, but, again, that's a case that does not worry me, as they only deal with integers, so you do not get incompatible/incorrect results by changing the order of operations (unless there's a bug). The bottom line is that I'm worried about numerical instabilities due to the change of order of floating point operations in trigger and reconstruction code. It doesn't matter if scalar or avx2 versions produce slightly different results, as long as I know that running the scalar version of the application will always give me the same result.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7361#issuecomment-793617647:453,avail,available,453,https://root.cern,https://github.com/root-project/root/issues/7361#issuecomment-793617647,1,['avail'],['available']
Availability,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3043#issuecomment-489605968:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/3043#issuecomment-489605968,1,['failure'],['failures']
Availability,"Z(const RVec<XYZTVector>& vec){; auto getItemZ = [](const XYZTVector& item) { return item.Z(); };; return Map(vec, getItemZ);; }. '''. ROOT.gInterpreter.Declare(vectors). if __name__ == ""__main__"":; ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(10, 10, 10)"").Snapshot(""Particle"", ""f1.root""); ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(20, 20, 20)"").Snapshot(""Cluster"", ""f2.root""); ROOT.RDataFrame(1).Define(""vec"", ""std::vector<XYZTVector>{XYZTVector(30, 30, 30, 30)}"").Snapshot(""Vertex"", ""f3.root""). ch1 = ROOT.TChain(""Particle""); ch1.Add(""f1.root""); ch2 = ROOT.TChain(""Cluster""); ch2.Add(""f2.root""); ch3 = ROOT.TChain(""Vertex""); ch3.Add(""f3.root""). ch1.AddFriend(ch2, ""cluster""); ch1.AddFriend(ch3, ""vertex""). df = ROOT.RDataFrame(ch1); print(df.Define(""particle_z"", ""vec.Z()"").Histo1D(""particle_z"").GetMean()); print(df.Define(""cluster_z"", ""cluster.vec.Z()"").Histo1D(""cluster_z"").GetMean()); print(df.Define(""vertex_z"", ""getArrZ(vertex.vec)"").Histo1D(""vertex_z"").GetMean()); ```. which results in the error on 3rd print. Full output:. ```; 10.0; 20.0; input_line_99:2:142: error: no matching function for call to 'getArrZ'; ...= [](ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& var0){return getArrZ(var0); ^~~~~~~; input_line_42:10:15: note: candidate function not viable: no known conversion from 'ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,; ROOT::Math::DefaultCoordinateSystemTag>' (aka 'DisplacementVector3D<Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>') to; 'const RVec<ROOT::Math::XYZTVector>' (aka 'const RVec<LorentzVector<PxPyPzE4D<double> > >') for 1st argument; RVec <double> getArrZ(const RVec<XYZTVector>& vec){; ^; input_line_103:2:142: error: no matching function for call to 'getArrZ'; ...= [](ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& var0){return getArrZ(var0); ^~~~~~~; input_line_42:10:15: note: candidate ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944:1915,error,error,1915,https://root.cern,https://github.com/root-project/root/issues/6944,1,['error'],['error']
Availability,Z] /build/jenkins/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/LogLikelihoodFCN.h:164:68: error: only virtual member functions can be marked 'override' ; - [2020-08-05T11:56:53.845Z] /build/jenkins/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/PoissonLikelihoodFCN.h:130:52: error: only virtual member functions can be marked 'override' ; - [2020-08-05T11:56:53.845Z] /build/jenkins/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/PoissonLikelihoodFCN.h:173:68: error: only virtual member functions can be marked 'override' ; - [2020-08-05T11:56:55.590Z] FAILED: math/mathcore/CMakeFiles/MathCore.dir/src/Fitter.cxx.o ; - [2020-08-05T11:56:55.883Z] /build/jenkins/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/Chi2FCN.h:124:52: error: only virtual member functions can be marked 'override' ; - [2020-08-05T11:56:55.883Z] /build/jenkins/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/Chi2FCN.h:154:68: error: only virtual member functions can be marked 'override' . And 10 more. ### Warnings:; - [2020-08-05T11:55:25.177Z] /build/jenkins/workspace/root-pullrequests-build/root/core/cont/inc/TArrayL64.h:55:4: warning: 'CheckTObjectHashConsistency' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2020-08-05T11:55:25.177Z] /build/jenkins/workspace/root-pullrequests-build/root/core/cont/inc/TArrayL64.h:55:4: warning: 'IsA' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2020-08-05T11:55:25.177Z] /build/jenkins/workspace/root-pullrequests-build/root/core/cont/inc/TArrayL64.h:55:4: warning: 'ShowMembers' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2020-08-05T11:55:25.177Z] /build/jenkins/workspace/root-pullrequests-build/root/core/cont/inc/TArrayL64.h:55:4: warning: 'Streamer' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [202,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-669150961:2069,error,error,2069,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669150961,1,['error'],['error']
Availability,Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3380:5: error: case label ‘clang::serialization::MSSTRUCT_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:01:33.066Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3388:5: error: case label ‘clang::serialization::POINTERS_TO_MEMBERS_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:01:33.066Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3397:5: error: case label ‘clang::serialization::UNUSED_LOCAL_TYPEDEF_NAME_CANDIDATES’ not within a switch statement ; - [2020-09-04T20:01:33.066Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3403:5: error: case label ‘clang::serialization::CUDA_PRAGMA_FORCE_HOST_DEVICE_DEPTH’ not within a switch statement ; - [2020-09-04T20:01:33.066Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3411:5: error: case label ‘clang::serialization::PACK_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:01:33.067Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3434:1: error: expected declaration before ‘}’ token ; - [2020-09-04T20:01:33.067Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:8095:22: error: ‘make_unique’ is not a member of ‘std’ ; - [2020-09-04T20:01:33.067Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:8095:52: error: expected primary-expression before ‘&gt;’ token ; - [2020-09-04T20:01:33.067Z] /home/sftnight/build/works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6307#issuecomment-687354209:1640,error,error,1640,https://root.cern,https://github.com/root-project/root/pull/6307#issuecomment-687354209,1,['error'],['error']
Availability,Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:07.493Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:07.493Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:09.327Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:10.104Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:13.285Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:15.195Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z . And 49 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcg,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572#issuecomment-1490040073:1461,avail,available,1461,https://root.cern,https://github.com/root-project/root/pull/12572#issuecomment-1490040073,1,['avail'],['available']
Availability,Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:07.493Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:09.327Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:10.104Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:13.285Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:15.195Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z . And 49 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_datafr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572#issuecomment-1490040073:1673,avail,available,1673,https://root.cern,https://github.com/root-project/root/pull/12572#issuecomment-1490040073,1,['avail'],['available']
Availability,Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:09.327Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:10.104Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:13.285Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:15.195Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z . And 49 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_snapshot/); - [projectroo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572#issuecomment-1490040073:1885,avail,available,1885,https://root.cern,https://github.com/root-project/root/pull/12572#issuecomment-1490040073,1,['avail'],['available']
Availability,Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:10.104Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:12.042Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:13.285Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:15.195Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z . And 49 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572#issuecomment-1490040073:2097,avail,available,2097,https://root.cern,https://github.com/root-project/root/pull/12572#issuecomment-1490040073,1,['avail'],['available']
Availability,"Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple(460,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\SafepointIRVerifier.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility(211,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\PassManager.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/PointerUnion.h(51,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\TypeFinder.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(227,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Serialization\ASTWriterDecl.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Serialization\obj.clangSerialization.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility(2410,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGCUDANV.cpp) [C:\build\workspace\root-pull",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8113#issuecomment-836826947:3034,error,error,3034,https://root.cern,https://github.com/root-project/root/pull/8113#issuecomment-836826947,1,['error'],['error']
Availability,"Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\GenericPyz.cxx(14,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] ; - [2020-06-04T11:49:53.433Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\RVecPyz.cxx(12,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] ; - [2020-06-04T11:49:53.766Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\TClassPyz.cxx(13,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] ; - [2020-06-04T11:49:54.097Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\TClonesArrayPyz.cxx(13,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] ; - [2020-06-04T11:49:54.448Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\TDirectoryFilePyz.cxx(12,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] ; - [2020-06-04T11:49:54.752Z] C:\build\workspace\root-pullrequests-build\root\bindings\pyroot\pythonizations\src\TDirectoryPyz.cxx(12,10): fatal error C1083: Cannot open include file: 'CPyCppyy.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\pythonizations\ROOTPythonizations3_8.vcxproj] . And 10 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5643#issuecomment-638801289:2871,error,error,2871,https://root.cern,https://github.com/root-project/root/pull/5643#issuecomment-638801289,3,['error'],['error']
Availability,"Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(1400,51): error C2664: 'bool TClassEdit::IsStdPair(std::string_view)': cannot convert argument 1 from 'TString' to 'std::string_view' [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(1400,15): error C2737: 'ispair': const object must be initialized [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(1464,46): error C2665: 'TClassEdit::IsSTLCont': none of the 2 overloads could convert all the argument types [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(1495,7): error C2664: 'bool TClassEdit::IsArtificial(std::string_view)': cannot convert argument 1 from 'TString' to 'std::string_view' [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(1532,7): error C2664: 'bool TClassEdit::IsArtificial(std::string_view)': cannot convert argument 1 from 'TString' to 'std::string_view' [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(4098,7): error C2664: 'bool TClassEdit::IsStdPair(std::string_view)': cannot convert argument 1 from 'TString' to 'std::string_view' [C:\build\workspace\root-pullrequests-build\build\core\Core.vcxproj] ; - [2023-11-01T13:56:05.150Z] C:\build\workspace\root-pullrequests-build\root\core\meta\src\TClass.cxx(6587,51): error C2665: 'TClassEdit::IsSTLCont': none of the 2 overloads could convert all the argument types [C:\build\workspace\root-pullrequests-build\build\core\Core.vcx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13993#issuecomment-1789002725:1160,error,error,1160,https://root.cern,https://github.com/root-project/root/pull/13993#issuecomment-1789002725,1,['error'],['error']
Availability,"Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(621,53): error C2039: 'unordered_map': is not a member of 'std' [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(621,66): error C2061: syntax error: identifier 'unordered_map' [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(630,27): error C2065: 'funcPar0': undeclared identifier [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(631,1): error C3536: 'iExpected': cannot be used before it is initialized [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(631,27): error C2065: 'funcPar0': undeclared identifier [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(633,1): error C2660: 'testing::internal::EqHelper::Compare': function does not take 3 arguments [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:26:09.619Z] C:\build\workspace\root-pullrequests-build\root\core\metacling\test\TClingMethodInfoTests.cxx(633,10): error C2512: 'testing::AssertionResult': no appropriate default constructor available [C:\build\workspace\root-pullrequests-build\build\core\metacling\test\TClingTest.vcxproj] ; - [2021-05-07T18:2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8124#issuecomment-834674899:1178,error,error,1178,https://root.cern,https://github.com/root-project/root/pull/8124#issuecomment-834674899,1,['error'],['error']
Availability,Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\tree\treeplayer\test\treeprocessormt.vcxproj] ; - [2020-04-20T13:04:27.693Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\io\io\test\TFile.vcxproj] ; - [2020-04-20T13:04:27.693Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_cache.vcxproj] ; - [2020-04-20T13:04:27.693Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\tree\ntuple\v7\test\ntuple_print.vcxproj] ; - [2020-04-20T13:04:28.142Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\test\CladDerivatorTests.vcxproj] ; - [2020-04-20T13:04:28.142Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\tmva\tmva\test\ROC\tmvatmvatestROCUnit.vcxproj] ; - [2020-04-20T13:04:28.547Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\test\GradientFittingUnit.vcxproj] ; - [2020-04-20T13:04:28.547Z] LINK : fatal error LNK1181: cannot open input file '..\..\..\googletest-prefix\src\googletest-build\lib\\gtest\gtest.lib' [C:\build\workspace\root-pullrequests-build\build\hist\hist\test\testTH1.vcxproj] ; - [2020-04-20T13:04:28.547Z] LINK : fatal error LNK1181: cannot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5228#issuecomment-616540341:1569,error,error,1569,https://root.cern,https://github.com/root-project/root/pull/5228#issuecomment-616540341,1,['error'],['error']
Availability,Zmin and Zmax did not take into account the Z errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5455:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/5455,1,['error'],['errors']
Availability,"Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine).; reproducer:; ```; {; const Int_t n = 10;; Double_t x[n], y[n], z[10];; Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2)-5;; z[i] = i;; ex[i] = i+1;; ey[i] = i+1;; ez[i] = i+1;; }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);; gr2d->Draw(""P0 ERR"");; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5455:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/5455,1,['error'],['errors']
Availability,"[ 47%] Built target rootcling_stage1; Scanning dependencies of target G__Core; [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm; Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap!; core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed; make[2]: *** [core/G__Core.cxx] Error 1; CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed; make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2; Makefile:151: recipe for target 'all' failed; make: *** [all] Error 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3577:151,Error,Error,151,https://root.cern,https://github.com/root-project/root/pull/3577,4,['Error'],['Error']
Availability,[2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_SetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_Get_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T14:15:48.373Z] FAILED: core/thread/test/corethreadtestUnit ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T14:15:48.373Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' . A,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5655#issuecomment-630848356:1455,error,error,1455,https://root.cern,https://github.com/root-project/root/pull/5655#issuecomment-630848356,1,['error'],['error']
Availability,[2020-05-19T15:20:14.038Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.038Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.038Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_SetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.038Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_Get_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.038Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.038Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T15:20:14.038Z] FAILED: core/thread/test/corethreadtestUnit ; - [2020-05-19T15:20:14.039Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T15:20:14.039Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' . A,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5653#issuecomment-630892693:1455,error,error,1455,https://root.cern,https://github.com/root-project/root/pull/5653#issuecomment-630892693,1,['error'],['error']
Availability,[2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_SetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_Get_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/testTThreadedObject.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetAtSlot_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T16:02:03.499Z] FAILED: core/thread/test/corethreadtestUnit ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_GetNSlots_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;int&gt;::fgMaxSlots' ; - [2020-05-19T16:02:03.499Z] core/thread/test/CMakeFiles/corethreadtestUnit.dir/testTThreadedObject.cxx.o:testTThreadedObject.cxx:function TThreadedObject_CreateAndDestroy_Test::TestBody(): error: undefined reference to 'ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots' . A,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5651#issuecomment-630917627:1455,error,error,1455,https://root.cern,https://github.com/root-project/root/pull/5651#issuecomment-630917627,1,['error'],['error']
Availability,"[2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(66,120): error C2039: 'ExecutionPolicy': is not a member of 'ROOT::Fit::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(66,1): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(66,136): error C2143: syntax error: missing ',' before '&' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(77,1): error C2039: 'Internal': is not a member of 'ROOT::Fit::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(77,77): error C3083: 'Internal': the symbol to the left of a '::' must be a type [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.838Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(77,87): error C2039: 'ExecutionPolicy': is not a member of 'ROOT::Fit::ROOT' [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.839Z] C:\build\workspace\root-pullrequests-build\root\math\mathcore\inc\Fit/Chi2FCN.h(77,1): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [C:\build\workspace\root-pullrequests-build\build\math\mathcore\G__MathCore.vcxproj] ; - [2020-10-09T14:01:13.839Z] C:\build\workspace\root-pullrequests-build\r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327#issuecomment-706198898:1699,error,error,1699,https://root.cern,https://github.com/root-project/root/pull/6327#issuecomment-706198898,1,['error'],['error']
Availability,[6-28-patches][master] Segmentation fault in ROOT::TGenericClassInfo::~TGenericClassInfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:36,fault,fault,36,https://root.cern,https://github.com/root-project/root/issues/12957,1,['fault'],['fault']
Availability,[6.28] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13933:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/13933,1,['error'],['error']
Availability,[6.30] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13932:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/13932,1,['error'],['error']
Availability,[BOT] Minor improvements to clang-format-bot error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/437:45,error,error,45,https://root.cern,https://github.com/root-project/root/pull/437,1,['error'],['error']
Availability,[Backport][6.18] Compilation failure on Centos7 due to xrootd5,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6781:29,failure,failure,29,https://root.cern,https://github.com/root-project/root/pull/6781,2,['failure'],['failure']
Availability,"[C:\build\workspace\root-pullrequests-build\build\io\rootpcm\RootPcmObjs.vcxproj] ; - [2020-12-14T22:07:41.982Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left-hand operand of type 'ROOT::Internal::TDirectoryAtomicAdapter' (or there is no acceptable conversion) [C:\build\workspace\root-pullrequests-build\build\core\BaseTROOT.vcxproj] ; - [2020-12-14T22:07:41.982Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left-hand operand of type 'ROOT::Internal::TDirectoryAtomicAdapter' (or there is no acceptable conversion) [C:\build\workspace\root-pullrequests-build\build\core\meta\Meta.vcxproj] ; - [2020-12-14T22:07:42.918Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left-hand operand of type 'ROOT::Internal::TDirectoryAtomicAdapter' (or there is no acceptable conversion) [C:\build\workspace\root-pullrequests-build\build\core\winnt\Winnt.vcxproj] ; - [2020-12-14T22:07:43.232Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left-hand operand of type 'ROOT::Internal::TDirectoryAtomicAdapter' (or there is no acceptable conversion) [C:\build\workspace\root-pullrequests-build\build\core\base\Base.vcxproj] ; - [2020-12-14T22:07:51.151Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left-hand operand of type 'ROOT::Internal::TDirectoryAtomicAdapter' (or there is no acceptable conversion) [C:\build\workspace\root-pullrequests-build\build\core\meta\Meta.vcxproj] ; - [2020-12-14T22:07:53.464Z] C:\build\workspace\root-pullrequests-build\root\core\base\inc\TROOT.h(261,38): error C2678: binary '!=': no operator found which takes a left",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952#issuecomment-744746758:2256,error,error,2256,https://root.cern,https://github.com/root-project/root/pull/6952#issuecomment-744746758,1,['error'],['error']
Availability,[C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_utils.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xmemory0(1101): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_9b60555fex': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\datasource_sqlite.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\streambuf(568): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_7eeb19c2sy': No space left on device [C:\build\workspace\root-pullrequests-build\build\gui\sessionviewer\SessionViewer.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\dataframe_report.cxx(100): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_ec90e11cgl': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_report.vcxproj] ; - C:\build\workspace\root-pullrequests-build\build\include\TH3.h(259): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_fb631728ex': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_colnames.vcxproj] ; - C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vector(1361): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_870ac8afdb': No space left on device [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_simple.vcxproj] ; - C:\build\workspace\root-pullrequests-build\build\include\TPad.h(357): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp\_CL_48e18f1aex': No space left on device [,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4317#issuecomment-527074091:2234,error,error,2234,https://root.cern,https://github.com/root-project/root/pull/4317#issuecomment-527074091,1,['error'],['error']
Availability,[CI] S3 upload failures should not cancel the build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16742:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/16742,1,['failure'],['failures']
Availability,[CMake] Add quotes to avoid failure on Windows node (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5271:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/5271,1,['failure'],['failure']
Availability,"[CMake] Attempt to write `ClingConfig.cmake.tmp` to the external LLVM library directory, causing configuration failure",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:111,failure,failure,111,https://root.cern,https://github.com/root-project/root/issues/11920,1,['failure'],['failure']
Availability,"[CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 AthenaPoolConverter 0 0 ERROR poolToObject: Could not get object for Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 Exception: POOL read failed. Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000] (no backtrace available).; 12:37:41 AthenaPoolConverter 0 0 ERROR createObj - caught exception: AthenaPoolCnvSvc::::ExcCaughtException: Caught exception in StatusCode T_AthenaPoolCustomCnvWithKey<TRANS, PERS>::PoolToDataObject(DataObject*&, const Token*, const std::string&) [with TRANS = xAOD::EventInfo_v1; PERS = xAOD::EventInfo_v1; std::string = std::__cxx11::basic_string<char>] while creating transient objectxAOD::EventInfo_v1/EventInfo: std::runtime_error: POOL read failed. Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 AthenaPoolConverter 0 0 ERROR createObj failed to get DataObject, Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 DataProxy 0 0 WARNING accessData: conversion failed for data object 45903698/EventInfo; 12:37:41 Returning NULL DataObject pointer; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR Unable to retrieve Event root object; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR declareEventRootAddress for context s: 0 e: 0 failed; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR Terminating event processing loop due to errors; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16826:2446,ERROR,ERROR,2446,https://root.cern,https://github.com/root-project/root/issues/16826,5,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,[CmdLineUtils][ROOT-8527] Improve clarity of warnings and error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3697:58,error,error,58,https://root.cern,https://github.com/root-project/root/pull/3697,1,['error'],['error']
Availability,"[CppInterOp](https://github.com/compiler-research/CppInterOp) exposes API from Clang and LLVM in a mostly backward compatibe way. The API support downstream tools that utilize interactive C++ by using the compiler as a service. Adopting more of CppInterOp in ROOT will help simplify the LLVM migration process and allow us to upstream more patches to either CppInterOp or LLVM. @aaronj0, you can take it from here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16296:146,down,downstream,146,https://root.cern,https://github.com/root-project/root/pull/16296,1,['down'],['downstream']
Availability,"[CppInterOp](https://github.com/compiler-research/CppInterOp) exposes API from Clang and LLVM in a mostly backward compatibe way. The API support downstream tools that utilize interactive C++ by using the compiler as a service. This PR is the first step in using pure clang based reflection API in meta, and part of eventually integrating the JITCall and DynamicLibraryManager infrastructure. Adopting more of CppInterOp in ROOT will help simplify the LLVM migration process and allow us to upstream more patches to either CppInterOp or LLVM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16814:146,down,downstream,146,https://root.cern,https://github.com/root-project/root/pull/16814,1,['down'],['downstream']
Availability,"[DF] Add """" around unknown column names in error message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11772:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/11772,1,['error'],['error']
Availability,[DF] Add proper error handling to TTreeProcessorMT::GetFriendEntries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9167:16,error,error,16,https://root.cern,https://github.com/root-project/root/pull/9167,1,['error'],['error']
Availability,[DF] Better error message for Vary+Fill+no Reset method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10549:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/10549,1,['error'],['error']
Availability,[DF] Better error message in case of empty input TTree for Snapshot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6603:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/6603,1,['error'],['error']
Availability,[DF] Compilation failure when a mutable lambda is passed to Foreach,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8317:17,failure,failure,17,https://root.cern,https://github.com/root-project/root/issues/8317,1,['failure'],['failure']
Availability,[DF] Error out when TTreeIndex is used in distributed mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12256:5,Error,Error,5,https://root.cern,https://github.com/root-project/root/pull/12256,1,['Error'],['Error']
Availability,[DF] Fix 32bit failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2103:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/2103,2,['failure'],['failures']
Availability,"[DF] Fix ROOT-9456, ""[Jenkins][DF] Sporadic failures in test_snapshotNFiles""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2227:44,failure,failures,44,https://root.cern,https://github.com/root-project/root/pull/2227,1,['failure'],['failures']
Availability,"[DF] Fix compilation error on mac1012, XCode9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/3098,1,['error'],['error']
Availability,[DF] Fix datasource_more test failures on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8279:30,failure,failures,30,https://root.cern,https://github.com/root-project/root/pull/8279,1,['failure'],['failures']
Availability,[DF] Fix memleaks of dataframe nodes kept alive for jitted code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5488:42,alive,alive,42,https://root.cern,https://github.com/root-project/root/pull/5488,1,['alive'],['alive']
Availability,"[DF] Fix wrong downcast in {RRange,RFilter}::GetVariedFilter",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10544:15,down,downcast,15,https://root.cern,https://github.com/root-project/root/pull/10544,1,['down'],['downcast']
Availability,[DF] Keep objects used by jitted code alive until jitting time,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5381:38,alive,alive,38,https://root.cern,https://github.com/root-project/root/pull/5381,1,['alive'],['alive']
Availability,[DF] Provide a more useful error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9858:27,error,error,27,https://root.cern,https://github.com/root-project/root/pull/9858,1,['error'],['error']
Availability,[DF] Reduce precision errors for `Mean` and `StdDev`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7395:22,error,errors,22,https://root.cern,https://github.com/root-project/root/issues/7395,1,['error'],['errors']
Availability,[DF] Remove obsolete part from error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2253:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/2253,2,['error'],['error']
Availability,[DF] Remove redundant call to TTreeReaderArray::GetSize,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8592:12,redundant,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8592,1,['redundant'],['redundant']
Availability,[DF] Remove redundant calls to RDefine::InitSlot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10812:12,redundant,redundant,12,https://root.cern,https://github.com/root-project/root/pull/10812,1,['redundant'],['redundant']
Availability,[DF] Spurious errors in distributed mode with RDataFrame(TTree &) constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7788:14,error,errors,14,https://root.cern,https://github.com/root-project/root/issues/7788,1,['error'],['errors']
Availability,[DF] Throw instead of logging an error if a file or tree is unreadable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5207:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/5207,1,['error'],['error']
Availability,[DF] Try making some RDF error messages more helpful,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5861:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/5861,1,['error'],['error']
Availability,[DF] Use TLeaf::GetFullName in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7931:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/7931,1,['error'],['error']
Availability,[DF] Use human readable type names in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2144:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/2144,2,['error'],['error']
Availability,[DF] User-friendly error in case of Fill signature mismatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9895:19,error,error,19,https://root.cern,https://github.com/root-project/root/pull/9895,1,['error'],['error']
Availability,[DF][NFC] Fix copy-paste error in naming a Kahan action,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10119:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/10119,1,['error'],['error']
Availability,[DF][NFC] Fix error in user guide image,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6032:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/6032,2,['error'],['error']
Availability,[DF][ROOT-9463] Avoid redundant results in GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:22,redundant,redundant,22,https://root.cern,https://github.com/root-project/root/pull/2443,1,['redundant'],['redundant']
Availability,[DF][ROOT-9931] Properly check available columns,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3363:31,avail,available,31,https://root.cern,https://github.com/root-project/root/pull/3363,1,['avail'],['available']
Availability,[DO NOT MERGE] Test windows failure in datasource root test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11326:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/11326,1,['failure'],['failure']
Availability,[DO NOT MERGE] Trigger CI failure for 13787,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13791:26,failure,failure,26,https://root.cern,https://github.com/root-project/root/pull/13791,1,['failure'],['failure']
Availability,[Doc] Resolving grammatical errors and spellings in user-guides,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3816:28,error,errors,28,https://root.cern,https://github.com/root-project/root/pull/3816,2,['error'],['errors']
Availability,[Draft] Debug test error in TError patches,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5803:19,error,error,19,https://root.cern,https://github.com/root-project/root/pull/5803,1,['error'],['error']
Availability,"[EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content; (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error.; (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/705:437,error,error,437,https://root.cern,https://github.com/root-project/root/pull/705,1,['error'],['error']
Availability,[Eve-7] Fix compilation error using gcc8,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9048:24,error,error,24,https://root.cern,https://github.com/root-project/root/pull/9048,1,['error'],['error']
Availability,[Exp PyROOT] Prevent error at teardown of RooPlot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3517:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/3517,1,['error'],['error']
Availability,[Exp PyROOT] Raise detailed error when Python version is different fr…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5676:28,error,error,28,https://root.cern,https://github.com/root-project/root/pull/5676,2,['error'],['error']
Availability,[For testing - DO NOT MERGE] Do not draw error bars when they are smaller than the marker.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16383:41,error,error,41,https://root.cern,https://github.com/root-project/root/pull/16383,1,['error'],['error']
Availability,[FreeBSD] cling cmake error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13865:22,error,error,22,https://root.cern,https://github.com/root-project/root/issues/13865,1,['error'],['error']
Availability,[FreeBSD] davix build failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14697:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/issues/14697,1,['failure'],['failure']
Availability,[FreeBSD] recent master build failure (clad),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:30,failure,failure,30,https://root.cern,https://github.com/root-project/root/issues/14492,1,['failure'],['failure']
Availability,[GSOC][TMVA][SOFIE] Error function implemented successfully with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13104:20,Error,Error,20,https://root.cern,https://github.com/root-project/root/pull/13104,1,['Error'],['Error']
Availability,[GSOC][TMVA][SOFIE] Some error messages and spelling mistakes fixed related to operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10435:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/10435,1,['error'],['error']
Availability,[GUI] Silence TGFileDialog error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14865:27,error,error,27,https://root.cern,https://github.com/root-project/root/pull/14865,1,['error'],['error']
Availability,[IMT] Remove redundant call to EnableImplicitMT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5305:13,redundant,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5305,1,['redundant'],['redundant']
Availability,[IO] Improve error message when no TFile::Open for remote files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11719:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/11719,1,['error'],['error']
Availability,[MATHCORE] Fix template specializations (fix compilation errors),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2690:57,error,errors,57,https://root.cern,https://github.com/root-project/root/pull/2690,1,['error'],['errors']
Availability,[MSVC] ROOT builds under msvc option /permissive- with error C4576,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13421:55,error,error,55,https://root.cern,https://github.com/root-project/root/issues/13421,1,['error'],['error']
Availability,"[MSVC] ROOT_x86 failed due to libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336:45,error,error,45,https://root.cern,https://github.com/root-project/root/issues/15336,1,['error'],['error']
Availability,"[MSVC] Root is failed with error G694476FC: static_assert failed ""Unexpected size""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15321:27,error,error,27,https://root.cern,https://github.com/root-project/root/issues/15321,1,['error'],['error']
Availability,[Math] Make tolerance less strict on matrix inversion tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/521:12,toler,tolerance,12,https://root.cern,https://github.com/root-project/root/pull/521,1,['toler'],['tolerance']
Availability,[Minuit2] Reduce boilerplate code by removing redundant overloads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16443:46,redundant,redundant,46,https://root.cern,https://github.com/root-project/root/pull/16443,1,['redundant'],['redundant']
Availability,[NFC] Add missing word in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5153:26,error,error,26,https://root.cern,https://github.com/root-project/root/pull/5153,1,['error'],['error']
Availability,[NFC] Clarification of error message in case of root7 option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3678:23,error,error,23,https://root.cern,https://github.com/root-project/root/pull/3678,1,['error'],['error']
Availability,[NFC][DF] Fix error message in Vary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10619:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/10619,1,['error'],['error']
Availability,[PyROOT] Automatic downcasting of smart pointers to actual type,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:19,down,downcasting,19,https://root.cern,https://github.com/root-project/root/issues/16210,1,['down'],['downcasting']
Availability,[PyROOT] Error when copying a tuple into a specific position of a vector of tuples in PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8875:9,Error,Error,9,https://root.cern,https://github.com/root-project/root/issues/8875,1,['Error'],['Error']
Availability,[PyROOT] Error when looking for function template overload,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10224:9,Error,Error,9,https://root.cern,https://github.com/root-project/root/issues/10224,1,['Error'],['Error']
Availability,[PyROOT] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:49,error,error,49,https://root.cern,https://github.com/root-project/root/pull/13926,1,['error'],['error']
Availability,[PyROOT] Improve error handling for AsNumpy with unreadable objects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16281:17,error,error,17,https://root.cern,https://github.com/root-project/root/pull/16281,1,['error'],['error']
Availability,[PyROOT] Print meaningful error message when user pythonizor fails,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9729:26,error,error,26,https://root.cern,https://github.com/root-project/root/pull/9729,1,['error'],['error']
Availability,[PyROOT] Produce a more meaningful error message in addressof,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9075:35,error,error,35,https://root.cern,https://github.com/root-project/root/pull/9075,1,['error'],['error']
Availability,[PyROOT] Provide an explanatory error message when pickling cross-inh…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8476:32,error,error,32,https://root.cern,https://github.com/root-project/root/pull/8476,1,['error'],['error']
Availability,[PyROOT] error handling with cppyy and overloading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9909:9,error,error,9,https://root.cern,https://github.com/root-project/root/issues/9909,1,['error'],['error']
Availability,[RF] Add recovery from invalid parameters for BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/7266,1,['recover'],['recovery']
Availability,[RF] Add warnings for RooDataSet with weight errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4178:45,error,errors,45,https://root.cern,https://github.com/root-project/root/pull/4178,1,['error'],['errors']
Availability,[RF] AddressSanitizer failures in two RooFit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221:22,failure,failures,22,https://root.cern,https://github.com/root-project/root/issues/11221,1,['failure'],['failures']
Availability,[RF] AddressSanitizer reports alloc-dealloc-mismatch error when RooMinimizer is called multiple times,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8946:53,error,error,53,https://root.cern,https://github.com/root-project/root/issues/8946,1,['error'],['error']
Availability,[RF] Also compare parameter errors in RooFitResult::isIdentical(NoCov),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:28,error,errors,28,https://root.cern,https://github.com/root-project/root/pull/10465,1,['error'],['errors']
Availability,[RF] Avoid overhead of tracking evaluation error messages when not needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/12328,1,['error'],['error']
Availability,[RF] Avoid redundant copying of model in RooAbsL constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:11,redundant,redundant,11,https://root.cern,https://github.com/root-project/root/pull/12880,1,['redundant'],['redundant']
Availability,"[RF] Consistently do bin width correction when making RooHist from TH1. The RooPlot constructor from TH1 had an option to disable the bin width; correction, but this argument was not even used when the RooHist was; created with Poisson errors, which is the default case. The Bin width; correction was always done in this case, no matter what was the value of; `correctForBinWith`. However, when SumW2 errors are used, the `correctForBinWith` parameter; was actually considered! This caused inconsitent behavior, because when; plotting a `RooDataHist` the `correctForBinWith` parameter is hardcoded; to `false, meaning the bin width correction is done for Poisson errors; but not for SumW2 errors. This commit fixes this behavior by following the precedent set by the; more common Poisson error: the `correctForBinWith` parameter is; consistently ignored, and an exception is thrown when it's false. Consequently, the `correctForBinWith` parameter is also not hardcoded to; `false` in `RooDataHist::plotOn` anymore. The correct way to disable the bin width correction is to enable the; interpretation as a density when importing a TH1 to a RooDataHist. This commit fixes a bug reported on the forum.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10070:236,error,errors,236,https://root.cern,https://github.com/root-project/root/pull/10070,5,['error'],"['error', 'errors']"
Availability,[RF] Correctly restore the error definition in the Minimizer class after contour(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10651:27,error,error,27,https://root.cern,https://github.com/root-project/root/pull/10651,1,['error'],['error']
Availability,"[RF] Documentation updates, improvement of warning and error messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5315:55,error,error,55,https://root.cern,https://github.com/root-project/root/pull/5315,1,['error'],['error']
Availability,[RF] Don't throw an error if `roobatchcompute` lib was already loaded,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12696:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/12696,1,['error'],['error']
Availability,[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:15,redundant,redundant,15,https://root.cern,https://github.com/root-project/root/pull/11555,1,['redundant'],['redundant']
Availability,[RF] Error out for non-extendible PDFs in no-coef RooAddPdf constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11323:5,Error,Error,5,https://root.cern,https://github.com/root-project/root/pull/11323,1,['Error'],['Error']
Availability,[RF] Error out in `RooStats::sPlot` if variable for sWeights is already used in the fit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11768:5,Error,Error,5,https://root.cern,https://github.com/root-project/root/issues/11768,1,['Error'],['Error']
Availability,[RF] Error out when setting out-of-range variable value instead of clipping,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10470:5,Error,Error,5,https://root.cern,https://github.com/root-project/root/pull/10470,1,['Error'],['Error']
Availability,[RF] Fitting unweighted dataset with error corrections gives inconsistent result,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11112:37,error,error,37,https://root.cern,https://github.com/root-project/root/issues/11112,1,['error'],['error']
Availability,[RF] Fix ASAN build test failures in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11192:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/11192,1,['failure'],['failures']
Availability,"[RF] Fix `xroofit` bugs in breakdown,impact,and error on histograms of RooRealSumPdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13784:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/13784,1,['error'],['error']
Availability,[RF] Fix compilation error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7636:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/7636,1,['error'],['error']
Availability,[RF] Fix copy-paste error in RooAddModel constructor and modernization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8434:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/8434,1,['error'],['error']
Availability,[RF] Fix copy-paste error in `RooDataSet::binnedClone`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11507:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/11507,1,['error'],['error']
Availability,[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11985:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/11985,1,['error'],['error']
Availability,[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12660:9,error,error,9,https://root.cern,https://github.com/root-project/root/pull/12660,1,['error'],['error']
Availability,[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12707:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/12707,1,['error'],['error']
Availability,[RF] Fix remaining RooFit ASAN failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228:31,failure,failures,31,https://root.cern,https://github.com/root-project/root/pull/11228,1,['failure'],['failures']
Availability,[RF] Fix segmentation fault in BatchMode with multithreading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:22,fault,fault,22,https://root.cern,https://github.com/root-project/root/pull/10754,1,['fault'],['fault']
Availability,[RF] Fix splitting of RooDataSets with weight errors and avoid creating dummy weight variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/12459,1,['error'],['errors']
Availability,[RF] Fix std::regex failures on Mac10.15.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6508:20,failure,failures,20,https://root.cern,https://github.com/root-project/root/pull/6508,2,['failure'],['failures']
Availability,[RF] Fix stressRooStats failure on 32 bit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4212:24,failure,failure,24,https://root.cern,https://github.com/root-project/root/pull/4212,2,['failure'],['failure']
Availability,[RF] Fix testHistFactory compilation error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9640:37,error,error,37,https://root.cern,https://github.com/root-project/root/pull/9640,1,['error'],['error']
Availability,[RF] Improve recovery from invalid function values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recovery']
Availability,[RF] Improve recovery from invalid function values in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6383,1,['recover'],['recovery']
Availability,[RF] Improve sum-of-weight-squares handling with RooDataSet and bugfix for asymptotic error correction,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11282:86,error,error,86,https://root.cern,https://github.com/root-project/root/pull/11282,1,['error'],['error']
Availability,[RF] Make RooAbsTestStatistic error out if multiple ranges are passed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/7827,1,['error'],['error']
Availability,"[RF] Modernize RooSimPdfBuilder, fix a logic error and implement test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7489:45,error,error,45,https://root.cern,https://github.com/root-project/root/pull/7489,1,['error'],['error']
Availability,[RF] MultiProcess error handling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15797:18,error,error,18,https://root.cern,https://github.com/root-project/root/pull/15797,1,['error'],['error']
Availability,[RF] New mechanism for logging and throwing errors in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11428:44,error,errors,44,https://root.cern,https://github.com/root-project/root/pull/11428,1,['error'],['errors']
Availability,[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12704:16,error,error,16,https://root.cern,https://github.com/root-project/root/issues/12704,1,['error'],['error']
Availability,[RF] Prevent intermittent failures in testActionHelpers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7583:26,failure,failures,26,https://root.cern,https://github.com/root-project/root/pull/7583,1,['failure'],['failures']
Availability,[RF] Remove FillColor command for single curves in error band plots,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11204:51,error,error,51,https://root.cern,https://github.com/root-project/root/pull/11204,1,['error'],['error']
Availability,[RF] Remove entry masking feature from RooDataHist,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:18,mask,masking,18,https://root.cern,https://github.com/root-project/root/pull/9168,1,['mask'],['masking']
Availability,[RF] Remove error in `RooWorkspace::getSnapshot()` if no snapshot found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11584:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/11584,1,['error'],['error']
Availability,[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:12,redundant,redundant,12,https://root.cern,https://github.com/root-project/root/pull/11695,1,['redundant'],['redundant']
Availability,[RF] Remove redundant sanity check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432:12,redundant,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8432,1,['redundant'],['redundant']
Availability,[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12838:82,error,error,82,https://root.cern,https://github.com/root-project/root/pull/12838,1,['error'],['error']
Availability,[RF] RooAddPdf still emits unexpected errors about missing normalization sets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11476:38,error,errors,38,https://root.cern,https://github.com/root-project/root/issues/11476,1,['error'],['errors']
Availability,[RF] RooFit Python Tutorial Errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8973:28,Error,Errors,28,https://root.cern,https://github.com/root-project/root/issues/8973,1,['Error'],['Errors']
Availability,[RF] RooFit should give an error message when using different variables with same name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7417:27,error,error,27,https://root.cern,https://github.com/root-project/root/issues/7417,1,['error'],['error']
Availability,[RF] RooProdPdf test failure on s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/issues/12430,1,['failure'],['failure']
Availability,[RF] Segmentation fault in ROOT 6.30 workspace creation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225:18,fault,fault,18,https://root.cern,https://github.com/root-project/root/issues/14225,1,['fault'],['fault']
Availability,[RF] Segmentation fault in plotOn methid in PyROOT for ROOT>6.25,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474:18,fault,fault,18,https://root.cern,https://github.com/root-project/root/issues/8474,1,['fault'],['fault']
Availability,[RF] Set reasonable pre-fit errors for gammas in HistFactory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3912:28,error,errors,28,https://root.cern,https://github.com/root-project/root/pull/3912,1,['error'],['errors']
Availability,[RF] String parse error in RooSimPdfBuilder.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7481:18,error,error,18,https://root.cern,https://github.com/root-project/root/issues/7481,1,['error'],['error']
Availability,[RF] Support pdf normalization with error logging in RooBatchCompute,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12677:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/12677,1,['error'],['error']
Availability,[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/issues/12162,1,['failure'],['failure']
Availability,[RF] The testRooAbsL test compares two doubles and fails due to rounding errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389:73,error,errors,73,https://root.cern,https://github.com/root-project/root/pull/12389,1,['error'],['errors']
Availability,[RF] Weight errors are wrong when splitting RooDataSet and RooDataHist with weight errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12453:12,error,errors,12,https://root.cern,https://github.com/root-project/root/issues/12453,2,['error'],['errors']
Availability,[RF][HS3] improved error reporting for HistFactory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13098:19,error,error,19,https://root.cern,https://github.com/root-project/root/pull/13098,1,['error'],['error']
Availability,[RF][PyROOT] Pythonize RooFit::DataError to avoid Python 3 syntax errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:66,error,errors,66,https://root.cern,https://github.com/root-project/root/pull/9721,1,['error'],['errors']
Availability,"[ROOT-10518] Due to overwriting a function-local static, range strings; for multi-range fits would be lost. The full range was fitted multiple; times. This results in exactly the same coefficients as when fitting the; full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4885:247,error,errors,247,https://root.cern,https://github.com/root-project/root/pull/4885,1,['error'],['errors']
Availability,"[ROOT-10518] Due to overwriting a function-local static, range strings; for multi-range fits would be lost. The full range was fitted multiple; times. This results in exactly the same coefficients as when fitting the; full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4886:247,error,errors,247,https://root.cern,https://github.com/root-project/root/pull/4886,1,['error'],['errors']
Availability,"[ROOT-10586](https://sft.its.cern.ch/jira/browse/ROOT-10586) is caused by a missing `<cmath>` include, which resulted in old GCC 6 not ""seeing"" the floating-point overloads of `std::abs` and getting confused at which integer overload of `std::abs` it should pick when a `double` is passed in. This was not caught during testing because we test on recent compilers with a C++17-compatible STL implementation, where if you see some overloads of `std::abs`, you see all of them. By switching to `std::fabs` in addition to fixing the include, I guarantee that if this happens again during an overeager include cleanup, the compiler error message will be clearer. Old compilers will now complain about a missing declaration of `std::fabs`, rather than a failed overload resolution of integer `std::abs`. Fixes ROOT-10586.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5062:628,error,error,628,https://root.cern,https://github.com/root-project/root/pull/5062,1,['error'],['error']
Availability,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:505,down,down,505,https://root.cern,https://github.com/root-project/root/pull/5466,1,['down'],['down']
Availability,[ROOT-10797] Seg fault and misleading error messages if system header files are missing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14571:17,fault,fault,17,https://root.cern,https://github.com/root-project/root/issues/14571,2,"['error', 'fault']","['error', 'fault']"
Availability,"[ROOT-10813] Markers with ""open shape"" styles cover error bars.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14549:52,error,error,52,https://root.cern,https://github.com/root-project/root/issues/14549,1,['error'],['error']
Availability,[ROOT-5236]; The RooProdPdf was leaking memory when caching values.; HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas).; AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3508:120,alive,alive,120,https://root.cern,https://github.com/root-project/root/pull/3508,1,['alive'],['alive']
Availability,[ROOT-5236]; The RooProdPdf was leaking memory when caching values.; HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas).; AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3509:120,alive,alive,120,https://root.cern,https://github.com/root-project/root/pull/3509,1,['alive'],['alive']
Availability,[ROOT-8348] Segmentation Fault in TMVA::DecisionTreeNode::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14569:25,Fault,Fault,25,https://root.cern,https://github.com/root-project/root/issues/14569,1,['Fault'],['Fault']
Availability,[RS] Correct errors of asimov dataset.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5287:13,error,errors,13,https://root.cern,https://github.com/root-project/root/pull/5287,1,['error'],['errors']
Availability,[RS] Make HypoTestInverterPlot more robust against failed fits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6158:36,robust,robust,36,https://root.cern,https://github.com/root-project/root/pull/6158,1,['robust'],['robust']
Availability,[RVec] Improve error message in case of out-of-bounds access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11771:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/11771,1,['error'],['error']
Availability,[RooFit] - Set initial errors on some parameters that are missing their initial errors (norm and gamma factors),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16651:23,error,errors,23,https://root.cern,https://github.com/root-project/root/pull/16651,2,['error'],['errors']
Availability,"[See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36226/console).; ### Errors:; - include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 4310 more. ### Warnings:; - include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - include/TIsAProxy.h:44:45: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by def",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2453#issuecomment-411303638:1006,error,error,1006,https://root.cern,https://github.com/root-project/root/pull/2453#issuecomment-411303638,1,['error'],['error']
Availability,"[See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/42472/console).; ### Errors:; - include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 4220 more. ### Warnings:; - include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - include/TIsAProxy.h:44:45: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by def",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2711#issuecomment-425415808:1006,error,error,1006,https://root.cern,https://github.com/root-project/root/pull/2711#issuecomment-425415808,1,['error'],['error']
Availability,"[See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/42490/console).; ### Errors:; - include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/4.8.4/x86_64-slc6/include/c++/4.8.4/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 1155 more. ### Warnings:; - include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - include/TIsAProxy.h:44:45: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by def",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2705#issuecomment-425417346:1006,error,error,1006,https://root.cern,https://github.com/root-project/root/pull/2705#issuecomment-425417346,1,['error'],['error']
Availability,[See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66257/console).; ### Errors:; - FAILED: /usr/bin/ccache /usr/bin/c++ -DVECCORE_ENABLE_VC -I/mnt/build/workspace/root-pullrequests-build/root/roofit/roofit/inc -Iinclude -I/mnt/build/workspace/root-pullrequests-build/root/roofit/roofit -I/mnt/build/workspace/root-pullrequests-build/root/math/mathmore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/hist/hist/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/matrix/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/root/graf2d/graf/inc -I/mnt/build/workspace/root-pullrequests-build/root/tree/tree/inc -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/minuit/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/foam/inc -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c++11 -MD -MT roofit/roofit/CMakeFiles/RooFit.dir/src/RooBukinPdf.cxx.o -MF roofit/roofit/CMakeFiles/RooFit.dir/src/RooBukinPdf.cxx.o.d -o roofit/roofit/CMakeFiles/RooFit.dir/src/RooBukinPdf.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooBukinPdf.cxx ; - /mnt/build/workspace/root-pullrequests-build/root/roofit/roofit/src/BatchHelpers.h:81:22: error: enclosing class of constexpr non-static member function ‘double BatchHelpers::BracketAdapterWithBranch::operator[](std::size_t) const’ is not a literal type . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAddPdf.cxx:860:0: warning: ignoring #pragma omp simd [-Wunknown-pragmas],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4283#issuecomment-525175660:1711,error,error,1711,https://root.cern,https://github.com/root-project/root/pull/4283#issuecomment-525175660,1,['error'],['error']
Availability,[TBranch][NFC] More expressive error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3167:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/3167,1,['error'],['error']
Availability,[TDF] Fix build failure of roottest/dataframe/test_misc.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/356:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/356,1,['failure'],['failure']
Availability,[TDF] Fix compilation error when reading 66+ columns in the same node,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/740,1,['error'],['error']
Availability,[TDF] Make an error message slightly more helpful,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/984:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/984,1,['error'],['error']
Availability,[TDF] Make error message more helpful,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1009:11,error,error,11,https://root.cern,https://github.com/root-project/root/pull/1009,1,['error'],['error']
Availability,"[TMVA] Clean-up cross-validation, add error-handling and example",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/281:38,error,error-handling,38,https://root.cern,https://github.com/root-project/root/pull/281,1,['error'],['error-handling']
Availability,[TMVA] Require torch<2.5 otherwise on ARM an error is prompted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16718:45,error,error,45,https://root.cern,https://github.com/root-project/root/pull/16718,1,['error'],['error']
Availability,[TNDArrayT] Backward incompatibility: Error reading from ROOT Files created with earlier versions - Streamer bug,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10382:38,Error,Error,38,https://root.cern,https://github.com/root-project/root/issues/10382,1,['Error'],['Error']
Availability,"[TTreeProcMT] Fix missing space, add commas in error message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5263:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/5263,1,['error'],['error']
Availability,[TTreeReader] Error out if TTreeReaderValue is reading an array,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1842:14,Error,Error,14,https://root.cern,https://github.com/root-project/root/pull/1842,1,['Error'],['Error']
Availability,[TTreeReader] Formatting and better error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6326:36,error,error,36,https://root.cern,https://github.com/root-project/root/pull/6326,1,['error'],['error']
Availability,"[TTree] Print(""clusters"") off-by-one error in case of partial clusters",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9319:37,error,error,37,https://root.cern,https://github.com/root-project/root/issues/9319,1,['error'],['error']
Availability,[This PR](https://github.com/root-project/roottest/pull/202) to roottest should fix the PyROOT test failures.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396154996:100,failure,failures,100,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396154996,1,['failure'],['failures']
Availability,"[This commit](https://github.com/root-project/root/commit/48bb3f69e0a7ab3641a5f10a189d89b214e0fb18#diff-1b09d441e22aa3d48c645df3c0ee3e713e400e82c58983e106fd58c6bfdb4d6fR184-R185) broke the following usecase by changing the return type of `RNTupleModel::GetField` from a non-const RFieldBase to a const RFieldBase. ```cpp; auto r = RNTupleReader::Open(""r"", fileGuard.GetPath());; const RFieldBase *rvecf = r->GetModel()->GetField(""v"");; // ERROR: GenerateValue is non-const, rvecf is a const pointer; auto rvecv = rvecf->GenerateValue();; ROOT::RVec<int> *v = rvecv.Get<ROOT::RVec<int>>();; ```. Before that commit, the above snippet was valid code, and there is no simple alternative. As per a discussion with @jblomer , the preferred solution would be to also make `RFieldBase::{GenerateValue,CaptureValue,DestroyValue}` const. However,. > reading an entry needs to be fixed up in this case. Because currently, LoadEntry iterates over the RFieldValues and calls Read on their associated fields. RField::Read() is non-const because a new page may need to be mapped in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10408:439,ERROR,ERROR,439,https://root.cern,https://github.com/root-project/root/issues/10408,1,['ERROR'],['ERROR']
Availability,[This piece of code is the faulty one](https://github.com/root-project/root/blame/e6080327f4e6318692d3917152598126b76f4455/hist/histpainter/src/THistPainter.cxx#L7407). It looks weird ... I do not really understand the logic right now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12567#issuecomment-1561160055:27,fault,faulty,27,https://root.cern,https://github.com/root-project/root/issues/12567#issuecomment-1561160055,1,['fault'],['faulty']
Availability,"[This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5590:54,error,error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names,54,https://root.cern,https://github.com/root-project/root/pull/5590,1,['error'],['error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names']
Availability,[Tree/TreeReader] Prompt errors in ill defined cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3460:25,error,errors,25,https://root.cern,https://github.com/root-project/root/pull/3460,1,['error'],['errors']
Availability,[TreePlayer][ROOT-9713] Remove printing of error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2811:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/2811,1,['error'],['error']
Availability,[TreeReader] [ROOT-9743] Always set dictionary if available in CreateProxy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2879:50,avail,available,50,https://root.cern,https://github.com/root-project/root/pull/2879,1,['avail'],['available']
Availability,[Tree] Mention branch name in TBranchElement error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5212:45,error,error,45,https://root.cern,https://github.com/root-project/root/pull/5212,1,['error'],['error']
Availability,[Tree] Print Error message if a friend has kEntriesReshuffled set,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5182:13,Error,Error,13,https://root.cern,https://github.com/root-project/root/pull/5182,1,['Error'],['Error']
Availability,[Tutorials] CsvDS: download csv in the macro and not in CMake,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3638:19,down,download,19,https://root.cern,https://github.com/root-project/root/pull/3638,1,['down'],['download']
Availability,"[UPDATE]: The problem is in the default internal flag used for computing the combined error. Code below works if one uses correct settings. See comments below. The TGraphMultiErrors does not implement correctly the overloads from TGraph of the error getters. ; In case of multiple errors, the function should returned , according to the documentation, the combined error, summing them in quadrature assuming they are un-correlated. This causes that a wrong error is used when fitting.; See https://root-forum.cern.ch/t/tgraphmultierrors-fitting/47807. To reproduce: ; ```; TGraphMultiErrors g;; g.AddPoint(2,3);; double e1[1] = {1};; double e2[1] = {3}; ; g.AddYError(1, e1, e1);; g.AddYError(1, e2, e2); ; std::cout << g.GetEYlow()[0] << std::endl;; ```. As a side note, the interface needs several improvements ! It is not clear how to correctly fill the input errors. ; One should probably use just std::vector and make it clear how points and errors are referenced in the input arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9335:86,error,error,86,https://root.cern,https://github.com/root-project/root/issues/9335,7,['error'],"['error', 'errors']"
Availability,[VecOps] Fix compilation errors in case of RVec of move-only types,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11710:25,error,errors,25,https://root.cern,https://github.com/root-project/root/pull/11710,1,['error'],['errors']
Availability,[VecOps] Improve wording of an error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13120:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/13120,1,['error'],['error']
Availability,[VecOps] Masking RVec<T> is broken for non-trivially-constructible Ts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12398:9,Mask,Masking,9,https://root.cern,https://github.com/root-project/root/issues/12398,1,['Mask'],['Masking']
Availability,[WIP] Improved error handling for template instantiation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/12449,1,['error'],['error']
Availability,[WIP] Slim down man,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1544:11,down,down,11,https://root.cern,https://github.com/root-project/root/pull/1544,1,['down'],['down']
Availability,[Web Graphics] Two failures with one simple PyROOT plotter,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15474:19,failure,failures,19,https://root.cern,https://github.com/root-project/root/issues/15474,2,['failure'],['failures']
Availability,[Windows] Fix fatal error C1001: Internal compiler error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8327:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/8327,2,['error'],['error']
