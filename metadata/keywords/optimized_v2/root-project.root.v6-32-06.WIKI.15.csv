quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"ges() const; boolHaveAsymErrors() const; boolHaveCoordErrors() const; voidInitialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError); doubleInvError(unsigned int ipoint) const; ROOT::Fit::BinData&LogTransform(); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::BinData&operator=(const ROOT::Fit::BinData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); unsigned intPointSize() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; doubleRefVolume() const; voidResize(unsigned int npoints); voidSetRefVolume(double value); unsigned intSize() const; doubleSumOfContent() const; doubleSumOfError2() const; doubleValue(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). Data Members; public:. static ROOT::Fit::BinData::ErrorTypekAsymError; static ROOT::Fit::BinData::ErrorTypekCoordError; static ROOT::Fit::BinData::ErrorTypekNoError; static ROOT::Fit::BinData::ErrorTypekValueError. private:. vector<double>fBinEdgevector containing the bin upper edge (coordinate will contain low edge); ROOT::Fit::DataVector*fDataVectorpointer to the copied in data vector; ROOT::Fit::DataWrapper*fDataWrapperpointer to the external data wrapper structure; unsigned intfDimcoordinate dimension; unsigned intfNPointsnumber of contained points in the data set (can be different than size of vector); unsigned intfPointSizetotal point size including value and errors (= fDim + 2 for error in only Y ); doublefRefVolumereference bin volume - used to normalize the bins in case of variable bins data; doublefSumContenttotal sum of the bin data content; doublefSumError2total sum square of the errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int GetPointSize(ROOT::Fit::BinData::ErrorType err, unsigned int dim). ErrorType GetErrorType() const. ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__BinData.html:5032,Error,ErrorTypekAsymError,5032,root/html602/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__BinData.html,8,['Error'],"['ErrorTypekAsymError', 'ErrorTypekCoordError', 'ErrorTypekNoError', 'ErrorTypekValueError']"
Availability,"get axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details. Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts ("","" means logical AND):; myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile. NOTE that the default under- / overflow behavior differs from what ProjectionX; does! Profiles take the bin center into account, so here the under- and overflow; bins are ignored by default. TProfile * ProfileY(const char* name = ""_pfy"", Int_t firstxbin = 1, Int_t lastxbin = -1, Option_t* option = """") const; *-*-*-*-*Project a 2-D histogram into a profile histogram along Y*-*-*-*-*-*; *-* ========================================================. The projection is made from the channels along the X axis; ranging from firstxbin to lastxbin included.; By default, bins 1 to nx are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. if option ""d"" is specified, the profile is drawn in the current pad. if opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2.html:47149,error,error,47149,root/html534/TH2.html,https://root.cern,https://root.cern/root/html534/TH2.html,2,['error'],['error']
Availability,"get axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details. Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts ("","" means logical AND):; myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile. NOTE that the default under- / overflow behavior differs from what ProjectionX; does! Profiles take the bin center into account, so here the under- and overflow; bins are ignored by default. TProfile * ProfileY(const char* name = ""_pfy"", Int_t firstxbin = 1, Int_t lastxbin = -1, Option_t* option = """") const; Project a 2-D histogram into a profile histogram along Y. The projection is made from the channels along the X axis; ranging from firstxbin to lastxbin included.; By default, bins 1 to nx are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. if option ""d"" is specified, the profile is drawn in the current pad. if option ""o"" , the original axis range of the target axis will be; kept, but only bins ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:48724,error,error,48724,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,4,['error'],['error']
Availability,"get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TThread.html:14443,error,error,14443,root/html532/TThread.html,https://root.cern,https://root.cern/root/html532/TThread.html,4,['error'],['error']
Availability,"get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread(const TThread& ). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TThread.html:15320,error,error,15320,root/html602/TThread.html,https://root.cern,https://root.cern/root/html602/TThread.html,4,['error'],['error']
Availability,"getGenerator() implementation. The default; implementation does nothing. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Check if given observable can be safely generated using the; pdfs internal generator mechanism (if that existsP). Observables; on which a PDF depends via more than route are not safe; for use with internal generators because they introduce; correlations not known to the internal generator. RooDataHist * generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during event generation; Extended() -- The actual number of events generated will be sampled from a Poisson distribution; with mu=nevt. For use with extended maximum likelihood fits; ExpectedData() -- Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()). RooDataHist * generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:64616,error,error,64616,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,9,['error'],['error']
Availability,"getRegression(); Training one (mono target regression) foam, whose cells contain; the average 0th target. The dimension of the foam = number of; non-targets (= number of variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDEFoam.html:22016,error,error,22016,root/html534/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDEFoam.html,6,['error'],['error']
Availability,"get_vol = 0, Bool_t check_norm = kFALSE); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefreshPhysicalNodes(Bool_t lock = kTRUE); voidRegisterMatrix(const TGeoMatrix* matrix); voidRemoveMaterial(Int_t index); voidRemoveNavigator(const TGeoNavigator* nav); Int_tReplaceVolume(TGeoVolume* vorig, TGeoVolume* vnew); voidTObject::ResetBit(UInt_t f); voidResetState(); voidResetUserData(); voidRestoreMasterVolume()MENU ; Double_tSafety(Bool_t inside = kFALSE); TGeoNode*SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil = 1.0000000000000001E-5, const char* g3path = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(const char* filename = ""tgeoatt.C"")MENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidSelectTrackingMedia(); TGeoPNEntry*SetAlignableEntry(const char* unique_name, const char* path, Int_t uid = -1); voidSetAllIndex(); voidSetAnimateTracks(Bool_t flag = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3)MENU ; voidSetCheckedNode(TGeoNode* node); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetClipping(Bool_t flag = kTRUE)MENU ; voidSetClippingShape(TGeoShape* clip); voidSetCurrentDirection(Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); Bool_tSetCurrentNavigator(Int_t index); voidSetCurrentPoint(Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCurrentTrack(Int_t i); voidSetCurrentTrack(TVirtualGeoTrack* track); voidSetDrawExtraPaths(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExplodedView(Int_t iopt =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoManager.html:28075,down,downwards,28075,root/html602/TGeoManager.html,https://root.cern,https://root.cern/root/html602/TGeoManager.html,4,['down'],['downwards']
Availability,"gfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←. TNetSystem; ←. TXNetSystem. TNetXNGSystem. TUnixSystem. TWebSystem. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:19031,error,error,19031,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,2,['error'],['error']
Availability,"gged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.seco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153862,error,errors,153862,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['error'],['errors']
Availability,gger.hxx:106; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel()=defaultConstruct an anonymous channel.; ROOT::Experimental::RLogChannel::GetEffectiveVerbosityELogLevel GetEffectiveVerbosity(const RLogManager &mgr) constDefinition RLogger.hxx:313; ROOT::Experimental::RLogChannel::fNamestd::string fNameName as shown in diagnostics.Definition RLogger.hxx:103; ROOT::Experimental::RLogChannel::GetVerbosityELogLevel GetVerbosity() constDefinition RLogger.hxx:123; ROOT::Experimental::RLogChannel::SetVerbosityELogLevel SetVerbosity(ELogLevel verbosity)Definition RLogger.hxx:118; ROOT::Experimental::RLogChannel::GetNameconst std::string & GetName() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:17774,error,errors,17774,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['error'],['errors']
Availability,"ggering a full re-build. The option if effective only for PROOF protocol > 8 . The lab 'dirlab' (e.g. 'G0') indicates that the package is to uploaded to an alternative global directory for global usage. This may require special privileges. If download is kTRUE and the package is not found locally, then it is downloaded from the master repository. Returns 0 in case of success and -1 in case of error. ; Definition at line 8441 of file TProof.cxx. ◆ UseDynamicStartup(). Bool_t TProof::UseDynamicStartup ; (; ); const. inline . Definition at line 921 of file TProof.h. ◆ ValidateDSet(). void TProof::ValidateDSet ; (; TDSet * ; dset). protectedvirtual . Validate a TDSet. ; Reimplemented in TProofSuperMaster.; Definition at line 9380 of file TProof.cxx. ◆ VerifyDataSet(). Int_t TProof::VerifyDataSet ; (; const char * ; uri, . const char * ; optStr = """" . ). virtual . Verify if all files in the specified dataset are available. ; Print a list and return the number of missing files. Returns -1 in case of error. ; Reimplemented in TProofLite.; Definition at line 11130 of file TProof.cxx. ◆ VerifyDataSetParallel(). Int_t TProof::VerifyDataSetParallel ; (; const char * ; uri, . const char * ; optStr . ). protected . Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ; Definition at line 11181 of file TProof.cxx. Friends And Related Symbol Documentation. ◆ TDataSetManager. friend class TDataSetManager. friend . Definition at line 322 of file TProof.h. ◆ TPacketizer. friend class TPacketizer. friend . Definition at line 318 of file TProof.h. ◆ TPacketizerAdaptive. friend class TPacketizerAdaptive. friend . Definition at line 320 of file TProof.h. ◆ TPacketizerDev. friend class TPacketizerDev. friend . Definition at line 319 of file TProof.h. ◆ TProofInputHandler. friend class TProofInputHandler. friend . Definition at line 324 of file TProof.h. ◆ TProofInterruptHandler. friend class TProofInterruptHandler. friend . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:159764,error,error,159764,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"ggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19350,error,error,19350,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,4,['error'],['error']
Availability,"ggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:18861,error,error,18861,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,2,['error'],['error']
Availability,"gh = 0;; 859 return -1;; 860 }; 861 strcpy(cname,fANames[ipar].Data());; 862 value = fA[ipar];; 863 verr = fParamError[ipar];; 864 vlow = fAMN[ipar];; 865 vhigh = fAMX[ipar];; 866 return 0;; 867}; 868 ; 869////////////////////////////////////////////////////////////////////////////////; 870/// Return name of parameter ipar; 871 ; 872const char *TFumili::GetParName(Int_t ipar) const; 873{; 874 if (ipar < 0 || ipar > fNpar) return """";; 875 return fANames[ipar].Data();; 876}; 877 ; 878////////////////////////////////////////////////////////////////////////////////; 879/// Return errors after MINOs; 880/// not implemented; 881 ; 882Int_t TFumili::GetErrors(Int_t ipar,Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const; 883{; 884 eparab = 0;; 885 globcc = 0;; 886 if (ipar<0 || ipar>=fNpar) {; 887 eplus = 0;; 888 eminus = 0;; 889 return -1;; 890 }; 891 eplus=fParamError[ipar];; 892 eminus=-eplus;; 893 return 0;; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Return global fit parameters; 898/// - amin : chisquare; 899/// - edm : estimated distance to minimum; 900/// - errdef; 901/// - nvpar : number of variable parameters; 902/// - nparx : total number of parameters; 903 ; 904Int_t TFumili::GetStats(Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const; 905{; 906 amin = 2*fS;; 907 edm = fGT; //; 908 errdef = 0; // ??; 909 nparx = fNpar;; 910 nvpar = 0;; 911 for(Int_t ii=0; ii<fNpar; ii++) {; 912 if(fPL0[ii]>0.) nvpar++;; 913 }; 914 return 0;; 915}; 916 ; 917////////////////////////////////////////////////////////////////////////////////; 918/// Return Sum(log(i) i=0,n; 919/// used by log-likelihood fits; 920 ; 921Double_t TFumili::GetSumLog(Int_t n); 922{; 923 if (n < 0) return 0;; 924 if (n > fNlog) {; 925 if (fSumLog) delete [] fSumLog;; 926 fNlog = 2*n+1000;; 927 fSumLog = new Double_t[fNlog+1];; 928 Double_t fobs = 0;; 929 for (Int_t j=0;j<=fNlog;j++) {; 930 i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:26218,error,errors,26218,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['error'],['errors']
Availability,"gh RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62736,error,error,62736,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['error']
Availability,"ght arrays to the data store implementation. ; Definition at line 2413 of file RooDataHist.cxx. ◆ removeSelfFromDir(). void RooDataHist::removeSelfFromDir ; (; ). inline . Definition at line 164 of file RooDataHist.h. ◆ reset(). void RooDataHist::reset ; (; ). overridevirtual . Reset all bin weights to zero. ; Reimplemented from RooAbsData.; Definition at line 2158 of file RooDataHist.cxx. ◆ set() [1/4]. void RooDataHist::set ; (; const RooArgSet & ; row, . double ; wgt, . double ; wgtErr = -1. . ). Set a bin content. ; Parameters. [in]rowCoordinates to compute the bin from. ; [in]wgtNew bin content. ; [in]wgtErrOptional error of the bin content. . Definition at line 1791 of file RooDataHist.cxx. ◆ set() [2/4]. void RooDataHist::set ; (; const RooArgSet & ; row, . double ; wgt, . double ; wgtErrLo, . double ; wgtErrHi . ). Set a bin content. ; Parameters. [in]rowCoordinates of the bin to be set. ; [in]wgtNew bin content. ; [in]wgtErrLoLow error of the bin content. ; [in]wgtErrHiHigh error of the bin content. . Definition at line 1732 of file RooDataHist.cxx. ◆ set() [3/4]. void RooDataHist::set ; (; double ; wgt, . double ; wgtErr = -1 . ). Write weight into current bin. ; Set bin content of bin that was last loaded with get(std::size_t).; Deprecated:Use set(std::size_t,double,double) ; Parameters. [in]wgtNew bin content. ; [in]wgtErrOptional error of the bin content. . Definition at line 1777 of file RooDataHist.cxx. ◆ set() [4/4]. void RooDataHist::set ; (; std::size_t ; binNumber, . double ; wgt, . double ; wgtErr . ). Set bin content of bin that was last loaded with get(std::size_t). ; Parameters. [in]binNumberOptional bin number to set. If empty, currently active bin is set. ; [in]wgtNew bin content. ; [in]wgtErrError of the new bin content. If the weight need not have an error, use 0. or a negative number. . Definition at line 1754 of file RooDataHist.cxx. ◆ SetName(). void RooDataHist::SetName ; (; const char * ; name). overridevirtual . Change the name of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:75517,error,error,75517,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['error']
Availability,"ght for events; wFunc = ROOT.RooFormulaVar(""w"", ""event weight"", ""(x*x+10)"", [x]); ; # Add column with variable w to previously generated dataset; w = data.addColumn(wFunc); ; # Dataset d is now a dataset with two observable (x,w) with 1000 entries; data.Print(); ; # Instruct dataset wdata in interpret w as event weight rather than as; # observable; wdata = ROOT.RooDataSet(data.GetName(), data.GetTitle(), data, data.get(), """", w.GetName()); ; # Dataset d is now a dataset with one observable (x) with 1000 entries and; # a sum of weights of ~430K; wdata.Print(); ; # Unbinned ML fit to weighted data; # ---------------------------------------------------------------; ; # Construction quadratic polynomial pdf for fitting; a0 = ROOT.RooRealVar(""a0"", ""a0"", 1); a1 = ROOT.RooRealVar(""a1"", ""a1"", 0, -1, 1); a2 = ROOT.RooRealVar(""a2"", ""a2"", 1, 0, 10); p2 = ROOT.RooPolynomial(""p2"", ""p2"", x, [a0, a1, a2], 0); ; # Fit quadratic polynomial to weighted data; ; # NOTE: A plain Maximum likelihood fit to weighted data does in general; # NOT result in correct error estimates, individual; # event weights represent Poisson statistics themselves.; #; # Fit with 'wrong' errors; r_ml_wgt = p2.fitTo(wdata, Save=True, PrintLevel=-1); ; # A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:; ; r_ml_wgt_corr = p2.fitTo(wdata, Save=True, SumW2Error=True, PrintLevel=-1); ; # Plot weighted data and fit result; # ---------------------------------------------------------------; ; # Construct plot frame; frame = x.frame(Title=""Unbinned ML fit, chi^2 fit to weighted data""); ; # Plot data using sum-of-weights-squared error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:1897,error,error,1897,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,1,['error'],['error']
Availability,"ghtDecay . ). inline . compute the regularization (L1, L2) ; Definition at line 209 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L1 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; itProbabilityBegin, . ItProbability ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). cross entropy error function ; Definition at line 412 of file NeuralNet.icc. ◆ cudaError(). void TMVA::DNN::cudaError ; (; cudaError_t ; code, . const char * ; file, . int ; line, . bool ; abort = true . ). inline . Function to check cuda return code. ; Taken from http://stackoverflow.com/questions/14038589/ ; Definition at line 198 of file CudaMatrix.h. ◆ CurandInitializationKernel(). __global__ void TMVA::DNN::CurandInitializationKernel ; (; unsigned long long ; seed, . curandState_t * ; state . ). Definition at line 26 of file CudaMatrix.cu. ◆ debugTensor(). template<typename Architecture > . auto TMVA::DNN::debugTensor ; (; const typename Architecture::Tensor_t & ; A, . const std::string ; name = ""tensor"" . ); -> void. Definition at line 582 of file GeneralLayer.h. ◆ evaluate() [1/3]. template<typename Architecture_t > . auto TMVA::DNN::evaluate ; (; ELossFunction ; f, . const typename Architecture_t::Matrix_t & ; Y, . const typename Architecture_t::Matrix_t & ; output, . const typename Architecture_t::Matrix_t & ; w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:27277,error,error,27277,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['error'],['error']
Availability,"ghted histogram is an histogram which has been filled with weights and it; contains the sum of the weight square ( TH1::Sumw2() has been called). The bin error for a weighted; histogram is the square root of the sum of the weight square. Treatment of Empty Bins. Empty bins, which have the content equal to zero AND error equal to zero,; are excluded by default from the chisquare fit, but they are considered in the likelihood fit.; since they affect the likelihood if the function value in these bins is not negligible.; When using option ""WW"" these bins will be considered in the chi2 fit with an error of 1.; Note that if the histogram is having bins with zero content and non zero-errors they are considered as; any other bins in the fit. Instead bins with zero error and non-zero content are excluded in the chi2 fit.; A likelihood fit should also not be peformed on such an histogram, since we are assuming a wrong pdf for each bin.; In general, one should not fit an histogram with non-empty bins and zero errors, apart if all the bins have zero errors.; In this case one could use the option ""w"", which gives a weight=1 for each bin (unweighted least-square fit). Fitting a histogram of dimension N with a function of dimension N-1. It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; In this case the option ""Integral"" is not allowed and each cell has; equal weight. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given an histogram h, one can retrieve an associated function; with: TF1 *myfunc = h->GetFunction(""myfunc"");. Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case direct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:84242,error,errors,84242,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,8,['error'],['errors']
Availability,"ghted profile, it is equivalent to the number of entries per bin; 848/// The effective entries is defined as the square of the sum of the weights divided by the; 849/// sum of the weights square.; 850/// TProfile::Sumw2() must be called before filling the profile with weights.; 851/// Only by calling this method the sum of the square of the weights per bin is stored.; 852 ; 853Double_t TProfile::GetBinEffectiveEntries(Int_t bin) const; 854{; 855 return TProfileHelper::GetBinEffectiveEntries((TProfile*)this, bin);; 856}; 857 ; 858////////////////////////////////////////////////////////////////////////////////; 859/// Return bin error of a Profile histogram; 860///; 861/// Computing errors: A moving field; 862///; 863/// The computation of errors for a TProfile has evolved with the versions; 864/// of ROOT. The difficulty is in computing errors for bins with low statistics.; 865///; 866/// - prior to version 3.00, we had no special treatment of low statistic bins.; 867/// As a result, these bins had huge errors. The reason is that the; 868/// expression eprim2 is very close to 0 (rounding problems) or 0.; 869/// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; 870/// eprim2 very small and the bin errors set to the average bin errors, following; 871/// recommendations from a group of users.; 872/// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; 873/// should be applied only to low statistic bins.; 874/// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; 875/// to take two times the average error on all bins for these low; 876/// statistics bins giving a very small value for eprim2.; 877/// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; 878/// when a TProfile is projected (ProjectionX). The previous algorithm; 879/// generated a N^2 problem when projecting a TProfile with a large number of; 880/// bins (eg 100000).; 881/// - in version 3.05/06, a new static fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:31497,error,errors,31497,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['errors']
Availability,"ghts per bin.Definition TProfile2D.cxx:2043; TProfile2D::GetBinSumw2virtual TArrayD * GetBinSumw2()Definition TProfile2D.h:121; TProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,...Definition TProfile3D.h:27; TProfile3D::operator=TProfile3D & operator=(const TProfile3D &profile)Definition TProfile3D.cxx:162; TProfile3D::DoProjectProfile2DTProfile2D * DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const overrideInternal method to project to a 2D Profile.Definition TProfile3D.cxx:1069; TProfile3D::GetWDouble_t * GetW()Definition TProfile3D.h:75; TProfile3D::MergeLong64_t Merge(TCollection *list) overrideMerge all histograms in the collection in this histogram.Definition TProfile3D.cxx:894; TProfile3D::fgApproximatestatic Bool_t fgApproximateBin error approximation option.Definition TProfile3D.h:42; TProfile3D::GetErrorOptionOption_t * GetErrorOption() constReturn option to compute profile2D errors.Definition TProfile3D.cxx:753; TProfile3D::fScalingBool_t fScaling! True when TProfile3D::Scale is calledDefinition TProfile3D.h:38; TProfile3D::SetBinsvoid SetBins(const Int_t *nbins, const Double_t *range)Definition TProfile3D.h:50; TProfile3D::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile3D.cxx:1175; TProfile3D::Copyvoid Copy(TObject &hnew) const overrideCopy a Profile3D histogram to a new profile2D histogram.Definition TProfile3D.cxx:350; TProfile3D::BufferFillInt_t BufferFill(Double_t, Double_t) overrideaccumulate arguments in buffer.Definition TProfile3D.h:44; TProfile3D::fTsumwt2Double_t fTsumwt2Total Sum of weight*T*T.Definition TProfile3D.h:40; TProfile3D::GetBinEffectiveEntriesvirtual Double_t GetBinEffectiveEntries(Int_t bin)Return bin effective entries for a weighted filled Profile histogram.Definition TProfile3D.cxx:721; TProfile3D::GetStatsvo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:63597,error,errors,63597,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['errors']
Availability,ghts; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 2043 of file TProfile2D.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 31 of file TProfile2D.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 30 of file TProfile2D.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile2D::fBinEntries. protected . Number of entries per bin. ; Definition at line 34 of file TProfile2D.h. ◆ fBinSumw2. TArrayD TProfile2D::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 41 of file TProfile2D.h. ◆ fErrorMode. EErrorType TProfile2D::fErrorMode. protected . Option to compute errors. ; Definition at line 35 of file TProfile2D.h. ◆ fgApproximate. Bool_t TProfile2D::fgApproximate = kFALSE. staticprotected . Bin error approximation option. ; Definition at line 42 of file TProfile2D.h. ◆ fScaling. Bool_t TProfile2D::fScaling. protected . ! True when TProfile2D::Scale is called ; Definition at line 38 of file TProfile2D.h. ◆ fTsumwz. Double_t TProfile2D::fTsumwz. protected . Total Sum of weight*Z. ; Definition at line 39 of file TProfile2D.h. ◆ fTsumwz2. Double_t TProfile2D::fTsumwz2. protected . Total Sum of weight*Z*Z. ; Definition at line 40 of file TProfile2D.h. ◆ fZmax. Double_t TProfile2D::fZmax. protected . Upper limit in Z (if set) ; Definition at line 37 of file TProfile2D.h. ◆ fZmin. Double_t TProfile2D::fZmin. protected . Lower limit in Z (if set) ; Definition at line 36 of file TProfile2D.h. Libraries for TProfile2D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile2D.h; hist/hist/src/TProfile2D.cxx. TProfile2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:107577,error,error,107577,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['error']
Availability,"ghtsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, std::vector< size_t > WeightsNRows, std::vector< size_t > WeightsNCols, size_t BiasesNSlices, std::vector< size_t > BiasesNRows, std::vector< size_t > BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  General Constructor with different weights dimension. ;  ;  VGeneralLayer (VGeneralLayer< Architecture_t > *layer);  Copy the layer provided as a pointer. ;  ; virtual ~VGeneralLayer ();  Virtual Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent)=0;  Writes the information and the weights about the layer in an XML node. ;  ; virtual void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward)=0;  Backpropagates the error. ;  ; void CopyBiases (const std::vector< Matrix_t > &otherBiases);  Copies the biases provided as an input. ;  ; template<typename Arch > ; void CopyParameters (const VGeneralLayer< Arch > &layer);  Copy all trainable weight and biases from another equivalent layer but with different architecture The function can copy also extra parameters in addition to weights and biases if they are return by the function GetExtraLayerParameters. ;  ; void CopyWeights (const std::vector< Matrix_t > &otherWeights);  Copies the weights provided as an input. ;  ; virtual void Forward (Tensor_t &input, bool applyDropout=false)=0;  Computes activation of the layer for the given input. ;  ; Tensor_t & GetActivationGradients ();  ; const Tensor_t & GetActivationGradients () const;  ; Matrix_t GetActivationGradientsAt (size_t i);  ; const Matrix_t & GetActivationGradientsAt (size_t i) const;  ; size_t GetBatchSize () const;  Getters. ;  ; std::v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:1910,error,error,1910,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,1,['error'],['error']
Availability,"gile, inefficient, and limiting.; CINT is not relevant, I use PyROOT; 	For calling into C++, PyROOT relies on CINT's reflection data from ROOT (which is why it's so fantastic compared to static SWIG-based approaches). And ROOT relies on CINT for I/O, both the dictionaries and the interpreter. I.e. you use CINT much, much more than you think: it's not just the prompt, it in the core of most of ROOT.;  ; So we need to do something. C++ interpreters are extremely rare. Instead of rewriting a C++ interpreter we decided to reuse existing code. Code that we can still influence, but that's nevertheless production-grade. We expected that this will solve the maintenance and correctness issues. And because it's correct we don't need Reflex, but can instead use one central, fast (compiler!) reflection database.; So yes, this is a major overhaul of ROOT and the dictionaries. We will signal that with a new major ROOT version number. But we expect it to solve the correctness, stability, memory and CPU-consumption as well as the maintenance issues we currently have. The current implementation of cling (which is not yet complete) uses a mere 5000 lines of custom code developed by HEP; everything else is provided through LLVM and clang.; And regarding PyROOT: I am sure Wim will make good use of the new JIT power that comes with cling! Just like we expect the JIT to leave traces e.g. in TFormula, and the real reflection database in the I/O, THtml etc. It gets us unstuck, flexible and future-safe in many central areas of ROOT. O the places you'll go!; Cheers,. Axel Naumann's blog. Comments. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:48 Permalink . Other Python bindings . I noticed that there are multiple other ways to call C++ code from Python, one of them being included in the Boost library. What would it do to the complexity (and dependencies) to use an interface that doesn't build on top of CINT/Reflex?. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:4679,mainten,maintenance,4679,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['mainten'],['maintenance']
Availability,"gin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidSetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoTube(); TGeoTube(Double_t* params); TGeoTube(const TGeoTube&); TGeoTube(Double_t rmin, Double_t rmax, Double_t dz); TGeoTube(const char* name, Double_t rmin, Double_t rmax, Double_t dz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTube.html:11687,Toler,Tolerance,11687,root/html602/TGeoTube.html,https://root.cern,https://root.cern/root/html602/TGeoTube.html,2,['Toler'],['Tolerance']
Availability,"gin of the histogram inbetween a binwidth and; rebin the histogram with the new offset given by the Slider. void DoBinOffset(); Slot connected to the OffSetNumberEntry which is related to the; OffSetSlider changes the origin of the histogram inbetween a binwidth. void DoApply(); Slot connected to the Apply button of the Binning tab. void DoCancel(); Slot connected to the Cancel button of the Binning tab. TString GetHistTypeLabel(); Returns the selected histogram type (HIST, LEGO1-2, SURF1-5). TString GetHistCoordsLabel(); Return the selected coordinate system of the histogram (POL,CYL,SPH,PSR). TString GetHistErrorLabel(); Return the selected error type (E,E1-5). TString GetHistAddLabel(); Return the selected shape of the histogram (C, L, LF2). TGComboBox* BuildHistTypeComboBox(TGFrame* parent, Int_t id); Create histogram type combo box. TGComboBox* BuildHistCoordsComboBox(TGFrame* parent, Int_t id); Create coordinate system type combo box. TGComboBox* BuildHistErrorComboBox(TGFrame* parent, Int_t id); Create error type combo box. TGComboBox* BuildHistAddComboBox(TGFrame* parent, Int_t id); Create Line/Bar combo box. TGComboBox* BuildPercentComboBox(TGFrame* parent, Int_t id); Create Percentage combo box for bar option. void ChangeErrorCombo(Int_t i); Change the error combo box entry. void PaintBox3D(Float_t* p1, Float_t* p2, Float_t* p3, Float_t* p4); Paint a 3D box. Int_t* Dividers(Int_t n); Return an array of dividers of n (without the trivial divider n).; The number of dividers is saved in the first entry. void RecursiveRemove(TObject* obj); If the contained histogram obj is deleted we must set its pointer to zero. TH1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Carsten Hof 16/08/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 16:07; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH1Editor.html:33109,error,error,33109,root/html604/TH1Editor.html,https://root.cern,https://root.cern/root/html604/TH1Editor.html,2,['error'],['error']
Availability,"gin of the histogram inbetween a binwidth and; rebin the histogram with the new offset given by the Slider. void DoBinOffset(); Slot connected to the OffSetNumberEntry which is related to the; OffSetSlider changes the origin of the histogram inbetween a binwidth. void DoApply(); Slot connected to the Apply button of the Binning tab. void DoCancel(); Slot connected to the Cancel button of the Binning tab. TString GetHistTypeLabel(); Returns the selected histogram type (HIST, LEGO1-2, SURF1-5). TString GetHistCoordsLabel(); Return the selected coordinate system of the histogram (POL,CYL,SPH,PSR). TString GetHistErrorLabel(); Return the selected error type (E,E1-5). TString GetHistAddLabel(); Return the selected shape of the histogram (C, L, LF2). TGComboBox* BuildHistTypeComboBox(TGFrame* parent, Int_t id); Create histogram type combo box. TGComboBox* BuildHistCoordsComboBox(TGFrame* parent, Int_t id); Create coordinate system type combo box. TGComboBox* BuildHistErrorComboBox(TGFrame* parent, Int_t id); Create error type combo box. TGComboBox* BuildHistAddComboBox(TGFrame* parent, Int_t id); Create Line/Bar combo box. TGComboBox* BuildPercentComboBox(TGFrame* parent, Int_t id); Create Percentage combo box for bar option. void ChangeErrorCombo(Int_t i); Change the error combo box entry. void PaintBox3D(Float_t* p1, Float_t* p2, Float_t* p3, Float_t* p4); Paint a 3D box. Int_t* Dividers(Int_t n); Return an array of dividers of n (without the trivial divider n).; The number of dividers is saved in the first entry. void RecursiveRemove(TObject* obj); If the contained histogram obj is deleted we must set its pointer to zero. TH1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Carsten Hof 16/08/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-30 15:07; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1Editor.html:33109,error,error,33109,root/html602/TH1Editor.html,https://root.cern,https://root.cern/root/html602/TH1Editor.html,2,['error'],['error']
Availability,"gin() const; virtual Int_tBinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**GetObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObjArray.html:3441,Error,Error,3441,root/html602/TObjArray.html,https://root.cern,https://root.cern/root/html602/TObjArray.html,2,['Error'],['Error']
Availability,"gin() const; virtual Int_tBinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRefArray.html:5181,Error,Error,5181,root/html602/TRefArray.html,https://root.cern,https://root.cern/root/html602/TRefArray.html,2,['Error'],['Error']
Availability,"ginName, const char* ctor = 0, const char* origin = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TPluginHandler*FindHandler(const char* base, const char* uri = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPluginManager.html:4682,error,error,4682,root/html528/TPluginManager.html,https://root.cern,https://root.cern/root/html528/TPluginManager.html,10,['error'],['error']
Availability,"ginal axis range of the taget axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; Using a TCutG object, it is possible to select a sub-range of a 2-D histogram. One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileY("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileY("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts:; myhist->ProfileY("" "",firstybin,lastybin,[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that he Y axis attributes of the TH2 are copied to the X axis of the profile. NOTE that the default under- / overflow behavior differs from what ProjectionX; does! Profiles take the bin center into account, so here the under- and overflow; bins are ignored by default. TH1D * DoProjection(bool onX, const char* name, Int_t firstbin, Int_t lastbin, Option_t* option) const; internal (protected) method for performing projection on the X or Y axis; called by ProjectionX or ProjectionY. TH1D * ProjectionX(const char* name = ""_px"", Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 2-D histogram into a 1-D histogram along X*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; By default, all bins including under- and overflow are included.; The number of en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2.html:46359,error,error,46359,root/html528/TH2.html,https://root.cern,https://root.cern/root/html528/TH2.html,4,['error'],['error']
Availability,"ginal histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = h1->Rebin(5,""hnew""); // creates a new histogram hnew; // merging 5 bins of h1 in one bin. NOTE: If ngroup is not an exact divider of the number of bins,; the top limit of the rebinned histogram is reduced; to the upper edge of the last bin that can make a complete; group. The remaining bins are added to the overflow bin.; Statistics will be recomputed from the new bin contents. -case 2 xbins!=0; A new histogram is created (you should specify newname).; The parameter ngroup is the number of variable size bins in the created histogram.; The array xbins must contain ngroup+1 elements that represent the low-edges; of the bins.; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. NOTE: The bin edges specified in xbins should correspond to bin edges; in the original histogram. If a bin edge in the new histogram is; in the middle of a bin in the original histogram, all entries in; the split bin in the original histogram will be transfered to the; lower of the two possible bins in the new histogram. This is; probably not what you want. examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Bool_t FindNewAxisLimits(const TAxis* axis, const Double_t point, Double_t& newMin, Double_t& newMax); finds new limits for the axis so that *point* is within the range and; the limits are compatible with the previous ones (see TH1::Merge).; new limits are put into *newMin* and *newMax* variables.; axis - axis whose limits are to be recomputed; point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:97638,error,errors,97638,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,16,['error'],['errors']
Availability,"gine(); TXMLEngine(const TXMLEngine&); voidUnlinkFreeNode(XMLNodePointer_t xmlnode); voidUnlinkNode(XMLNodePointer_t node); virtual voidTObject::UseCurrentStyle(); Bool_tValidateDocument(XMLDocPointer_t, Bool_t = kFALSE); Bool_tValidateVersion(XMLDocPointer_t doc, const char* version = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. XMLAttrPointer_tAllocateAttr(int namelen, int valuelen, XMLNodePointer_t xmlnode); XMLNodePointer_tAllocateNode(int namelen, XMLNodePointer_t parent); voidDisplayError(Int_t error, Int_t linenumber); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; XMLNsPointer_tFindNs(XMLNodePointer_t xmlnode, const char* nsname); char*Makenstr(const char* start, int len); char*Makestr(const char* str); voidTObject::MakeZombie(); voidOutputValue(char* value, TXMLOutputStream* out); XMLDocPointer_tParseStream(TXMLInputStream* input); XMLNodePointer_tReadNode(XMLNodePointer_t xmlparent, TXMLInputStream* inp, Int_t& resvalue); voidSaveNode(XMLNodePointer_t xmlnode, TXMLOutputStream* out, Int_t layout, Int_t level); voidTruncateNsExtension(XMLNodePointer_t xmlnode); voidUnpackSpecialCharacters(char* target, const char* source, int srclen). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLEngine.html:8731,error,error,8731,root/html602/TXMLEngine.html,https://root.cern,https://root.cern/root/html602/TXMLEngine.html,4,['error'],['error']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id$ » Last generated: 2015-06-02 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGX11.html:48101,mask,mask,48101,root/html604/TGX11.html,https://root.cern,https://root.cern/root/html604/TGX11.html,2,['mask'],['mask']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id$ » Last generated: 2015-06-04 16:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11.html:47432,mask,mask,47432,root/html534/TGX11.html,https://root.cern,https://root.cern/root/html534/TGX11.html,2,['mask'],['mask']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:47942,mask,mask,47942,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,2,['mask'],['mask']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id: TGX11.h 32427 2010-03-01 18:25:58Z rdm $ » Last generated: 2010-10-07 16:24; This page has been automatically generated. For comments or suggestions regarding the documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:45840,mask,mask,45840,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,1,['mask'],['mask']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id: TGX11.h 37734 2011-01-07 09:53:54Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGX11.html:45917,mask,mask,45917,root/html530/TGX11.html,https://root.cern,https://root.cern/root/html530/TGX11.html,1,['mask'],['mask']
Availability,"gion_t CreateRegion(). void DestroyRegion(Region_t reg). void UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest). Region_t PolygonRegion(Point_t* points, Int_t np, Bool_t winding). void UnionRegion(Region_t rega, Region_t regb, Region_t result). void IntersectRegion(Region_t rega, Region_t regb, Region_t result). void SubtractRegion(Region_t rega, Region_t regb, Region_t result). void XorRegion(Region_t rega, Region_t regb, Region_t result). Bool_t EmptyRegion(Region_t reg). Bool_t PointInRegion(Int_t x, Int_t y, Region_t reg). Bool_t EqualRegion(Region_t rega, Region_t regb). void GetRegionBox(Region_t reg, Rectangle_t* ). char ** ListFonts(const char* fontname, Int_t max, Int_t& count). void FreeFontNames(char** fontlist). Drawable_t CreateImage(UInt_t width, UInt_t height). void GetImageSize(Drawable_t id, UInt_t& width, UInt_t& height). void PutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel). void DeleteImage(Drawable_t img). void ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask). UInt_t ScreenWidthMM() const. void DeleteProperty(Window_t , Atom_t& ). Int_t GetProperty(Window_t , Atom_t , Long_t , Long_t , Bool_t , Atom_t , Atom_t* , Int_t* , ULong_t* , ULong_t* , unsigned char** ). void ConvertSelection(Window_t , Atom_t& , Atom_t& , Atom_t& , Time_t& ). Bool_t SetSelectionOwner(Window_t , Atom_t& ). void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len). void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist). Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd). Bool_t IsDNDAware(Window_t win, Atom_t* typelist). » Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x11:$Id: TGX11.h 37734 2011-01-07 09:53:54Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGX11.html:45917,mask,mask,45917,root/html532/TGX11.html,https://root.cern,https://root.cern/root/html532/TGX11.html,2,['mask'],['mask']
Availability,"gisterProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction2Ref< VO, VI1, VI2 > func;  ; RooRealProxy x;  ; RooRealProxy y;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotComp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:67442,error,errors,67442,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['error'],['errors']
Availability,"given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:49226,error,errors,49226,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['errors']
Availability,"given fraction of the distribution. ;  ; void SetCandleScaled (Bool_t on=kFALSE);  ; void SetCandleWhiskerRange (Double_t wRange=1.0);  By setting whisker-range for candle plot, one can force the whiskers to cover the fraction of the distribution. ;  ; void SetCanvasBorderMode (Int_t mode=1);  ; void SetCanvasBorderSize (Width_t size=1);  ; void SetCanvasColor (Color_t color=19);  ; void SetCanvasDefH (Int_t h=500);  ; void SetCanvasDefW (Int_t w=700);  ; void SetCanvasDefX (Int_t topx=10);  ; void SetCanvasDefY (Int_t topy=10);  ; void SetCanvasPreferGL (Bool_t prefer=kTRUE);  ; void SetCapLinePS (Int_t capline=0);  Set the line cap method used for PostScript, PDF and SVG output. See TPostScript::SetLineCap for details. ;  ; void SetColorModelPS (Int_t c=0);  Define the color model used by TPostScript and TPDF (RGB or CMYK). ;  ; void SetDateX (Float_t x=0.01);  ; void SetDateY (Float_t y=0.01);  ; void SetDrawBorder (Int_t drawborder=1);  ; void SetEndErrorSize (Float_t np=2);  Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors). ;  ; void SetErrorX (Float_t errorx=0.5);  ; void SetExponentOffset (Float_t xoff=0., Float_t yoff=0., Option_t *axis=""XY"");  Method set X and Y offset of the axis 10^n notation. ;  ; void SetFitFormat (const char *format=""5.4g"");  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; void SetFuncColor (Color_t color=1);  ; void SetFuncStyle (Style_t style=1);  ; void SetFuncWidth (Width_t width=4);  ; void SetGridColor (Color_t color=0);  ; void SetGridStyle (Style_t style=3);  ; void SetGridWidth (Width_t width=1);  ; void SetHatchesLineWidth (Int_t l);  ; void SetHatchesSpacing (Double_t h);  ; void SetHeaderPS (const char *header);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:12982,error,error,12982,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['error'],['error']
Availability,"given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1. ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions. AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plotting control. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid. LineColor(Int_t color) -- Select line color by ROOT color code, default is blue. LineWidth(Int_t width) -- Select line with in pixels, default is 3. FillStyle(Int_t style) -- Select fill style, default is not filled. If a filled style is selected, also use VLines(); to add vertical downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code. Range(const char* name) -- Only draw curve in range defined by given name. Range(double lo, double hi) -- Only draw curve in specified range. VLines() -- Add vertical lines to y=0 at end points of curve. Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points. Invisible(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, Double_t Z=1, Bool_t linearMethod=kTRUE); -- Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, Double_t Z=1, Bool_t linearMethod=kTRUE) ;; -- Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma'. Details on error band visualization. By default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:47437,down,downward,47437,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['down'],['downward']
Availability,"given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X, Y or Z axis. Note that the mean value/RMS is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t GetMeanError(Int_t axis = 1) const; -*-*-*-*-*-*Return standard error of mean of this histogram along the X axis*-*-*-*-*. Note that the mean value/RMS is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram.; Also note, that although the definition of standard error doesn't include the; assum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:100955,error,error,100955,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,1,['error'],['error']
Availability,"gleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML document for the parser.; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. TXMLDocument * GetXMLDocument() const; Returns the TXMLDocument. TDOMParser(const TDOMParser& ). TDOMParser& operator=(const TDOMParser& ). » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDOMParser.html:10790,error,error,10790,root/html534/TDOMParser.html,https://root.cern,https://root.cern/root/html534/TDOMParser.html,6,['error'],['error']
Availability,"gleKey; kOverwrite; kWriteDelete; };. protected:. map<TString,ClassRelInfo>_c2fmapList of contained classes; Bool_t_compiledOK! Flag indicating that classes compiled OK; map<TString,ExtraHeader>_ehmapList of extra header files; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__CodeRepo.html:7280,error,error,7280,root/html534/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__CodeRepo.html,2,['error'],['error']
Availability,"gles at various angles. Output can take the form of a 2D histogram or a vector. The triangles found can be drawn in 3D. This software cannot be guaranteed to work under all circumstances. It was originally written to work with a few hundred points in anXY space with similar X and Y ranges. Graph2D drawn with option “surf1” and “tri1 p0”. {; TCanvas *c = new TCanvas(""c"",""Graph2D example"",0,0,700,600);; Double_t x, y, z, P = 6.;; Int_t np = 200;; TGraph2D *dt = new TGraph2D();; TRandom *r = new TRandom();. for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(55);; dt->Draw(""surf1""); // use ""surf1"" to generate the left picture; } // use ""tri1 p0"" to generate the right one; A more complete example is $ROOTSYS/tutorials/fit/graph2dfit.C that produces the next figure. Output of macro graph2dfit.C. 4.11 TGraph2DErrors; A TGraph2DErrors is a TGraph2D with errors. It is useful to perform fits with errors on a 2D graph. An example is the macro $ROOTSYS/tutorials/graphs/graph2derrorsfit.C.; 4.12 Fitting a Graph; The graph Fit method in general works the same way as the TH1::Fit. See “Fitting Histograms”.; 4.13 Setting the Graph’s Axis Title; To give the axis of a graph a title you need to draw the graph first, only then does it actually have an axis object. Once drawn, you set the title by getting the axis and calling the TAxis::SetTitle method, and if you want to center it, you can call the TAxis::CenterTitle method.; Assuming that n, x, and y are defined. Next code sets the titles of the x and y axes.; root[] gr5 = new TGraph(n,x,y); root[] gr5->Draw(); <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root[] gr5->Draw(""ALP""); root[] gr5->GetXaxis()->SetTitle(""X-Axis""); root[] gr5->GetYaxis()->SetTitle(""Y-Axis""); root[] gr5->GetXaxis()->CenterTitle(); root[] gr5->GetYaxis()->CenterTitle(); root[] gr5->Draw(""ALP""); For more graph examples see the scripts: $RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:160750,error,errors,160750,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"gments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawText() [1/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:72663,mask,mask,72663,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"gmin = ROOT::Math::Factory::CreateMinimizer(""Genetic"");; gmin->Options().Print();. Definition at line 79 of file MinimizerOptions.cxx. ◆ SetDefaultMaxFunctionCalls(). void ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls ; (; int ; maxcall). static . Set the maximum number of function calls. ; Definition at line 63 of file MinimizerOptions.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::MinimizerOptions::SetDefaultMaxIterations ; (; int ; maxiter). static . Set the maximum number of iterations. ; Used by the GSL minimizers and Genetic. Not used by Minuit,Minuit2. ; Definition at line 67 of file MinimizerOptions.cxx. ◆ SetDefaultMinimizer(). void ROOT::Math::MinimizerOptions::SetDefaultMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). static . Set the default Minimizer type and corresponding algorithms. ; Here is the list of the available minimizers and their corresponding algorithms. For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it. ROOT Minimizers. Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; Migrad default algorithm based on the variable metric minimizer; Minimize combination of Simplex and Migrad; Simplex minimization algorithm not using the gradient information; Scan brute function scan. Minuit2 New C++ implementation of Minuit (the recommended one); Migrad (default); Minimize; Simplex; Fumili2 new implementation of Fumili integrated in Minuit2. Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; BFGS2 (default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit Minimizer ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:12282,avail,available,12282,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['avail'],['available']
Availability,"gn of b. ;  ; LongDouble_t Sign (LongDouble_t a, LongDouble_t b);  Returns a value with the magnitude of a and the sign of b. ;  ; template<typename T1 , typename T2 > ; T1 Sign (T1 a, T2 b);  Returns a value with the magnitude of a and the sign of b. ;  ; Double_t SignalingNaN ();  Returns a signaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN). ;  ; Bool_t SignBit (Double_t a);  Returns whether the sign of Double_t a is negative. ;  ; Bool_t SignBit (Float_t a);  Returns whether the sign of Float_t a is negative. ;  ; template<typename Integer > ; Bool_t SignBit (Integer a);  Returns whether the sign of Integer a is negative. ;  ; Bool_t SignBit (LongDouble_t a);  Returns whether the sign of LongDouble_t a is negative. ;  ; Double_t Sin (Double_t);  Returns the sine of an angle of x radians. ;  ; Double_t SinH (Double_t);  Returns the hyperbolic sine of `x. ;  ; template<typename Element , typename Index > ; void Sort (Index n, const Element *a, Index *index, Bool_t down=kTRUE);  Sort the n elements of the array a of generic templated type Element. ;  ; template<typename Iterator , typename IndexIterator > ; void SortItr (Iterator first, Iterator last, IndexIterator index, Bool_t down=kTRUE);  Sort the n1 elements of the Short_t array defined by its iterators. ;  ; Double_t Sq (Double_t x);  Returns x*x. ;  ; Double_t Sqrt (Double_t x);  Returns the square root of x. ;  ; constexpr Double_t Sqrt2 ();  \( \sqrt{2} \) ;  ; template<typename Iterator > ; Double_t StdDev (Iterator first, Iterator last);  Same as RMS. ;  ; template<typename Iterator , typename WeightIterator > ; Double_t StdDev (Iterator first, Iterator last, WeightIterator wfirst);  Same as RMS. ;  ; template<typename T > ; Double_t StdDev (Long64_t n, const T *a, const Double_t *w=nullptr);  ; Double_t StruveH0 (Double_t x);  Bessel function Y1(x) for positive x. ;  ; Double_t StruveH1 (Double_t x);  Struve functions of order 0. ;  ; Double_t StruveL0 (Double_t x);  Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:21008,down,down,21008,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['down'],['down']
Availability,"gnal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""MC:150:10000:"", TDirectory* theTargetFile = 0). MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodCuts.html:28546,avail,available,28546,root/html604/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodCuts.html,2,['avail'],['available']
Availability,"gnal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""MC:150:10000:"", TDirectory* theTargetFile = 0). MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCuts.html:28538,avail,available,28538,root/html602/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCuts.html,2,['avail'],['available']
Availability,"gnal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableAlign(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFontSelected(char* font)SIGNAL ; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFontDialog.html:4678,error,error,4678,root/html528/TGFontDialog.html,https://root.cern,https://root.cern/root/html528/TGFontDialog.html,6,['error'],['error']
Availability,"gnal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPosition() const; virtual voidGetDate(Int_t& year, Int_t& month, Int_t& day) const; static FontStruct_tTGTextEntry::GetDefaultFontStruct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryField.html:7592,error,error,7592,root/html528/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryField.html,6,['error'],['error']
Availability,"gnal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTGPopupMenu::EnableEntry(Int_t id); virtual Int_tTGPopupMenu::EndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; virtual TContextMenu*TContextMenuImp::GetContextMenu() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*TGPopupMenu::GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootContextMenu.html:5800,error,error,5800,root/html528/TRootContextMenu.html,https://root.cern,https://root.cern/root/html528/TRootContextMenu.html,6,['error'],['error']
Availability,"gnal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEndPopup(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorPopup.html:4890,error,error,4890,root/html528/TGColorPopup.html,https://root.cern,https://root.cern/root/html528/TGColorPopup.html,18,['error'],['error']
Availability,"gnal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidFlush(); voidForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tGetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCanvas.html:8217,Error,Error,8217,root/html534/TCanvas.html,https://root.cern,https://root.cern/root/html534/TCanvas.html,1,['Error'],['Error']
Availability,"gnal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidFlush(); voidForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tGetAutoExec() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCanvas.html:8012,Error,Error,8012,root/html532/TCanvas.html,https://root.cern,https://root.cern/root/html532/TCanvas.html,1,['Error'],['Error']
Availability,"gnal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTextInput(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGLBEntry*FindEntry(const char* s) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGComboBox.html:4801,Error,Error,4801,root/html602/TGComboBox.html,https://root.cern,https://root.cern/root/html602/TGComboBox.html,2,['Error'],['Error']
Availability,"gnal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileContainer.html:5026,Error,Error,5026,root/html602/TGFileContainer.html,https://root.cern,https://root.cern/root/html602/TGFileContainer.html,6,['Error'],['Error']
Availability,"gnal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime() const; const char*TProofServ::GetDataDir() const; const char*TProofServ::GetDataDirOpts() const; static TMap*TProofServ::GetDataSetNodeMap(TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServLite.html:4522,error,error,4522,root/html602/TProofServLite.html,https://root.cern,https://root.cern/root/html602/TProofServLite.html,4,['error'],['error']
Availability,"gnal, background and data given as input. ; Definition at line 34 of file TLimitDataSource.cxx. ◆ TLimitDataSource() [3/3]. TLimitDataSource::TLimitDataSource ; (; TH1 * ; s, . TH1 * ; b, . TH1 * ; d, . TVectorD * ; es, . TVectorD * ; eb, . TObjArray * ; names . ). Another constructor, directly adds one channel with signal, background and data given as input. ; Definition at line 45 of file TLimitDataSource.cxx. Member Function Documentation. ◆ AddChannel() [1/2]. void TLimitDataSource::AddChannel ; (; TH1 * ; s, . TH1 * ; b, . TH1 * ; d . ). virtual . Adds a channel with signal, background and data given as input. ; Definition at line 56 of file TLimitDataSource.cxx. ◆ AddChannel() [2/2]. void TLimitDataSource::AddChannel ; (; TH1 * ; s, . TH1 * ; b, . TH1 * ; d, . TVectorD * ; es, . TVectorD * ; eb, . TObjArray * ; names . ). virtual . Adds a channel with signal, background and data given as input. ; In addition, error sources are defined. TH1 are here used for convenience: each bin has to be seen as an error source (relative). names is an array of strings containing the names of the sources. Sources with the same name are correlated. ; Definition at line 85 of file TLimitDataSource.cxx. ◆ GetBackground(). virtual TObjArray * TLimitDataSource::GetBackground ; (; ). inlinevirtual . Definition at line 33 of file TLimitDataSource.h. ◆ GetCandidates(). virtual TObjArray * TLimitDataSource::GetCandidates ; (; ). inlinevirtual . Definition at line 34 of file TLimitDataSource.h. ◆ GetErrorNames(). virtual TObjArray * TLimitDataSource::GetErrorNames ; (; ). inlinevirtual . Definition at line 37 of file TLimitDataSource.h. ◆ GetErrorOnBackground(). virtual TObjArray * TLimitDataSource::GetErrorOnBackground ; (; ). inlinevirtual . Definition at line 36 of file TLimitDataSource.h. ◆ GetErrorOnSignal(). virtual TObjArray * TLimitDataSource::GetErrorOnSignal ; (; ). inlinevirtual . Definition at line 35 of file TLimitDataSource.h. ◆ GetSignal(). virtual TObjArray * TLimitDataS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:12997,error,error,12997,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['error'],['error']
Availability,"gnature(). void TFunction::CreateSignature ; (; ). protectedvirtual . Using the CINT method arg information to create a complete signature string. ; Reimplemented in TMethod.; Definition at line 112 of file TFunction.cxx. ◆ DeclFileName(). static const char * TFunction::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TFunction.h. ◆ ExtraProperty(). Long_t TFunction::ExtraProperty ; (; ); const. Get property description word. For meaning of bits see EProperty. ; Definition at line 202 of file TFunction.cxx. ◆ GetDeclId(). TDictionary::DeclId_t TFunction::GetDeclId ; (; ); const. Definition at line 210 of file TFunction.cxx. ◆ GetListOfMethodArgs(). TList * TFunction::GetListOfMethodArgs ; (; ). Return list containing the TMethodArgs of a TFunction. ; Definition at line 135 of file TFunction.cxx. ◆ GetMangledName(). const char * TFunction::GetMangledName ; (; ); const. virtual . Returns the mangled name as defined by CINT, or 0 in case of error. ; Definition at line 252 of file TFunction.cxx. ◆ GetNargs(). Int_t TFunction::GetNargs ; (; ); const. Number of function arguments. ; Definition at line 174 of file TFunction.cxx. ◆ GetNargsOpt(). Int_t TFunction::GetNargsOpt ; (; ); const. Number of function optional (default) arguments. ; Definition at line 184 of file TFunction.cxx. ◆ GetPrototype(). const char * TFunction::GetPrototype ; (; ); const. virtual . Returns the prototype of a function as defined by CINT, or 0 in case of error. ; Definition at line 261 of file TFunction.cxx. ◆ GetReturnTypeName(). const char * TFunction::GetReturnTypeName ; (; ); const. Get full type description of function return type, e,g.: ""class TDirectory*"". ; Definition at line 150 of file TFunction.cxx. ◆ GetReturnTypeNormalizedName(). std::string TFunction::GetReturnTypeNormalizedName ; (; ); const. Get the normalized name of the return type. ; A normalized name is fully qualified and has all typedef desugared e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunction.html:17619,error,error,17619,doc/master/classTFunction.html,https://root.cern,https://root.cern/doc/master/classTFunction.html,1,['error'],['error']
Availability,"gnature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:27283,down,downright,27283,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['down'],['downright']
Availability,"gned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); virtual voidShowMembers(TMemberInspector&); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. static doubleEvaluateFCN(const double* x, double* g); static voidFcn(int&, double*, double& f, double*, int). private:. TFumiliMinimizer(const TFumiliMinimizer&); TFumiliMinimizer&operator=(const TFumiliMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; doublefEdm; vector<double>fErrors; TFumili*fFumili; doublefMinVal; unsigned intfNFree; vector<double>fParams; static TFumili*fgFumilistatic instance (used by fcn function) ; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>*fgFunc; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>*fgGradFunc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFumiliMinimizer(int dummy = 0); Constructor for TFumiliMinimier class. ~TFumiliMinimizer(); Destructor implementation. TFumiliMinimizer(const TFumiliMinimizer& ); Implementation of copy constructor (it is private). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFumiliMinimizer.html:5561,error,errors,5561,root/html534/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/TFumiliMinimizer.html,2,['error'],['errors']
Availability,"gned int n); voidSetHessianNCycles(unsigned int n); voidSetHessianStepTolerance(double stp); voidSetHighStrategy(); voidSetLowStrategy(); voidSetMediumStrategy(); unsigned intStrategy() const. Data Members; private:. unsigned intfGradNCyc; doublefGradTlr; doublefGradTlrStp; unsigned intfHessGradNCyc; unsigned intfHessNCyc; doublefHessTlrG2; doublefHessTlrStp; unsigned intfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnStrategy(); default strategy. explicit MnStrategy(unsigned int); user defined strategy (0, 1, >=2). ~MnStrategy(); {}. unsigned int Strategy() const; {return fStrategy;}. unsigned int GradientNCycles() const; {return fGradNCyc;}. double GradientStepTolerance() const; {return fGradTlrStp;}. double GradientTolerance() const; {return fGradTlr;}. unsigned int HessianNCycles() const; {return fHessNCyc;}. double HessianStepTolerance() const; {return fHessTlrStp;}. double HessianG2Tolerance() const; {return fHessTlrG2;}. unsigned int HessianGradientNCycles() const; {return fHessGradNCyc;}. bool IsLow() const; {return fStrategy == 0;}. bool IsMedium() const; {return fStrategy == 1;}. bool IsHigh() const; {return fStrategy >= 2;}. void SetLowStrategy(). void SetMediumStrategy(). void SetHighStrategy(). void SetGradientNCycles(unsigned int n); {fGradNCyc = n;}. void SetGradientStepTolerance(double stp); {fGradTlrStp = stp;}. void SetGradientTolerance(double toler); {fGradTlr = toler;}. void SetHessianNCycles(unsigned int n); {fHessNCyc = n;}. void SetHessianStepTolerance(double stp); {fHessTlrStp = stp;}. void SetHessianG2Tolerance(double toler); {fHessTlrG2 = toler;}. void SetHessianGradientNCycles(unsigned int n); {fHessGradNCyc = n;}. » Last changed: root/minuit2:$Id: MnStrategy.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnStrategy.html:2773,toler,toler,2773,root/html526/ROOT__Minuit2__MnStrategy.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnStrategy.html,4,['toler'],['toler']
Availability,"gned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ModularFunctionMinimizer&operator=(const ROOT::Minuit2::ModularFunctionMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:4234,toler,toler,4234,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,7,['toler'],['toler']
Availability,"gned int,double) _func, RooAbsReal& _x, RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:29768,Error,ErrorLoggingMode,29768,root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,2,['Error'],['ErrorLoggingMode']
Availability,"gned int,double) ptr = 0); RooCFunction2Ref<double,unsigned int,double>(const RooCFunction2Ref<double,unsigned int,double>&); virtual~RooCFunction2Ref<double,unsigned int,double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*argName(Int_t iarg); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static RooCFunction2Map<double,unsigned int,double>&fmap(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2Ref_double_unsigned_int_double_.html:2103,Error,Error,2103,root/html534/RooCFunction2Ref_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2Ref_double_unsigned_int_double_.html,1,['Error'],['Error']
Availability,"good=2 are satisfied'. For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied' . [out]chi2chisquare of the test ; [out]ndfnumber of degrees of freedom (important, when both histograms have the same empty bins) ; [out]resnormalized residuals for further analysis . Definition at line 2067 of file TH1.cxx. ◆ Chisquare(). Double_t TH1::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:101348,error,errors,101348,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. // create the 3rd TGraph; gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. // put the graphs in the multigraph; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);. // draw the multigraph; mg->Draw(""AC"");; }; 4.8 TGraphQQ; A TGraphQQ allows drawing quantile-quantile plots. Such plots can be drawn for two datasets, or for one dataset and a theoretical distribution function.; 4.8.1 Two Datasets. Examples of qq-plots of 2 datasets. Quantile-quantile plots are used to determine whether two samples come from the same distribution. A qq-plot draws the quantiles of one dataset against the quantile of the other. The quantiles of the dataset with fewer entries are on Y-axis, with more entries - on X-axis. A straight line, going through 0.25 and 0.75 quantiles is also plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the datasets. If the datasets come from the same distribution, points of the plot should fall approximately on the 45 degrees line. If they have the same distribution function, but different parameters of location or scale, they should still fall on the straight line, but not the 45 degrees one.; The greater their departure from the straight line, the more evidence there is that the datasets come from different distributions. The advantage of qq-plot is that it not only shows that the underlying distributions are different, but, unlike the analytical methods, it also gives information on the nature of this difference: heavier tails, different location/scale, different shape, etc.; 4.8.2 One Dataset. Examples of qq-plots of 1 dataset. Quantile-quantile plots are used to determine if the dataset comes from the specified theoretical distribution, such as normal. A qq-plot draws quantiles of the dataset against quantiles of the specified theoretical distribution",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:154327,robust,robust,154327,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['robust'],['robust']
Availability,"gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8360,error,error,8360,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"grLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"). virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofMgrLite.html:11203,failure,failure,11203,root/html604/TProofMgrLite.html,https://root.cern,https://root.cern/root/html604/TProofMgrLite.html,4,['failure'],['failure']
Availability,"grLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"). virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMgrLite.html:11203,failure,failure,11203,root/html602/TProofMgrLite.html,https://root.cern,https://root.cern/root/html602/TProofMgrLite.html,4,['failure'],['failure']
Availability,"gral ; (; Option_t * ; option = """"); const. privatevirtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 330 of file TH1.cxx. ◆ Integral() [5/5]. Double_t TH2::Integral ; (; Option_t * ; option = """"); const. overridevirtual . Return integral of bin contents. ; Only bins in the bins range are considered. By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x and in y. ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1317 of file TH2.cxx. ◆ IntegralAndError() [1/2]. Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. privatevirtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented from TH1.; Definition at line 332 of file TH1.cxx. ◆ IntegralAndError() [2/2]. Double_t TH2::IntegralAndError ; (; Int_t ; firstxbin, . Int_t ; lastxbin, . Int_t ; firstybin, . Int_t ; lastybin, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ; Calculates also the integral error using error propagation from the bin errors assuming that all the bins are uncorrelated. By default the integral is computed as the sum of bin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:89056,error,error,89056,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"gral)Definition SpecFuncMathCore.cxx:103; ROOT::Math::inc_betadouble inc_beta(double x, double a, double b)Calculates the normalized (regularized) incomplete beta function.Definition SpecFuncMathCore.cxx:115; ROOT::Math::erfcdouble erfc(double x)Complementary error function.Definition SpecFuncMathCore.cxx:44; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; ROOT::Math::erfdouble erf(double x)Error function encountered in integrating the normal distribution.Definition SpecFuncMathCore.cxx:59; ROOT::Math::landau_xm1double landau_xm1(double x, double xi=1, double x0=0)First moment (mean) of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:409; ROOT::Math::landau_xm2double landau_xm2(double x, double xi=1, double x0=0)Second moment of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:489; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::expm1double expm1(double x)exp(x) -1 with error cancellation when x is smallDefinition Math.h:110; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::kSqrt2static const double kSqrt2Definition ProbFuncMathCore.cxx:18; ROOT::Math::gaussian_cdf_cdouble gaussian_cdf_c(double x, double sigma=1, double x0=0)Alternative name for same function.Definition ProbFuncMathCore.h:463; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8. mathmathcoresrcProbFuncMathCore.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:28106,error,error,28106,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['error'],['error']
Availability,"gram along X. ; The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set to be equal to the errors of the profile. Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram will be equal to the GetBinEntries(bin) of the profile, otherwise (default) it will be equal to GetBinContent(bin); if option ""C=E"" the bin contents of the projection are set to the bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the product of the bin content of the profile and the entries. With this option the returned histogram will be equivalent to the one obtained by filling directly a TH1D using the 2-nd value as a weight. This makes sense only for profile filled with weights =1. If not, the error of the projected histogram obtained with this option will not be correct. . Definition at line 1283 of file TProfile.cxx. ◆ PutStats(). void TProfile::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimplemented from TH1.; Definition at line 1358 of file TProfile.cxx. ◆ Rebin(). TH1 * TProfile::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). overridevirtual . Rebin this profile grouping ngroup bins together. . case 1 xbins=0; if newname is not blank a new temporary profile hnew is created. else the current profile is modified (default) The parameter ngroup indicates how many bins of this have to me merged into one bin of hnew If the original profile has errors stored (via Sumw2), the resulting profile has new errors correctly calculated.; examples: if hp is an existing TProfile histogram with 100 bins; hp->Rebin(); //merges two bins in one in hp: previous contents of hp are lost; hp->Rebin(5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:80895,error,error,80895,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"gram hnew. Bool_t FindNewAxisLimits(const TAxis* axis, const Double_t point, Double_t& newMin, Double_t& newMax); finds new limits for the axis so that *point* is within the range and; the limits are compatible with the previous ones (see TH1::Merge).; new limits are put into *newMin* and *newMax* variables.; axis - axis whose limits are to be recomputed; point - point that should fit within the new axis limits; newMin - new minimum will be stored here; newMax - new maximum will be stored here.; false if failed (e.g. if the initial axis limits are wrong; or the new range is more than 2^64 times the old one). void RebinAxis(Double_t x, TAxis* axis); Histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the rebinned histogram.; Takes into account errors (Sumw2) if any.; The algorithm works for 1-d, 2-D and 3-D histograms.; The bit kCanRebin must be set before invoking this function.; Ex: h->SetBit(TH1::kCanRebin);. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. void Scale(Double_t c1 = 1, Option_t* option = """"); -*-*-*Multiply this histogram by a constant c1*-*-*-*-*-*-*-*-*. this = c1*this. Note that both contents and errors(if any) are scaled.; This function uses the services of TH1::Add. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. If option contains ""width"" the bin contents and errors are divided; by the bin width. void SetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:96830,error,errors,96830,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['error'],['errors']
Availability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; virtual void SetShowProjectionX (Int_t nbins=1);  When the mouse is moved in a pad containing a 2-d view of this histogram a second canvas shows the projection along X corresponding to the mouse position along Y. ;  ; virtual void SetShowProjectionXY (Int_t nbinsY=1, Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:17444,error,error,17444,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['error'],['error']
Availability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinContent (Int_t bin, Double_t content) override;  Set bin content. ;  ; void SetBinContent (Int_t binx, Int_t biny, Double_t content) override;  ; void SetBinContent (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:8529,error,error,8529,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"gram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH1D * QuantilesY (Double_t prob=0.5, const char *name=""_qy"") const;  Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ;  ; TH2 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ;  ; virtual TH2 * Rebin2D (Int_t nxgroup=2, Int_t nygroup=2, const char *newname="""");  Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ;  ; TH2 * RebinX (Int_t ngroup=2, const char *newname="""") override;  Rebin only the X axis see Rebin2D. ;  ; virtual TH2 * RebinY (Int_t ngroup=2, const char *newname="""");  Rebin only the Y axis see Rebin2D. ;  ; void SetBinContent (Int_t bin, Double_t content) override;  Set bin content. ;  ; void SetBinContent (Int_t binx, Int_t biny, Double_t content) override;  ; void SetBinContent (Int_t binx, Int_t biny, Int_t, Double_t content) override;  ; virtual void SetShowProjectionX (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:8998,error,error,8998,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,6,['error'],['error']
Availability,"gram painter class using OpenGL. More...;  ; class  TGLIsoPainter;  ""gliso"" option for TH3. More...;  ; class  TGLLegoPainter;  Plot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates. More...;  ; class  TGLLightSet;  Encapsulates a set of lights for OpenGL. More...;  ; class  TGLLightSetSubEditor;  Sub-editor for TGLLightSet. More...;  ; class  TGLLine3;  3D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex'. More...;  ; class  TGLLockable;  Simple locking interface used by viewer and scene. More...;  ; class  TGLLogicalShape;  Abstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc. More...;  ; class  TGLManip;  Abstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes. More...;  ; class  TGLManipSet;  Combine all available manipulators in a collection. More...;  ; class  TGLMatrix;  16 component (4x4) transform matrix - column MAJOR as per GL. More...;  ; class  TGLObject;  Base-class for direct OpenGL renderers. More...;  ; class  TGLOrthoCamera;  Orthographic projection camera. More...;  ; class  TGLOutput;  Wrapper class for GL capture & output routines. More...;  ; class  TGLOverlayButton;  GL-overlay button. More...;  ; class  TGLOverlayElement;  An overlay element. More...;  ; class  TGLOverlayList;  Manage a collection of overlay elements. More...;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" part of TGLPadPainter. More...;  ; class  TGLParametricEquation;  A parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): More...;  ; class  TGLParametricEquationGL;  GL-renderer wrapper for TGLParametricEquation. More...;  ; class  TGLParametricPlot;  ; class  TGLPerspectiveCamera;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:5075,avail,available,5075,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['avail'],['available']
Availability,"gram, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81626,error,errors,81626,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,4,['error'],['errors']
Availability,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:27321,error,error,27321,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,4,['error'],['error']
Availability,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:24151,error,error,24151,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,4,['error'],['error']
Availability,"graph gr, one can retrieve an associated function; 662/// with:; 663/// ~~~ {.cpp}; 664/// TF1 *myfunc = gr->GetFunction(""myfunc"");; 665/// ~~~; 666///; 667/// If the graph is made persistent, the list of; 668/// associated functions is also persistent. Given a pointer (see above); 669/// to an associated function myfunc, one can retrieve the function/fit; 670/// parameters with calls such as:; 671/// ~~~ {.cpp}; 672/// Double_t chi2 = myfunc->GetChisquare();; 673/// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; 674/// Double_t err0 = myfunc->GetParError(0); //error on first parameter; 675/// ~~~; 676///; 677/// ### Fit Statistics; 678///; 679/// You can change the statistics box to display the fit parameters with; 680/// the TStyle::SetOptFit(mode) method. This mode has four digits.; 681/// mode = pcev (default = 0111); 682///; 683/// - v = 1; print name/values of parameters; 684/// - e = 1; print errors (if e=1, v must be 1); 685/// - c = 1; print Chisquare/Number of degrees of freedom; 686/// - p = 1; print Probability; 687///; 688/// For example: `gStyle->SetOptFit(1011);`; 689/// prints the fit probability, parameter names/values, and errors.; 690/// You can change the position of the statistics box with these lines; 691/// (where g is a pointer to the TGraph):; 692///; 693/// ~~~ {.cpp}; 694/// Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); 695/// Root > st->SetX1NDC(newx1); //new x start position; 696/// Root > st->SetX2NDC(newx2); //new x end position; 697/// ~~~; 698 ; 699TFitResultPtr TMultiGraph::Fit(TF1 *f1, Option_t *option, Option_t *goption, Axis_t rxmin, Axis_t rxmax); 700{; 701 // internal multigraph fitting methods; 702 Foption_t fitOption;; 703 ROOT::Fit::FitOptionsMake(ROOT::Fit::EFitObjectType::kGraph,option,fitOption);; 704 ; 705 // create range and minimizer options with default values; 706 ROOT::Fit::DataRange range(rxmin,rxmax);; 707 ROOT::Math::MinimizerOptions minOption;; 708 return R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:22450,error,errors,22450,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,2,['error'],['errors']
Availability,"graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' is applied if polN is selected. ""Robust"" number entry sets the robust value when fitting graphs. ""No Chi-square"" check button sets ON/OFF option 'C' - do not calculate Chi-square (for Linear fitter).; Fit options: ""Integral"" check button switch ON/OFF option 'I' - use integral of function instead of value in bin center. ""Best Errors"" sets ON/OFF option 'E' - better errors estimation using Minos technique. ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1, excluding empty bins and ignoring error bars. ""Empty bins, weights=1"" sets ON",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:1526,error,error,1526,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['error'],['error']
Availability,"graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:4565,error,errors,4565,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['errors']
Availability,"graph.Definition TGraph2DErrors.cxx:196; TGraph2DErrors::Printvoid Print(Option_t *chopt="""") const overridePrint 2D graph and errors values.Definition TGraph2DErrors.cxx:307; TGraph2DErrors::GetZminEDouble_t GetZminE() const overrideReturns the Z minimum with errors.Definition TGraph2DErrors.cxx:296; TGraph2DErrors::operator=TGraph2DErrors & operator=(const TGraph2DErrors &)Assignment operator Copy everything except list of functions.Definition TGraph2DErrors.cxx:167; TGraph2DErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:218; TGraph2DErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraph2DErrors.h:29; TGraph2DErrors::TGraph2DErrorsTGraph2DErrors()TGraph2DErrors default constructor.Definition TGraph2DErrors.cxx:80; TGraph2DErrors::GetYmaxEDouble_t GetYmaxE() const overrideReturns the Y maximum with errors.Definition TGraph2DErrors.cxx:263; TGraph2DErrors::GetXmaxEDouble_t GetXmaxE() const overrideReturns the X maximum with errors.Definition TGraph2DErrors.cxx:241; TGraph2DErrors::GetZmaxEDouble_t GetZmaxE() const overrideReturns the Z maximum with errors.Definition TGraph2DErrors.cxx:285; TGraph2DErrors::Setvoid Set(Int_t n) overrideSet number of points in the 2D graph.Definition TGraph2DErrors.cxx:345; TGraph2DErrors::Classstatic TClass * Class(); TGraph2DErrors::RemovePointInt_t RemovePoint(Int_t ipoint)Deletes point number ipoint.Definition TGraph2DErrors.cxx:356; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraph2D::fNpointsInt_t fNpointsNumber of points in the data set.Definition TGraph2D.h:45; TGraph2D::fZDouble_t * fZ[fNpoints]Definition TGraph2D.h:52; TGraph2D::fHistogramTH2D * fHistogram!2D histogram of z values linearly interpolated on the trianglesDefinition TGraph2D.h:58; TGraph2D::fDelaunayTObject * fDelaunay! Pointer to Delaunay interpolator objectDefinition TGraph2D.h:59; TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:17464,error,errors,17464,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,1,['error'],['errors']
Availability,"graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:10850,error,error,10850,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,2,['error'],['error']
Availability,"graphs of the multigraph are fitted simultaneously; f1 is an already predefined function created by TF1. Predefined functions such as gaus, expo and poln are automatically created by ROOT.; The list of fit options is given in parameter optionwhich may takes the following values:. ""W"" Ignore all the point errors; ""U"" Use a User specified fitting algorithm (via SetFCN); ""Q"" Quiet mode (minimum printing); ""V"" Verbose mode (default is between Q and V); ""B"" Use this option when you want to fix one or more parameters and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; ""R"" Use the Range specified in the function range; ""N"" Do not store the graphics function, do not draw; ""0"" Do not plot the result of the fit. By default the fitted function is drawn unless the option""N"" above is specified.; ""+"" Add this new fitted function to the list of fitted functions (by default, any previous function is deleted); ""C"" In case of linear fitting, not calculate the chisquare (saves time); ""F"" If fitting a polN, switch to minuit fitter; ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust(resistant) regression), using the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points. When the fit is drawn (by default), the parameter goption may be used to specify a list of graphics options. See TGraph::Paint for a complete list of these options.; In order to use the Range option, one must first create a function with the expression to be fitted. For example, if your graph has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do: TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");; f1TF1 * f1Definition legend1.C:11; graphDefinition graph.py:1. Who is calling this function ?; Note that this function is called when calling TGraphErrors::Fit or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit see the discussion below on the errors calcul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:30715,robust,robust,30715,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['robust'],['robust']
Availability,"gration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Integration Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for f: using 0.1; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for m: using 2; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for p0: using 0.005; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for s: using 2; Minuit2Minimizer: Minimize with max-calls 2000 convergence for edm < 1 strategy 1; p0=0.01, ; prevFCN = 31.75882326 f=0.501, ; prevFCN = 31.76758673 f=0.499, ; prevFCN = 31.75008506 f=0.5, m=0.02014, ; prevFCN = 31.72980141 m=-0.02014, ; prevFCN = 31.78749743 m=0.004235, ; prevFCN = 31.75274724 m=-0.004235, ; prevFCN = 31.76488389 m=0, p0=0.01005, ; prevFCN = 31.75954549 p0=0.009948, ; prevFCN = 31.75810351 p0=0.01013, ; prevFCN = 31.76062402 p0=0.009872, ; prevFCN = 31.75703788 p0=0.01, s=1.02, ; prevFCN = 31.67915486 s=0.9799, ; prevFCN = 31.84068856 s=1.002, ; prevFCN = 31.75075447 s=0.998, ; prevFCN = 31.76691405 m=0.004235, s=1, ; prevFCN = 31.75274724 m=0.02118, ; prevFCN = 31.72829189 m=0.06353, ; prevFCN = 31.66614321 m=0.1906, ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:5756,error,error,5756,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,4,"['avail', 'error']","['available', 'error']"
Availability,"gratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html:2243,error,error,2243,root/html602/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html,4,['error'],['error']
Availability,"ground ; [in]scaleErrornormalisation uncertainty. The contribution scale*bgr is subtracted from the measurement prior to unfolding. The following contributions are added to the input covarianc ematrix . using the uncorrelated histogram errors dbgr, the contribution (scale*dbgri)2 is added to the diagonals of the covariance . using the histogram contents, the background normalisation uncertainty contribution dscale*bgri dscale*bgrj is added to the covariance matrix . Definition at line 515 of file TUnfoldSys.cxx. ◆ VectorMapToHist(). void TUnfoldSys::VectorMapToHist ; (; TH1 * ; hist_delta, . const TMatrixDSparse * ; delta, . const Int_t * ; binMap . ). protected . map delta to hist_delta, possibly summing up bins ; Parameters. [out]hist_deltaresult histogram ; [in]deltavector to be mapped to the histogram ; [in]binMapmapping of histogram bins. grooups of bins of delta are mapped to bins of hist_delta. The histogram contents are set to the sum over the group of bins. The histogram errors are reset to zero. ; The array binMap is explained with the method GetOutput() ; Definition at line 1475 of file TUnfoldSys.cxx. Member Data Documentation. ◆ fAoutside. TMatrixD* TUnfoldSys::fAoutside. protected . Input: underflow/overflow bins. ; Definition at line 68 of file TUnfoldSys.h. ◆ fBgrErrScaleIn. TMap* TUnfoldSys::fBgrErrScaleIn. protected . Input: background sources correlated error. ; Definition at line 76 of file TUnfoldSys.h. ◆ fBgrErrUncorrInSq. TMap* TUnfoldSys::fBgrErrUncorrInSq. protected . Input: uncorr error squared from bgr sources. ; Definition at line 74 of file TUnfoldSys.h. ◆ fBgrIn. TMap* TUnfoldSys::fBgrIn. protected . Input: size of background sources. ; Definition at line 72 of file TUnfoldSys.h. ◆ fDAinColRelSq. TMatrixD* TUnfoldSys::fDAinColRelSq. protected . Input: normalized column err.sq. (inp.matr.) ; Definition at line 66 of file TUnfoldSys.h. ◆ fDAinRelSq. TMatrixDSparse* TUnfoldSys::fDAinRelSq. protected . Input: normalized errors from input ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:49166,error,errors,49166,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"ground a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ;  ; Double_t * fAmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:24133,error,errors,24133,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['errors']
Availability,"ground efficiency (rejection) versus; signal efficiency plot (first call of this function); - the function returns the signal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodCuts.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-01 01:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:25955,avail,available,25955,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,1,['avail'],['available']
Availability,"gs from a model function.; Create always new parameter setting list from a given model function. void SetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0). set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const std::vector<unsigned int> & paramInd ); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitConfig.html:4136,error,errors,4136,root/html526/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitConfig.html,1,['error'],['errors']
Availability,"gs from a model function.; Create always new parameter setting list from a given model function. void SetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0). set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitConfig.html:4158,error,errors,4158,root/html528/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitConfig.html,1,['error'],['errors']
Availability,"gs&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetFromFitResult(const ROOT::Fit::FitResult& rhs); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(const vector<ROOT::Fit::ParameterSettings>& pars); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0); voidSetUpdateAfterFit(bool on = true); voidSetWeightCorrection(bool on = true); boolUpdateAfterFit() const; boolUseWeightCorrection() const. Data Members; private:. ROOT::Math::MinimizerOptionsfMinimizerOptsminimizer control parameters including name and algo type; boolfMinosErrorsdo full error analysis using Minos; vector<unsigned int>fMinosParamsvector with the parameter indeces for running Minos; boolfNormErrorsflag for error normalization; boolfParabErrorsget correct parabolic errors estimate (call Hesse after minimizing) ; vector<ROOT::Fit::ParameterSettings>fSettingsvector with the parameter settings; boolfUpdateAfterFitupdate the configuration after a fit using the result; boolfWeightCorrapply correction to errors for weights fits . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitConfig(unsigned int npar = 0). Default constructor. FitConfig(const ROOT::Fit::FitConfig& rhs). Copy constructor. ~FitConfig(). Destructor. FitConfig & operator=(const ROOT::Fit::FitConfig& rhs). Assignment operator. const ParameterSettings & ParSettings(unsigned int i) const. get the parameter settings for the i-th parameter (const method). { return fSettings.at(i); }. ParameterSettings & ParSettings(unsigned int i). get the parameter settings for the i-th parameter (non-const method). { return fSettings.at(i); }. const std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() const. get the vector of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitConfig.html:2104,error,error,2104,root/html532/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitConfig.html,16,['error'],"['error', 'errors']"
Availability,"gs() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBuffer3D.html:12834,mask,mask,12834,root/html530/TBuffer3D.html,https://root.cern,https://root.cern/root/html530/TBuffer3D.html,3,['mask'],['mask']
Availability,"gs() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBuffer3D.html:12834,mask,mask,12834,root/html534/TBuffer3D.html,https://root.cern,https://root.cern/root/html534/TBuffer3D.html,2,['mask'],['mask']
Availability,"gs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:3644,error,error,3644,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,11,['error'],['error']
Availability,"gs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBranchArray.html:5963,error,error,5963,doc/master/classTGeoBranchArray.html,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html,6,['error'],['error']
Availability,"gtName if specified. ;  ; RooRealVar * weightVar (const RooArgSet &allVars, const char *wgtName=nullptr);  Utility function for constructors Return pointer to weight variable if it is defined. ;  . Private Attributes; RooArgSet _attachedBuffers;  ! Currently attached buffers (if different from _varsww) ;  ; const RooAbsArg * _cacheOwner = nullptr;  TTree holding the cached function values. ;  ; TTree * _cacheTree = nullptr;  ; double _curWgt = 1.0;  Buffer for weights in case a batch of values is requested. ;  ; double _curWgtErr = 0.0;  Weight of current event. ;  ; double _curWgtErrHi = 0.0;  Weight of current event. ;  ; double _curWgtErrLo = 0.0;  Weight of current event. ;  ; bool _defCtor = false;  Object owning cache contents. ;  ; const double * _extSumW2Array {nullptr};  ! External sum of weights array ;  ; const double * _extWgtArray {nullptr};  ! External weight array ;  ; const double * _extWgtErrHiArray {nullptr};  ! External weight array - high error ;  ; const double * _extWgtErrLoArray {nullptr};  ! External weight array - low error ;  ; TTree * _tree = nullptr;  ; RooArgSet _varsww;  Was object constructed with default ctor? ;  ; std::unique_ptr< std::vector< double > > _weightBuffer;  ; RooRealVar * _wgtVar = nullptr;  . Static Private Attributes; static Int_t _defTreeBufSize = 10*1024*1024;  . Friends; class RooVectorDataStore;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:21573,error,error,21573,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,2,['error'],['error']
Availability,"gth indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:37328,error,error,37328,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,1,['error'],['error']
Availability,"gth indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:37397,error,error,37397,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,5,['error'],['error']
Availability,"gth indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code; c : compile only, do not attempt to load the library.; s : silence all informational output; v : output all information output; d : debug ACLiC, keep all the output files.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared lib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:39008,error,error,39008,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,4,['error'],['error']
Availability,"gth of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(double; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-width of averaging smoothing; window ;  ; Reference:; [1] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.� ;  ; Example 1 � script SmootMarkov3.c :; Fig. 1 Original noisy spectrum.��� . Fig. 2 Smoothed spectrum with averaging window m=3.;  ; Script:; // Example to illustrate the; Markov smoothing (class TSpectrum3).; // To execute this example,; do; // root > .x; SmoothMarkov3.C;  ; void SmoothMarkov3(); {; �� Int_t i, j, k;; �� Int_t nbinsx = 64;; �� Int_t nbinsy = 64;; �� Int_t nbinsz =; 64;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� for(i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum3.html:20135,error,error,20135,root/html602/TSpectrum3.html,https://root.cern,https://root.cern/root/html602/TSpectrum3.html,8,['error'],['error']
Availability,"guments are supported. Options to control construction of the chi^2. DataError(RooAbsData::ErrorType) -- Choose between Poisson errors and Sum-of-weights errors; NumCPU(Int_t) -- Activate parallel processing feature on N processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to create a chi2. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights, or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. Options to control flow of fit procedure. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:74728,error,errors,74728,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,9,['error'],['errors']
Availability,"gurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const vector<double>&GetBoostWeights() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBDT.html:6022,error,error,6022,root/html602/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBDT.html,4,['error'],['error']
Availability,guration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26284,error,error,26284,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26960,error,error,26960,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:33523,error,error,33523,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:35338,error,error,35338,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 250 | 3939.05 3041.72 0.0204513 0.00185682 43023.5 0; : 251 Minimum Test error found - save the configuration ; : 251 | 3905.19 3012.24 0.0207706 0.0018857 42361.9 0; : 252 Minimum Test error found - save the configuration ; : 252 | 3873.64 2981.7 0.0208833 0.0019031 42149.1 0; : 253 Minimum Test error found - save the configuration ; : 253 | 3841.98 2951.54 0.0208487 0.0019305 42287.4 0; : 254 Minimum Test error found - save the configuration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40209,error,error,40209,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40661,error,error,40661,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Minimum Test error found - save the configuration ; : 272 | 3280.89 2427.73 0.020272 0.0018293 43377.6 0; : 273 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40775,error,error,40775,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56297,error,error,56297,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimum Test error found - save the configuration ; : 411 | 936.425 516.53 0.0207319 0.00188678 42451.3 0; : 412 Minimum Test error found - save the configuration ; : 412 | 928.172 509.995 0.0202986 0.00182294 43300.2 0; : 413 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56636,error,error,56636,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimum Test error found - save the configuration ; : 411 | 936.425 516.53 0.0207319 0.00188678 42451.3 0; : 412 Minimum Test error found - save the configuration ; : 412 | 928.172 509.995 0.0202986 0.00182294 43300.2 0; : 413 Minimum Test error found - save the configuration ; : 413 | 918.166 504.988 0.0203305 0.00183515 43254.1 0; : 414 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56749,error,error,56749,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62305,error,error,62305,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimum Test error found - save the configuration ; : 486 | 436.721 236.872 0.0201168 0.00181086 43701.6 0; : 487 Minimum Test error found - save the configuration ; : 487 | 432.036 234.838 0.0201083 0.00181291 43726.9 0; : 488 Minimum Test error found - save the configuration ; : 488 | 427.772 232.082 0.0201422 0.00181171 43643.2 0; : 489 Minimum Test error found - save the configuration ; : 489 | 423.017 229.997 0.0203149 0.00183693 43294.7 0; : 490 Minimum Test error found - save the configuration ; : 490 | 419.119 227.561 0.0201444 0.00181942 43656.3 0; : 491 Minimum Test error found - save the configuration ; : 491 | 414.431 225.611 0.0201416 0.00181918 43662.3 0; : 492 Minimum Test error found - save the configuration ; : 492 | 409.916 223.444 0.0201215 0.00181755 43706.4 0; : 493 Minimum Test error found - save the configuration ; : 493 | 405.856 221.079 0.0201212 0.00183714 43754 0; : 494 Minimum Test error found - save the configuration ; : 494 | 401.45 219.099 0.0201193 0.00182499 43729.5 0; : 4,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:65934,error,error,65934,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 506 | 353.597 195.555 0.0201061 0.00181022 43725.7 0; : 507 Minimum Test error found - save the configuration ; : 507 | 349.908 193.134 0.0201154 0.00180497 43690.9 0; : 508 Minimum Test error found - save the configuration ; : 508 | 346.368 191.635 0.0201239 0.00180513 43671.2 0; : 509 Minimum Test error found - save the configuration ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69226,error,error,69226,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.85,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79253,error,error,79253,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,guration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79479,error,error,79479,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"g fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void Sort ();  Sort. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:48102,error,errors,48102,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['error'],['errors']
Availability,"h *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:5712,error,errors,5712,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,24,['error'],['errors']
Availability,"h *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range alon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:5364,error,error,5364,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,8,['error'],['error']
Availability,"h * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:61906,error,error,61906,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"h 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:195546,error,errors,195546,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"h 2000 events: 7.41 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.0721 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: SVM for Classification; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Building SVM Working Set...with 2000 event instances; : Elapsed time for Working Set build: 0.0742 sec; : Sorry, no computing time forecast available for SVM, please wait ...; : Elapsed time: 0.385 sec ; : Elapsed time for training with 2000 events: 0.464 sec ; SVM : [dataset] : Evaluation of SVM on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.0678 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_SVM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_SVM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: BDT for Classification; : ; BDT : #events: (reweighted) sig: 1000 bkg: 1000; : #events: (unweighted) sig: 1000 bkg: 1000; : Training 850 Decision Trees ... patience please; : Elapsed time for training with 2000 events: 0.594 sec ; BDT : [dataset] : Evaluation of BDT on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.151 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_BDT.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:50815,avail,available,50815,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['avail'],['available']
Availability,"h = 2.328e-10 , s = 4; [18] h = 5.821e-11 , s = 4; [19] h = 1.455e-11 , s = 4; [20] h = 3.638e-12 , s = 4; [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.01562 , s = 4.5; [5] h = 0.003906 , s = 3.75; [6] h = 0.0009766 , s = 4.125; [7] h = 0.0002441 , s = 3.938; [8] h = 6.104e-05 , s = 4.031; [9] h = 1.526e-05 , s = 3.984; [10] h = 3.815e-06 , s = 4.008; [11] h = 9.537e-07 , s = 3.996; [12] h = 2.384e-07 , s = 4.002; [13] h = 5.96e-08 , s = 3.999; [14] h = 1.49e-08 , s = 4; [15] h = 3.725e-09 , s = 4; [16] h = 9.313e-10 , s = 4; [17] h = 2.328e-10 , s = 4; [18] h = 5.821e-11 , s = 4; [19] h = 1.455e-11 , s = 4; [20] h = 3.638e-12 , s = 4; ; prevFCN = 2171.25988 mean=-1.438, ; prevFCN = 2171.25988 mean=1.465, ; prevFCN = 2171.25988 mean=-1.465, ; prevFCN = 2171.25988 mean=0, [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.1921; ; prevFCN = 2171.25988 a=2.017, ; prevFCN = 2171.25988 a=1.983, ; prevFCN = 2171.25988 a=2.172, ; prevFCN = 2171.691427 a=1.84, [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.01562 , s = 4.5; [5] h = 0.003906 , s = 3.75; [6] h = 0.0009766 , s = 3.375; [7] h = 0.0002441 , s = 3.562; [8] h = 6.104e-05 , s = 3.656; [9] h = 1.526e-05 , s = 3.703; [10] h = 3.815e-06 , s = 3.68; [11] h = 9.537e-07 , s = 3.691; [12] h = 2.384e-07 , s = 3.686; [13] h = 5.96e-08 , s = 3.683; [14] h = 1.49e-08 , s = 3.681; [15] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:28980,error,error,28980,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,4,"['avail', 'error']","['available', 'error']"
Availability,"h = 5.82077e-11 , s = 4.00003; [19] h = 1.45519e-11 , s = 3.99998; [20] h = 3.63798e-12 , s = 4.00001; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161eb090f0 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1; [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161eb090f0 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_Int[mean]_Norm[mean,x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_Int[mean]_Norm[mean,x]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.2; sigma=0.5, [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:9770,error,error,9770,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,3,"['avail', 'error']","['available', 'error']"
Availability,"h GetMarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG2 (VirtualX, SetWMState, Window_t, id, EInitialState, state, 1) VOID_METHOD_ARG3(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list VOID_METHOD_ARG3 (VirtualX, ChangeActivePointerGrab, Window_t, win, UInt_t, mask, Cursor_t, cur, 1) VOID_METHOD_ARG5(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t VOID_METHOD_ARG3 (VirtualX, GetFontProperties, FontStruct_t, font, Int_t &, max_ascent, Int_t &, max_descent, 1) VOID_METHOD_ARG5(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t VOID_METHOD_ARG3 (VirtualX, GetImageSize, Drawable_t, id, UInt_t &, width, UInt_t &, height, 1) VOID_METHOD_ARG3(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:31708,mask,mask,31708,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['mask'],['mask']
Availability,"h X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:39638,error,errors,39638,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],"['error', 'errors']"
Availability,"h _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add attribute to node. void* AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false). Bool_t AddComment(void* node, const char* comment). void* GetParent(void* child). void* GetChild(void* parent, const char* childname = 0). void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:10062,avail,available,10062,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,1,['avail'],['available']
Availability,"h _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add attribute to node. void* AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); add child node. Bool_t AddComment(void* node, const char* comment). void* GetParent(void* child); get parent node. void* GetChild(void* parent, const char* childname = 0); get child node. void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Tools.html:10110,avail,available,10110,root/html530/TMVA__Tools.html,https://root.cern,https://root.cern/root/html530/TMVA__Tools.html,9,['avail'],['available']
Availability,"h afunc1 and afunc2 to be true; 8364 if (afunc1); 8365 dSEXPT = hparent.KolmogorovTest(&h2Expt,""M"");; 8366 else if (afunc2); 8367 dSEXPT = hparent.KolmogorovTest(&h1Expt,""M"");; 8368 else; 8369 dSEXPT = h1Expt.KolmogorovTest(&h2Expt,""M"");; 8370 // count number of cases toy KS distance (TS) is larger than oberved one; 8371 if (dSEXPT>dfmax) prb3 += 1.0;; 8372 }; 8373 // compute p-value; 8374 prb3 /= (Double_t)nEXPT;; 8375 }; 8376 ; 8377 ; 8378 // debug printout; 8379 if (opt.Contains(""D"")) {; 8380 printf("" Kolmo Prob h1 = %s, sum bin content =%g effective entries =%g\n"",h1->GetName(),sum1,esum1);; 8381 printf("" Kolmo Prob h2 = %s, sum bin content =%g effective entries =%g\n"",h2->GetName(),sum2,esum2);; 8382 printf("" Kolmo Prob = %g, Max Dist = %g\n"",prob,dfmax);; 8383 if (opt.Contains(""N"")); 8384 printf("" Kolmo Prob = %f for shape alone, =%f for normalisation alone\n"",prb1,prb2);; 8385 if (opt.Contains(""X"")); 8386 printf("" Kolmo Prob = %f with %d pseudo-experiments\n"",prb3,nEXPT);; 8387 }; 8388 // This numerical error condition should never occur:; 8389 if (TMath::Abs(rsum1-1) > 0.002) Warning(""KolmogorovTest"",""Numerical problems with h1=%s\n"",h1->GetName());; 8390 if (TMath::Abs(rsum2-1) > 0.002) Warning(""KolmogorovTest"",""Numerical problems with h2=%s\n"",h2->GetName());; 8391 ; 8392 if(opt.Contains(""M"")) return dfmax;; 8393 else if(opt.Contains(""X"")) return prb3;; 8394 else return prob;; 8395}; 8396 ; 8397////////////////////////////////////////////////////////////////////////////////; 8398/// Replace bin contents by the contents of array content; 8399 ; 8400void TH1::SetContent(const Double_t *content); 8401{; 8402 fEntries = fNcells;; 8403 fTsumw = 0;; 8404 for (Int_t i = 0; i < fNcells; ++i) UpdateBinContent(i, content[i]);; 8405}; 8406 ; 8407////////////////////////////////////////////////////////////////////////////////; 8408/// Return contour values into array levels if pointer levels is non zero.; 8409///; 8410/// The function returns the number of contour leve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:329486,error,error,329486,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"h all the entries as expected. Most importantly, figure out where the central directory begins. Returns -1 in case of error, 0 otherwise. ; Definition at line 139 of file TZIPFile.cxx. ◆ ReadMemberHeader(). Int_t TZIPFile::ReadMemberHeader ; (; TZIPMember * ; member). protected . Read the member header of the ZIP archive. ; Sets the position where the data starts in the member object. Returns -1 in case of error, 0 otherwise. ; Definition at line 404 of file TZIPFile.cxx. ◆ ReadZip64EndLocator(). Long64_t TZIPFile::ReadZip64EndLocator ; (; Long64_t ; pos). protected . Read Zip64 end of central directory locator. ; Returns -1 in case of error, -2 in case end locator magic is not found (i.e. not a zip64 file) and offset of Zip64 end of central directory record in case of success. ; Definition at line 211 of file TZIPFile.cxx. ◆ ReadZip64EndRecord(). Int_t TZIPFile::ReadZip64EndRecord ; (; Long64_t ; pos). protected . Read Zip64 end of central directory record. ; Returns -1 in case of error and 0 in case of success. ; Definition at line 246 of file TZIPFile.cxx. ◆ SetCurrentMember(). Int_t TZIPFile::SetCurrentMember ; (; ). overridevirtual . Find the desired member in the member array and make it the current member. ; Returns -1 in case member is not found, 0 otherwise. ; Implements TArchiveFile.; Definition at line 486 of file TZIPFile.cxx. ◆ Streamer(). void TZIPFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TArchiveFile. ◆ StreamerNVirtual(). void TZIPFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 144 of file TZIPFile.h. Member Data Documentation. ◆ fComment. TString TZIPFile::fComment. protected . Archive comment. ; Definition at line 26 of file TZIPFile.h. ◆ fDirOffset. Long64_t TZIPFile::fDirOffset. protected . Central directory offset (from the beginning of the archive) ; Definition at line 25 of file TZIPFile.h. ◆ fDirPos. Long64_t TZIPFile::fDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:26453,error,error,26453,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['error'],['error']
Availability,"h all variable objects. RooArgSet allCats() const; Return set with all category objects. RooArgSet allFunctions() const; Return set with all function objects. RooArgSet allCatFunctions() const; Return set with all category function objects. RooArgSet allResolutionModels() const; Return set with all resolution model objects. RooArgSet allPdfs() const; Return set with all probability density function objects. list<RooAbsData*> allData() const; Return list of all dataset in the workspace. list<RooAbsData*> allEmbeddedData() const; Return list of all dataset in the workspace. list<TObject*> allGenericObjects() const; Return list of all generic objects in the workspace. Bool_t makeDir(); Create transient TDirectory representation of this workspace. This directory; will appear as a subdirectory of the directory that contains the workspace; and will have the name of the workspace suffixed with ""Dir"". The TDirectory; interface is read-only. Any attempt to insert objects into the workspace; directory representation will result in an error message. Note that some; ROOT object like TH1 automatically insert themselves into the current directory; when constructed. This will give error messages when done in a workspace; directory. Bool_t import(TObject& object, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; The object is cloned upon importation and the input argument does not need ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:22830,error,error,22830,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,6,['error'],['error']
Availability,"h are all set in the constructor:. precision - float or double. In the first case you will use the TMatrixF class family, in the latter case the TMatrixD one;; type - general (TMatrixD), symmetric (TMatrixDSym) or sparse (TMatrixDSparse);; size - number of rows and columns;; index - range start of row and column index. By default these start at zero;; sparse map - this property is only relevant for a sparse matrix. It indicates where elements are unequal zero. 14.2.1 Accessing Properties; The following table shows the methods to access the information about the relevant matrix property:. Method; Descriptions. Int_t GetRowLwb (); row lower-bound index. Int_t GetRowUpb (); row upper-bound index. Int_t GetNrows (); number of rows. Int_t GetColLwb (); column lower-bound index. Int_t GetColUpb (); column upper-bound index. Int_t GetNcols (); number of columns. Int_t GetNoElements (); number of elements, for a dense matrix this equals: fNrows x fNcols. Double_t GetTol (); tolerance number which is used in decomposition operations. Int_t *GetRowIndexArray (); for sparse matrices, access to the row index of fNrows+1 entries. Int_t *GetColIndexArray (); for sparse matrices, access to the column index of fNelems entries. The last two methods in this table are specific to the sparse matrix, which is implemented according to the Harwell-Boeing format. Here, besides the usual shape/size descriptors of the matrix like fNrows, fRowLwb, fNcols and fColLwb, we also store a row index, fRowIndex and column index, fColIndex for the elements unequal zero:. fRowIndex[0,..,fNrows]:; Stores for each row the index range of the elements in the data and column array. fColIndex[0,..,fNelems-1]:; Stores the column number for each data element != 0. The code to print all matrix elements unequal zero would look like:; TMatrixDSparse a;; const Int_t *rIndex = a.GetRowIndexArray();; const Int_t *cIndex = a.GetColIndexArray();; const Double_t *pData = a.GetMatrixArray();; for (Int_t irow = 0; irow <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:771815,toler,tolerance,771815,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['toler'],['tolerance']
Availability,"h as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked CURRENT GUESS ERROR are only working values; not to be believed, and APPROXIMATE ERROR means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMinuit.html:8281,ERROR,ERROR,8281,root/html532/TMinuit.html,https://root.cern,https://root.cern/root/html532/TMinuit.html,8,['ERROR'],['ERROR']
Availability,"h bins which are not constrained by data points. . Reimplemented from TUnfold.; Definition at line 466 of file TUnfoldSys.cxx. ◆ SetTauError(). void TUnfoldSys::SetTauError ; (; Double_t ; delta_tau). Specify an uncertainty on tau. ; Parameters. [in]delta_taunew uncertainty on tau. The default is to have no uncertyainty on tau. ; Definition at line 1007 of file TUnfoldSys.cxx. ◆ Streamer(). void TUnfoldSys::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TUnfold. ◆ StreamerNVirtual(). void TUnfoldSys::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 146 of file TUnfoldSys.h. ◆ SubtractBackground(). void TUnfoldSys::SubtractBackground ; (; const TH1 * ; bgr, . const char * ; name, . Double_t ; scale = 1.0, . Double_t ; scale_error = 0.0 . ). Specify a source of background. ; Parameters. [in]bgrbackground distribution with uncorrelated errors ; [in]nameidentifier for this background source ; [in]scalenormalisation factor applied to the background ; [in]scaleErrornormalisation uncertainty. The contribution scale*bgr is subtracted from the measurement prior to unfolding. The following contributions are added to the input covarianc ematrix . using the uncorrelated histogram errors dbgr, the contribution (scale*dbgri)2 is added to the diagonals of the covariance . using the histogram contents, the background normalisation uncertainty contribution dscale*bgri dscale*bgrj is added to the covariance matrix . Definition at line 515 of file TUnfoldSys.cxx. ◆ VectorMapToHist(). void TUnfoldSys::VectorMapToHist ; (; TH1 * ; hist_delta, . const TMatrixDSparse * ; delta, . const Int_t * ; binMap . ). protected . map delta to hist_delta, possibly summing up bins ; Parameters. [out]hist_deltaresult histogram ; [in]deltavector to be mapped to the histogram ; [in]binMapmapping of histogram bins. grooups of bins of delta are mapped to bins of hist_delta. The histogram contents are set t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:48065,error,errors,48065,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"h error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:11598,error,errors,11598,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"h error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataSet& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit descr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:78427,error,errors,78427,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['error'],['errors']
Availability,"h error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataSet& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:77554,error,errors,77554,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['error'],['errors']
Availability,"h error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataSet& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. void setParameterizeIntegral(const RooArgSet& paramVars). Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:80857,error,errors,80857,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,6,['error'],['errors']
Availability,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGraphErrors.html:20179,error,error,20179,root/html604/TGraphErrors.html,https://root.cern,https://root.cern/root/html604/TGraphErrors.html,4,['error'],"['error', 'errors']"
Availability,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:20179,error,error,20179,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,4,['error'],"['error', 'errors']"
Availability,"h f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower searc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:4197,error,errors,4197,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['error'],['errors']
Availability,"h for gifencode.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ARGS(alist)   ();  ; #define BITS   12 /* largest code size */;  ; #define HSIZE   5003 /* hash table size */;  ; #define put_byte(A)   (*put_b)((byte)(A)); Nbyte++;  ; #define SHIFT   4 /* shift for hashing */;  ; #define THELIMIT   4096 /* NEVER generate this */;  . Typedefs; typedef unsigned char byte;  . Functions; static void char_flush ();  ; static void char_init ();  ; static void char_out ();  ; static void char_out (int c);  ; long GIFencode (int Width, int Height, int Ncol, R, G, B, ScLine, void *get_scline, pb);  ; static void output ();  ; static void output (int code);  ; static void put_short ();  ; static void put_short (int word);  . Variables; static int a_count;  ; static char accum [256];  ; static int BitsPixel;  ; static int ClearCode;  ; static int CodeTab [5003];  ; static unsigned long cur_accum;  ; static int cur_bits;  ; static int CurCodeSize;  ; static int CurMaxCode;  ; static int EOFCode;  ; static int FreeCode;  ; static long HashTab [5003];  ; static int IniCodeSize;  ; static unsigned long masks [];  ; static long Nbyte;  ; static void(* put_b )();  . Macro Definition Documentation. ◆ ARGS. #define ARGS; (;  ; alist);    (). Definition at line 10 of file gifencode.c. ◆ BITS. #define BITS   12 /* largest code size */. Definition at line 13 of file gifencode.c. ◆ HSIZE. #define HSIZE   5003 /* hash table size */. Definition at line 15 of file gifencode.c. ◆ put_byte. #define put_byte; (;  ; A);    (*put_b)((byte)(A)); Nbyte++. Definition at line 18 of file gifencode.c. ◆ SHIFT. #define SHIFT   4 /* shift for hashing */. Definition at line 16 of file gifencode.c. ◆ THELIMIT. #define THELIMIT   4096 /* NEVER generate this */. Definition at line 14 of file gifencode.c. Typedef Documentation. ◆ byte. typedef unsigned char byte. Definition at line 20 of file gifencode.c. Function Documentation. ◆ char_flush(). static void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html:1457,mask,masks,1457,doc/master/win32gdk_2src_2gifencode_8c.html,https://root.cern,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html,2,['mask'],['masks']
Availability,"h in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise use the system information, if available, or just start; the minimal number, i.e. 2 . Int_t SetupWorkers(Int_t opt = 0, TList* wrks = 0); Start up PROOF workers. void NotifyStartUp(const char* action, Int_t done, Int_t tot); Notify setting-up operation message. Int_t SetProofServEnv(const char* ord); Create environment files for worker 'ord'. void ResolveKeywords(TString& s, const char* logfile); Resolve some keywords in 's'; <logfileroot>, <user>, <rootsys>. Int_t CreateSandbox(); Create the sandbox for this session. void Print(Option_t* option = """") const; Print status of PROOF-Lite cluster. TProofQueryResult * MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:26077,error,error,26077,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,4,['error'],['error']
Availability,"h in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise use the system information, if available, or just start; the minimal number, i.e. 2 . Int_t SetupWorkers(Int_t opt = 0, TList* wrks = 0); Start up PROOF workers. void NotifyStartUp(const char* action, Int_t done, Int_t tot); Notify setting-up operation message. Int_t SetProofServEnv(const char* ord); Create environment files for worker 'ord'. void ResolveKeywords(TString& s, const char* ord, const char* logfile); Resolve some keywords in 's'; <logfilewrk>, <user>, <rootsys>, <cpupin>. Int_t CreateSandbox(); Create the sandbox for this session. void Print(Option_t* option = """") const; Print status of PROOF-Lite cluster. TProofQueryResult * MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:29101,error,error,29101,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['error'],['error']
Availability,"h is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:11300,Error,ErrorUp,11300,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['Error'],['ErrorUp']
Availability,"h most algorithms use only the upper-right corner, implementation of the different matrix views was more straightforward this way. When stored only the upper-right part is written to file.; For a detailed description of the interface, the user should look at the root reference guide at: http://root.cern.ch/root/Reference.html; 14.1 Overview of Matrix Classes; The figure below shows an overview of the classes available in the linear algebra library,libMatrix.so. At the center is the base class TMatrixDBase from which three different matrix classes, TMatrixD, TMatrixDSym and TMatrixDFSparse derive. The user can define customized matrix operations through the classes TElementActionD and TElementsPosActionD. Overview of matrix classes. Reference to different views of the matrix can be created through the classes on the right-hand side, see “Matrix Views”. These references provide a natural connection to vectors.; Matrix decompositions (used in equation solving and matrix inversion) are available through the classes on the left-hand side (see “Matrix Decompositions”). They inherit from the TDecompBase class. The Eigen Analysis is performed through the classes at the top, see “Matrix Eigen Analysis”. In both cases, only some matrix types can be analyzed. For instance, TDecompChol will only accept symmetric matrices as defined TMatrixDSym. The assignment operator behaves somewhat different than of most other classes. The following lines will result in an error:; TMatrixD a(3,4);; TMatrixD b(5,6);; b = a;; It required to first resize matrix b to the shape of a.; TMatrixD a(3,4);; TMatrixD b(5,6);; b.ResizeTo(a);; b = a;; 14.2 Matrix Properties; A matrix has five properties, which are all set in the constructor:. precision - float or double. In the first case you will use the TMatrixF class family, in the latter case the TMatrixD one;; type - general (TMatrixD), symmetric (TMatrixDSym) or sparse (TMatrixDSparse);; size - number of rows and columns;; index - range start of ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:770132,avail,available,770132,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,h of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; Int_t _basisCos;  ; Int_t _basisExp;  ; RooRealProxy _delMistag;  ; RooRealProxy _dm;  ; double _genFlavFrac;  do not persist ;  ; double _genFlavFracMix;  ; double _genFlavFracUnmix;  ; double _genMixFrac;  ; RooRealProxy _mistag;  ; RooCategoryProxy _mixState;  ; RooRealProxy _t;  ; RooCategoryProxy _tagFlav;  ; RooRealProxy _tau;  ; DecayType _type;  ;  Protected Attributes inherited from RooAbsAnaConvPdf; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:64492,error,errors,64492,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['error'],['errors']
Availability,"h of the sub branches.; An alternative to this function is to read directly and only the interesting branches. Example: TBranch *brc = T.GetBranch(""c"");; TBranch *bre = T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);; TBranch::GetEntryvirtual Int_t GetEntry(Long64_t entry=0, Int_t getall=0)Read all leaves of entry and return total number of bytes read.Definition TBranch.cxx:1706; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented in TChain.; Definition at line 8529 of file TTree.cxx. ◆ SetBranchStyle(). void TTree::SetBranchStyle ; (; Int_t ; style = 1). static . Set the current branch style. ; (static function). style = 0 old Branch; style = 1 new Bronch . Definition at line 8660 of file TTree.cxx. ◆ SetCacheEntryRange(). Int_t TTree::SetCacheEntryRange ; (; Long64_t ; first, . Long64_t ; last . ). virtual . interface to TTreeCache to set the cache entry range ; Returns:; 0 entry range set; -1 on error . Definition at line 8821 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8855 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an exist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:207280,error,error,207280,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['error'],['error']
Availability,"h of the sub branches.; An alternative to this function is to read directly and only the interesting branches. Example: TBranch *brc = T.GetBranch(""c"");; TBranch *bre = T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);; TBranch::GetEntryvirtual Int_t GetEntry(Long64_t entry=0, Int_t getall=0)Read all leaves of entry and return total number of bytes read.Definition TBranch.cxx:1706; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented in TChain.; Definition at line 8534 of file TTree.cxx. ◆ SetBranchStyle(). void TTree::SetBranchStyle ; (; Int_t ; style = 1). static . Set the current branch style. ; (static function). style = 0 old Branch; style = 1 new Bronch . Definition at line 8665 of file TTree.cxx. ◆ SetCacheEntryRange(). Int_t TTree::SetCacheEntryRange ; (; Long64_t ; first, . Long64_t ; last . ). virtual . interface to TTreeCache to set the cache entry range ; Returns:; 0 entry range set; -1 on error . Definition at line 8831 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8865 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). The cacheSize might be clamped, see TFileCacheRead::SetBufferSize; Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8683 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:209771,error,error,209771,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['error'],['error']
Availability,"h onto the file to. void DeleteEntryOffset(); Delete fEntryOffset array. Int_t DropBuffers(); Drop buffers of this basket if it is not the current basket. Int_t GetEntryPointer(Int_t Entry); Get pointer to buffer for internal entry. Int_t LoadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Load basket buffers in memory without unziping.; This function is called by TTreeCloner.; The function returns 0 in case of success, 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBasket.html:10381,error,error,10381,root/html528/TBasket.html,https://root.cern,https://root.cern/root/html528/TBasket.html,1,['error'],['error']
Availability,"h onto the file to. void DeleteEntryOffset(); Delete fEntryOffset array. Int_t DropBuffers(); Drop buffers of this basket if it is not the current basket. Int_t GetEntryPointer(Int_t Entry); Get pointer to buffer for internal entry. Int_t LoadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Load basket buffers in memory without unziping.; This function is called by TTreeCloner.; The function returns 0 in case of success, 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket&). TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBasket.html:10164,error,error,10164,root/html526/TBasket.html,https://root.cern,https://root.cern/root/html526/TBasket.html,1,['error'],['error']
Availability,"h options.Definition TH1.cxx:3066; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf801_mcstudyDefinition rf801_mcstudy.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 990; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 980; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 970; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 960; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 950; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-797.721) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.716236 a1=-0.675686 mean=5.04367 nbkg=115.661 nsig=155.327 sig1frac=0.880121; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 940; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 930; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-867.289) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.907715 a1=-0.26012 mean=4.95881 nbkg=147.451 nsig=156.366 sig1frac=0.890535; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 920; [#0] PROGRESS:Generation -- RooMCStud",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:10833,error,error,10833,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['error'],['error']
Availability,"h should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:7759,error,error,7759,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['error']
Availability,"h the Hessian matrix elements The Hessian matrix is the matrix of the second...Definition Minimizer.cxx:148; ROOT::Math::Minimizer::Strategyint Strategy() conststrategyDefinition Minimizer.h:307; ROOT::Math::Minimizer::NCallsvirtual unsigned int NCalls() constnumber of function calls to reach the minimumDefinition Minimizer.h:228; ROOT::Math::Minimizer::SetUpperLimitedVariablevirtual bool SetUpperLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double upper)set a new upper limit variable (override if minimizer supports them )Definition Minimizer.h:179; ROOT::Math::Minimizer::operator=Minimizer & operator=(Minimizer &&)=delete; ROOT::Math::Minimizer::SetVariablevirtual bool SetVariable(unsigned int ivar, const std::string &name, double val, double step)=0set a new free variable; ROOT::Math::Minimizer::SetStrategyvoid SetStrategy(int strategyLevel)set the strategyDefinition Minimizer.h:344; ROOT::Math::Minimizer::ProvidesErrorvirtual bool ProvidesError() constminimizer provides error and error matrixDefinition Minimizer.h:243; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetPrecisionvoid SetPrecision(double prec)set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer wi...Definition Minimizer.h:341; ROOT::Math::Minimizer::Optionsvirtual MinimizerOptions Options() constretrieve the minimizer options (implement derived class if needed)Definition Minimizer.h:323; ROOT::Math::Minimizer::Correlationvirtual double Correlation(unsigned int i, unsigned int j) constreturn correlation coefficient between variable i and j.Definition Minimizer.h:264; ROOT::Math::Minimizer::~Minimizervirtual ~Minimizer()Destructor (no operations).Definition Minimizer.h:127; ROOT::Math::Minimizer::ErrorDefdouble ErrorDef() constreturn the statistical scale used for calculate the error is typically 1 for Chi2 and 0..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:28110,error,error,28110,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,2,['error'],['error']
Availability,"h the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::FirstSsiz_t First(char c) constFind first occurrence of a character c.Definition TString.cxx:538; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:184357,error,error,184357,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['error'],['error']
Availability,"h the silent flag. RooAbsArg* addClone(const RooAbsArg& var, Bool_t silent = kFALSE); Add clone of specified element to an owning set. If sucessful, the; set will own the clone, not the original. The operation will fail if; a similarly named object already exists in the set, or; the set is not specified to own its elements. Eventual error messages; can be suppressed with the silent flag. RooAbsArg& operator[](const char* name) const; Array operator. Named element must exist in set, otherwise; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. Bool_t checkForDup(const RooAbsArg& arg, Bool_t silent) const; Check if element with var's name is already in set. Double_t getRealValue(const char* name, Double_t defVal = 0, Bool_t verbose = kFALSE) const; Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:18726,error,error,18726,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,9,['error'],['error']
Availability,"h will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:27864,error,error,27864,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,6,['error'],['error']
Availability,"h | stride height | stride width | padding height | paddig; # width | activation function; ; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; ; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; ; # The RESHAPE layer is needed to flatten the output before the Dense layer; ; # Note that to run the CNN is required to have CPU or GPU support; ; ; if useTMVACNN:; # Training strategies.; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0""; ); trainingString1 += "",MaxEpochs="" + str(max_epochs); ; ## New DL (CNN); cnnMethodName = ""TMVA_CNN_CPU""; cnnOptions = ""CPU""; # use GPU if available; if hasGPU:; cnnOptions = ""GPU""; cnnMethodName = ""TMVA_CNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; cnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; InputLayout=""1|16|16"",; Layout=""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"",; TrainingStrategy=trainingString1,; Architecture=cnnOptions,; ); ; ; ### Book Convolutional Neural Network in Keras using a generated model; ; ; if usePyTorchCNN:; ROOT.Info(""TMVA_CNN_Classification"", ""Using Convolutional PyTorch Model""); pyTorchFileName = str(ROOT.gROOT.GetTutorialDir()); pyTorchFileName += ""/tmva/PyTorch_Generate_CNN_Model.py""; # check that pytorch can be imported and file defining the model exists; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is not None and os.path.exists(pyTorchFileName):; #cmd = str(ROOT.TMVA.Python_Executable()) + "" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:12409,avail,available,12409,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['avail'],['available']
Availability,"h""; 16 ; 17#include <memory>; 18 ; 19namespace ROOT {; 20 ; 21 namespace Math {; 22 ; 23 /**; 24 Enumeration describing the status of the variable; 25 The enumeration are used in the minimizer classes to categorize the variables; 26 */; 27 enum EMinimVariableType {; 28 kDefault, ///< free variable (unlimited); 29 kFix, ///< fixed variable; 30 kBounds, ///< variable has two bounds; 31 kLowBound, ///< variable has a lower bound; 32 kUpBound ///< variable has an upper bounds; 33 };; 34 ; 35 ; 36 ; 37/**; 38 MinimTransformVariable class; 39 Contains meta information of the variables such as bounds, fix flags and; 40 deals with transformation of the variable; 41 The class does not contain the values and the step size (error) of the variable; 42 This is an internal class used by the MinimTransformFunction class; 43 ; 44 @ingroup MultiMin; 45*/; 46 ; 47 ; 48class MinimTransformVariable {; 49 ; 50public:; 51 ; 52 /**; 53 Default Constructor for an unlimited variable; 54 */; 55 MinimTransformVariable () :; 56 fFix(false), fLowBound(false), fUpBound(false), fBounds(false),; 57 fLower(1), fUpper(0); 58 {}; 59 ; 60 // constructor for fixed variable; 61 MinimTransformVariable (double value) :; 62 fFix(true), fLowBound(false), fUpBound(false), fBounds(false),; 63 fLower(value), fUpper(value); 64 {}; 65 ; 66 // con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimTransformVariable_8h_source.html:1403,error,error,1403,doc/master/MinimTransformVariable_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimTransformVariable_8h_source.html,1,['error'],['error']
Availability,"h""; 24 ; 25class TGraphBentErrors : public TGraph {; 26 ; 27protected:; 28 Double_t *fEXlow; ///<[fNpoints] array of X low errors; 29 Double_t *fEXhigh; ///<[fNpoints] array of X high errors; 30 Double_t *fEYlow; ///<[fNpoints] array of Y low errors; 31 Double_t *fEYhigh; ///<[fNpoints] array of Y high errors; 32 ; 33 Double_t *fEXlowd; ///<[fNpoints] array of X low displacements; 34 Double_t *fEXhighd; ///<[fNpoints] array of X high displacements; 35 Double_t *fEYlowd; ///<[fNpoints] array of Y low displacements; 36 Double_t *fEYhighd; ///<[fNpoints] array of Y high displacements; 37 ; 38 void SwapPoints(Int_t pos1, Int_t pos2) override;; 39 void UpdateArrays(const std::vector<Int_t> &sorting_indices, Int_t numSortedPoints, Int_t low) override;; 40 ; 41 Double_t** Allocate(Int_t size) override;; 42 void CopyAndRelease(Double_t **newarrays,; 43 Int_t ibegin, Int_t iend, Int_t obegin) override;; 44 Bool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend,; 45 Int_t obegin) override;; 46 Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:1113,error,errors,1113,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,4,['error'],['errors']
Availability,"h""; 24#include <vector>; 25 ; 26class TArrayF;; 27class TArrayD;; 28 ; 29class TGraphMultiErrors : public TGraph {; 30 ; 31protected:; 32 Int_t fNYErrors; ///< The amount of different y-errors; 33 Int_t fSumErrorsMode; ///< How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum =; 34 ///< Absolute Addition; 35 Double_t *fExL; ///<[fNpoints] array of X low errors; 36 Double_t *fExH; ///<[fNpoints] array of X high errors; 37 std::vector<TArrayD> fEyL; ///< Two dimensional array of Y low errors; 38 std::vector<TArrayD> fEyH; ///< Two dimensional array of Y high errors; 39 mutable Double_t *fEyLSum = nullptr; ///<! Array of summed Y low errors for fitting; 40 mutable Double_t *fEyHSum = nullptr; ///<! Array of summed Y high errors for fitting; 41 std::vector<TAttFill> fAttFill; ///< The AttFill attributes of the different errors; 42 std::vector<TAttLine> fAttLine; ///< The AttLine attributes of the different errors; 43 ; 44 Double_t **Allocate(Int_t size) ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:1193,error,errors,1193,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,10,['error'],['errors']
Availability,"h""; 25 ; 26class TGraphAsymmErrors : public TGraph {; 27 ; 28protected:; 29 Double_t *fEXlow{nullptr}; ///<[fNpoints] array of X low errors; 30 Double_t *fEXhigh{nullptr}; ///<[fNpoints] array of X high errors; 31 Double_t *fEYlow{nullptr}; ///<[fNpoints] array of Y low errors; 32 Double_t *fEYhigh{nullptr}; ///<[fNpoints] array of Y high errors; 33 ; 34 void SwapPoints(Int_t pos1, Int_t pos2) override;; 35 void UpdateArrays(const std::vector<Int_t> &sorting_indices, Int_t numSortedPoints, Int_t low) override;; 36 ; 37 Double_t** Allocate(Int_t size) override;; 38 void CopyAndRelease(Double_t **newarrays,; 39 Int_t ibegin, Int_t iend, Int_t obegin) override;; 40 Bool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend,; 41 Int_t obegin) override;; 42 Bool_t CtorAllocate();; 43 void FillZero(Int_t begin, Int_t end,; 44 Bool_t from_ctor = kTRUE) override;; 45 Bool_t DoMerge(const TGraph * g) override;; 46 ; 47public:; 48 TGraphAsymmErrors();; 49 TGraphAsymmErrors(Int_t n);; 50 TGraphAsymmErrors(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:1121,error,errors,1121,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,4,['error'],['errors']
Availability,"h""; 26 ; 27class TProfile3D : public TH3D {; 28 ; 29public:; 30 friend class TProfileHelper;; 31 friend class TH1Merger;; 32 ; 33protected:; 34 TArrayD fBinEntries; ///< Number of entries per bin; 35 EErrorType fErrorMode; ///< Option to compute errors; 36 Double_t fTmin; ///< Lower limit in T (if set); 37 Double_t fTmax; ///< Upper limit in T (if set); 38 Bool_t fScaling; ///<! True when TProfile3D::Scale is called; 39 Double_t fTsumwt; ///< Total Sum of weight*T; 40 Double_t fTsumwt2; ///< Total Sum of weight*T*T; 41 TArrayD fBinSumw2; ///< Array of sum of squares of weights per bin; 42 static Bool_t fgApproximate; ///< Bin error approximation option; 43 ; 44 Int_t BufferFill(Double_t, Double_t) override {return -2;} //may not use; 45 Int_t BufferFill(Double_t, Double_t, Double_t) override {return -2;} //may not use; 46 Int_t BufferFill(Double_t, Double_t, Double_t, Double_t) override {return -2;} //may not use; 47 virtual Int_t BufferFill(Double_t x, Double_t y, Double_t z, Double_t t, Double_t w);; 48 ; 49 // hel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8h_source.html:1215,error,errors,1215,doc/master/TProfile3D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"h(char* param); PyObject*Dispatch(Int_t param); PyObject*Dispatch(ULong_t param); PyObject*Dispatch(Event_t* event); PyObject*Dispatch(TEveElement* el); PyObject*Dispatch(TEveTrack* et); PyObject*Dispatch(TEveWindow* window); PyObject*Dispatch(TGFrame* frame); PyObject*Dispatch(TGListTreeItem* entry); PyObject*Dispatch(TGLViewerBase* viewer); PyObject*Dispatch(TGLPhysicalShape* shape); PyObject*Dispatch(TGMdiFrame* frame); PyObject*Dispatch(TGShutterItem* item); PyObject*Dispatch(TGVFileSplitter* frame); PyObject*Dispatch(TList* objs); PyObject*Dispatch(TObject* obj); PyObject*Dispatch(TSocket* sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(Int_t x, Int_t y); PyObject*Dispatch(Event_t* event, ULong_t wid); PyObject*Dispatch(TEveDigitSet* qs, Int_t idx); PyObject*Dispatch(TGFrame* frame, Int_t btn); PyObject*Dispatch(TGListTreeItem* entry, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn); PyObject*Dispatch(TGLVEntry* entry, Int_t btn); PyObject*Dispatch(TObject* obj, Bool_t check); PyObject*Dispatch(TObject* obj, UInt_t state); PyObject*Dispatch(TGListTreeItem* item, TDNDData* data); PyObject*Dispatch(const char* name, const TList* attr); PyObject*Dispatch(const char* msg, Bool_t all); PyObject*Dispatch(Long64_t total, Long64_t processed); PyObject*Dispatch(TSlave* slave, TProofProgressInfo* pi); PyObject*Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2); PyObject*Dispatch(TObject* obj, UInt_t button, UInt_t state); PyObject*Dispatch(TPad* selpad, TObject* selected, Int_t event); PyObject*Dispatch(TVirtualPad* pad, TObject* obj, Int_t event); PyObject*Dispatch(TSlave* slave, Long64_t total, Long64_t processed); PyObject*Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y); PyO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPyDispatcher.html:2282,mask,mask,2282,root/html534/TPyDispatcher.html,https://root.cern,https://root.cern/root/html534/TPyDispatcher.html,6,['mask'],['mask']
Availability,"h),; 1604 layerData.deltasBegin (), layerData.deltasEnd (),; 1605 layerData.inverseActivationFunction (),; 1606 patternWeight);; 1607 break;; 1608 }; 1609 case ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE:; 1610 {; 1611 std::cout << ""softmax."" << std::endl;; 1612 assert (!TMVA::DNN::isFlagSet (ModeOutputValues::DIRECT, layerData.outputMode ()));; 1613 std::vector<double> probabilities = layerData.probabilities ();; 1614 error = softMaxCrossEntropy (begin (probabilities), end (probabilities),; 1615 begin (truth), end (truth),; 1616 layerData.deltasBegin (), layerData.deltasEnd (),; 1617 layerData.inverseActivationFunction (),; 1618 patternWeight);; 1619 break;; 1620 }; 1621 }; 1622 if (factorWeightDecay != 0 && eRegularization != EnumRegularization::NONE); 1623 {; 1624 error = weightDecay (error, itWeight, itWeightEnd, factorWeightDecay, eRegularization);; 1625 }; 1626 return error;; 1627 }; 1628 ; 1629 ; 1630 ; 1631 ; 1632 ; 1633 ; 1634 ; 1635// /*! \brief pre-training; 1636// *; 1637// * in development; 1638// */; 1639// template <typename Minimizer>; 1640// void Net::preTrain (std::vector<double>& weights,; 1641// std::vector<Pattern>& trainPattern,; 1642// const std::vector<Pattern>& testPattern,; 1643// Minimizer& minimizer, Settings& settings); 1644// {; 1645// auto itWeightGeneral = std::begin (weights);; 1646// std::vector<Pattern> prePatternTrain (trainPattern.size ());; 1647// std::vector<Pattern> prePatternTest (testPattern.size ());; 1648 ; 1649// size_t _inputSize = inputSize ();; 1650 ; 1651// // transform pattern using the created preNet; 1652// auto initializePrePattern = [&](const std::vector<Pattern>& pttrnInput, std::vector<Pattern>& pttrnOutput); 1653// {; 1654// pttrnOutput.clear ();; 1655// std::transform (std::begin (pttrnInput), std::end (pttrnInput),; 1656// std::back_inserter (pttrnOutput),; 1657// [](const Pattern& p); 1658// {; 1659// Pattern pat (p.input (), p.input (), p.weight ());; 1660// return pat;; 1661// });; 1662// };; 1663 ; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:53982,error,error,53982,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,3,['error'],['error']
Availability,"h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphMultiErrors::Divide) ; Definition at line 667 of file TGraphMultiErrors.cxx. ◆ ~TGraphMultiErrors(). TGraphMultiErrors::~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 933 of file TGraphMultiErrors.cxx. ◆ Apply(). void TGraphMultiErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Only the first error dimension is affected.; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 951 of file TGraphMultiErrors.cxx. ◆ BayesDivide(). void TGraphMultiErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:57030,error,error,57030,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"h, const char* option = ""M"", const char* dsname = 0); Constructor with the old signature, kept for convenience and backard compatibility.; Options:; 'M' merge: finally merge the created files; 'L' local: copy locally the files before merging (implies 'M'); 'D' dataset: create a TFileCollection; 'R' register: dataset run with dataset registration; 'O' overwrite: force dataset replacement during registration; 'V' verify: verify the registered dataset; 'H' merge histograms in one go (option to TFileMerger); Special 'option' values for backward compatibility:; """" equivalent to ""M""; ""LOCAL"" equivalent to ""ML"" or ""L"". void Init(const char* path, const char* dsname); Initializer. Called by all constructors. ~TProofOutputFile(); Main destructor. void SetOutputFileName(const char* name); Set the name of the output file; in the form of an Url. TFile* OpenFile(const char* opt); Open the file using the unique temporary name. Int_t AdoptFile(TFile* f); Adopt a file already open.; Return 0 if OK, -1 in case of failure. Long64_t Merge(TCollection* list); Merge objects from the list into this object. void Print(Option_t* option = """") const; Dump the class content. void NotifyError(const char* errmsg); Notify error message. void AddFile(TFileMerger* merger, const char* path); Add file to merger, checking the result. void Unlink(const char* path); Unlink path. TFileCollection * GetFileCollection(); Get instance of the file collection to be used in 'dataset' mode. TFileMerger * GetFileMerger(Bool_t local = kFALSE); Get instance of the file merger to be used in 'merge' mode. Int_t AssertDir(const char* dirpath); Assert directory path 'dirpath', with the ownership of the last already; existing subpath.; Return 0 on success, -1 on error. TProofOutputFile(const TProofOutputFile& ). TProofOutputFile& operator=(const TProofOutputFile& ). void SetFileName(const char* name); { fFileName = name; }. void SetDir(const char* dir, Bool_t raw = kFALSE). void SetMerged(Bool_t merged = kTRUE); { fMer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofOutputFile.html:8998,failure,failure,8998,root/html534/TProofOutputFile.html,https://root.cern,https://root.cern/root/html534/TProofOutputFile.html,6,['failure'],['failure']
Availability,"h-xft-libdir=/opt/local/lib/ ; --with-xext-libdir=/opt/local/lib/; A simple Draw(0 or a Browser opening might cause a Segmentation violation in TASImage::InitVisual () on Mac. ; . How do I start PROOF? . Type at the ROOT prompt:. root [0] TProof::Open(""""); How do I start PROOF? ; . How to render graphics in a file, without displaying the image on the screen ? . Run in batch mode:. root -b -q myscript.C. or in your program add:. gROOT->SetBatch();; ; . Prerequisites for building ROOT from source. . To successfully build ROOT a number of prerequisite packages must be installed. Check the prerequisites page for the list of packages needed for your platform.; ; . How to use ROOT libraries in Xcode on Mac OS X? . The easiest way is to use cmake and let it create the Xcode project, this has the advantage that the dictionaries are created automatically. The CMakeLists.txt file will define the libraries and executables to be added to the Xcode project. An example from the ROOT Event example (found in root/test) can be downloaded here. Just un-tar the attached file and run. cd event/build; cmake -G Xcode ..; xcodebuild. This will create an Xcode project event.xcodeproj which can be opened and used by Xcode. ; . How to check if a file is already open? . if (gROOT->GetListOfFiles()->FindObject(filename) ) {; // do not open the file; } else {; // open the file; }; ; . Some or all windows don't get displayed when ROOT is running on a remote computer. . You probably used ssh to connect to the remote computer. You need to specify the option ""-Y"" which turns on trusted X11 forwarding.Some or all windows don't get displayed when ROOT is running on a remote computer. ; . How to change the automatic plot title produced when a tree is drawn? . It is enough to change the title of the histogram htemp: ; tree.Draw(""x:y"");; htemp.SetTitle(""New Title"");; ; . How to draw several TGraph in one common axis system? . Use TMultiGraph. ; ; . Sitemap. DownloadDownload ROOT; All Releases. Documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:7232,down,downloaded,7232,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['down'],['downloaded']
Availability,"h. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""3"" allows to shows the error as band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band is smoothed.; As the following picture shows, this option should be used carefuly because; the smoothing algorithm may show some (huge) ""bouncing"" effect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:6423,error,errors,6423,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,3,['error'],['errors']
Availability,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:2189,toler,tolerance,2189,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,2,['toler'],['tolerance']
Availability,"h. Public Member Functions;  RMinimizer (Option_t *method);  Default constructor. ;  ;  ~RMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int ivar, unsigned int jvar) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool GetCovMatrix (double *covMat) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; double HessMatrix (unsigned int i, unsigned int j) const;  Returns the ith jth component of the Hessian matrix. ;  ; bool Minimize () override;  Function to find the minimum. ;  ; unsigned int NCalls () const override;  Returns the number of function calls. ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:1750,error,error,1750,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,2,['error'],['error']
Availability,"h. ◆ Raise(). virtual void TApplication::Raise ; (; ). inlinevirtual . Definition at line 133 of file TApplication.h. ◆ RemoveIdleTimer(). void TApplication::RemoveIdleTimer ; (; ). virtual . Remove idle timer. Normally called via TROOT::Idle(0). ; Definition at line 1885 of file TApplication.cxx. ◆ ReturnFromRun(). Bool_t TApplication::ReturnFromRun ; (; ); const. inline . Definition at line 153 of file TApplication.h. ◆ ReturnPressed(). void TApplication::ReturnPressed ; (; char * ; text). virtual . Emit signal when return key was pressed. ; Definition at line 1957 of file TApplication.cxx. ◆ Run(). void TApplication::Run ; (; Bool_t ; retrn = kFALSE). virtual . Main application eventloop. Calls system dependent eventloop via gSystem. ; Reimplemented in TRint, TApplicationServer, and TProofServ.; Definition at line 1860 of file TApplication.cxx. ◆ SetEchoMode(). void TApplication::SetEchoMode ; (; Bool_t ; mode). virtual . Set console echo mode: . mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols . Reimplemented in TRint.; Definition at line 1968 of file TApplication.cxx. ◆ SetIdleTimer(). void TApplication::SetIdleTimer ; (; UInt_t ; idleTimeInSec, . const char * ; command . ). virtual . Set the command to be executed after the system has been idle for idleTimeInSec seconds. ; Normally called via TROOT::Idle(...). ; Definition at line 1874 of file TApplication.cxx. ◆ SetReturnFromRun(). void TApplication::SetReturnFromRun ; (; Bool_t ; ret). inline . Definition at line 154 of file TApplication.h. ◆ SetSignalHandler(). void TApplication::SetSignalHandler ; (; TSignalHandler * ; sh). inlineprotected . Definition at line 92 of file TApplication.h. ◆ Show(). virtual void TApplication::Show ; (; ). inlinevirtual . Definition at line 129 of file TApplication.h. ◆ StartIdleing(). void TApplication::StartIdleing ; (; ). virtual . Called when system starts idleing. ; Definition at line 1896 of file TApplication.cxx. ◆ StopIdleing(). void TApplication",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:37279,echo,echo,37279,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['echo'],['echo']
Availability,"h/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:6700,error,error,6700,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,2,['error'],['error']
Availability,"h1*-*-; *-* =============================. this = this*h1. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH1D * ProjectionX(const char* name = ""_px"", Option_t* option = ""e"") const; Project this profile into a 1-D histogram along X*-*-; *-* =================================================. The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; otherwise (default) it will be equal to GetBinContent(bin); if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH1D using the 2-nd value as a weight.; This makes sense only for profile filled with weights =1. If not, the error of the; projected histogram obtained with this option will not be correct. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this profile grouping ngroup bins together*-*-*-*-; *-* ================================================; -case 1 xbins=0; if newname is not blank a new temporary profile hnew is created.; else the current profile is modified (default); The parameter ngroup indicates ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:38808,error,errors,38808,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,8,['error'],['errors']
Availability,"h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomial statistics, which means when b1 = b2, the error is zero.; If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; error for the case b1=b2. void Draw(Option_t* option = """"); -*-*-*-*-*-*-*-*-*Draw this histogram with options*-*-*-*-*-*-*-*-*-*-*-*. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:60496,error,errors,60496,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,2,['error'],['errors']
Availability,"h1analysis.C. The main features of this facility are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). See TTree::MakeProxy for more details. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs; or option=profi or option=profg ; the trailing letter select the way; the bin error are computed, See TProfile2D::SetErrorOption for; details on the differences.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Making a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F histogram by specifying option=prof or option=profs.; or option=profi or option=profg ; the trailing letter select the way; the bin error are computed, See TProfile2D::SetErrorOption for; details on the differences.; The option=prof is automatically selected in case of z:y:x>>pf; where pf is an existing TProfile2D histogram. Making a 5D plot using GL. If option GL5D is specified together with 5 variables, a 5D plot is drawn; using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example. Making a parallel coordinates plot. In case of a 2-Dim or more expression with the option=para, one can generate; a parallel coordinates plot. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Making a candle sticks chart. In case of a 2-Dim or more expression with the option=candle, one can generate; a candle sticks chart. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Normalizing the output histogram ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:82722,error,error,82722,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['error'],['error']
Availability,"h2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:36144,error,errors,36144,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['errors']
Availability,"h3->Fill(r.Gaus(0,10));; }. TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1; if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); -*-*-*-*-*-*-*-*-*Multiply this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by multiplication of h1 by h2*-*. this = (c1*h1)*(c2*h2). If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. void Paint(Option_t* option = """"); -*-*-*-*-*-*-*Control routine to paint any kind of histograms*-*-*-*-*-*-*. This function is automatically called by TCanvas::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:99011,error,errors,99011,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['errors']
Availability,"h:240; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Classstatic TClass * Class(); TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRealDataThe TRealData class manages the effective list of all data members for a given class.Definition TRealData.h:30; TRealData::kTransient@ kTransientDefinition TRealData.h:44; TRealData::GetThisOffsetLong_t GetThisOffset() constDefinition TRealData.h:55; TStreamerArtificial::Classstatic TClass * Class(); TStreamerBase::Classstatic TClass * Class(); TStreamerBasicPointerDefinition TStreamerElement.h:198; TStreamerBasicPointer::Classstatic TClass * Class(); TStreamerBasicPointer::GetCountNameconst char * GetCountName() constDefinition TStreamerElement.h:218; TStreamerElementDefinition TStreamerElement.h:32; TStreamerElement::GetNewTypeInt_t GetNewType() constDefinition TStreamerElemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:291164,error,error,291164,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"h:34; TGraphBentErrors::GetEXhighdDouble_t * GetEXhighd() const overrideDefinition TGraphBentErrors.h:85; TGraphBentErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideGet high error on X[i].Definition TGraphBentErrors.cxx:430; TGraphBentErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Add a point with bent errors to the graph.Definition TGraphBentErrors.cxx:192; TGraphBentErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for newsize points.Definition TGraphBentErrors.h:104; TGraphBentErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Set ex and ey values for point pointed by the mouse.Definition TGraphBentErrors.cxx:587; TGraphBentErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphBentErrors.h:28; TGraphBentErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphBentErrors.h:29; TGraphBentErrors::~TGraphBentErrors~TGraphBentErrors() overrideTGraphBentErrors default destructor.Definition TGraphBentErrors.cxx:176; TGraphBentErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphBentErrors.cxx:495; TGraphBentErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphBentErrors by a constant c1.Definition TGraphBentErrors.cxx:510; TGraphBentErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:9048,error,errorsDefinition,9048,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,1,['error'],['errorsDefinition']
Availability,"h:365; TGeoElemIter::SetLimitRatiovoid SetLimitRatio(Double_t limit)Definition TGeoElement.h:387; TGeoElemIter::GetBranchTObjArray * GetBranch() constDefinition TGeoElement.h:381; TGeoElemIter::GetRatioDouble_t GetRatio() constDefinition TGeoElement.h:385; TGeoElemIter::fElemconst TGeoElementRN * fElemDefinition TGeoElement.h:361; TGeoElemIter::fBranchTObjArray * fBranchDefinition TGeoElement.h:362; TGeoElemIter::NextTGeoElementRN * Next()Return next element.Definition TGeoElement.cxx:941; TGeoElemIter::operator=TGeoElemIter & operator=(const TGeoElemIter &iter)Assignment.Definition TGeoElement.cxx:867; TGeoElemIter::~TGeoElemItervirtual ~TGeoElemIter()Destructor.Definition TGeoElement.cxx:858; TGeoElemIter::operator()TGeoElementRN * operator()()() operator.Definition TGeoElement.cxx:887; TGeoElemIter::fTopconst TGeoElementRN * fTopDefinition TGeoElement.h:360; TGeoElemIter::fLimitRatioDouble_t fLimitRatioDefinition TGeoElement.h:364; TGeoElemIter::UpTGeoElementRN * Up()Go upwards from the current location until the next branching, then down.Definition TGeoElement.cxx:895; TGeoElemIter::GetElementconst TGeoElementRN * GetElement() constDefinition TGeoElement.h:383; TGeoElemIter::DownTGeoElementRN * Down(Int_t ibranch)Go downwards from current level via ibranch as low in the tree as possible.Definition TGeoElement.cxx:921; TGeoElemIter::GetTopconst TGeoElementRN * GetTop() constDefinition TGeoElement.h:382; TGeoElemIter::fLevelInt_t fLevelDefinition TGeoElement.h:363; TGeoElemIter::TGeoElemIterTGeoElemIter()Definition TGeoElement.h:368; TGeoElemIter::GetLevelInt_t GetLevel() constDefinition TGeoElement.h:384; TGeoElementRNClass representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRo...Definition TGeoElement.h:132; TGeoElementRN::fNatAbunDouble_t fNatAbunDefinition TGeoElement.h:139; TGeoElementRN::AddRatiovoid AddRatio(TGeoBatemanSol &ratio)Adds a proportion ratio to the existing one.Definition TGeoElement.cxx:684; TGeoElementR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8h_source.html:26305,down,down,26305,doc/master/TGeoElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8h_source.html,1,['down'],['down']
Availability,"h:42; TBinomialEfficiencyFitter::TBinomialEfficiencyFitterTBinomialEfficiencyFitter()default constructorDefinition TBinomialEfficiencyFitter.cxx:101; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; int; Note that this method cannot be expected to yield reliable results when using weighted histograms (because the likelihood computation will be incorrect). ; Definition at line 42 of file TBinomialEfficiencyFitter.h. Public Member Functions;  TBinomialEfficiencyFitter ();  default constructor ;  ;  TBinomialEfficiencyFitter (const TH1 *numerator, const TH1 *denominator);  Constructor. ;  ;  ~TBinomialEfficiencyFitter () override;  destructor ;  ; Double_t EvaluateFCN (const Double_t *par);  ; TFitResultPtr Fit (TF1 *f1, Option_t *option="""");  Carry out the fit of the given function to the given histograms. ;  ; ROOT::Fit::Fitter * GetFitter ();  Provide access to the underlying fitter object. ;  ; TClass * IsA () const override;  ; void Set (const TH1 *numerator, const TH1 *denominator);  Initialize with a new set of inputs. ;  ; void SetPrecision (Double_t epsilon);  Set the required integration precision, see TF1::Integral() ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Streame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:3953,reliab,reliable,3953,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,1,['reliab'],['reliable']
Availability,"h::Abs(c1);; 604 ac2 = TMath::Abs(c2);; 605 for (bin=0;bin<=nbinsx+1;bin++) {; 606 b1 = cu1[bin];; 607 b2 = cu2[bin];; 608 if (b2) w = c1*b1/(c2*b2);; 609 else w = 0;; 610 fArray[bin] = w;; 611 z = TMath::Abs(w);; 612 x = fXaxis.GetBinCenter(bin);; 613 fEntries++;; 614 fTsumw += z;; 615 fTsumw2 += z*z;; 616 fTsumwx += z*x;; 617 fTsumwx2 += z*x*x;; 618 //fTsumwy += z*x;; 619 //fTsumwy2 += z*x*x;; 620 Double_t e1 = er1[bin];; 621 Double_t e2 = er2[bin];; 622 //Double_t b22= b2*b2*d2;; 623 Double_t b22= b2*b2*TMath::Abs(c2);; 624 if (!b2) fSumw2.fArray[bin] = 0;; 625 else {; 626 if (binomial) {; 627 fSumw2.fArray[bin] = TMath::Abs(w*(1-w)/b2);; 628 } else {; 629 //fSumw2.fArray[bin] = d1*d2*(e1*b2*b2 + e2*b1*b1)/(b22*b22);; 630 fSumw2.fArray[bin] = ac1*ac2*(e1*b2*b2 + e2*b1*b1)/(b22*b22);; 631 }; 632 }; 633 if (en2[bin]) fBinEntries.fArray[bin] = en1[bin]/en2[bin];; 634 else fBinEntries.fArray[bin] = 0;; 635 }; 636 ; 637 // maintaining the correct sum of weights square is not supported when dividing; 638 // bin error resulting from division of profile needs to be checked; 639 if (fBinSumw2.fN) {; 640 Warning(""Divide"",""Cannot preserve during the division of profiles the sum of bin weight square"");; 641 fBinSumw2 = TArrayD();; 642 }; 643 ; 644 return kTRUE;; 645}; 646 ; 647////////////////////////////////////////////////////////////////////////////////; 648/// Fill a Profile histogram (no weights).; 649 ; 650Int_t TProfile::Fill(Double_t x, Double_t y); 651{; 652 if (fBuffer) return BufferFill(x,y,1);; 653 ; 654 Int_t bin;; 655 if (fYmin != fYmax) {; 656 if (y <fYmin || y> fYmax || TMath::IsNaN(y) ) return -1;; 657 }; 658 ; 659 fEntries++;; 660 bin =fXaxis.FindBin(x);; 661 AddBinContent(bin, y);; 662 fSumw2.fArray[bin] += (Double_t)y*y;; 663 fBinEntries.fArray[bin] += 1;; 664 if (fBinSumw2.fN) fBinSumw2.fArray[bin] += 1;; 665 if (bin == 0 || bin > fXaxis.GetNbins()) {; 666 if (!GetStatOverflowsBehaviour()) return -1;; 667 }; 668 fTsumw++;; 669 fTsumw2++;; 670 fTsumwx += x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:23841,error,error,23841,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['error']
Availability,"h::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html:1193,toler,tolerance,1193,root/html528/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html,12,['toler'],['tolerance']
Availability,"h::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html:2831,error,error,2831,root/html528/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html,10,['error'],['error']
Availability,"h::GetClassName() const; 1325{; 1326 return """";; 1327}; 1328 ; 1329////////////////////////////////////////////////////////////////////////////////; 1330/// Return icon name depending on type of branch.; 1331 ; 1332const char* TBranch::GetIconName() const; 1333{; 1334 if (IsFolder()); 1335 return ""TBranchElement-folder"";; 1336 else; 1337 return ""TBranchElement-leaf"";; 1338}; 1339 ; 1340////////////////////////////////////////////////////////////////////////////////; 1341/// A helper function to locate the correct basket - and its first entry.; 1342/// Extracted to a common private function because it is needed by both GetEntry; 1343/// and GetBulkEntries. It should not be called directly.; 1344///; 1345/// If a new basket must be constructed and the user_buffer is provided, then; 1346/// the user_buffer will back the memory of the newly-constructed basket.; 1347///; 1348/// Assumes that this branch is enabled.; 1349///; 1350/// Returns -1 if the entry does not exist; 1351/// Returns -2 in case of error; 1352/// Returns the index of the basket in case of success.; 1353Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; 1354 TBuffer *user_buffer); 1355{; 1356 Long64_t updatedNext = fNextBasketEntry;; 1357 Long64_t entry = fReadEntry;; 1358 if (R__likely(fCurrentBasket && fFirstBasketEntry <= entry && entry < fNextBasketEntry)) {; 1359 // We have found the basket containing this entry.; 1360 // make sure basket buffers are in memory.; 1361 basket = fCurrentBasket;; 1362 first = fFirstBasketEntry;; 1363 return fReadBasket;; 1364 } else {; 1365 if ((entry < fFirstEntry) || (entry >= fEntryNumber)) {; 1366 return -1;; 1367 }; 1368 first = fFirstBasketEntry;; 1369 Long64_t last = fNextBasketEntry - 1;; 1370 // Are we still in the same ReadBasket?; 1371 if ((entry < first) || (entry > last)) {; 1372 fReadBasket = TMath::BinarySearch(fWriteBasket + 1, fBasketEntry, entry);; 1373 if (fReadBasket < 0) {; 1374 fNextBasketEntry = -1;; 1375 Error(""GetBasketAndFirs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:47843,error,error,47843,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['error'],['error']
Availability,"h::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7057,error,errors,7057,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,2,['error'],['errors']
Availability,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleGlobalCC(unsigned int ivar) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolIsValidError() const; unsigned intMaxFunctionCalls() const; unsigned intMaxIterations() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Minimizer.html:1521,avail,available,1521,root/html602/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html,4,['avail'],['available']
Availability,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings&) const; virtual doubleGlobalCC(unsigned int ivar) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolIsValidError() const; unsigned intMaxFunctionCalls() const; unsigned intMaxIterations() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:1521,avail,available,1521,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,2,['avail'],['available']
Availability,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolGetCovMatrix(double*) const; virtual boolGetHessianMatrix(double*) const; virtual boolGetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); boolIsValidError() const; unsigned intMaxFunctionCalls() const; unsigned intMaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsOptions() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minimizer.html:1521,avail,available,1521,root/html530/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minimizer.html,3,['avail'],['available']
Availability,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); boolIsValidError() const; unsigned intMaxFunctionCalls() const; unsigned intMaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsOptions() const; doublePrecision() const; intPrintLevel() const; virtual voidPrintResults(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Minimizer.html:1519,avail,available,1519,root/html528/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Minimizer.html,1,['avail'],['available']
Availability,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int) const; virtual boolHesse(); boolIsValidError() const; unsigned intMaxFunctionCalls(); unsigned intMaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doublePrecision() const; intPrintLevel() const; virtual voidPrintResults(); virtual boolProvidesError() const; virtual boolScan(unsigned int, unsig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:1519,avail,available,1519,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,1,['avail'],['available']
Availability,"h::PositionVector3D objects with p1 and p3 of the same type; v1 and v2 are ROOT::Math::DisplacementVector3D objects).; p1 += v1;; p1 -= v1;; p3 = p1 + v1; // p1 and p3 are the same type; p3 = v1 + p1; // p3 is based on the same coordinate system as v1; p3 = p1 - v1;; p3 = v1 - p1;; v2 = p1 - p2; // difference between points returns a vector v2; // based on the same coordinate system as p1; Note that the addition between two points is NOT possible and the difference between points returns a vector.; 13.12.3.4 Other Operations; Exactly as for the 3D Vectors, the following operations are allowed:. comparison of points; scaling and division of points with a scalar; dot and cross product with any type of vector. 13.12.4 Example: LorentzVector Classes; As in the 3D case, typedef’s are defined for user convenience. and can be used by including the header file Math/Vector4D.h. The following typedef’s, defined in the header file Math/Vector4Dfwd.h, are available for the different instantiations of the template class ROOT::Math::LorentzVector:. ROOT::Math::XYZTVector vector based on x, y, z, t coordinates (Cartesian) in double precision; ROOT::Math::XYZTVectorF vector based on x, y, z, t coordinates (Cartesian) in float precision; ROOT::Math::PtEtaPhiEVector vector based on pt(rho), eta, phi and E(t) coordinates in double precision; ROOT::Math::PtEtaPhiMVector vector based on pt(rho), eta, phi and M(t) coordinates in double precision; ROOT::Math::PxPyPzMVector vector based on px, py, pz and M(mass) coordinates in double precision. The metric used for all the LorentzVector is (-,-,-,+) .; 13.12.4.1 Constructors and Assignment; The following declarations are available:; // create an empty vector (x=0, y=0, z=0, t=0); XYZTVector v1;; // vector with x=1, y=2, z=3, t=4; XYZTVector v2(1,2,3,4);; // vector with pt=1, eta=2, phi=PI, E=5; PtEtaPhiEVector v3(1,2,PI,5);; Note that each type of vector is constructed by passing its coordinate representation, so a XYZTVector(1,2,3,4) is dif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:735808,avail,available,735808,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"h; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char *function, const char *params, int *error); Execute a global function with arguments params. void Execute(TObject *obj, TClass *cl, const char *method, const char *params, int *error); Execute a method from class cl with arguments params. void Execute(TObject *obj, TClass *cl, TMethod *method, TObjArray *params, int *error); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout << ""In mymacro.C"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:25770,error,error,25770,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"h>; 9 ; 10namespace ROOT {; 11namespace Math {; 12 ; 13/** set initial second derivatives; 14 */; 15bool Minimizer::SetCovarianceDiag(std::span<const double> g2, unsigned int n); 16{; 17 MATH_UNUSED(g2);; 18 MATH_UNUSED(n);; 19 return false;; 20}; 21 ; 22/** set initial values for covariance/error matrix; 23 The covariance matrix must be provided in compressed form (row-major ordered upper traingular part); 24*/; 25bool Minimizer::SetCovariance(std::span<const double> cov, unsigned int nrow); 26{; 27 MATH_UNUSED(cov);; 28 MATH_UNUSED(nrow);; 29 return false;; 30}; 31 ; 32/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; 33/// variable; 34bool Minimizer::SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower,; 35 double upper); 36{; 37 MATH_WARN_MSG(""Minimizer::SetLimitedVariable"", ""Setting of limited variable not implemented - set as unlimited"");; 38 MATH_UNUSED(lower);; 39 MATH_UNUSED(upper);; 40 return SetVariable(ivar, name, val, step);; 41}; 42 ; 43/// set a new fixed variable (override if minimizer supports them ); 44bool Minimizer::SetFixedVariable(unsigned int ivar, const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:606,error,error,606,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['error'],['error']
Availability,"hAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:26843,error,errors,26843,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,10,['error'],['errors']
Availability,"hBentErrors default destructor. ; Definition at line 176 of file TGraphBentErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphBentErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Add a point with bent errors to the graph. ; Definition at line 192 of file TGraphBentErrors.cxx. ◆ Allocate(). Double_t ** TGraphBentErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 104 of file TGraphBentErrors.h. ◆ Apply(). void TGraphBentErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \).; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 210 of file TGraphBentErrors.cxx. ◆ Class(). static TClass * TGraphBentErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphBentErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphBentErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGraphBentErrors.h. ◆ ComputeRange(). void TGraphBentErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 248 of file TGraphBentErrors.cxx. ◆ CopyAndRelease(). void TGraphBentErrors::CopyAndRelease ; (; Double_t ** ; newarra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:37323,down,down,37323,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['down'],['down']
Availability,"hDataSet"", ""event"" respectively. These can be changed via dset and fnroot, respectively. The string 'fnroot' defines the location of the files, interpreted as an URL. Examples: fnroot files 'event' <datadir>/event_<ord>_<#>.root '/mss/event' /mss/event_<ord>_<#>.root 'root://srv//mss/event?remote=1' root://srv//mss/event_<ord>_<#>?remote=1.root Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenPar to change it and to pass the list of PARs defining the alternative selector. The argument 'nevt' controls the number of events per file (-1 for the default, which is 30000). Return 0 on success, -1 on error ; Definition at line 1343 of file TProofBench.cxx. ◆ OpenOutFile(). Int_t TProofBench::OpenOutFile ; (; Bool_t ; wrt = kFALSE, . Bool_t ; verbose = kTRUE . ). Set the otuput file Return 0 on success, -1 on error. ; Definition at line 261 of file TProofBench.cxx. ◆ ReleaseCache(). Int_t TProofBench::ReleaseCache ; (; const char * ; dset). Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ; Definition at line 1303 of file TProofBench.cxx. ◆ RemoveDataSet(). Int_t TProofBench::RemoveDataSet ; (; const char * ; dset). Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 1315 of file TProofBench.cxx. ◆ RunCPU(). Int_t TProofBench::RunCPU ; (; Long64_t ; nevents = -1, . Int_t ; start = -1, . Int_t ; stop = -1, . Int_t ; step = -1 . ). Perform the CPU run Return 0 on success, -1 on error. ; Definition at line 336 of file TProofBench.cxx. ◆ RunCPUx(). Int_t TProofBench::RunCPUx ; (; Long64_t ; nevents = -1, . Int_t ; start = -1, . Int_t ; stop = -1 . ). Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ; Definition at line 365 of file TProofBench.cxx. ◆ RunDataSet(). Int_t TProofBench::RunDataSet ; (; const char * ; dset = ""BenchDataSet"", . Int_t ; start = 1, . Int_t ; stop = -1, . Int_t ; step = 1 .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:20811,error,error,20811,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['error'],['error']
Availability,"hDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selecor is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Return 0 on success, -1 on error. void SetProofDS(TProof* p); Set the PROOF instance to be used for dataset operations, like releasing; cache ...; Use SetProofDS(0) to reset and using",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:9806,error,error,9806,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['error'],['error']
Availability,"hDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Return 0 on success, -1 on error. void SetProofDS(TProof* p); Set the PROOF instance to be used for dataset operations, like releasing; cache ...; Use SetProofDS(0) to reset and usin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:9937,error,error,9937,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,2,['error'],['error']
Availability,"hDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:25225,recover,recover,25225,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,2,['recover'],['recover']
Availability,"hDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:26164,recover,recover,26164,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['recover'],['recover']
Availability,hErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:42890,error,error,42890,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['error']
Availability,"hErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are computed for each point,; the value of the graph at that point is set to the function value at that; point, and the graph y-errors (or z-errors) are set to the value of; the confidence interval at that point.; For Histograms, confidence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element (return all zero if matrix is not available). Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; get fit errors. Int_t GetNumberTotalParameters() const; number of total parameters. Int_t GetNumberFreeParameters() const; number of variable parameters. Double_t GetParError(Int_t ipar) const; parameter error. Double_t GetParameter(Int_t ipar) const; parameter value. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; get all parameter info (name, value, errors). const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; get fit statistical information. Double_t GetSumLog(Int_t i); sum of log . Un-needed. Bool_t IsFixed(Int_t ipar) const; query if parameter ipar is fixed. void PrintResults(Int_t level, Double_t amin) const; print the fit re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBackCompFitter.html:14708,error,error,14708,root/html528/TBackCompFitter.html,https://root.cern,https://root.cern/root/html528/TBackCompFitter.html,20,"['avail', 'error']","['available', 'error']"
Availability,"hErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:43799,error,error,43799,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['error']
Availability,"hMultiErrors.cxx:1708; TGraphMultiErrors::operator=TGraphMultiErrors & operator=(const TGraphMultiErrors &tgme)TGraphMultiErrors assignment operator.Definition TGraphMultiErrors.cxx:599; TGraphMultiErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphMultiErrors.cxx:748; TGraphMultiErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphMultiErrors.cxx:1729; TGraphMultiErrors::fSumErrorsModeInt_t fSumErrorsModeHow y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition.Definition TGraphMultiErrors.h:33; TGraphMultiErrors::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition TGraphMultiErrors.h:59; TGraphMultiErrors::kOnlyFirst@ kOnlyFirstOnly take errors from first dimension.Definition TGraphMultiErrors.h:58; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineStylevirtual void SetLineStyle(Int_t e, Style_t lstyle)Set Line Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2095; TGraphMultiErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphMultiErrors.cxx:777; TGraphMultiErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exH)Set exH value for point i.Definition TGraphMultiErrors.cxx:1869; TGrap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:80970,error,errors,80970,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"hMultiErrors::SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH); 1886{; 1887 SetPointEYlow(i, ne, eyL);; 1888 SetPointEYhigh(i, ne, eyH);; 1889}; 1890 ; 1891////////////////////////////////////////////////////////////////////////////////; 1892/// Set eyL values for point `i`.; 1893 ; 1894void TGraphMultiErrors::SetPointEYlow(Int_t i, Int_t ne, const Double_t *eyL); 1895{; 1896 for (Int_t j = 0; j < fNYErrors; j++) {; 1897 if (j < ne); 1898 SetPointEYlow(i, j, eyL[j]);; 1899 else; 1900 SetPointEYlow(i, j, 0.);; 1901 }; 1902}; 1903 ; 1904////////////////////////////////////////////////////////////////////////////////; 1905/// Set eyH values for point `i`.; 1906 ; 1907void TGraphMultiErrors::SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH); 1908{; 1909 for (Int_t j = 0; j < fNYErrors; j++) {; 1910 if (j < ne); 1911 SetPointEYhigh(i, j, eyH[j]);; 1912 else; 1913 SetPointEYhigh(i, j, 0.);; 1914 }; 1915}; 1916 ; 1917////////////////////////////////////////////////////////////////////////////////; 1918/// Set error e ey values for point `i`.; 1919 ; 1920void TGraphMultiErrors::SetPointEY(Int_t i, Int_t e, Double_t eyL, Double_t eyH); 1921{; 1922 SetPointEYlow(i, e, eyL);; 1923 SetPointEYhigh(i, e, eyH);; 1924}; 1925 ; 1926////////////////////////////////////////////////////////////////////////////////; 1927/// Set error e eyL value for point `i`.; 1928 ; 1929void TGraphMultiErrors::SetPointEYlow(Int_t i, Int_t e, Double_t eyL); 1930{; 1931 if (i < 0 || e < 0); 1932 return;; 1933 ; 1934 if (i >= fNpoints); 1935 // re-allocate the object; 1936 TGraphMultiErrors::SetPoint(i, 0., 0.);; 1937 ; 1938 while (e >= fNYErrors); 1939 AddYError(fNpoints);; 1940 ; 1941 fEyL[e][i] = eyL;; 1942 if (fEyLSum); 1943 fEyLSum[i] = GetErrorYlow(i);; 1944 else; 1945 CalcYErrorsSum();; 1946}; 1947 ; 1948////////////////////////////////////////////////////////////////////////////////; 1949/// Set error e eyH value for point `i`.; 1950 ; 1951void TGraphMultiErrors::SetPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:64916,error,error,64916,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"hSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSocket.html:21720,error,error,21720,root/html530/TSocket.html,https://root.cern,https://root.cern/root/html530/TSocket.html,9,['error'],['error']
Availability,"hStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); virtual Bool_tRooAbsPdf::syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Double_tRooAbsReal::traceEval(const RooArgSet* set) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum Setting { Linear; NonLinear; NonLinearPosFractions; NonLinearLinFractions; SineLinear; };; enum RooAbsPdf::ExtendMode { CanNotBeExtended; CanBeExtended; MustBeExtended; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::CacheMode { Always; NotAdvised; Never; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. TMatrixD*_M; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMomentMorph.html:38255,Error,ErrorLoggingMode,38255,root/html534/RooMomentMorph.html,https://root.cern,https://root.cern/root/html534/RooMomentMorph.html,1,['Error'],['ErrorLoggingMode']
Availability,"hWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); const char*DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:2926,Error,Error,2926,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['Error'],['Error']
Availability,"h[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; 407 Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 408 Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; 409 Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 410 Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; 411 auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; 412 gr->SetTitle(""A graph with bend errors"");; 413 gr->SetMarkerColor(4);; 414 gr->SetMarkerStyle(21);; 415 gr->Draw(""ALP"");; 416}; 417End_Macro; 418 ; 419 ; 420\anchor GrP3d; 421#### TGraphMultiErrors; 422A `TGraphMultiErrors` works basically the same way like a `TGraphAsymmErrors`.; 423It has the possibility to define more than one type / dimension of y-Errors.; 424This is useful if you want to plot statistic and systematic errors at once.; 425 ; 426To be able to define different drawing options for the multiple error dimensions; 427the option string can consist of multiple blocks separated by semicolons.; 428The painting method assigns these blocks to the error dimensions. The first block; 429is always used for the general draw options and options concerning the x-Errors.; 430In case there are less than NErrorDimensions + 1 blocks in the option string; 431the first block is also used for the first error dimension which is reserved for; 432statistical errors. The remaining blocks are assigned to the remaining dimensions.; 433 ; 434In addition to the draw options of options of `TGraphAsymmErrors` the following are possible:; 435 ; 436| Option | Block | Description |; 437|----------|----------------|-------------------------------------------------------------------|; 438| ""X0"" | First one only | Do not draw errors for points with x = 0 |; 439| ""Y0"" | First one only | Do not draw errors for points with y = 0 |; 440| ""s=%f"" | Any | Scales the x-Errors with %f similar to `gStyle->SetErrorX(dx)` but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:16554,error,error,16554,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['error']
Availability,"h_t width)Definition RooGlobalFunc.cxx:248; RooFit::VisualizeErrorRooCmdArg VisualizeError(const RooDataSet &paramData, double Z=1)Definition RooGlobalFunc.cxx:300; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFit::LineStyleRooCmdArg LineStyle(Style_t style)Definition RooGlobalFunc.cxx:240; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf610_visualerrorDefinition rf610_visualerror.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; mTMarker mDefinition textangle.C:8; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) INFO: visualizing 1-sigma uncertainties in parameters (m,s,fsig,m2,s2) from fit result fitresult_model_genData using 315 samplings.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) INFO: visualizing 1-sigma uncertainties in parameters (m,s,fsig,m2,s2) from fit result fitresult_model_genData using 315 samplings.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:9652,error,error,9652,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,1,['error'],['error']
Availability,"ha_optim; // optimization of convergence coefficients, possible values are:; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values are: FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values are:; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate x positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 2D peaks, output parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate x positions of 1D ridges (not fit). However, they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:48154,error,errors,48154,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['error'],['errors']
Availability,"hain.h. ◆ GetPlayer(). TVirtualTreePlayer * TProofChain::GetPlayer ; (; ). Forwards the execution to the dummy tree header. ; See TTree::GetPlayer(). ; Definition at line 335 of file TProofChain.cxx. ◆ GetReadEntry(). Long64_t TProofChain::GetReadEntry ; (; ); const. overridevirtual . Returns the number of processed entries. ; Reimplemented from TChain.; Definition at line 437 of file TProofChain.cxx. ◆ HasTreeHeader(). Bool_t TProofChain::HasTreeHeader ; (; ); const. inline . Definition at line 76 of file TProofChain.h. ◆ IsA(). TClass * TProofChain::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TChain.; Definition at line 89 of file TProofChain.h. ◆ Process() [1/2]. Long64_t TProofChain::Process ; (; const char * ; filename, . Option_t * ; option = """", . Long64_t ; nentries = TTree::kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Forwards the execution to the TDSet. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. See TDSet::Process(). ; Reimplemented from TChain.; Definition at line 346 of file TProofChain.cxx. ◆ Process() [2/2]. Long64_t TProofChain::Process ; (; TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = TTree::kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TChain.; Definition at line 364 of file TProofChain.cxx. ◆ Progress(). void TProofChain::Progress ; (; Long64_t ; total, . Long64_t ; processed . ). virtual . Changes the number of processed entries. ; Definition at line 425 of file TProofChain.cxx. ◆ ReleaseProof(). void TProofChain::ReleaseProof ; (; ). virtual . Releases PROOF. Disconnect the ""progress"" signal. ; Definition at line 445 of file TProofChain.cxx. ◆ SetDebug(). void TProofChain::SetDebug ; (; Int_t ; level = 1, . Long64_t ; min = 0, . Long64_t ; max = 9999999 . ). overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:61743,error,error,61743,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['error'],['error']
Availability,"hanged (TGeoNode *node);  Callback for propagating node visibility changes. ;  ; void Paint (Option_t *option="""") override;  Paint the enclosed TGeo hierarchy with visibility level and option given in data-members. ;  ; void SetMaxVisNodes (Int_t mvn);  ; void SetVisLevel (Int_t vl);  ; void SetVisOption (Int_t vo);  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseNodeTrans ();  Use transformation matrix from the TGeoNode. ;  ; void VolumeColChanged (TGeoVolume *volume);  Callback for propagating volume parameter changes. ;  ; void VolumeVisChanged (TGeoVolume *volume);  Callback for propagating volume visibility changes. ;  ;  Public Member Functions inherited from TEveGeoNode;  TEveGeoNode (TGeoNode *node);  Constructor. ;  ; Bool_t CanEditMainColor () const override;  Can edit main-color – not available for assemblies. ;  ; Bool_t CanEditMainTransparency () const override;  Can edit main transparency – not available for assemblies. ;  ; void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent) override;  Checks if child-nodes have been imported ... imports them if not. ;  ; virtual void ExpandIntoListTrees ();  Expand children into all list-trees. ;  ; virtual void ExpandIntoListTreesRecursively ();  Expand children into all list-trees recursively. ;  ; const char * GetElementName () const override;  Return name, taken from geo-node. Used via TEveElement. ;  ; const char * GetElementTitle () const override;  Return title, taken from geo-node. Used via TEveElement. ;  ; Char_t GetMainTransparency () const override;  Get transparency – it is taken from the geo node. ;  ; const char * GetName () const override;  Return name, taken from geo-node. Used via TObject. ;  ; TGeoNode * GetNode () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; const char * GetTitle () const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoTopNode.html:2375,avail,available,2375,doc/master/classTEveGeoTopNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoTopNode.html,1,['avail'],['available']
Availability,"hape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); static voidDistToCone(Double_t* point, Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tGetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCone.html:3458,error,error,3458,root/html528/TGeoCone.html,https://root.cern,https://root.cern/root/html528/TGeoCone.html,4,['error'],['error']
Availability,"hapeObj(); TGLPShapeObj(TGLPhysicalShape* sh, TGLViewer* v); virtual~TGLPShapeObj(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPShapeObj.html:1420,error,error,1420,root/html528/TGLPShapeObj.html,https://root.cern,https://root.cern/root/html528/TGLPShapeObj.html,6,['error'],['error']
Availability,"hapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidTGeoNode::FillIdArray(Int_t& ifree, Int_t& nodeid, Int_t* array) const; Int_tTGeoNode::FindNode(const TGeoNode* node, Int_t level); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetByteCount() const; Int_tTGeoNode::GetColour() const; TGeoNode*TGeoNode::GetDaughter(Int_t ind) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TGeoPatternFinder*TGeoNode::GetFinder() const; TGeoExtension*TGeoNode::GetFWExtension() const; virtual const char*TObject::GetIconName() const; virtual Int_tTGeoNode::GetIndex() const; virtual TGeoMatrix*GetMatrix() const; TGeoMedium*TGeoNode::GetMedium() const; TGeoVolume*TGeoNode::GetMotherVolume() const; virtual const char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeMatrix.html:1797,error,error,1797,root/html534/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html534/TGeoNodeMatrix.html,6,['error'],['error']
Availability,"hapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidTGeoNode::FillIdArray(Int_t& ifree, Int_t& nodeid, Int_t* array) const; Int_tTGeoNode::FindNode(const TGeoNode* node, Int_t level); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetByteCount() const; Int_tTGeoNode::GetColour() const; TGeoNode*TGeoNode::GetDaughter(Int_t ind) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TGeoPatternFinder*TGeoNode::GetFinder() const; virtual const char*TObject::GetIconName() const; virtual Int_tTGeoNode::GetIndex() const; virtual TGeoMatrix*GetMatrix() const; TGeoMedium*TGeoNode::GetMedium() const; TGeoVolume*TGeoNode::GetMotherVolume() const; virtual const char*TNamed::GetName() const; Int_tTGeoNode::GetNdaugh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeMatrix.html:1797,error,error,1797,root/html528/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoNodeMatrix.html,4,['error'],['error']
Availability,"hapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidTGeoNode::FillIdArray(Int_t& ifree, Int_t& nodeid, Int_t* array) const; Int_tTGeoNode::FindNode(const TGeoNode* node, Int_t level); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoNode::GetByteCount() const; Int_tTGeoNode::GetColour() const; TGeoNode*TGeoNode::GetDaughter(Int_t ind) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TGeoPatternFinder*GetFinder() const; TGeoExtension*TGeoNode::GetFWExtension() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetIndex() const; virtual TGeoMatrix*GetMatrix() const; TGeoMedium*TGeoNode::GetMedium() const; TGeoVolume*TGeoNode::GetMotherVolume() const; virtual const char*TNamed::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeOffset.html:4672,error,error,4672,root/html534/TGeoNodeOffset.html,https://root.cern,https://root.cern/root/html534/TGeoNodeOffset.html,6,['error'],['error']
Availability,"hapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTGeoNode::CountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoNode::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGeoNode::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGeoNode::DrawOnly(Option_t* option = """"); voidTGeoNode::DrawOverlaps(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoNode::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidTGeoNode::FillIdArray(Int_t& ifree, Int_t& nodeid, Int_t* array) const; Int_tTGeoNode::FindNode(const TGeoNode* node, Int_t level); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoNode::GetByteCount() const; Int_tTGeoNode::GetColour() const; TGeoNode*TGeoNode::GetDaughter(Int_t ind) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TGeoPatternFinder*GetFinder() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetIndex() const; virtual TGeoMatrix*GetMatrix() const; TGeoMedium*TGeoNode::GetMedium() const; TGeoVolume*TGeoNode::GetMotherVolume() const; virtual const char*TNamed::GetName() const; Int_tTGeoNode::GetNdaughters() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeOffset.html:4672,error,error,4672,root/html528/TGeoNodeOffset.html,https://root.cern,https://root.cern/root/html528/TGeoNodeOffset.html,4,['error'],['error']
Availability,"har * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::lsvirtual void ls(Option_t *option="""") constThe ls function lists the contents of a class on stdout.Definition TObject.cxx:579; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kIsReferenced@ kIsReferencedif object is referenced by a TRef or TRefArrayDefinition TObject.h:65; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TROOT::IncreaseDirLevelstatic Int_t IncreaseDirLevel()Increase the indentation level for ls().Definition TROOT.cxx:2887;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:70316,error,error,70316,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['error'],['error']
Availability,"har * TWebFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TWebFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 95 of file TWebFile.h. ◆ Close(). void TWebFile::Close ; (; Option_t * ; option = """"). overridevirtual . Close a Web file. ; Close the socket connection and delete the cache See also the TFile::Close() function ; Reimplemented from TFile.; Definition at line 412 of file TWebFile.cxx. ◆ DeclFileName(). static const char * TWebFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 95 of file TWebFile.h. ◆ GetFromCache(). Int_t TWebFile::GetFromCache ; (; char * ; buf, . Int_t ; len, . Int_t ; nseg, . Long64_t * ; seg_pos, . Int_t * ; seg_len . ). protectedvirtual . Extract requested segments from the cached content. ; Such cache can be produced when server suddenly returns full data instead of segments Returns -1 in case of error, 0 in case of success ; Definition at line 600 of file TWebFile.cxx. ◆ GetFromWeb(). Int_t TWebFile::GetFromWeb ; (; char * ; buf, . Int_t ; len, . const TString & ; msg . ). protectedvirtual . Read request from web server. ; Returns -1 in case of error, 0 in case of success. ; Definition at line 625 of file TWebFile.cxx. ◆ GetFromWeb10(). Int_t TWebFile::GetFromWeb10 ; (; char * ; buf, . Int_t ; len, . const TString & ; msg, . Int_t ; nseg = 0, . Long64_t * ; seg_pos = nullptr, . Int_t * ; seg_len = nullptr . ). protectedvirtual . Read multiple byte range request from web server. ; Uses HTTP 1.0 daemon wihtout mod-root. Returns -2 in case file does not exist, -1 in case of error and 0 in case of success. ; Definition at line 692 of file TWebFile.cxx. ◆ GetHead(). Int_t TWebFile::GetHead ; (; ). protectedvirtual . Get the HTTP header. ; Depending on the return code we can see if the file exists and if the server uses mod_root. Returns -1 in case of an error, -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:47219,error,error,47219,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['error'],['error']
Availability,"har *line, Int_t *error /*= 0*/); 792{; 793 Int_t err;; 794 if (!error); 795 error = &err;; 796 if (line && line[0] != '.') {; 797 TString input;; 798 if (!fBackslashContinue); 799 input += TString::Format(""#line 1 \""%s%d\""\n"", filestem, fNcmd);; 800 input += line;; 801 int res = ProcessLine(input, kFALSE, error);; 802 if (gCling->GetMore()) {; 803 if (!fNonContinuePrompt.Length()); 804 fNonContinuePrompt = fDefaultPrompt;; 805 SetPrompt(""root (cont'ed, cancel with .@) [%d]"");; 806 } else if (fNonContinuePrompt.Length()) {; 807 SetPrompt(fNonContinuePrompt);; 808 fNonContinuePrompt.Clear();; 809 }; 810 std::string_view sv(line);; 811 auto lastNonSpace = sv.find_last_not_of("" \t"");; 812 fBackslashContinue = (lastNonSpace != std::string_view::npos; 813 && sv[lastNonSpace] == '\\');; 814 return res;; 815 }; 816 if (line && line[0] == '.' && line[1] == '@') {; 817 ProcessLine(line, kFALSE, error);; 818 SetPrompt(""root [%d] "");; 819 }; 820 return ProcessLine(line, kFALSE, error);; 821}; 822 ; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// Forward tab completion request to our TTabCom::Hook().; 826 ; 827Int_t TRint::TabCompletionHook(char *buf, int *pLoc, std::ostream& out); 828{; 829 if (gTabCom); 830 return gTabCom->Hook(buf, pLoc, out);; 831 ; 832 return -1;; 833}; e#define e(i)Definition RSha256.hxx:103; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassImp#define ClassImp(name)Definition Rtypes.h:382; kMAXPATHLEN@ kMAXPATHLENDefinition Rtypes.h:60; gApplicationR__EXTERN TApplication * gApplicationDefinition TApplication.h:170; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TClassEdit.h; TClassTable.h; gClassTableR__EXTERN TClassTable * gClassTableDefinition TClassTable.h:104; TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:27939,error,error,27939,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,2,['error'],['error']
Availability,"har *name, TGeoMedium *medium);; 345 void SetTopVolume(TGeoVolume *vol);; 346 ; 347 //--- geometry queries; 348 TGeoNode *CrossBoundaryAndLocate(Bool_t downwards, TGeoNode *skipnode);; 349 TGeoNode *FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char *path = """", Bool_t frombdr = kFALSE);; 350 TGeoNode *FindNextDaughterBoundary(Double_t *point, Double_t *dir, Int_t &idaughter, Bool_t compmatrix = kFALSE);; 351 TGeoNode *FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE);; 352 TGeoNode *FindNode(Bool_t safe_start = kTRUE);; 353 TGeoNode *FindNode(Double_t x, Double_t y, Double_t z);; 354 Double_t *FindNormal(Bool_t forward = kTRUE);; 355 Double_t *FindNormalFast();; 356 TGeoNode *InitTrack(const Double_t *point, const Double_t *dir);; 357 TGeoNode *InitTrack(Double_t x, Double_t y, Double_t z, Double_t nx, Double_t ny, Double_t nz);; 358 void ResetState();; 359 Double_t Safety(Bool_t inside = kFALSE);; 360 TGeoNode *SearchNode(Bool_t downwards = kFALSE, const TGeoNode *skipnode = nullptr);; 361 TGeoNode *Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE);; 362 void DisableInactiveVolumes() { fActivity = kTRUE; }; 363 void EnableInactiveVolumes() { fActivity = kFALSE; }; 364 void SetCurrentTrack(Int_t i) { fCurrentTrack = (TVirtualGeoTrack *)fTracks->At(i); }; 365 void SetCurrentTrack(TVirtualGeoTrack *track) { fCurrentTrack = track; }; 366 Int_t GetNtracks() const { return fNtracks; }; 367 TVirtualGeoTrack *GetCurrentTrack() { return fCurrentTrack; }; 368 TVirtualGeoTrack *GetLastTrack(); 369 {; 370 return (TVirtualGeoTrack *)((fNtracks > 0) ? fTracks->At(fNtracks - 1) : nullptr);; 371 }; 372 const Double_t *GetLastPoint() const { return GetCurrentNavigator()->GetLastPoint(); }; 373 TVirtualGeoTrack *GetTrack(Int_t index); 374 {; 375 return (index < fNtracks) ? (TVirtualGeoTrack *)fTracks->At(index) : nullptr;; 376 }; 377 Int_t GetTrackIndex(Int_t id) const;; 378 TVirtualGeoTrack *GetTrackOfId(Int_t id) const;; 379 TVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:20489,down,downwards,20489,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['down'],['downwards']
Availability,"har *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoArb8; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void GetPlaneNormal (Double_t *p1, Double_t *p2, Double_t *p3, Double_t *norm);  ; static Bool_t InsidePolygon (Double_t x, Double_t y, Double_t *pts);  ; static Bool_t IsSamePoint (const Double_t *p1, const Double_t *p2);  ;  Static Public Member Functions inherited from TGeoBBox; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox *box2, const TGeoMatrix *mat2) R__DEPRECATED(6;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Contains (const Double_t *point, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin);  ; static const char * DeclFileName ();  ; static Double_t DistFromInside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ; static Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ;  Static Public Member Functions inherited from TGeoShape; static Double_t Big ();  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Double_t ComputeEpsMch ();  Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ;  ; static const char * DeclFileName ();  ; static Double_t DistToPhiMin (const Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:18107,error,error,18107,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,1,['error'],['error']
Availability,"har *optStr="""");  returns a map of the quotas of all groups ;  ; virtual TMap * GetDataSets (const char *uri="""", const char *optStr="""");  Lists all datasets that match given uri. ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; virtual TList * GetListOfQueries (Option_t *opt="""");  Ask the master for the list of queries. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of queries whose full results are kept in the remote sandbox. ;  ; TFileCollection * GetMissingFiles (TQueryResult *qr=0);  Get a TFileCollection with the files missing in the query described by 'qr' or the last query if qr is null (default). ;  ; Int_t GetNumberOfDrawQueries ();  ; Int_t GetNumberOfQueries ();  Number of queries processed by this session. ;  ; TObject * GetOutput (const char *name);  Get specified object that has been produced during the processing (see Process()). ;  ; TList * GetOutputList ();  Get list with all object created during processing (see Process()). ;  ; TList * GetOutputNames ();  FIXME: to be written. ;  ; Int_t GetParallel () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:9371,error,error,9371,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['error'],['error']
Availability,"har *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const TH3D &h3d);  Copy constructor. ;  ;  ~TH3D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3D & operator= (const TH3D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D.html:2053,error,errors,2053,doc/master/classTH3D.html,https://root.cern,https://root.cern/doc/master/classTH3D.html,1,['error'],['errors']
Availability,"har * ; , . const char ** ; , . const char ** ; , . const char * ; , . const char * ; , . void(*)() ; , . const FwdDeclArgsToKeepCollection_t & ; fwdDeclArgsToKeep, . const char ** ; classesHeaders, . Bool_t ; lateRegistration = false, . Bool_t ; hasCxxModule = false . ). pure virtual . Implemented in TCling. ◆ RegisterPrebuiltModulePath(). virtual bool TInterpreter::RegisterPrebuiltModulePath ; (; const std::string & ; FullPath, . const std::string & ; ModuleMapName = ""module.modulemap"" . ); const. pure virtual . Implemented in TCling. ◆ RegisterTClassUpdate(). virtual void TInterpreter::RegisterTClassUpdate ; (; TClass * ; oldcl, . DictFuncPtr_t ; dict . ). pure virtual . Implemented in TCling. ◆ ReloadAllSharedLibraryMaps(). virtual Int_t TInterpreter::ReloadAllSharedLibraryMaps ; (; ). pure virtual . Implemented in TCling. ◆ ReportDiagnosticsToErrorHandler(). virtual void TInterpreter::ReportDiagnosticsToErrorHandler ; (; bool ; = true). inlinevirtual . Report diagnostics to the ROOT error handler (see TError.h). ; Reimplemented in TCling.; Definition at line 269 of file TInterpreter.h. ◆ RescanLibraryMap(). virtual Int_t TInterpreter::RescanLibraryMap ; (; ). pure virtual . Implemented in TCling. ◆ Reset(). virtual void TInterpreter::Reset ; (; ). pure virtual . Implemented in TCling. ◆ ResetAll(). virtual void TInterpreter::ResetAll ; (; ). pure virtual . Implemented in TCling. ◆ ResetGlobals(). virtual void TInterpreter::ResetGlobals ; (; ). pure virtual . Implemented in TCling. ◆ ResetGlobalVar(). virtual void TInterpreter::ResetGlobalVar ; (; void * ; obj). pure virtual . Implemented in TCling. ◆ RewindDictionary(). virtual void TInterpreter::RewindDictionary ; (; ). pure virtual . Implemented in TCling. ◆ SaveContext(). virtual void TInterpreter::SaveContext ; (; ). pure virtual . Implemented in TCling. ◆ SaveGlobalsContext(). virtual void TInterpreter::SaveGlobalsContext ; (; ). pure virtual . Implemented in TCling. ◆ SetAlloclockfunc(). virtual void TInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:87910,error,error,87910,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['error'],['error']
Availability,"har * ; argList). inlinevirtual . Specify the external constraints through a comma-separated list of arguments already in the workspace. ; Definition at line 206 of file ModelConfig.h. ◆ SetExternalConstraints() [2/2]. void RooStats::ModelConfig::SetExternalConstraints ; (; const RooArgSet & ; set). Specify the external constraints. ; Definition at line 362 of file ModelConfig.cxx. ◆ SetGlobalObservables() [1/2]. virtual void RooStats::ModelConfig::SetGlobalObservables ; (; const char * ; argList). inlinevirtual . Specify the global observables through a comma-separated list of arguments already in the workspace. ; Definition at line 196 of file ModelConfig.h. ◆ SetGlobalObservables() [2/2]. void RooStats::ModelConfig::SetGlobalObservables ; (; const RooArgSet & ; set). virtual . Specify the global observables. ; Definition at line 378 of file ModelConfig.cxx. ◆ SetHasOnlyParameters(). bool RooStats::ModelConfig::SetHasOnlyParameters ; (; const RooArgSet & ; set, . const char * ; errorMsgPrefix = nullptr . ). protected . helper function to check that content of a given set is exclusively parameters ; Definition at line 345 of file ModelConfig.cxx. ◆ SetNuisanceParameters() [1/2]. virtual void RooStats::ModelConfig::SetNuisanceParameters ; (; const char * ; argList). inlinevirtual . Specify the nuisance parameters using a comma-separated list of arguments already in the workspace. ; Definition at line 142 of file ModelConfig.h. ◆ SetNuisanceParameters() [2/2]. virtual void RooStats::ModelConfig::SetNuisanceParameters ; (; const RooArgSet & ; set). inlinevirtual . Specify the nuisance parameters (parameters that are not POI). ; Definition at line 132 of file ModelConfig.h. ◆ SetObservables() [1/2]. virtual void RooStats::ModelConfig::SetObservables ; (; const char * ; argList). inlinevirtual . specify the observables through a comma-separated list of arguments already in the workspace. ; Definition at line 176 of file ModelConfig.h. ◆ SetObservables() [2/2]. virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html:31131,error,errorMsgPrefix,31131,doc/master/classRooStats_1_1ModelConfig.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html,1,['error'],['errorMsgPrefix']
Availability,"har * ; filename); const. Return true if the file is local and is (likely) to be a ROOT file. ; Definition at line 2230 of file TROOT.cxx. ◆ IsWebDisplay(). Bool_t TROOT::IsWebDisplay ; (; ); const. inline . Definition at line 287 of file TROOT.h. ◆ IsWebDisplayBatch(). Bool_t TROOT::IsWebDisplayBatch ; (; ); const. inline . Definition at line 288 of file TROOT.h. ◆ LoadClass() [1/2]. Int_t TROOT::LoadClass ; (; const char * ; classname, . const char * ; libname, . Bool_t ; check = kFALSE . ). Check if class ""classname"" is known to the interpreter (in fact, this check is not needed anymore, so classname is ignored). ; If not it will load library ""libname"". If the library couldn't be found with original libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again. If DynamicPathName still couldn't find the library, return -1. If check is true it will only check if libname exists and is readable. Returns 0 on successful loading, -1 in case libname does not exist or in case of error and -2 in case of version mismatch. ; Definition at line 2183 of file TROOT.cxx. ◆ LoadClass() [2/2]. TClass * TROOT::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent = kFALSE . ); const. Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 2167 of file TROOT.cxx. ◆ LoadMacro(). Int_t TROOT::LoadMacro ; (; const char * ; filename, . Int_t * ; error = nullptr, . Bool_t ; check = kFALSE . ). Load a macro in the interpreter's memory. ; Equivalent to the command line command "".L filename"". If the filename has ""+"" or ""++"" appended the macro will be compiled by ACLiC. The filename must have the format: [path/]macro.C[+|++[g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:66708,error,error,66708,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"har* columname); Return minimum of column with name columname.; if the Tree has an associated TEventList or TEntryList, the minimum; is computed for the entries in this list. TVirtualTreePlayer* GetPlayer(); Load the TTreePlayer (if not already done). TList* GetUserInfo(); Return a pointer to the list containing user objects associated to this tree. The list is automatically created if it does not exist. WARNING: By default the TTree destructor will delete all objects added; to this list. If you do not want these objects to be deleted,; call:. mytree->GetUserInfo()->Clear();. before deleting the tree. void KeepCircular(); Keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(Long64_t maxmemory = 2000000000); Read in memory all baskets from all branches up to the limit of maxmemory bytes. If maxmemory is non null and positive SetMaxVirtualSize is called; with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; The function returns the total number of baskets read into memory; if negative an error occured while loading the branches.; This method may be called to force branch baskets in memory; when random access to branch entries is required.; If random access to only a few branches is required, you should; call directly TBranch::LoadBaskets. Long64_t LoadTree(Long64_t entry); Set current entry. Returns -2 if entry does not exist (just as TChain::LoadTree()). Note: This function is overloaded in TChain. Long64_t LoadTreeFriend(Long64_t entry, TTree* T); Load entry on behalf of our master tree, we may use an index. Called by LoadTree() when the masterTree looks for the entry; number in a friend tree (us) corresponding to the passed entry; number in the masterTree. If we have no index, our entry number and the masterTree entry; number are the same. If we *do* have an index, we must find the (major, minor) value pair; in masterTree to locate our corresponding entry. Int_t MakeClass(const char* classname = 0, Option_t* option = """"); Generate a skeleton ana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:95266,error,error,95266,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['error'],['error']
Availability,"har* fmt, va_list va) const; voidTObject::MakeZombie(). private:. UChar_tParseStagePriority(Option_t* opt). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TNetXNGSystem*fSystemUsed to access filesystem interface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNetXNGFileStager(const char* url = """"); Constructor. param url: the URL of the entry-point server. ~TNetXNGFileStager(); Destructor. Bool_t IsStaged(const char* path); Check if a file is staged. param path: the URL of the file. Int_t Locate(const char* path, TString& endpath); Get actual endpoint URL. param path: the entry-point URL; param endpath: the actual endpoint URL; returns: 0 in the case of success and 1 if any error occurred. Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE); Bulk locate request for a collection of files. param fc: collection of files to be located; param addDummyUrl: append a dummy noop URL if the file is not staged or; redirector == endpoint; returns: < 0 in case of errors, number of files processed; otherwise. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager. Avoids; multiple instantiations of the potentially the same TNetXNGFileStager. Bool_t Stage(const char* path, Option_t* opt = 0); Issue a stage request for a single file. param path: the path of the file to stage; param opt: defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p"". Bool_t Stage(TCollection* pathlist, Option_t* opt = 0); Issue stage requests for multiple files. param pathlist: list of paths of files to stage; param opt: defines 'option' and 'priority'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFileStager.html:6822,error,error,6822,root/html534/TNetXNGFileStager.html,https://root.cern,https://root.cern/root/html534/TNetXNGFileStager.html,2,['error'],['error']
Availability,"har* method) const; virtual voidAdd(TObject* arg); virtual voidAdd(TObject* obj, Int_t count); virtual voidTObject::AppendPad(Option_t* option = """"); TObject*RooLinkedList::At(Int_t index) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidRooLinkedList::Clear(Option_t* o = 0); virtual TObject*RooLinkedList::Clone(const char* = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidRooLinkedList::Delete(Option_t* o = 0); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TObject*RooLinkedList::find(const char* name) const; RooAbsArg*RooLinkedList::findArg(const RooAbsArg*) const; virtual TObject*RooLinkedList::FindObject(const char* name) const; virtual TObject*RooLinkedList::FindObject(const TObject* obj) const; TObject*RooLinkedList::First() const; RooFIterRooLinkedList::fwdIterator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tRooLinkedList::getHashTableSize() const; virtual const char*TObject::GetIconName() const; virtual const char*RooLinkedList::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tRooLinkedList::GetSize() const; virtual const char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRefCountList.html:1758,error,error,1758,root/html534/RooRefCountList.html,https://root.cern,https://root.cern/root/html534/RooRefCountList.html,6,['error'],['error']
Availability,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_t&B(); virtual voidTObject::Browse(TBrowser* b); Double_t&C(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_t&D(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidTSplinePoly::GetKnot(Double_t& x, Double_t& y) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly3.html:1600,error,error,1600,root/html528/TSplinePoly3.html,https://root.cern,https://root.cern/root/html528/TSplinePoly3.html,10,['error'],['error']
Availability,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Bool_tRooAbsStudy::attach(RooWorkspace&); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; RooLinkedList*RooAbsStudy::detailedData(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_texecute(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Bool_tfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCStudy.html:1412,error,error,1412,root/html528/RooStats__ToyMCStudy.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCStudy.html,1,['error'],['error']
Availability,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPySelector.html:2809,error,error,2809,root/html534/TPySelector.html,https://root.cern,https://root.cern/root/html534/TPySelector.html,6,['error'],['error']
Availability,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPySelector.html:2809,error,error,2809,root/html528/TPySelector.html,https://root.cern,https://root.cern/root/html528/TPySelector.html,4,['error'],['error']
Availability,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t); virtual TGeoNode*CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t*, const Double_t* = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetByteCount() const; Int_tGetCurrent(); virtual Int_tGetDivAxis(); Int_tGetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*GetMatrix(); virtual const char*TObject::GetName() const; Int_tGetNdiv() const; Int_tGetNext() const; TGeoNode*GetNodeOffset(Int_t idiv); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetStart()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternFinder.html:2492,error,error,2492,root/html532/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html532/TGeoPatternFinder.html,2,['error'],['error']
Availability,"har* method) const; voidaddStudy(RooAbsStudy& study); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStudyManager.html:1679,error,error,1679,root/html526/RooStudyManager.html,https://root.cern,https://root.cern/root/html526/RooStudyManager.html,2,['error'],['error']
Availability,"har* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:10724,error,error,10724,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,4,['error'],['error']
Availability,"har* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const char* , const char* , Int_t , RooFit::MPSplit , Bool_t , Bool_t , Bool_t ); Virtual constructor. Double_t defaultErrorLevel() const; The default error level for MINUIT error analysis for a chi^2 is 1.0. RooNumIntConfig& binIntegratorConfig(); { return _intConfig ; }. const RooNumIntConfig& binIntegratorConfig() const; { return _intConfig ; }. Bool_t allowFunctionCache(); Disable function (component) caching if integration is requested as the function; will be evaluated at coordinates other than the points in the dataset. » Last changed: Tue Jun 2 15:36:51 2015 » Last generated: 2015-06-02 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooXYChi2Var.html:49424,error,error,49424,root/html604/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html604/RooXYChi2Var.html,4,['error'],['error']
Availability,"har* name, Bool_t flag = kTRUE); If flag is true object with 'name' is set to be invisible; i.e. it is not drawn when Draw() is called. TString caller(const char* method) const; Utility function. void SetMaximum(Double_t maximum = -1111); Set maximum value of Y axis. void SetMinimum(Double_t minimum = -1111); Set minimum value of Y axis. Double_t chiSquare(const char* pdfname, const char* histname, int nFitParam = 0) const; Calculate and return reduced chi-squared of curve with given name with respect; to histogram with given name. If nFitParam is non-zero, it is used to reduce the; number of degrees of freedom for a chi^2 for a curve that was fitted to the; data with that number of floating parameters. RooHist* residHist(const char* histname = 0, const char* pdfname = 0, bool normalize = false, bool useAverage = kFALSE) const; Return a RooHist containing the residuals of histogram 'histname' with respect; to curve 'curvename'. If normalize is true the residuals are divided by the error; on the histogram, effectively returning a pull histogram. Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Return the number of events that is associated with the range [xlo,xhi]; This method is only fully functional for ranges not equal to the full; range if the object that inserted the normalization data provided; a link to an external object that can calculate the event count in; in sub ranges. An error will be printed if this function is used; on sub-ranges while that information is not available. void SetName(const char* name); Set the name of the RooPlot to 'name'. void SetNameTitle(const char* name, const char* title); Set the name and title of the RooPlot to 'name' and 'title'. void SetTitle(const char* name); Set the title of the RooPlot to 'title'. Int_t defaultPrintContents(Option_t* opt) const; Define default print options, for a given print style. TAxis* GetXaxis() const; { return _hist->GetXaxis() ; }. TAxis* GetYaxis() const; { return _hist->GetYaxis() ; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPlot.html:22053,error,error,22053,root/html534/RooPlot.html,https://root.cern,https://root.cern/root/html534/RooPlot.html,6,['error'],['error']
Availability,"har* name, const char* sqlname, const char* sqltype); virtual~TSQLClassColumnInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetSQLName() const; const char*GetSQLType() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLClassColumnInfo.html:1780,error,error,1780,root/html530/TSQLClassColumnInfo.html,https://root.cern,https://root.cern/root/html530/TSQLClassColumnInfo.html,5,['error'],['error']
Availability,"har* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); virtual~TGraph2D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrFit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidFitPanel()MENU ; TList*GetContourList(Double_t contour); TDirectory*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2D.html:8569,Error,Error,8569,root/html534/TGraph2D.html,https://root.cern,https://root.cern/root/html534/TGraph2D.html,1,['Error'],['Error']
Availability,"har* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:3522,error,error,3522,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,6,['error'],['error']
Availability,"har* normname, const char* alternate); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(UInt_t index); virtual voidTObject::Browse(TBrowser* b); static Bool_tCheck(const char* cname, string& normname); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static DictFuncPtr_tGetDict(const char* cname); static DictFuncPtr_tGetDict(const type_info& info); static DictFuncPtr_tGetDictNorm(const char* cname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); static TProtoClass*GetProto(const char* cname); static TProtoClass*GetProto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassTable.html:1850,error,error,1850,root/html602/TClassTable.html,https://root.cern,https://root.cern/root/html602/TClassTable.html,4,['error'],['error']
Availability,"har* protocol = ""tcp""); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; char*TSystem::DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidTSystem::ExitLoop(); virtual Bool_tExpandPathName(TString& patbuf); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeTSystem::GetAclicMode() const; virtual Int_tTSystem::GetAclicProperties() const; voidTSystem::GetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*TSystem::GetBuildArch() const; virtual const char*TSystem::GetBuildCompiler() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:3449,error,error,3449,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,4,['error'],['error']
Availability,"har* sfx = ""\n""); Notify locally 'msg' to the appropriate units (file, stdout, window); If defined, 'sfx' is added after 'msg' (typically a line-feed);. void LogMessage(const char* msg, Bool_t all); Log a message into the appropriate window by emitting a signal. Int_t SendGroupView(); Send to all active slaves servers the current slave group size; and their unique id. Returns number of active slaves.; Returns -1 in case of error. Bool_t GetFileInCmd(const char* cmd, TString& fn); Static method to extract the filename (if any) form a CINT command.; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not; appliable. Int_t Exec(const char* cmd, Bool_t plusMaster = kFALSE); Send command to be executed on the PROOF master and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char *cmd, ESlaves list, Bool_t plusMaster); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster.; If logtomacro is TRUE the text result of the action is saved in the fMacroLog; TMacro, accessible via TMacro::GetMacroLog();; Returns -1 in case of error, >=0 in case of succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:61564,error,error,61564,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['error']
Availability,"har* sfx = ""\n""); Notify locally 'msg' to the appropriate units (file, stdout, window); If defined, 'sfx' is added after 'msg' (typically a line-feed);. void LogMessage(const char* msg, Bool_t all); Log a message into the appropriate window by emitting a signal. Int_t SendGroupView(); Send to all active slaves servers the current slave group size; and their unique id. Returns number of active slaves.; Returns -1 in case of error. Bool_t GetFileInCmd(const char* cmd, TString& fn); Static method to extract the filename (if any) form a CINT command.; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not; appliable. Int_t Exec(const char* cmd, Bool_t plusMaster = kFALSE); Send command to be executed on the PROOF master and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, TProof::ESlaves list, Bool_t plusMaster); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave server",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:53847,error,error,53847,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['error'],['error']
Availability,"har* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate excpt); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type ch); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); ostream&basic_ostream<char,char_traits<char> >::form(char* format); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:5650,error,error,5650,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,2,['error'],['error']
Availability,"har* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableMenuBarHiding(); virtual voidTGLViewer::EndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGLViewer::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tTGLViewerBase::FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*TGLViewerBase::FindLogicalInScenes(TObject* id); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLAutoRotator*TGLViewer::GetAutoRotator(); TGLCameraOverlay*TGLViewer::GetCameraOverlay() const; Bool_tTGLViewer::GetClipAutoUpdate() const; TGLClipSet*TGLViewer::GetClipSet() const; TGLOverlayElement*TGLViewer::GetCurrentOvlElm() const; static TGLColorSet&TGLViewer::GetDefaultColorSet(); Int_tTGLViewer::GetDev() const; TGLViewer::EDragActionTGLViewer::GetDragAction() const; Bool_tTGLViewer::GetDrawCameraCe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:5395,error,error,5395,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,4,['error'],['error']
Availability,"har* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidFlush(); voidForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tGetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCanvas.html:8384,error,error,8384,root/html534/TCanvas.html,https://root.cern,https://root.cern/root/html534/TCanvas.html,2,['error'],['error']
Availability,"har* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidFlush(); voidForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tGetAutoExec() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tGetCanvasID() const; virtual TCanvasImp*GetCanvasImp() const; TVirtualPad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:8179,error,error,8179,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,5,['error'],['error']
Availability,"har* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tTBrowserImp::ExecPlugin(const char*, const char*, const char*, Int_t, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTBrowserImp::ExecuteDefaultAction(TObject*); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; char*FormatFileInfo(const char* fname, Long64_t size, Long_t modtime); TStringFullPathName(TGListTreeItem* item); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileBrowser.html:5349,error,error,5349,root/html602/TGFileBrowser.html,https://root.cern,https://root.cern/root/html602/TGFileBrowser.html,4,['error'],['error']
Availability,"har* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* uri, const char* = 0); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:6065,error,error,6065,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,4,['error'],['error']
Availability,"har* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:6286,error,error,6286,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,8,['error'],['error']
Availability,"har* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _fcn->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { _fcn->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; _fcn->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return _fcn->SetLogFile(logf); }. Int_t getNPar() const; { return _fcn->NDim() ; }. ofstream* logfile() const; { return _fcn->GetLogFile(); }. Double_t& maxFCN(); { return _fcn->GetMaxFCN() ; }. » Last changed: Mon Dec 7 13:48:14 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:11982,error,errors,11982,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,1,['error'],['errors']
Availability,"har* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _fcn->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { _fcn->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; _fcn->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return _fcn->SetLogFile(logf); }. Int_t getNPar() const; { return _fcn->NDim() ; }. ofstream* logfile() const; { return _fcn->GetLogFile(); }. Double_t& maxFCN(); { return _fcn->GetMaxFCN() ; }. » Last changed: Mon Jul 4 15:23:20 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMinimizer.html:12037,error,errors,12037,root/html530/RooMinimizer.html,https://root.cern,https://root.cern/root/html530/RooMinimizer.html,1,['error'],['errors']
Availability,"har* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _fcn->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { _fcn->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; _fcn->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return _fcn->SetLogFile(logf); }. Int_t getNPar() const; { return _fcn->NDim() ; }. ofstream* logfile() const; { return _fcn->GetLogFile(); }. Double_t& maxFCN(); { return _fcn->GetMaxFCN() ; }. » Last changed: Thu Sep 23 20:00:09 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMinimizer.html:11968,error,errors,11968,root/html528/RooMinimizer.html,https://root.cern,https://root.cern/root/html528/RooMinimizer.html,1,['error'],['errors']
Availability,"har* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _fcn->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { _fcn->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; _fcn->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return _fcn->SetLogFile(logf); }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. Int_t getNPar() const; { return _fcn->NDim() ; }. ofstream* logfile() const; { return _fcn->GetLogFile(); }. Double_t& maxFCN(); { return _fcn->GetMaxFCN() ; }. » Last changed: Fri Dec 2 14:26:52 2011",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:12135,error,errors,12135,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,2,['error'],['errors']
Availability,"har* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { fitterFcn()->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { fitterFcn()->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; fitterFcn()->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return fitterFcn()->SetLogFile(logf); }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. Int_t evalCounter() const; { return fitterFcn()->evalCounter() ; }. void zeroEvalCount(); { fitterFcn()->zeroEvalCount() ; }. Int_t getNPar() const; { return fitterFcn()->N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:13022,error,errors,13022,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,6,['error'],['errors']
Availability,"har* treename = ""PROOF_PerfStats""); virtual~TProofPerfAnalysis(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventDist(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFileDist(Bool_t writedet = kFALSE); voidFileProcPlot(const char* fn, const char* out = 0); voidFileRatePlot(const char* fns = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetAverages(Double_t& evtmax, Double_t& mbmax, Double_t& evt, Double_t& mb) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEvtRateAvg() const; Double_tGetEvtRateAvgMax() const; virtual const char*TObject::GetIconName() const; Double_tGetMBRateAvg() const; Double_tGetMBRateAvgMax() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPerfAnalysis.html:1526,error,error,1526,root/html534/TProofPerfAnalysis.html,https://root.cern,https://root.cern/root/html534/TProofPerfAnalysis.html,2,['error'],['error']
Availability,"har* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDataSetManagerFile.html:13942,Avail,Available,13942,root/html532/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html,4,['Avail'],['Available']
Availability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 30171 2009-09-15 13:43:12Z ganis $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:15616,error,error,15616,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,2,['error'],['error']
Availability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 38580 2011-03-23 15:24:54Z ganis $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:15950,error,error,15950,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,2,['error'],['error']
Availability,"har* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofMgr.h 38580 2011-03-23 15:24:54Z ganis $ » Last generated: 2011-12-02 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXProofMgr.html:16022,error,error,16022,root/html532/TXProofMgr.html,https://root.cern,https://root.cern/root/html532/TXProofMgr.html,4,['error'],['error']
Availability,"haredProperties::asString(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual RooSharedProperties*clone(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidRooSharedProperties::decreaseRefCount(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidRooSharedProperties::increaseRefCount(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCategorySharedProperties.html:1970,error,error,1970,root/html534/RooCategorySharedProperties.html,https://root.cern,https://root.cern/root/html534/RooCategorySharedProperties.html,8,['error'],['error']
Availability,"hart; data.plotOn(frame4, DrawOption=""B"", DataError=None, XErrorSize=0, FillColor=""kGray""); ; # Function plotting styles; # -----------------------------------------------; ; # Change line color to red; gauss.plotOn(frame1, LineColor=""r""); ; # Change line style to dashed; gauss.plotOn(frame2, LineStyle=""--""); ; # Filled shapes in green color; gauss.plotOn(frame3, MoveToBack=True, DrawOption=""F"", FillColor=""kOrange""); ; #; gauss.plotOn(frame4, Range=(-8, 3), LineColor=""m""); ; c = ROOT.TCanvas(""rf107_plotstyles"", ""rf107_plotstyles"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.6); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.6); frame3.Draw(); c.cd(4); ROOT.gPad.SetLeftMargin(0.15); frame4.GetYaxis().SetTitleOffset(1.6); frame4.Draw(); ; c.SaveAs(""rf107_plotstyles.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(gauss) only plotting range [-8,3], curve is normalized to data in given range; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'plotRange' created with bounds [-8,3]; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf107_plotstyles.py. tutorialsroofitrf107_plotstyles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf107__plotstyles_8py.html:2903,error,error,2903,doc/master/rf107__plotstyles_8py.html,https://root.cern,https://root.cern/doc/master/rf107__plotstyles_8py.html,1,['error'],['error']
Availability,"has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:19004,error,error,19004,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,2,['error'],['error']
Availability,"has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:20649,error,error,20649,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,2,['error'],['error']
Availability,"has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the uniqu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:20564,error,error,20564,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,2,['error'],['error']
Availability,"has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 127 of file TThread.h. ◆ Delete() [2/2]. Int_t TThread::Delete ; (; TThread *& ; th). static . Static method to delete the specified thread. ; Returns -1 in case the thread was running and has been killed. Returns 0 in case the thread has been Delete and Cleaned up. The th pointer is not valid anymore in that case. ; Definition at line 416 of file TThread.cxx. ◆ DoError(). void TThread::DoError ; (; Int_t ; level, . const char * ; location, . const char * ; fmt, . va_list ; va . ); const. overrideprivatevirtual . Interface to ErrorHandler. ; User has to specify the class name as part of the location, just like for the global Info(), Warning() and Error() functions. ; Reimplemented from TObject.; Definition at line 1000 of file TThread.cxx. ◆ ErrorHandler(). void TThread::ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . va_list ; ap . ); const. private . Thread specific error handler function. ; It calls the user set error handler in the main thread. ; Definition at line 955 of file TThread.cxx. ◆ Exists(). Int_t TThread::Exists ; (; ). static . Static method to check if threads exist. ; Returns the number of running threads. ; Definition at line 439 of file TThread.cxx. ◆ Exit(). Int_t TThread::Exit ; (; void * ; ret = nullptr). static . Static method which terminates the execution of the calling thread. ; Definition at line 742 of file TThread.cxx. ◆ Function(). void * TThread::Function ; (; void * ; ptr). staticprivate . Static method which is called by the system thread function and which in turn calls the actual user function. ; Definition at line 797 of file TThread.cxx. ◆ GetId(). Long_t TThread::GetId ; (; ); const. inline . Definition at line 130 of file TThread.h. ◆ GetPriority(). EPriority TThread::GetPriority ; (; ); const. inline . Definition at line 128 of file TThread.h. ◆ GetState(). EState TThread::GetState ; (; ); const. inline . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:23133,error,error,23133,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:14679,error,error,14679,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,18,['error'],['error']
Availability,"has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general asymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\) minimization. The \(\mbox{MINOS}\) error for a given parameter is defined as the change in the value of that parameter which causes \({\displaystyle F'}\) to increase by the amount FCNBase::up(), where \({\displaystyle F'}\) is the minimum of \(\mbox{FCN}\) with respect to all other free parameters, and FCNBase::up() is the return value of the error definition specified by the user (default = 1.).; The algorithm for finding the positive and negative \(\mbox{MINOS}\) errors for parameter \(\mbox{n}\) consists of varying parameter \(\mbox{n}\), each time minimizing \(\mbox{FCN}\) with respect to all the other \(\mbox{npar - 1}\) variable parameters, to find numerically the two values of parameter \(\mbox{n}\) for which the minimum of \(\mbox{FCN}\) takes on the values \(\displaystyle F_{\mathrm{min}} + \mbox{up}\), where \(\displaystyle F_{\mathrm{min}}\) is the minimum of \(\mbox{FCN}\) with r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:19397,error,error,19397,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,4,['error'],['error']
Availability,"hat if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnSparse* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetBinContent(const Int_t* x, Double_t v); Set content of bin with coordinates ""coord"" to ""v"". void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError(const Int_t* x, Double_t e); Set error of bin with coordinates ""coord"" to ""e"", enable errors if needed. void SetBinError(Long64_t bin, Double_t e); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void Sumw2(); Enable calculation of errors. THnSparse* Rebin(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnSparse.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:23963,error,errors,23963,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,4,['error'],['errors']
Availability,"hat it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterization of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; underdeterminedness by reformulating the parameterization. MINUIT cannot; do this itself. Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if; ; the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables.; Minuit parameter errors in the presence of limits; This conce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:10871,error,errors,10871,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['errors']
Availability,"hat it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterization of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; underdeterminedness by reformulating the parameterization. MINUIT cannot; do this itself. Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables.; Minuit parameter errors in the presence of limits; This concerns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:10872,error,errors,10872,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,4,['error'],['errors']
Availability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  Number of entries per bin. ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile2D::Scale is called ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ; Double_t fZmax;  Upper limit in Z (if set) ;  ; Double_t fZmin;  Lower limit in Z (if set) ;  ;  Protected Attributes inherited from TH2; Double_t fScalefactor;  Scale factor. ;  ; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:60015,error,error,60015,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['error']
Availability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  Number of entries per bin. ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile3D::Scale is called ;  ; Double_t fTmax;  Upper limit in T (if set) ;  ; Double_t fTmin;  Lower limit in T (if set) ;  ; Double_t fTsumwt;  Total Sum of weight*T. ;  ; Double_t fTsumwt2;  Total Sum of weight*T*T. ;  ;  Protected Attributes inherited from TH3; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwxz;  Total Sum of weight*X*Z. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fTsumwyz;  Total Sum of weight*Y*Z. ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ;  Protected Attri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:59022,error,error,59022,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['error']
Availability,"hat point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  number of entries per bin ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile::Scale is called ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fYmax;  Upper limit in Y (if set) ;  ; Double_t fYmin;  Lower limit in Y (if set) ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:50448,error,error,50448,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"hat stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF Serv for new workers in Dynamic Startup mode and activates; them. Returns the number of new workers found, or <0 on errors. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:47153,error,errors,47153,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['errors']
Availability,"hat the PYTHONDIR entries should be replaced as appropriate by your choice at configuration time, or be left out if you had the configuration script pick up them up from a default location.; 19.1.5 Using PyROOT; Since it is an extension module, the usage of PyROOT probably comes naturally if you’re used to Python. In general, PyROOT attempts to allow working in both Python and ROOT style, and although it is succeeding, it isn’t perfect: there are edges. The following sections explain in some detail what you can expect, and what you need to watch out for.; 19.1.5.1 Access to ROOT Classes; Before a ROOT class can be used from Python, its dictionary needs to be loaded into the current process. Starting with ROOT version 4.00/06, this happens automatically for all classes that are declared to the auto-loading mechanism through so-called rootmap files. Effectively, this means that all classes in the ROOT distributions are directly available for import. For example:; from ROOT import TCanvas # available at startup; c = TCanvas(). from ROOT import TLorentzVector # triggers auto-load of libPhysics; l = TLorentzVector(); Although it is not recommended, a simple way of working with PyROOT is doing a global import:; from ROOT import *. c = TCanvas(); l = TLorentzVector(); Keeping the ROOT namespace (“import ROOT”), or only importing from ROOT those classes that you will actually use (see above), however, will always be cleaner and clearer:; import ROOT. c = ROOT.TCanvas(); l = ROOT.TLorentzVector(); Since it is foreseen that most people will use the simple approach anyway, the request to copy all from module ROOT will not actually result in copying all ROOT classes into the current namespace. Instead, classes will still be bound (and possibly loaded) on an as-needed basis. Note carefully how this is different from other Python (extension) modules, and what to expect if you use the normal inspection tools (such as e.g. ‘dir()’). This feature prevents the inspection tools from b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1050706,avail,available,1050706,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"hat the specified selection be converted to the specified target type. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2432 of file TVirtualX.cxx. ◆ CopyArea(). void TVirtualX::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). virtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1540 of file TVirtualX.cxx. ◆ CopyGC(). void TVirtualX::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). virtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1348 of file TVirtualX.cxx. ◆ CopyPixmap(). void TVirtualX::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). virtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 198 of file TVirtualX.cxx. ◆ CreateBitmap(). Pixmap_t TVirtualX::CreateBitmap ; (; Drawable_t ; id, . const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:58294,mask,mask,58294,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,2,['mask'],['mask']
Availability,"hat these functions cannot be stored; 2519 ROOT::Math::ChebyshevPol *pol = new ROOT::Math::ChebyshevPol(i);; 2520 Double_t min = -1;; 2521 Double_t max = 1;; 2522 f1 = new TF1(TString::Format(""chebyshev%d"", i), pol, min, max, i + 1, 1);; 2523 f1->SetParameters(1, 1, 1, 1, 1, 1, 1, 1, 1, 1);; 2524 }; 2525 ; 2526 }; 2527}; 2528////////////////////////////////////////////////////////////////////////////////; 2529/// IntegralOneDim or analytical integral; 2530 ; 2531Double_t TF1::Integral(Double_t a, Double_t b, Double_t epsrel); 2532{; 2533 Double_t error = 0;; 2534 if (GetNumber() > 0) {; 2535 Double_t result = 0.;; 2536 if (gDebug) {; 2537 Info(""computing analytical integral for function %s with number %d"", GetName(), GetNumber());; 2538 }; 2539 result = AnalyticalIntegral(this, a, b);; 2540 // if it is a formula that havent been implemented in analytical integral a NaN is return; 2541 if (!TMath::IsNaN(result)) return result;; 2542 if (gDebug); 2543 Warning(""analytical integral not available for %s - with number %d compute numerical integral"", GetName(), GetNumber());; 2544 }; 2545 return IntegralOneDim(a, b, epsrel, epsrel, error);; 2546}; 2547 ; 2548////////////////////////////////////////////////////////////////////////////////; 2549/// Return Integral of function between a and b using the given parameter values and; 2550/// relative and absolute tolerance.; 2551///; 2552/// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; 2553/// If ROOT contains the MathMore library the default integrator is set to be; 2554/// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; 2555/// ROOT::Math::GaussIntegrator is used; 2556/// See the reference documentation of these classes for more information about the; 2557/// integration algorithms; 2558/// To change integration algorithm just do :; 2559/// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; 2560/// Valid integrator names ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:93302,avail,available,93302,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,3,"['avail', 'error', 'toler']","['available', 'error', 'tolerance']"
Availability,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeometry.html:9634,error,error,9634,doc/master/classTGeometry.html,https://root.cern,https://root.cern/doc/master/classTGeometry.html,1,['error'],['error']
Availability,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11045,error,error,11045,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['error'],['error']
Availability,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:15946,error,error,15946,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,2,['error'],['error']
Availability,"havior of; the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; Fig. 2d) of residuals are not regular and we can identify the outlier or; bin with a big influence on . References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; Series No. 1, London.; [2] Gagunashvili, N., 2006. test for comparison; of weighted and unweighted histograms. Statistical Problems in Particle; Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; Gagunashvili,N., Comparison of weighted and unweighted histograms,; arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics.; Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; John Wiley & Sons Inc., New York. Double_t Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; The computation routine of the Chisquare test. For the method description,; see Chi2Test() function.; Returns p-value; parameters:; - h2-second histogram; - option:; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted). ""NORM"" = if one or both histograms is scaled. ""OF"" = overflows included; ""UF"" = underflows included; by default underflows and overflows are not included. - igood:; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:55479,robust,robustness,55479,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,8,['robust'],['robustness']
Availability,"havior of; the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; Fig. 2d) of residuals are not regular and we can identify the outlier or; bin with a big influence on . References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; Series No. 1, London.; [2] Gagunashvili, N., 2006. test for comparison; of weighted and unweighted histograms. Statistical Problems in Particle; Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; Gagunashvili,N., Comparison of weighted and unweighted histograms,; arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics.; Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; John Wiley & Sons Inc., New York. Double_t Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; The computation routine of the Chisquare test. For the method description,; see Chi2Test() function.; Returns p-value; parameters:; - h2-second histogram; - option:; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted). ""NORM"" = if one or both histograms is scaled. ""OF"" = overflows included; ""UF"" = underflows included; by default underflows and overlows are not included. - igood:; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:53987,robust,robustness,53987,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['robust'],['robustness']
Availability,"havior; 4318 ; 4319void TH3L::AddBinContent(Int_t bin); 4320{; 4321 if (fArray[bin] < LLONG_MAX) fArray[bin]++;; 4322}; 4323 ; 4324 ; 4325////////////////////////////////////////////////////////////////////////////////; 4326/// Increment bin content by w.; 4327/// \warning The value of w is cast to `Long64_t` before being added.; 4328/// Passing an out-of-range bin leads to undefined behavior; 4329 ; 4330void TH3L::AddBinContent(Int_t bin, Double_t w); 4331{; 4332 Long64_t newval = fArray[bin] + Long64_t(w);; 4333 if (newval > -LLONG_MAX && newval < LLONG_MAX) {fArray[bin] = Int_t(newval); return;}; 4334 if (newval < -LLONG_MAX) fArray[bin] = -LLONG_MAX;; 4335 if (newval > LLONG_MAX) fArray[bin] = LLONG_MAX;; 4336}; 4337 ; 4338 ; 4339////////////////////////////////////////////////////////////////////////////////; 4340/// Copy this 3-D histogram structure to newth3.; 4341 ; 4342void TH3L::Copy(TObject &newth3) const; 4343{; 4344 TH3::Copy(newth3);; 4345}; 4346 ; 4347 ; 4348////////////////////////////////////////////////////////////////////////////////; 4349/// Reset this histogram: contents, errors, etc.; 4350 ; 4351void TH3L::Reset(Option_t *option); 4352{; 4353 TH3::Reset(option);; 4354 TArrayL64::Reset();; 4355 // should also reset statistics once statistics are implemented for TH3; 4356}; 4357 ; 4358 ; 4359////////////////////////////////////////////////////////////////////////////////; 4360/// Set total number of bins including under/overflow; 4361/// Reallocate bin contents array; 4362 ; 4363void TH3L::SetBinsLength(Int_t n); 4364{; 4365 if (n < 0) n = (fXaxis.GetNbins()+2)*(fYaxis.GetNbins()+2)*(fZaxis.GetNbins()+2);; 4366 fNcells = n;; 4367 TArrayL64::Set(n);; 4368}; 4369 ; 4370 ; 4371////////////////////////////////////////////////////////////////////////////////; 4372/// Operator =; 4373 ; 4374TH3L& TH3L::operator=(const TH3L &h3l); 4375{; 4376 if (this != &h3l); 4377 h3l.TH3L::Copy(*this);; 4378 return *this;; 4379}; 4380 ; 4381 ; 4382///////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:164049,error,errors,164049,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['errors']
Availability,"hd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:4815,error,errors,4815,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['errors']
Availability,"he 1974 CERN School of Computing, Norway, 11-24 August, 1974. void Smooth(Int_t ntimes = 1, Option_t* option = """"); Smooth bin contents of this histogram.; if option contains ""R"" smoothing is applied only to the bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& b); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""ICES"" is specified, resets only Integral, Contents , Errors and Statistics; This option is used; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH1.html:101533,error,errors,101533,root/html530/TH1.html,https://root.cern,https://root.cern/root/html530/TH1.html,6,['error'],['errors']
Availability,"he 1974 CERN School of Computing, Norway, 11-24 August, 1974. void Smooth(Int_t ntimes = 1, Option_t* option = """"); Smooth bin contents of this histogram.; if option contains ""R"" smoothing is applied only to the bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& b); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:99865,error,errors,99865,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['error'],['errors']
Availability,"he Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = this + c1*factor*h1 Use the other TH1::Add function if you do not want this feature; IMPORTANT NOTE3: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:76703,error,errors,76703,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"he BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:131359,error,error,131359,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['error']
Availability,"he CINT interpreted thread has finished executing the line. Returns the result of the command, cast to a Longptr_t. ; Definition at line 2370 of file TROOT.cxx. ◆ ProcessLineFast(). Longptr_t TROOT::ProcessLineFast ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command directly via CINT interpreter. ; Only executable statements are allowed (no variable declarations), In all other cases use TROOT::ProcessLine(). The possible error codes are defined by TInterpreter::EErrorCode. ; Definition at line 2407 of file TROOT.cxx. ◆ ProcessLineSync(). Longptr_t TROOT::ProcessLineSync ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command via TApplication::ProcessLine(). ; On Win32 the line will be processed synchronously (i.e. it will only return when the CINT interpreter thread has finished executing the line). On non-Win32 platforms there is no difference between ProcessLine() and ProcessLineSync(). The possible error codes are defined by TInterpreter::EErrorCode. Returns the result of the command, cast to a Longptr_t. ; Definition at line 2390 of file TROOT.cxx. ◆ ReadGitInfo(). void TROOT::ReadGitInfo ; (; ). protected . Read Git commit SHA1 and branch name. ; Read Git commit information and branch name from the etc/gitinfo.txt file. ; Definition at line 2429 of file TROOT.cxx. ◆ ReadingObject(). Bool_t TROOT::ReadingObject ; (; ); const. Deprecated (will be removed in next release). ; Definition at line 2460 of file TROOT.cxx. ◆ RecursiveRemove(). void TROOT::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove this object from the list of Cleanups. ; Typically RecursiveRemove is implemented by classes that can contain mulitple references to a same object or shared ownership of the object with others. ; Reimplemented from TDirectory.; Definition at line 2498 of file TROOT.cxx. ◆ RefreshBrowsers(). void TROOT::RefreshBrowsers ; (; ). Refresh all browsers. ; Call this method when some com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:71162,error,error,71162,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"he FitResult class; 197 void SetChi2AndNdf(double chi2, unsigned int npoints);; 198 ; 199 /// query if parameter i has the Minos error; 200 bool HasMinosError(unsigned int i) const;; 201 ; 202 /// lower Minos error. If Minos has not run for parameter i return the parabolic error; 203 double LowerError(unsigned int i) const;; 204 ; 205 /// upper Minos error. If Minos has not run for parameter i return the parabolic error; 206 double UpperError(unsigned int i) const;; 207 ; 208 /// parameter global correlation coefficient; 209 double GlobalCC(unsigned int i) const {; 210 return (i < fGlobalCC.size() ) ? fGlobalCC[i] : -1;; 211 }; 212 ; 213 ; 214 /// retrieve covariance matrix element; 215 double CovMatrix (unsigned int i, unsigned int j) const {; 216 if ( i >= fErrors.size() || j >= fErrors.size() ) return 0;; 217 if (fCovMatrix.empty()) return 0; // no matrix is available in case of non-valid fits; 218 if ( j < i ); 219 return fCovMatrix[j + i* (i+1) / 2];; 220 else; 221 return fCovMatrix[i + j* (j+1) / 2];; 222 }; 223 ; 224 /// retrieve correlation elements; 225 double Correlation(unsigned int i, unsigned int j ) const {; 226 if ( i >= fErrors.size() || j >= fErrors.size() ) return 0;; 227 if (fCovMatrix.empty()) return 0; // no matrix is available in case of non-valid fits; 228 double tmp = CovMatrix(i,i)*CovMatrix(j,j);; 229 return ( tmp > 0) ? CovMatrix(i,j)/ std::sqrt(tmp) : 0;; 230 }; 231 ; 232 /// fill covariance matrix elements using a generic matrix class implementing operator(i,j); 233 /// the matrix must be previously allocates with right size (npar * npar); 234 template<class Matrix>; 235 void GetCovarianceMatrix(Matrix & mat) const {; 236 unsigned int npar = fErrors.size();; 237 if (fCovMatrix.size() != npar*(npar+1)/2 ) return; // do nothing; 238 for (unsigned int i = 0; i< npar; ++i) {; 239 for (unsigned int j = 0; j<=i; ++j) {; 240 mat(i,j) = fCovMatrix[j + i*(i+1)/2 ];; 241 if (i != j) mat(j,i) = mat(i,j);; 242 }; 243 }; 244 }; 245 ; 246 /// fill a co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:8206,avail,available,8206,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['avail'],['available']
Availability,"he MCMCCalculator for model with multiple parameters of interest.; The interface allows one to construct the class by passing the data set, probability density function for the model, the prior functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by scanning the posterior function in the given number of points. The first method is in general faster but it requires an integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be less robust.; The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using the GetPosteriorPlot method.; The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of this method).; Calculator estimating a credible interval using the Bayesian procedure. The calculator computes given the model the posterior distribution and estimates the credible interval from the given function. ; Definition at line 37 of file BayesianCalculator.h. Public Member Functions;  BayesianCalculator ();  constructor ;  ;  BayesianCalculator (RooAbsData &data, ModelConfig &model);  Constructor from a d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:2270,robust,robust,2270,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['robust'],['robust']
Availability,"he ROOT browser will display starting from the geometry folder : the list of transformations and media, the top volume and the top logical node. These last two can be fully expanded, any intermediate volume/node in the browser being subject of direct access context menu operations (right mouse button click). All user utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the context menu. Drawing the geometry; Any logical volume can be drawn via TGeoVolume::Draw() member function. This can be directly accessed from the context menu of the volume object directly from the browser. There are several drawing options that can be set with TGeoManager::SetVisOption(Int_t opt) method :; opt=0; only the content of the volume is drawn, N levels down (default N=3). This is the default behavior. The number of levels to be drawn can be changed via TGeoManager::SetVisLevel(Int_t level) method. opt=1; the final leaves (e.g. daughters with no containment) of the branch starting from volume are drawn down to the current number of levels. WARNING : This mode is memory consuming depending of the size of geometry, so drawing from top level within this mode should be handled with care for expensive geometries. In future there will be a limitation on the maximum number of nodes to be visualized. opt=2; only the clicked volume is visualized. This is automatically set by TGeoVolume::DrawOnly() method; opt=3 - only a given path is visualized. This is automatically set by; TGeoVolume::DrawPath(const char *path) method; The current view can be exploded in cartesian, cylindrical or spherical coordinates : TGeoManager::SetExplodedView(Int_t opt). Options may be :; 0 - default (no bombing); 1 - cartesian coordinates. The bomb factor on each axis can be set with TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R are considered . 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:16613,down,down,16613,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['down'],['down']
Availability,"he URL; 4068/// specifies a local file. If that is the case the file will be opened; 4069/// via a normal TFile. To force the opening of a local file via a; 4070/// TNetFile use either TNetFile directly or specify as host ""localhost"".; 4071/// The netopt argument is only used by TNetFile. For the meaning of the; 4072/// options and other arguments see the constructors of the individual; 4073/// file classes. In case of error, it returns a nullptr.; 4074///; 4075/// For TFile implementations supporting asynchronous file open, see; 4076/// TFile::AsyncOpen(...), it is possible to request a timeout with the; 4077/// option <b>`TIMEOUT=<secs>`</b>: the timeout must be specified in seconds and; 4078/// it will be internally checked with granularity of one millisec.; 4079/// For remote files there is the option: <b>CACHEREAD</b> opens an existing; 4080/// file for reading through the file cache. The file will be downloaded to; 4081/// the cache and opened from there. If the download fails, it will be opened remotely.; 4082/// The file will be downloaded to the directory specified by SetCacheFileDir().; 4083///; 4084/// *The caller is responsible for deleting the pointer.*; 4085/// In READ mode, a nullptr is returned if the file does not exist or cannot be opened.; 4086/// In CREATE mode, a nullptr is returned if the file already exists or cannot be created.; 4087/// In RECREATE mode, a nullptr is returned if the file can not be created.; 4088/// In UPDATE mode, a nullptr is returned if the file cannot be created or opened.; 4089 ; 4090TFile *TFile::Open(const char *url, Option_t *options, const char *ftitle,; 4091 Int_t compress, Int_t netopt); 4092{; 4093 TPluginHandler *h;; 4094 TFile *f = nullptr;; 4095 EFileType type = kFile;; 4096 ; 4097 // Check input; 4098 if (!url || strlen(url) <= 0) {; 4099 ::Error(""TFile::Open"", ""no url specified"");; 4100 return f;; 4101 }; 4102 ; 4103 TString expandedUrl(url);; 4104 gSystem->ExpandPathName(expandedUrl);; 4105 ; 4106#ifdef R__UN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:149157,down,download,149157,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['down'],['download']
Availability,"he X coordinates taken from vx and Y coord from vy; 183/// and the errors from vectors vexl/h and veyl/h.; 184/// The number of points in the graph is the minimum of number of points; 185/// in vx and vy.; 186 ; 187TGraphAsymmErrors::TGraphAsymmErrors(const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh); 188{; 189 fNpoints = TMath::Min(vx.GetNrows(), vy.GetNrows());; 190 if (!TGraph::CtorAllocate()) return;; 191 if (!CtorAllocate()) return;; 192 Int_t ivxlow = vx.GetLwb();; 193 Int_t ivylow = vy.GetLwb();; 194 Int_t ivexllow = vexl.GetLwb();; 195 Int_t ivexhlow = vexh.GetLwb();; 196 Int_t iveyllow = veyl.GetLwb();; 197 Int_t iveyhlow = veyh.GetLwb();; 198 for (Int_t i=0;i<fNpoints;i++) {; 199 fX[i] = vx(i+ivxlow);; 200 fY[i] = vy(i+ivylow);; 201 fEXlow[i] = vexl(i+ivexllow);; 202 fEYlow[i] = veyl(i+iveyllow);; 203 fEXhigh[i] = vexh(i+ivexhlow);; 204 fEYhigh[i] = veyh(i+iveyhlow);; 205 }; 206}; 207 ; 208 ; 209////////////////////////////////////////////////////////////////////////////////; 210/// Constructor with six vectors of doubles in input; 211/// A grapherrors is built with the X coordinates taken from vx and Y coord from vy; 212/// and the errors from vectors vexl/h and veyl/h.; 213/// The number of points in the graph is the minimum of number of points; 214/// in vx and vy.; 215 ; 216TGraphAsymmErrors::TGraphAsymmErrors(const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh); 217{; 218 fNpoints = TMath::Min(vx.GetNrows(), vy.GetNrows());; 219 if (!TGraph::CtorAllocate()) return;; 220 if (!CtorAllocate()) return;; 221 Int_t ivxlow = vx.GetLwb();; 222 Int_t ivylow = vy.GetLwb();; 223 Int_t ivexllow = vexl.GetLwb();; 224 Int_t ivexhlow = vexh.GetLwb();; 225 Int_t iveyllow = veyl.GetLwb();; 226 Int_t iveyhlow = veyh.GetLwb();; 227 for (Int_t i=0;i<fNpoints;i++) {; 228 fX[i] = vx(i+ivxlow);; 229 fY[i] = vy(i+ivylow);; 23",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:6997,error,errors,6997,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"he address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:142841,error,errors,142841,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"he array.Definition TObjArray.cxx:321; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideAdd object in the slot after object after.Definition TObjArray.cxx:215; TObjArray::MakeIteratorTIterator * MakeIterator(Bool_t dir=kIterForward) const overrideReturns an array iterator.Definition TObjArray.cxx:649; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::BoundsOkBool_t BoundsOk(const char *where, Int_t at) constDefinition TObjArray.h:157; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::OutOfBoundsErrorBool_t OutOfBoundsError(const char *where, Int_t i) constGenerate an out-of-bounds error. Always returns false.Definition TObjArray.cxx:658; TObjArray::BinarySearchvirtual Int_t BinarySearch(TObject *obj, Int_t upto=kMaxInt)Find object using a binary search.Definition TObjArray.cxx:841; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::AddLastvoid AddLast(TObject *obj) overrideAdd object in the next empty slot in the array.Definition TObjArray.cxx:178; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::FirstTObject * First() const overrideReturn the object in the first slot.Definition TObjArray.cxx:496; TObjArray::IsEmptyBool_t IsEmpty() const overrideDefinition TObjArray.h:65; TObjArray::fLowerBoundInt_t fLowerBoundArray contents.Definition TObjArray.h:38; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::GetAbsLastInt_t GetAbsLast() constReturn absolute in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8h_source.html:11694,error,error,11694,doc/master/TObjArray_8h_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8h_source.html,1,['error'],['error']
Availability,"he arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:32901,error,error,32901,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,4,['error'],['error']
Availability,"he arrays obtained; with GetV1, GetV2, GetV3, GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000. You can use the option ""goff"" to turn off the graphics output; of TTree::Draw in the above example. Automatic interface to TTree::Draw via the TTreeViewer. A complete graphical interface to this function is implemented; in the class TTreeViewer.; To start the TTreeViewer, three possibilities:; - select TTree context menu item ""StartViewer""; - type the command ""TTreeViewer TV(treeName)""; - execute statement ""tree->StartViewer();"". Int_t Fit(const char* formula, const char* varexp, const char* selection, Option_t* option, Option_t* goption, Long64_t nentries, Long64_t firstentry); Fit a projected item(s) from a Tree.; Returns -1 in case of error or number of selected events in case of success. The formula is a TF1 expression. See TTree::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; tree.Fit(""pol4"",""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. Return status. The function returns the status of the histogram fit (see TH1::Fit); If no entries were selected, the function returns -1;; (i.e. fitResult is null if the fit is OK). Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:38668,error,error,38668,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['error'],['error']
Availability,"he background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms with the mva distributions for sig/bkg ; Definition at line 393 of file OptimizeConfigParameters.cxx. ◆ GetROCIntegral(). Double_t TMVA::OptimizeConfigParameters::GetROCIntegral ; (; ). private . calculate the area (integral) under the ROC curve as a overall quality measure of the classification ; making pdfs out of the MVA-output distributions doesn't work reliably for cases where the MVA-output isn't a smooth distribution. this happens ""frequently"" in BDTs for example when the number of trees is small resulting in only some discrete possible MVA output values. (I still leave the code here, but use this with care!!! The default however is to use the distributions!!! ; Definition at line 458 of file OptimizeConfigParameters.cxx. ◆ GetScanIndices(). std::vector< int > TMVA::OptimizeConfigParameters::GetScanIndices ; (; int ; val, . std::vector< int > ; base . ). private . helper function to scan through the all the combinations in the parameter space ; Definition at line 149 of file OptimizeConfigParameters.cxx. ◆ GetSeparation(). Double_t TMVA::OptimizeConfigParameters::GetSeparation ; (; ). private . return the separation between the signal and background MVA ouput distribution ; Definition at line 434 of file OptimizeConfigParameters.cxx. ◆ GetSigEffAtBkgEff(). Double_t TMVA::OptimizeConfi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:7642,reliab,reliably,7642,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"he bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& b); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""ICES"" is specified, resets only Integral, Contents , Errors and Statistics; This option is used; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH1.html:101828,error,errors,101828,root/html530/TH1.html,https://root.cern,https://root.cern/root/html530/TH1.html,3,['error'],['errors']
Availability,"he bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& b); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X, Y or Z axis. Note that the mean value/RMS is computed using the bins in the currently; defined range (see ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:100160,error,errors,100160,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,1,['error'],['errors']
Availability,"he bottom left corner of the placed box ; [in]optionl=left, r=right, t=top, b=bottom, w=within margins. Order determines priority for placement. Default is ""lb"" (prioritises horizontal over vertical) . Implements TVirtualPad.; Definition at line 3203 of file TPad.cxx. ◆ Pop(). void TPad::Pop ; (; ). overridevirtual . Pop pad to the top of the stack. ; Implements TVirtualPad.; Definition at line 4776 of file TPad.cxx. ◆ Print() [1/2]. void TPad::Print ; (; const char * ; filename, . Option_t * ; option . ). overridevirtual . Save Canvas contents in a file in one of various formats. ; option can be:. ps: a Postscript file is produced (default). See special cases.; Portrait: Postscript file is produced (Portrait); Landscape: Postscript file is produced (Landscape). eps: an Encapsulated Postscript file is produced; Preview: an Encapsulated Postscript file with preview is produced. pdf: a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; Title:: The character string after Title: becomes a table of content entry (for PDF files).; EmbedFonts: a PDF file with embedded fonts is generated. svg: a SVG file is produced; tex: a TeX file is produced; Standalone: a standalone TeX file is produced. gif: a GIF file is produced; gif+NN: an animated GIF file is produced, where NN is delay in 10ms units NOTE: See other variants for looping animation in TASImage::WriteImage; xpm: a XPM file is produced; png: a PNG file is produced; jpg: a JPEG file is produced. NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; tiff: a TIFF file is produced; cxx: a C++ macro file is produced; xml: a XML file; json: a JSON file; root: a ROOT binary file; filename = 0 - filename is defined by GetName and its extension is defined with the option. When Postscript output is selected (ps, eps), the canvas is saved to filename.ps or filename.eps. The aspect ratio of the canvas is preserved on the Postscript file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:101547,avail,available,101547,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['avail'],['available']
Availability,"he buffer. fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry; fBuffer[3] = y of first entry . Definition at line 396 of file TProfile.cxx. ◆ BufferFill() [2/2]. Int_t TProfile::BufferFill ; (; Double_t ; x, . Double_t ; w . ). inlineoverrideprotectedvirtual . accumulate arguments in buffer. ; When buffer is full, empty the buffer. fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry . Reimplemented from TH1.; Definition at line 50 of file TProfile.h. ◆ BuildOptions(). void TProfile::BuildOptions ; (; Double_t ; ymin, . Double_t ; ymax, . Option_t * ; option . ). Set Profile histogram structure and options. ; Parameters. [in]yminminimum value allowed for y ; [in]ymaxmaximum value allowed for y if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf) ; [in]optionthis is the option for the computation of the y error of the profile ( TProfile::GetBinError ) possible values for the options are:; ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N) where S(Y) is the standard deviation (RMS) of the Y data in the bin and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ) (i.e the errors are the standard error on the bin content of the profile); 's' Errors are the standard deviation of Y, S(Y); 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default) The only difference is only when the standard deviation in Y is zero. In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is 1./SQRT(12*N). This approximation assumes that the Y values are integer (e.g. ADC counts) and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12); 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin j W is obtained as from TProfile::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:64332,error,error,64332,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,3,['error'],"['error', 'errors']"
Availability,"he build compiler version identifier string. ; Definition at line 3899 of file TSystem.cxx. ◆ GetBuildDir(). const char * TSystem::GetBuildDir ; (; ); const. virtual . Return the path of the build directory. ; Definition at line 3915 of file TSystem.cxx. ◆ GetBuildNode(). const char * TSystem::GetBuildNode ; (; ); const. virtual . Return the build node name. ; Definition at line 3907 of file TSystem.cxx. ◆ GetCpuInfo(). int TSystem::GetCpuInfo ; (; CpuInfo_t * ; info, . Int_t ; sampleTime = 1000 . ); const. virtual . Returns cpu load average and load info into the CpuInfo_t structure. ; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the interval over which the CPU load will be measured, in ms (default 1000). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2469 of file TSystem.cxx. ◆ GetCryptoRandom(). Int_t TSystem::GetCryptoRandom ; (; void * ; buf, . Int_t ; len . ). virtual . Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 266 of file TSystem.cxx. ◆ GetDirEntry(). const char * TSystem::GetDirEntry ; (; void * ; dirp). virtual . Get a directory entry. Returns 0 if no more entries. ; Reimplemented in TDavixSystem, TUnixSystem, TWinNTSystem, TDCacheSystem, TWebSystem, TNetXNGSystem, and TNetSystem.; Definition at line 853 of file TSystem.cxx. ◆ GetDirName(). TString TSystem::GetDirName ; (; const char * ; pathname). virtual . Return the directory name in pathname. ; DirName of /user/root is /user. DirName of /user/root/ is also /user. In case no dirname is specified ""."" is returned. ; Reimplemented in TWinNTSystem.; Definition at line 1032 of file TSystem.cxx. ◆ GetDirPtr(). virtual void * TSystem::GetDirPtr ; (; ); const. inlinevirtual . Reimplemented in TDCacheSystem, TNetSystem, and TWebSystem.; Definition at line 416 of file TSystem.h. ◆ GetDynamicPath(). const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:55603,error,error,55603,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"he caller. ; Definition at line 5692 of file TProofServ.cxx. ◆ HandleArchive(). void TProofServ::HandleArchive ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle archive request. ; Definition at line 3597 of file TProofServ.cxx. ◆ HandleCache(). Int_t TProofServ::HandleCache ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle here all cache and package requests. ; Definition at line 5280 of file TProofServ.cxx. ◆ HandleCheckFile(). void TProofServ::HandleCheckFile ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle file checking request. ; Definition at line 5129 of file TProofServ.cxx. ◆ HandleDataSets(). Int_t TProofServ::HandleDataSets ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle here requests about datasets. ; Definition at line 6087 of file TProofServ.cxx. ◆ HandleException(). void TProofServ::HandleException ; (; Int_t ; sig). overridevirtual . Exception handler: we do not try to recover here, just exit. ; Reimplemented from TApplication.; Definition at line 6070 of file TProofServ.cxx. ◆ HandleFork(). void TProofServ::HandleFork ; (; TMessage * ; mess). protectedvirtual . Cloning itself via fork. Not implemented. ; Reimplemented in TProofServLite.; Definition at line 6654 of file TProofServ.cxx. ◆ HandleLibIncPath(). Int_t TProofServ::HandleLibIncPath ; (; TMessage * ; mess). protectedvirtual . Handle lib, inc search paths modification request. ; Definition at line 4999 of file TProofServ.cxx. ◆ HandleProcess(). void TProofServ::HandleProcess ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle processing request. ; Definition at line 3756 of file TProofServ.cxx. ◆ HandleQueryList(). void TProofServ::HandleQueryList ; (; TMessage * ; mess). protectedvirtual . Handle request for list of queries. ; Definition at line 4795 of file TProofServ.cxx. ◆ HandleRemove(). void TProofServ::HandleRemove ; (; TMessage * ; mess, . TString * ; sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:44703,recover,recover,44703,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['recover'],['recover']
Availability,"he cells with negative contents are drawn with an X on top of the boxes. With option BOX1 a button is drawn for each cell with surface proportional to contents’ absolute value. A sunken button is drawn for negative values, a raised one for positive values.; 3.8.2.4 The ERRor Bars Options. ""E"" Default. Draw only error bars, without markers; ""E0"" Draw also bins with 0 contents (turn off the symbols clipping).; ""E1"" Draw small lines at the end of error bars; ""E2"" Draw error rectangles; ""E3"" Draw a fill area through the end points of vertical error bars; ""E4"" Draw a smoothed filled area through the end points of error bars. The “E1” bars’ option. Note that for all options, the line and fill attributes of the histogram are used for the errors or errors contours. Use gStyle->SetErrorX(dx) to control the size of the error along x. The parameter dx is a percentage of bin width for errors along X. Set dx=0 to suppress the error along X. Use gStyle->SetEndErrorSize(np) to control the size of the lines at the end of the error bars (when option 1 is used). By default np=1 (np represents the number of pixels).; 3.8.2.5 The Color Option; For each cell (i,j) a box is drawn with a color proportional to the cell content. The color table used is defined in the current style (gStyle ). The color palette in TStyle can be modified with TStyle::SetPalette . Different draw options. 3.8.2.6 The TEXT Option; For each cell (i,j) the cell content is printed. The text attributes are:. Text font = current font set by TStyle; Text size= 0.02 * pad-height * marker-size; Text color= marker color. The TEXT option. 3.8.2.7 The CONTour Options; The following contour options are supported:. ""CONT"": Draw a contour plot (same as CONT0); ""CONT0"": Draw a contour plot using surface colors to distinguish contours; ""CONT1"": Draw a contour plot using line styles to distinguish contours; ""CONT2"": Draw a contour plot using the same line style for all contours; ""CONT3"": Draw a contour plot using fill area colors;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:91897,error,error,91897,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"he class, three steps have to be taken:; Create the class.; Set a function within an interval to look for the minimum.; Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. ; Definition at line 62 of file BrentMinimizer1D.h. Public Member Functions;  BrentMinimizer1D ();  Default Constructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol=1.E-8, double relTol=1.E-10) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ;  ; const char * Name () const override;  Return name of minimization algorithm (""BrentMinimizer1D"") ;  ; void SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup);  Sets function to be minimized. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; int Status () const override;  Returns status of last estimate. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:2319,toler,tolerance,2319,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,1,['toler'],['tolerance']
Availability,"he command "".x macro.C"" in the root prompt; command line. Compiling Macros. The currently loaded macro can be compiled with ACLiC if you select; Tools menu / Compile Macro; by clicking on the corresponding; toolbar button, or by using Ctrl+F7 accelerator keys.; This is identical to the command "".L macro.C++"" in the root prompt; command line. Interrupting a Running Macro. You can interrupt a running macro by selecting the Tools menu /; Interrupt; by clicking on the corresponding toolbar button, or by; using Shift+F5 accelerator keys. Interface to CINT Interpreter. Any command entered in the Command combo box will be passed to; the CINT interpreter. This combo box will keep the commands history; and will allow you to re-execute the same commands during an editor; session. Keyboard Bindings. The following table lists the keyboard shortcuts and accelerator; keys. Key: Action:. Up Move cursor up.; Shift+Up Move cursor up and extend selection.; Down Move cursor down.; Shift+Down Move cursor down and extend selection.; Left Move cursor left.; Shift+Left Move cursor left and extend selection.; Right Move cursor right.; Shift+Right Move cursor right and extend selection.; Home Move cursor to begin of line.; Shift+Home Move cursor to begin of line and extend selection.; Ctrl+Home Move cursor to top of page.; End Move cursor to end of line.; Shift+End Move cursor to end of line and extend selection.; Ctrl+End Move cursor to end of page.; PgUp Move cursor up one page.; Shift+PgUp Move cursor up one page and extend selection.; PgDn Move cursor down one page.; Shift+PgDn Move cursor down one page and extend selection.; Delete Delete character after cursor, or text selection.; BackSpace Delete character before cursor, or text selection.; Ctrl+B Move cursor left.; Ctrl+D Delete character after cursor, or text selection.; Ctrl+E Move cursor to end of line.; Ctrl+H Delete character before cursor, or text selection.; Ctrl+K Delete characters from current position to the; end of line.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEditor.html:3639,down,down,3639,root/html528/TGTextEditor.html,https://root.cern,https://root.cern/root/html528/TGTextEditor.html,14,"['Down', 'down']","['Down', 'down']"
Availability,he configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13201,error,error,13201,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13313,error,error,13313,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14538,error,error,14538,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14650,error,error,14650,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18432,error,error,18432,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21992,error,error,21992,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:107216,error,error,107216,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,he configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22665,error,error,22665,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"he contained type T, the number of rows and the number of columns. Its data member is an array T[nrows*ncols] containing the matrix data. The data are stored in the row-major C convention. For example, for a matrix M, of size 3x3, the data {a0,a1,...,a8} are stored in the following order:. \[; M =; \left(\begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8; \end{array}\right); \]. ROOT::Math::MatRepSym for a symmetric matrix of size NxN. This class is a template on the contained type and on the symmetric matrix size N. It has as data member an array of type T of size N*(N+1)/2, containing the lower diagonal block of the matrix. The order follows the lower diagonal block, still in a row-major convention. For example for a symmetric 3x3 matrix the order of the 6 independent elements {a0,a1,...,a5} is:. \[; M =; \left(\begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5; \end{array}\right); \]; 13.13.2.1 Creating a Matrix; The following constructors are available to create a matrix:. Default constructor for a zero matrix (all elements equal to zero).; Constructor of an identity matrix.; Copy constructor (and assignment) for a matrix with the same representation, or from a different one when possible, for example from a symmetric to a general matrix.; Constructor (and assignment) from a matrix expression, like D=A*B+C. Due to the expression template technique, no temporary objects are created in this operation. In the case of an operation like A=A*B+C, a temporary object is needed and it is created automatically to store the intermediary result in order to preserve the validity of this operation.; Constructor from a generic STL-like iterator copying the data referred by the iterator, following its order. It is both possible to specify the begin and end of the iterator or the begin and the size. In case of a symmetric matrix, it is required only the triangular block and the user can specify whether giving a block representing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:754784,avail,available,754784,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"he contents of the argset in ASCII form from given stream. ; The stream is read to end-of-file and each line is assumed to be of the form <argName> = <argValue>; Lines starting with argNames not matching any element in the list will be ignored with a warning message. In addition limited C++ style preprocessing and flow control is provided. The following constructions are recognized: include ""include.file""; Include given file, recursive inclusion OK if (<boolean_expression>); <name> = <value>; ....; else if (<boolean_expression>); ....; else; ....; endif; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; All expressions are evaluated by RooFormula, and may involve any of the sets variables. echo <Message>; Print console message while reading from stream abort; Force termination of read sequence with error status; The value of each argument is read by the arguments readFromStream function. ; Definition at line 336 of file RooArgSet.cxx. ◆ selectByName(). RooArgSet * RooArgSet::selectByName ; (; const char * ; nameList, . bool ; verbose = false . ); const. inline . Use RooAbsCollection::selectByName(), but return as RooArgSet. ; Definition at line 144 of file RooArgSet.h. ◆ selectCommon() [1/3]. RooAbsCollection * RooAbsCollection::selectCommon ; (; const RooAbsCollection & ; refColl); const. Create a subset of the current collection, consisting only of those elements that are contained as well in the given reference collection. ; The caller is responsible for deleting the returned collection ; Definition at line 230 of file RooAbsCollection.cxx. ◆ selectCommon() [2/3]. RooArgSet * RooArgSet::selectCommon ; (; const RooAbsCollection & ; refColl); const. inline . Use RooAbsCollection::selecCommon(), but return as RooArgSet. ; Definition at line 149 of file RooArgSet.h. ◆ s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:41464,echo,echo,41464,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,2,"['echo', 'error']","['echo', 'error']"
Availability,"he covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general assymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\) minimization. The \(\mbox{MINOS}\) error for a given parameter is defined as the change in the value of that parameter which causes \({\dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:22677,error,error,22677,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"he covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general asymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\) minimization. The \(\mbox{MINOS}\) error for a given parameter is defined as the change in the value of that parameter which causes \({\disp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:18655,error,error,18655,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"he default handler, else restore previous behaviour. void ResetSignals(); Reset signals handlers to previous behaviour. void IgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); If ignore is true ignore the specified signal, else restore previous; behaviour. void IgnoreInterrupt(Bool_t ignore = kTRUE); If ignore is true ignore the interrupt signal, else restore previous; behaviour. Typically call ignore interrupt before writing to disk. void AddStdExceptionHandler(TStdExceptionHandler* eh); Add an exception handler to list of system exception handlers. Only adds; the handler if it is not already in the list of exception handlers. TStdExceptionHandler * RemoveStdExceptionHandler(TStdExceptionHandler* eh); Remove an exception handler from list of exception handlers. Returns; the handler or 0 if the handler was not in the list of exception handlers. Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* command, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. TString GetFromPipe(const char* command); Execute command and return output in TString. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. TSystem * FindHelper(const char* path, void* dirptr = 0); Create helper TSystem to handle file and directory operations that; might be special for remote file access, like via rfiod or rootd. Bool_t ConsistentWith(const char* path, void* dirptr = 0); Check consistency of this helper with the one required; by 'path' or 'dirptr'. int MakeDirectory(const char* name); Make a directory. Returns 0 in case of success and; -1 if the directory could not be created (either alread",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:22924,mask,mask,22924,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,4,['mask'],['mask']
Availability,"he desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:13696,error,error,13696,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['error']
Availability,"he diagonal elements; // of m : m(i,i) = v3[i] for i=0,1,2; m.SetDiagonal(v3); The const methods retrieving contents (getting slices of a matrix) are:; a = {1,2,3,4,5,6,7,8,9};; SMatrix33 m(a,a+9);; SVector3 irow = m.Row(0); // return as vector the first row; SVector3 jcol = m.Col(1); // return as vector the second column. // return a slice of the first row from; // (0,1): r2[0]= m(0,1); r2[1]=m(0,2); SVector2 r2 = m.SubRow<SVector2> (0,1);; // return a slice of the second column from; // (0,1): c2[0] = m(0,1); c2[1] = m(1,1); SVector2 c2 = m.SubCol<SVector2> (1,0);. // return a sub-matrix 2x2 with the upper left corner at(1,1); SMatrix22 subM = m.Sub<SMatrix22> (1,1);. // return the diagonal element in a SVector; SVector3 diag = m.Diagonal();. // return the upper(lower) block of the matrix m; SVector6 vub = m.UpperBlock(); // vub = [ 1, 2, 3, 5, 6, 9 ]; SVector6 vlb = m.LowerBlock(); // vlb = [ 1, 4, 5, 7, 8, 9 ]; 13.13.2.3 Linear Algebra Matrix Functions (Inversion, Determinant); Only limited linear algebra functionality is available for SMatrix. It is possible for squared matrices NxN, to find the inverse or to calculate the determinant. Different inversion algorithms are used if the matrix is smaller than 6x6 or if it is symmetric. In the case of a small matrix, a faster direct inversion is used. For a large (N>6)symmetric matrix the Bunch-Kaufman diagonal pivoting method is used while for a large (N>6) general matrix an LU factorization is performed using the same algorithm as in the CERNLIB routine dinv.; // Invert a NxN matrix.; // The inverted matrix replaces the existing one if the; // result is successful; bool ret = m.Invert(); // return the inverse matrix of m. // If the inversion fails ifail is different than zero ???; int ifail = 0;; ifail = m.Inverse(ifail);. // determinant of a square matrix - calculate the determinant; // modyfing the matrix content and returns it if the calculation; // was successful; double det;; bool ret = m.Det(det);. // calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:760294,avail,available,760294,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"he end of the program, ROOT might display a blank canvas). ; Definition at line 2426 of file RInterface.hxx. ◆ Range() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Range ; (; unsigned int ; begin, . unsigned int ; end, . unsigned int ; stride = 1 . ). inline . Creates a node that filters entries based on range: [begin, end). ; Parameters. [in]beginInitial entry number considered for this range. ; [in]endFinal entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset. ; [in]strideProcess one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. . Returnsthe first node of the computation graph for which the event loop is limited to a certain range of entries.; Note that in case of previous Ranges and Filters the selected range refers to the transformed dataset. Ranges are only available if EnableImplicitMT has not been called. Multi-thread ranges are not supported. Example usage:; auto d_0_30 = d.Range(0, 30); // Pick the first 30 entries; auto d_15_end = d.Range(15, 0); // Pick all entries from 15 onwards; auto d_15_end_3 = d.Range(15, 0, 3); // Stride: from event 15, pick an event every 3. Definition at line 1570 of file RInterface.hxx. ◆ Range() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Range ; (; unsigned int ; end). inline . Creates a node that filters entries based on range. ; Parameters. [in]endFinal entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset. . Returnsa node of the computation graph for which the range is defined.; See the other Range overload for a detailed description. ; Definition at line 1591 of file RInterface.hxx. ◆ Redefine() [1/2]. template<typename Proxied , typename DataSource ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:113969,avail,available,113969,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['avail'],['available']
Availability,"he error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:6604,error,error,6604,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,8,['error'],['error']
Availability,"he event status in a canvas. To show the event status window, select the Options menu and the EventStatus item. This method returns a string of information about the object at position (x, y). Every time the cursor moves, the object under the cursor executes the GetObjectInfo method. The string is then shown in the status bar. There is a default implementation in TObject, but it is typically overridden for classes that can report peculiarities for different cursor positions (for example the bin contents in a TH1).; 15.1.9 IsFolder; By default an object inheriting from TObject is not brows-able, because TObject::IsFolder() returns kFALSE. To make a class browse-able, the IsFolder method needs to be overridden to return kTRUE. In general, this method returns kTRUE if the object contains browse-able objects (like containers or lists of other objects).; 15.1.10 Bit Masks and Unique ID; A TObject descendent inherits two data members: fBits and fUniqueID. fBitsis 32-bit data member used with a bit mask to get object information. Bits 0 - 13 are reserved as global bits, bits 14 - 23 can be used in different class hierarchies.; enum EObjBits {; kCanDelete = BIT(0), // if can be deleted; kMustCleanup = BIT(3), // if destructor must call RecursiveRemove(); kObjInCanvas = BIT(3), // for backward compatibility only; kIsReferenced = BIT(4), // if referenced by TRef or TRefArray; kHasUUID = BIT(5), // if has a TUUID, fUniqueID=UUIDNumber; kCannotPick = BIT(6), // if cannot be picked in a pad; kNoContextMenu = BIT(8), // if does not want a context menu; kInvalidObject = BIT(13) // object ctor succeeded but the object should not be used; };; For example, the bits kMustCleanup and kCanDelete are used in TObject. See “The kCanDelete Bit” and “The kMustCleanup Bit”. They can be set by any object and should not be reused. Make sure not to overlap them in any given hierarchy. The bit 13 (kInvalidObject) is set when an object could not be read from a ROOT file. It will check this bit and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:809774,mask,mask,809774,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['mask'],['mask']
Availability,"he field x.; �        ; from numerical stability point of view the operation of deconvolution is; extremely critical (ill-posed� problem) as well as time consuming operation. ; �        ; the Gold deconvolution algorithm proves to work very well even for; 2-dimensional systems. Generalization of the algorithm for 2-dimensional; systems was presented in [1], and for multidimensional systems in [2].; �        ; for Gold deconvolution algorithm as well as for boosted deconvolution; algorithm we refer also to TSpectrum and TSpectrum2 ;  ; Function:; const char* TSpectrum3::Deconvolution(double ***fSource,; const double; ***fResp, int; fSizex, int; fSizey, int; fSizez, int; fNumberIterations, int; fNumberRepetitions, double fBoost);  ; This function calculates; deconvolution from source spectrum according to response spectrum using Gold; deconvolution algorithm. The result is placed in the field pointed by source; pointer. On successful completion it returns 0. On error it returns pointer to; the string describing error. If desired after every fNumberIterations one can apply; boosting operation (exponential function with exponent given by fBoost; coefficient) and repeat it fNumberRepetitions times.;  ; Parameters:; ������� fSource-pointer to the matrix of source; spectrum����������������� ; ������� fResp-pointer to the matrix of response; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterations-number; of iterations ; ������� fNumberRepetitions-number; of repetitions for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� fBoost-boosting; coefficient, applies only if fNumberRepetitions is greater than one.� ; ������� Recommended; range <1,2>.;  ; References:; �[1] M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Efficient; one- and two-dimensional Gold deconvolution and its application to gamma-ray; spectra decomposition. NIM, A401 (1997) 385",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum3.html:24493,error,error,24493,root/html602/TSpectrum3.html,https://root.cern,https://root.cern/root/html602/TSpectrum3.html,8,['error'],['error']
Availability,"he file being executed.; 1571 ; 1572Int_t TSystem::GetEffectiveUid(); 1573{; 1574 AbstractMethod(""GetEffectiveUid"");; 1575 return 0;; 1576}; 1577 ; 1578////////////////////////////////////////////////////////////////////////////////; 1579/// Returns the group's id. If group = 0, returns current user's group.; 1580 ; 1581Int_t TSystem::GetGid(const char * /*group*/); 1582{; 1583 AbstractMethod(""GetGid"");; 1584 return 0;; 1585}; 1586 ; 1587////////////////////////////////////////////////////////////////////////////////; 1588/// Returns the effective group id. The effective group id corresponds; 1589/// to the set id bit on the file being executed.; 1590 ; 1591Int_t TSystem::GetEffectiveGid(); 1592{; 1593 AbstractMethod(""GetEffectiveGid"");; 1594 return 0;; 1595}; 1596 ; 1597////////////////////////////////////////////////////////////////////////////////; 1598/// Returns all user info in the UserGroup_t structure. The returned; 1599/// structure must be deleted by the user. In case of error 0 is returned.; 1600 ; 1601UserGroup_t *TSystem::GetUserInfo(Int_t /*uid*/); 1602{; 1603 AbstractMethod(""GetUserInfo"");; 1604 return nullptr;; 1605}; 1606 ; 1607////////////////////////////////////////////////////////////////////////////////; 1608/// Returns all user info in the UserGroup_t structure. If user = 0, returns; 1609/// current user's id info. The returned structure must be deleted by the; 1610/// user. In case of error 0 is returned.; 1611 ; 1612UserGroup_t *TSystem::GetUserInfo(const char * /*user*/); 1613{; 1614 AbstractMethod(""GetUserInfo"");; 1615 return nullptr;; 1616}; 1617 ; 1618////////////////////////////////////////////////////////////////////////////////; 1619/// Returns all group info in the UserGroup_t structure. The only active; 1620/// fields in the UserGroup_t structure for this call are:; 1621/// - fGid and fGroup; 1622/// The returned structure must be deleted by the user. In case of; 1623/// error 0 is returned.; 1624 ; 1625UserGroup_t *TSystem::GetGroup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:50799,error,error,50799,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"he file. Makes sure that the file is really open before; calling TFile::Init. It may block. Long64_t GetSize() const; Get the file size. Returns -1 in the case that the file could not be; stat'ed. Bool_t IsOpen() const; Check if the file is open. void SetAsyncOpenStatus(TFile::EAsyncOpenStatus status); Set the status of an asynchronous file open. void Close(const Option_t* option = """"); Close the file. param option: if == ""R"", all TProcessIDs referenced by this file are; deleted (is this valid in xrootd context?). Int_t ReOpen(Option_t* modestr); Reopen the file with the new access mode. param mode: the new access mode; returns: 0 in case the mode was successfully modified, 1 in case; the mode did not change (was already as requested or wrong; input arguments) and -1 in case of failure, in which case; the file cannot be used anymore. Bool_t ReadBuffer(char* buffer, Int_t length); Read a data chunk of the given size. param buffer: a pointer to a buffer big enough to hold the data; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffer(char* buffer, Long64_t position, Int_t length); Read a data chunk of the given size, starting from the given offset. param buffer: a pointer to a buffer big enough to hold the data; param position: offset from the beginning of the file; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffers(char* buffer, Long64_t* position, Int_t* length, Int_t nbuffs); Read scattered data chunks in one operation. param buffer: a pointer to a buffer big enough to hold all of the; requested data; param position: position[i] is the seek position of chunk i of len; length[i]; param length: length[i] is the length of the chunk at offset; position[i]; param nbuffs: number of chunks; returns: kTRUE in case of failure. Bool_t WriteBuffer(const char* buffer, Int_t length); Write a data chunk. param buffer: the data to be written; param length: the size of the buffer; returns: kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetXNGFile.html:25795,failure,failure,25795,root/html602/TNetXNGFile.html,https://root.cern,https://root.cern/root/html602/TNetXNGFile.html,4,['failure'],['failure']
Availability,"he following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbox{SCAN}\) gives you a picture of \(\mbox{FCN}\) as a function of parameter four alone, the others being fixed at their current best values. If you suspect the difficulty is due to parameter five, then add; MnContours contour(...);; std::vector<std::pair<double, double> > points = contour(4, 5);; to see a two-dimensional picture.; 6.5 Interpretation of parameter errors; There are two kinds of problems that can arise: The reliability of M ’s error estimates, and their statistical interpretation, assuming they are accurate.; 6.5.1 Statistical interpretation; For discussuion of basic concepts, such as the meaning of the elements of the error matrix, parabolic versus \(\mbox{MINOS}\) errors, the appropriate value for \(\mbox{up}\) (see [howto:errordef]), and setting of exact confidence levels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or \(\mbox{HESSE}\) step, the errors are usually quite accurate, unless there has been a problem. If no mitigating adjective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:73279,error,error,73279,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,6,['error'],"['error', 'errordef', 'errors']"
Availability,"he functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9013,avail,available,9013,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['avail'],['available']
Availability,he given fit point; 219 */; 220 double Value( unsigned int ipoint ) const; 221 {; 222 assert( ipoint < fMaxPoints );; 223 assert( fDataPtr );; 224 assert( fData.empty() || &fData.front() == fDataPtr );; 225 ; 226 return fDataPtr[ipoint];; 227 }; 228 ; 229 /**; 230 return a pointer to the value for the given fit point; 231 */; 232 const double *ValuePtr( unsigned int ipoint ) const; 233 {; 234 return &fDataPtr[ipoint];; 235 }; 236 ; 237 /**; 238 Return a pointer to the error (or the inverse error) on the value for a given point; 239 depending on the type of data.; 240 - If the data contains only value error (e.g. from histograms) returns a pointer to; 241 the inverse of the errors.; 242 - If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a; 243 pointer to the corresponding value error (NOT the inverse).; 244 - If the data contains asymmetric errors return a pointer to the average error (NOT the inverse):; 245 0.5(eu + el).; 246 - If the data does not contain errors return a nullptr.; 247 */; 248 ; 249 const double * ErrorPtr(unsigned int ipoint) const{; 250 assert( ipoint < fMaxPoints );; 251 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 252 kAsymError == fErrorType || kNoError == fErrorType );; 253 ; 254 if ( fErrorType == kNoError ); 255 return nullptr;; 256 return &fDataErrorPtr[ ipoint ];; 257 }; 258 ; 259 /// Return the error on the given point.; 260 /// Safer method returning in any case the error and not the inverse as in the; 261 /// function above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 272 return 1.0;; 273 }; 274 ; 275 i,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:8419,error,errors,8419,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['errors']
Availability,he given fit point; 322 useful when error in the coordinates are not stored and then this is used directly this as the weight in; 323 the least square function; 324 */; 325 double InvError( unsigned int ipoint ) const; 326 {; 327 assert( ipoint < fMaxPoints );; 328 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 329 kAsymError == fErrorType || kNoError == fErrorType );; 330 ; 331 if ( fErrorType == kNoError ); 332 {; 333 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 334 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 335 return 1.0;; 336 }; 337 ; 338 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 339 {; 340 assert( fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 341 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 342 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 343 ; 344 double eval = fDataErrorPtr[ ipoint ];; 345 ; 346 // in case of wrapped data the pointer stores the error and; 347 // not the inverse; 348 if (fWrapped); 349 return 1.0 / eval;; 350 else; 351 return (eval != 0.0) ? eval : 0.0;; 352 }; 353 ; 354 if ( fErrorType == kAsymError ) {; 355 // return inverse of 1/2(el + eh); 356 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 357 assert( fDataError.empty() );; 358 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 359 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 360 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 361 ; 362 double eh = fDataErrorHighPtr[ ipoint ];; 363 double el = fDataErrorLowPtr[ ipoint ];; 364 ; 365 return 2.0 / (el+eh);; 366 }; 367 ; 368 assert( fErrorType == kCoordError );; 369 // for coordinate error we store the error and not the inverse; 370 return 1.0 / fDataErrorPtr[ ipoint ];; 371 }; 372 ; 373 ; 374 /**; 375 retrieve at the same time a pointer to the coordinate data and the fit valu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:12191,error,error,12191,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['error']
Availability,"he header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the product of the bin content of the profile and the entries. With this option the returned histogram will be equivalent to the one obtained by filling directly a TH2D using the 3-rd value as a weight. This option makes sense only for profile filled with all weights =1. When the profile is weighted (filled with weights different than 1) the bin error of the projected histogram (obtained using this option ""W"") cannot be correctly computed from the information stored in the profile. In that case the obtained histogram contains as bin error square the weighted sum of the square of the profiled observable (TProfile2D::fSumw2[bin] ); Note that the axis range is not considered when doing the projection . Definition at line 961 of file TProfile3D.cxx. ◆ PutStats(). void TProfile3D::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimplemented from TH3.; Definition at line 1175 of file TProfile3D.cxx. ◆ Reset(). void TProfile3D::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset contents of a Profile3D histogram. ; Reimplemented from TH3D.; Definition at line 1185 of file TProfile3D.cxx. ◆ RetrieveBinContent(). Double_t TProfile3D::RetrieveBinContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH3D.; Definition at line 65 of file TProfile3D.h. ◆ SavePrimitive(). void TProfile3D::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:97758,error,error,97758,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['error']
Availability,"he left side of the bar is drawn with a light fill color.; The right side of the bar is drawn with a dark fill color.; The percentage of the bar drawn with either the light or dark color is:. 0% for option ""(h)bar"" or ""(h)bar0""; 10% for option ""(h)bar1""; 20% for option ""(h)bar2""; 30% for option ""(h)bar3""; 40% for option ""(h)bar4"". Picture; Source. // Example of bar charts with 1-d histograms; // Author: Rene Brun; TCanvas *hbars() {; cout << gSystem->DirName(__FILE__) << endl;; // try to open first the file cernstaff.root in tutorials/tree directory; TString filedir = gSystem->DirName(__FILE__);; filedir += TString(""/../tree/"");; TString filename = ""cernstaff.root"";; bool fileNotFound = gSystem->AccessPathName(filename); // note opposite return code; // if file is not found try to generate it uing the macro tree/cernbuild.C; if (fileNotFound) {; TString macroName = filedir + ""cernbuild.C"";; if (!gInterpreter->IsLoaded(macroName)) gInterpreter->LoadMacro(macroName);; gROOT->ProcessLineFast(""cernbuild()"");; }; TFile * f = TFile::Open(filename);; if (!f) {; Error(""hbars"",""file cernstaff.root not found"");; return 0;; }; TTree *T = (TTree*)f->Get(""T"");; if (!T) {; Error(""hbars"",""Tree T is not present in file %s"",f->GetName() );; return 0;; }; T->SetFillColor(45);; TCanvas *c1 = new TCanvas(""c1"",""histograms with bars"",700,800);; c1->SetFillColor(42);; c1->Divide(1,2);. //horizontal bar chart; c1->cd(1); gPad->SetGrid(); gPad->SetLogx(); gPad->SetFrameFillColor(33);; T->Draw(""Nation"","""",""hbar2"");. //vertical bar chart; c1->cd(2); gPad->SetGrid(); gPad->SetFrameFillColor(33);; T->Draw(""Division>>hDiv"","""",""goff"");; TH1F *hDiv = (TH1F*)gDirectory->Get(""hDiv"");; hDiv->SetStats(0);; TH1F *hDivFR = (TH1F*)hDiv->Clone(""hDivFR"");; T->Draw(""Division>>hDivFR"",""Nation==\""FR\"""",""goff"");; hDiv->SetBarWidth(0.45);; hDiv->SetBarOffset(0.1);; hDiv->SetFillColor(49);; TH1 *h1 = hDiv->DrawCopy(""bar2"");; hDivFR->SetBarWidth(0.4);; hDivFR->SetBarOffset(0.55);; hDivFR->SetFillColor(50);; TH1 *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:24438,Error,Error,24438,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['Error'],['Error']
Availability,"he licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#include ""rootcling_impl.h""; 12#include ""rootclingCommandLineOptionsHelp.h""; 13 ; 14#include ""RConfigure.h""; 15#include <ROOT/RConfig.hxx>; 16#include <ROOT/FoundationUtils.hxx>; 17#include ""snprintf.h""; 18 ; 19#include <iostream>; 20#include <iomanip>; 21#include <memory>; 22#include <vector>; 23#include <algorithm>; 24#include <cstdio>; 25 ; 26#include <errno.h>; 27#include <string>; 28#include <list>; 29#include <sstream>; 30#include <map>; 31#include <fstream>; 32#include <sys/stat.h>; 33#include <unordered_map>; 34#include <unordered_set>; 35#include <numeric>; 36 ; 37 ; 38#ifdef _WIN32; 39#ifdef system; 40#undef system; 41#endif; 42#undef UNICODE; 43#include <windows.h>; 44#include <Tlhelp32.h> // for MAX_MODULE_NAME32; 45#include <process.h>; 46#define PATH_MAX _MAX_PATH; 47#ifdef interface; 48// prevent error coming from clang/AST/Attrs.inc; 49#undef interface; 50#endif; 51#endif; 52 ; 53#ifdef __APPLE__; 54#include <mach-o/dyld.h>; 55#endif; 56 ; 57#ifdef R__FBSD; 58#include <sys/param.h>; 59#include <sys/user.h>; 60#include <sys/types.h>; 61#include <libutil.h>; 62#include <libprocstat.h>; 63#endif // R__FBSD; 64 ; 65#if !defined(R__WIN32); 66#include <limits.h>; 67#include <unistd.h>; 68#endif; 69 ; 70 ; 71#include ""cling/Interpreter/Interpreter.h""; 72#include ""cling/Interpreter/InterpreterCallbacks.h""; 73#include ""cling/Interpreter/LookupHelper.h""; 74#include ""cling/Interpreter/Value.h""; 75#include ""clang/AST/CXXInheritance.h""; 76#include ""clang/Basic/Diagnostic.h""; 77#include ""clang/Frontend/CompilerInstance.h""; 78#include ""clang/Frontend/FrontendActions.h""; 79#include ""clang/Frontend/FrontendDiagnostic.h""; 80#include ""clang/Lex/HeaderSearch.h""; 81#include ""clang/Lex/Preprocessor.h""; 82#include ""clang/Lex/ModuleMap.h""; 83#include ""clang/Lex/Pragma.h""; 84#include """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:1459,error,error,1459,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['error']
Availability,"he lock here is not too costly as InitializeOffsets is; 3150 // one called once in the lifetime of the TBranch.; 3151 R__LOCKGUARD(gInterpreterMutex);; 3152 ; 3153 if (fID < 0) {; 3154 // -- We are a top-level branch. Let's mark whether we need to use MapObject.; 3155 if (CanSelfReference(fBranchClass)) {; 3156 if (fBranchClass.GetClass()->IsTObject()) {; 3157 SetBit(kBranchObject);; 3158 } else {; 3159 SetBit(kBranchAny);; 3160 }; 3161 }; 3162 }; 3163 if (nbranches) {; 3164 // Allocate space for the new sub-branch offsets.; 3165 delete[] fBranchOffset;; 3166 fBranchOffset = nullptr;; 3167 fBranchOffset = new Int_t[nbranches];; 3168 // Make sure we can instantiate our class meta info.; 3169 if (!fBranchClass.GetClass()) {; 3170 Warning(""InitializeOffsets"", ""No branch class set for branch: %s"", GetName());; 3171 fInitOffsets = true;; 3172 return;; 3173 }; 3174 // Make sure we can instantiate our class streamer info.; 3175 if (!GetInfoImp()) {; 3176 Warning(""InitializeOffsets"", ""No streamer info available for branch: %s of class: %s"", GetName(), fBranchClass.GetClass()->GetName());; 3177 fInitOffsets = true;; 3178 return;; 3179 }; 3180 ; 3181 // Get the class we are a member of now (which is the; 3182 // type of our containing subobject) and get our offset; 3183 // inside of our containing subobject (our local offset).; 3184 // Note: branchElem stays zero if we are a top-level branch,; 3185 // we have to be careful about this later.; 3186 TStreamerElement* branchElem = nullptr;; 3187 Int_t localOffset = 0;; 3188 TClass* branchClass = fBranchClass.GetClass();; 3189 bool renamed = false;; 3190 if (fID > -1) {; 3191 // -- Branch is *not* a top-level branch.; 3192 // Instead of the streamer info class, we want the class of our; 3193 // specific element in the streamer info. We could be a data; 3194 // member of a base class or a split class, in which case our; 3195 // streamer info will be for our containing sub-object, while; 3196 // we are actually a different type.; 319",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:113231,avail,available,113231,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['avail'],['available']
Availability,"he merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:61965,error,errors,61965,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"he minimal and maximal value for each dimension. The arrays ""xmin"" and ""xmax"" can be NULL; in that case SetBinEdges() must be called for each dimension. ; Definition at line 603 of file THnSparse.cxx. ◆ ~THnSparse(). THnSparse::~THnSparse ; (; ). override . Destruct a THnSparse. ; Definition at line 616 of file THnSparse.cxx. Member Function Documentation. ◆ AddBinContent() [1/2]. void THnSparse::AddBinContent ; (; const Int_t * ; idx, . Double_t ; v = 1. . ). inline . Forwards to THnBase::AddBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 113 of file THnSparse.h. ◆ AddBinContent() [2/2]. void THnSparse::AddBinContent ; (; Long64_t ; bin, . Double_t ; v = 1. . ). overridevirtual . Add ""v"" to the content of bin with index ""bin"". ; Implements THnBase.; Definition at line 623 of file THnSparse.cxx. ◆ AddBinError2(). void THnSparse::AddBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). overridevirtual . Add ""e"" to error of bin with index ""bin"", enable errors if needed. ; Implements THnBase.; Definition at line 931 of file THnSparse.cxx. ◆ AddChunk(). THnSparseArrayChunk * THnSparse::AddChunk ; (; ). protected . Create a new chunk of bin content. ; Definition at line 634 of file THnSparse.cxx. ◆ Class(). static TClass * THnSparse::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THnSparse::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THnSparse::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 169 of file THnSparse.h. ◆ CreateIter(). ROOT::Internal::THnBaseBinIter * THnSparse::CreateIter ; (; Bool_t ; respectAxisRange); const. overridevirtual . Create an iterator over all filled bins of a THnSparse. ; Use THnIter instead. ; Implements THnBase.; Definition at line 896 of file THnSparse.cxx. ◆ CreateSparse() [1/2]. static THnSparse * THnSparse::CreateSparse ; (; const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:30870,error,error,30870,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"he minimizer that is independent of the function to be minimized. ; Definition at line 141 of file RooMinimizer.cxx. ◆ IsA(). TClass * RooMinimizer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 247 of file RooMinimizer.h. ◆ lastMinuitFit(). RooFit::OwningPtr< RooFitResult > RooMinimizer::lastMinuitFit ; (; ). Definition at line 738 of file RooMinimizer.cxx. ◆ logfile(). std::ofstream * RooMinimizer::logfile ; (; ). private . Definition at line 827 of file RooMinimizer.cxx. ◆ makeEvalErrorContext(). std::unique_ptr< RooAbsReal::EvalErrorContext > RooMinimizer::makeEvalErrorContext ; (; ); const. private . Definition at line 840 of file RooMinimizer.cxx. ◆ maxFCN(). double & RooMinimizer::maxFCN ; (; ). private . Definition at line 831 of file RooMinimizer.cxx. ◆ migrad(). int RooMinimizer::migrad ; (; ). Execute MIGRAD. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 318 of file RooMinimizer.cxx. ◆ minimize(). int RooMinimizer::minimize ; (; const char * ; type, . const char * ; alg = nullptr . ). Minimise the function passed in the constructor. ; Parameters. [in]typeType of fitter to use, e.g. ""Minuit"" ""Minuit2"". Passing an empty string will select the default minimizer type of the RooMinimizer, as returned by ROOT::Math::MinimizerOptions::DefaultMinimizerType(). . AttentionThis overrides the default fitter of this RooMinimizer. ; Parameters. [in]algFit algorithm to use. (Optional) . Definition at line 281 of file RooMinimizer.cxx. ◆ minimizerType(). std::string const & RooMinimizer::minimizerType ; (; ); const. inline . Definition at line 175 of file RooMinimizer.h. ◆ minos() [1/2]. int RooMinimizer::minos ; (; ). Execute MINOS. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:23416,error,errors,23416,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['error'],['errors']
Availability,"he name and title of this histogram. void SetStats(Bool_t stats = kTRUE); -*-*-*-*-*-*-*Set statistics option on/off. By default, the statistics box is drawn.; The paint options can be selected via gStyle->SetOptStats.; This function sets/resets the kNoStats bin in the histogram object.; It has priority over the Style option. void Sumw2(); Create structure to store sum of squares of weights*-*-*-*-*-*-*-*. if histogram is already filled, the sum of squares of weights; is filled with the existing bin contents. The error per bin will be computed as sqrt(sum of squares of weight); for each bin. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before. TF1 * GetFunction(const char* name) const; -*-*-*Return pointer to function with name*-*-*-*-*-*-*-*-*-*-*-*-*. Functions such as TH1::Fit store the fitted function in the list of; functions of this histogram. Double_t GetBinError(Int_t bin) const; -*-*-*-*-*Return value of error associated to bin number bin*-*-*-*-*. if the sum of squares of weights has been defined (via Sumw2),; this function returns the sqrt(sum of w2).; otherwise it returns the sqrt(contents) for this bin. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetCellError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. void SetBinError(Int_t bin, Double_t error); see convention for numbering bins i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:118427,error,error,118427,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['error']
Availability,"he namespace ROOT::Math::IntegrationOneDim (to distinguish from the multi-dimensional case) and the rule enumeration (or its corresponding integer) can be passed in the constructor of the ROOT::Math::IntegratorOneDIm.; 13.8.3 Multi-dimensional Integration; The multi-dimensional integration algorithm should be applied to functions with dimension larger than one. Adaptive multi-dimensional integration works for low function dimension, while MC integration can be applied to higher dimensions.; 13.8.3.1 Using ROOT::Math::IntegratorMultiDim; Here is a code example on how to use the ROOT::Math::IntegratorOneDim class (note that the class is defined in the header file Math/Integrator.h). In this example we create different instance of the class using some of the available algorithms in ROOT.; #include ""Math/IntegratorMultiDim.h""; #include ""Math/Functor.h"". double f2(const double * x) {; return x[0] + x[1];; }. int testIntegrationMultiDim() {. const double RESULT = 1.0;; const double ERRORLIMIT = 1E-3;; int status = 0;. ROOT::Math::Functor wf(&f2,2);; double a[2] = {0,0};; double b[2] = {1,1};. ROOT::Math::IntegratorMultiDim ig(ROOT::Math::IntegrationMultiDim::kADAPTIVE);; ig.SetFunction(wf);; double val = ig.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig2(ROOT::Math::IntegrationMultiDim::kVEGAS);; ig2.SetFunction(wf);; val = ig2.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig3(wf,ROOT::Math::IntegrationMultiDim::kPLAIN);; val = ig3.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig4(wf,ROOT::Math::IntegrationMultiDim::kMISER);; val = ig4.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. return s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:709987,ERROR,ERRORLIMIT,709987,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['ERROR'],['ERRORLIMIT']
Availability,"he neural net output” shows this plot. The neural net output. As it can be seen, this is a quite efficient technique. As mentioned earlier, neural networks are also used for fitting function. For some application with a cylindrical symmetry, a magnetic field simulation gives as output the angular component of the potential vector A, as well as the radial and z components of the B field.; One wants to fit those distributions with a function in order to plug them into the Geant simulation code. Polynomial fits could be tried, but it seems difficult to reach the desired precision over the full range. One could also use a spline interpolation between known points. In all cases, the resulting field would not be C-infinite.; An example of output (for Br) is shown. First the initial function can be seen as the target. Then, the resulting (normalized) neural net output. In order to ease the learning, the “normalize output” was used here. The initial amplitude can be recovered by multiplying by the original RMS and then shifting by the original mean. The original and the neural net for Br. 6 A Little C++. This chapter introduces you to some useful insights into C++, to allow you to use some of the most advanced features in ROOT. It is in no case a full course in C++.; 6.1 Classes, Methods and Constructors; C++ extends C with the notion of a class. If you’re used to structures in C, a class is a struct that is a group of related variables, which is extended with functions and routines specific to this structure (class). What is the interest? Consider a struct that is defined this way:; struct Line {; float x1;; float y1;; float x2;; float y2;; }; This structure represents a line to be drawn in a graphical window. (x1,y1) are the coordinates of the first point, (x2,y2) the coordinates of the second point. In the standard C, if you want to draw effectively such a line, you first have to define a structure and initialize the points (you can try this):; Line firstline;; firstline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:241472,recover,recovered,241472,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['recover'],['recovered']
Availability,"he np points in array...Definition TMath.h:1233; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::Log2Double_t Log2(Double_t x)Returns the binary (base-2) logarithm of x.Definition TMath.cxx:107; TMath::BesselK1Double_t BesselK1(Double_t x)Modified Bessel function I_1(x)Definition TMath.cxx:1529; TMath::MedianDouble_t Median(Long64_t n, const T *a, const Double_t *w=nullptr, Long64_t *work=nullptr)Same as RMS.Definition TMath.h:1272; TMath::BubbleHighvoid BubbleHigh(Int_t Narr, Double_t *arr1, Int_t *arr2)Bubble sort variant to obtain the order of an array's elements into an index in order to do more usef...Definition TMath.cxx:1314; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::BesselI1Double_t BesselI1(Double_t x)Modified Bessel function K_0(x)Definition TMath.cxx:1494; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::PoissonIDouble_t PoissonI(Double_t x, Double_t par)Computes the Discrete Poisson distribution function for (x,par).Definition TMath.cxx:615; TMath::CauchyDistDouble_t CauchyDist(Double_t x, Double_t t=0, Double_t s=1)Computes the density of Cauchy distribution at point x by default, standard Cauchy distribution is us...Definition TMath.cxx:2175; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::StruveL1Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:59448,error,error,59448,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['error'],['error']
Availability,"he number of contours.; void palette() {; // Example of creating new colors (purples); const Int_t colNum = 10; // and defining of a new palette; Int_t palette[colNum];; for (Int_t i=0; i<colNum; i++) {; // get the color and if it does not exist create it; if (! gROOT->GetColor(230+i) ){; TColor *color =; new TColor(230+i,1-(i/((colNum)*1.0)),0.3,0.5,"""");; } else {; TColor *color = gROOT->GetColor(230+i);; color->SetRGB(1-(i/((colNum)*1.0)),0.3,0.5);; }; palette[i] = 230+i;; }; gStyle->SetPalette(colNum,palette);; TF2 *f2 = new TF2(""f2"",""exp(-(x^2)-(y^2))"",-3,3,-3,3);; // two contours less than the number of colors in palette; f2->SetContour(colNum-2);; f2->Draw(""cont"");; }; Since ROOT 6.26, you can also define a palette based on an ASCII text file, using TColor::CreateColorTableFromFile(""filename.txt"") or gStyle->SetPalette(""filename.txt""). The input file contains one color per line in “r g b” float format. This function is useful to profit from a full set of colour-vision deficiency friendly and perceptually uniform colour maps that are available to download; 9.7 The Graphics Editor; A new graphics editor took place in ROOT v4.0. The editor can be activated by selecting the Editor menu entry in the canvas View menu or one of the context menu entries for setting line, fill, marker or text attributes. The following object editors are available for the current ROOT version.; 9.7.1 TAxisEditor. This user interface gives the possibility for changing the following axis attributes:. color of the selected axis, the axis’ title and labels;; the length of thick parameters and the possibility to set them on both axis sides (if +- is selected);; to set logarithmic or linear scale along the selected axis with a choice for optimized or more logarithmic labels;; primary, secondary and tertiary axis divisions can be set via the three number fields;; the axis title can be added or edited and the title’s color, position, offset, size and font can be set interactively;; the color, si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:365510,avail,available,365510,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,"['avail', 'down']","['available', 'download']"
Availability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html:6988,toler,tolerance,6988,root/html530/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html,2,['toler'],['tolerance']
Availability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html:6988,toler,tolerance,6988,root/html532/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html,4,['toler'],['tolerance']
Availability,"he objects are; to be found, the top level directory (""/"") is the default.; Directories can be specified using wildcards, e.g. ""*"" or ""/*""; means to look in all top level directories, ""/dir/*"" in all; directories under ""/dir"", and ""/*/*"" to look in all directories; two levels deep.; For backward compatibility the type can also be passed via 'name',; in which case 'type' is ignored. TDSet(const TChain& chain, Bool_t withfriends = kTRUE); Create a named TDSet object from existing TChain 'chain'.; If 'withfriends' is kTRUE add also friends.; This constructor substituted the static methods TChain::MakeTDSet; removing any residual dependence of 'tree' on 'proof'. ~TDSet(); Cleanup. Long64_t Process(TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void Print(Option_t* option = """") const; Print TDSet basic or full data. When option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/chang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSet.html:10828,error,error,10828,root/html534/TDSet.html,https://root.cern,https://root.cern/root/html534/TDSet.html,6,['error'],['error']
Availability,"he operation: this = this + c1*h1.Definition TH2Poly.cxx:365; TH2Poly::GetAsymmetryvirtual TH1 * GetAsymmetry(TH1 *, Double_t, Double_t)NOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1742; TH2Poly::Honeycombvoid Honeycomb(Double_t xstart, Double_t ystart, Double_t a, Int_t k, Int_t s, Option_t *option=""v"")Bins the histogram using a honeycomb structure If the option ""v"" is specified, the hexagons are drawn...Definition TH2Poly.cxx:1026; TH2Poly::MergeLong64_t Merge(TCollection *) overrideMerge TH2Polys Given the special nature of the TH2Poly, the merge is implemented in terms of subseque...Definition TH2Poly.cxx:1319; TH2Poly::SetBinContentvoid SetBinContent(Int_t bin, Double_t content) overrideSets the contents of the input bin to the input content Negative values between -1 and -9 are for the...Definition TH2Poly.cxx:1407; TH2Poly::GetMaximumDouble_t GetMaximum() constReturns the maximum value of the histogram.Definition TH2Poly.cxx:928; TH2Poly::Resetvoid Reset(Option_t *option) overrideReset this histogram: contents, errors, etc.Definition TH2Poly.cxx:591; TH2Poly::fStepYDouble_t fStepYDimensions of a partition cell.Definition TH2Poly.h:164; TH2Poly::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TH2Poly.cxx:1333; TH2Poly::FFTTH1 * FFT(TH1 *, Option_t *) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1735; TH2Poly::fCellsTList * fCells[fNCells] The array of TLists that store the bins that intersect with each cell. List do not own the ...Definition TH2Poly.h:163; TH2Poly::fCellYInt_t fCellYNumber of partition cells in the y-direction of the histogram.Definition TH2Poly.h:161; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TH2::Copyvoid Copy(TObject &hnew) const overrideCopy.Definition TH2.cxx:380; TH2::fTsumwxyDouble_t fTsumwxyTotal Sum of weight*X*Y.Definition TH2.h:36; TH2::Resetvoid Reset(Option_t *option="""") overrideReset this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:73957,error,errors,73957,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['errors']
Availability,"he parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std::vector) ;  ; double ParError (unsigned int i) const;  parameter error by index ;  ; std::string ParName (unsigned int i) const;  name of the parameter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:5566,error,errors,5566,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,8,['error'],"['error', 'errors']"
Availability,"he parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:135963,error,error,135963,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"he parameters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:38463,avail,available,38463,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['avail'],['available']
Availability,"he parameters; of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()). The optional cut string expression can be used to select the events to be plotted.; The cut specification may refer to any variable contained in the data set. The drawOptions are passed to the TH1::Draw() method. Roo1DTable* table(const RooAbsCategory& cat, const char* cuts, const char* /*opts*/); Create and fill a 1-dimensional table for given category column; This functions is the equivalent of plotOn() for category dimensions. The optional cut string expression can be used to select the events to be tabulated; The cut specification may refer to any variable contained in the data set. The option string is currently not used. Bool_t getRange(RooRealVar& var, Double_t& lowest, Double_t& highest, Double_t marginFrac = 0, Bool_t symMode = kFALSE) const; Fill Doubles 'lowest' and 'highest' with the lowest and highest value of; observable 'var' in this dataset. If the return value is kTRUE and error; occurred. void optimizeReadingWithCaching(RooAbsArg& arg, const RooArgSet& cacheList, const RooArgSet& keepObsList); Prepare dataset for use with cached constant terms listed in; 'cacheList' of expression 'arg'. Deactivate tree branches; for any dataset observable that is either not used at all,; or is used exclusively by cached branch nodes. Bool_t allClientsCached(RooAbsArg* , const RooArgSet& ); Utility function that determines if all clients of object 'var'; appear in given list of cached nodes. void checkInit() const. void Draw(Option_t* option = """"); Forward draw command to data store. Bool_t hasFilledCache() const. const TTree* tree() const. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0) const. RooAbsDataStore* store(); { return _dstore ; }. const RooAbsDataStore* store(); { return _dstore ; }. void add(const RooArgSet& row, Double_t weight = 1, Double_t weightError = 0); Add one ore more rows of data. const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:34265,error,error,34265,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['error'],['error']
Availability,"he predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 probability); double prob = res.Prob();; if (prob < 1.E-2); Error(""exampleFit3D"",""Bad data fit - fit p-value is %f"",prob);; else; std::cout << ""Good fit : p-value = "" << prob << std::endl;; ; }; else; Error(""exampleFit3D"",""3D fit failed"");; }; BinData.h; Fitter.h; TError.h; Errorvoid Error(const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exampleFit3D_8C.html:1414,error,errors,1414,doc/master/exampleFit3D_8C.html,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html,1,['error'],['errors']
Availability,"he projection is drawn in the current pad. if option ""o"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled.; NOTE that if a TH1D named ""name"" exists in the current directory or pad the histogram is reset and filled again with the projected contents of the TH3.; implemented using Project3D ; Definition at line 1747 of file TH3.cxx. ◆ ProjectionY(). TH1D * TH3::ProjectionY ; (; const char * ; name = ""_py"", . Int_t ; ixmin = 0, . Int_t ; ixmax = -1, . Int_t ; izmin = 0, . Int_t ; izmax = -1, . Option_t * ; option = """" . ); const. virtual . Project a 3-D histogram into a 1-D histogram along Y. ; The projection is always of the type TH1D. The projection is made from the cells along the Y axis ranging from ixmin to ixmax and izmin to izmax included. By default, underflow and overflow are included in both the X and Z axis. By setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z will be excluded; if option ""e"" is specified, the errors are computed. if option ""d"" is specified, the projection is drawn in the current pad. if option ""o"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled.; NOTE that if a TH1D named ""name"" exists in the current directory or pad, the histogram is reset and filled again with the projected contents of the TH3.; implemented using Project3D ; Definition at line 1780 of file TH3.cxx. ◆ ProjectionZ(). TH1D * TH3::ProjectionZ ; (; const char * ; name = ""_pz"", . Int_t ; ixmin = 0, . Int_t ; ixmax = -1, . Int_t ; iymin = 0, . Int_t ; iymax = -1, . Option_t * ; option = """" . ); const. virtual . Project a 3-D histogram into a 1-D histogram along Z. ; The projection is always of the type TH1D. The projection is made from the cells along the Z axis ranging from ixmin to ixmax and iymin to iymax included. By default, bins 1 to nx and 1 to ny are i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:96861,error,errors,96861,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['error'],['errors']
Availability,"he reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with a different name. ; Parameters. [in]aliasname of the column alias ; [in]columnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:36689,avail,available,36689,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['avail'],['available']
Availability,"he rest of the classes shown above in the diagram are the specialized classes provided. Each one implements a different method that will be explained in detail. It is important to notice that the two grayed classes (the one which name starts by GSL) are part of the MathMore library. We will later show in more detail the differences between the implementations.; 13.8.1 Integration of One-dimensional Functions; 13.8.1.1 Using ROOT::Math::IntegratorOneDim; Here is a code example on how to use the ROOT::Math::IntegratorOneDim class (note that the class is defined in the header file Math/Integrator.h). In this example we create different instance of the class using some of the available algorithms in ROOT. If no algorithm is specified, the default one is used. The default Integrator together with other integration options such as relative and absolute tolerance, can be specified using the static method of the ROOT::Math::IntegratorOneDimOptions; #include ""Math/Integrator.h"". const double ERRORLIMIT = 1E-3;. double f(double x) {; return x;; }. double f2(const double * x) {; return x[0] + x[1];; }. int testIntegration1D() {. const double RESULT = 0.5;; int status = 0;. // set default tolerances for all integrators; ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance(1.E-6);; ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance(1.E-6);. ROOT::Math::Functor1D wf(&f);; ROOT::Math::Integrator ig(ROOT::Math::IntegrationOneDim::kADAPTIVESINGULAR);; ig.SetFunction(wf);; double val = ig.Integral(0,1);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::Integrator ig2(ROOT::Math::IntegrationOneDim::kNONADAPTIVE);; ig2.SetFunction(wf);; val = ig2.Integral(0,1);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::Integrator ig3(wf, ROOT::Math::IntegrationOneDim::kADAPTIVE);; val = ig3.Integral(0,1);; std::cout << ""integral result is "" << val ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:702414,ERROR,ERRORLIMIT,702414,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['ERROR'],['ERRORLIMIT']
Availability,"he result of a Migrad minimization or a direct; 290calculation by Hesse which inverts the second derivative matrix.; 291 ; 292When there are no limits on the parameter in question, the error reported; 293by Minuit should therefore be exactly equal to the square root of the; 294corresponding diagonal element of the error matrix reported by Minuit.; 295 ; 296However, when there are limits on the parameter, there is a transformation; 297between the internal parameter values seen by Minuit (which are unbounded); 298and the external parameter values seen by the user in FCN (which remain; 299inside the desired limits). Therefore the internal error matrix kept by; 300Minuit must be transformed to an external error matrix for the user.; 301This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; 302where DEXDIN is the derivative of the external value with respect to the; 303internal value at the minimum. This is a linearisation of the; 304transformation, and is the only way to produce an error matrix in external; 305coordinates meaningful to the user. But when reporting the individual; 306parabolic errors for limited parameters, Minuit can do a little better, so; 307it does. In this case, Minuit actually transforms the ends of the; 308internal ""error bar"" to external coordinates and reports the length of; 309this transformed interval. Strictly speaking, it is now asymmetric, but; 310since the origin of the asymmetry is only an artificial transformation it; 311does not make much sense, so the transformed errors are symmetrized.; 312 ; 313The result of all the above is that for parameters with limits, the error; 314reported by Minuit is not exactly equal to the square root of the diagonal; 315element of the error matrix. The difference is a measure of how much the; 316limits deform the problem. If possible, it is suggested not to use limits; 317on parameters, and the problem goes away. If for some reason limits are; 318necessary, and you are sensitive to the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:14893,error,error,14893,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,he result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 22,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:11616,toler,tolerance,11616,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['toler'],['tolerance']
Availability,"he same binning. The asymmetry is calculated as (1-2)/(1+2). Error bars are; calculated using Binomial statistics. Prints a warning and rounds; any bins with non-integer contents. Use the optional parameter to; specify the confidence level in units of sigma to use for; calculating error bars. The nominal bin width specifies the; default used by addAsymmetryBin(), and is used to set the relative; normalization of bins with different widths. If not set, the; nominal bin width is calculated as range/nbins. RooHist(const RooHist& hist1, const RooHist& hist2, Double_t wgt1 = 1., Double_t wgt2 = 1., RooAbsData::ErrorType etype = RooAbsData::Poisson, Double_t xErrorFrac = 1.); Create histogram as sum of two existing histograms. If Poisson errors are selected the histograms are; added and Poisson confidence intervals are calculated for the summed content. If wgt1 and wgt2 are not; 1 in this mode, a warning message is printed. If SumW2 errors are selectd the histograms are added; and the histograms errors are added in quadrature, taking the weights into account. void initialize(); Perform common initialization for all constructors. Double_t getFitRangeNEvt() const; Return the number of events of the dataset associated with this RooHist.; This is the number of events in the RooHist itself, unless a different; value was specified through setRawEntries(). Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Calculate integral of histogram in given range. Double_t getFitRangeBinW() const; Return (average) bin width of this RooHist. Int_t roundBin(Double_t y); Return the nearest positive integer to the input value; and print a warning if an adjustment is required. void addBin(Axis_t binCenter, Double_t n, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the specified integer bin contents; and using an error bar calculated with Poisson statistics. The bin width; is used to set the relative scale of bins with diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHist.html:22702,error,errors,22702,root/html602/RooHist.html,https://root.cern,https://root.cern/root/html602/RooHist.html,8,['error'],['errors']
Availability,"he same number of bins; as this input histogram, but only bins from binmin to binmax will be filled; with the estimated background. Int_t ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003); Interface to TSpectrum::Search.; The function finds peaks in this histogram where the width is > sigma; and the peak maximum greater than threshold*maximum bin content of this.; For more details see TSpectrum::Search.; Note the difference in the default value for option compared to TSpectrum::Search; option="""" by default (instead of ""goff""). TH1* TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); For a given transform (first parameter), fills the histogram (second parameter); with the transform output data, specified in the third parameter; If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created; and the user is responsible for deleting it.; Available options:; ""RE"" - real part of the output; ""IM"" - imaginary part of the output; ""MAG"" - magnitude of the output; ""PH"" - phase of the output. Double_t RetrieveBinContent(Int_t bin) const; raw retrieval of bin content on internal data structure; see convention for numbering bins in TH1::GetBin. void UpdateBinContent(Int_t bin, Double_t content); raw update of bin content on internal data structure; see convention for numbering bins in TH1::GetBin. Int_t AxisChoice(Option_t* axis) const. TH1& operator=(const TH1& ). void FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1). Int_t GetBufferLength() const; {return fBuffer ? (Int_t)fBuffer[0] : 0;}. Int_t GetBufferSize() const; {return fBufferSize;}. const Double_t * GetBuffer() const; {return fBuffer;}. TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetNdivisions(Option_t* axis = ""X"") const. Color_t GetAxisColor(Option_t* axis = ""X"") const. Color_t GetLabelColor(Option_t* axis = ""X"") const. Style_t GetLabelFont(Option_t* axis = ""X"") const. Float_t GetLabelOffset(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:132066,Avail,Available,132066,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['Avail'],['Available']
Availability,"he same pad as if the option `SAME` had been specified. This allows to; 2735compute X and Y scales common to all the histograms, like; 2736`TMultiGraph` does for graphs.; 2737 ; 2738If the option `PADS` is specified, the current pad/canvas is; 2739subdivided into a number of pads equal to the number of histograms and each; 2740histogram is paint into a separate pad.; 2741 ; 2742The following example shows various types of stacks (hstack.C).; 2743 ; 2744Begin_Macro(source); 2745../../../tutorials/hist/hstack.C; 2746End_Macro; 2747 ; 2748The option `nostackb` allows to draw the histograms next to each; 2749other as bar charts:; 2750 ; 2751Begin_Macro(source); 2752{; 2753 auto cst0 = new TCanvas(""cst0"",""cst0"",600,400);; 2754 auto hs = new THStack(""hs"",""Stacked 1D histograms: option #font[82]{\""nostackb\""}"");; 2755 ; 2756 auto h1 = new TH1F(""h1"",""h1"",10,-4,4);; 2757 h1->FillRandom(""gaus"",20000);; 2758 h1->SetFillColor(kRed);; 2759 hs->Add(h1);; 2760 ; 2761 auto h2 = new TH1F(""h2"",""h2"",10,-4,4);; 2762 h2->FillRandom(""gaus"",15000);; 2763 h2->SetFillColor(kBlue);; 2764 hs->Add(h2);; 2765 ; 2766 auto h3 = new TH1F(""h3"",""h3"",10,-4,4);; 2767 h3->FillRandom(""gaus"",10000);; 2768 h3->SetFillColor(kGreen);; 2769 hs->Add(h3);; 2770 ; 2771 hs->Draw(""nostackb"");; 2772 hs->GetXaxis()->SetNdivisions(-10);; 2773 cst0->SetGridx();; 2774}; 2775End_Macro; 2776 ; 2777If at least one of the histograms in the stack has errors, the whole stack is; 2778visualized by default with error bars. To visualize it without errors the; 2779option `HIST` should be used.; 2780 ; 2781Begin_Macro(source); 2782{; 2783 auto cst1 = new TCanvas(""cst1"",""cst1"",700,400);; 2784 cst1->Divide(2,1);; 2785 ; 2786 auto hst11 = new TH1F(""hst11"", """", 20, -10, 10);; 2787 hst11->Sumw2();; 2788 hst11->FillRandom(""gaus"", 1000);; 2789 hst11->SetFillColor(kViolet);; 2790 hst11->SetLineColor(kViolet);; 2791 ; 2792 auto hst12 = new TH1F(""hst12"", """", 20, -10, 10);; 2793 hst12->FillRandom(""gaus"", 500);; 2794 hst12->SetFillColor(kBl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:111310,error,errors,111310,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"he semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:10426,Error,Error,10426,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,4,['Error'],['Error']
Availability,"he separation criterion applied in the node splitting; known: GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB; nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; step size is determined by the events); UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; misclassification error rate); PruneMethod The Pruning method:; known: NoPruning // switch off pruning completely; ExpectedError; CostComplexity; PruneStrength a parameter to adjust the amount of pruning. Should be large enouth such that overtraining is avoided"");. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); the option string is decoded, for available options see ""DeclareOptions"". void SetMinNodeSize(Double_t sizeInPercent). void SetMinNodeSize(TString sizeInPercent). void Init( void ); common initialisation with defaults for the DT-Method. ~MethodDT( void ); destructor. void Train( void ). Double_t PruneTree(); prune the decision tree if requested (good for individual trees that are best grown out, and then; pruned back, while boosted decision trees are best 'small' trees to start with. Well, at least the; standard ""optimal pruning algorithms"" don't result in 'weak enough' classifiers !!. Double_t TestTreeQuality(TMVA::DecisionTree* dt). void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value. void GetHelpMessage() const. const TMVA::Ranking* CreateRanking(). Double_t GetPruneStrength(); { return fPruneStrength; }. Int_t GetNNodesBeforePruning(); {return fTree->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodDT.html:22804,avail,available,22804,root/html534/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodDT.html,2,['avail'],['available']
Availability,"he separation criterion applied in the node splitting; known: GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB; nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; step size is determined by the events); UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; misclassification error rate); PruneMethod The Pruning method:; known: NoPruning // switch off pruning completely; ExpectedError; CostComplexity; PruneStrength a parameter to adjust the amount of pruning. Should be large enouth such that overtraining is avoided"");. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); the option string is decoded, for available options see ""DeclareOptions"". void SetMinNodeSize(Double_t sizeInPercent). void SetMinNodeSize(TString sizeInPercent). void Init( void ); common initialisation with defaults for the DT-Method. ~MethodDT( void ); destructor. void Train( void ). Double_t PruneTree(); prune the decision tree if requested (good for individual trees that are best grown out, and then; pruned back, while boosted decision trees are best 'small' trees to start with. Well, at least the; standard ""optimal pruning algorithms"" don't result in 'weak enough' classifiers !!. Double_t TestTreeQuality(TMVA::DecisionTree* dt). void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value. void GetHelpMessage() const. const TMVA::Ranking* CreateRanking(). MethodDT(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodDT.html:23966,avail,available,23966,root/html602/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodDT.html,4,['avail'],['available']
Availability,"he shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 20010404/150441 At:243649 N=9583 TBasket C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:78446,error,error,78446,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['error'],['error']
Availability,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:68273,error,error,68273,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,8,['error'],['error']
Availability,"he simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:55229,toler,toler,55229,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['toler'],['toler']
Availability,"he specified dataset from the PROOF cluster.; Files are not deleted. Bool_t RequestStagingDataSet(const char* dataset); Allows users to request staging of a particular dataset. Requests are; saved in a special dataset repository and must be honored by the endpoint.; This is the special PROOF-Lite re-implementation of the TProof function; and includes code originally implemented in TProofServ. Bool_t CancelStagingDataSet(const char* dataset); Cancels a dataset staging request. Returns kTRUE on success, kFALSE on; failure. Dataset not found equals to a failure. PROOF-Lite; re-implementation of the equivalent function in TProofServ. TFileCollection * GetStagingStatusDataSet(const char* dataset); Obtains a TFileCollection showing the staging status of the specified; dataset. A valid dataset manager and dataset staging requests repository; must be present on the endpoint. PROOF-Lite version of the equivalent; function from TProofServ. Int_t VerifyDataSet(const char* uri, const char* = 0); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). void SendInputDataFile(); Make sure that the input data objects are available to the workers in a; dedicated file in the cache; the objects are taken from the dedicated list; and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:35041,avail,available,35041,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['avail'],['available']
Availability,"he specified list. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length, TList *slaves);  Broadcast a raw buffer of specified length to all slaves in the specified list. ;  ; Int_t BuildPackage (const char *package, EBuildPackageOpt opt=kBuildAll, Int_t chkveropt=TPackMgr::kCheckROOT, TList *workers=0);  Build specified package. ;  ; Bool_t CheckFile (const char *file, TSlave *sl, Long_t modtime, Int_t cpopt=(kCp|kCpBin));  Check if a file needs to be send to the slave. ;  ; void CleanGDirectory (TList *ol);  Remove links to objects in list 'ol' from gDirectory. ;  ; void ClearDataProgress (Int_t r, Int_t t);  Progress bar for clear data. ;  ; Int_t Collect (const TSlave *sl, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from slave sl. ;  ; Int_t Collect (TMonitor *mon, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t CollectInputFrom (TSocket *s, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect and analyze available input from socket s. ;  ; Bool_t CreateMerger (TSlave *sl, Int_t port);  Create a new merger. ;  ; void DeActivateAsyncInput ();  De-activate a-sync input handler. ;  ; Int_t DisablePackage (const char *package);  Remove a specific package. ;  ; Int_t DisablePackages ();  Remove all packages. ;  ; Int_t Exec (const char *cmd, ESlaves list, Bool_t plusMaster);  Send command to be executed on the PROOF master and/or slaves. ;  ; void FinalizationDone ();  ; Int_t FindNextFreeMerger ();  Return a merger, which is both active and still accepts some workers to be assigned to it. ;  ; TSlave * FindSlave (TSocket *s) const;  Find slave that has TSocket s. Returns 0 in case slave is not found. ;  ; virtual void FindUniqueSlaves ();  Add to the fUniqueSlave list the active slaves that have a unique (user) file system image. ;  ; Int_t GetActiveMergersCount ();  Get the active mergers count. ;  ; TList * GetListOfBadSlaves () const;  ; TList * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:48092,avail,available,48092,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"he specified text file.; The file should contain one url per line; empty lines or lines starting with '#'; (commented lines) are ignored.; If nfiles > 0 only nfiles files are added, starting from file 'firstfile' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); Merge all TFileCollection objects in li into this TFileCollection object.; Updates counters at the end.; Returns the number of merged collections or -1 in case of error. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines). void SetAnchor(const char* anchor); Calls TUrl::SetAnchor() for all URLs contained in all TFileInfos. void SetBitAll(UInt_t f)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFileCollection.html:9056,error,error,9056,root/html532/TFileCollection.html,https://root.cern,https://root.cern/root/html532/TFileCollection.html,2,['error'],['error']
Availability,"he specified text file.; The file should contain one url per line; empty lines or lines starting with '#'; (commented lines) are ignored.; If nfiles > 0 only nfiles files are added, starting from file 'firstfile' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); Merge all TFileCollection objects in li into this TFileCollection object.; Updates counters at the end.; Returns the number of merged collections or -1 in case of error. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines); ""filter:[SsCc]"" invokes PrintDetailed() which prints out dataset; content in a formatted fashion by filtering on files; which ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileCollection.html:9210,error,error,9210,root/html534/TFileCollection.html,https://root.cern,https://root.cern/root/html534/TFileCollection.html,6,['error'],['error']
Availability,"he spread in T for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(T) was the correct error; in the case above, then SQRT(T)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(T)/SQRT(N). Now, is SQRT(T)/SQRT(N) really the correct uncertainty?; that it is only in the case where the T variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, T can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(T)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(T) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer T values for which the; uncertainty is +-0.5, with the assumption that the probability that T; takes any value between T-0.5 and T+0.5 is uniform (the same argument; goes for T uniformly distributed between T and T+1); this would be; useful if T is an ADC measurement, for example. Other, fancier options; would be possible, at the cost of adding one more parameter to the PROFILE2D; For example, if all T variables are distributed according to some; known Gaussian of standard deviation Sigma, then:; 'G' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" Sigma/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; For example, this would be useful when all T's are experimental quantities; measured with the same instrument with precision Sigma. TProfile3D(const TProfile3D& profile); copy constructor. void Add(TF1* h1, Double_t c1 = 1, Option_t* option = """")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProfile3D.html:31629,Error,Errors,31629,root/html532/TProfile3D.html,https://root.cern,https://root.cern/root/html532/TProfile3D.html,1,['Error'],['Errors']
Availability,"he spread in Z for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(Z) was the correct error; in the case above, then SQRT(Z)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(Z)/SQRT(N). Now, is SQRT(Z)/SQRT(N) really the correct uncertainty?; that it is only in the case where the Z variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, Z can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer Z values for which the; uncertainty is +-0.5, with the assumption that the probability that Z; takes any value between Z-0.5 and Z+0.5 is uniform (the same argument; goes for Z uniformly distributed between Z and Z+1); this would be; useful if Z is an ADC measurement, for example. Other, fancier options; would be possible, at the cost of adding one more parameter to the PROFILE2D; For example, if all Z variables are distributed according to some; known Gaussian of standard deviation Sigma, then:; 'G' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" Sigma/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; For example, this would be useful when all Z's are experimental quantities; measured with the same instrument with precision Sigma. TProfile2D(const TProfile2D& profile); Copy constructor. void Add(TF1* h1, Double_t c1 = 1, Option_t* option = """")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProfile2D.html:32082,Error,Errors,32082,root/html532/TProfile2D.html,https://root.cern,https://root.cern/root/html532/TProfile2D.html,1,['Error'],['Errors']
Availability,"he statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:21817,failure,failure,21817,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['failure'],['failure']
Availability,"he status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. Double_t GetCorrelationFactor() const; Return graph correlation factor. Double_t GetCovariance() const; Return covariance of vectors x,y. Double_t GetMean(Int_t axis = 1) const; Return mean value of X (axis=1) or Y (axis=2). Double_t GetRMS(Int_t axis = 1) const; Return RMS of X (axis=1) or Y (axis=2). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It always returns a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:30946,error,errors,30946,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,10,['error'],['errors']
Availability,"he table; if strKey was not equal to any of the string keys in the table. const char * FindStateString(const FontStateMap_t* map, int numKey); Given a lookup table, map a number to a string in the table. If numKey was equal to the numeric key of one of the elements in the; table, returns the string key of that element. Returns NULL if numKey; was not equal to any of the numeric keys in the table. Bool_t FieldSpecified(const char* field); Helper function for ParseXLFD(). Determines if a field in the XLFD was; set to a non-null, non-don't-care value. The return value is kFALSE if the field in the XLFD was not set and; should be ignored, kTRUE otherwise. field -- The field of the XLFD to check. Strictly speaking, only when; the string is ""*"" does it mean don't-care. However, an; unspecified or question mark is also interpreted as don't-care. const char * NameOfFont(TGFont* font); Given a font, return a textual string identifying it. char ** GetFontFamilies(); Return information about the font families that are available on the; current display. An array of strings is returned holding a list of all the available font; families. The array is terminated with a NULL pointer. void FreeFontFamilies(char** f); Delete an array of families allocated GetFontFamilies() method. TGFont * GetFontFromAttributes(FontAttributes_t* fa, TGFont* fontPtr); Given a desired set of attributes for a font, find a font with the; closest matching attributes and create a new TGFont object.; The return value is a pointer to a TGFont object that represents the; font with the desired attributes. If a font with the desired attributes; could not be constructed, some other font will be substituted; automatically. Every call to this procedure returns a new TGFont object, even if the; specified attributes have already been seen before. TGFont * GetNativeFont(const char* name, Bool_t fixedDefault = kTRUE); The return value is a pointer to an TGFont object that represents the; native font. If a native font ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFontPool.html:11338,avail,available,11338,root/html528/TGFontPool.html,https://root.cern,https://root.cern/root/html528/TGFontPool.html,10,['avail'],['available']
Availability,"he this package.; The name of the user’s class to implement the FCNBase interface may be chosen freely (in documentation we give it the generic name \(\mbox{FCN}\)).; 4.1.1 FCNBase::operator()(const std::vector\(<\)double\(>\)&); The meaning of the vector of parameters std::vector\(<\)double\(>\) in the argument of FCNBase::operator() are of course defined by the user, who uses the values of those parameters to calculate his function value. The order and the position of these parameters is strictly the one specified by the user when supplying the starting values for minimization.; The starting values must be specified by the user, either via an std::vector\(<\)double\(>\) or the MnUserParameters (see [api:parameters]) supplied as input to the M minimizers such as VariableMetricMinimizer or MnMigrad (see [api:migrad]). Later values are determined by M as it searches for the minimum or performs whatever analysis is requested by the user.; 4.1.2 FCNBase::up(); [howto:errordef] Returns the value of \(\mbox{up}\) (default value \(= 1.\)), defining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply his own gradient calculator (e.g. analytical derivatives), he needs to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:34721,error,errordef,34721,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['errordef']
Availability,"he titles are part of the persistent histogram. For example if you wanted to write E with a subscript (T) you could use this:; h->GetXaxis()->SetTitle(""E_{T}"");; For a complete explanation of the Latex mathematical expressions, see “Graphics and the Graphical User Interface”. It is also possible to specify the histogram title and the axis titles at creation time. These titles can be given in the “title” parameter. They must be separated by “;”:; TH1F* h=new TH1F(""h"",""Histogram title;X Axis;Y Axis;Z Axis"",; 100,0,1);; Any title can be omitted:; TH1F* h=new TH1F(""h"",""Histogram title;;Y Axis"",100,0,1);; TH1F* h=new TH1F(""h"","";;Y Axis"",100,0,1);; The method SetTitle has the same syntax:; h->SetTitle(""Histogram title;An other X title Axis"");; 3.9 Making a Copy of an Histogram; Like for any other ROOT object derived from TObject , the Clone method can be used. This makes an identical copy of the original histogram including all associated errors and functions:; TH1F *hnew = (TH1F*)h->Clone(); // renaming is recommended,; hnew->SetName(""hnew""); // because otherwise you will have; // two histograms with the same; // name; 3.10 Normalizing Histograms; You can scale a histogram ( TH1 *h ) such that the bins integral is equal to the normalization parameter norm:; Double_t scale = norm/h->Integral();; h->Scale(scale);; 3.11 Saving/Reading Histograms to/from a File; The following statements create a ROOT file and store a histogram on the file. Because TH1 derives from TNamed , the key identifier on the file is the histogram name:; TFile f(""histos.root"",""new"");; TH1F h1(""hgaus"",""histo from a gaussian"",100,-3,3);; h1.FillRandom(""gaus"",10000);; h1->Write();; To read this histogram in another ROOT session, do:; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by:; file->Write();; For a more detailed explanation, see “Input/Output”.; 3.12 Miscellaneous Operations. TH1::KolmogorovTest( TH1* h2,Option_t *option) is statistical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:114634,error,errors,114634,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"he training .. but using the testing events. Double_t AdaBoost(vector<const TMVA::Event*>& , TMVA::DecisionTree* dt); the AdaBoost implementation.; a new training sample is generated by weighting; events that are misclassified by the decision tree. The weight; applied is w = (1-err)/err or more general:; w = ((1-err)/err)^beta; where err is the fraction of misclassified events in the tree ( <0.5 assuming; demanding the that previous selection was better than random guessing); and ""beta"" being a free parameter (standard: beta = 1) that modifies the; boosting. Double_t AdaCost(vector<const TMVA::Event*>& , TMVA::DecisionTree* dt); the AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for; all events... later could be modified to use individual cost matrices for each; events as in the original paper... true_signal true_bkg. sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; sel_bkg | Cts_sb Cbb. and takes this into account when calculating the misclass. cost (former: error fraction):. err = sum_events ( weight* y_true*y_sel * beta(event). Double_t Bagging(); call it boot-strapping, re-sampling or whatever you like, in the end it is nothing; else but applying ""random"" poisson weights to each event. void GetBaggedSubSample(vector<const TMVA::Event*>& ); fills fEventSample with fBaggedSampleFraction*NEvents random training events. Double_t RegBoost(vector<const TMVA::Event*>& , TMVA::DecisionTree* dt); a special boosting only for Regression ...; maybe I'll implement it later... Double_t AdaBoostR2(vector<const TMVA::Event*>& , TMVA::DecisionTree* dt); adaption of the AdaBoost to regression problems (see H.Drucker 1997). void AddWeightsXMLTo(void* parent) const; write weights to XML. void ReadWeightsFromXML(void* parent); reads the BDT from the xml file. void ReadWeightsFromStream(istream& istr); read the weights (BDT coefficients). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). Double_t GetMvaValue(Double_t* err, Double_t* errUpper, U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:32786,error,error,32786,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,6,['error'],['error']
Availability,"he two histograms are interpreted as independent Poisson processes and the ratio; 540/// \f[; 541/// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; 542/// \f]; 543/// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; 544/// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; 545/// is used for \f$n_{2}\f$.; 546///; 547/// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; 548/// of efficiency by a parameter transformation:; 549/// \f[; 550/// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; 551/// \f]; 552///; 553/// The x errors span each histogram bin (lowedge ... lowedge+width); 554/// The y errors depend on the chosen statistic methode which can be determined; 555/// by the options given below. For a detailed description of the used statistic; 556/// calculations please have a look at the corresponding functions!; 557///; 558/// Options:; 559/// - v : verbose mode: prints information about the number of used bins; 560/// and calculated efficiencies with their errors; 561/// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); 562/// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); 563/// - w : Wilson interval (see TEfficiency::Wilson); 564/// - n : normal approximation propagation (see TEfficiency::Normal); 565/// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); 566/// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); 567/// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); 568/// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; 569/// (see TEfficiency::Bayesian); 570/// - mode : use mode of posterior for Bayesian interval (default is mean); 571/// - shortest: use shortest interval (done by default if mode is set); 572/// - central: use central interval (done by default if mode is NOT set); 573/// - pois: interpret histograms as p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:20051,error,errors,20051,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"he use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of dif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html:1299,robust,robust,1299,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html,1,['robust'],['robust']
Availability,"he values of all constant parameters, the value of all floating parameters at RooMinimizer construction and after the last MINUIT operation, the MINUIT status, variance quality, EDM setting, number of calls with evaluation problems, the minimized function value and the full correlation matrix. ; Definition at line 502 of file RooMinimizer.cxx. ◆ saveStatus(). void RooMinimizer::saveStatus ; (; const char * ; label, . int ; status . ). inline . Definition at line 179 of file RooMinimizer.h. ◆ seek(). int RooMinimizer::seek ; (; ). Execute SEEK. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 442 of file RooMinimizer.cxx. ◆ setEps(). void RooMinimizer::setEps ; (; double ; eps). Change MINUIT epsilon. ; Definition at line 226 of file RooMinimizer.cxx. ◆ setErrorLevel(). void RooMinimizer::setErrorLevel ; (; double ; level). Set the level for MINUIT error analysis to the given value. ; This function overrides the default value that is taken in the RooMinimizer constructor from the defaultErrorLevel() method of the input function ; Definition at line 218 of file RooMinimizer.cxx. ◆ setEvalErrorWall(). void RooMinimizer::setEvalErrorWall ; (; bool ; flag). inline . Definition at line 149 of file RooMinimizer.h. ◆ setLogFile(). bool RooMinimizer::setLogFile ; (; const char * ; logf = nullptr). Definition at line 807 of file RooMinimizer.cxx. ◆ setMaxFunctionCalls(). void RooMinimizer::setMaxFunctionCalls ; (; int ; n). Change maximum number of likelihood function class from MINUIT (RooMinimizer default 500 * #parameters) ; Definition at line 207 of file RooMinimizer.cxx. ◆ setMaxIterations(). void RooMinimizer::setMaxIterations ; (; int ; n). Change maximum number of MINUIT iterations (RooMinimizer default 500 * #parameters) ; Definition at line 198 of file RooMinimizer.cxx. ◆ setMinimizerType(). void RooMinimizer::setMinimizerType ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:26646,error,error,26646,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['error'],['error']
Availability,"he values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. bool GetCovMatrix(double* ) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. { return false; }. bool GetHessianMatrix(double* ) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. { return false; }. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minimizer.html:6793,error,errors,6793,root/html530/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minimizer.html,3,['error'],['errors']
Availability,"he values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. { return 0; }. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. { return -1; }. bool GetMinosError(unsigned int , double& errLow, double& errUp, int = 0). minos error for variable i, return false if Minos fail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:6560,error,errors,6560,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,2,['error'],['errors']
Availability,"he variable nmec is a random number and is reset for each entry.; gstep.nmec = (Int_t)(5*gRandom->Rndm());; 12.15.1.3 Filling the Tree; In this emulation of Geant3, we generate and transport particles in a magnetic field and store the particle parameters at each tracking step in a ROOT tree.; 12.15.2 Analysis; In this analysis, we do not read the entire entry we only read one branch. First, we set the address for the branch to the file dstep, and then we use the TBranch::GetEntry method. Then we fill a histogram with the dstep branch entries, draw it and fit it with a Gaussian. In addition, we draw the particle’s path using the three values in the vector. Here we use the TTree::Draw method. It automatically creates a histogram and plots the 3 expressions (see Trees in Analysis). void tree2r() {. // read the Tree generated by tree2w and fill one histogram; // we are only interested by the destep branch. // note that we use ""new"" to create the TFile and TTree objects because we; // want to keep these objects alive when we leave this function; TFile *f = new TFile(""tree2.root"");; TTree *t2 = (TTree*)f->Get(""t2"");; static Float_t destep;; TBranch *b_destep = t2->GetBranch(""destep"");; b_destep->SetAddress(&destep);. //create one histogram; TH1F *hdestep = new TH1F(""hdestep"",""destep in Mev"",100,1e-5,3e-5);; //read only the destep branch for all entries; Int_t nentries = (Int_t)t2->GetEntries();; for (Int_t i=0;i<nentries;i++) {; b_destep->GetEntry(i);; // fill the histogram with the destep entry; hdestep->Fill(destep);; }. // we do not close the file; we want to keep the generated histograms;; // we fill a 3-d scatter plot with the particle step coordinates; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,800);; c1->SetFillColor(42);; c1->Divide(1,2);. c1->cd(1);; hdestep->SetFillColor(45);; hdestep->Fit(""gaus"");. c1->cd(2);; gPad->SetFillColor(37); // continued...; t2->SetMarkerColor(kRed);; t2->Draw(""vect[0]:vect[1]:vect[2]"");; if (gROOT->IsBatch()) return;. // invoke the x3d v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:566810,alive,alive,566810,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['alive'],['alive']
Availability,"he width and height which define the pixmap dimensions . Reimplemented from TVirtualX. ◆ ResizeWindow() [1/2]. void TGWin32VirtualXProxy::ResizeWindow ; (; Int_t ; wid). overridevirtual . Resizes the window ""wid"" if necessary. ; Reimplemented from TVirtualX. ◆ ResizeWindow() [2/2]. void TGWin32VirtualXProxy::ResizeWindow ; (; Window_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Changes the width and height of the specified window ""id"", not including its borders. ; This function does not change the window's upper-left coordinate.; Parameters. [in]idwindow identifier ; [in]w,hthe width and height, which are the interior dimensions of the window after the call completes. . Reimplemented from TVirtualX. ◆ SelectInput(). void TGWin32VirtualXProxy::SelectInput ; (; Window_t ; id, . UInt_t ; evmask . ). overridevirtual . Defines which input events the window is interested in. ; By default events are propagated up the window stack. This mask can also be set at window creation time via the SetWindowAttributes_t::fEventMask attribute. ; Reimplemented from TVirtualX. ◆ SelectWindow(). void TGWin32VirtualXProxy::SelectWindow ; (; Int_t ; wid). overridevirtual . Selects the window ""wid"" to which subsequent output is directed. ; Reimplemented from TVirtualX. ◆ SendEvent(). void TGWin32VirtualXProxy::SendEvent ; (; Window_t ; id, . Event_t * ; ev . ). overridevirtual . Send event ev to window id. ; Reimplemented from TVirtualX.; Definition at line 320 of file TGWin32VirtualXProxy.cxx. ◆ SetCharacterUp(). void TGWin32VirtualXProxy::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Sets character up vector. ; Reimplemented from TVirtualX. ◆ SetClassHints(). void TGWin32VirtualXProxy::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Sets the windows class and resource name. ; Reimplemented from TVirtualX. ◆ SetClipOFF(). void TGWin32VirtualXProxy::SetClipOFF ; (; Int_t ; wid). overridevirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:106442,mask,mask,106442,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"he; file as described in the metadata of TFileInfo. By default the first one; is taken. Int_t ExportFileList(const char* filepath, Option_t* opt = """"); Export TDSetElements files as list of TFileInfo objects in file; 'fpath'. If the file exists already the action fails, unless; 'opt == ""F""'.; Return 0 on success, -1 otherwise. void AddFriend(TDSet* friendset, const char* alias); Add friend dataset to this set. Only possible if the TDSet type is; a TTree or derived class. The friendset will be owned by this class; and deleted in its destructor. void Reset(); Reset or initialize access to the elements. Long64_t GetEntries(Bool_t isTree, const char* filename, const char* path, TString& objname); Returns number of entries in tree or objects in file. Returns -1 in; case of error. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success.; This function accepts a TCut objects as argument.; Use the operator+ to concatenate cuts.; Example:; dset.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success.; For more see TTree::Draw(). void StartViewer(); Start the TTreeViewer on this TTree. TTree* GetTreeHeader(TProof* proof); Returns a tree header containing the branches' structure of the dataset. Bool_t ElementsValid(); Check if all elements are valid. Int_t Remove(TDSetElement* elem, Bool_t deleteElem = kTRUE); Remove TDSetElement 'elem' from the list.; Return 0 on success, -1 if the element is not in the list. void Validate(); Validate the TDSet by opening files. void Lookup(Bool_t removeMissing = kFALSE, TList** missingFiles = 0); Resolve the end-point URL for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:13550,error,error,13550,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,10,['error'],['error']
Availability,"he; parameters of the specified shape.; Return:; A logical indicating whether there was an error in getting this; information. Bool_t GetMaterial(const TString& volumeName, TString& name, Int_t& imat, Double_t& a, Double_t& z, Double_t& density, Double_t& radl, Double_t& inter, TArrayD& par); Returns the Material and its parameters for the volume specified; by volumeName.; Note, Geant3 stores and uses mixtures as an element with an effective; Z and A. Consequently, if the parameter Z is not integer, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume name; Outputs:; TSrting &name Material name; Int_t &imat Material index number; Double_t &a Average Atomic mass of material; Double_t &z Average Atomic number of material; Double_t &dens Density of material [g/cm^3]; Double_t &radl Average radiation length of material [cm]; Double_t &inter Average interaction length of material [cm]; TArrayD &par A TArrayD of user defined parameters.; Return:; kTRUE if no errors. Bool_t GetMedium(const TString& volumeName, TString& name, Int_t& imed, Int_t& nmat, Int_t& isvol, Int_t& ifield, Double_t& fieldm, Double_t& tmaxfd, Double_t& stemax, Double_t& deemax, Double_t& epsil, Double_t& stmin, TArrayD& par); Returns the Medium and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name.; Outputs:; TString &name Medium name; Int_t &nmat Material number defined for this medium; Int_t &imed The medium index number; Int_t &isvol volume number defined for this medium; Int_t &iflield Magnetic field flag; Double_t &fieldm Magnetic field strength; Double_t &tmaxfd Maximum angle of deflection per step; Double_t &stemax Maximum step size; Double_t &deemax Maximum fraction of energy allowed to be lost; to continuous process.; Double_t &epsil Boundary crossing precision; Double_t &stmin Minimum step size allowed; TArrayD &par A TArrayD of user parameters with all of the; parameters of the specified medium.; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:20697,error,errors,20697,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,10,['error'],['errors']
Availability,"heReadCalls(Int_t reads); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTFileCacheRead::Close(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropBranch(TBranch* b, Bool_t subbranches = kFALSE); virtual Int_tDropBranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Long64_tTFileCacheRead::GetBytesRead() const; virtual Long64_tTFileCacheRead::GetBytesReadExtra() const; const TObjArray*GetCachedBranches() const; TTreeCache::EPrefillTypeGetConfiguredPrefillType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEfficiency() const; Double_tGetEfficiencyRel() const; virtual Int_tGetEntryMax() const; virtual Int_tGetEntryMin() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:10641,Error,Error,10641,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['Error'],['Error']
Availability,"heUnzip ; (; TTree * ; tree, . Int_t ; buffersize = 0 . ). Constructor. ; Definition at line 178 of file TTreeCacheUnzip.cxx. ◆ ~TTreeCacheUnzip(). TTreeCacheUnzip::~TTreeCacheUnzip ; (; ). override . Destructor. (in general called by the TFile destructor) ; Definition at line 235 of file TTreeCacheUnzip.cxx. Member Function Documentation. ◆ AddBranch() [1/2]. Int_t TTreeCacheUnzip::AddBranch ; (; const char * ; branch, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: . 0 branch added or already included; -1 on error . Reimplemented from TTreeCache.; Definition at line 260 of file TTreeCacheUnzip.cxx. ◆ AddBranch() [2/2]. Int_t TTreeCacheUnzip::AddBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: . 0 branch added or already included; -1 on error . Reimplemented from TTreeCache.; Definition at line 248 of file TTreeCacheUnzip.cxx. ◆ Class(). static TClass * TTreeCacheUnzip::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeCacheUnzip::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeCacheUnzip::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 159 of file TTreeCacheUnzip.h. ◆ CreateTasks(). Int_t TTreeCacheUnzip::CreateTasks ; (; ). We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ; In TTaskGroup, we use TThreadExecutor to do the actually work of unzipping a group of basket. The purpose of creating TTaskGroup is to avoid competing with main thread. ; Definition at line 613 of file TTreeCacheUnzip.cxx. ◆ DeclFileName(). static const char * TTreeCacheUnzip::DeclFileName ; (; ). inlinestatic . ReturnsName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:27884,error,error,27884,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"heUnzip ; (; TTree * ; tree, . Int_t ; buffersize = 0 . ). Constructor. ; Definition at line 178 of file TTreeCacheUnzip.cxx. ◆ ~TTreeCacheUnzip(). TTreeCacheUnzip::~TTreeCacheUnzip ; (; ). override . Destructor. (in general called by the TFile destructor) ; Definition at line 235 of file TTreeCacheUnzip.cxx. Member Function Documentation. ◆ AddBranch() [1/2]. Int_t TTreeCacheUnzip::AddBranch ; (; const char * ; branch, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: . 0 branch added or already included; -1 on error . Reimplemented from TTreeCache.; Definition at line 260 of file TTreeCacheUnzip.cxx. ◆ AddBranch() [2/2]. Int_t TTreeCacheUnzip::AddBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: . 0 branch added or already included; -1 on error . Reimplemented from TTreeCache.; Definition at line 248 of file TTreeCacheUnzip.cxx. ◆ Class(). static TClass * TTreeCacheUnzip::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeCacheUnzip::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeCacheUnzip::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 159 of file TTreeCacheUnzip.h. ◆ CreateTasks(). Int_t TTreeCacheUnzip::CreateTasks ; (; ). We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ; In TTaskGroup, we use TThreadExecutor to do the actually work of unzipping a group of basket. The purpose of creating TTaskGroup is to avoid competing with main thread. ; Definition at line 614 of file TTreeCacheUnzip.cxx. ◆ DeclFileName(). static const char * TTreeCacheUnzip::DeclFileName ; (; ). inlinestatic . ReturnsName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:27888,error,error,27888,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"hebyshevApprox() [5/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; ChebyshevApprox && ; ). delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:4991,error,error,4991,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,1,['error'],['error']
Availability,"heck and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:11027,error,error,11027,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,2,['error'],['error']
Availability,"heckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; virtual TGeoVolume * Divide (const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""");  Division a la G3. ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Option_t *option="""");  Export this volume to a file. ;  ; Bool_t FindMatrixOfDaughterVolume (TGeoVolume *vol) const;  Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix with its global matrix. ;  ; TGeoNode ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:15440,down,down,15440,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['down'],['down']
Availability,"heckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Option_t *option="""");  Export this volume to a file. ;  ; Bool_t FindMatrixOfDaughterVolume (TGeoVolume *vol) const;  Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix with its global matrix. ;  ; TGeoNode * FindNode (const char *name) const;  search a daughter inside the list of nodes ;  ; void FindOverlaps () const;  loop all nodes marked as overlaps and find overlappi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:12297,down,down,12297,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['down'],['down']
Availability,"heckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(TObject* obj = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDestructor(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = 1, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); voidExecuteDefaultAction(TObject* obj); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBrowserImp*GetBrowserImp() const; TContextMenu*GetContextMenu() const; virtual Option_t*GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetRefreshFlag() const; TObject*GetSelected() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBrowser.html:2119,error,error,2119,root/html602/TBrowser.html,https://root.cern,https://root.cern/root/html602/TBrowser.html,4,['error'],['error']
Availability,"heck_tobj = kFALSE . ). protected . convert object to xml structure and keep this structure in key ; Definition at line 166 of file TKeyXML.cxx. ◆ Streamer(). void TKeyXML::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TKey. ◆ StreamerNVirtual(). void TKeyXML::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TKeyXML.h. ◆ UpdateAttributes(). void TKeyXML::UpdateAttributes ; (; ). update key attributes in key node ; Definition at line 203 of file TKeyXML.cxx. ◆ UpdateObject(). void TKeyXML::UpdateObject ; (; TObject * ; obj). updates object, stored in the node Used for TDirectory data update ; Definition at line 218 of file TKeyXML.cxx. ◆ WriteFile(). Int_t TKeyXML::WriteFile ; (; Int_t ; cycle = 1, . TFile * ; f = nullptr . ). inlinefinalvirtual . Write the encoded object supported by this key. ; The function returns the number of bytes committed to the file. If a write error occurs, the number of bytes returned is -1. ; Reimplemented from TKey.; Definition at line 57 of file TKeyXML.h. ◆ XMLEngine(). TXMLEngine * TKeyXML::XMLEngine ; (; ). protected . return pointer on TXMLEngine object, used for xml conversion ; Definition at line 389 of file TKeyXML.cxx. ◆ XmlReadAny(). void * TKeyXML::XmlReadAny ; (; void * ; obj, . const TClass * ; expectedClass . ). protected . read object from key and cast to expected class ; Definition at line 334 of file TKeyXML.cxx. Member Data Documentation. ◆ fKeyId. Long64_t TKeyXML::fKeyId {0}. protected . node with stored object ; Definition at line 77 of file TKeyXML.h. ◆ fKeyNode. XMLNodePointer_t TKeyXML::fKeyNode {nullptr}. protected . Definition at line 76 of file TKeyXML.h. ◆ fSubdir. Bool_t TKeyXML::fSubdir {kFALSE}. protected . unique identifier of key for search methods ; Definition at line 78 of file TKeyXML.h. Libraries for TKeyXML:. [legend]; The documentation for this class was generated from the following files:; io/xml/inc/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:24848,error,error,24848,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,1,['error'],['error']
Availability,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:8824,error,errors,8824,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,6,['error'],['errors']
Availability,"hed); boolfSumLargerValuesp-value for velues of testStat >= testStat_data (or testStat <= testStat_data); vector<double>fTestStat_bvector of results for B-only toy-MC; doublefTestStat_dataresults (test statistics) evaluated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult(const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:9725,error,error,9725,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,20,['error'],['error']
Availability,"hemaRulestatic; Class_Version()ROOT::TSchemaRuleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideROOT::TSchemaRulevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Conflicts(const TSchemaRule *rule) constROOT::TSchemaRule; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::TSchemaRuleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttributesROOT::TSchemaRuleprivate; fBitsTObjectprivate; fChecksumROOT::TSchemaRuleprivate; fChecksumVectROOT::TSchemaRulemutableprivate; fCodeROOT::TSchemaRuleprivate; fEmbedROOT::TSchemaRuleprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIncludeROOT::TSchemaRuleprivate; fIncludeVectROOT::TSchemaRulemutableprivate; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fReadFuncPtrROOT::TSchemaRuleprivate; fReadRawFuncPtrROOT::TSchemaRuleprivate; fRuleTypeROOT::TSchemaRuleprivate; fSourceROOT::TSchemaRuleprivate; fSourceClassROOT::TSchemaRuleprivate; fSourceVectROOT::TSchemaRulemutableprivate; fTargetROOT::TSchemaRuleprivate; fTargetClassROOT::TSchemaRuleprivate; fTargetVectROOT::TSchemaRulemutableprivate; fUniqueIDTObjectpri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:1503,error,error,1503,doc/master/classROOT_1_1TSchemaRule-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html,2,['error'],['error']
Availability,"hemselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:6940,error,error,6940,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,8,['error'],['error']
Availability,"hen handling error %u - fall back to default"",; 4408 status);; 4409#if !defined(NO_FILESYSTEMS); 4410 } else {; 4411 /* Send user defined error pages, if defined */; 4412 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4413 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4414 page_handler_found = 0;; 4415 ; 4416 if (error_handler != NULL) {; 4417 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4418 switch (scope) {; 4419 case 1: /* Handler for specific error, e.g. 404 error */; 4420 mg_snprintf(conn,; 4421 &truncated,; 4422 path_buf,; 4423 sizeof(path_buf) - 32,; 4424 ""%serror%03u."",; 4425 error_handler,; 4426 status);; 4427 break;; 4428 case 2: /* Handler for error group, e.g., 5xx error; 4429 * handler; 4430 * for all server errors (500-599) */; 4431 mg_snprintf(conn,; 4432 &truncated,; 4433 path_buf,; 4434 sizeof(path_buf) - 32,; 4435 ""%serror%01uxx."",; 4436 error_handler,; 4437 status / 100);; 4438 break;; 4439 default: /* Handler for all errors */; 4440 mg_snprintf(conn,; 4441 &truncated,; 4442 path_buf,; 4443 sizeof(path_buf) - 32,; 4444 ""%serror."",; 4445 error_handler);; 4446 break;; 4447 }; 4448 ; 4449 /* String truncation in buf may only occur if; 4450 * error_handler is too long. This string is; 4451 * from the config, not from a client. */; 4452 (void)truncated;; 4453 ; 4454 /* The following code is redundant, but it should avoid; 4455 * false positives in static source code analyzers and; 4456 * vulnerability scanners.; 4457 */; 4458 path_buf[sizeof(path_buf) - 32] = 0;; 4459 len = (int)strlen(path_buf);; 4460 if (len > (int)sizeof(path_buf) - 32) {; 4461 len = (int)sizeof(path_buf) - 32;; 4462 }; 4463 ; 4464 /* Start with the file extenstion from the configuration. */; 4465 tstr = strchr(error_page_file_ext, '.');; 4466 ; 4467 while (tstr) {; 4468 for (i = 1;; 4469 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4470 i++) {; 4471 /* buffer overrun is not possible here, since; 4472 * (i < 32) && (len < sizeof(path_buf) -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:132775,error,errors,132775,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"hen handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while (tstr) {; 4469 for (i = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:132807,error,errors,132807,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"hen only the distribution parameters; are changed in the subsequent calls.; If the same TUnuran object is used to generate with other distributions it cannot be used. bool ReInitDiscrDist(unsigned int npar, double* params). Reinitialize UNURAN by changing the distribution parameters but mantaining same distribution and method; It is implemented now only for predefined discrete distributions like the poisson or the binomial. double Sample(). Sample 1D distribution; User is responsible for having previously correctly initialized with TUnuran::Init. bool SampleMulti(double* x). Sample multidimensional distributions; User is responsible for having previously correctly initialized with TUnuran::Init. int SampleDiscr(). Sample discrete distributions; User is responsible for having previously correctly initialized with TUnuran::Init. void SetRandom(TRandom* r). set the random engine.; Must be called before init to have effect. TRandom * GetRandom(). return instance of the random engine used. void SetSeed(unsigned int seed). set the seed for the random number generator. bool SetLogLevel(unsigned int iflag = 1). set log level. bool SetLogStream(). set stream for log and error (not yet implemented). { return false;}. const std::string & MethodName() const. used Unuran method. { return fMethod; }. bool SetRandomGenerator(). bool SetContDistribution(const TUnuranContDist& dist). bool SetMultiDistribution(const TUnuranMultiContDist& dist). bool SetDiscreteDistribution(const TUnuranDiscrDist& dist). bool SetEmpiricalDistribution(const TUnuranEmpDist& dist). bool SetMethodAndInit(). change the method and initialize Unuran with the previously given distribution. » Author: L. Moneta Tue Sep 26 16:25:09 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/unuran:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnuran.html:7851,error,error,7851,root/html534/TUnuran.html,https://root.cern,https://root.cern/root/html534/TUnuran.html,2,['error'],['error']
Availability,"hen when the integral was computed. NB Only valid for 1-d histograms. Use GetRandom2 or 3 otherwise. If the histogram has a bin with negative content a NaN is returned ; Definition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:172757,error,error,172757,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"her); RooTObjWrap(TObject* inObj, Bool_t isArray = kFALSE); virtual~RooTObjWrap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTObjWrap.html:1474,error,error,1474,root/html526/RooTObjWrap.html,https://root.cern,https://root.cern/root/html526/RooTObjWrap.html,7,['error'],['error']
Availability,"her); virtual TVirtualGeoTrack*AddDaughter(Int_t id, Int_t pdgcode, TObject* particle = 0); virtual voidAddPoint(Double_t x, Double_t y, Double_t z, Double_t t); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVirtualGeoTrack*FindTrackWithId(Int_t id) const; TVirtualGeoTrack*GetDaughter(Int_t index) const; virtual Int_tGetDaughterId(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const Double_t*GetFirstPoint() const; virtual const char*TObject::GetIconName() const; Int_tGetId() const; const Double_t*GetLastPoint() const; Int_tGetLastPoint(Double_t& x, Double_t& y, Double_t& z, Double_t& t) const; virtual Color_tTAttLine::GetLineColor() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualGeoTrack.html:1914,Error,Error,1914,root/html532/TVirtualGeoTrack.html,https://root.cern,https://root.cern/root/html532/TVirtualGeoTrack.html,4,['Error'],['Error']
Availability,"here are data points, or that the parametrization of the fit contains a linear dependence. If this is the case, then M (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the underdeterminedness by reformulating the parametrization. M cannot do this itself, but it can provide some hints (contours, global correlation coefficients, eigenvalues) which can help the clever user to find out what is wrong.; Numerical inaccuracies. It is possible that the apparent lack of positive–definiteness is in fact only due to excessive roundoff errors in numerical calculations, either in \(\mbox{FCN}\) or in M . This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non–positive–definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious. 6.7 Additional trouble–shooting; When M just doesn’t work, some of the more common causes are:. Precision mismatch. Make sure your \(\mbox{FCN}\) uses internally the same precision as M .; If the problem is only one of precision, and not of word length mismatch, an appropriate MnMachinePrecision::setPrecision() may fix it.; Trivial bugs in \(\mbox{FCN}\). The possibilities for bugs are numerous. Probably the most common among physicists inexperienced in is the confusion between double and int types, which you can sometimes get away with, but not always. 3 M can spot some trivial bugs itself, and issues a warning when it detects an unusual \(\mbox{FCN}\) behaviour. Such a warning should be taken seriously.; M also offers some tools (especially \(\mbox{SCAN}\)) which can help the user to find trivial bugs.; An ill–posed problem. For questions of parameter dependence, see the discussion above on p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:78475,error,error,78475,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"here; 2424 if (el_set.insert(tmp).second && !tmp.empty()) {; 2425 el_list.push_back(tmp);; 2426 added = true;; 2427 }; 2428 }; 2429 ; 2430 return added;; 2431}; 2432 ; 2433////////////////////////////////////////////////////////////////////////////////; 2434 ; 2435int ExtractClassesListAndDeclLines(RScanner &scan,; 2436 std::list<std::string> &classesList,; 2437 std::list<std::string> &classesListForRootmap,; 2438 std::list<std::string> &fwdDeclarationsList,; 2439 const cling::Interpreter &interpreter); 2440{; 2441 // Loop on selected classes. If they don't have the attribute ""rootmap""; 2442 // set to ""false"", store them in the list of classes for the rootmap; 2443 // Returns 0 in case of success and 1 in case of issues.; 2444 ; 2445 // An unordered_set to keep track of the existing classes.; 2446 // We want to avoid duplicates there as they may hint to a serious corruption; 2447 std::unordered_set<std::string> classesSet;; 2448 std::unordered_set<std::string> outerMostClassesSet;; 2449 ; 2450 std::string attrName, attrValue;; 2451 bool isClassSelected;; 2452 std::unordered_set<std::string> availableFwdDecls;; 2453 std::string fwdDeclaration;; 2454 for (auto const & selVar : scan.fSelectedVariables) {; 2455 fwdDeclaration = """";; 2456 int retCode = ROOT::TMetaUtils::AST2SourceTools::EncloseInNamespaces(*selVar, fwdDeclaration);; 2457 if (retCode == 0) ProcessAndAppendIfNotThere(fwdDeclaration, fwdDeclarationsList, availableFwdDecls);; 2458 }; 2459 ; 2460 for (auto const & selEnum : scan.fSelectedEnums) {; 2461 fwdDeclaration = """";; 2462 int retCode = ROOT::TMetaUtils::AST2SourceTools::EncloseInNamespaces(*selEnum, fwdDeclaration);; 2463 if (retCode == 0) ProcessAndAppendIfNotThere(fwdDeclaration, fwdDeclarationsList, availableFwdDecls);; 2464 }; 2465 ; 2466 // Loop on selected classes and put them in a list; 2467 for (auto const & selClass : scan.fSelectedClasses) {; 2468 isClassSelected = true;; 2469 const clang::RecordDecl *rDecl = selClass.GetRecordDecl();; 2470 st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:96783,avail,availableFwdDecls,96783,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['avail'],['availableFwdDecls']
Availability,"heritance; Inherited Members; Includes; Libraries. Function documentation; Chebyshev(const ROOT::Math::IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. Chebyshev(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const Chebyshev &); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Chebyshev.html:2492,error,error,2492,root/html526/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"heritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph2DErrors.html:13314,error,errors,13314,root/html530/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html530/TGraph2DErrors.html,3,['error'],['errors']
Availability,"herited Members; Includes; Libraries. Function documentation; TBuffer3D(Int_t type, UInt_t reqPnts = 0, UInt_t reqPntsCapacity = 0, UInt_t reqSegs = 0, UInt_t reqSegsCapacity = 0, UInt_t reqPols = 0, UInt_t reqPolsCapacity = 0); Destructor; Construct from supplied shape type and raw sizes. ~TBuffer3D(); Destructor. void Init(); Initialise buffer. void ClearSectionsValid(); Clear any sections marked valid. void SetLocalMasterIdentity(); Set kRaw tesselation section of buffer with supplied sizes; Set fLocalMaster in section kCore to identity. void SetAABoundingBox(const Double_t[3] origin, const Double_t[3] halfLengths); Set fBBVertex in kBoundingBox section to a axis aligned (local) BB; using supplied origin and box half lengths. 7-------6; /| /|; 3-------2 |; | 4-----|-5; |/ |; 0-------1. Bool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); Set kRaw tesselation section of buffer with supplied sizes. UInt_t GetCSLevel(); return CS level. void IncCSLevel(); increment CS level. UInt_t DecCSLevel(); decrement CS level. TBuffer3D(const TBuffer3D& ); Non-copyable class. const TBuffer3D & operator=(const TBuffer3D& ). void SetSectionsValid(UInt_t mask); Section validity flags. { fSections |= mask & kAll; }. Bool_t SectionsValid(UInt_t mask) const; { return (Bool_t) (GetSections(mask) == mask); }. UInt_t GetSections(UInt_t mask) const; { return (UInt_t) (fSections & mask); }. UInt_t NbPnts() const; { return fNbPnts; }. UInt_t NbSegs() const; { return fNbSegs; }. UInt_t NbPols() const; { return fNbPols; }. Int_t Type() const; SECTION: kCore. { return fType; }. » Author: Olivier Couet 05/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBuffer3D.h,v 1.00 » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBuffer3D.html:17777,mask,mask,17777,root/html604/TBuffer3D.html,https://root.cern,https://root.cern/root/html604/TBuffer3D.html,14,['mask'],['mask']
Availability,"herited Members; Includes; Libraries. Function documentation; TBuffer3D(Int_t type, UInt_t reqPnts = 0, UInt_t reqPntsCapacity = 0, UInt_t reqSegs = 0, UInt_t reqSegsCapacity = 0, UInt_t reqPols = 0, UInt_t reqPolsCapacity = 0); Destructor; Construct from supplied shape type and raw sizes. ~TBuffer3D(); Destructor. void Init(); Initialise buffer. void ClearSectionsValid(); Clear any sections marked valid. void SetLocalMasterIdentity(); Set kRaw tesselation section of buffer with supplied sizes; Set fLocalMaster in section kCore to identity. void SetAABoundingBox(const Double_t[3] origin, const Double_t[3] halfLengths); Set fBBVertex in kBoundingBox section to a axis aligned (local) BB; using supplied origin and box half lengths. 7-------6; /| /|; 3-------2 |; | 4-----|-5; |/ |; 0-------1. Bool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); Set kRaw tesselation section of buffer with supplied sizes. UInt_t GetCSLevel(); return CS level. void IncCSLevel(); increment CS level. UInt_t DecCSLevel(); decrement CS level. TBuffer3D(const TBuffer3D& ); Non-copyable class. const TBuffer3D & operator=(const TBuffer3D& ). void SetSectionsValid(UInt_t mask); Section validity flags. { fSections |= mask & kAll; }. Bool_t SectionsValid(UInt_t mask) const; { return (Bool_t) (GetSections(mask) == mask); }. UInt_t GetSections(UInt_t mask) const; { return (UInt_t) (fSections & mask); }. UInt_t NbPnts() const; { return fNbPnts; }. UInt_t NbSegs() const; { return fNbSegs; }. UInt_t NbPols() const; { return fNbPols; }. Int_t Type() const; SECTION: kCore. { return fType; }. » Author: Olivier Couet 05/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBuffer3D.h,v 1.00 » Last generated: 2015-06-30 14:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer3D.html:17777,mask,mask,17777,root/html602/TBuffer3D.html,https://root.cern,https://root.cern/root/html602/TBuffer3D.html,14,['mask'],['mask']
Availability,"herited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:13829,error,errors,13829,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['errors']
Availability,"herited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TThread (const TThread &)=delete;  ; void Constructor ();  Common thread constructor. ;  ; void DoError (Int_t level, const char *location, const char *fmt, va_list va) const override;  Interface to ErrorHandler. ;  ; void ErrorHandler (int level, const char *location, const char *fmt, va_list ap) const;  Thread specific error handler function. ;  ; TThread & operator= (const TThread &)=delete;  ; void SetComment (const char *txt=nullptr);  . Static Private Member Functions; static void AfterCancel (TThread *th);  Static method which is called after the thread has been canceled. ;  ; static void * Function (void *ptr);  Static method which is called by the system thread function and which in turn calls the actual user function. ;  ; static void ** GetTls (Int_t k);  Static method that initializes the TLS array of a thread and returns the reference to a given position in that array. ;  ; static void Init ();  Initialize global state and variables once. ;  ; static Int_t XARequest (const char *xact, Int_t nb, void **ar, Int_t *iret);  Static method used to allow commands to be executed by the main thread. ;  . Private Attributes; void * fClean;  ; char fComment [100];  ; Bool_t fDetached;  ; VoidRtnFunc_t fFcnRetn;  ; VoidFunc_t fFcnVoid;  ; Longptr_t fHandle; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:15436,error,error,15436,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"herited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TXMLParser; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:16853,error,error,16853,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,1,['error'],['error']
Availability,"herited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TXMLParser; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:14956,error,error,14956,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['error'],['error']
Availability,"hes ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(). RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:36737,error,error,36737,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,1,['error'],['error']
Availability,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooHistConstraint Class ReferenceRooFit » RooFit. ; The RooHistConstraint implements constraint terms for a binned PDF with statistical uncertainties. ; Following the Barlow-Beeston method, it adds Poisson constraints for each bin that constrain the statistical uncertainty of the template histogram.; It can therefore be used to estimate the Monte Carlo uncertainty of a fit.; Check also the tutorial rf709_BarlowBeeston.C ; Definition at line 17 of file RooHistConstraint.h. Public Member Functions;  RooHistConstraint ();  ;  RooHistConstraint (const char *name, const char *title, const RooArgSet &phfSet, int threshold=1000000);  Create a new RooHistConstraint. ;  ;  RooHistConstraint (const RooHistConstraint &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double getLogVal (const RooArgSet *set=nullptr) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; bool selfNormalized () const override;  It makes only sense to use the RooHistConstraint when normalized over the set of all gammas, in which case it is self-normalized because the used TMath::Poisson function is normalized. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:1224,error,error,1224,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['error'],['error']
Availability,"hese characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(const TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort. Bool_t CompareX(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fX[left] > fX[right]. Can be used by Sort. Bool_t CompareY(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fY[left] > fY[right]. Can be used by Sort. Bool_t CompareRadius(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s distance to origin is bigger than; that of point number ""right"". Can be used by Sort. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute the x/y range of the points in this graph. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:17243,error,errors,17243,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,2,['error'],['errors']
Availability,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:11886,error,error,11886,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,6,['error'],['error']
Availability,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:21321,error,error,21321,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,15,['error'],['error']
Availability,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:31638,error,error,31638,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,9,['error'],['error']
Availability,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:28842,error,error,28842,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['error'],['error']
Availability,"hey are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:2797,error,error,2797,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['error'],['error']
Availability,"hi2, Double_t theta3, Double_t phi3); virtual~TGeoRotation(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidFastRotZ(Double_t* sincos); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetAngles(Double_t& phi, Double_t& theta, Double_t& psi) const; voidGetAngles(Double_t& theta1, Double_t& phi1, Double_t& theta2, Double_t& phi2, Double_t& theta3, Double_t& phi3) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; voidGetInverse(Double_t* invmat) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotation.html:8330,error,error,8330,root/html528/TGeoRotation.html,https://root.cern,https://root.cern/root/html528/TGeoRotation.html,2,['error'],['error']
Availability,"hi2, Double_t theta3, Double_t phi3); virtual~TGeoRotation(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidFastRotZ(const Double_t* sincos); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetAngles(Double_t& phi, Double_t& theta, Double_t& psi) const; voidGetAngles(Double_t& theta1, Double_t& phi1, Double_t& theta2, Double_t& phi2, Double_t& theta3, Double_t& phi3) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; voidGetInverse(Double_t* invmat) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoRotation.html:8330,error,error,8330,root/html532/TGeoRotation.html,https://root.cern,https://root.cern/root/html532/TGeoRotation.html,4,['error'],['error']
Availability,"hi^{2} \f$.; 1989///; 1990/// #### References:; 1991///; 1992/// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; 1993/// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; 1994/// Series No. 1, London.; 1995/// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; 1996/// of weighted and unweighted histograms. Statistical Problems in Particle; 1997/// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; 1998/// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; 1999/// Gagunashvili,N., Comparison of weighted and unweighted histograms,; 2000/// arXiv:physics/0605123, 2006.; 2001/// - [3] Cramer, H., 1946. Mathematical methods of statistics.; 2002/// Princeton University Press, Princeton.; 2003/// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; 2004/// Biometrics 29, 205-220.; 2005/// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; 2006/// test in 2xN tables. Biometrics 21, 19-33.; 2007/// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; 2008/// John Wiley & Sons Inc., New York.; 2009 ; 2010Double_t TH1::Chi2Test(const TH1* h2, Option_t *option, Double_t *res) const; 2011{; 2012 Double_t chi2 = 0;; 2013 Int_t ndf = 0, igood = 0;; 2014 ; 2015 TString opt = option;; 2016 opt.ToUpper();; 2017 ; 2018 Double_t prob = Chi2TestX(h2,chi2,ndf,igood,option,res);; 2019 ; 2020 if(opt.Contains(""P"")) {; 2021 printf(""Chi2 = %f, Prob = %g, NDF = %d, igood = %d\n"", chi2,prob,ndf,igood);; 2022 }; 2023 if(opt.Contains(""CHI2/NDF"")) {; 2024 if (ndf == 0) return 0;; 2025 return chi2/ndf;; 2026 }; 2027 if(opt.Contains(""CHI2"")) {; 2028 return chi2;; 2029 }; 2030 ; 2031 return prob;; 2032}; 2033 ; 2034////////////////////////////////////////////////////////////////////////////////; 2035/// The computation routine of the Chisquare test. For the method description,; 2036/// see Chi2Test() function.; 2037///; 2038/// \re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:82007,robust,robustness,82007,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['robust'],['robustness']
Availability,"hics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:7868,error,error,7868,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,6,['error'],['error']
Availability,"hicsLibs(); virtual voidMakeBatch(); voidTObject::MakeZombie(); static TApplication*Open(const char* url, Int_t debug, const char* script); static Int_tParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); voidSetSignalHandler(TSignalHandler* sh). private:. TApplication(const TApplication&); TApplication&operator=(const TApplication&). Data Members; public:. enum EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*fgApplicationsList of available applications. private:. TApplicationImp*fAppImp!Window system specific application implementation; Int_tfArgcNumber of com mand line arguments; char**fArgvCommand line arguments; TObjArray*fFilesArray of input files (TObjString's) specified via argv; TStringfIdleCommandCommand to execute while application is idle; TTimer*fIdleTimerIdle timer; Bool_tfIsRunningTrue when in event loop (Run() has been called); Bool_tfNoLogDo not process logon and logoff macros; Bool_tfNoLogoDo not show splash screen and welcome message; Bool_tfQuitExit after having processed input files; Bool_tfReturnFromRunWhen true return from Run(); TSignalHandler*fSigHandlerInterrupt handler; TStringfWorkDirWorking directory specified via argv; static Bool_tfgGraphInitTrue if graphics libs initialized; static Bool_tfgGraphNeeded",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:11201,avail,available,11201,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,1,['avail'],['available']
Availability,"hifts are taken; as one-sigma effects when switchig on a given error soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:1661,error,errors,1661,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,4,['error'],['errors']
Availability,"hifts of each source). unfold.GetDeltaSysBackgroundScale(bgr1shifts,""bgr1"");; unfold.GetDeltaSysBackgroundScale(bgr2shifts,""bgr2"");; unfold.GetDeltaSysSource(sys1shifts,""syserror1"");; unfold.GetDeltaSysSource(sys2shifts,""syserror2"");. retreive errors from uncorrelated sources; In the example, there are four sources of uncorrelated error; * the input vector (statistical errors of the data); * the input matrix histA (Monte Carlo statistical errors); * the errors on bgr1 (Monte Carlo statistical errors); * the errors on bgr2 (Monte Carlo statistical errors); These errors are returned as error matrices. unfold.GetEmatrixInput(stat_error);; unfold.GetEmatrixSysUncorr(uncorr_sys);; unfold.GetEmatrixSysBackgroundUncorr(bgr1uncorr,""bgr1"");; unfold.GetEmatrixSysBackgroundUncorr(bgr2uncorr,""bgr2"");. Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the .GetEmatrixXXX methods is set to kFALSE, the; histogram is not cleared, but the error matrix is simply added.; Example: add all errors from background subtraction. unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr1"",0,kTRUE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr1"",0,kFALSE);; unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr2"",0,kFALSE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr2"",0,kFALSE);. There is a special function to get the total error:; unfold.GetEmatrixTotal(err_total);. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintNone); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:5082,error,error,5082,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,4,['error'],['error']
Availability,"higgs"")""); .Histo1D<float>(ROOT::RDF::TH1DModel(""higgs"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; auto df_zz = df_mc.Filter(""sample_category == \""zz\""""); .Histo1D<float>(ROOT::RDF::TH1DModel(""zz"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; auto df_other = df_mc.Filter(""sample_category == \""other\""""); .Histo1D<float>(ROOT::RDF::TH1DModel(""other"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; ; // Book the invariant mass histogram for the data; auto df_h_mass_data = df_analysis.Filter(""reweighting == false""); .Filter(""sample_category == \""data\""""); .Define(""weight_"", []() { return 1; }); .Histo1D<float>(ROOT::RDF::TH1DModel(""data"", ""m4l"", 24, 80, 170), ""m4l"", ""weight_"");; ; // Evaluate the systematic uncertainty; ; // The systematic uncertainty in this analysis is the MC scale factor uncertainty that depends on lepton; // kinematics such as pT or pseudorapidity.; // Muons uncertainties are negligible, as stated in https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/MUON; // Electrons uncertainties are evaluated based on the plots available in https://doi.org/10.48550/arXiv.1908.0; // The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values; // covered by the analysis.; const std::vector<double> x{5.50e3, 5.52e3, 12.54e3, 17.43e3, 22.40e3, 27.48e3, 30e3, 10000e3};; const std::vector<double> y{0.06628, 0.06395, 0.06396, 0.03372, 0.02441, 0.01403, 0, 0};; TGraph graph(x.size(), x.data(), y.data());; ; // Use the Vary method to add the systematic variations to the total MC scale factor (""weight"") of the analysis; // The input consists of the input column to be varied and the lambda function to compute the systematic variations.; // The new output columns contain the varied values of the input column.; auto df_with_variations_mc =; df_mc; .Vary(""weight"",; [&graph](double x, const RVecF &pt, const RVec<unsigned int> &type) {; const auto v = Mean(Map(pt[type == 11], [&graph](auto p) { return graph.Eval(p); }));; return RVec<double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:8138,avail,available,8138,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['avail'],['available']
Availability,"highdSorted.end(), fEYhighd + low);; 706 ; 707 TGraph::UpdateArrays(sorting_indices, numSortedPoints, low);; 708}; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition RSha256.hxx:105; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TF1.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TGraphBentErrors.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TF11-Dim function classDefinition TF1.h:233; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25; TGraphBentErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, and fEYhighd array...Definition TGraphBentErrors.cxx:665; TGraphBentErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphBentErrors.cxx:551; TGraphBentErrors::TGraphBentErrorsTGraphBentErrors()TGraphBentErrors default constructor.Definition TGraphBentErrors.cxx:62; TGraphBentErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphBentErrors.h:80; TGraphBentErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphBentErrors.h:31; TGraphBentErrors::fEXlowdDouble_t * fEXlowd[fNpoints] array of X low displacementsDefinition TGraphBentErrors.h:33; TGraphBen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:25690,error,error,25690,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['error']
Availability,"hile (ndyn) {; 1906 Double_t wdyn = TMath::Abs((wmax-wmin)/ndyn);; 1907 if (wdyn <= 0.999 && na < maxDigits-2) {; 1908 na++;; 1909 ndyn /= 10;; 1910 }; 1911 else break;; 1912 }; 1913// if1 and if2 are the two digits defining the format used to produce the; 1914// labels. The format used will be %[if1].[if2]f .; 1915// if1 and if2 are positive (small) integers.; 1916 if2 = na;; 1917 if1 = TMath::Max(nf+na,maxDigits)+1;; 1918L110:; 1919 if (TMath::Min(wmin,wmax) < 0)if1 = if1+1;; 1920 if1 = TMath::Min(if1,32);; 1921 ; 1922// In some cases, if1 and if2 are too small....; 1923 while (dwlabel < TMath::Power(10,-if2)) {; 1924 if1++;; 1925 if2++;; 1926 }; 1927 if (if1 > 14) if1 = 14;; 1928 if (if2 > 14) if2 = 14;; 1929 if (if1 < 0) if1 = 0;; 1930 int len = 0;; 1931 if (if2 > 0) {; 1932 len = snprintf(chcoded,sizeof(chcoded),""%%%d.%df"",if1,if2);; 1933 } else {; 1934 len = snprintf(chcoded,sizeof(chcoded),""%%%d.%df"",if1+1,1);; 1935 }; 1936 // check improbable error condition, suppress gcc9 warnings; 1937 if ((len < 0) || (len >= (int) sizeof(chcoded))); 1938 strcpy(chcoded,""%7.3f"");; 1939 }; 1940 ; 1941// We draw labels; 1942 ; 1943 snprintf(chtemp,256,""%g"",dwlabel);; 1944 Int_t ndecimals = 0;; 1945 if (optionDecimals) {; 1946 char *dot = strchr(chtemp,'.');; 1947 if (dot) {; 1948 ndecimals = chtemp + strlen(chtemp) -dot;; 1949 } else {; 1950 char *exp;; 1951 exp = strstr(chtemp,""e-"");; 1952 if (exp) {; 1953 sscanf(&exp[2],""%d"",&ndecimals);; 1954 ndecimals++;; 1955 }; 1956 }; 1957 }; 1958 if (optionM) nlabels = n1a-1;; 1959 else nlabels = n1a;; 1960 wTimeIni = wlabel;; 1961 for ( k=0; k<=nlabels; k++) {; 1962 if (fFunction) {; 1963 Double_t xf = binLow+Double_t(k*nn2)*dxtick;; 1964 Double_t zz = fFunction->Eval(xf)-rwmi;; 1965 wlabel = xf;; 1966 xlabel = zz* axis_length / TMath::Abs(rwma-rwmi);; 1967 } else {; 1968 xlabel = dxlabel*k;; 1969 }; 1970 if (optionM) xlabel += 0.5*dxlabel;; 1971 ; 1972 axis_value = wlabel;; 1973 ; 1974 if (!optionText && !optionTime) {; 1975 snprin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:66003,error,error,66003,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['error'],['error']
Availability,"hing...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; THistPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The histogram painter class. ; Implements all histograms' drawing's options. Introduction; Histograms' plotting options; Options supported for 1D and 2D histograms; Options supported for 1D histograms; Options supported for 2D histograms; Options supported for 3D histograms; Options supported for histograms' stacks (THStack). Setting the Style; Setting line, fill, marker, and text attributes; Setting Tick marks on the histogram axis; Giving titles to the X, Y and Z axis; The option ""SAME""; Limitations. Colors automatically picked in palette; Superimposing two histograms with different scales in the same pad; Statistics Display; Fit Statistics; The error bars options; The bar chart option; The ""BAR"" and ""HBAR"" options; The SCATter plot option (legacy draw option); The ARRow option; The BOX option; The COLor option (default for 2D and 3D histograms); The CANDLE and VIOLIN options; The CANDLE option; The VIOLIN option. The TEXT and TEXTnn Option; The CONTour options; The LIST option; The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL; General information: plot types and supported options; TH3 as color boxes; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Intera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:1036,error,error,1036,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"hing...; No Matches. Namespaces ; ratioplot.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Display two histograms and their ratio. ; This program illustrates how to plot two histograms and their ratio on the same canvas. Original macro by Olivier Couet.; ; from ROOT import TCanvas, TColor, TGaxis, TH1F, TPad; from ROOT import kBlack, kBlue, kRed; ; ; def createH1():; h1 = TH1F(""h1"", (""Two gaussian plots and their ratio; x title; h1 and h2""; "" histograms""), 100, -5, 5); h1.SetLineColor(kBlue+1); h1.SetLineWidth(2); h1.FillRandom(""gaus""); h1.GetYaxis().SetTitleSize(20); h1.GetYaxis().SetTitleFont(43); h1.GetYaxis().SetTitleOffset(1.55); h1.SetStats(0); return h1; ; ; def createH2():; h2 = TH1F(""h2"", ""h2"", 100, -5, 5); h2.FillRandom(""gaus""); h2.SetLineColor(kRed); h2.SetLineWidth(2); return h2; ; ; def createRatio(h1, h2):; h3 = h1.Clone(""h3""); h3.SetLineColor(kBlack); h3.SetMarkerStyle(21); h3.SetTitle(""""); h3.SetMinimum(0.8); h3.SetMaximum(1.35); # Set up plot for markers and errors; h3.Sumw2(); h3.SetStats(0); h3.Divide(h2); ; # Adjust y-axis settings; y = h3.GetYaxis(); y.SetTitle(""ratio h1/h2 ""); y.SetNdivisions(505); y.SetTitleSize(20); y.SetTitleFont(43); y.SetTitleOffset(1.55); y.SetLabelFont(43); y.SetLabelSize(15); ; # Adjust x-axis settings; x = h3.GetXaxis(); x.SetTitleSize(20); x.SetTitleFont(43); x.SetTitleOffset(4.0); x.SetLabelFont(43); x.SetLabelSize(15); ; return h3; ; ; def createCanvasPads():; c = TCanvas(""c"", ""canvas"", 800, 800); # Upper histogram plot is pad1; pad1 = TPad(""pad1"", ""pad1"", 0, 0.3, 1, 1.0); pad1.SetBottomMargin(0) # joins upper and lower plot; pad1.SetGridx(); pad1.Draw(); # Lower ratio plot is pad2; c.cd() # returns to main canvas before defining pad2; pad2 = TPad(""pad2"", ""pad2"", 0, 0.05, 1, 0.3); pad2.SetTopMargin(0) # joins upper and lower plot; pad2.SetBottomMargin(0.2); pad2.SetGridx(); pad2.Draw(); ; return c, pad1, pad2; ; ; def ratioplot():; # create required parts; h1 = createH1(); h2 = createH2(); h3 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ratioplot_8py.html:1126,error,errors,1126,doc/master/ratioplot_8py.html,https://root.cern,https://root.cern/doc/master/ratioplot_8py.html,1,['error'],['errors']
Availability,"hing...; No Matches. TF1Convolution.cxx. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Authors: Lorenzo Moneta, Aurélie Flandi 27/08/14; 3//; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2015 ROOT Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11#include <memory>; 12 ; 13#include ""TF1Convolution.h""; 14#include ""TROOT.h""; 15#include ""TObject.h""; 16#include ""TObjString.h""; 17#include ""TObjArray.h""; 18#include ""TMath.h""; 19#include ""Math/Integrator.h""; 20#include ""Math/IntegratorMultiDim.h""; 21#include ""Math/IntegratorOptions.h""; 22#include ""Math/GaussIntegrator.h""; 23#include ""Math/GaussLegendreIntegrator.h""; 24#include ""Math/AdaptiveIntegratorMultiDim.h""; 25#include ""Math/Functor.h""; 26#include ""TVirtualFFT.h""; 27 ; 28/** \class TF1Convolution; 29 \ingroup Functions; 30 \brief Class wrapping convolution of two functions; 31 ; 32Class wrapping convolution of two functions: evaluation of \f$\int f(x)g(x-t)dx\f$; 33 ; 34The convolution is performed by default using FFTW if it is available .; 35One can pass optionally the range of the convolution (by default the first function range is used).; 36Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be; 37approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side); 38a spill over will occur on the other side (e.g right side).; 39If no function range is given by default the function1 range + 10% is used; 40One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used.; 41*/; 42 ; 43ClassImp(TF1Convolution);; 44 ; 45Double_t TF1Convolution::fgExtraRangeFraction = 0.1;; 46 ; 47class TF1Convolution_EvalWrapper; 48{; 49 TF1 * fFunc1;; 50 TF1 * fFunc2;; 51 Double_t fT0;; 52 ; 53public:; 54 TF1Convolution_EvalWrapper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1Convolution_8cxx_source.html:1246,avail,available,1246,doc/master/TF1Convolution_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1Convolution_8cxx_source.html,1,['avail'],['available']
Availability,his class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 31,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32506,error,error,32506,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,"his function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fReplaceEntities;  Replace entities. ;  ; Bool_t fStopError;  Stop when parse error occurs. ;  ; Bool_t fValidate;  To validate the parse context. ;  ; TString fValidateError;  Parse error. ;  ; TString fValidateWarning;  Parse warning. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TXMLParser (const TXMLParser &)=delete;  ; TXMLParser & operator= (const TXMLParser &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:14515,error,error,14515,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['error'],['error']
Availability,"his object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:45634,error,error,45634,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,3,['error'],['error']
Availability,"his set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variations are added for multiple existing columns, or when the tags are auto-generated instead of being directly defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:150014,down,down,150014,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['down'],['down']
Availability,"his would be useful when all Y's are experimental quantities; measured with different precision Sigma_Y. TProfile(const TProfile& profile); Copy constructor. void Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. void Add(const TH1* h1, Double_t c1 = 1); Performs the operation: this = this + c1*h1. void Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*Replace contents of this profile by the addition of h1 and h2; *-* =============================================================. this = c1*h1 + c2*h2. c1 and c2 are considered as weights applied to the two summed profiles.; The operation acts therefore like merging the two profiles with a weight c1 and c2. void Approximate(Bool_t approx = kTRUE); static function; set the fgApproximate flag. When the flag is true, the function GetBinError; will approximate the bin error with the average profile error on all bins; in the following situation only; - the number of bins in the profile is less than 1002; - the bin number of entries is small ( <5); - the estimated bin error is extremely small compared to the bin content; (see TProfile::GetBinError). Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is filled from the buffer; action = 1 histogram is filled and buffer is deleted; The buffer is automatically deleted when the number of entries; in the buffer is greater than the number of entries in the histogram. Int_t BufferFill(Double_t x, Double_t y, Double_t w); accumulate arguments in buffer. When buffer is full, empty the buffer; fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry; fBuffer[3] = y of first entry. void Copy(TObject& hnew) const; -*-*-*Copy a Profile histogram to a new profile histogram; *-* ===================================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:30916,error,error,30916,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,12,['error'],['error']
Availability,"his->InheritsFrom(RooAbsPdf::Class())){; 2132 // this scaling should only be !=1 when plotting partial ranges; 2133 // still, raw means raw; 2134 o.scaleFactor /= intFrac->getVal() ;; 2135 }; 2136 }; 2137 ; 2138 // create a new curve of our function using the clone to do the evaluations; 2139 // Curve constructor for regular projections; 2140 ; 2141 // Set default name of curve; 2142 std::string curveName(projection->GetName()) ;; 2143 if (!sliceSet.empty()) {; 2144 curveName.append(""_Slice["" + sliceSet.contentsString() + ""]"");; 2145 }; 2146 if (o.curveNameSuffix) {; 2147 // Append any suffixes imported from RooAbsPdf::plotOn; 2148 curveName.append(o.curveNameSuffix) ;; 2149 }; 2150 ; 2151 TString opt(o.drawOptions);; 2152 if(opt.Contains(""P"")){; 2153 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::CollectErrors) ;; 2154 RooHist *graph= new RooHist(*projection,*plotVar,1.,o.scaleFactor,frame->getNormVars(),o.errorFR);; 2155 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 2156 ; 2157 // Override name of curve by user name, if specified; 2158 if (o.curveName) {; 2159 graph->SetName(o.curveName) ;; 2160 }; 2161 ; 2162 // add this new curve to the specified plot frame; 2163 frame->addPlotable(graph, o.drawOptions, o.curveInvisible);; 2164 } else {; 2165 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::CollectErrors) ;; 2166 RooCurve *curve = new RooCurve(*projection,*plotVar,o.rangeLo,o.rangeHi,frame->GetNbinsX(),; 2167 o.scaleFactor,nullptr,o.precision,o.precision,o.shiftToZero,o.wmode,o.numee,o.doeeval,o.eeval,o.progress);; 2168 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 2169 curve->SetName(curveName.c_str()) ;; 2170 ; 2171 // Add self to other curve if requested; 2172 if (o.addToCurveName) {; 2173 RooCurve* otherCurve = static_cast<RooCurve*>(frame->findObject(o.addToCurveName,RooCurve::Class())) ;; 2174 RooCurve* sumCurve = new RooCurve(projection->GetName(),projection->GetTitle(),*curve,*otherCurve,o.addToWgtSelf,o.addToWgtOther) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:94860,error,errorFR,94860,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorFR']
Availability,"his:; 881 * ```; 882 * myVariable.setRange(""range_pi0"", 135, 210);; 883 * myVariable.setRange(""range_gamma"", 50, 210);; 884 * ```; 885 * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; 886 * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; 887 * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; 888 * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization observables to be used for the constraint terms.; 889 * If none are specified the constrained parameters are used.; 890 * <tr><td> `GlobalObservablesSource(const char* sourceName)` <td> Which source to prioritize for global observable values.; 891 * Can be either:; 892 * - `data`: to take the values from the dataset,; 893 * falling back to the pdf value if a given global observable is not available.; 894 * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; 895 * of global observables will be automatically defined to be the set stored in the data.; 896 * - `model`: to take all values from the pdf and completely ignore the set of global observables stored in the data; 897 * (not even using it to automatically define the set of global observables; 898 * if the `GlobalObservables` or `GlobalObservablesTag` command arguments are not given).; 899 * The default option is `data`.; 900 * <tr><td> `GlobalObservablesTag(const char* tagName)` <td> Define the set of normalization observables to be used for the constraint terms by; 901 * a string attribute associated with pdf observables that match the given tagName.; 902 * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; 903 * <tr><td> `CloneData(bool flag)` <td> Use clone of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:39556,avail,available,39556,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['avail'],['available']
Availability,"hisPDERSthis pointer (required by root finder); Int_tfkNNMaxmax number of events in kNN tree; Int_tfkNNMinmin number of events in kNN tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:20665,avail,available,20665,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,6,['avail'],['available']
Availability,"histA, taken as the; errors provided with the histogram.; These are typically statistical errors from finite Monte Carlo samples. (b) correlated shifts of the input matrix histA. These shifts are taken; as one-sigma effects when switchig on a given error soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. In addition there is the (statistical) uncertainty of the input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:1973,error,errors,1973,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,12,['error'],['errors']
Availability,"histogram and; it will not be copied when the histogram is copied or cloned.; If the user wants to have the copied (cloned) histogram in the same; directory, he needs to set again the directory using SetDirectory to the; copied histograms. void SetError(const Double_t* error); Replace bin errors by values in array error. void SetName(const char* name); Change the name of this histogram. void SetNameTitle(const char* name, const char* title); Change the name and title of this histogram. void SetStats(Bool_t stats = kTRUE); Set statistics option on/off. By default, the statistics box is drawn.; The paint options can be selected via gStyle->SetOptStats.; This function sets/resets the kNoStats bin in the histogram object.; It has priority over the Style option. void Sumw2(Bool_t flag = kTRUE); Create structure to store sum of squares of weights. if histogram is already filled, the sum of squares of weights; is filled with the existing bin contents. The error per bin will be computed as sqrt(sum of squares of weight); for each bin. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag = false the structure is deleted. TF1 * GetFunction(const char* name) const; Return pointer to function with name. Functions such as TH1::Fit store the fitted function in the list of; functions of this histogram. Double_t GetBinError(Int_t bin) const; Return value of error associated to bin number bin. if the sum of squares of weights has been defined (via Sumw2),; this function returns the sqrt(sum of w2).; otherwise it returns the sqrt(contents) for this bin. Double_t GetBinErrorLow(Int_t bin) const; Return lower error associated to bin number bin. The error will depend on the statistic option used will return; the binContent - lower interval value. Double_t GetBinErrorUp(Int_t bin) const; Return upper error associated to bin number bin. The error will depend on the statistic option used will retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH1.html:127824,error,error,127824,root/html604/TH1.html,https://root.cern,https://root.cern/root/html604/TH1.html,2,['error'],['error']
Availability,"histogram bins. ;  ; static RooArgList createParamSet (RooWorkspace &w, const std::string &, const RooArgList &Vars);  Create the list of RooRealVar parameters which represent the height of the histogram bins. ;  ; static RooArgList createParamSet (RooWorkspace &w, const std::string &, const RooArgList &Vars, double, double);  Create the list of RooRealVar parameters which scale the height of histogram bins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:47370,error,error,47370,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,1,['error'],['error']
Availability,"histogram; int nh=5000;; TH1D *h = new TH1D(""h"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; h->FillRandom(""gaus"", nh);; TF1 *f = new TF1(""fgaus"", ""gaus"", -3, 3);; f->SetLineWidth(2);; h->Fit(f, ""Q"");; h->Draw();; ; /*Create a histogram to hold the confidence intervals*/; TH1D *hint = new TH1D(""hint"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(hint);; //Now the ""hint"" histogram has the fitted function values as the; //bin contents and the confidence intervals as bin errors; hint->SetStats(false);; hint->SetFillColor(2);; hint->Draw(""e3 same"");; ; //### 3. A 2d graph; //Create and fill the graph; int ngr2 = 100;; double z, rnd, e=0.3;; TGraph2D *gr2 = new TGraph2D(ngr2);; gr2->SetName(""Graph2DNoError"");; TF2 *f2 = new TF2(""f2"",; ""1000*(([0]*sin(x)/x)*([1]*sin(y)/y))+250"",-6,6,-6,6);; f2->SetParameters(1,1);; for (i=0; i<ngr2; i++){; f2->GetRandom2(x,y);; // Generate a random number in [-e,e]; rnd = 2*gRandom->Rndm()*e-e;; z = f2->Eval(x,y)*(1+rnd);; gr2->SetPoint(i,x,y,z);; }; //Create a graph with errors to store the intervals; TGraph2DErrors *grint2 = new TGraph2DErrors(ngr2);; for (i=0; i<ngr2; i++); grint2->SetPoint(i, gr2->GetX()[i], gr2->GetY()[i], 0);; ; //Fit the graph; f2->SetParameters(0.5,1.5);; gr2->Fit(f2, ""Q"");; /*Compute the confidence intervals*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint2);; //Now the ""grint2"" graph contains function values as z-coordinates; //and confidence intervals as their errors; //draw; myc->cd(3);; f2->SetNpx(30);; f2->SetNpy(30);; f2->SetFillColor(kBlue);; f2->Draw(""surf4"");; grint2->SetNpx(20);; grint2->SetNpy(20);; grint2->SetMarkerStyle(24);; grint2->SetMarkerSize(0.7);; grint2->SetMarkerColor(kRed);; grint2->SetLineColor(kRed);; grint2->Draw(""E0 same"");; grint2->SetTitle(""Fitted 2d function with .95 error bars"");; ; myc->cd();; ; }; ; ; ; ; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; e#define e(i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ConfidenceIntervals_8C.html:2877,error,errors,2877,doc/master/ConfidenceIntervals_8C.html,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html,1,['error'],['errors']
Availability,"histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:36467,error,error,36467,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"hiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPFile.html:12318,error,error,12318,root/html530/TZIPFile.html,https://root.cern,https://root.cern/root/html530/TZIPFile.html,5,['error'],['error']
Availability,"hms have been developed (Gauss-Newton, Levenber-Marquart conjugate gradients, etc.) and more or less successfully implemented into programs for analysis of complex spectra. They are based on matrix inversion that can impose appreciable convergence difficulties mainly for large number of fitted parameters. Peaks can be fitted separately, each peak (or multiplets) in a region or together all peaks in a spectrum. To fit separately each peak one needs to determine the fitted region. However it can happen that the regions of neighboring peaks are overlapping (mainly in 2-dimensional spectra). Then the results of fitting are very poor. On the other hand, when fitting together all peaks found in a spectrum, one needs to have a method that is stable (converges) and fast enough to carry out fitting in reasonable time. The gradient methods based on the inversion of large matrices are not applicable because of two reasons. calculation of inverse matrix is extremely time consuming;; due to accumulation of truncation and rounding-off errors the result can become worthless. We have implemented two kinds of fitting functions. The first approach is based on the algorithm without matrix inversion [9]-awmi algorithm. It allows to fit large blocks of data and large number of parameters.; The other one is based on calculation of the system of linear equations using Stiefel-Hestens method [10]. It converges faster than awmi algorithm, however it is not suitable to fit large number of parameters.; 5.1 1-DIMENSIONAL SPECTRA. the quantity to be minimized in the fitting procedure for one dimensional spectrum is defined as :. \[ \chi^2 = \frac{1}{N-M}\sum_{i=1}^{N}\frac{[y_i-f(i,a)]^2}{y_i} \]; where \(i\) is the channel in the fitted spectrum, \(N\) is the number of channels in the fitting subregion, \(M\) is the number of free parameters, \(y_i\) is the content of the i-th channel, \(a\) is a vector of the parameters being fitted and \(f(i,a)\) is a fitting or peak shape function.; Instead ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:34329,error,errors,34329,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,2,['error'],['errors']
Availability,"hnam, Double_t& val, Double_t& err, Double_t& xlolim, Double_t& xuplim, Int_t& iuint) const; -*Provides the user with information concerning the current status; *-* ================================================================; *-* of parameter number IUEXT. Namely, it returns:; *-* CHNAM: the name of the parameter; *-* VAL: the current (external) value of the parameter; *-* ERR: the current estimate of the parameter uncertainty; *-* XLOLIM: the lower bound (or zero if no limits); *-* XUPLIM: the upper bound (or zero if no limits); *-* IUINT: the internal parameter number (or zero if not variable,; *-* or negative if undefined).; *-* Note also: If IUEXT is negative, then it is -internal parameter; *-* number, and IUINT is returned as the EXTERNAL number.; *-* Except for IUINT, this is exactly the inverse of MNPARM; *-* User-called; *. void mnprin(Int_t inkode, Double_t fval); Prints the values of the parameters at the time of the call*-; *-* ===========================================================; *-* also prints other relevant information such as function value,; *-* estimated distance to minimum, parameter errors, step sizes.; -; *-* According to the value of IKODE, the printout is:; *-* IKODE=INKODE= 0 only info about function value; *-* 1 parameter values, errors, limits; *-* 2 values, errors, step sizes, internal values; *-* 3 values, errors, step sizes, first derivs.; *-* 4 values, parabolic errors, MINOS errors; *-* when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]; *. void mnpsdf(); -*Calculates the eigenvalues of v to see if positive-def; *-* ======================================================; *-* if not, adds constant along diagonal to make positive.; *. void mnrazz(Double_t ynew, Double_t* pnew, Double_t* y, Int_t& jh, Int_t& jl); Called only by MNSIMP (and MNIMPR) to add a new point*-*-; *-* =====================================================; *-* and remove an old one from the current simplex, and get the; *-* estimated dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:51030,error,errors,51030,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['error'],['errors']
Availability,"hname>` in order to differentiate them from the branches in the main tree/chain.; 1258 ///; 1259 /// ### Writing to a sub-directory; 1260 ///; 1261 /// Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to; 1262 /// the TTree as part of the TTree name, e.g. `df.Snapshot(""subdir/t"", ""f.root"")` write TTree `t` in the; 1263 /// sub-directory `subdir` of file `f.root` (creating file and sub-directory as needed).; 1264 ///; 1265 /// \attention In multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of; 1266 /// entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with; 1267 /// respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong; 1268 /// associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will; 1269 /// error out if such a ""shuffled"" TTree is used in a friendship.; 1270 ///; 1271 /// \note In case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in; 1272 /// single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with; 1273 /// the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk.; 1274 ///; 1275 /// \note Snapshot will refuse to process columns with names of the form `#columnname`. These are special columns; 1276 /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; 1277 /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; 1278 /// Alias(): `df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""})`.; 1279 ///; 1280 /// ### Example invocations:; 1281 ///; 1282 /// ~~~{.cpp}; 1283 /// // without specifying template parameters (column types automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:70064,error,error,70064,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"ho uses the values of those parameters to calculate their function value.; The starting values must be specified by the user.; Later values are determined by Minuit as it searches for the minimum; or performs whatever analysis is requested by the user. Note that this virtual function may be redefined in a class derived from TMinuit.; The default function calls the function specified in SetFCN. Example of Minimisation function:. if (flag == 1) {; read input data,; calculate any necessary constants, etc.; }; if (flag == 2) {; calculate GRAD, the first derivatives of FVAL; (this is optional); }; Always calculate the value of the function, FVAL,; which is usually a chisquare or log likelihood.; if (iflag == 3) {; will come here only after the fit is finished.; Perform any final calculations, output fitted data, etc.; }. See concrete examples in TH1::H1FitChisquare, H1FitLikelihood. Int_t FixParameter(Int_t parNo); fix a parameter. Int_t GetParameter(Int_t parNo, Double_t& currentValue, Double_t& currentError) const; return parameter value and error. Int_t GetNumFixedPars() const; returns the number of currently fixed parameters. Int_t GetNumFreePars() const; returns the number of currently free parameters. Int_t GetNumPars() const; returns the total number of parameters that have been defined; as fixed or free. The constant parameters are not counted. Int_t Migrad(); invokes the MIGRAD minimizer. Int_t Release(Int_t parNo); release a parameter. Int_t SetErrorDef(Double_t up); To get the n-sigma contour the error def parameter ""up"" has to set to n^2. void SetFCN(void (*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)); To set the address of the minimization function*-; *-* ===============================================; *. void SetFCN(void* fcn); To set the address of the minimization function*-; *-* ===============================================; this function is called by CINT instead of the function above; *. Int_t SetPrintLevel(Int_t printLevel = 0); set Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:34186,error,error,34186,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,4,['error'],['error']
Availability,"hod SetMarkerColor and retrieved using the ; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can ; be changed using the method SetMarkerStyle and retrieved using the ; method GetMarkerStyle.; The following list gives the currently supported markers (screen ; and PostScript) style. Each marker style is identified by an integer number ; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small scalable dot kFullDotSmall; 7 medium scalable dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 open star kOpenStar; 30 full star kFullStar. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; return c;; }. Marker size; Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change ; in TPad's scale.; The marker size of any class inheriting from TAttMarker can ; be changed using the method SetMarkerSize and retrieved using the ; method GetMarkerSize. Picture; Source. {; c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttMarker.html:1772,down,down,1772,root/html526/TAttMarker.html,https://root.cern,https://root.cern/root/html526/TAttMarker.html,1,['down'],['down']
Availability,"hod as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:8510,toler,tolerance,8510,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['toler'],['tolerance']
Availability,"hod fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:1568,toler,toler,1568,root/html602/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html,4,['toler'],['toler']
Availability,"hod of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterface ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRInterfaceThe public interface to the RDataFrame federation of classes ;  CRLazyDSA RDataSource imp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:72404,error,error,72404,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['error'],['error']
Availability,"hod of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDisplayThis cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:75306,error,error,75306,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['error'],['error']
Availability,"hod of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  NInternal;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:78911,error,error,78911,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['error'],['error']
Availability,"hod to create ruler and attach it to the current gPad; TAxis3D::ToggleRulers(); // Brings the 3D axes up; TAxis3D::ToggleRulers(); // next calls remove the rulers from the TPad etc; TAxis3D::ToggleRulersstatic TAxis3D * ToggleRulers(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"", TAxis3D object attached to the current pad.Definition TAxis3D.cxx:738; To activate Zoomer one may call; TAxis3D::ToggleZoom();; TAxis3D::ToggleZoomstatic TAxis3D * ToggleZoom(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"" and ""zoom mode"" of the TAxis3D object attached to the current pad (if pad =...Definition TAxis3D.cxx:766; each time one needs move or zoom the image. Then the user can:. move: . zoom: . its 3D view with <left-mouse button> press / move. The ""Zoom"" deactivates itself just the user release the <left-mouse button>; To change attributes of the rulers attached to the current Pad, one may query its pointer first:; TAxis3D *axis = TAxis3D::GetPadAxis(); // Ask axis pointer; if (axis) {; TAxis3D::ToggleRulers() // To pop axes down; axis->SetLabelColor(kBlue); // Paint the axes labels with blue color; axis->SetAxisColor(kRed); // Paint the axes itself with blue color; TAxis3D::ToggleRulers() // To pop axes up; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TAxis3D::GetPadAxisstatic TAxis3D * GetPadAxis(TVirtualPad *pad=nullptr)Returns the ""pad"" Axis3D object pointer if any.Definition TAxis3D.cxx:721; TAxis3D::SetAxisColorvirtual void SetAxisColor(Color_t color=1, Option_t *axis=""*"")Set axis color.Definition TAxis3D.cxx:651; TAxis3D::SetLabelColorvirtual void SetLabelColor(Color_t color=1, Option_t *axis=""*"")Set label color.Definition TAxis3D.cxx:672; The attributes of the created axes are affected by the current style (see TStyle class ) and Set... methods of this class; For example: gStyle->SetAxisColor(kYellow,""X"");; gStyle->SetAxisColor(kYellow,""Y"");; gStyle->SetAxisColor(kYellow,""Z"");; ; gStyle->SetLabelColor(kYellow,""X"");; gStyle->SetLabelColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:2091,down,down,2091,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['down'],['down']
Availability,"hod(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataMember*FindDataMember(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClass() const; virtual const char*GetCommentString(); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TList*GetListOfMethodArgs(); virtual const char*TFunction::GetMangledName() const; virtual const char*TNamed::GetName() const; Int_tTFunction::GetNargs() const; Int_tTFunction::GetNargsOpt() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMethod.html:1669,error,error,1669,root/html532/TMethod.html,https://root.cern,https://root.cern/root/html532/TMethod.html,2,['error'],['error']
Availability,"hod(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataMember*FindDataMember(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClass() const; virtual const char*GetCommentString(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TList*GetListOfMethodArgs(); virtual const char*TFunction::GetMangledName() const; virtual const char*TNamed::GetName() const; Int_tTFunction::GetNargs() const; Int_tTFunction::GetNargsOpt() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TFunction::GetPrototype() const; const char*TFunction::GetReturnTypeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethod.html:1669,error,error,1669,root/html528/TMethod.html,https://root.cern,https://root.cern/root/html528/TMethod.html,2,['error'],['error']
Availability,"hod(cl, ""Dictionary"", interp)) {; 1333 dictStream << std::endl << "" // Dictionary for non-ClassDef classes"" << std::endl; 1334 << "" static TClass *"" << mappedname.c_str() << ""_Dictionary() {"" << std::endl; 1335 << "" return GenerateInitInstance()->GetClass();"" << std::endl; 1336 << "" }"" << std::endl << std::endl;; 1337 }; 1338 ; 1339 dictStream << "" }"" << std::endl;; 1340 while (nesting--) {; 1341 dictStream << ""}"" << std::endl;; 1342 }; 1343 dictStream << std::endl;; 1344}; 1345 ; 1346////////////////////////////////////////////////////////////////////////////////; 1347/// GrabIndex returns a static string (so use it or copy it immediately, do not; 1348/// call GrabIndex twice in the same expression) containing the size of the; 1349/// array data member.; 1350/// In case of error, or if the size is not specified, GrabIndex returns 0.; 1351 ; 1352llvm::StringRef GrabIndex(const cling::Interpreter& interp, const clang::FieldDecl &member, int printError); 1353{; 1354 int error;; 1355 llvm::StringRef where;; 1356 ; 1357 llvm::StringRef index = ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex(interp, member, &error, &where);; 1358 if (index.size() == 0 && printError) {; 1359 const char *errorstring;; 1360 switch (error) {; 1361 case TMetaUtils::NOT_INT:; 1362 errorstring = ""is not an integer"";; 1363 break;; 1364 case TMetaUtils::NOT_DEF:; 1365 errorstring = ""has not been defined before the array"";; 1366 break;; 1367 case TMetaUtils::IS_PRIVATE:; 1368 errorstring = ""is a private member of a parent class"";; 1369 break;; 1370 case TMetaUtils::UNKNOWN:; 1371 errorstring = ""is not known"";; 1372 break;; 1373 default:; 1374 errorstring = ""UNKNOWN ERROR!!!!"";; 1375 }; 1376 ; 1377 if (where.size() == 0) {; 1378 ROOT::TMetaUtils::Error(nullptr, ""*** Datamember %s::%s: no size indication!\n"",; 1379 member.getParent()->getName().str().c_str(), member.getName().str().c_str());; 1380 } else {; 1381 ROOT::TMetaUtils::Error(nullptr, ""*** Datamember %s::%s: size of array (%s) %s!\n"",; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:51121,error,error,51121,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,2,['error'],['error']
Availability,"hod(const char* method) const; virtual voidAddBranch(TBranch*, Bool_t = kFALSE); virtual voidAddBranch(const char*, Bool_t = kFALSE); virtual voidAddNoCacheBytesRead(Long64_t len); virtual voidAddNoCacheReadCalls(Int_t reads); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetBufferSize() const; virtual Long64_tGetBytesRead() const; virtual Long64_tGetBytesReadExtra() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Long64_tGetNoCacheBytesRead() const; virtual Int_tGetNoCacheReadCalls() const; Int_tGetNseek() const; Int_tGetNtot() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileCacheRead.html:2023,Error,Error,2023,root/html534/TFileCacheRead.html,https://root.cern,https://root.cern/root/html534/TFileCacheRead.html,2,['Error'],['Error']
Availability,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Bool_tattach(RooWorkspace& w); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; RooLinkedList*RooAbsStudy::detailedData(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_texecute(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Bool_tfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenFitStudy.html:1577,error,error,1577,root/html526/RooGenFitStudy.html,https://root.cern,https://root.cern/root/html526/RooGenFitStudy.html,2,['error'],['error']
Availability,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TShape.html:1845,error,error,1845,root/html528/TShape.html,https://root.cern,https://root.cern/root/html528/TShape.html,10,['error'],['error']
Availability,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDaughterToMother(Int_t id, const Double_t* local, Double_t* master) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Double_tEfficiency(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindOverlaps(Int_t inode) const; Double_t*GetBoxes() const; Int_t*GetCheckList(Int_t& nelem, TGeoStateInfo& td) const; virtual Int_t*GetCheckList(const Double_t* point, Int_t& nelem, TGeoStateInfo& td); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Int_t*GetNextCandidates(const Double_t* point, Int_t& ncheck, TGeoStateInfo& td); virtual Int_t*GetNextVoxel(const Double_t* point, const Double_t* dir, Int_t& ncheck, TGeoStateInfo& td); virtual char*TObject::GetObjectInfo(Int_t px, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVoxelFinder.html:1497,error,error,1497,root/html534/TGeoVoxelFinder.html,https://root.cern,https://root.cern/root/html534/TGeoVoxelFinder.html,6,['error'],['error']
Availability,"hod) const; Int_tAddDecayChannel(Int_t Type, Double_t BranchingRatio, Int_t NDaughters, Int_t* DaughterPdgCode); TParticlePDG*AntiParticle(); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBeauty() const; virtual voidTObject::Browse(TBrowser* b); Double_tCharge() const; Int_tCharm() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; TDecayChannel*DecayChannel(Int_t i); TObjArray*DecayList(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParticlePDG.html:2601,Error,Error,2601,root/html532/TParticlePDG.html,https://root.cern,https://root.cern/root/html532/TParticlePDG.html,1,['Error'],['Error']
Availability,"hod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeZ(Double_t x, Double_t y); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFindAllTriangles(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph2D*GetGraph2D() const; virtual const char*TObject::GetIconName() const; Double_tGetMarginBinsContent() const; Int_t*GetMTried() const; virtual const char*TNamed::GetName() const; Int_tGetNdt() const; Int_t*GetNTried() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_t*GetPTried() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetXN() const; Double_tGetXNmax() const; Double_tGetXNmin() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphDelaunay.html:2554,error,error,2554,root/html528/TGraphDelaunay.html,https://root.cern,https://root.cern/root/html528/TGraphDelaunay.html,10,['error'],['error']
Availability,"hod) const; voidAddElement(TEveGeoShapeExtract* gse); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetElements(); virtual const char*TObject::GetIconName() const; Bool_tGetMiniFrame(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Float_t*GetRGBA(); Float_t*GetRGBALine(); Bool_tGetRnrElements(); Bool_tGetRnrFrame(); Bool_tGetRnrSelf(); TGeoShape*GetShape(); virtual const char*TNamed::GetTitle() const; Double_t*GetTrans(); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasElements()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShapeExtract.html:1706,error,error,1706,root/html528/TEveGeoShapeExtract.html,https://root.cern,https://root.cern/root/html528/TEveGeoShapeExtract.html,10,['error'],['error']
Availability,"hodBase::PyInitialize ; (; ). static . Initialize Python interpreter. ; NOTE: We introduce a shared global namespace fGlobalNS, but using a private local namespace fLocalNS. This prohibits the interference of instances of the same method with the same factory, e.g., by overriding variables in the same local namespace. ; Definition at line 153 of file PyMethodBase.cxx. ◆ PyIsInitialized(). int PyMethodBase::PyIsInitialized ; (; ). static . Check Python interpreter initialization status. ; ReturnsBoolean whether interpreter is initialized ; Definition at line 253 of file PyMethodBase.cxx. ◆ PyRunString() [1/2]. void PyMethodBase::PyRunString ; (; TString ; code, . PyObject * ; globalNS, . PyObject * ; localNS . ). static . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]globalNSGlobal Namespace for Python Session ; [in]localNSLocal Namespace for Python Session. Overloaded static Helper function to run python code from string and throw runtime error if the Python session is unable to execute the code ; Definition at line 347 of file PyMethodBase.cxx. ◆ PyRunString() [2/2]. void PyMethodBase::PyRunString ; (; TString ; code, . TString ; errorMessage = ""Failed to run python code"", . int ; start = 256 . ). protected . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]errorMessageError message which shall be shown if the execution fails ; [in]startStart symbol. Helper function to run python code from string in local namespace with error handling start defines the start symbol defined in PyRun_String (Py_eval_input, Py_single_input, Py_file_input) ; Definition at line 325 of file PyMethodBase.cxx. ◆ PyStringAsString(). const char * PyMethodBase::PyStringAsString ; (; PyObject * ; string). static . Returns const char* from Python string in PyObject. ; Parameters. [in]stringPython String object . ReturnsString representation in const char* ; Definition at line 362 of file PyMethodBase.cxx. ◆ ReadModelFromFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:35793,error,error,35793,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['error'],['error']
Availability,"hodBrowsable(const TMethodBrowsable&); virtual~TMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodBrowsable.html:3205,error,error,3205,root/html528/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html528/TMethodBrowsable.html,6,['error'],['error']
Availability,"hodInfo_Title(MethodInfo_t*) const; virtual TypeInfo_t*MethodInfo_Type(MethodInfo_t*) const; virtual const char*MethodInfo_TypeName(MethodInfo_t*) const; virtual stringMethodInfo_TypeNormalizedName(MethodInfo_t*) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInterpreter&operator=(const TInterpreter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRegisterModule(const char*, const char**, const char**, const char*, const char*, void(*)(), const TInterpreter::FwdDeclArgsToKeepCollection_t& fwdDeclArgsToKeep, const char** classesHeaders); virtual voidRegisterTClassUpdate(TClass* oldcl, DictFuncPtr_t dict); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void(*)()) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:19156,error,error,19156,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,4,['error'],['error']
Availability,"hodInfo_TypeName(MethodInfo_t*) const; virtual stringMethodInfo_TypeNormalizedName(MethodInfo_t*) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInterpreter&operator=(const TInterpreter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual Int_tSetClassSharedLibs(const char* cls, const char* libs); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:13271,error,error,13271,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,2,['error'],['error']
Availability,"hods); public:. virtual~ScanMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html:1647,toler,toler,1647,root/html602/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html,4,['toler'],['toler']
Availability,"hod’ combo box currently provides only two fit model choices: Chi-square and Binned Likelihood. The default one is Chi-square. The Binned Likelihood is recommended for bins with low statistics.; ‘Linear Fit’ check button sets the use of Linear fitter when is selected. Otherwise the minimization is done by Minuit, i.e. fit option “F” is applied. The Linear fitter can be selected only for functions linear in parameters (for example - polN).; ‘Robust’ number entry sets the robust value when fitting graphs.; ‘No Chi-square’ check button switch On/Off the fit option “C” - do not calculate Chi-square (for Linear fitter).; ‘Integral’ check button switch On/Off the option “I” - use integral of function instead of value in bin center.; ‘Best Errors’ sets On/Off the option “E” - better errors estimation by using Minos technique.; ‘All weights = 1’ sets On/Off the option “W”- all weights set to 1 excluding empty bins; error bars ignored.; ‘Empty bins, weights=1’ sets On/Off the option “WW” - all weights equal to 1 including empty bins; error bars ignored.; ‘Use range’ sets On/Off the option “R” - fit only data within the specified function range. Sliders settings are used if this option is set to On. Users can change the function range values by pressing the left mouse button near to the left/right slider edges. It is possible to change both values simultaneously by pressing the left mouse button near to the slider center and moving it to a new position.; ‘Improve fit results’ sets On/Off the option “M”- after minimum is found, search for a new one.; ‘Add to list’ sets On/Off the option “+”- add function to the list without deleting the previous one. When fitting a histogram, the function is attached to the histogram’s list of functions. By default, the previously fitted function is deleted and replaced with the most recent one, so the list only contains one function. Setting this option to On will add the newly fitted function to the existing list of functions for the histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:184992,error,error,184992,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"homeauthrc); Set flag controlling the reading of $HOME/.rootauthrc.; In PROOF the administrator may want to switch off private settings.; Always true, may only be set false via option to proofd. void SetGlobalExpDate(TDatime expdate); Set default expiring date for new validity contexts. void SetDefaultUser(const char* defaultuser); Set default user name. void SetTimeOut(Int_t to); Set timeout (active if > 0). void SetAuthReUse(Bool_t authreuse); Set global AuthReUse flag. void SetPromptUser(Bool_t promptuser); Set global PromptUser flag. void SetSecureAuthHook(SecureAuth_t func); Set secure authorization function. Automatically called when libSRPAuth; is loaded. void SetKrb5AuthHook(Krb5Auth_t func); Set kerberos5 authorization function. Automatically called when; libKrb5Auth is loaded. void SetGlobusAuthHook(GlobusAuth_t func); Set Globus authorization function. Automatically called when; libGlobusAuth is loaded. Int_t SshError(const char* errfile); SSH error parsing: returns; 0 : no error or fatal; 1 : should retry (eg 'connection closed by remote host'). Int_t SshAuth(TString& user); SSH client authentication code. const char * GetSshUser(TString user) const; Method returning the user to be used for the ssh login.; Looks first at SSH.Login and finally at env USER.; If SSH.LoginPrompt is set to 'yes' it prompts for the 'login name'. Bool_t CheckHost(const char* Host, const char* host); Check if 'host' matches 'href':; this means either equal or ""containing"" it, even with wild cards *; in the first field (in the case 'href' is a name, ie not IP address); Returns kTRUE if the two matches. Int_t RfioAuth(TString& user); UidGid client authentication code.; Returns 0 in case authentication failed; 1 in case of success; <0 in case of system error. Int_t ClearAuth(TString& user, TString& passwd, Bool_t& pwhash); UsrPwd client authentication code.; Returns 0 in case authentication failed; 1 in case of success. THostAuth * GetHostAuth(const char* host, const char* user = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:16689,error,error,16689,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,22,['error'],['error']
Availability,"hood evaluations . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooArgusBG.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf606_nllerrorhandling(); {; // C r e a t e m o d e l a n d d a t a s e t; // ----------------------------------------------; ; // Observable; RooRealVar m(""m"", ""m"", 5.20, 5.30);; ; // Parameters; RooRealVar m0(""m0"", ""m0"", 5.291, 5.20, 5.30);; RooRealVar k(""k"", ""k"", -30, -50, -10);; ; // Pdf; RooArgusBG argus(""argus"", ""argus"", m, m0, k);; ; // Sample 1000 events in m from argus; std::unique_ptr<RooDataSet> data{argus.generate(m, 1000)};; ; // P l o t m o d e l a n d d a t a; // --------------------------------------; ; RooPlot *frame1 = m.frame(Bins(40), Title(""Argus model and data""));; data->plotOn(frame1);; argus.plotOn(frame1);; ; // F i t m o d e l t o d a t a; // ---------------------------------; ; // The ARGUS background shape has a sharp kinematic cutoff at m=m0; // and is prone to evaluation errors if the cutoff parameter m0; // is floated: when the pdf cutoff value is lower than that in data; // events with m>m0 will have zero probability; ; // Perform unbinned ML fit. Print detailed error messages for up to; // 10 events per likelihood evaluation. The default error handling strategy; // is to return a very high value of the likelihood to MINUIT if errors occur,; // which will force MINUIT to retreat from the problematic area; ; argus.fitTo(*data, PrintEvalErrors(10));; ; // Perform another fit. In this configuration only the number of errors per; // likelihood evaluation is shown, if it is greater than zero. The; // EvalErrorWall(false) arguments disables the default error handling strategy; // and will cause the actual (problematic) value of the likelihood to be passed; // to MINUIT.; //; // NB: Use of this option is NOT recommended as default strategy as broken -log(L) values; // can often be lower than 'good' ones because offending events are removed.; // This may",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:1325,error,errors,1325,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['error'],['errors']
Availability,"hoptin and fill Hoption structure.Definition THistPainter.cxx:4028; THistPainter::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideDisplay the histogram info (bin number, contents, integral up to bin corresponding to cursor position...Definition THistPainter.cxx:3729; THistPainter::GetContourListTList * GetContourList(Double_t contour) const overrideGet a contour (as a list of TGraphs) using the Delaunay triangulation.Definition THistPainter.cxx:3706; THistPainter::ProcessMessagevoid ProcessMessage(const char *mess, const TObject *obj) overrideProcess message mess.Definition THistPainter.cxx:10311; THistPainter::SetShowProjectionvoid SetShowProjection(const char *option, Int_t nbins) overrideSet projection.Definition THistPainter.cxx:10766; THistPainter::ShowProjectionYvirtual void ShowProjectionY(Int_t px, Int_t py)Show projection onto Y.Definition THistPainter.cxx:10933; THistPainter::GetBestFormatstatic const char * GetBestFormat(Double_t v, Double_t e, const char *f)This function returns the best format to print the error value (e) knowing the parameter value (v) an...Definition THistPainter.cxx:10714; THistPainter::PaintContourvirtual void PaintContour(Option_t *option)Control function to draw a 2D histogram as a contour plot.Definition THistPainter.cxx:5932; THistPainter::fCutsTCutG * fCuts[kMaxCuts]Pointers to graphical cuts.Definition THistPainter.h:65; THistPainter::PaintTablevirtual void PaintTable(Option_t *option)Control function to draw 2D/3D histograms (tables).Definition THistPainter.cxx:9629; THistPainter::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute the actions corresponding to event.Definition THistPainter.cxx:3464; THistPainter::PaintInitHvirtual Int_t PaintInitH()Compute histogram parameters used by the drawing routines for a rotated pad.Definition THistPainter.cxx:7334; THistPainter::PaintFramevirtual void PaintFrame()Calculate range and clear pad (canvas).Definition THistPainter.cxx:6777; THi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:473337,error,error,473337,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['error'],['error']
Availability,"hority path-abempty; / path-absolute; / path-rootless; / path-empty. const TString GetRelativePart() const; relative-part = ""//"" authority path-abempty; / path-absolute; / path-noscheme; / path-empty. Bool_t SetHierPart(const TString& hier); returns hier-part component of URI; hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. Bool_t IsHierPart(const TString& ); Returns kTRUE if string qualifies as hier-part:. hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. Bool_t IsRelativePart(const TString& ); Returns kTRUE is string qualifies as relative-part:; relative-part = ""//"" authority path-abempty; / path-absolute; / path-noscheme; / path-empty. Bool_t SetRelativePart(const TString& ); Returns kTRUE is string qualifies as relative-part:; relative-part = ""//"" authority path-abempty; / path-absolute; / path-noscheme; / path-empty. const TString PctEncode(const TString& source); Percent-encode and return the given string according to RFC 3986; in principle, this function cannot fail or produce an error. Bool_t IsHost(const TString& ); Returns kTRUE if string qualifies as valid host component:; host = IP-literal / IPv4address / reg-name; implemented: host = IPv4address / reg-name. Bool_t IsPath(const TString& ); Retruns kTRUE if string qualifies as valid path component:; path = path-abempty ; begins with ""/"" or is empty; / path-absolute ; begins with ""/"" but not ""//""; / path-noscheme ; begins with a non-colon segment; / path-rootless ; begins with a segment; / path-empty ; zero characters. Bool_t IsPathAbempty(const TString& ); Returns kTRUE if string qualifies as valid path-abempty component:; path-abempty = *( ""/"" segment ); segment = *pchar. Bool_t IsPathAbsolute(const TString& ); Returns kTRUE if string qualifies as valid path-absolute component; path-absolute = ""/"" [ segment-nz *( ""/"" segment ) ]; segment-nz = 1*pchar; segment = *pchar. Bool_t IsPathNoscheme(const TString& ); Returns kTRUE if s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUri.html:13238,error,error,13238,root/html528/TUri.html,https://root.cern,https://root.cern/root/html528/TUri.html,10,['error'],['error']
Availability,"horization function. Automatically called when; libKrb5Auth is loaded. void SetGlobusAuthHook(GlobusAuth_t func); Set Globus authorization function. Automatically called when; libGlobusAuth is loaded. Int_t SshError(const char* errfile); SSH error parsing: returns; 0 : no error or fatal; 1 : should retry (eg 'connection closed by remote host'). Int_t SshAuth(TString& user); SSH client authentication code. const char * GetSshUser(TString user) const; Method returning the user to be used for the ssh login.; Looks first at SSH.Login and finally at env USER.; If SSH.LoginPrompt is set to 'yes' it prompts for the 'login name'. Bool_t CheckHost(const char* Host, const char* host); Check if 'host' matches 'href':; this means either equal or ""containing"" it, even with wild cards *; in the first field (in the case 'href' is a name, ie not IP address); Returns kTRUE if the two matches. Int_t RfioAuth(TString& user); UidGid client authentication code.; Returns 0 in case authentication failed; 1 in case of success; <0 in case of system error. Int_t ClearAuth(TString& user, TString& passwd, Bool_t& pwhash); UsrPwd client authentication code.; Returns 0 in case authentication failed; 1 in case of success. THostAuth * GetHostAuth(const char* host, const char* user = """", Option_t* opt = ""R"", Int_t* Exact = 0); Sets fUser=user and search fgAuthInfo for the entry pertaining to; (host,user), setting fHostAuth accordingly.; If opt = ""P"" use fgProofAuthInfo list instead; If no entry is found fHostAuth is not changed. THostAuth * HasHostAuth(const char* host, const char* user, Option_t* opt = ""R""); Checks if a THostAuth with exact match for {host,user} exists; in the fgAuthInfo list; If opt = ""P"" use ProofAuthInfo list instead; Returns pointer to it or 0. void FileExpand(const char* fin, FILE* ftmp); Expands include directives found in fexp files; The expanded, temporary file, is pointed to by 'ftmp'; and should be already open. To be called recursively. char * GetDefaultDetails(Int_t me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:17487,error,error,17487,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,11,['error'],['error']
Availability,"hort summary is printed in the end. ; Definition at line 12522 of file TProof.cxx. ◆ ShowPackages(). void TProof::ShowPackages ; (; Bool_t ; all = kFALSE, . Bool_t ; redirlog = kFALSE . ). List contents of package directory. ; If all is true show all package directories also on slaves. If everything is ok all package directories should be the same. If redir is kTRUE the result is redirected to the log file (option available for internal actions). ; Definition at line 7770 of file TProof.cxx. ◆ ShowParameters(). void TProof::ShowParameters ; (; const char * ; wildcard = ""PROOF_*""); const. Show the input list parameters specified by the wildcard. ; Default is the special PROOF control parameters (PROOF_*). ; Definition at line 9958 of file TProof.cxx. ◆ ShowQueries(). void TProof::ShowQueries ; (; Option_t * ; opt = """"). Ask the master for the list of queries. ; Options: ""A"" show information about all the queries known to the server, i.e. even those processed by other sessions ""L"" show only information about queries locally available i.e. already retrieved. If ""L"" is specified, ""A"" is ignored. ""F"" show all details available about queries ""H"" print help menu Default """" ; Definition at line 2165 of file TProof.cxx. ◆ ShowStagingStatusDataSet(). void TProof::ShowStagingStatusDataSet ; (; const char * ; dataset, . const char * ; optStr = ""filter:SsCc"" . ). virtual . Like GetStagingStatusDataSet, but displays results immediately. ; Definition at line 11116 of file TProof.cxx. ◆ SlaveStartupThread(). static void * TProof::SlaveStartupThread ; (; void * ; arg). staticprotected . ◆ StartSlaves(). Bool_t TProof::StartSlaves ; (; Bool_t ; attach = kFALSE). protectedvirtual . Start up PROOF slaves. ; Reimplemented in TProofCondor, and TProofSuperMaster.; Definition at line 1660 of file TProof.cxx. ◆ StartupMessage(). void TProof::StartupMessage ; (; const char * ; msg, . Bool_t ; status, . Int_t ; done, . Int_t ; total . ). Send startup message. ; Definition at line 9312 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:151706,avail,available,151706,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"hort, float8 >;  CStaticCastHelper< short, short >;  CStaticCastHelper< short, unsigned short >;  CStaticCastHelper< unsigned int, double >;  CStaticCastHelper< unsigned int, float >;  CStaticCastHelper< unsigned int, int >;  CStaticCastHelper< unsigned int, unsigned int >;  CStaticCastHelper< unsigned short, float8 >;  CStaticCastHelper< unsigned short, short >;  CStaticCastHelper< unsigned short, unsigned short >;  CSwizzledVector;  CVector;  CVectorHelper;  CVectorHelper< _M128 >;  CVectorHelper< _M128D >;  CVectorHelper< _M128I >;  CVectorHelper< double >;  CVectorHelper< float >;  CVectorHelper< float8 >;  CVectorHelper< int >;  CVectorHelper< M256 >;  CVectorHelper< signed short >;  CVectorHelper< unsigned int >;  CVectorHelper< unsigned short >;  CVectorHelperSize;  CVectorTraits;  CVectorTypeHelper;  CVectorTypeHelper< double >;  CVectorTypeHelper< float >;  CVectorTypeHelper< sfloat >;  CWriteMaskedVector;  C_MemorySizeCalculation;  CBinaryOperation;  CCpuIdThis class is available for x86 / AMD64 systems to read and interpret information about the CPU's capabilities ;  CDetermineEntryType;  CDetermineEntryType< sfloat >;  CImplementationT;  CMath;  CMath< double >;  CMath< float >;  CMemoryA helper class for fixed-size two-dimensional arrays ;  CMemory< V, 0u, 0u >A helper class that is very similar to Memory<V, Size> but with dynamically allocated memory and thus dynamic size ;  CMemory< V, Size, 0u >A helper class to simplify usage of correctly aligned and padded memory, allowing both vector and scalar access ;  CMemoryBaseCommon interface to all Memory classes, independent of allocation on the stack or heap ;  CMemoryDimensionBase;  CMemoryDimensionBase< V, Parent, 1, RowMemory >;  CMemoryDimensionBase< V, Parent, 2, RowMemory >;  CNegateTypeHelper;  CNegateTypeHelper< unsigned char >;  CNegateTypeHelper< unsigned int >;  CNegateTypeHelper< unsigned short >;  COperand;  Csfloat;  CTrigonometric;  CVectorPointerHelperHelper class for the Memory::vector(si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:67705,avail,available,67705,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['avail'],['available']
Availability,"hort_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveElement::FindItem(TGListTree* ltree); virtual TEveElement::sLTI_iTEveElement::FindItem(TGListTree* ltree, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBoxSet.html:8489,error,error,8489,root/html528/TEveBoxSet.html,https://root.cern,https://root.cern/root/html528/TEveBoxSet.html,24,['error'],['error']
Availability,"hose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDEFoam.html:22271,error,error,22271,root/html534/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDEFoam.html,6,['error'],['error']
Availability,"hosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 3. One observes that the . for signal reproduces correctly the PDF even where the latter vanishes,; although the error bars remain sizeable. This results from the almost; complete cancellation between positive and negative weights: the sum of; weights is close to zero while the sum of weights squared is not. The; occurence of negative weights occurs through the appearance of the; covariance matrix, and its negative components, in the definition of; Eq. (2). A word of caution is in order with respect to the error bars. Whereas; their sum in quadrature is identical to the statistical uncertainties; of the yields determined by the fit, and if, in addition, they are; asymptotically correct, the error bars should be handled with care for; low statistics and/or for too fine binning. This is because the error; bars do not incorporate two known properties of the PDFs: PDFs are; positive definite and can be non-zero in a given x-bin, even if in the; particular data sample at hand, no event is observed in this bin. The; latter limitation is not specific to; ,; rather it is alw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:6980,error,error,6980,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,10,['error'],['error']
Availability,"host = """", Int_t perfidx = 0, const char* msd = """", const char* datadir = """"); ~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; SysInfo_tGetSysInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlaveInfo.html:1668,error,error,1668,root/html528/TSlaveInfo.html,https://root.cern,https://root.cern/root/html528/TSlaveInfo.html,6,['error'],['error']
Availability,"hostauth object with one method only. ;  ;  THostAuth (const char *host, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (THostAuth &ha);  Copy ctor ... ;  ; virtual ~THostAuth ();  The dtor. ;  ; void Activate ();  ; void AddFirst (Int_t level, const char *details=nullptr);  Add new method in first position If already in the list, set as first method 'level' with authentication 'details'. ;  ; void AddMethod (Int_t level, const char *details=nullptr);  Add method to the list. ;  ; void AsString (TString &out) const;  Return a static string with all info in a serialized form. ;  ; void CountFailure (Int_t level);  Count failures for 'method'. ;  ; void CountSuccess (Int_t level);  Count successes for 'method'. ;  ; TRootSecContext * CreateSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *details, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=-1);  Create a Security context and add it to local list Return pointer to it to be stored in TAuthenticate. ;  ; void DeActivate ();  ; TList * Established () const;  ; const char * GetDetails (Int_t level);  Return authentication details for specified level or """" if the specified level does not exist for this host. ;  ; const char * GetDetailsByIdx (Int_t idx) const;  ; Int_t GetFailure (Int_t idx) const;  ; const char * GetHost () const;  ; Int_t GetMethod (Int_t idx) const;  ; Int_t GetServer () const;  ; Int_t GetSuccess (Int_t idx) const;  ; const char * GetUser () const;  ; Bool_t HasMethod (Int_t level, Int_t *pos=nullptr);  Return kTRUE if method 'level' is in the list. ;  ; TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHostAuth.html:1650,failure,failures,1650,doc/master/classTHostAuth.html,https://root.cern,https://root.cern/doc/master/classTHostAuth.html,1,['failure'],['failures']
Availability,"hostname. This check algotithm; 14807 * will only work for RFC 952 compliant hostnames,; 14808 * starting with a letter, containing only letters,; 14809 * digits and hyphen ('-'). Newer specs may allow; 14810 * more, but this is not guaranteed here, since it; 14811 * may interfere with rules for port option lists. */; 14812 ; 14813 /* According to RFC 1035, hostnames are restricted to 255 characters; 14814 * in total (63 between two dots). */; 14815 char hostname[256];; 14816 size_t hostnlen = (size_t)(cb - vec->ptr);; 14817 ; 14818 if ((hostnlen >= vec->len) || (hostnlen >= sizeof(hostname))) {; 14819 /* This would be invalid in any case */; 14820 *ip_version = 0;; 14821 return 0;; 14822 }; 14823 ; 14824 mg_strlcpy(hostname, vec->ptr, hostnlen + 1);; 14825 ; 14826 if (mg_inet_pton(; 14827 AF_INET, hostname, &so->lsa.sin, sizeof(so->lsa.sin), 1)) {; 14828 if (sscanf(cb + 1, ""%u%n"", &port, &len); 14829 == 1) { // NOLINT(cert-err34-c) 'sscanf' used to convert a; 14830 // string to an integer value, but function will not; 14831 // report conversion errors; consider using 'strtol'; 14832 // instead; 14833 *ip_version = 4;; 14834 so->lsa.sin.sin_port = htons((uint16_t)port);; 14835 len += (int)(hostnlen + 1);; 14836 } else {; 14837 len = 0;; 14838 }; 14839#if defined(USE_IPV6); 14840 } else if (mg_inet_pton(AF_INET6,; 14841 hostname,; 14842 &so->lsa.sin6,; 14843 sizeof(so->lsa.sin6),; 14844 1)) {; 14845 if (sscanf(cb + 1, ""%u%n"", &port, &len) == 1) {; 14846 *ip_version = 6;; 14847 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14848 len += (int)(hostnlen + 1);; 14849 } else {; 14850 len = 0;; 14851 }; 14852#endif; 14853 } else {; 14854 len = 0;; 14855 }; 14856 ; 14857#if defined(USE_X_DOM_SOCKET); 14858 ; 14859 } else if (vec->ptr[0] == 'x') {; 14860 /* unix (linux) domain socket */; 14861 if (vec->len < sizeof(so->lsa.sun.sun_path)) {; 14862 len = vec->len;; 14863 so->lsa.sun.sun_family = AF_UNIX;; 14864 memset(so->lsa.sun.sun_path, 0, sizeof(so->lsa.sun.sun_path));; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:438658,error,errors,438658,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"hostname. This check algotithm; 14808 * will only work for RFC 952 compliant hostnames,; 14809 * starting with a letter, containing only letters,; 14810 * digits and hyphen ('-'). Newer specs may allow; 14811 * more, but this is not guaranteed here, since it; 14812 * may interfere with rules for port option lists. */; 14813 ; 14814 /* According to RFC 1035, hostnames are restricted to 255 characters; 14815 * in total (63 between two dots). */; 14816 char hostname[256];; 14817 size_t hostnlen = (size_t)(cb - vec->ptr);; 14818 ; 14819 if ((hostnlen >= vec->len) || (hostnlen >= sizeof(hostname))) {; 14820 /* This would be invalid in any case */; 14821 *ip_version = 0;; 14822 return 0;; 14823 }; 14824 ; 14825 mg_strlcpy(hostname, vec->ptr, hostnlen + 1);; 14826 ; 14827 if (mg_inet_pton(; 14828 AF_INET, hostname, &so->lsa.sin, sizeof(so->lsa.sin), 1)) {; 14829 if (sscanf(cb + 1, ""%u%n"", &port, &len); 14830 == 1) { // NOLINT(cert-err34-c) 'sscanf' used to convert a; 14831 // string to an integer value, but function will not; 14832 // report conversion errors; consider using 'strtol'; 14833 // instead; 14834 *ip_version = 4;; 14835 so->lsa.sin.sin_port = htons((uint16_t)port);; 14836 len += (int)(hostnlen + 1);; 14837 } else {; 14838 len = 0;; 14839 }; 14840#if defined(USE_IPV6); 14841 } else if (mg_inet_pton(AF_INET6,; 14842 hostname,; 14843 &so->lsa.sin6,; 14844 sizeof(so->lsa.sin6),; 14845 1)) {; 14846 if (sscanf(cb + 1, ""%u%n"", &port, &len) == 1) {; 14847 *ip_version = 6;; 14848 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14849 len += (int)(hostnlen + 1);; 14850 } else {; 14851 len = 0;; 14852 }; 14853#endif; 14854 } else {; 14855 len = 0;; 14856 }; 14857 ; 14858#if defined(USE_X_DOM_SOCKET); 14859 ; 14860 } else if (vec->ptr[0] == 'x') {; 14861 /* unix (linux) domain socket */; 14862 if (vec->len < sizeof(so->lsa.sun.sun_path)) {; 14863 len = vec->len;; 14864 so->lsa.sun.sun_family = AF_UNIX;; 14865 memset(so->lsa.sun.sun_path, 0, sizeof(so->lsa.sun.sun_path));; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:438691,error,errors,438691,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"hough there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a M warning message, may make both the function minimum and parameter errors unreliable. See section [answer:right-errors], Getting the right parameter errors with limits. The best way to be absolutely sure of the errors, is to use “independent” calculations and compare them, or compare the calculated errors with a picture of the function if possible. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current search direction, since this is the optimal strategy for quadratic functions and “physical” function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:75271,error,errors,75271,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,8,['error'],['errors']
Availability,"hould be; 300used carefully because the smoothing algorithm may show some (huge); 301""bouncing"" effects. In some cases it looks nicer than option ""3""; 302(because it is smooth) but it can be misleading.; 303 ; 304Begin_Macro(source); 305{; 306 auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; 307 double x[] = {0, 1, 2, 3, 4};; 308 double y[] = {0, 2, 4, 1, 3};; 309 double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; 310 double ey[] = {1, 0.5, 1, 0.5, 1};; 311 auto ge = new TGraphErrors(5, x, y, ex, ey);; 312 ge->SetTitle(""Errors as a smooth band"");; 313 ge->SetFillColor(6);; 314 ge->SetFillStyle(3005);; 315 ge->Draw(""a4"");; 316}; 317End_Macro; 318 ; 319The following example shows how the option ""[]"" can be used to superimpose; 320systematic errors on top of a graph with statistical errors.; 321 ; 322Begin_Macro(source); 323{; 324 auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; 325 c43->DrawFrame(0., -0.5, 6., 2);; 326 ; 327 double x[5] = {1, 2, 3, 4, 5};; 328 double zero[5] = {0, 0, 0, 0, 0};; 329 ; 330 // data set (1) with stat and sys errors; 331 double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; 332 double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; 333 double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; 334 ; 335 // data set (2) with stat and sys errors; 336 double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; 337 double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; 338 double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; 339 ; 340 // Now draw data set (1); 341 ; 342 // We first have to draw it only with the stat errors; 343 auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; 344 graph1->SetMarkerStyle(20);; 345 graph1->Draw(""P"");; 346 ; 347 // Now we have to somehow depict the sys errors; 348 ; 349 auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; 350 graph1_sys->Draw(""[]"");; 351 ; 352 // Now draw data set (2); 353 ; 354 // We first have to draw it only with the stat errors; 355 auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; 356 graph2->SetMarkerSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:12829,error,errors,12829,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['errors']
Availability,"hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into their own buffer before calling; this method again. Option ""l""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:6931,error,error,6931,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['error'],['error']
Availability,"hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(const Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into their own buffer before calling; this method again. Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTimeStamp.html:6957,error,error,6957,root/html604/TTimeStamp.html,https://root.cern,https://root.cern/root/html604/TTimeStamp.html,2,['error'],['error']
Availability,"hout errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:39246,error,errors,39246,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,20,['error'],"['error', 'errors']"
Availability,"hread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interprete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:34920,down,down,34920,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['down'],['down']
Availability,"hreaded process systems, a process has a set of properties. In multi-threaded systems, these properties are divided between processes and threads.; 23.1.1 Process Properties; A process in a multi-threaded system is the changeable entity. It must be considered as an execution frame. It has all traditional process attributes, such as:. Process ID, process group ID, user ID, and group ID; Environment; Working directory. A process also provides a common address space and common system resources:. File descriptors; Signal actions; Shared libraries; Inter-process communication tools (such as message queues, pipes, semaphores, or shared memory). 23.1.2 Thread Properties; A thread is the schedulable entity. It has only those properties that are required to ensure its independent flow of control. These include the following properties:. Stack; Scheduling properties (such as policy or priority); Set of pending and blocked signals; Some thread-specific data (TSD). An example of thread-specific data is the error indicator, errno. In multi-threaded systems, errno is no longer a global variable, but usually a subroutine returning a thread-specific errno value. Some other systems may provide other implementations of errno. With respect to ROOT, a thread specific data is for example the gPad pointer, which is treated in a different way, whether it is accessed from any thread or the main thread.; Threads within a process must not be considered as a group of processes (even though in Linux each thread receives an own process id, so that it can be scheduled by the kernel scheduler). All threads share the same address space. This means that two pointers having the same value in two threads refer to the same data. Also, if any thread changes one of the shared system resources, all threads within the process are affected. For example, if a thread closes a file, the file is closed for all threads.; 23.1.3 The Initial Thread; When a process is created, one thread is automatically created. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1102410,error,error,1102410,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"hronously (i.e. it will; 2384/// only return when the CINT interpreter thread has finished executing; 2385/// the line). On non-Win32 platforms there is no difference between; 2386/// ProcessLine() and ProcessLineSync().; 2387/// The possible error codes are defined by TInterpreter::EErrorCode.; 2388/// Returns the result of the command, cast to a Longptr_t.; 2389 ; 2390Longptr_t TROOT::ProcessLineSync(const char *line, Int_t *error); 2391{; 2392 TString sline = line;; 2393 sline = sline.Strip(TString::kBoth);; 2394 ; 2395 if (!fApplication.load()); 2396 TApplication::CreateApplication();; 2397 ; 2398 return (*fApplication).ProcessLine(sline, kTRUE, error);; 2399}; 2400 ; 2401////////////////////////////////////////////////////////////////////////////////; 2402/// Process interpreter command directly via CINT interpreter.; 2403/// Only executable statements are allowed (no variable declarations),; 2404/// In all other cases use TROOT::ProcessLine().; 2405/// The possible error codes are defined by TInterpreter::EErrorCode.; 2406 ; 2407Longptr_t TROOT::ProcessLineFast(const char *line, Int_t *error); 2408{; 2409 TString sline = line;; 2410 sline = sline.Strip(TString::kBoth);; 2411 ; 2412 if (!fApplication.load()); 2413 TApplication::CreateApplication();; 2414 ; 2415 Longptr_t result = 0;; 2416 ; 2417 if (fInterpreter) {; 2418 TInterpreter::EErrorCode *code = (TInterpreter::EErrorCode*)error;; 2419 result = gInterpreter->Calc(sline, code);; 2420 }; 2421 ; 2422 return result;; 2423}; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Read Git commit information and branch name from the; 2427/// etc/gitinfo.txt file.; 2428 ; 2429void TROOT::ReadGitInfo(); 2430{; 2431 TString filename = ""gitinfo.txt"";; 2432 gSystem->PrependPathName(TROOT::GetEtcDir(), filename);; 2433 ; 2434 FILE *fp = fopen(filename, ""r"");; 2435 if (fp) {; 2436 TString s;; 2437 // read branch name; 2438 s.Gets(fp);; 2439 fGitBranch = s;; 2440 // read com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:91711,error,error,91711,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"hs added; or -1 in case of problems. ; Definition at line 872 of file TPackMgr.cxx. ◆ Remove(). Int_t TPackMgr::Remove ; (; const char * ; pack = 0, . Bool_t ; dolock = kTRUE . ). Remove package 'pack' If 'pack' is null or empty all packages are cleared. ; Definition at line 593 of file TPackMgr.cxx. ◆ SetLogger(). void TPackMgr::SetLogger ; (; TPackMgrLog_t ; logger). inline . Definition at line 67 of file TPackMgr.h. ◆ SetName(). void TPackMgr::SetName ; (; const char * ; name). inlineoverridevirtual . Set the name of the TNamed. ; WARNING: if the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example the list of objects in the current directory is a THashList. ; Reimplemented from TNamed.; Definition at line 62 of file TPackMgr.h. ◆ SetPrefix(). void TPackMgr::SetPrefix ; (; const char * ; pfx). inline . Definition at line 68 of file TPackMgr.h. ◆ Show(). void TPackMgr::Show ; (; const char * ; title = 0). Show available packages. ; Definition at line 548 of file TPackMgr.cxx. ◆ ShowEnabled(). void TPackMgr::ShowEnabled ; (; const char * ; title = 0). Show enabled packages. ; Definition at line 662 of file TPackMgr.cxx. ◆ Streamer(). void TPackMgr::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TPackMgr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 106 of file TPackMgr.h. ◆ Unload(). Int_t TPackMgr::Unload ; (; const char * ; pack). Method to unload a package. ; Return -1 on error, 0 otherwise ; Definition at line 411 of file TPackMgr.cxx. ◆ Unpack(). Int_t TPackMgr::Unpack ; (; const char * ; pack, . TMD5 * ; sum = 0 . ). Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ; Returns a pointer to a TMD5 object, transferring ownership to the caller ; Definition at line 723 of file TPackMgr.cxx. Member Data Documentation. ◆ fDir. TString TPackMgr:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:23260,avail,available,23260,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['avail'],['available']
Availability,"ht (C) 1995-2003, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <cstring>; 13#include <iostream>; 14 ; 15#include ""TROOT.h""; 16#include ""TGraphBentErrors.h""; 17#include ""TMath.h""; 18#include ""TVirtualPad.h""; 19#include ""TH1.h""; 20#include ""TF1.h""; 21 ; 22ClassImp(TGraphBentErrors);; 23 ; 24 ; 25////////////////////////////////////////////////////////////////////////////////; 26 ; 27/** \class TGraphBentErrors; 28 \ingroup Graphs; 29A TGraphBentErrors is a TGraph with bent, asymmetric error bars.; 30 ; 31The TGraphBentErrors painting is performed thanks to the TGraphPainter; 32class. All details about the various painting options are given in this class.; 33 ; 34The picture below gives an example:; 35Begin_Macro(source); 36{; 37 auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; 38 const Int_t n = 10;; 39 Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; 40 Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; 41 Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; 42 Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; 43 Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; 44 Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; 45 Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 46 Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; 47 Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 48 Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; 49 auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; 50 gr->SetTitle(""TGraphBentErrors Example"");; 51 gr->SetMarkerColor(4);; 52 gr->SetMarkerStyle(21);; 53 gr->Draw(""ALP"");; 54}; 55End_Macro; 56*/; 57 ; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:1378,error,error,1378,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['error']
Availability,"ht side of the plot. Options supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Curve without axis. ""][""; When this option is selected the first and last vertical lines of the histogram; are not drawn. ""B""; Bar chart option. ""BAR""; Like option ""B"", but bars can be drawn with a 3D effect. ""HBAR""; Like option ""BAR"", but bars are drawn horizontally. ""C""; Draw a smooth Curve through the histogram bins. ""E0""; Draw error bars. Markers are drawn for bins with 0 contents. ""E1""; Draw error bars with perpendicular lines at the edges. ""E2""; Draw error bars with rectangles. ""E3""; Draw a fill area through the end points of the vertical error bars. ""E4""; Draw a smoothed filled area through the end points of the error bars. ""E5""; Like E3 but ignore the bins with 0 contents. ""E6""; Like E4 but ignore the bins with 0 contents. ""X0""; When used with one of the ""E"" option, it suppress the error bar along; X as gStyle->SetErrorX(0) would do. ""L""; Draw a line through the bin contents. ""P""; Draw current marker at each bin except empty bins. ""P0""; Draw current marker at each bin including empty bins. ""PIE""; Draw histogram as a Pie Chart. ""*H""; Draw histogram with a * at each bin. ""LF2""; Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws; also a fill area if the hist fill color is set but the fill area corresponds to; the histogram contour. Options supported for 2D histograms. "" ""; Default (scatter plot). ""ARR""; Arrow mode. Shows gradient between adjacent cells. ""BOX""; A box is drawn for each cell with surface proportional to the content's; absolute value. A negative content is marked with a X. ""BOX1""; A button is drawn for each cell with surface proportional to content's absolute; value. A sunken button is drawn for negative values a raised one for positive. ""COL""; A box is drawn for each cell with a color scale varying with contents. All the;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:7123,error,error,7123,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,6,['error'],['error']
Availability,"htGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGListTreeEditorFrame(const TGWindow* p = 0, Int_t width = 250, Int_t height = 700); Constructor. ~TEveGListTreeEditorFrame(); Destructor. void SetEditorClass(const char* edclass); Set GED editor class. void ConnectSignals(); Connect list-tree signals. void DisconnectSignals(); Disconnect list-tree signals. void ReconfToHorizontal(); Reconfigure to horizontal layout, list-tree and editor side by side. void ReconfToVertical(); Reconfigure to vertical layout, list-tree above the editor. void ItemBelowMouse(TGListTreeItem* entry, UInt_t mask); Different item is below mouse. void ItemClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Item has been clicked, based on mouse button do:; M1 - select, show in editor;; M2 - paste (call gEve->ElementPaste();; M3 - popup context menu. void ItemDblClicked(TGListTreeItem* item, Int_t btn); Item has been double-clicked, potentially expand the children. void ItemKeyPress(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); A key has been pressed for an item. Only <Delete>, <Enter> and <Return> keys are handled here,; otherwise the control is passed back to TGListTree. TEveListTreeItem& operator=(const TEveGListTreeEditorFrame& ). TEveGListTreeEditorFrame(const TEveGListTreeEditorFrame& ). TGListTree* GetListTree() const; { return fListTree; }. TEveGedEditor* GetEditor() const; { return fEditor; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:43; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveGListTreeEditorFrame.html:23662,mask,mask,23662,root/html604/TEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/root/html604/TEveGListTreeEditorFrame.html,2,['mask'],['mask']
Availability,"htGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGListTreeEditorFrame(const TGWindow* p = 0, Int_t width = 250, Int_t height = 700); Constructor. ~TEveGListTreeEditorFrame(); Destructor. void SetEditorClass(const char* edclass); Set GED editor class. void ConnectSignals(); Connect list-tree signals. void DisconnectSignals(); Disconnect list-tree signals. void ReconfToHorizontal(); Reconfigure to horizontal layout, list-tree and editor side by side. void ReconfToVertical(); Reconfigure to vertical layout, list-tree above the editor. void ItemBelowMouse(TGListTreeItem* entry, UInt_t mask); Different item is below mouse. void ItemClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Item has been clicked, based on mouse button do:; M1 - select, show in editor;; M2 - paste (call gEve->ElementPaste();; M3 - popup context menu. void ItemDblClicked(TGListTreeItem* item, Int_t btn); Item has been double-clicked, potentially expand the children. void ItemKeyPress(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); A key has been pressed for an item. Only <Delete>, <Enter> and <Return> keys are handled here,; otherwise the control is passed back to TGListTree. TEveListTreeItem& operator=(const TEveGListTreeEditorFrame& ). TEveGListTreeEditorFrame(const TEveGListTreeEditorFrame& ). TGListTree* GetListTree() const; { return fListTree; }. TEveGedEditor* GetEditor() const; { return fEditor; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:44; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGListTreeEditorFrame.html:23662,mask,mask,23662,root/html602/TEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/root/html602/TEveGListTreeEditorFrame.html,2,['mask'],['mask']
Availability,hts. ; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag = false the structure is deleted ; Reimplemented from TH1.; Definition at line 1379 of file TProfile3D.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 31 of file TProfile3D.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 30 of file TProfile3D.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile3D::fBinEntries. protected . Number of entries per bin. ; Definition at line 34 of file TProfile3D.h. ◆ fBinSumw2. TArrayD TProfile3D::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 41 of file TProfile3D.h. ◆ fErrorMode. EErrorType TProfile3D::fErrorMode. protected . Option to compute errors. ; Definition at line 35 of file TProfile3D.h. ◆ fgApproximate. Bool_t TProfile3D::fgApproximate = kFALSE. staticprotected . Bin error approximation option. ; Definition at line 42 of file TProfile3D.h. ◆ fScaling. Bool_t TProfile3D::fScaling. protected . ! True when TProfile3D::Scale is called ; Definition at line 38 of file TProfile3D.h. ◆ fTmax. Double_t TProfile3D::fTmax. protected . Upper limit in T (if set) ; Definition at line 37 of file TProfile3D.h. ◆ fTmin. Double_t TProfile3D::fTmin. protected . Lower limit in T (if set) ; Definition at line 36 of file TProfile3D.h. ◆ fTsumwt. Double_t TProfile3D::fTsumwt. protected . Total Sum of weight*T. ; Definition at line 39 of file TProfile3D.h. ◆ fTsumwt2. Double_t TProfile3D::fTsumwt2. protected . Total Sum of weight*T*T. ; Definition at line 40 of file TProfile3D.h. Libraries for TProfile3D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile3D.h; hist/hist/src/TProfile3D.cxx. TProfile3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:105679,error,error,105679,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['error']
Availability,"hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:54712,down,down,54712,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['down'],['down']
Availability,"hys_ctx;; 18855 int thread_index;; 18856 struct mg_workerTLS tls;; 18857 ; 18858 mg_set_thread_name(""worker"");; 18859 ; 18860 tls.is_master = 0;; 18861 tls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 18862#if defined(_WIN32); 18863 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 18864#endif; 18865 ; 18866 /* Initialize thread local storage before calling any callback */; 18867 pthread_setspecific(sTlsKey, &tls);; 18868 ; 18869 /* Check if there is a user callback */; 18870 if (ctx->callbacks.init_thread) {; 18871 /* call init_thread for a worker thread (type 1), and store the; 18872 * return value */; 18873 tls.user_ptr = ctx->callbacks.init_thread(ctx, 1);; 18874 } else {; 18875 /* No callback: set user pointer to NULL */; 18876 tls.user_ptr = NULL;; 18877 }; 18878 ; 18879 /* Connection structure has been pre-allocated */; 18880 thread_index = (int)(conn - ctx->worker_connections);; 18881 if ((thread_index < 0); 18882 || ((unsigned)thread_index >= (unsigned)ctx->cfg_worker_threads)) {; 18883 mg_cry_ctx_internal(ctx,; 18884 ""Internal error: Invalid worker index %i"",; 18885 thread_index);; 18886 return;; 18887 }; 18888 ; 18889 /* Request buffers are not pre-allocated. They are private to the; 18890 * request and do not contain any state information that might be; 18891 * of interest to anyone observing a server status. */; 18892 conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx);; 18893 if (conn->buf == NULL) {; 18894 mg_cry_ctx_internal(; 18895 ctx,; 18896 ""Out of memory: Cannot allocate buffer for worker %i"",; 18897 thread_index);; 18898 return;; 18899 }; 18900 conn->buf_size = (int)ctx->max_request_size;; 18901 ; 18902 conn->dom_ctx = &(ctx->dd); /* Use default domain and default host */; 18903 ; 18904 conn->tls_user_ptr = tls.user_ptr; /* store ptr for quick access */; 18905 ; 18906 conn->request_info.user_data = ctx->user_data;; 18907 /* Allocate a mutex for this connection to allow communication both; 189",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:561445,error,error,561445,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"hys_ctx;; 18856 int thread_index;; 18857 struct mg_workerTLS tls;; 18858 ; 18859 mg_set_thread_name(""worker"");; 18860 ; 18861 tls.is_master = 0;; 18862 tls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 18863#if defined(_WIN32); 18864 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 18865#endif; 18866 ; 18867 /* Initialize thread local storage before calling any callback */; 18868 pthread_setspecific(sTlsKey, &tls);; 18869 ; 18870 /* Check if there is a user callback */; 18871 if (ctx->callbacks.init_thread) {; 18872 /* call init_thread for a worker thread (type 1), and store the; 18873 * return value */; 18874 tls.user_ptr = ctx->callbacks.init_thread(ctx, 1);; 18875 } else {; 18876 /* No callback: set user pointer to NULL */; 18877 tls.user_ptr = NULL;; 18878 }; 18879 ; 18880 /* Connection structure has been pre-allocated */; 18881 thread_index = (int)(conn - ctx->worker_connections);; 18882 if ((thread_index < 0); 18883 || ((unsigned)thread_index >= (unsigned)ctx->cfg_worker_threads)) {; 18884 mg_cry_ctx_internal(ctx,; 18885 ""Internal error: Invalid worker index %i"",; 18886 thread_index);; 18887 return;; 18888 }; 18889 ; 18890 /* Request buffers are not pre-allocated. They are private to the; 18891 * request and do not contain any state information that might be; 18892 * of interest to anyone observing a server status. */; 18893 conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx);; 18894 if (conn->buf == NULL) {; 18895 mg_cry_ctx_internal(; 18896 ctx,; 18897 ""Out of memory: Cannot allocate buffer for worker %i"",; 18898 thread_index);; 18899 return;; 18900 }; 18901 conn->buf_size = (int)ctx->max_request_size;; 18902 ; 18903 conn->dom_ctx = &(ctx->dd); /* Use default domain and default host */; 18904 ; 18905 conn->tls_user_ptr = tls.user_ptr; /* store ptr for quick access */; 18906 ; 18907 conn->request_info.user_data = ctx->user_data;; 18908 /* Allocate a mutex for this connection to allow communication both; 189",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:561478,error,error,561478,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"h . ). pStart points to a <table>. ; Compute the number of columns, the minimum and maximum size for each column and the overall minimum and maximum size for this table and store these value in the pStart structure. Return a pointer to the </table> element, or to NULL if there is no </table>.; The min and max size for column N (where the leftmost column has N==1) is pStart->fMinW[1] and pStart->fMaxW[1]. The pStart->fMinW[0] and pStart->fMaxW[0] entries contain the minimum and maximum widths of the whole table, including any cell padding, cell spacing, border width and ""hspace"". The values of pStart->fMinW[I] for I>=1 do not contain any cell padding, cell spacing or border width. Only pStart->fMinW[0] contains these extra spaces.; The back references from </table>, </tr>, </td> and </th> back to the <table> markup are also filled in. And for each <td> and <th> markup, the pTable and pEnd fields are set to their proper values.; pStart - The <table> markup lineWidth - Total width available to the table ; Definition at line 374 of file TGHtmlTable.cxx. ◆ TableText(). TGString * TGHtml::TableText ; (; TGHtmlTable * ; pTable, . int ; flag . ). Return text and images from a table as lists. ; The first list is a list of rows (which is a list of cells). An optional second list is a list of images: row col charoffset tokenid. Note: weve added the option to store data/attrs in array var directly.; flag - include images ; Definition at line 108 of file TGHtmlTable.cxx. ◆ TextInsertCmd(). int TGHtml::TextInsertCmd ; (; int ; argc, . char ** ; argv . ). protected . Insert text into text token, or break token into two text tokens. ; Also, handle backspace char by deleting text. Should also handle newline char by splitting text. ; Definition at line 1184 of file TGHtmlParse.cxx. ◆ TokenByIndex(). TGHtmlElement * TGHtml::TokenByIndex ; (; int ; N, . int ; flag . ). protected . Return a pointer to the Nth TGHtmlElement in the list. ; If there is no Nth element, return 0 if flag==0 a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:88272,avail,available,88272,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['avail'],['available']
Availability,"i = 1; i <= fNpar; ++i) {; 5181 ri = 0;; 5182 gssq += fMIGRgs[i-1]*fMIGRgs[i-1];; 5183 for (j = 1; j <= fNpar; ++j) {; 5184 m = TMath::Max(i,j);; 5185 n = TMath::Min(i,j);; 5186 ndex = m*(m-1) / 2 + n;; 5187 ri += fVhmat[ndex-1]*fMIGRgs[j-1];; 5188 }; 5189 fMIGRstep[i-1] = ri*-.5;; 5190 gdel += fMIGRstep[i-1]*fMIGRgs[i-1];; 5191 }; 5192 if (gssq == 0) {; 5193 mnwarn(""D"", ""MIGRAD"", "" FIRST DERIVATIVES OF FCN ARE ALL ZERO"");; 5194 goto L300;; 5195 }; 5196// if gdel positive, V not posdef; 5197 if (gdel >= 0) {; 5198 mnwarn(""D"", ""MIGRAD"", "" NEWTON STEP NOT DESCENT."");; 5199 if (npsdf == 1) goto L1;; 5200 mnpsdf();; 5201 npsdf = 1;; 5202 goto L24;; 5203 }; 5204// do line search; 5205 mnline(fMIGRxxs, fs, fMIGRstep, gdel, toler);; 5206 if (fAmin == fs) goto L200;; 5207 fCfrom = ""MIGRAD "";; 5208 fNfcnfr = nfcnmg;; 5209 fCstatu = ""PROGRESS "";; 5210// get gradient at new point; 5211 mninex(fX);; 5212 if (fISW[2] == 1) {; 5213 Eval(nparx, fGin, fzero, fU, 2); ++fNfcn;; 5214 }; 5215 mnderi();; 5216// calculate new EDM; 5217 npsdf = 0;; 5218L81:; 5219 fEDM = 0;; 5220 gvg = 0;; 5221 delgam = 0;; 5222 gdgssq = 0;; 5223 for (i = 1; i <= fNpar; ++i) {; 5224 ri = 0;; 5225 vgi = 0;; 5226 for (j = 1; j <= fNpar; ++j) {; 5227 m = TMath::Max(i,j);; 5228 n = TMath::Min(i,j);; 5229 ndex = m*(m-1) / 2 + n;; 5230 vgi += fVhmat[ndex-1]*(fGrd[j-1] - fMIGRgs[j-1]);; 5231 ri += fVhmat[ndex-1]*fGrd[j-1];; 5232 }; 5233 fMIGRvg[i-1] = vgi*.5;; 5234 gami = fGrd[i-1] - fMIGRgs[i-1];; 5235 gdgssq += gami*gami;; 5236 gvg += gami*fMIGRvg[i-1];; 5237 delgam += fDirin[i-1]*gami;; 5238 fEDM += fGrd[i-1]*ri*.5;; 5239 }; 5240 fEDM = fEDM*.5*(fDcovar*3 + 1);; 5241// if EDM negative, not positive-definite; 5242 if (fEDM < 0 || gvg <= 0) {; 5243 mnwarn(""D"", ""MIGRAD"", ""NOT POS-DEF. EDM OR GVG NEGATIVE."");; 5244 fCstatu = ""NOT POSDEF"";; 5245 if (npsdf == 1) goto L230;; 5246 mnpsdf();; 5247 npsdf = 1;; 5248 goto L81;; 5249 }; 5250// print information about this iteration; 5251 ++iter;; 5252 if (iswtr >= 3 || (isw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:171128,toler,toler,171128,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['toler'],['toler']
Availability,"i(const TUri& uri); TUri(const TString& uri); TUri(const char* uri); virtual~TUri(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TStringGetAuthority() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TStringGetFragment() const; const TStringGetHierPart() const; const TStringGetHost() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TStringGetPath() const; const TStringGetPort() const; const TStringGetQuery() const; const TStringGetRelativePart() const; const TStringGetScheme() const; virtual const char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUri.html:1552,error,error,1552,root/html528/TUri.html,https://root.cern,https://root.cern/root/html528/TUri.html,6,['error'],['error']
Availability,"i) const; Return the number of events associated with the plotable object,; in the given range. It is always 1 for curves. Double_t getFitRangeBinW() const; Get the bin width associated with this plotable object.; It is alwats zero for curves. void printName(ostream& os) const. Print the name of this curve. void printTitle(ostream& os) const; Print the title of this curve. void printClassName(ostream& os) const; Print the class name of this curve. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of this curve. Double_t chiSquare(const RooHist& hist, int nFitParam) const; Calculate the chi^2/NDOF of this curve with respect to the histogram; 'hist' accounting nFitParam floating parameters in case the curve; was the result of a fit. Double_t average(Double_t lo, Double_t hi) const; Return average curve value in [xFirst,xLast] by integrating curve between points; and dividing by xLast-xFirst. Int_t findPoint(Double_t value, Double_t tolerance = 1.0E-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1.0E-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:23448,toler,tolerance,23448,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,4,['toler'],['tolerance']
Availability,"i, const TString &theWeightFile);  constructor from Reader ;  ; virtual ~MethodDT (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility ;  ; void DeclareOptions ();  Define the options (their key words) that can be set in the option string. ;  ; void GetHelpMessage () const;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns MVA value ;  ; Int_t GetNNodes ();  ; Int_t GetNNodesBeforePruning ();  ; Double_t GetPruneStrength ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; Double_t PruneTree ();  prune the decision tree if requested (good for individual trees that are best grown out, and then pruned back, while boosted decision trees are best 'small' trees to start with. ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  ; void SetMinNodeSize (Double_t sizeInPercent);  ; void SetMinNodeSize (TString sizeInPercent);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestTreeQuality (DecisionTree *dt);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:4555,avail,available,4555,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['avail'],['available']
Availability,"i, item); // steals ref; 350 }; 351 oldargv = l;; 352 }; 353 ; 354// create and set (add program name) the new command line; 355 int argc = args.size() + 1;; 356#if PY_VERSION_HEX < 0x03000000; 357// This is a legacy implementation for Python 2; 358 const char** argv = new const char*[argc];; 359 for (int i = 1; i < argc; ++i) argv[i] = args[i-1].c_str();; 360 argv[0] = Py_GetProgramName();; 361 PySys_SetArgv(argc, const_cast<char**>(argv));; 362 delete [] argv;; 363#else; 364// This is a common code block for Python 3. We prefer using objects to; 365// automatize memory management and not introduce even more preprocessor; 366// branching for deletion at the end of the method.; 367//; 368// FUTURE IMPROVEMENT ONCE OLD PYTHON VERSIONS ARE NOT SUPPORTED BY CPPYY:; 369// Right now we use C++ objects to automatize memory management. One could use; 370// RAAI and the Python memory allocation API (PEP 445) once some old Python; 371// version is deprecated in CPPYY. That new feature is available since version; 372// 3.4 and the preprocessor branching to also support that would be so; 373// complicated to make the code unreadable.; 374 std::vector<std::wstring> argv2;; 375 argv2.reserve(argc);; 376 argv2.emplace_back(name.c_str(), &name[name.size()]);; 377 ; 378 for (int i = 1; i < argc; ++i) {; 379 auto iarg = args[i - 1].c_str();; 380 argv2.emplace_back(iarg, &iarg[strlen(iarg)]);; 381 }; 382 ; 383#if PY_VERSION_HEX < 0x03080000; 384// Before version 3.8, the code is one simple line; 385 wchar_t *argv2_arr[argc];; 386 for (int i = 0; i < argc; ++i) {; 387 argv2_arr[i] = const_cast<wchar_t *>(argv2[i].c_str());; 388 }; 389 PySys_SetArgv(argc, argv2_arr);; 390 ; 391#else; 392// Here we comply to ""PEP 587 – Python Initialization Configuration"" to avoid; 393// deprecation warnings at compile time.; 394 class PyConfigHelperRAAI {; 395 public:; 396 PyConfigHelperRAAI(const std::vector<std::wstring> &argv2); 397 {; 398 PyConfig_InitPythonConfig(&fConfig);; 399 fConfig.parse_argv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:12824,avail,available,12824,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['avail'],['available']
Availability,"i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:8114,error,error,8114,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['error'],['error']
Availability,"i-squared probability distribution function. ;  ; Double_t TMath::Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t TMath::CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * TMath::Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t TMath::CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t TMath::DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t TMath::DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t TMath::E ();  Base of natural log: \( e \). ;  ; Double_t TMath::Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t TMath::Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t TMath::ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t TMath::ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t TMath::EulerGamma ();  Euler-Mascheroni Constant. ;  ; Double_t TMath::Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t TMath::Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t TMath::FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t TMath::FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t TMath::Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t TMath::Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t TMath::Floor (Double_t x);  Rounds x downward, returning the largest integral val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:5758,error,error,5758,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['error'],['error']
Availability,i-th component of the request formula (where the component are ':' separated). ; Definition at line 1081 of file TSelectorDraw.cxx. ◆ GetVar1(). TTreeFormula * TSelectorDraw::GetVar1 ; (; ); const. inline . See TSelectorDraw::GetVar. ; Definition at line 93 of file TSelectorDraw.h. ◆ GetVar2(). TTreeFormula * TSelectorDraw::GetVar2 ; (; ); const. inline . See TSelectorDraw::GetVar. ; Definition at line 95 of file TSelectorDraw.h. ◆ GetVar3(). TTreeFormula * TSelectorDraw::GetVar3 ; (; ); const. inline . See TSelectorDraw::GetVar. ; Definition at line 97 of file TSelectorDraw.h. ◆ GetVar4(). TTreeFormula * TSelectorDraw::GetVar4 ; (; ); const. inline . See TSelectorDraw::GetVar. ; Definition at line 99 of file TSelectorDraw.h. ◆ GetW(). virtual Double_t * TSelectorDraw::GetW ; (; ); const. inlinevirtual . Definition at line 109 of file TSelectorDraw.h. ◆ InitArrays(). void TSelectorDraw::InitArrays ; (; Int_t ; newsize). protectedvirtual . Initialization of the primitive type arrays if the new size is bigger than the available space. ; Definition at line 1092 of file TSelectorDraw.cxx. ◆ IsA(). TClass * TSelectorDraw::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSelector.; Definition at line 121 of file TSelectorDraw.h. ◆ Notify(). bool TSelectorDraw::Notify ; (; ). overridevirtual . This function is called at the first entry of a new tree in a chain. ; Reimplemented from TSelector.; Definition at line 1154 of file TSelectorDraw.cxx. ◆ operator=(). TSelectorDraw & TSelectorDraw::operator= ; (; const TSelectorDraw & ; ). private . ◆ Process(). bool TSelectorDraw::Process ; (; Long64_t ; ). inlineoverridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:23476,avail,available,23476,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['avail'],['available']
Availability,i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:65188,error,errors,65188,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"i.e. ; if they can be just Add-ed for merging). ; Definition at line 3811 of file TProofPlayer.cxx. ◆ Incorporate(). Int_t TProofPlayerRemote::Incorporate ; (; TObject * ; newobj, . TList * ; outlist, . Bool_t & ; merged . ). Incorporate object 'newobj' in the list 'outlist'. ; The object is merged with an object of the same name already existing in the list, or just added. The boolean merged is set to kFALSE when the object is just added to 'outlist'; this happens if the Merge() method does not exist or if a object named as 'obj' is not already in the list. If the obj is not 'merged' than it should not be deleted, unless outlist is not owner of its objects. Return 0 on success, -1 on error. ; Definition at line 3629 of file TProofPlayer.cxx. ◆ InitPacketizer(). Int_t TProofPlayerRemote::InitPacketizer ; (; TDSet * ; dset, . Long64_t ; nentries, . Long64_t ; first, . const char * ; defpackunit, . const char * ; defpackdata . ). protected . Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ; Definition at line 1915 of file TProofPlayer.cxx. ◆ IsA(). TClass * TProofPlayerRemote::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 366 of file TProofPlayer.h. ◆ IsClient(). Bool_t TProofPlayerRemote::IsClient ; (; ); const. overridevirtual . Is the player running on the client? ; Reimplemented from TProofPlayer.; Definition at line 4223 of file TProofPlayer.cxx. ◆ JoinProcess(). Bool_t TProofPlayerRemote::JoinProcess ; (; TList * ; workers). overridevirtual . Prepares the given list of new workers to join a progressing process. ; Returns kTRUE on success, kFALSE otherwise. ; Reimplemented from TProofPlayer.; Definition at line 2533 of file TProofPlayer.cxx. ◆ MergeFeedback(). TList * TProofPlayerRemote::MergeFeedback ; (; ). protected . Merge feedback lists. ; Definition at line 3926 of file TProofPla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:30935,failure,failure,30935,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['failure'],['failure']
Availability,"i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:24619,error,errors,24619,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['error'],['errors']
Availability,"iErrors() [7/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 155 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [8/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 191 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:48061,error,error,48061,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"iErrors.cxx. ◆ SetPointEXhigh(). void TGraphMultiErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exH . ). virtual . Set exH value for point i. ; Definition at line 1869 of file TGraphMultiErrors.cxx. ◆ SetPointEXlow(). void TGraphMultiErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exL . ). virtual . Set exL value for point i. ; Definition at line 1853 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [1/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL, . Double_t ; eyH . ). virtual . Set error e ey values for point i. ; Definition at line 1920 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [2/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ey values for point i. ; Definition at line 1885 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL . ). virtual . Set eyL values for point i. ; Definition at line 1894 of file TGraphMultiErrors.cxx. ◆ SetSumErrorsMode(). void TGraphMultiErrors::SetSumErrorsMode ; (; Int_t ; m). virtual . Set the sum errors mode and recalculate summed errors. ; Definition at line 2007 of file TGraphMultiErrors.cxx. ◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:75730,error,error,75730,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"iErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:49224,error,errors,49224,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"iGenFunction*fFunpointer to integrand function ; unsigned intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result ; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int size = 100000). construct given optionally tolerance (absolute and relative) and maximum size of working array; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000). construct with a reference to the integrand function and given optionally; tolerance (absolute and relative) and maximum size of working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. unsigned int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelToler",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:3036,toler,tolerance,3036,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"iGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TMultiGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t rxmin=0, Axis_t rxmax=0)TMultiGraphvirtual; FitPanel()TMultiGraphvirtual; fMaximumTMultiGraphprotected; fMinimumTMultiGraphprotected; fNameTNamedprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFunction(const char *name) constTMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph-members.html:1575,error,error,1575,doc/master/classTMultiGraph-members.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html,2,['error'],['error']
Availability,"iIndex: public TMVA::SeparationBase. Implementation of the GiniIndex as separation criterion. Function Members (Methods); public:. virtual~GiniIndex(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); TMVA::GiniIndexGiniIndex(); TMVA::GiniIndexGiniIndex(const TMVA::GiniIndex& g); virtual TClass*IsA() const; TMVA::GiniIndex&operator=(const TMVA::GiniIndex&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2; Where: M is a smaple of whatever N elements (events); that belong to K different classes; c(k) is the number of elements that belong to class k; for just Signal and Background classes this boils down to:; Gini(Sample) = 2s*b/(s+b)^2 ( = 2 * purity * (1-purity) ). !! what we use here is 2*Gini.. as for the later use the factor; 2 is irrelevant and hence I'd like to save this calculation. GiniIndex(); construtor for the GiniIndex. { fName=""Gini""; }. GiniIndex(const TMVA::GiniIndex& g); copy constructor. {}. virtual ~GiniIndex(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: GiniIndex.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__GiniIndex.html:1562,down,down,1562,root/html530/TMVA__GiniIndex.html,https://root.cern,https://root.cern/root/html530/TMVA__GiniIndex.html,1,['down'],['down']
Availability,"iMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html:1779,toler,toler,1779,root/html534/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html,2,['toler'],['toler']
Availability,"iParticle(); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBeauty() const; virtual voidTObject::Browse(TBrowser* b); Double_tCharge() const; Int_tCharm() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; TDecayChannel*DecayChannel(Int_t i); TObjArray*DecayList(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Double_tI3() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TParticlePDG.html:2730,error,error,2730,root/html528/TParticlePDG.html,https://root.cern,https://root.cern/root/html528/TParticlePDG.html,4,['error'],['error']
Availability,"iable that can be changed from the outside.Definition RooRealVar.h:37; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TTextBase class for several text objects.Definition TText.h:22; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; arrowDefinition RArrowDS.hxx:17; rf106_plotdecorationDefinition rf106_plotdecoration.py:1; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf106_plotdecoration.C. tutorialsroofitrf106_plotdecoration.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf106__plotdecoration_8C.html:5463,error,error,5463,doc/master/rf106__plotdecoration_8C.html,https://root.cern,https://root.cern/doc/master/rf106__plotdecoration_8C.html,1,['error'],['error']
Availability,"iable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:20601,error,error,20601,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,2,['error'],['error']
Availability,"iables in projectedVars and then scaling; the result by scaleFactor. Returns a pointer to the input; histogram, or zero in case of an error. The input histogram can; be any TH1 subclass, and therefore of arbitrary; dimension. Variables are matched with the (x,y,...) dimensions of; the input histogram according to the order in which they appear; in the input plotVars list. If scaleForDensity is true the; histogram is filled with a the functions density rather than; the functions value (i.e. the value at the bin center is multiplied; with bin volume). RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; Fill a RooDataHist with values sampled from this function at the; bin centers. If extendedMode is true, the p.d.f. values is multiplied; by the number of expected events in each bin. An optional scaling by a given scaleFactor can be performed.; Returns a pointer to the input RooDataHist, or zero; in case of an error. If correctForBinSize is true the RooDataHist; is filled with the functions density (function value times the; bin volume) rather than function value. If showProgress is true; a process indicator is printed on stdout in steps of one percent,; which is mostly useful for the sampling of expensive functions; such as likelihoods. TH1* createHistogram(const char* varNameList, Int_t xbins = 0, Int_t ybins = 0, Int_t zbins = 0) const; Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this function for the variables with given names; The number of bins can be controlled using the [xyz]bins parameters. For a greater degree of control; use the createHistogram() method below with named arguments. The caller takes ownership of the returned histogram. TH1 * createHistogram(const char* name, const RooAbsRealLValue& xvar, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:40343,error,error,40343,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['error']
Availability,"iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*TGeoBBox::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoBBox::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox* parambox,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoXtru.html:4208,error,error,4208,root/html528/TGeoXtru.html,https://root.cern,https://root.cern/root/html528/TGeoXtru.html,4,['error'],['error']
Availability,"ial a_j}; \frac{\partial f(i,a^{(t)})}{\partial a_k}; \Delta a_j^{(t)} \]. in gamma-ray spectra we have to fit together tens, hundreds of peaks simultaneously that sometimes represent thousands of parameters.; the calculation of the inversion matrix of such a size is practically impossible.; the awmi method is based on the assumption that the off-diagonal terms in the matrix A are equal to zero. \[; \Delta a_{k}^{(t+1)} = \alpha^{(t)}; \frac{; \sum_{i=1}^{N} \frac{e_{i}^{(t)}}{y_i}\frac{\partial f(i,a^{(t)})}{\partial a_k}; }{; \sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}; }; \]; where the error in the channel i is \(e_{i}^{(t)} = y_i-f(i,a^{(t)}); k=1,2,...,M\) and \(\alpha^{(t)}=1\) if the process is convergent or \(\alpha^{(t)}=0.5 \alpha^{(t-1)}\) if it is divergent. Another possibility is to optimize this coefficient.; The error of k-th parameter estimate is; \[; \Delta a_k^{(e)}=; \sqrt{\frac; {\sum_{i=1}^{N}\frac{e_i^2}{y_i}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}}; }; \]; Algorithm with higher powers w=1,2,3...:; \[; \Delta a_{k,w}^{(t+1)}=; \alpha^{(t)}; \frac; {\sum_{i=1}^{N} \frac{e_i}{y_i}\left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w-1}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w}\frac{1}{y_i}}; \]; We have implemented the non-symmetrical semi-empirical peak shape function. It contains the symmetrical Gaussian as well as non-symmetrical terms:; \[; f(i,a) =; \sum_{i=1}^{M} A(j); \left\{; exp\left[\frac{-(i-p(j))^2}{2\sigma^2}\right]; +\frac{1}{2}T.exp\left[\frac{(i-p(j))}{B\sigma}\right]; .erfc\left[\frac{(i-p(j))}{\sigma}+\frac{1}{2B}\right]; +\frac{1}{2}S.erfc\left[\frac{(i-p(j))}{\sigma}\right]; \right\}; \]; where T, S are relative amplitudes and B is a slope.; Detailed description of the algorithm is given in [13].; The fitting function implementing the algorithm without matrix inversion has the form of; char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:37429,error,error,37429,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['error'],['error']
Availability,"ial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitter directly ;  fitLinearRobust.C This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers ;  fitMultiGraph.C fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normaliz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:104744,error,errors,104744,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['error'],['errors']
Availability,"ial(const char *name, TGeoElement *elem, Double_t rho);; 69 ; 70 // destructor; 71 ~TGeoMaterial() override;; 72 // methods; 73 static Double_t Coulomb(Double_t z);; 74 // radioactive mixture evolution; 75 virtual TGeoMaterial *DecayMaterial(Double_t time, Double_t precision = 0.001);; 76 virtual void FillMaterialEvolution(TObjArray *population, Double_t precision = 0.001);; 77 // getters & setters; 78 bool AddProperty(const char *property, const char *ref);; 79 bool AddConstProperty(const char *property, const char *ref);; 80 Int_t GetNproperties() const { return fProperties.GetSize(); }; 81 Int_t GetNconstProperties() const { return fConstProperties.GetSize(); }; 82 const char *GetPropertyRef(const char *property) const;; 83 const char *GetPropertyRef(Int_t i) const; 84 {; 85 return (fProperties.At(i) ? fProperties.At(i)->GetTitle() : nullptr);; 86 }; 87 Double_t GetConstProperty(const char *property, Bool_t *error = nullptr) const;; 88 Double_t GetConstProperty(Int_t i, Bool_t *error = nullptr) const;; 89 const char *GetConstPropertyRef(const char *property) const;; 90 const char *GetConstPropertyRef(Int_t i) const; 91 {; 92 return (fConstProperties.At(i) ? fConstProperties.At(i)->GetTitle() : nullptr);; 93 }; 94 TList const &GetProperties() const { return fProperties; }; 95 TList const &GetConstProperties() const { return fConstProperties; }; 96 TGDMLMatrix *GetProperty(const char *name) const;; 97 TGDMLMatrix *GetProperty(Int_t i) const;; 98 virtual Int_t GetByteCount() const { return sizeof(*this); }; 99 virtual Double_t GetA() const { return fA; }; 100 virtual Double_t GetZ() const { return fZ; }; 101 virtual Int_t GetDefaultColor() const;; 102 virtual Double_t GetDensity() const { return fDensity; }; 103 virtual Int_t GetNelements() const { return 1; }; 104 TGeoElement *GetElement() const;; 105 virtual TGeoElement *GetElement(Int_t i) const;; 106 virtual void GetElementProp(Double_t &a, Double_t &z, Double_t &w, Int_t i = 0);; 107 TGeoElement *GetBaseElement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8h_source.html:3665,error,error,3665,doc/master/TGeoMaterial_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8h_source.html,2,['error'],['error']
Availability,"ial.cxx:1122; TGeoNavigatorArrayDefinition TGeoNavigator.h:294; TGeoNavigatorArray::AddNavigatorTGeoNavigator * AddNavigator()Add a new navigator to the array.Definition TGeoNavigator.cxx:2745; TGeoNavigatorArray::GetCurrentNavigatorTGeoNavigator * GetCurrentNavigator() constDefinition TGeoNavigator.h:308; TGeoNavigatorArray::SetCurrentNavigatorTGeoNavigator * SetCurrentNavigator(Int_t inav)Definition TGeoNavigator.h:309; TGeoNavigatorClass providing navigation API for TGeo geometries.Definition TGeoNavigator.h:32; TGeoNavigator::CdUpvoid CdUp()Go one level up in geometry.Definition TGeoNavigator.cxx:352; TGeoNavigator::DoBackupStatevoid DoBackupState()Backup the current state without affecting the cache stack.Definition TGeoNavigator.cxx:2648; TGeoNavigator::DoRestoreStatevoid DoRestoreState()Restore a backed-up state without affecting the cache stack.Definition TGeoNavigator.cxx:2657; TGeoNavigator::CrossBoundaryAndLocateTGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode *skipnode)Cross next boundary and locate within current node The current point must be on the boundary of fCurr...Definition TGeoNavigator.cxx:523; TGeoNavigator::GetHMatrixTGeoHMatrix * GetHMatrix()Return stored current matrix (global matrix of the next touched node).Definition TGeoNavigator.cxx:2670; TGeoNavigator::LocalToMastervoid LocalToMaster(const Double_t *local, Double_t *master) constDefinition TGeoNavigator.h:235; TGeoNavigator::CdNextvoid CdNext()Do a cd to the node found next by FindNextBoundary.Definition TGeoNavigator.cxx:405; TGeoNavigator::SafetyDouble_t Safety(Bool_t inside=kFALSE)Compute safe distance from the current point.Definition TGeoNavigator.cxx:1689; TGeoNavigator::GotoSafeLevelBool_t GotoSafeLevel()Go upwards the tree until a non-overlapping node.Definition TGeoNavigator.cxx:2357; TGeoNavigator::cdBool_t cd(const char *path="""")Browse the tree of nodes starting from top node according to pathname.Definition TGeoNavigator.cxx:210; TGeoNavigator::IsSameLocationBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:223987,down,downwards,223987,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['down'],['downwards']
Availability,"ialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:16903,robust,robust,16903,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['robust'],['robust']
Availability,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:19773,error,errors,19773,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,6,['error'],"['error', 'errorY', 'errors']"
Availability,"ialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:38163,down,down,38163,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['down'],['down']
Availability,"ian approximations made; //; model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));; ; // Calculate error using sampling method and visualize as dashed red line.; //; // In this method a number of curves is calculated with variations of the parameter values, as sampled; // from a multi-variate Gaussian pdf that is constructed from the fit results covariance matrix.; // The error(x) is determined by calculating a central interval that capture N% of the variations; // for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves; // is chosen to be such that at least 100 curves are expected to be outside the N% interval, and is minimally; // 100 (e.g. Z=1->Ncurve=356, Z=2->Ncurve=2156)) Intervals from the sampling method can be asymmetric,; // and may perform better in the presence of strong correlations, but may take (much) longer to calculate; model.plotOn(frame, VisualizeError(*r, 1, false), DrawOption(""L""), LineWidth(2), LineColor(kRed));; ; // Perform the same type of error visualization on the background component only.; // The VisualizeError() option can generally applied to _any_ kind of plot (components, asymmetries, efficiencies; // etc..); model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange), Components(""bkg""));; model.plotOn(frame, VisualizeError(*r, 1, false), DrawOption(""L""), LineWidth(2), LineColor(kRed), Components(""bkg""),; LineStyle(kDashed));; ; // Overlay central value; model.plotOn(frame);; model.plotOn(frame, Components(""bkg""), LineStyle(kDashed));; d->plotOn(frame);; frame->SetMinimum(0);; ; // V i s u a l i z e p a r t i a l f i t e r r o r; // ------------------------------------------------------; ; // Make plot frame; RooPlot *frame2 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (m,m2)""));; ; // Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; // ___ -1; // Vred = V22 = V11 - V12 * V22 * V21; //; // Whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:3255,error,error,3255,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,1,['error'],['error']
Availability,"ian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RMinimizer_8cxx_source.html:5346,error,errors,5346,doc/master/RMinimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html,1,['error'],['errors']
Availability,"ian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- optim( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix; 116 r.Execute(""hess<-matrix(hess,c(ndim,ndim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RMinimizer_8cxx_source.html:4678,error,errors,4678,doc/master/RMinimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html,1,['error'],['errors']
Availability,"iance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::VariableMetricMinimizer&operator=(const ROOT::Minuit2::VariableMetricMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(); ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(const ROOT::Minuit2::VariableMetricMinimizer&). Data Members; private:. ROOT::Minuit2::VariableMetricBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableMetricMinimizer(); {}. ~VariableMetricMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__VariableMetricMinimizer.html:3560,toler,toler,3560,root/html534/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__VariableMetricMinimizer.html,2,['toler'],['toler']
Availability,"iant, and vsnprintf() returns -1 if; 6865 * buffer is too small. Also, older versions of msvcrt.dll do not have; 6866 * _vscprintf(). However, if size is 0, vsnprintf() behaves correctly.; 6867 * Therefore, we make two passes: on first pass, get required message; 6868 * length.; 6869 * On second pass, actually print the message. */; 6870 va_copy(ap_copy, ap);; 6871 len = vsnprintf_impl(NULL, 0, fmt, ap_copy);; 6872 va_end(ap_copy);; 6873 ; 6874 if (len < 0) {; 6875 /* C runtime is not standard compliant, vsnprintf() returned -1.; 6876 * Switch to alternative code path that uses incremental; 6877 * allocations.; 6878 */; 6879 va_copy(ap_copy, ap);; 6880 len = alloc_vprintf2(out_buf, fmt, ap_copy);; 6881 va_end(ap_copy);; 6882 ; 6883 } else if ((size_t)(len) >= prealloc_size) {; 6884 /* The pre-allocated buffer not large enough. */; 6885 /* Allocate a new buffer. */; 6886 *out_buf = (char *)mg_malloc((size_t)(len) + 1);; 6887 if (!*out_buf) {; 6888 /* Allocation failed. Return -1 as ""out of memory"" error. */; 6889 return -1;; 6890 }; 6891 /* Buffer allocation successful. Store the string there. */; 6892 va_copy(ap_copy, ap);; 6893 IGNORE_UNUSED_RESULT(; 6894 vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));; 6895 va_end(ap_copy);; 6896 ; 6897 } else {; 6898 /* The pre-allocated buffer is large enough.; 6899 * Use it to store the string and return the address. */; 6900 va_copy(ap_copy, ap);; 6901 IGNORE_UNUSED_RESULT(; 6902 vsnprintf_impl(prealloc_buf, prealloc_size, fmt, ap_copy));; 6903 va_end(ap_copy);; 6904 *out_buf = prealloc_buf;; 6905 }; 6906 ; 6907 return len;; 6908}; 6909 ; 6910 ; 6911#if defined(GCC_DIAGNOSTIC); 6912/* Enable format-nonliteral warning again. */; 6913#pragma GCC diagnostic pop; 6914#endif; 6915 ; 6916 ; 6917static int; 6918mg_vprintf(struct mg_connection *conn, const char *fmt, va_list ap); 6919{; 6920 char mem[MG_BUF_LEN];; 6921 char *buf = NULL;; 6922 int len;; 6923 ; 6924 if ((len = alloc_vprintf(&buf, mem, sizeof(mem), fmt, ap)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:199479,error,error,199479,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"iant, and vsnprintf() returns -1 if; 6866 * buffer is too small. Also, older versions of msvcrt.dll do not have; 6867 * _vscprintf(). However, if size is 0, vsnprintf() behaves correctly.; 6868 * Therefore, we make two passes: on first pass, get required message; 6869 * length.; 6870 * On second pass, actually print the message. */; 6871 va_copy(ap_copy, ap);; 6872 len = vsnprintf_impl(NULL, 0, fmt, ap_copy);; 6873 va_end(ap_copy);; 6874 ; 6875 if (len < 0) {; 6876 /* C runtime is not standard compliant, vsnprintf() returned -1.; 6877 * Switch to alternative code path that uses incremental; 6878 * allocations.; 6879 */; 6880 va_copy(ap_copy, ap);; 6881 len = alloc_vprintf2(out_buf, fmt, ap_copy);; 6882 va_end(ap_copy);; 6883 ; 6884 } else if ((size_t)(len) >= prealloc_size) {; 6885 /* The pre-allocated buffer not large enough. */; 6886 /* Allocate a new buffer. */; 6887 *out_buf = (char *)mg_malloc((size_t)(len) + 1);; 6888 if (!*out_buf) {; 6889 /* Allocation failed. Return -1 as ""out of memory"" error. */; 6890 return -1;; 6891 }; 6892 /* Buffer allocation successful. Store the string there. */; 6893 va_copy(ap_copy, ap);; 6894 IGNORE_UNUSED_RESULT(; 6895 vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));; 6896 va_end(ap_copy);; 6897 ; 6898 } else {; 6899 /* The pre-allocated buffer is large enough.; 6900 * Use it to store the string and return the address. */; 6901 va_copy(ap_copy, ap);; 6902 IGNORE_UNUSED_RESULT(; 6903 vsnprintf_impl(prealloc_buf, prealloc_size, fmt, ap_copy));; 6904 va_end(ap_copy);; 6905 *out_buf = prealloc_buf;; 6906 }; 6907 ; 6908 return len;; 6909}; 6910 ; 6911 ; 6912#if defined(GCC_DIAGNOSTIC); 6913/* Enable format-nonliteral warning again. */; 6914#pragma GCC diagnostic pop; 6915#endif; 6916 ; 6917 ; 6918static int; 6919mg_vprintf(struct mg_connection *conn, const char *fmt, va_list ap); 6920{; 6921 char mem[MG_BUF_LEN];; 6922 char *buf = NULL;; 6923 int len;; 6924 ; 6925 if ((len = alloc_vprintf(&buf, mem, sizeof(mem), fmt, ap)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:199511,error,error,199511,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"iate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelectorDraw, and TSelectorEntries.; Definition at line 56 of file TSelector.h. ◆ operator=(). TSelector & TSelector::operator= ; (; const TSelector & ; ). private . ◆ Process(). bool TSelector::Process ; (; Long64_t ; ). virtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented in TSelEvent, TEveSelectorToEventList, ROOT::Experimental::REveSelectorToEventList, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, RooProofDriverSelector, TSelectorEntries, h1analysis, h1analysisTreeReader, TProofDraw, and TSelectorDraw.; Definition at line 360 of file TSelector.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:21587,avail,available,21587,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['avail'],['available']
Availability,"ibe generic N-dimensional vectors. Similar functionality is currently provided by the CLHEP and packages and the ROOT Physics vector classes (See “Physics Vectors”). It also re-uses concepts and ideas from the CMS Common Vector package. In contrast to CLHEP or the ROOT physics libraries, GenVector provides class templates for modeling the vectors. The user can control how the vector is internally represented. This is expressed by a choice of coordinate system, which is supplied as a template parameter when the vector is constructed. Furthermore, each coordinate system is itself a template, so that the user can specify the underlying scalar type.; The GenVector classes do not inherit from TObject, therefore cannot be used as in the case of the physics vector classes in ROOT collections.; In addition, to optimize performances, no virtual destructors are provided. In the following paragraphs, the main characteristics of GenVector are described. A more detailed description of all the GenVector classes is available also at http://seal.cern.ch/documents/mathlib/GenVector.pdf; 13.12.1 Main Characteristics; 13.12.1.1 Optimal Runtime Performances; We try to minimize any overhead in the run-time performance. We have deliberately avoided the use of any virtual function and even virtual destructors in the classes. In addition, as much as possible functions are defined as inline. For this reason, we have chosen to use template classes to implement the GenVector concepts instead of abstract or base classes and virtual functions. It is then recommended to avoid using the GenVector classes polymorphically and developing classes inheriting from them.; 13.12.1.2 Points and Vector Concept; Mathematically vectors and points are two distinct concepts. They have different transformations, as vectors only rotate while points rotate and translate. You can add two vectors but not two points and the difference between two points is a vector. We then distinguish for the 3 dimensional case, bet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:719522,avail,available,719522,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"ible. ROOT provides an intelligent and elegant file recovery mechanism using the redundant directory information in the record header.; If a file that has been not properly closed is opened again, it is scanned and rebuilt according to the information in the record header. The recovery algorithm reads the file and creates the saved objects in memory according to the header information. It then rebuilds the directory and file structure. If the file is opened in write mode, the recovery makes the correction on disk when the file is closed; however if the file is opened in read mode, the correction can not be written to disk. You can also explicitly invoke the recovery procedure by calling the TFile::Recover() method. You can recover the directory structure, but you cannot save what you recovered to the file on disk. In the following example, we interrupted and aborted the previous ROOT session, causing the file not to be closed. When we start a new session and attempt to open the file, it gives us an explanation and status on the recovery attempt.; root[] TFile f(""demo.root""); Warning in <TFile::TFile>: file demo.root probably not closed, trying to recover successfully recovered 15 keys; 11.2 The Logical ROOT File: TFile and TKey; We saw that the TFile::Map() method reads the file sequentially and prints information about each record while scanning the file. It is not feasible to support only sequential access and hence ROOT provides random or direct access, i.e. reading a specified object at a time. To do so, TFile keeps a list of TKeys, which is essentially an index to the objects in the file. The TKey class describes the record headers of objects in the file. For example, we can get the list of keys and print them. To find a specific object on the file we can use the TFile::Get() method.; root[] TFile f(""demo.root""); root[] f.GetListOfKeys()->Print(); TKey Name = h0, Title = histo nr:0, Cycle = 1; TKey Name = h1, Title = histo nr:1, Cycle = 1; TKey Name = h2, Title ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:441510,recover,recovery,441510,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['recover'],['recovery']
Availability,"ibly enlarging an existing; 8697/// autocreated cache. The size is calculated. The value passed in cacheSize:; 8698/// - cacheSize = 0 make cache if default cache creation is enabled; 8699/// - cacheSize = -1 make a default sized cache in any case; 8700///; 8701/// If autocache is false:; 8702/// this is a user requested cache. cacheSize is used to size the cache.; 8703/// This cache should never be automatically adjusted.; 8704///; 8705/// The cacheSize might be clamped, see TFileCacheRead::SetBufferSize; 8706///; 8707/// Returns:; 8708/// - 0 size set, or existing autosized cache almost large enough.; 8709/// (cache was created if possible); 8710/// - -1 on error; 8711 ; 8712Int_t TTree::SetCacheSizeAux(bool autocache /* = true */, Long64_t cacheSize /* = 0 */ ); 8713{; 8714 if (autocache) {; 8715 // used as a once only control for automatic cache setup; 8716 fCacheDoAutoInit = false;; 8717 }; 8718 ; 8719 if (!autocache) {; 8720 // negative size means the user requests the default; 8721 if (cacheSize < 0) {; 8722 cacheSize = GetCacheAutoSize(true);; 8723 }; 8724 } else {; 8725 if (cacheSize == 0) {; 8726 cacheSize = GetCacheAutoSize();; 8727 } else if (cacheSize < 0) {; 8728 cacheSize = GetCacheAutoSize(true);; 8729 }; 8730 }; 8731 ; 8732 TFile* file = GetCurrentFile();; 8733 if (!file || GetTree() != this) {; 8734 // if there's no file or we are not a plain tree (e.g. if we're a TChain); 8735 // do not create a cache, only record the size if one was given; 8736 if (!autocache) {; 8737 fCacheSize = cacheSize;; 8738 }; 8739 if (GetTree() != this) {; 8740 return 0;; 8741 }; 8742 if (!autocache && cacheSize>0) {; 8743 Warning(""SetCacheSizeAux"", ""A TTreeCache could not be created because the TTree has no file"");; 8744 }; 8745 return 0;; 8746 }; 8747 ; 8748 // Check for an existing cache; 8749 TTreeCache* pf = GetReadCache(file);; 8750 if (pf) {; 8751 if (autocache) {; 8752 // reset our cache status tracking in case existing cache was added; 8753 // by the user without",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:339337,error,error,339337,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"ibname, Bool_t check=kFALSE);  Check if class ""classname"" is known to the interpreter (in fact, this check is not needed anymore, so classname is ignored). ;  ; TClass * LoadClass (const char *name, Bool_t silent=kFALSE) const;  Helper function used by TClass::GetClass(). ;  ; Int_t LoadMacro (const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE);  Load a macro in the interpreter's memory. ;  ; void ls (Option_t *option="""") const override;  To list all objects of the application. ;  ; Longptr_t Macro (const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE);  Execute a macro in the interpreter. ;  ; TCanvas * MakeDefCanvas () const;  Return a default canvas. ;  ; void Message (Int_t id, const TObject *obj);  Process message id called by obj. ;  ; Bool_t MustClean () const;  ; Longptr_t ProcessLine (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Longptr_t ProcessLineFast (const char *line, Int_t *error=nullptr);  Process interpreter command directly via CINT interpreter. ;  ; Longptr_t ProcessLineSync (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Bool_t ReadingObject () const;  Deprecated (will be removed in next release). ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from the list of Cleanups. ;  ; void RefreshBrowsers ();  Refresh all browsers. ;  ; TObject * Remove (TObject *) override;  Remove an object from the in-memory list. ;  ; void RemoveClass (TClass *);  Remove a class from the list and map of classes. ;  ; void Reset (Option_t *option="""");  Delete all global interpreter objects created since the last call to Reset. ;  ; void ResetClassSaved ();  Reset the ClassSaved status of all classes. ;  ; void SaveContext ();  Save the current interpreter context. ;  ; void SetApplication (TApplication *app);  ; void SetBatch (Bool_t batch=kTRUE);  Set batch mode for ROOT If the argument",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:11176,error,error,11176,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"ibraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2262,error,errors,2262,root/html602/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html,2,['error'],['errors']
Availability,"ibraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__FCNBase.html:2262,error,errors,2262,root/html604/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__FCNBase.html,2,['error'],['errors']
Availability,"ibrary). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and learn how to use the GUI. We continue by using the command line, and explaining the coding conventions, global variables and the environment setup. If you have not installed ROOT, you can do so by following the instructions in the appendix, or on the ROOT web site: http://root.cern.ch/root/Availability.html; 2.1 Setting the Environment Variables; Before you can run ROOT you need to set the environment variable ROOTSYS and change your path to include root/bin and library path variables to include root/lib. Please note: the syntax is for bash, if you are running tcsh you will have to use setenv instead of export. Define the variable $ROOTSYS to the directory where you unpacked the ROOT:. $ export ROOTSYS=$HOME/root. Add ROOTSYS/bin to your PATH:. $ export PATH=$PATH:$ROOTSYS/bin. Setting the Library Path. On HP-UX, before executing the interactive module, you must set the library path:; $ export SHLIB_PATH=$SHLIB_PATH:$ROOTSYS/lib; On AIX, before executing the interactive module, you must set the library path:; $ [ -z ""$LIBPATH"" ] && export LIBPATH=/lib:/usr/lib; $ export LIBPATH=$LIBPATH:$ROOTSYS/lib; On Linux, Solaris, Alpha OSF and SGI, before executing the interactive module, you must set the library path:; $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib; On Solari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:30487,Avail,Availability,30487,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Avail'],['Availability']
Availability,"ibutes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(). RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:36660,error,error,36660,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],['error']
Availability,"ibutes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Sep 8 17:02:46 2015 » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html:44041,ERROR,ERROR,44041,root/html534/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html,1,['ERROR'],['ERROR']
Availability,"ibutes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction2Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 30 14:31:22 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html:46201,ERROR,ERROR,46201,root/html602/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html,1,['ERROR'],['ERROR']
Availability,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo2DKeysPdf.html:42561,error,errors,42561,root/html602/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html,160,['error'],['errors']
Availability,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DistSampler.html:1436,error,error,1436,root/html602/ROOT__Math__DistSampler.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DistSampler.html,8,['error'],"['error', 'errors']"
Availability,"ic FitData {; 53 ; 54public :; 55 ; 56 enum ErrorType { kNoError, kValueError, kCoordError, kAsymError };; 57 ; 58 /**; 59 constructor from dimension of point and max number of points (to pre-allocate vector); 60 Give a zero value and then use Initialize later one if the size is not known; 61 */; 62 ; 63 explicit BinData(unsigned int maxpoints = 0, unsigned int dim = 1,; 64 ErrorType err = kValueError);; 65 ; 66 ; 67 /**; 68 constructor from option and default range; 69 */; 70 explicit BinData (const DataOptions & opt, unsigned int maxpoints = 0,; 71 unsigned int dim = 1, ErrorType err = kValueError);; 72 ; 73 /**; 74 constructor from options and range; 75 default is 1D and value errors; 76 */; 77 BinData (const DataOptions & opt, const DataRange & range,; 78 unsigned int maxpoints = 0, unsigned int dim = 1, ErrorType err = kValueError );; 79 ; 80 /** constructors using external data */; 81 ; 82 /**; 83 constructor from external data for 1D with errors on coordinate and value; 84 */; 85 BinData(unsigned int n, const double * dataX, const double * val,; 86 const double * ex , const double * eval );; 87 ; 88 /**; 89 constructor from external data for 2D with errors on coordinate and value; 90 */; 91 BinData(unsigned int n, const double * dataX, const double * dataY,; 92 const double * val, const double * ex , const double * ey,; 93 const double * eval );; 94 ; 95 /**; 96 constructor from external data for 3D with errors on coordinate and value; 97 */; 98 BinData(unsigned int n, const double * dataX, const double * dataY,; 99 const double * dataZ, const double * val, const double * ex ,; 100 const double * ey , const double * ez , const double * eval );; 101 ; 102 /**; 103 destructor; 104 */; 105 ~BinData() override;; 106 ; 107 /**; 108 copy constructors; 109 */; 110 BinData(const BinData & rhs);; 111 ; 112 /// assignment operator; 113 BinData & operator= ( const BinData & rhs );; 114 ; 115 ; 116 /**; 117 Preallocate a data set with given size, dimension and error type.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:3309,error,errors,3309,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,3,['error'],"['error', 'errors']"
Availability,"ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::unique_ptr< RooAbsPdf > create (RooAbsPdf &pdf, RooAbsData const &data, double precision);  Creates a wrapping RooBinSamplingPdf if appropriate. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:59928,error,error,59928,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['error'],['error']
Availability,"ic TAttLine, public TAttFill, public TAttMarker, public TAttText {; 30 ; 31private:; 32 TAttAxis fXaxis; ///< X axis attributes; 33 TAttAxis fYaxis; ///< Y axis attributes; 34 TAttAxis fZaxis; ///< Z axis attributes; 35 Float_t fBarWidth; ///< Width of bar for graphs; 36 Float_t fBarOffset; ///< Offset of bar for graphs; 37 Int_t fColorModelPS; ///< PostScript color model: 0 = RGB, 1 = CMYK; 38 Int_t fDrawBorder; ///< Flag to draw border(=1) or not (0); 39 Int_t fOptLogx; ///< True if log scale in X; 40 Int_t fOptLogy; ///< True if log scale in y; 41 Int_t fOptLogz; ///< True if log scale in z; 42 Int_t fOptDate; ///< True if date option is selected; 43 Int_t fOptStat; ///< True if option Stat is selected; 44 Int_t fOptTitle; ///< True if option Title is selected; 45 Int_t fOptFile; ///< True if option File is selected; 46 Int_t fOptFit; ///< True if option Fit is selected; 47 Int_t fShowEventStatus; ///< Show event status panel; 48 Int_t fShowEditor; ///< Show pad editor; 49 Int_t fShowToolBar; ///< Show toolbar; 50 ; 51 Int_t fNumberContours; ///< Default number of contours for 2-d plots; 52 TAttText fAttDate; ///< Canvas date attribute; 53 Float_t fDateX; ///< X position of the date in the canvas (in NDC); 54 Float_t fDateY; ///< Y position of the date in the canvas (in NDC); 55 Float_t fEndErrorSize; ///< Size of lines at the end of error bars; 56 Float_t fErrorX; ///< Per cent of bin width for errors along X; 57 Color_t fFuncColor; ///< Function color; 58 Style_t fFuncStyle; ///< Function style; 59 Width_t fFuncWidth; ///< Function line width; 60 Color_t fGridColor; ///< Grid line color (if 0 use axis line color); 61 Style_t fGridStyle; ///< Grid line style; 62 Width_t fGridWidth; ///< Grid line width; 63 Width_t fLegendBorderSize; ///< Legend box border size; 64 Color_t fLegendFillColor; ///< Legend fill color; 65 Style_t fLegendFillStyle; ///< Legend fill style; 66 Style_t fLegendFont; ///< Legend font style; 67 Double_t fLegendTextSize; ///< Legend text size.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:2368,error,error,2368,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t** source, Double_t** resp, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2.html:3629,error,error,3629,root/html602/TSpectrum2.html,https://root.cern,https://root.cern/root/html602/TSpectrum2.html,4,['error'],['error']
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); TGeoNavigator*GetCurrentNavigator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigatorArray.html:2941,error,error,2941,root/html602/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html602/TGeoNavigatorArray.html,4,['error'],['error']
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObjArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRefArray.html:2454,error,error,2454,root/html534/RooRefArray.html,https://root.cern,https://root.cern/root/html534/RooRefArray.html,12,['error'],['error']
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConstrain(Int_t parm, Double_t low, Double_t high); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidErrorAnalysis(Double_t UP); Double_tEvaluateFCN(const Double_t* par); voidExcludeBin(Int_t bin); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrFit(); Double_tGetChisquare() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); ROOT::Fit::Fitter*GetFitter() const; virtual const char*TObject::GetIconName() const; TH1*GetMCPrediction(Int_t parm) const; virtual const char*TObject::GetName() const; Int_tGetNDF() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1*GetPlot(); Double_tGetProb() const; voidGetResult(Int_t parm, Double_t& value, Double_t& error) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:6604,error,error,6604,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,4,['error'],['error']
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTFileCacheRead::Close(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDropBranch(TBranch* b, Bool_t subbranches = kFALSE); virtual voidDropBranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Long64_tTFileCacheRead::GetBytesRead() const; virtual Long64_tTFileCacheRead::GetBytesReadExtra() const; const TObjArray*GetCachedBranches() const; TTreeCache::EPrefillTypeGetConfiguredPrefillType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEfficiency() const; Double_tGetEfficiencyRel() const; virtual Int_tGetEntryMax() const; virtual Int_tGetEntryMin() const; TFile*TFileCacheRead::GetFile() const; virtual const char*TObject::GetIconName() const; static Int_tGetLearnEntries(); virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:10750,error,error,10750,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,4,['error'],['error']
Availability,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TMapFile*Create(const char* name, Option_t* option = ""READ"", Int_t size = kDefaultMapSize, const char* title = """"); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*Get(const char* name, TObject* retObj = 0); void*GetBaseAddr() const; void*GetBreakval() const; TDirectory*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFd() const; TMapRec*GetFirst() const; virtual const char*TObject::GetIconName() const; TMapRec*GetLast() const; void*GetMmallocDesc() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; Int_tGetSize() const; virtual const char*GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMapFile.html:3741,error,error,3741,root/html528/TMapFile.html,https://root.cern,https://root.cern/root/html528/TMapFile.html,10,['error'],['error']
Availability,"ic TZIPFile::EZIPConstantskZIP64_EXTENDED_HDR_OFFSET_OFF; static TZIPFile::EZIPConstantskZIP64_EXTENDED_MAGIC; static TZIPFile::EZIPConstantskZIP64_EXTENDED_MAGIC_LEN; static TZIPFile::EZIPConstantskZIP64_EXTENDED_MAGIC_OFF; static TZIPFile::EZIPConstantskZIP64_EXTENDED_SIZE; static TZIPFile::EZIPConstantskZIP64_EXTENDED_SIZE_LEN; static TZIPFile::EZIPConstantskZIP64_EXTENDED_SIZE_OFF; static TZIPFile::EZIPConstantskZIP64_EXTENDED_USIZE_LEN; static TZIPFile::EZIPConstantskZIP64_EXTENDED_USIZE_OFF; static TZIPFile::EZIPConstantskZIP64_EXTENTED_CSIZE_OFF; static TZIPFile::EZIPConstantskZIP_MAGIC_LEN. Class Charts. Inheritance Chart:. TObject. ←; TArchiveFile. ←; TZIPFile. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TZIPFile.html:15882,error,error,15882,root/html602/TZIPFile.html,https://root.cern,https://root.cern/root/html602/TZIPFile.html,4,['error'],['error']
Availability,"ic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the cache. Int_t GetLearnEntries(); Return the number of entries in the learning phase. void * GetSender(); { return this; }. TProofPlayer(TProof* proof = 0). TVirtualPacketizer * GetPacketizer() const; { return 0; }. TList * GetInputList() const; { return fInput; }. TList * GetListOfResults() const; { return fQueryResults; }. TQueryResult * GetCurrentQuery() const; { return fQuery; }. void SetMaxDrawQueries(Int_t max); { fMaxDrawQueries = max; }. void RestorePreviousQuery(); { fQuery = fPreviousQuery; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). Bool_t IsClient() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayer.html:22423,avail,available,22423,root/html602/TProofPlayer.html,https://root.cern,https://root.cern/root/html602/TProofPlayer.html,4,['avail'],['available']
Availability,"ic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the cache. Int_t GetLearnEntries(); Return the number of entries in the learning phase. void * GetSender(); { return this; }. TVirtualPacketizer * GetPacketizer() const; { return 0; }. TList * GetInputList() const; { return fInput; }. TList * GetListOfResults() const; { return fQueryResults; }. TQueryResult * GetCurrentQuery() const; { return fQuery; }. void SetMaxDrawQueries(Int_t max); { fMaxDrawQueries = max; }. void RestorePreviousQuery(); { fQuery = fPreviousQuery; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). Bool_t IsClient() const; { return kFALSE; }. EExitStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:18455,avail,available,18455,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,4,['avail'],['available']
Availability,"ic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the cache. Int_t GetLearnEntries(); Return the number of entries in the learning phase. void * GetSender(); { return this; }. TVirtualPacketizer * GetPacketizer() const; { return 0; }. TList * GetInputList() const; { return fInput; }. TList * GetListOfResults() const; { return fQueryResults; }. TQueryResult * GetCurrentQuery() const; { return fQuery; }. void SetMaxDrawQueries(Int_t max); { fMaxDrawQueries = max; }. void RestorePreviousQuery(); { fQuery = fPreviousQuery; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). Bool_t IsClient() const; { return kFALSE; }. void SetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:21745,avail,available,21745,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,2,['avail'],['available']
Availability,"ic bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  . Protected Attributes; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwxz;  Total Sum of weight*X*Z. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fTsumwyz;  Total Sum of weight*Y*Z. ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:54290,error,errors,54290,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['error'],['errors']
Availability,"ic const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TRootGuiBuilder*fBuilderpointer to builder; TGCanvas*fCanvas; TGuiBldEditor*fEditorpointer to main editor; TGTextEntry*fFrameNamename of the frame; TGLabel*fLabellabel of frame class name; TGListTree*fListTreelist tree containing frames hierarchy; TGuiBldDragManager*fManagermain manager; TGCompositeFrame*fTitleFrameframe saying that it's ""Name Frame"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGuiBldNameFrame(const TGWindow* p, TGuiBldEditor* editor); Constructor. void DoRedraw(); Redraw frame (just a prototype). void Reset(); Reset name frame. void ChangeSelected(TGFrame* frame); Change selected frame. void UpdateName(); Set new name of frame, if it doesn't already exist in the same MDI frame. TGCompositeFrame * GetMdi(TGFrame* frame); Find the parent mdi frame. void MapItems(TGCompositeFrame* main); Map all the frames and subframes in mdi frame to the list tree. Bool_t CheckItems(TGCompositeFrame* main); Check if items are in the list tree and at the same place. void RemoveFrame(TGFrame* frame); Remove a frame. TGListTreeItem * FindItemByName(TGListTree* tree, const char* name, TGListTreeItem* item = 0); Find item with GetText == name. Search tree downwards starting at item. void SelectFrameByItem(TGListTreeItem* item, Int_t i = 0); When list tree item is clicked, frame with that name is selected. TGuiBldNameFrame(const TGWindow* p, TGuiBldEditor* editor). virtual ~TGuiBldNameFrame(); { }. » Author: Valeriy Onuchin 12/09/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/guibuilder:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGuiBldNameFrame.html:20924,down,downwards,20924,root/html604/TGuiBldNameFrame.html,https://root.cern,https://root.cern/root/html604/TGuiBldNameFrame.html,2,['down'],['downwards']
Availability,"ic const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TRootGuiBuilder*fBuilderpointer to builder; TGCanvas*fCanvas; TGuiBldEditor*fEditorpointer to main editor; TGTextEntry*fFrameNamename of the frame; TGLabel*fLabellabel of frame class name; TGListTree*fListTreelist tree containing frames hierarchy; TGuiBldDragManager*fManagermain manager; TGCompositeFrame*fTitleFrameframe saying that it's ""Name Frame"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGuiBldNameFrame(const TGWindow* p, TGuiBldEditor* editor); Constructor. void DoRedraw(); Redraw frame (just a prototype). void Reset(); Reset name frame. void ChangeSelected(TGFrame* frame); Change selected frame. void UpdateName(); Set new name of frame, if it doesn't already exist in the same MDI frame. TGCompositeFrame * GetMdi(TGFrame* frame); Find the parent mdi frame. void MapItems(TGCompositeFrame* main); Map all the frames and subframes in mdi frame to the list tree. Bool_t CheckItems(TGCompositeFrame* main); Check if items are in the list tree and at the same place. void RemoveFrame(TGFrame* frame); Remove a frame. TGListTreeItem * FindItemByName(TGListTree* tree, const char* name, TGListTreeItem* item = 0); Find item with GetText == name. Search tree downwards starting at item. void SelectFrameByItem(TGListTreeItem* item, Int_t i = 0); When list tree item is clicked, frame with that name is selected. TGuiBldNameFrame(const TGWindow* p, TGuiBldEditor* editor). virtual ~TGuiBldNameFrame(); { }. » Author: Valeriy Onuchin 12/09/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/guibuilder:$Id$ » Last generated: 2015-06-30 15:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGuiBldNameFrame.html:20924,down,downwards,20924,root/html602/TGuiBldNameFrame.html,https://root.cern,https://root.cern/root/html602/TGuiBldNameFrame.html,2,['down'],['downwards']
Availability,"ic const char * TFTP::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFTP::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 125 of file TFTP.h. ◆ Close(). Int_t TFTP::Close ; (; ). Close ftp connection. ; Returns 0 in case of success and -1 in case of failure. ; Definition at line 884 of file TFTP.cxx. ◆ DeclFileName(). static const char * TFTP::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 125 of file TFTP.h. ◆ DeleteDirectory(). Int_t TFTP::DeleteDirectory ; (; const char * ; dir); const. Delete a remote directory. ; Anonymous users may not delete directories. Returns 0 in case of success and -1 in case of failure. ; Definition at line 702 of file TFTP.cxx. ◆ DeleteFile(). Int_t TFTP::DeleteFile ; (; const char * ; file); const. Delete a remote file. ; Anonymous users may not delete files. Returns 0 in case of success and -1 in case of failure. ; Definition at line 821 of file TFTP.cxx. ◆ FreeDirectory(). void TFTP::FreeDirectory ; (; Bool_t ; print = kFALSE). Free a remotely open directory via rootd. ; Definition at line 956 of file TFTP.cxx. ◆ get(). void TFTP::get ; (; const char * ; file, . const char * ; localName = nullptr . ). inline . Definition at line 112 of file TFTP.h. ◆ GetBlockSize(). Int_t TFTP::GetBlockSize ; (; ); const. inline . Definition at line 80 of file TFTP.h. ◆ GetDirEntry(). const char * TFTP::GetDirEntry ; (; Bool_t ; print = kFALSE). Get directory entry via rootd. ; Returns 0 in case no more entries or in case of error. ; Definition at line 988 of file TFTP.cxx. ◆ GetFile(). Long64_t TFTP::GetFile ; (; const char * ; file, . const char * ; localName = nullptr . ). Transfer file from remote host. ; Returns number of bytes received or < 0 in case of error. Error -1 connection is still open, error -2 connection has been closed. In case of failure fRestartAt is set to the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:17298,failure,failure,17298,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"ic errors. |; 230| ""[]"" | Does the same as option \""\|\|\"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. |; 231| ""0"" | By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). |; 232| ""2"" | Error rectangles are drawn. |; 233| ""3"" | A filled area is drawn through the end points of the vertical error bars. |; 234| ""4"" | A smoothed filled area is drawn through the end points of the vertical error bars. |; 235| ""5"" | Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. |; 236 ; 237 ; 238`gStyle->SetErrorX(dx)` controls the size of the error along x.; 239`dx = 0` removes the error along x.; 240 ; 241`gStyle->SetEndErrorSize(np)` controls the size of the lines; 242at the end of the error bars (when option 1 is used).; 243By default `np=1`. (np represents the number of pixels).; 244 ; 245\anchor GrP3a; 246#### TGraphErrors; 247 ; 248A `TGraphErrors` is a `TGraph` with error bars. The errors are; 249defined along X and Y and are symmetric: The left and right errors are the same; 250along X and the bottom and up errors are the same along Y.; 251 ; 252Begin_Macro(source); 253{; 254 auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; 255 double x[] = {0, 1, 2, 3, 4};; 256 double y[] = {0, 2, 4, 1, 3};; 257 double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; 258 double ey[] = {1, 0.5, 1, 0.5, 1};; 259 auto ge = new TGraphErrors(5, x, y, ex, ey);; 260 ge->SetTitle(""A graph with errors"");; 261 ge->Draw(""ap"");; 262}; 263End_Macro; 264 ; 265The option ""0"" shows the error bars for data points outside range.; 266 ; 267Begin_Macro(source); 268{; 269 auto c48 = new TCanvas(""c4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:9808,error,error,9808,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['error']
Availability,"ic map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doFloorIntroduce floor at zero in pdf; static Bool_t_doFloorGlobalGlobal flag for introducing floor at zero in pdf; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealSumPdf.html:40754,error,errors,40754,root/html534/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html534/RooRealSumPdf.html,2,['error'],['errors']
Availability,"ic matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtual void TMinuit::SetGraphicsMode ; (; Bool_t ; mode = kTRUE). inlinevirtual . Definition at line 263 of file TMinuit.h. ◆ SetMaxIterations(). virtual void TMinuit::SetMaxIterations ; (; Int_t ; maxiter = 500). inlinevirtual . Definition at line 264 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:67073,avail,available,67073,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['avail'],['available']
Availability,"ic name for this set of varied values, e.g. `""ptvariation""`.; 823 ///; 824 /// Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to; 825 /// Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for; 826 /// results that depend on any varied quantity, a map/dictionary of varied results can be produced with; 827 /// ROOT::RDF::Experimental::VariationsFor (see the example below).; 828 ///; 829 /// The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and; 830 /// values for each of the systematic variations that affected the result (via upstream Filters or via direct or; 831 /// indirect dependencies of the column values on some registered variations). The keys will be a composition of; 832 /// variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; 833 ///; 834 /// In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt.; 835 /// We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""):; 836 /// ~~~{.cpp}; 837 /// auto nominal_hx =; 838 /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); 839 /// .Filter(""pt > k""); 840 /// .Define(""x"", someFunc, {""pt""}); 841 /// .Histo1D(""x"");; 842 ///; 843 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 844 /// hx[""nominal""].Draw();; 845 /// hx[""pt:down""].Draw(""SAME"");; 846 /// hx[""pt:up""].Draw(""SAME"");; 847 /// ~~~; 848 /// RDataFrame computes all variations as part of a single loop over the data.; 849 /// In particular, this means that I/O and computation of values shared; 850 /// among variations only happen once for all variations. Thus, the event loop; 851 /// run-time typically scales much better than linearly with the number of; 852 /// variations.; 853 ///; 854 /// RDataFrame lazily computes the varied values requir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:44948,down,down,44948,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['down'],['down']
Availability,"ic:. virtual~TGeoMaterial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static Double_tCoulomb(Double_t z); virtual TGeoMaterial*DecayMaterial(Double_t time, Double_t precision = 0.001); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillMaterialEvolution(TObjArray* population, Double_t precision = 0.001); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetA() const; TGeoElement*GetBaseElement() const; virtual Int_tGetByteCount() const; virtual TObject*GetCerenkovProperties() const; virtual Int_tGetDefaultColor() const; virtual Double_tGetDensity() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TGeoElement*GetElement(Int_t i = 0) const; virtual voidGetElementProp(Double_t& a, Double_t& z, Double_t& w, Int_t i = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMaterial.html:1411,error,error,1411,root/html602/TGeoMaterial.html,https://root.cern,https://root.cern/root/html602/TGeoMaterial.html,10,"['Error', 'error']","['Error', 'error']"
Availability,"ic; Disconnected(const char *)TQObjectinlinevirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EExitOnException enum nameTApplication; EFileBits enum nameTApplication; Emit(const char *signal, const T &arg)TQObjectinline; Emit(const char *signal)TQObjectinline; EmitVA(const char *signal_name, Int_t, const T &... params)TQObjectinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTApplication; ExecLogon()TRintprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)TApplicationstatic; ExitOnException(EExitOnException opt=kExit)TApplication; fAppImpTApplicationprivate; fAppRemoteTApplicationprotected; fArgcTApplicationprivate; fArgvTApplicationprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBackslashContinueTRintprivate; fBitsTObjectprivate; fCaughtSignalTRintprivate; fDefaultPromptTRintprivate; fExitOnExceptionTApplicationprivate; fFilesTApplicationprivate; fgAllSignalsBlockedTQObjectprotectedstatic; fgApplicationsTApplicationprotectedstatic; fgDtorOnlyTObjectprivatestatic; fgGraphInitTApplicationprivatestatic; fgGraphNeededTApplicationprivatestatic; fgObjectStatTObjectprivatestatic; fIdleCommandTApplicationprivate; fIdleTimerTApplicationprivate; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInputHandlerTRintprivate; fInterruptTRintprivate; fIsRunningTApplicationprivate; fListOfConnectio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint-members.html:3408,error,error,3408,doc/master/classTRint-members.html,https://root.cern,https://root.cern/doc/master/classTRint-members.html,3,['error'],['error']
Availability,"icFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  CRAction;  CRActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as RDataFrame temporary columns ;  CTRDFValueTuple;  CTRDFValueTuple< TypeList< ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:24392,error,error,24392,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['error'],['error']
Availability,"icFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTDF;  CCacheColumnHolder;  CTAction;  CTActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as TDataFrame temporary columns ;  CTMinReturnTypeThe conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:23468,error,error,23468,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['error'],['error']
Availability,"icFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTDF;  CTAction;  CTActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as TDataFrame temporary columns ;  CTTDFValueTuple;  CTTDFValueTuple< TTypeList<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:18534,error,error,18534,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['error'],['error']
Availability,"icPdf, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 548 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 456 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 319 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 436 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 407 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 399 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 404 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 405 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:151078,error,error,151078,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"icUsage(). void SetLeftSideTailFraction(Double_t a). MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooStats::ProposalFunction& proposalFunction); set the proposal function for suggesting new points for the MCMC. { fPropFunc = &proposalFunction; }. void SetNumIters(Int_t numIters); set the number of iterations to run the metropolis algorithm. { fNumIters = numIters; }. void SetNumBurnInSteps(Int_t numBurnInSteps); set the number of steps in the chain to discard as burn-in,; starting from the first. { fNumBurnInSteps = numBurnInSteps; }. void SetNumBins(Int_t numBins); set the number of bins to create for each axis when constructing the interval. { fNumBins = numBins; }. void SetAxes(RooArgList& axes); set which variables to put on each axis. { fAxes = &axes; }. void SetUseKeys(Bool_t useKeys); set whether to use kernel estima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCCalculator.html:9690,error,error,9690,root/html528/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCCalculator.html,2,['error'],['error']
Availability,"ical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id: Derivator.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Derivator.html:6043,error,error,6043,root/html528/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Derivator.html,2,['error'],['error']
Availability,"ical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id: Derivator.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Derivator.html:6045,error,error,6045,root/html530/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Derivator.html,2,['error'],['error']
Availability,"ical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id: Derivator.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Derivator.html:6045,error,error,6045,root/html532/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Derivator.html,5,"['Error', 'error']","['Error', 'error']"
Availability,"ical record header starting at a certain postion.; 1287///; 1288/// \param[in] buf pointer to buffer; 1289/// \param[in] first read offset; 1290/// \param[in] maxbytes Bytes which are read into buf.; 1291/// \param[out] nbytes Number of bytes in record if negative, this is a deleted; 1292/// record if 0, cannot read record, wrong value of argument first; 1293/// \param[out] objlen Uncompressed object size; 1294/// \param[out] keylen Length of logical record header; 1295///; 1296/// The function reads nread bytes; 1297/// where nread is the minimum of maxbytes and the number of bytes; 1298/// before the end of file. The function returns nread.; 1299/// Note that the arguments objlen and keylen are returned only; 1300/// if maxbytes >=16; 1301 ; 1302Int_t TFile::GetRecordHeader(char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen); 1303{; 1304 nbytes = 0;; 1305 objlen = 0;; 1306 keylen = 0;; 1307 if (first < fBEGIN) return 0;; 1308 if (first > fEND) return 0;; 1309 Seek(first);; 1310 Int_t nread = maxbytes;; 1311 if (first+maxbytes > fEND) nread = fEND-maxbytes;; 1312 if (nread < 4) {; 1313 Warning(""GetRecordHeader"",""%s: parameter maxbytes = %d must be >= 4"",; 1314 GetName(), nread);; 1315 return nread;; 1316 }; 1317 if (ReadBuffer(buf,nread)) {; 1318 // ReadBuffer return kTRUE in case of failure.; 1319 Warning(""GetRecordHeader"",""%s: failed to read header data (maxbytes = %d)"",; 1320 GetName(), nread);; 1321 return nread;; 1322 }; 1323 Version_t versionkey;; 1324 Short_t klen;; 1325 UInt_t datime;; 1326 Int_t nb,olen;; 1327 char *buffer = buf;; 1328 frombuf(buffer,&nb);; 1329 nbytes = nb;; 1330 if (nb < 0) return nread;; 1331 // const Int_t headerSize = Int_t(sizeof(nb) +sizeof(versionkey) +sizeof(olen) +sizeof(datime) +sizeof(klen));; 1332 const Int_t headerSize = 16;; 1333 if (nread < headerSize) return nread;; 1334 frombuf(buffer, &versionkey);; 1335 frombuf(buffer, &olen);; 1336 frombuf(buffer, &datime);; 1337 frombuf(buffer, &kle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:46870,failure,failure,46870,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['failure'],['failure']
Availability,"ical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLLogicalShape(); voidAddRef(TGLPhysicalShape* phys) const; virtual Bool_tAlwaysSecondarySelect() const; const TGLBoundingBox&BoundingBox() const; static TClass*Class(); voidDestroyPhysicals(); virtual voidDirectDraw(TGLRnrCtx& rnrCtx) const; virtual voidDLCacheClear(); virtual voidDLCacheDrop(); virtual voidDLCachePurge(); virtual UInt_tDLOffset(Short_t) const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; virtual voidDrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; TObject*GetExternal() const; const TGLPhysicalShape*GetFirstPhysical() const; TGLScene*GetScene() const; TObject*ID() const; virtual Bool_tIgnoreSizeForOfInterest() const; voidInvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; virtual TClass*IsA() const; virtual Bool_tKeepDuringSmartRefresh() const; virtual voidProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); virtual Short_tQuantizeShapeLOD(Short_t shapeLOD, Short_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:2195,avail,available,2195,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,2,['avail'],['available']
Availability,"ical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLLogicalShape(); voidAddRef(TGLPhysicalShape* phys) const; virtual Bool_tAlwaysSecondarySelect() const; const TGLBoundingBox&BoundingBox() const; static TClass*Class(); voidDestroyPhysicals(); virtual voidDirectDraw(TGLRnrCtx& rnrCtx) const; virtual voidDLCacheClear(); virtual voidDLCacheDrop(); virtual voidDLCachePurge(); virtual UInt_tDLOffset(Short_t) const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; virtual voidDrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; TObject*GetExternal() const; const TGLPhysicalShape*GetFirstPhysical() const; static Bool_tGetIgnoreSizeForCameraInterest(); TGLScene*GetScene() const; TObject*ID() const; virtual Bool_tIgnoreSizeForOfInterest() const; voidInvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; virtual TClass*IsA() const; virtual Bool_tKeepDuringSmartRefresh() const; virtual voidProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); virtual Sho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLogicalShape.html:2195,avail,available,2195,root/html534/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html534/TGLLogicalShape.html,6,['avail'],['available']
Availability,"ical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; unsigned longfVisRootWinRoot window with fVisual to be used to create GC's and XImages; Visual*fVisualPointer to visual used by all windows; ULong_tfWhitePixelValue of white pixel in colormap. private:. TExMap*fColorsHash list of colors; unsigned longfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number of windows; XWindow_t*fWindowsList of windows; XEvent*fXEventCurrent native (X11) event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11(); Default constructor. TGX11(const char* name, const char* title); Normal Constructor. TGX11(const TGX11& org); Copy constructor. Currently only used by TGX11TTF. ~TGX11(); Destructor. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:24729,failure,failure,24729,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,6,['failure'],['failure']
Availability,"ically sets 'mvf=1'; it is still possible to set 'mvf=11'; to save results after each packet. The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:51158,avail,available,51158,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['avail'],['available']
Availability,"icates(kTRUE);; 6095 ; 6096 fRootmapFiles = new TObjArray;; 6097 fRootmapFiles->SetOwner();; 6098 ; 6099 InitRootmapFile("".rootmap"");; 6100 }; 6101 //fMapfile->SetValue(key, libs);; 6102 fMapfile->SetValue(cls, libs);; 6103 return 1;; 6104}; 6105 ; 6106////////////////////////////////////////////////////////////////////////////////; 6107/// Demangle the name (from the typeinfo) and then request the class; 6108/// via the usual name based interface (TClass::GetClass).; 6109 ; 6110TClass *TCling::GetClass(const std::type_info& typeinfo, Bool_t load) const; 6111{; 6112 int err = 0;; 6113 char* demangled_name = TClassEdit::DemangleTypeIdName(typeinfo, err);; 6114 if (err) return nullptr;; 6115 TClass* theClass = TClass::GetClass(demangled_name, load, kTRUE);; 6116 free(demangled_name);; 6117 return theClass;; 6118}; 6119 ; 6120////////////////////////////////////////////////////////////////////////////////; 6121/// Load library containing the specified class. Returns 0 in case of error; 6122/// and 1 in case if success.; 6123 ; 6124Int_t TCling::AutoLoad(const std::type_info& typeinfo, Bool_t knowDictNotLoaded /* = kFALSE */); 6125{; 6126 assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");; 6127 ; 6128 int err = 0;; 6129 char* demangled_name_c = TClassEdit::DemangleTypeIdName(typeinfo, err);; 6130 if (err) {; 6131 return 0;; 6132 }; 6133 ; 6134 std::string demangled_name(demangled_name_c);; 6135 free(demangled_name_c);; 6136 ; 6137 // AutoLoad expects (because TClass::GetClass already prepares it that way) a; 6138 // shortened name.; 6139 TClassEdit::TSplitType splitname( demangled_name.c_str(), (TClassEdit::EModType)(TClassEdit::kLong64 | TClassEdit::kDropStd) );; 6140 splitname.ShortType(demangled_name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd);; 6141 ; 6142 // No need to worry about typedef, they aren't any ... but there are; 6143 // inlined namespaces ...; 6144 ; 6145 Int_t result = AutoLoad(demangled_name.c_str());; 6146 if (result ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:237219,error,error,237219,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"ication; static TApplication::EExitOnExceptionkDontExit; static TApplication::EExitOnExceptionkExit; static TApplication::EFileBitskExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitskProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*fgApplicationsList of available applications. private:. TApplicationImp*fAppImp!Window system specific application implementation; Int_tfArgcNumber of com mand line arguments; char**fArgvCommand line arguments; TApplication::EExitOnExceptionfExitOnExceptionExit on exception option; TObjArray*fFilesArray of input files or C++ expression (TObjString's) specified via argv; TStringfIdleCommandCommand to execute while application is idle; TTimer*fIdleTimerIdle timer; Bool_tfIsRunningTrue when in event loop (Run() has been called); Bool_tfNoLogDo not process logon and logoff macros; Bool_tfNoLogoDo not show splash screen and welcome message; Bool_tfQuitExit after having processed input files; Bool_tfReturnFromRunWhen true return from Run(); TSignalHandler*fSigHandlerInterrupt handler; Bool_tfUseMemstatRun with TMemStat enabled; TStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:12142,avail,available,12142,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['avail'],['available']
Availability,"icationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:4056,avail,available,4056,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['avail'],['available']
Availability,"icationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single comm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:2693,avail,available,2693,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['avail'],['available']
Availability,"icationServer.cxx. ◆ BrowseKey(). Int_t TApplicationServer::BrowseKey ; (; const char * ; keyname). Read key object and send it back to client. ; Definition at line 1010 of file TApplicationServer.cxx. ◆ Class(). static TClass * TApplicationServer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplicationServer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplicationServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 94 of file TApplicationServer.h. ◆ DeclFileName(). static const char * TApplicationServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 94 of file TApplicationServer.h. ◆ ErrorHandler(). void TApplicationServer::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). staticprotected . The error handler function. ; It prints the message on stderr and if abort is set it aborts the application. ; Definition at line 1088 of file TApplicationServer.cxx. ◆ ExecLogon(). void TApplicationServer::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 1277 of file TApplicationServer.cxx. ◆ GetHost(). const char * TApplicationServer::GetHost ; (; ); const. inline . Definition at line 73 of file TApplicationServer.h. ◆ GetOptions(). void TApplicationServer::GetOptions ; (; Int_t * ; argc, . char ** ; argv . ). overridevirtual . Get and handle command line options. ; Fixed format: ""prot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:24991,error,error,24991,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['error'],['error']
Availability,"icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA::DNN::GaussComplement = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return 1.0 - exp (-std::pow(value*s,2.0)); }). Definition at line 13 of file NeuralNet.cxx. ◆ InvGauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::InvGauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return -2.0 * value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:35606,error,error,35606,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['error'],['error']
Availability,"ice is given by otherArgs. void SetName(const char* name); Change the name of the RooDataHist. void SetNameTitle(const char* name, const char* title); Change the title of this RooDataHist. void printValue(ostream& os) const; Print value of the dataset, i.e. the sum of weights contained in the dataset. void printArgs(ostream& os) const; Print argument of dataset, i.e. the observable names. void cacheValidEntries(); Cache the datahist entries with bin centers that are inside/outside the; current observable definitio. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Bool_t isNonPoissonWeighted() const; Returns true if datasets contains entries with a non-integer weight. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print the details on the dataset contents. void Streamer(TBuffer& ); Stream an object of class RooDataHist. TObject* Clone(const char* newname = 0) const; { return new RooDataHist(*this,newname?newname:GetName()) ; }. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0, const char* = 0) const; Return empty clone of this RooDataHist. void add(const RooArgSet& row, Double_t wgt = 1.0); Add one ore more rows of data. const RooArgSet* get() const; Return set with coordinates of center of current bin. Bool_t isWeighted() const; Return true as all histograms have in principle events weight != 1. Double_t weight() const; Return weight of current bin. Double_t binVolume() const; { return _curVolume ; }. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const. void removeSelfFromDir(); { removeFromDir(this) ; }. » Last changed: Tue Mar 10 17:16:11 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:35772,Error,ErrorType,35772,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,1,['Error'],['ErrorType']
Availability,"ich a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the cur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:58664,error,error,58664,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,4,['error'],['error']
Availability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2010-10-04 18:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearMinimizer.html:6973,error,error,6973,root/html528/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html528/TLinearMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLinearMinimizer.html:7321,error,error,7321,root/html530/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html530/TLinearMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"ich are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id: TLinearMinimizer.h 34753 2010-08-10 10:02:27Z moneta $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLinearMinimizer.html:7321,error,error,7321,root/html532/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html532/TLinearMinimizer.html,9,"['Error', 'error']","['Errors', 'error', 'errors']"
Availability,"ich we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance Chart:. TObject. ←; TSQLServer. ←. TMySQLServer. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if successful. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if successful. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wild",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:9566,error,error,9566,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,12,['error'],['error']
Availability,"ichardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller. ; Definition at line 211 of file RichardsonDerivator.h. ◆ DerivativeBackward() [1/2]. double ROOT::Math::RichardsonDerivator::DerivativeBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). inline . Computation of the first derivative using a forward formula. ; Definition at line 138 of file RichardsonDerivator.h. ◆ DerivativeBackward() [2/2]. double ROOT::Math::RichardsonDerivator::DerivativeBackward ; (; double ; x). inline . Computation of the first derivative using a backward formula. ; Definition at line 133 of file RichardsonDerivator.h. ◆ DerivativeForward() [1/2]. double ROOT::Math::RichardsonDerivator::DerivativeForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). Computation of the first derivative using a forward formula. ; Definition at line 118 of file RichardsonDerivator.cxx. ◆ DerivativeForward() [2/2]. double ROOT::Math::RichardsonDerivator::DerivativeForwa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html:10087,error,error,10087,doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,1,['error'],['error']
Availability,"icsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintLogo(Bool_t lite = kFALSE); virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRint.html:8010,error,error,8010,root/html530/TRint.html,https://root.cern,https://root.cern/root/html530/TRint.html,5,['error'],['error']
Availability,"icsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PyROOT::TPyROOTApplication&operator=(const PyROOT::TPyROOTApplication&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:8769,error,error,8769,root/html602/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html,4,['error'],['error']
Availability,"icy; is to expand to double the current size or the size_needed which ever is largest. void SetBuffer(void* buf, UInt_t bufsiz = 0, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; new buffer is expected to have the same size as the previous buffer.; The current buffer position is reset to the start of the buffer.; If the TBuffer owned the previous buffer, it will be deleted prior; to accepting the new buffer. By default the new buffer will be; adopted unless adopt is false.; If the new buffer is _not_ adopted and no memory allocation routine; is provided, a Fatal error will be issued if the Buffer attempts to; expand. void Expand(Int_t newsize, Bool_t copy = kTRUE); Expand (or shrink) the I/O buffer to newsize bytes.; If copy is true (the default), the existing content of the; buffer is preserved, otherwise the buffer is returned zero-ed out. In order to avoid losing data, if the current length is greater than; the requested size, we only shrink down to the current length. TObject * GetParent() const; Return pointer to parent of this buffer. void SetParent(TObject* parent); Set parent owning this buffer. ReAllocCharFun_t GetReAllocFunc() const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass(). TClass * GetClass(const char* className); Forward to TROOT::GetClass(). TProcessID * ReadProcessID(UShort_t pidf); Return the current PRocessID. UShort_t WriteProcessID(TProcessID* pid); Always return 0 (current processID). void PushDataCache(TVirtualArray* ); Push a new data cache area onto the list of area to be used for; temporarily store 'missing' data members.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBuffer.html:18418,down,down,18418,root/html534/TBuffer.html,https://root.cern,https://root.cern/root/html534/TBuffer.html,6,['down'],['down']
Availability,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualPerfStats; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:15178,error,error,15178,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['error'],['error']
Availability,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveClass.html:13917,error,error,13917,doc/master/classTPaveClass.html,https://root.cern,https://root.cern/doc/master/classTPaveClass.html,3,['error'],['error']
Availability,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGeoAtt;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:31286,error,error,31286,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,3,['error'],['error']
Availability,"id = 0, const char* subid = 0, const char* opt = """"); virtual~TProofMonSenderML(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofMonSenderML.html:1523,error,error,1523,root/html532/TProofMonSenderML.html,https://root.cern,https://root.cern/root/html532/TProofMonSenderML.html,4,['error'],['error']
Availability,"id Add(const double *x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double *x, double val, const double * ex, double eval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const double * GetPointError(unsigned int ipoint, double& errlow, double& errhigh) const. Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:9958,error,errors,9958,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,1,['error'],['errors']
Availability,"id AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save information about the worker set in the file .workers in the working; dir. Called each time there is a change in the worker setup, e.g. by; TProof::MarkBad(). Int_t GetParameter(TCollection* c, const char* par, TString& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Int_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long64_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Double_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t AssertDataSet(TDSet* dset, TList* input, TDataSetManager* mgr, TString& emsg); Make sure that dataset is in the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:99839,error,error,99839,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['error']
Availability,"id AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, const char* reason = 0); Add a bad slave server to the bad slave list and remove it from; the active list and from the two monitor objects. Assume that the work; done by this worker was lost and ask packerizer to reassign it. void MarkBad(TSocket* s, const char* reason = 0); Add slave with socket s to the bad slave list and remove if from; the active list and from the two monitor objects. void TerminateWorker(TSlave* wrk); Ask an active worker 'wrk' to terminate, i.e. to shutdown. void TerminateWorker(const char* ord); Ask an active worker 'ord' to terminate, i.e. to shutdown. Int_t Ping(); Ping PROOF. Returns 1 if master server responded. Int_t Ping(TProof::ESlaves list); Ping PROOF slaves. Returns the number of slaves that responded. void Touch(); Ping PROOF slaves. Returns the number of slaves that responded. void Print(Option_t* option = """") const; Print status of PROOF cluster. Int_t HandleOutputOptions(TString& opt, TString& target, Int_t action); Extract from opt information about output handling settings.; The understood keywords are:; of=<file>, outfile=<file> output file location; ds=<dsname>, dataset=<dsname> dataset name ('of' and 'ds' are; mutually exclusive,execution stops; if both are found); sft[=<opt>], savetofile[=<opt>] control saving to file. For 'mvf', the <opt> integer has the following meaning:; <opt> = <how>*10 + <force>; <force> = 0 save to file if memory threshold is reached; (the memory threshold is set by the cluster; admin); in case an output file is defined, the; files are merged at the end;; 1 save results to file.; <how> = 0 save at the e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:48996,Ping,Ping,48996,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['Ping'],['Ping']
Availability,"id AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, const char* reason = 0); Add a bad slave server to the bad slave list and remove it from; the active list and from the two monitor objects. Assume that the work; done by this worker was lost and ask packerizer to reassign it. void MarkBad(TSocket* s, const char* reason = 0); Add slave with socket s to the bad slave list and remove if from; the active list and from the two monitor objects. void TerminateWorker(TSlave* wrk); Ask an active worker 'wrk' to terminate, i.e. to shutdown. void TerminateWorker(const char* ord); Ask an active worker 'ord' to terminate, i.e. to shutdown. Int_t Ping(); Ping PROOF. Returns 1 if master server responded. Int_t Ping(TProof::ESlaves list); Ping PROOF slaves. Returns the number of slaves that responded. void Touch(); Ping PROOF slaves. Returns the number of slaves that responded. void Print(Option_t* option = """") const; Print status of PROOF cluster. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C) file.; The default tree is analyzed (i.e. the first one found). To specify another; tree, the default tree can be changed us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProof.html:45413,Ping,Ping,45413,root/html532/TProof.html,https://root.cern,https://root.cern/root/html532/TProof.html,2,['Ping'],['Ping']
Availability,"id ClearOverlaps()Clear the list of overlaps.Definition TGeoManager.cxx:1605; TGeoManager::MakeConsTGeoVolume * MakeCons(const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a cone segment shape with given medium.Definition TGeoManager.cxx:3266; TGeoManager::fHashGVolumesTHashList * fHashGVolumeshash list of volumes providing fast searchDefinition TGeoManager.h:137; TGeoManager::fVisOptionInt_t fVisOptionDefinition TGeoManager.h:71; TGeoManager::fgMutexstatic std::mutex fgMutexDefinition TGeoManager.h:49; TGeoManager::IsInPhiRangeBool_t IsInPhiRange() constTrue if current node is in phi range.Definition TGeoManager.cxx:2834; TGeoManager::cdvirtual Bool_t cd(const char *path="""")Browse the tree of nodes starting from fTopNode according to pathname.Definition TGeoManager.cxx:1707; TGeoManager::SearchNodeTGeoNode * SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)Returns the deepest node containing fPoint, which must be set a priori.Definition TGeoManager.cxx:2716; TGeoManager::MaterialTGeoMaterial * Material(const char *name, Double_t a, Double_t z, Double_t dens, Int_t uid, Double_t radlen=0, Double_t intlen=0)Create material with given A, Z and density, having an unique id.Definition TGeoManager.cxx:1285; TGeoManager::LocalToMastervoid LocalToMaster(const Double_t *local, Double_t *master) constDefinition TGeoManager.h:526; TGeoManager::fPhiminDouble_t fPhiminDefinition TGeoManager.h:62; TGeoManager::fgLockNavigatorsstatic Bool_t fgLockNavigatorsNumber of registered threads.Definition TGeoManager.h:122; TGeoManager::SaveAttributesvoid SaveAttributes(const char *filename=""tgeoatt.C"")Save current attributes in a macro.Definition TGeoManager.cxx:2658; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::fDrawExtraBool_t fDrawExtraDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:185095,down,downwards,185095,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['down'],['downwards']
Availability,"id ROOT::Fit::FitUtil::EvaluateChi2Gradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7557,error,errors,7557,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['error'],['errors']
Availability,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:141529,error,error,141529,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['error'],"['error', 'errors']"
Availability,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:143366,error,error,143366,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['error'],"['error', 'errors']"
Availability,"id SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option; or set the bin count to the weights in case of weighted data. void Draw(const Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TString& drawOpt); Draws a TGraphErrors for the KDE errors. TGraphErrors* GetGraphWithErrors(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.). void DrawConfidenceInterval(TString& drawOpt, double cl = 0.94999999999999996); Draws the KDE and its confidence interval. Double_t GetFixedWeight() const; Returns the bandwidth for the non adaptive KDE. const Double_t * GetAdaptiveWeights() const; Returns the bandwidths for the adaptive KDE. UInt_t Index(Double_t x) const; Returns the indices (bins) for the binned weights. Double_t UpperConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise upper estimated density. Double_t LowerConfidenceInterval(const Double_t* x, const Double_t* p) const; Returns the pointwise lower estimated density. Double_t GetBias(Double_t x) const; Returns the pointwise approximate estimated density bias. Double_t GetError(Double_t x) const; Returns the pointwise sigma of estimated density. void CheckKernelValidity(); Checks if kernel has unit integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TKDE.html:17326,error,errors,17326,root/html604/TKDE.html,https://root.cern,https://root.cern/root/html604/TKDE.html,2,['error'],['errors']
Availability,"id SetPalette(Int_t ncolors, Int_t* colors, Float_t alpha = 1.). Static function.; The color palette is used by the histogram classes; (see TH1::Draw options).; For example TH1::Draw(""col"") draws a 2-D histogram with cells; represented by a box filled with a color CI function of the cell content.; if the cell content is N, the color CI used will be the color number; in colors[N],etc. If the maximum cell content is > ncolors, all; cell contents are scaled to ncolors.; ; if ncolors <= 0 a default palette (see below) of 50 colors is; defined. The colors defined in this palette are OK for coloring pads, labels.; . index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors; . if ncolors == 1 && colors == 0, a Rainbow Color map is created; with 50 colors. It is kept for backward compatibility. Better palettes like; kBird are recommended.; ; High quality predefined palettes with 255 colors are available when colors == 0.; The following value of ncolors give access to:; . if ncolors = 51 and colors=0, a Deep Sea palette is used.; if ncolors = 52 and colors=0, a Grey Scale palette is used.; if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); if ncolors = 55 and colors=0, a Rain Bow palette is used.; if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; if ncolors = 58 and colors=0, a Cubehelix palette is used; (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); if ncolors = 59 and colors=0, a Green Red Violet palette is used.; if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; if ncolors = 61 and colors=0, an Ocean palette is used.; if ncolors = 62 and colors=0, a Color Print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TColor.html:28260,avail,available,28260,root/html604/TColor.html,https://root.cern,https://root.cern/root/html604/TColor.html,2,['avail'],['available']
Availability,"id SetX2NDC(Double_t x2)Definition TPave.h:83; TPickerStackGuardDefinition TVirtualPad.h:297; TPointDefinition TPoint.h:31; TPoint::SetXvoid SetX(SCoord_t x)Definition TPoint.h:48; TPoint::SetYvoid SetY(SCoord_t y)Definition TPoint.h:49; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfile2D::Classstatic TClass * Class(); TProfile2D::GetBinEntriesvirtual Double_t GetBinEntries(Int_t bin) constReturn bin entries of a Profile2D histogram.Definition TProfile2D.cxx:842; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::GetBinEntriesvirtual Double_t GetBinEntries(Int_t bin) constReturn bin entries of a Profile histogram.Definition TProfile.cxx:837; TProfile::Classstatic TClass * Class(); TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; TRandom2::RndmDouble_t Rndm() overrideTausWorth generator from L'Ecuyer, uses as seed 3x32bits integers Use a mask of 0xffffffffUL to make ...Definition TRandom2.cxx:55; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:487212,mask,mask,487212,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['mask'],['mask']
Availability,"id Subtract(const TGeoTranslation *other)Subtracting a translation from this one.Definition TGeoMatrix.cxx:742; Rotations; Represent a pure rotation. Data members: Double_t fRotationMatrix[3*3]. Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with angle phi, then a rotation with theta about the rotated X axis, and finally a rotation with psi about the new Z axis.; r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); th3auto * th3Definition textalign.C:22; th2auto * th2Definition textalign.C:18; th1auto * th1Definition textalign.C:14; This is a rotation defined in GEANT3 style. Theta and phi are the spherical angles of each axis of the rotated coordinate system with respect to the initial one. This construction allows definition of malformed rotations, e.g. not orthogonal. A check is performed and an error message is issued in this case.; Specific utilities : determinant, inverse.; Scale transformations; Represent a scale shrinking/enlargement. Data members :Double_t fScale[3]. Not fully implemented yet.; Combined transformations; Represent a rotation followed by a translation. Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;; ...; TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot); TGeoGenTrans; Combined transformations including a scale. Not implemented.; TGeoIdentity; A generic singleton matrix representing a identity transformation NOTE: identified by the global variable gGeoIdentity. ; Definition at line 38 of file TGeoMatrix.h. Public Types; enum  EGeoTransfTypes { ;   kGeoIdentity = 0; , kGeoShared = (1ULL << ( 14 )); , kGeoTranslation = (1ULL << ( 17 )); , kGeoRotation = (1ULL << ( 18 )); , ;   kGeoScale = (1ULL << ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMatrix.html:8795,error,error,8795,doc/master/classTGeoMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html,1,['error'],['error']
Availability,"id TChain::RecursiveRemove(TObject *obj); 2306{; 2307 if (fFile == obj) {; 2308 fFile = nullptr;; 2309 fDirectory = nullptr;; 2310 fTree = nullptr;; 2311 }; 2312 if (fDirectory == obj) {; 2313 fDirectory = nullptr;; 2314 fTree = nullptr;; 2315 }; 2316 if (fTree == obj) {; 2317 fTree = nullptr;; 2318 }; 2319}; 2320 ; 2321////////////////////////////////////////////////////////////////////////////////; 2322/// Remove a friend from the list of friends.; 2323 ; 2324void TChain::RemoveFriend(TTree* oldFriend); 2325{; 2326 // We already have been visited while recursively looking; 2327 // through the friends tree, let return; 2328 ; 2329 if (!fFriends) {; 2330 return;; 2331 }; 2332 ; 2333 TTree::RemoveFriend(oldFriend);; 2334 ; 2335 if (fProofChain); 2336 // This updates the proxy chain when we will really use PROOF; 2337 ResetBit(kProofUptodate);; 2338 ; 2339 // We need to invalidate the loading of the current tree because its list; 2340 // of real friends is now obsolete. It is repairable only from LoadTree.; 2341 InvalidateCurrentTree();; 2342}; 2343 ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// Resets the state of this chain.; 2346 ; 2347void TChain::Reset(Option_t*); 2348{; 2349 delete fFile;; 2350 fFile = nullptr;; 2351 fNtrees = 0;; 2352 fTreeNumber = -1;; 2353 fTree = nullptr;; 2354 fFile = nullptr;; 2355 fFiles->Delete();; 2356 fStatus->Delete();; 2357 fTreeOffset[0] = 0;; 2358 TChainElement* element = new TChainElement(""*"", """");; 2359 fStatus->Add(element);; 2360 fDirectory = nullptr;; 2361 ; 2362 TTree::Reset();; 2363}; 2364 ; 2365////////////////////////////////////////////////////////////////////////////////; 2366/// Resets the state of this chain after a merge (keep the customization but; 2367/// forget the data).; 2368 ; 2369void TChain::ResetAfterMerge(TFileMergeInfo *info); 2370{; 2371 fNtrees = 0;; 2372 fTreeNumber = -1;; 2373 fTree = nullptr;; 2374 fFile = nullptr;; 2375 fFiles->Delete();; 2376 fTreeOffse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:84492,repair,repairable,84492,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['repair'],['repairable']
Availability,id TMVA::TSynapse::SetLearningRate ; (; Double_t ; rate). inline . Definition at line 56 of file TSynapse.h. ◆ SetPostNeuron(). void TMVA::TSynapse::SetPostNeuron ; (; TNeuron * ; post). inline . Definition at line 68 of file TSynapse.h. ◆ SetPreNeuron(). void TMVA::TSynapse::SetPreNeuron ; (; TNeuron * ; pre). inline . Definition at line 65 of file TSynapse.h. ◆ SetWeight(). void TMVA::TSynapse::SetWeight ; (; Double_t ; weight). set synapse weight ; Definition at line 68 of file TSynapse.cxx. ◆ Streamer(). virtual void TMVA::TSynapse::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TSynapse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TSynapse.h. Member Data Documentation. ◆ fCount. Int_t TMVA::TSynapse::fCount. private . number of updates contributing to error field ; Definition at line 95 of file TSynapse.h. ◆ fDEDw. Double_t TMVA::TSynapse::fDEDw. private . sum of deltas ; Definition at line 94 of file TSynapse.h. ◆ fDelta. Double_t TMVA::TSynapse::fDelta. private . local error field ; Definition at line 93 of file TSynapse.h. ◆ fLearnRate. Double_t TMVA::TSynapse::fLearnRate. private . learning rate parameter ; Definition at line 92 of file TSynapse.h. ◆ fPostNeuron. TNeuron* TMVA::TSynapse::fPostNeuron. private . pointer to post-neuron ; Definition at line 97 of file TSynapse.h. ◆ fPreNeuron. TNeuron* TMVA::TSynapse::fPreNeuron. private . pointer to pre-neuron ; Definition at line 96 of file TSynapse.h. ◆ fWeight. Double_t TMVA::TSynapse::fWeight. private . weight of the synapse ; Definition at line 91 of file TSynapse.h. Libraries for TMVA::TSynapse:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TSynapse.h; tmva/tmva/src/TSynapse.cxx. TMVATSynapse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSynapse.html:15099,error,error,15099,doc/master/classTMVA_1_1TSynapse.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSynapse.html,1,['error'],['error']
Availability,"id TSpectrum::SetDeconIterations ; (; Int_t ; n = 3). static . Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ; Definition at line 101 of file TSpectrum.cxx. ◆ SetResolution(). void TSpectrum::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 344 of file TSpectrum.cxx. ◆ SmoothMarkov(). const char * TSpectrum::SmoothMarkov ; (; Double_t * ; source, . Int_t ; ssize, . Int_t ; averWindow . ). One-dimensional markov spectrum smoothing function. ; This function calculates smoothed spectrum from source spectrum based on Markov chain method. The result is placed in the array pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window. The goal of this function is the suppression of the statistical fluctuations. The algorithm is based on discrete Markov chain, which has very simple invariant distribution:. \[; U_2 = \frac{p_{1,2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1}...U_2U_1; \]. \( U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i=1\). \( n \) is the length of the smoothed spectrum and ; \[; p_{i,i\pm 1} = A_i\sum_{k=1}^{m} exp\left[ \frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. Reference:. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 14 - script Smoothing.C; ; void Smoothing() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:65592,error,error,65592,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,2,['error'],['error']
Availability,"id TTabCom::RehashGlobals ; (; ). Reload globals. ; Definition at line 378 of file TTabCom.cxx. ◆ RehashPragmas(). void TTabCom::RehashPragmas ; (; ). Reload pragmas. ; Definition at line 387 of file TTabCom.cxx. ◆ RehashSysIncFiles(). void TTabCom::RehashSysIncFiles ; (; ). Reload system include files. ; Definition at line 396 of file TTabCom.cxx. ◆ RehashUsers(). void TTabCom::RehashUsers ; (; ). Reload users. ; Definition at line 405 of file TTabCom.cxx. ◆ SetPattern(). void TTabCom::SetPattern ; (; EContext_t ; handle, . const char ; regexp[] . ). private . [private] ; Definition at line 2543 of file TTabCom.cxx. ◆ Streamer(). virtual void TTabCom::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TTabCom::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 226 of file TTabCom.h. ◆ TryMakeClassFromClassName(). TClass * TTabCom::TryMakeClassFromClassName ; (; const char ; className[]); const. private . Same as above but does not print the error message. ; Definition at line 2235 of file TTabCom.cxx. Member Data Documentation. ◆ fBuf. char* TTabCom::fBuf. private . Definition at line 218 of file TTabCom.h. ◆ fLastIter. Int_t TTabCom::fLastIter. private . Definition at line 224 of file TTabCom.h. ◆ fPat. Pattern_t TTabCom::fPat[kNUM_PAT][ 1024]. private . Definition at line 221 of file TTabCom.h. ◆ fpClasses. TSeqCollection* TTabCom::fpClasses. private . Definition at line 208 of file TTabCom.h. ◆ fpDirectives. TSeqCollection* TTabCom::fpDirectives. private . Definition at line 210 of file TTabCom.h. ◆ fpEnvVars. TSeqCollection* TTabCom::fpEnvVars. private . Definition at line 211 of file TTabCom.h. ◆ fpFiles. TSeqCollection* TTabCom::fpFiles. private . Definition at line 212 of file TTabCom.h. ◆ fpGlobals. TSeqCollection* TTabCom::fpGlobals. private . Definition at line 213 of file TTabCom.h. ◆ fpLoc. int* TTabCom::fpLoc. private . Definition at line 219 of file TTabCom.h. ◆ fpPragmas. TSeqCollection* TTabCom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:19461,error,error,19461,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['error'],['error']
Availability,"id char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; TGraph.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TCollectionCollection abstract base class.Definition TCollection.h:65; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute range.Definition TGraphErrors.cxx:480; TGraphErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEX, and fEY arrays with the sorted values.Definition TGraphErrors.cxx:866; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:6269,error,error,6269,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['error']
Availability,"id mnvert(Double_t* a, Int_t l, Int_t m, Int_t n, Int_t& ifail); Inverts a symmetric matrix*-; *-* ==========================; *-* inverts a symmetric matrix. matrix is first scaled to; *-* have all ones on the diagonal (equivalent to change of units); *-* but no pivoting is done since matrix is positive-definite.; *. void mnwarn(const char* copt, const char* corg, const char* cmes); Prints Warning messages*-*-; *-* =======================; *-* If COPT='W', CMES is a WARning message from CORG.; *-* If COPT='D', CMES is a DEBug message from CORG.; *-* If SET WARnings is in effect (the default), this routine; *-* prints the warning message CMES coming from CORG.; *-* If SET NOWarnings is in effect, the warning message is; *-* stored in a circular buffer of length kMAXMES.; *-* If called with CORG=CMES='SHO', it prints the messages in; *-* the circular buffer, FIFO, and empties the buffer.; *. void mnwerr(); -*Calculates the WERR, external parameter errors; *-* ==============================================; *-* and the global correlation coefficients, to be called; *-* whenever a new covariance matrix is available.; *. TMinuit& operator=(const TMinuit& m). TMethodCall * GetMethodCall() const; {return fMethodCall;}. TObject * GetObjectFit() const; {return fObjectFit;}. Int_t GetMaxIterations() const; {return fMaxIterations;}. TObject * GetPlot() const; {return fPlot;}. Int_t GetStatus() const; {return fStatus;}. void SetGraphicsMode(Bool_t mode = kTRUE); {fGraphicsMode = mode;}. void SetMaxIterations(Int_t maxiter = 500); {fMaxIterations = maxiter;}. void SetObjectFit(TObject* obj); {fObjectFit=obj;}. » Author: Rene Brun, Frederick James 12/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TMinuit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:56659,error,errors,56659,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"id mnvert(Double_t* a, Int_t l, Int_t m, Int_t n, Int_t& ifail); Inverts a symmetric matrix*-; *-* ==========================; *-* inverts a symmetric matrix. matrix is first scaled to; *-* have all ones on the diagonal (equivalent to change of units); *-* but no pivoting is done since matrix is positive-definite.; *. void mnwarn(const char* copt, const char* corg, const char* cmes); Prints Warning messages*-*-; *-* =======================; *-* If COPT='W', CMES is a WARning message from CORG.; *-* If COPT='D', CMES is a DEBug message from CORG.; *-* If SET WARnings is in effect (the default), this routine; *-* prints the warning message CMES coming from CORG.; *-* If SET NOWarnings is in effect, the warning message is; *-* stored in a circular buffer of length kMAXMES.; *-* If called with CORG=CMES='SHO', it prints the messages in; *-* the circular buffer, FIFO, and empties the buffer.; *. void mnwerr(); -*Calculates the WERR, external parameter errors; *-* ==============================================; *-* and the global correlation coefficients, to be called; *-* whenever a new covariance matrix is available.; *. TMinuit& operator=(const TMinuit& m). TMethodCall * GetMethodCall() const; {return fMethodCall;}. TObject * GetObjectFit() const; {return fObjectFit;}. Int_t GetMaxIterations() const; {return fMaxIterations;}. TObject * GetPlot() const; {return fPlot;}. Int_t GetStatus() const; {return fStatus;}. void SetGraphicsMode(Bool_t mode = kTRUE); {fGraphicsMode = mode;}. void SetMaxIterations(Int_t maxiter = 500); {fMaxIterations = maxiter;}. void SetObjectFit(TObject* obj); {fObjectFit=obj;}. » Author: Rene Brun, Frederick James 12/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TMinuit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuit.html:56728,error,errors,56728,root/html530/TMinuit.html,https://root.cern,https://root.cern/root/html530/TMinuit.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"id mnvert(Double_t* a, Int_t l, Int_t m, Int_t n, Int_t& ifail); Inverts a symmetric matrix*-; *-* ==========================; *-* inverts a symmetric matrix. matrix is first scaled to; *-* have all ones on the diagonal (equivalent to change of units); *-* but no pivoting is done since matrix is positive-definite.; *. void mnwarn(const char* copt, const char* corg, const char* cmes); Prints Warning messages*-*-; *-* =======================; *-* If COPT='W', CMES is a WARning message from CORG.; *-* If COPT='D', CMES is a DEBug message from CORG.; *-* If SET WARnings is in effect (the default), this routine; *-* prints the warning message CMES coming from CORG.; *-* If SET NOWarnings is in effect, the warning message is; *-* stored in a circular buffer of length kMAXMES.; *-* If called with CORG=CMES='SHO', it prints the messages in; *-* the circular buffer, FIFO, and empties the buffer.; *. void mnwerr(); -*Calculates the WERR, external parameter errors; *-* ==============================================; *-* and the global correlation coefficients, to be called; *-* whenever a new covariance matrix is available.; *. TMinuit& operator=(const TMinuit& m). TMethodCall * GetMethodCall() const; {return fMethodCall;}. TObject * GetObjectFit() const; {return fObjectFit;}. Int_t GetMaxIterations() const; {return fMaxIterations;}. TObject * GetPlot() const; {return fPlot;}. Int_t GetStatus() const; {return fStatus;}. void SetGraphicsMode(Bool_t mode = kTRUE); {fGraphicsMode = mode;}. void SetMaxIterations(Int_t maxiter = 500); {fMaxIterations = maxiter;}. void SetObjectFit(TObject* obj); {fObjectFit=obj;}. » Author: Rene Brun, Frederick James 12/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TMinuit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMinuit.html:56728,error,errors,56728,root/html532/TMinuit.html,https://root.cern,https://root.cern/root/html532/TMinuit.html,4,"['avail', 'error']","['available', 'errors']"
Availability,"id to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:50155,Error,Error,50155,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['Error'],['Error']
Availability,"id(); 2022{; 2023 return geteuid();; 2024}; 2025 ; 2026////////////////////////////////////////////////////////////////////////////////; 2027/// Returns the group's id. If group = 0, returns current user's group.; 2028 ; 2029Int_t TUnixSystem::GetGid(const char *group); 2030{; 2031 if (!group || !group[0]); 2032 return getgid();; 2033 else {; 2034 struct group *grp = getgrnam(group);; 2035 if (grp); 2036 return grp->gr_gid;; 2037 }; 2038 return 0;; 2039}; 2040 ; 2041////////////////////////////////////////////////////////////////////////////////; 2042/// Returns the effective group id. The effective group id corresponds; 2043/// to the set id bit on the file being executed.; 2044 ; 2045Int_t TUnixSystem::GetEffectiveGid(); 2046{; 2047 return getegid();; 2048}; 2049 ; 2050////////////////////////////////////////////////////////////////////////////////; 2051/// Returns all user info in the UserGroup_t structure. The returned; 2052/// structure must be deleted by the user. In case of error 0 is returned.; 2053 ; 2054UserGroup_t *TUnixSystem::GetUserInfo(Int_t uid); 2055{; 2056 typedef std::map<Int_t /*uid*/, UserGroup_t> UserInfoCache_t;; 2057 static UserInfoCache_t gUserInfo;; 2058 ; 2059 UserInfoCache_t::const_iterator iUserInfo = gUserInfo.find(uid);; 2060 if (iUserInfo != gUserInfo.end()); 2061 return new UserGroup_t(iUserInfo->second);; 2062 ; 2063 struct passwd *apwd = getpwuid(uid);; 2064 if (apwd) {; 2065 UserGroup_t *ug = new UserGroup_t;; 2066 ug->fUid = apwd->pw_uid;; 2067 ug->fGid = apwd->pw_gid;; 2068 ug->fUser = apwd->pw_name;; 2069 ug->fPasswd = apwd->pw_passwd;; 2070 ug->fRealName = apwd->pw_gecos;; 2071 ug->fShell = apwd->pw_shell;; 2072 UserGroup_t *gr = GetGroupInfo(apwd->pw_gid);; 2073 if (gr) ug->fGroup = gr->fGroup;; 2074 delete gr;; 2075 ; 2076 gUserInfo[uid] = *ug;; 2077 return ug;; 2078 }; 2079 return nullptr;; 2080}; 2081 ; 2082////////////////////////////////////////////////////////////////////////////////; 2083/// Returns all user info in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:63122,error,error,63122,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"id(CallFunc_t *func) const finalDefinition TCling.cxx:7949; TCling::BaseClassInfo_Nameconst char * BaseClassInfo_Name(BaseClassInfo_t *bcinfo) const finalDefinition TCling.cxx:8563; TCling::fLookupHelperROOT::TMetaUtils::TClingLookupHelper * fLookupHelperDefinition TCling.h:135; TCling::DataMemberInfo_ValidArrayIndexconst char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8714; TCling::GetMoreInt_t GetMore() const finalReturn whether we are waiting for more input either because the collected input contains unbalanced b...Definition TCling.cxx:4544; TCling::fIsAutoParsingSuspendedBool_t fIsAutoParsingSuspendedDefinition TCling.h:182; TCling::ToStringstd::string ToString(const char *type, void *obj) finalDefinition TCling.cxx:1023; TCling::GetDeclIdDeclId_t GetDeclId(const llvm::GlobalValue *gv) constReturn pointer to cling DeclId for a global value.Definition TCling.cxx:4872; TCling::Executevoid Execute(const char *function, const char *params, int *error=nullptr) finalExecute a global function with arguments params.Definition TCling.cxx:5233; TCling::ClassInfo_IsLoadedbool ClassInfo_IsLoaded(ClassInfo_t *info) const finalDefinition TCling.cxx:8320; TCling::ClassInfo_TagnumLongptr_t ClassInfo_Tagnum(ClassInfo_t *info) const finalDefinition TCling.cxx:8408; TCling::BaseClassInfo_PropertyLong_t BaseClassInfo_Property(BaseClassInfo_t *bcinfo) const finalDefinition TCling.cxx:8529; TCling::CallFunc_SetFuncvoid CallFunc_SetFunc(CallFunc_t *func, ClassInfo_t *info, const char *method, const char *params, Longptr_t *Offset) const finalDefinition TCling.cxx:8038; TCling::GetUsingNamespacesstd::vector< std::string > GetUsingNamespaces(ClassInfo_t *cl) const finalGet the scopes representing using declarations of namespace.Definition TCling.cxx:4478; TCling::ClassInfo_FileNameconst char * ClassInfo_FileName(ClassInfo_t *info) const finalDefinition TCling.cxx:8416; TCling::FuncTempInfo_Titlevoid FuncTempInfo_Title(FuncTempInfo_t *, TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:451463,error,error,451463,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['error'],['error']
Availability,"id);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Double_t Big ();  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Double_t ComputeEpsMch ();  Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ;  ; static const char * DeclFileName ();  ; static Double_t DistToPhiMin (const Double_t *point, const Double_t *dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in=kTRUE);  compute distance from point (inside phi) to both phi planes. Return minimum. ;  ; static Double_t EpsMch ();  static function returning the machine round-off error ;  ; static TGeoMatrix * GetTransform ();  Returns current transformation matrix that applies to shape. ;  ; static Bool_t IsCloseToPhi (Double_t epsil, const Double_t *point, Double_t c1, Double_t s1, Double_t c2, Double_t s2);  True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. ;  ; static Bool_t IsCrossingSemiplane (const Double_t *point, const Double_t *dir, Double_t cphi, Double_t sphi, Double_t &snex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:21757,error,error,21757,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['error'],['error']
Availability,"id* ctx = 0, Int_t key = 1); virtual~TRootSecContext(); voidTObject::AbstractMethod(const char* method) const; voidTSecContext::AddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRootSecContext.html:1740,Error,Error,1740,root/html532/TRootSecContext.html,https://root.cern,https://root.cern/root/html532/TRootSecContext.html,2,['Error'],['Error']
Availability,"id* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const Chebyshev &); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Chebyshev.html:2898,error,error,2898,root/html526/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"id* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Bool_tReadNotify(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTFileHandler::Remove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTFileHandler::ResetReadyMask(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTFileHandler::SetFd(int fd); virtual voidTFileHandler::SetInterest(Int_t mask); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFileHandler::SetReadReady(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTFileHandler::SetWriteReady(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tTFileHandler::WriteNotify().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocketHandler.html:7757,mask,mask,7757,root/html530/TXSocketHandler.html,https://root.cern,https://root.cern/root/html530/TXSocketHandler.html,3,['mask'],['mask']
Availability,"id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); virtual Colormap_tGetColormap() const; virtual Wind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGQt.html:5735,error,error,5735,root/html528/TGQt.html,https://root.cern,https://root.cern/root/html528/TGQt.html,3,['error'],['error']
Availability,"id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); virtual Colormap_tGetColormap() const; virtual Window_tGetCurrentWindow() const; virtual W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:5786,error,error,5786,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,4,['error'],['error']
Availability,"id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGQt.html:6004,error,error,6004,root/html534/TGQt.html,https://root.cern,https://root.cern/root/html534/TGQt.html,2,['error'],['error']
Availability,"idAddAt(ULong64_t linidx, Double_t value); virtual voidTObject::AppendPad(Option_t* option = """"); unsigned long longAt(const Int_t* idx) const; unsigned long long&At(const Int_t* idx); unsigned long longAt(ULong64_t linidx) const; unsigned long long&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_ULong64_t_.html:1964,Error,Error,1964,root/html534/TNDArrayT_ULong64_t_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_ULong64_t_.html,1,['Error'],['Error']
Availability,"idAddMergedObjects(Int_t objects); voidAddWorker(TSlave* sl); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAreAllWorkersAssigned(); Bool_tAreAllWorkersMerged(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDeactivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMergedObjects(); Int_tGetMergedWorkers(); TSlave*GetMerger(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetWorkers(); Int_tGetWorkersToMerge(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMergerInfo.html:1706,error,error,1706,root/html528/TMergerInfo.html,https://root.cern,https://root.cern/root/html528/TMergerInfo.html,10,['error'],['error']
Availability,"idAddObj(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); void*CheckPtrAndWarn(const char* msg, void* vp); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectTable.html:3443,error,error,3443,root/html528/TObjectTable.html,https://root.cern,https://root.cern/root/html528/TObjectTable.html,10,['error'],['error']
Availability,"idAddParticles(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginEvent(); virtual voidBeginPrimary(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConstructGeometry(); virtual voidConstructOpGeometry(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinishEvent(); virtual voidFinishPrimary(); virtual voidFinishRun(); virtual voidGeneratePrimaries(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMCVerbose.html:1681,error,error,1681,root/html528/TMCVerbose.html,https://root.cern,https://root.cern/root/html528/TMCVerbose.html,10,['error'],['error']
Availability,"idBringOnTop()MENU ; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(const Option_t* options = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t entry, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Double_tGetMax(); virtual Double_tGetMin(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParallelCoordSelect*GetSelection(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TParallelCoordVar*GetVar(); virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordRange.html:1617,error,error,1617,root/html602/TParallelCoordRange.html,https://root.cern,https://root.cern/root/html602/TParallelCoordRange.html,4,['error'],['error']
Availability,"idCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::GetPhimin() const; Double_tTEllipse::GetR1() const; Double_tTEllipse::GetR2() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCrown.html:2581,error,error,2581,root/html526/TCrown.html,https://root.cern,https://root.cern/root/html526/TCrown.html,5,['error'],['error']
Availability,"idCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTEllipse::GetBBox(); virtual TPointTEllipse::GetBBoxCenter(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCrown.html:2581,error,error,2581,root/html534/TCrown.html,https://root.cern,https://root.cern/root/html534/TCrown.html,6,['error'],['error']
Availability,"idDrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGQt.html:5651,error,error,5651,root/html528/TGQt.html,https://root.cern,https://root.cern/root/html528/TGQt.html,3,['error'],['error']
Availability,"idDrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:5702,error,error,5702,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,4,['error'],['error']
Availability,"idDrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGQt.html:5920,error,error,5920,root/html534/TGQt.html,https://root.cern,https://root.cern/root/html534/TGQt.html,2,['error'],['error']
Availability,"idObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_long_.html:11795,error,error,11795,root/html602/THnT_unsigned_long_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_long_.html,4,['error'],"['error', 'errors']"
Availability,"idObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned long>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THnT_unsigned_long_.html:11795,error,error,11795,root/html604/THnT_unsigned_long_.html,https://root.cern,https://root.cern/root/html604/THnT_unsigned_long_.html,4,['error'],"['error', 'errors']"
Availability,"idObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_short_.html:11810,error,error,11810,root/html602/THnT_unsigned_short_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_short_.html,4,['error'],"['error', 'errors']"
Availability,"idObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned short>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THnT_unsigned_short_.html:11810,error,error,11810,root/html604/THnT_unsigned_short_.html,https://root.cern,https://root.cern/root/html604/THnT_unsigned_short_.html,4,['error'],"['error', 'errors']"
Availability,"idRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); virtual Bool_tRooAbsPdf::syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_ttraceEvalHook(Double_t value) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsPdf::ExtendMode { CanNotBeExtended; CanBeExtended; MustBeExtended; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooFormulaVar*_basisBasis function convolved with this resolution model; Int_t_basisCodeIdentifier code for selected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:38655,Error,ErrorLoggingMode,38655,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['Error'],['ErrorLoggingMode']
Availability,"idStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Deafult constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TStatus.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStatus.html:5762,error,error,5762,root/html528/TStatus.html,https://root.cern,https://root.cern/root/html528/TStatus.html,2,['error'],['error']
Availability,"idTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TApplicationRemote&operator=(const TApplicationRemote&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tSendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Int_tSendObject(const TObject* obj); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationRemote.html:8007,error,error,8007,root/html602/TApplicationRemote.html,https://root.cern,https://root.cern/root/html602/TApplicationRemote.html,4,['error'],['error']
Availability,"idTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQApplication.html:7995,error,error,7995,root/html602/TQApplication.html,https://root.cern,https://root.cern/root/html602/TQApplication.html,4,['error'],['error']
Availability,"idTF1::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTF1::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTF1::SetNDF(Int_t ndf); virtual voidTF1::SetNormalized(Bool_t flag); virtual voidTF1::SetNpx(Int_t npx = 100)MENU ; virtual voidSetNpy(Int_t npy = 100)MENU ; virtual voidTF1::SetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTF1::SetParameter(Int_t param, Double_t value); virtual voidTF1::SetParameter(const TString& name, Double_t value); virtual voidTF1::SetParameters(const Double_t* params); virtual voidTF1::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTF1::SetParent(TObject* p = 0); virtual voidTF1::SetParError(Int_t ipar, Double_t error); virtual voidTF1::SetParErrors(const Double_t* errors); virtual voidTF1::SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTF1::SetParName(Int_t ipar, const char* name); virtual voidTF1::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax)MENU ; virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidTF1::SetSavedPoint(Int_t point, Double_t value); virtual voidTF1::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF2.html:14375,error,error,14375,root/html604/TF2.html,https://root.cern,https://root.cern/root/html604/TF2.html,2,['error'],['error']
Availability,"idTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNedges(Int_t ne); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoPgon(); TGeoPgon(Double_t* params); TGeoPgon(const TGeoPgon&); TGeoPgon(Double_t phi, Double_t dphi, Int_t nedges, Int_t nz); TGeoPgon(const char* name, Double_t phi, Double_t dphi, Int_t nedges, Int_t nz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&TGeoPcon::Z(Int_t ipl).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPgon.html:11425,Toler,Tolerance,11425,root/html602/TGeoPgon.html,https://root.cern,https://root.cern/root/html602/TGeoPgon.html,2,['Toler'],['Tolerance']
Availability,"idTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:1617,error,error,1617,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,4,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddGenContext.html:2343,error,error,2343,root/html526/RooAddGenContext.html,https://root.cern,https://root.cern/root/html526/RooAddGenContext.html,18,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddGenContext.html:2343,error,error,2343,root/html532/RooAddGenContext.html,https://root.cern,https://root.cern/root/html532/RooAddGenContext.html,9,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddGenContext.html:2343,error,error,2343,root/html534/RooAddGenContext.html,https://root.cern,https://root.cern/root/html534/RooAddGenContext.html,32,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConvGenContext.html:2524,error,error,2524,root/html534/RooConvGenContext.html,https://root.cern,https://root.cern/root/html534/RooConvGenContext.html,4,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenContext.html:2279,error,error,2279,root/html532/RooGenContext.html,https://root.cern,https://root.cern/root/html532/RooGenContext.html,2,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinnedGenContext.html:1942,error,error,1942,root/html534/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html534/RooBinnedGenContext.html,12,['error'],['error']
Availability,"idTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinnedGenContext.html:1942,error,error,1942,root/html532/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html532/RooBinnedGenContext.html,3,['error'],['error']
Availability,"idTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); TFolder*AddFolder(const char* name, const char* title, TCollection* collection = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFullPathName(const char* name) const; virtual const char*FindFullPathName(const TObject* obj) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TCollection*GetListOfFolders() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFolder.html:4519,error,error,4519,root/html528/TFolder.html,https://root.cern,https://root.cern/root/html528/TFolder.html,10,['error'],['error']
Availability,"idTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetPlottedObject() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html:1574,Error,Error,1574,root/html534/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html,1,['Error'],['Error']
Availability,"idTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__LikelihoodIntervalPlot.html:1574,Error,Error,1574,root/html532/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html532/RooStats__LikelihoodIntervalPlot.html,1,['Error'],['Error']
Availability,"idTObject::AbstractMethod(const char* method) const; voidAdd(const RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCDF(Double_t x) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const vector<Double_t>&GetSampleWeights() const; const vector<Double_t>&GetSamplingDistribution() const; Int_tGetSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const TStringGetVarName() const; virtual Bool_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:1691,error,error,1691,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,9,['error'],['error']
Availability,"idTObject::AbstractMethod(const char* method) const; voidAdd(const RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCDF(Double_t x) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vector<Double_t>GetSampleWeights() const; vector<Double_t>GetSamplingDistribution() const; Int_tGetSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const TStringGetVarName() const; virtual Bool_tTObject::HandleTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistribution.html:1691,error,error,1691,root/html528/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistribution.html,1,['error'],['error']
Availability,"idTObject::AppendPad(Option_t* option = """"); virtual Int_tTVirtualPacketizer::AssignWork(TDSet*, Long64_t, Long64_t); virtual voidTObject::Browse(TBrowser* b); Int_tCalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTVirtualPacketizer::GetEntriesProcessed() const; virtual Int_tGetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizerAdaptive.html:2495,error,error,2495,root/html602/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html602/TPacketizerAdaptive.html,4,['error'],['error']
Availability,"idTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& polymarker) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPolyMarker(Int_t n, Float_t* p, Marker_t marker, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLastPoint() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Int_tGetN() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual Float_t*GetP() const; virtual voidGetPoint(Int_t n, Float_t& x, Float_t& y, Float_t& z) const; virtual voidGetPoint(Int_t n, Double_t& x, Double_t& y, Double_t& z) const; virtual const char*TObject::GetTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyMarker3D.html:2463,error,error,2463,root/html528/TPolyMarker3D.html,https://root.cern,https://root.cern/root/html528/TPolyMarker3D.html,10,['error'],['error']
Availability,"idTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidEventInfo1(Int_t event, Int_t px, Int_t py, TObject* selected); static voidEventInfo2(Int_t event, Int_t px, Int_t py, TObject* selected); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFillBTString(Int_t bin, Int_t mode, TString& btstring); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMemStatShow.html:1511,error,error,1511,root/html530/TMemStatShow.html,https://root.cern,https://root.cern/root/html530/TMemStatShow.html,9,['error'],['error']
Availability,"idTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPave::ConvertNDCtoPad(); virtual voidCopy(TObject& palette) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPave::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGaxis*GetAxis(); Int_tGetBinColor(Int_t i, Int_t j); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Option_t*GetNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPaletteAxis.html:3050,Error,Error,3050,root/html532/TPaletteAxis.html,https://root.cern,https://root.cern/root/html532/TPaletteAxis.html,1,['Error'],['Error']
Availability,"idTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPave::ConvertNDCtoPad(); virtual voidCopy(TObject& palette) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPave::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGaxis*GetAxis(); virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tGetBinColor(Int_t i, Int_t j); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaletteAxis.html:3050,Error,Error,3050,root/html534/TPaletteAxis.html,https://root.cern,https://root.cern/root/html534/TPaletteAxis.html,3,['Error'],['Error']
Availability,"idTObject::Browse(TBrowser* b); virtual voidCenterLabels(Bool_t center = kTRUE)TOGGLE GETTER ; virtual voidCenterTitle(Bool_t center = kTRUE)TOGGLE GETTER ; const char*ChooseTimeFormat(Double_t axislength = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& axis) const; virtual voidDelete(Option_t* = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*DrawClone(Option_t* = """") const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindBin(Double_t x); virtual Int_tFindBin(const char* label); virtual Int_tFindFixBin(Double_t x) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Color_tTAttAxis::GetAxisColor() const; virtual Double_tGetBinCenter(Int_t bin) const; virtual Double_tGetBinCenterLog(Int_t bin) const; const char*GetBinLabel(Int_t bin) const; virtual Double_tGetBinLowEdge(Int_t bin) const; virtual Double_tGetBinUpEdge(Int_t bin) const; virtual Double_tGetBinWidth(Int_t bin) const; virtual voidGetCenter(Double_t* center) const; Bool_tGetCenterLabels() const; Bool_tGetCenterTitle() const; Bool_tGetDecimals() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFirst() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxis.html:1929,error,error,1929,root/html526/TAxis.html,https://root.cern,https://root.cern/root/html526/TAxis.html,7,['error'],['error']
Availability,"idTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodDT.html:4996,Error,Error,4996,root/html534/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodDT.html,1,['Error'],['Error']
Availability,"idTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TStringConvertToJSON(const TObject* obj, Int_t compact = 0); static TStringConvertToJSON(const void* obj, const TClass* cl, Int_t compact = 0); static TStringConvertToJSON(const void* obj, TDataMember* member, Int_t compact = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo*, Bool_t); virtual voidForceWriteInfoClones(TClonesArray*); virtual Int_tGetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; static TClass*TBuffer::GetClass(const type_info& typeinfo); static TClass*TBuffer::GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static const char*GetFloatFormat(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable*) const; virtual In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferJSON.html:3171,error,error,3171,root/html602/TBufferJSON.html,https://root.cern,https://root.cern/root/html602/TBufferJSON.html,4,['error'],['error']
Availability,"idTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTText::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; TLatex*DrawLatex(Double_t x, Double_t y, const char* text); TLatex*DrawLatexNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTText::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTText::GetBBox(); virtual TPointTText::GetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidTText::GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetHeight() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLatex.html:21885,error,error,21885,root/html534/TLatex.html,https://root.cern,https://root.cern/root/html534/TLatex.html,2,['error'],['error']
Availability,"idTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTText::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; TLatex*DrawLatex(Double_t x, Double_t y, const char* text); TLatex*DrawLatexNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*TText::DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTText::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTText::GetBBox(); virtual TPointTText::GetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidTText::GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t[4] cBoxX, Int_t[4] cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetHeight() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLatex.html:21840,error,error,21840,root/html602/TLatex.html,https://root.cern,https://root.cern/root/html602/TLatex.html,4,['error'],['error']
Availability,"idTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* h1); virtual voidDivide(TF1* f1, Double_t c1 = 1); virtual voidDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidEval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x); virtual Int_tFill(Double_t x, Double_t w); virtual Int_tFill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidFillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidFillRandom(const char* fname, Int_t ntimes = 5000); virtual voidFillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tFindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tFindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tFindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tFindLastBinAbove(Double_t thresh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:19238,error,error,19238,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['error']
Availability,"idTObject::RecursiveRemove(TObject* obj); virtual voidreset(); voidTObject::ResetBit(UInt_t f); virtual voidresetBuffers(); virtual voidresetCache(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidsetArgStatus(const RooArgSet& set, Bool_t active); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsDataStore::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsDataStore::setExternalWeightArray(Double_t*, Double_t*, Double_t*, Double_t*); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual Double_tsumEntries() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual const TTree*RooAbsDataStore::tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; virtual Double_tweight(Int_t index) const; virtual Double_tweightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:8133,Error,ErrorType,8133,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,2,['Error'],['ErrorType']
Availability,"idTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidRooAbsOptTestStatistic::seal(const char* notice = """"); const char*RooAbsOptTestStatistic::sealNotice() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsTestStatistic::setData(RooAbsData& data, Bool_t cloneData = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataWeightedAverage.html:23849,Error,ErrorLoggingMode,23849,root/html532/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html532/RooDataWeightedAverage.html,2,['Error'],['ErrorLoggingMode']
Availability,"idTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TGPicture(const char* name, Bool_t scaled = kFALSE); TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDraw(Option_t* = """"); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TRefCnt::EReferenceFlag { kStaticInit; };. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPicture.html:5257,mask,mask,5257,root/html528/TGPicture.html,https://root.cern,https://root.cern/root/html528/TGPicture.html,4,['mask'],['mask']
Availability,"idTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparseArrayChunk.html:6069,error,errors,6069,root/html528/THnSparseArrayChunk.html,https://root.cern,https://root.cern/root/html528/THnSparseArrayChunk.html,6,['error'],['errors']
Availability,"idTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEmpty(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAlias(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; TTVLVContainer*GetContainer(); TGItemContext*GetContext(); const char*GetConvName(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGLVEntry::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVEntry.html:4135,error,error,4135,root/html530/TTVLVEntry.html,https://root.cern,https://root.cern/root/html530/TTVLVEntry.html,5,['error'],['error']
Availability,"idTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteAction(); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGroupButton.html:5934,error,error,5934,root/html602/TGroupButton.html,https://root.cern,https://root.cern/root/html602/TGroupButton.html,4,['error'],['error']
Availability,"idTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::GetCrosshair() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TButton.html:7768,error,error,7768,root/html602/TButton.html,https://root.cern,https://root.cern/root/html602/TButton.html,4,['error'],['error']
Availability,"idTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::GetCrosshair() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePad.html:5651,error,error,5651,root/html602/TEvePad.html,https://root.cern,https://root.cern/root/html602/TEvePad.html,8,['error'],['error']
Availability,"idTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tTGLViewerBase::FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*TGLViewerBase::FindLogicalInScenes(TObject* id); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLAutoRotator*GetAutoRotator(); TGLCameraOverlay*GetCameraOverlay() const; Bool_tGetClipAutoUpdate() const; TGLClipSet*GetClipSet() const; TGLOverlayElement*GetCurrentOvlElm() const; static TGLColorSet&GetDef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLViewer.html:5790,Error,Error,5790,root/html532/TGLViewer.html,https://root.cern,https://root.cern/root/html532/TGLViewer.html,2,['Error'],['Error']
Availability,"idTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate excpt); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type ch); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); ostream&basic_ostream<char,char_traits<char> >::form(char* format); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:5734,error,error,5734,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,2,['error'],['error']
Availability,"idTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*GetCommand(); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:7476,Error,Error,7476,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['Error'],['Error']
Availability,"idTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*TQCommand::GetCommand(); TQCommand*GetCurrent() const; static TCollection*TCollection::GetCurrentCollection(); TQCommand*GetCursor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:7572,Error,Error,7572,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,2,['Error'],['Error']
Availability,"idTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExecuteMethod(); voidExecuteMethod(Long_t param); voidExecuteMethod(Long64_t param); voidExecuteMethod(Double_t param); voidExecuteMethod(const char* params); voidExecuteMethod(Int_t nargs, va_list va); voidExecuteMethod(Long_t* params, Int_t nparam = -1); voidExecuteMethod<>(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); const char*GetClassName() const; static TCollection*TCollection::GetCurrentCollection(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQConnection.html:4800,Error,Error,4800,root/html602/TQConnection.html,https://root.cern,https://root.cern/root/html602/TQConnection.html,2,['Error'],['Error']
Availability,idTSelectorDraw::InitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TEvePointSelector(const TEvePointSelector&); TEvePointSelector&operator=(const TEvePointSelector&). Data Members; public:. enum TSelectorDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTSelectorDraw::fAction! Action type; Bool_tTSelectorDraw::fCleanElisttrue if original Tree elist must be saved; TEvePointSelectorConsumer*fConsumer; Int_tTSelectorDraw::fDimensionDimension of the current expression; Long64_tTSelectorDraw::fDraw! Last entry loop number when object was drawn; Int_tTSelectorDraw::fForceReadForce Read flag; TListfInput; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TSelectorDraw::fManagerPointer to the formula manager; Int_tTSelectorDraw::fMultiplicityIndicator of the variability of the size of entries; Int_t*TSelectorDraw::fNbins![fDimension] Number of bins per dimension; Int_tTSelectorDraw::fNfill! Total number of histogram fills; Bool_tTSelectorDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); Long64_tTSelectorDraw::fOldEstimatevalue of Tree fEstimate when selector is called; TH1*TSelectorDraw::fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*TSelectorDraw::fSelectPointer to selection formula; Bool_tTSelectorDraw::fSelectMultipletrue if selection has a variable index; Long64_tTSelectorDraw::fSelectedRowsNumber of selected entries; TStringf,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePointSelector.html:9022,avail,available,9022,root/html528/TEvePointSelector.html,https://root.cern,https://root.cern/root/html528/TEvePointSelector.html,2,['avail'],['available']
Availability,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10900,error,error,10900,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,4,['error'],['error']
Availability,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10988,error,error,10988,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,2,['error'],['error']
Availability,"idation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More...;  ; class  TMVA::FitterBase;  Base class for TMVA fitters. More...;  ; class  TMVA::GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  TMVA::GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TMVA.html:3037,error,error,3037,doc/master/group__TMVA.html,https://root.cern,https://root.cern/doc/master/group__TMVA.html,1,['error'],['error']
Availability,"idcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindNextBoundary(Double_t* point, Double_t* dir, Int_t& indnext); virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffset(Int_t idiv); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternX.html:2721,error,error,2721,root/html532/TGeoPatternX.html,https://root.cern,https://root.cern/root/html532/TGeoPatternX.html,6,['error'],['error']
Availability,"idcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffset(Int_t idiv); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternCylPhi.html:2726,error,error,2726,root/html532/TGeoPatternCylPhi.html,https://root.cern,https://root.cern/root/html532/TGeoPatternCylPhi.html,18,['error'],['error']
Availability,"idcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tTGeoPatternFinder::GetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffset(Int_t idiv); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternHoneycomb.html:2586,error,error,2586,root/html532/TGeoPatternHoneycomb.html,https://root.cern,https://root.cern/root/html532/TGeoPatternHoneycomb.html,2,['error'],['error']
Availability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:957,error,errors,957,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,2,['error'],['errors']
Availability,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleReader_8C.html:1777,robust,robust,1777,doc/master/hsimpleReader_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html,1,['robust'],['robust']
Availability,"ide to the solver the function and the initial search interval [xlow, xup] for algorithms not using derivatives (bracketing algorithms) The templated function f must be of a type implementing the operator() method, double operator() ( double x ) Returns non zero if interval is not valid (i.e. ;  ; bool SetFunction (const IGradFunction &f, double xstart);  Provide to the solver the function and an initial estimate of the root, for algorithms using derivatives. ;  ; bool SetMethod (RootFinder::EType type=RootFinder::kBRENT);  ; template<class Function , class Derivative > ; bool Solve (Function &f, Derivative &d, double start, int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Solve f(x) = 0, given a derivative d. ;  ; template<class Function > ; bool Solve (Function &f, double min, double max, int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Solve f(x) = 0 numerically. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Compute the roots iterating until the estimate of the Root is within the required tolerance returning the iteration Status. ;  ; int Status () const;  Return the status of the last estimate of the Root = 0 OK, not zero failure. ;  . Private Attributes; IRootFinderMethod * fSolver;  . #include <Math/RootFinder.h>; Member Enumeration Documentation. ◆ EType. enum ROOT::Math::RootFinder::EType. EnumeratorkBRENT ; kGSL_BISECTION ; kGSL_FALSE_POS ; kGSL_BRENT ; kGSL_NEWTON ; kGSL_SECANT ; kGSL_STEFFENSON . Definition at line 77 of file RootFinder.h. Constructor & Destructor Documentation. ◆ RootFinder() [1/3]. ROOT::Math::RootFinder::RootFinder ; (; RootFinder::EType ; type = RootFinder::kBRENT). Construct a Root-Finder algorithm. ; Definition at line 40 of file RootFinder.cxx. ◆ ~RootFinder(). ROOT::Math::RootFinder::~RootFinder ; (; ). virtual . Definition at line 142 of file RootFinder.cxx. ◆ RootFinder() [2/3]. ROOT::Math::RootFinder::RootFinder ; (; const RootFinder & ; ). delete . ◆ RootFinder() [3/3]. ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html:3024,toler,tolerance,3024,doc/master/classROOT_1_1Math_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html,1,['toler'],['tolerance']
Availability,"ide;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual void changeBasis (RooFormulaVar *basis);  Change the basis function we convolute with. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; TClass * IsA () const override;  ; bool isBasisSupported (const char *name) const;  ; bool isConvolved () const;  ; virtual RooAbsGenContext * modelGenContext (const RooAbsAnaConvPdf &, const RooArgSet &, const RooDataSet *, const RooArgSet *, bool) const;  ; virtual void normLeafServerList (RooArgSet &list) const;  Floating point error checking and tracing for given float value. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:4016,error,error,4016,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,2,['error'],['error']
Availability,"ide;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:1991,error,error,1991,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,2,['error'],['error']
Availability,"ideCopy this to obj.Definition TNamed.cxx:94; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TRadialGradientDefinition TColorGradient.h:124; TRadialGradient::Classstatic TClass * Class(); TRadialGradient::kSimple@ kSimpleDefinition TColorGradient.h:127; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:162239,error,error,162239,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['error'],['error']
Availability,"ide_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoArb8::DistToPlane(const Double_t* point, const Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAlpha1() const; Double_tGetAlpha2() const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoArb8::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Double_tGetBl1() const; Double_tGetBl2() const; virtual voidTGeoArb8::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoArb8::GetByteCount() const; Double_tTGeoArb8::GetClosestEdge(const Double_t* point, Double_t* vert, Int_t& isegment) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrap.html:4723,error,error,4723,root/html534/TGeoTrap.html,https://root.cern,https://root.cern/root/html534/TGeoTrap.html,6,['error'],['error']
Availability,"idence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; get fit errors. Int_t GetNumberTotalParameters() const; number of total parameters. Int_t GetNumberFreeParameters() const; number of variable parameters. Double_t GetParError(Int_t ipar) const; parameter error. Double_t GetParameter(Int_t ipar) const; parameter value. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; get all parameter info (name, value, errors). const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; get fit statistical information. Double_t GetSumLog(Int_t i); sum of log . Un-needed. Bool_t IsFixed(Int_t ipar) const; query if parameter ipar is fixed. void PrintResults(Int_t level, Double_t amin) const; print the fit result; use PrintResults function in case of Minuit for old -style printing. void ReleaseParameter(Int_t ipar); release a fit parameter. void SetFitMethod(const char* name); set fit method (i.e. chi2 or likelihood); according to the method the appropriate FCN function will be created. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set (add) a new fit parameter passing initial value, step size (verr) and parametr limits; if vlow > vhigh the parameter is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:15199,error,errors,15199,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,1,['error'],['errors']
Availability,"idenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(); default constructor; fWS = new RooWorkspace(""FeldmanCousinsWS"");; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(). Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. RooAbsData* GetPointsToScan(). ConfidenceBelt* GetConfidenceBelt(); {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); {fAdaptiveSampling=flag;}. void SetNB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:9296,error,error,9296,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['error'],['error']
Availability,"ident=false);  Append object to directory. ;  ; void removeFromDir (TObject *obj);  Remove object from directory it was added to. ;  . Protected Attributes; Int_t _arrSize {0};  ; std::vector< std::vector< double > > _binbounds;  ! list of bin bounds per dimension ;  ; double * _binv {nullptr};  [_arrSize] Bin volume array ;  ; double _cache_sum {0.};  ! Cache for sum of entries ; ;  ; Int_t _cache_sum_valid {kInvalid};  ! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses. ;  ; ULong64_t _curIndex {std::numeric_limits<ULong64_t>::max()};  Current index. ;  ; double * _errHi {nullptr};  [_arrSize] High-side error on weight array ;  ; double * _errLo {nullptr};  [_arrSize] Low-side error on weight array ;  ; std::vector< Int_t > _idxMult;  ; std::vector< std::unique_ptr< const RooAbsBinning > > _lvbins;  ! List of used binnings associated with lvalues ;  ; std::vector< RooAbsLValue * > _lvvars;  ! List of observables casted as RooAbsLValue ;  ; std::unordered_map< int, std::vector< double > > _pbinvCache;  ! Cache for arrays of partial bin volumes ;  ; double * _sumw2 {nullptr};  [_arrSize] Sum of weights^2 ;  ; double * _wgt {nullptr};  [_arrSize] Weight array ;  ;  Protected Attributes inherited from RooAbsData; RooArgSet _cachedVars;  ! External variables cached with this data set ;  ; std::unique_ptr< RooAbsDataStore > _dstore;  Data storage implementation. ;  ; std::unique_ptr< RooArgSet > _globalObservables;  Snapshot of global observables. ;  ; const TNamed * _namePtr = nullptr;  ! De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; std::map< std::string, RooAbsData * > _ownedComponents;  Owned external components. ;  ; RooArgSet _vars;  Dimensions of this data set. ;  ; StorageType storageType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from RooDirItem; TDirectory * _dir {nullptr};  ! Associated directory ;  . Private Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:38742,error,error,38742,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,2,['error'],['error']
Availability,"identifies a file as a ROOT file. Because of this identifier, ROOT is not dependent on the “.root” extension. It is still a good idea to use the extension, just for us to recognize them easier. The nfree and value is the number of free records. This variable along with FNBytesFree keeps track of the free space in terms of records and bytes. This count also includes the deleted records, which are available again.; 11.1.2 The Top Directory Description; The 84 bytes after the file header contain the top directory description, including the name, the date and time it was created, and the date and time of the last modification.; 20010404/092347 At:64 N=84 TFile; 11.1.3 The Histogram Records; What follows are the 15 histograms, in records of variable length.; 20010404/092347 At:148 N=380 TH1F CX = 2.49; 20010404/092347 At:528 N=377 TH1F CX = 2.51; The first 4 bytes of each record is an integer holding the number of bytes in this record. A negative number flags the record as deleted, and makes the space available for recycling in the next writing. The rest of bytes in the header contain all the information to identify uniquely a data block on the file. It is followed by the object data.; The next table explains the values in each individual record. If the key is located past the 32 bit file limit (> 2 GB) then some fields will be 8 bytes instead of 4 bytes (values between the brackets):. Byte; Value Name; Description. 1 -> 4; Nbytes; Length of compressed object (in bytes). 5 -> 6; Version; TKey version identifier. 7 -> 10; ObjLen; Length of uncompressed object. 11 -> 14; Datime; Date and time when object was written to file. 15 -> 16; KeyLen; Length of the key structure (in bytes). 17 -> 18; Cycle; Cycle of key. 19 -> 22 [19->26]; SeekKey; Pointer to record itself (consistency check). 23 -> 26 [27->34]; SeekPdir; Pointer to directory header. 27 -> 27 [35->35]; lname; Number of bytes in the class name. 28 -> … [36->..; .] | ClassName; | Object Class Name. … -> …; | lname; |",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:434579,avail,available,434579,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"ider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TStringBasic string class.Definition TString.h:139; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::Dataconst char * Data() constDefinition TString.h:376; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::UnixPathNamevirtual const char * UnixPathName(const char *unixpathname)Convert from a local pathname to a Unix pathname.Definition TSystem.cxx:1063; TSystem::GetErrorvirtual const char * GetError()Return system error string.Definition TSystem.cxx:254; TTVLVContainerThis class represent the list view container for the TreeView class.Definition TTVLVContainer.h:110; TTVLVContainer::SelectItemvoid SelectItem(const char *name)Select an item.Definition TTVLVContainer.cxx:626; TTVLVContainer::SetViewervoid SetViewer(TTreeViewer *viewer)Definition TTVLVContainer.h:135; TTVLVContainer::ExpressionListTList * ExpressionList()Return the list of user-defined expressions.Definition TTVLVContainer.cxx:361; TTVLVContainer::Cutconst char * Cut()Return the cut entry.Definition TTVLVContainer.cxx:334; TTVLVContainer::Ezconst char * Ez()Return the expression on Z.Definition TTVLVContainer.cxx:408; TTVLVContainer::Eyconst char * Ey()Return the expression on Y.Definition TTVLVContainer.cxx:394; TTVLVContainer::ScanListconst char * ScanList()Return the cut entry.Definition TTVLVContainer.cxx:422; TTVLVContainer::AddThisItemvirtual void AddThisItem(TTVLVEntry *item)Definition TTVLVConta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:135528,error,error,135528,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['error'],['error']
Availability,"ides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it is possible to exploit all the available CPUs by using PROOF-Lite. N.B. PROOF-Lite doesn't work on Windows yet and it requires to use a selector composed of a source file and a header file. You can download both files from there: ProofEventSelector.h ProofEventSelector.C or on the linux terminal. wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.C; wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.h. Then you can simply use it like this:; TProof::Open("""");; // create a TChain instead of a TTree; TChain *chain = new TChain(""EventTree"", ""Event Data Chain"");; // add our file; chain->Add(""http://root.cern/files/introtutorials/eventdata.root"");; // tell the chain that we want to use PROOF; chain->SetProof();; // run the selector; chain->Process(""ProofEventSelector.C+"");. For the functions used, see the documentation of the TChain constructor and TChain::Add().; You need to register the histogram in your selector's output",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:2031,avail,available,2031,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['avail'],['available']
Availability,"idevirtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provoke the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implements TVirtualStreamerInfo.; Definition at line 5768 of file TStreamerInfo.cxx. ◆ GenerateInfoForPair() [2/2]. TVirtualStreamerInfo * TStreamerInfo::GenerateInfoForPair ; (; const std::string & ; pairclassname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). overridevirtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provokes the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implements TVirtualStreamerInfo.; Definition at line 5837 of file TStreamerInfo.cxx. ◆ GenExplicitClassStreamer(). TClassStreamer * TStreamerInfo::GenExplicitClassStreamer ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). overridevirtual . Generate class streamer from static functions. ; Implements TVirtualStreamerInfo.; Definition at line 5685 of file TStreamerInfo.cxx. ◆ GenExplicitProxy(). TVirtualCollectionProxy * TStreamerInfo::GenExplicitProxy ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). overridevirtual . Generate proxy from static functions. ; Implements TVirtualStreamerInfo.; Definition at line 5676 of file TStreamerInfo.cxx. ◆ GetActualClass(). TClass * TStreamerInfo::GetActualClass ; (; const void * ; obj); const. overridevirtual . Assuming that obj points to (the part of) an object that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:43111,avail,available,43111,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['avail'],['available']
Availability,"idevirtual . ReturnsTClass describing current object ; Reimplemented from TH3D.; Definition at line 150 of file TProfile3D.h. ◆ LabelsDeflate(). void TProfile3D::LabelsDeflate ; (; Option_t * ; axis = ""X""). overridevirtual . Reduce the number of bins for this axis to the number of bins having a label. ; Reimplemented from TH1.; Definition at line 847 of file TProfile3D.cxx. ◆ LabelsInflate(). void TProfile3D::LabelsInflate ; (; Option_t * ; ax = ""X""). overridevirtual . Double the number of bins for axis. ; Refill histogram This function is called by TAxis::FindBin(const char *label) ; Reimplemented from TH1.; Definition at line 857 of file TProfile3D.cxx. ◆ LabelsOption(). void TProfile3D::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; axis = ""X"" . ). overridevirtual . Set option(s) to draw axis with labels. ; option might have the following values:. ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted) . Reimplemented from TH1.; Definition at line 875 of file TProfile3D.cxx. ◆ Merge(). Long64_t TProfile3D::Merge ; (; TCollection * ; li). overridevirtual . Merge all histograms in the collection in this histogram. ; This function computes the min/max for the axes, compute a new number of bins, if necessary, add bin contents, errors and statistics. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; IMPORTANT remark. The 2 axis x and y may have different number of bins and different limits, BUT the largest bin width must be a multiple of the smallest bin width and the upper limit must also be a multiple of the bin width. ; Reimplemented from TH1.; Definition at line 894 of file TProfile3D.cxx. ◆ Multiply() [1/3]. Bool_t TProfile3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:93041,down,down,93041,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['down'],['down']
Availability,"idges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Float_t* amplitudeErrors, Float_t* amplitudeErrorsX1, Float_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Float_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Float_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:70301,error,error,70301,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,12,['error'],['error']
Availability,"idity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSocket.html:13370,error,error,13370,root/html534/TSocket.html,https://root.cern,https://root.cern/root/html534/TSocket.html,6,['error'],['error']
Availability,"idle status. ; Definition at line 6827 of file TProofServ.cxx. ◆ SetLastEntry(). void TProofServ::SetLastEntry ; (; Long64_t ; lastentry). static . Set the last entry before exception. ; Definition at line 6912 of file TProofServ.cxx. ◆ SetLastMsg(). void TProofServ::SetLastMsg ; (; const char * ; lastmsg). static . Set the message to be sent back in case of exceptions. ; Definition at line 6904 of file TProofServ.cxx. ◆ SetQueryRunning(). void TProofServ::SetQueryRunning ; (; TProofQueryResult * ; pq). private . Set query in running state. ; Definition at line 3564 of file TProofServ.cxx. ◆ Setup(). Int_t TProofServ::Setup ; (; ). protectedvirtual . Print the ProofServ logo on standard output. ; Return 0 on success, -1 on failure ; Reimplemented in TProofServLite.; Definition at line 2803 of file TProofServ.cxx. ◆ SetupCommon(). Int_t TProofServ::SetupCommon ; (; ). protected . Common part (between TProofServ and TXProofServ) of the setup phase. ; Return 0 on success, -1 on error ; Definition at line 2953 of file TProofServ.cxx. ◆ Streamer(). void TProofServ::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TApplication.; Reimplemented in TProofServLite. ◆ StreamerNVirtual(). void TProofServ::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file TProofServ.h. ◆ Terminate(). void TProofServ::Terminate ; (; Int_t ; status). overridevirtual . Terminate the proof server. ; Reimplemented from TApplication.; Reimplemented in TProofServLite.; Definition at line 3369 of file TProofServ.cxx. ◆ This(). TProofServ * TProofServ::This ; (; ). static . Static function returning pointer to global object gProofServ. ; Mainly for use via CINT, where the gProofServ symbol might be deleted from the symbol table. ; Definition at line 3483 of file TProofServ.cxx. ◆ TruncateLogFile(). void TProofServ::TruncateLogFile ; (; ). Truncate the log file to the 80% of the required max size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:55378,error,error,55378,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['error'],['error']
Availability,"idth of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e,xc (bin content, error, x of center of bin); -2D : bc,e,xc,yc; -3D : bc,e,xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. TFumili(Int_t maxpar = 25); TF1 *fTFNF1; //Pointer to theoretical function; void (*fFCN) (Int_t &, Double_t *, Double_t &f, Double_t *, Int_t);; //wrapper function to calculate functional value, gradients and Z-matrix; Double_t (*fTFN)(Double_t *, Double_t *, Double_t*); // Wrapper function for TFN. Double_t* GetPL0() const; { return fPL0;}. Double_t* GetZ() const; { return fZ;}. void SetParNumber(Int_t ParNum); { fNpar = ParNum;}. » Last changed: root/fumili:$Id: TFumili.h 40814 2011-09-06 13:55:49Z moneta $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFumili.html:24483,error,error,24483,root/html532/TFumili.html,https://root.cern,https://root.cern/root/html532/TFumili.html,2,['error'],['error']
Availability,"idthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame|kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGScrollBar.h 38845 2011-04-14 12:47:50Z bellenot $ » Last generated: 2011-07-04 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGScrollBarElement.html:18264,down,down,18264,root/html530/TGScrollBarElement.html,https://root.cern,https://root.cern/root/html530/TGScrollBarElement.html,1,['down'],['down']
Availability,"idthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame|kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGScrollBar.h 38845 2011-04-14 12:47:50Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGScrollBarElement.html:18264,down,down,18264,root/html532/TGScrollBarElement.html,https://root.cern,https://root.cern/root/html532/TGScrollBarElement.html,2,['down'],['down']
Availability,"id Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a sin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4732,error,errors,4732,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['errors']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMatrixLayout.html:8963,error,error,8963,doc/master/classTGMatrixLayout.html,https://root.cern,https://root.cern/doc/master/classTGMatrixLayout.html,6,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGRowLayout; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColumnLayout.html:9268,error,error,9268,doc/master/classTGColumnLayout.html,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html,1,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGTileLayout; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListDetailsLayout.html:8729,error,error,8729,doc/master/classTGListDetailsLayout.html,https://root.cern,https://root.cern/doc/master/classTGListDetailsLayout.html,2,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGVerticalLayout; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontalLayout.html:8627,error,error,8627,doc/master/classTGHorizontalLayout.html,https://root.cern,https://root.cern/doc/master/classTGHorizontalLayout.html,2,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoBoolNode; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:10480,error,error,10480,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,3,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoPatternFinder; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylPhi.html:10112,error,error,10112,doc/master/classTGeoPatternCylPhi.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html,12,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:11264,error,error,11264,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,2,['error'],['error']
Availability,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphEdge.html:8138,error,error,8138,doc/master/classTGraphEdge.html,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html,2,['error'],['error']
Availability,"id ResetProgressDialogStatus ();  ; Int_t Retrieve (const char *queryref, const char *path=0);  Send retrieve request for the query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (const char *url);  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt);  Set draw feedback option. ;  ; void SetInputDataFile (const char *datafile);  Set the file to be used to optimally distribute the input data objects. ;  ; void SetLogLevel (Int_t level, UInt_t mask=TProofDebug::kAll);  Set server logging level. ;  ; void SetManager (TProofMgr *mgr);  Set manager and schedule its destruction after this for clean operations. ;  ; void SetMaxDrawQueries (Int_t max);  Set max number of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set an input list parameter. ;  ; void SetPerfTree (const char *pf=""perftree.root"", Bool_t withWrks=kFALSE);  Enable/Disable saving of the performance tree. ;  ; void SetPrintProgress (PrintProgress_t pp);  ; void SetProgre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:16974,mask,mask,16974,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['mask'],['mask']
Availability,"id SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:14121,error,error,14121,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,2,['error'],"['error', 'errors']"
Availability,"id Warning (const char *location, const char *msgfmt,...);  Use this function in warning situations. ;  . Variables; Int_t gErrorAbortLevel;  ; Int_t gErrorIgnoreLevel;  Error handling routines. ;  ; Bool_t gPrintViaErrorHandler;  ; const char * kAssertMsg;  ; constexpr Int_t kBreak = 4000;  ; const char * kCheckMsg;  ; constexpr Int_t kError = 3000;  ; constexpr Int_t kFatal = 6000;  ; constexpr Int_t kInfo = 1000;  ; constexpr Int_t kPrint = 0;  ; constexpr Int_t kSysError = 5000;  ; constexpr Int_t kUnset = -1;  ; constexpr Int_t kWarning = 2000;  . Macro Definition Documentation. ◆ R__ASSERT. #define R__ASSERT; (;  ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Fatal("""", kAssertMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); _QUOTE_#define _QUOTE_(name)Definition RConfig.hxx:446; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; e#define e(i)Definition RSha256.hxx:103; kAssertMsgconst char * kAssertMsgDefinition TError.cxx:35. Checks condition e and reports a fatal error if it's false. ; Warning; this check is NOT stripped in release mode, so it should not be used for hot paths. For those cases, prefer a regular assert();; depending on gErrorIgnoreLevel, this might not terminate the program, . See alsoFatal. ; Definition at line 125 of file TError.h. ◆ R__CHECK. #define R__CHECK; (;  ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Warning("""", kCheckMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); kCheckMsgconst char * kCheckMsgDefinition TError.cxx:36. Checks condition e and reports a warning message if it's false. ; Warningthis check is NOT stripped in release mode, so it should not be used for hot paths. ; Definition at line 134 of file TError.h. Typedef Documentation. ◆ ErrorHandlerFunc_t. typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg). Definition at line 71 of file TError.h. Function Documentation. ◆ AbstractMethod(). void AbstractMethod ; (; const char * ; method). This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:4224,error,error,4224,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"id Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::vector< size_t > GetDataFromList (PyObject *listObject);  Utility function which retrieves and returns the values of the List object as a vector of size_t. ;  ; static std::vector< size_t > GetDataFromTuple (PyObject *tupleObject);  Utility function which retrieves and returns the values of the Tuple object as a vector of size_t. ;  ; static PyObject * GetValueFromDict (PyObject *dict, const char *key);  Utility function which checks if a given key is present in a Python dictionary object and returns the associated value or throws runtime error. ;  ; static void PyFinalize ();  ; static void PyInitialize ();  Initialize Python interpreter. ;  ; static int PyIsInitialized ();  Check Python interpreter initialization status. ;  ; static void PyRunString (TString code, PyObject *globalNS, PyObject *localNS);  Execute Python code from string. ;  ; static const char * PyStringAsString (PyObject *string);  Returns const char* from Python string in PyObject. ;  ; static void Serialize (TString file, PyObject *classifier);  Serialize Python object. ;  ; static Int_t UnSerialize (TString file, PyObject **obj);  Unserialize Python object. ;  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:21989,error,error,21989,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['error'],['error']
Availability,"id registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _gamma;  ; RooListProxy _nominal;  ; bool _relParam;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:67757,error,errors,67757,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['error'],['errors']
Availability,"id registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const ROOT::Math::IBaseFunctionOneDim * func;  ; RooRealProxy var;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:67309,error,errors,67309,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['error'],['errors']
Availability,"ie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPackMgr (const char *dir, const char *key=""L0"");  Create a PROOF package manager. ;  ;  ~TPackMgr () override;  Destroy a TPackMgr instance. ;  ; Int_t Build (const char *pack, Int_t opt=TPackMgr::kCheckROOT);  Method to build a package. ;  ; Int_t Clean (const char *pack);  Clean dir for package 'pack' Return -1 in case of error, 0 otherwise. ;  ; const char * GetDir () const;  ; Int_t GetDownloadDir (TString &dldir);  Method to get the download dir; create if not existing Return -1 in case of error (not found; not created), 0 otherwise. ;  ; void GetEnabledPackages (TString &packlist);  Method to get a semi-colon separated list with the names of the enabled packages. ;  ; TList * GetList () const;  Get list of available packages Returns a pointer to a TList object, transferring ownership to the caller. ;  ; TList * GetListOfEnabled () const;  Get list of enabled packages Returns a pointer to a TList object, transferring ownership to the caller. ;  ; TLockPath * GetLock ();  ; TMD5 * GetMD5 (const char *pack);  Get MD5 checksum of the PAR file corresponding to given package Returns a pointer to a TMD5 object, transferring ownership to the caller. ;  ; const char * GetName () const override;  Returns name of object. ;  ; Int_t GetPackDir (const char *pack, TString &pdir);  Method to get the path of the dir for package 'pack'. ;  ; Int_t GetParPath (const char *pack, TString &path);  Method to get the path of the PAR file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:1774,down,download,1774,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,2,"['down', 'error']","['download', 'error']"
Availability,"ie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a point is in the phi range (phi1, phi2) [degrees]. Bool_t IsCrossingSemiplane(Double_t* point, Double_t* dir, Double_t cphi, Double_t sphi, Double_t& snext, Double_t& rxy); Compute distance from POINT to semiplane defined by PHI angle along DIR. Computes; also radius at crossing point. This might be negative in case the crossing is; on the other side of the semiplane. Bool_t IsSameWithinTolerance(Double_t a, Double_t b); Check if two numbers differ with less than a tolerance. Bool_t IsSegCrossing(Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShape.html:16613,error,error,16613,root/html530/TGeoShape.html,https://root.cern,https://root.cern/root/html530/TGeoShape.html,3,['error'],['error']
Availability,"ie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, const Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(const Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a point is in the phi range (phi1, phi2) [degrees]. Bool_t IsCrossingSemiplane(const Double_t* point, const Double_t* dir, Double_t cphi, Double_t sphi, Double_t& snext, Double_t& rxy); Compute distance from POINT to semiplane defined by PHI angle along DIR. Computes; also radius at crossing point. This might be negative in case the crossing is; on the other side of the semiplane. Bool_t IsSameWithinTolerance(Double_t a, Double_t b); Check if two numbers differ with less than a tolerance. Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:17398,error,error,17398,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,2,['error'],['error']
Availability,"ied by name or ordinal position in varList. ; [in]varListList of variables to be passed to the formula. ; [in]checkVariablesUnused parameter. . Definition at line 194 of file RooFormula.cxx. ◆ RooFormula() [2/2]. RooFormula::RooFormula ; (; const RooFormula & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 205 of file RooFormula.cxx. Member Function Documentation. ◆ actualDependents(). RooArgSet RooFormula::actualDependents ; (; ); const. inline . Return list of arguments which are used in the formula. ; Definition at line 39 of file RooFormula.h. ◆ changeDependents(). bool RooFormula::changeDependents ; (; const RooAbsCollection & ; newDeps, . bool ; mustReplaceAll, . bool ; nameChange . ). Change used variables to those with the same name in given list. ; Parameters. [in]newDepsNew dependents to replace the old ones. ; [in]mustReplaceAllWill yield an error if one dependent does not have a replacement. ; [in]nameChangePassed down to RooAbsArg::findNewServer(const RooAbsCollection&, bool) const. . Definition at line 344 of file RooFormula.cxx. ◆ Clone(). TObject * RooFormula::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 32 of file RooFormula.h. ◆ doEval(). void RooFormula::doEval ; (; RooFit::EvalContext & ; ctx); const. Definition at line 407 of file RooFormula.cxx. ◆ dump(). void RooFormula::dump ; (; ); const. DEBUG: Dump state information. ; Definition at line 333 of file RooFormula.cxx. ◆ eval(). double RooFormula::ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:18749,down,down,18749,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['down'],['down']
Availability,"ied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_nBins; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooParametricStepFunction.html:42776,error,errors,42776,root/html602/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html602/RooParametricStepFunction.html,4,['error'],['errors']
Availability,"ieldBase::Create(fieldName, typeName);; 89 model->AddField(field.Unwrap());; 90 }; 91 return Create(std::move(model), std::move(sink), options);; 92}; 93 ; 94std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 95ROOT::Experimental::RNTupleWriter::Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName, TFile &file,; 96 const RNTupleWriteOptions &options); 97{; 98 auto sink = std::make_unique<Internal::RPageSinkFile>(ntupleName, file, options);; 99 return Create(std::move(model), std::move(sink), options);; 100}; 101 ; 102void ROOT::Experimental::RNTupleWriter::CommitClusterGroup(); 103{; 104 if (GetNEntries() == fLastCommittedClusterGroup); 105 return;; 106 fFillContext.fSink->CommitClusterGroup();; 107 fLastCommittedClusterGroup = GetNEntries();; 108}; 109 ; 110std::unique_ptr<ROOT::Experimental::RNTupleWriter>; 111ROOT::Experimental::Internal::CreateRNTupleWriter(std::unique_ptr<ROOT::Experimental::RNTupleModel> model,; 112 std::unique_ptr<ROOT::Experimental::Internal::RPageSink> sink); 113{; 114 return std::unique_ptr<ROOT::Experimental::RNTupleWriter>(; 115 new ROOT::Experimental::RNTupleWriter(std::move(model), std::move(sink)));; 116}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RLogger.hxx; R__LOG_ERROR#define R__LOG_ERROR(...)Definition RLogger.hxx:362; RNTupleFillContext.hxx; RNTupleImtTaskScheduler.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleWriteOptions.hxx; RNTupleWriter.hxx; RPageSinkBuf.hxx; RPageStorageFile.hxx; RPageStorage.hxx; TROOT.h; ROOT::Experimental::Detail::RNTupleMetrics::ObserveMetricsvoid ObserveMetrics(RNTupleMetrics &observee)Definition RNTupleMetrics.cxx:90; ROOT::Experimental::Internal::RPagePersistentSink::Createstatic std::unique_ptr< RPageSink > Create(std::string_view ntupleName, std::string_view location, const RNTupleWriteOptions &options=RNTupleWriteOptions())Guess the concrete derived page sour",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:5157,error,error,5157,doc/master/RNTupleWriter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html,1,['error'],['error']
Availability,"ields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19475,error,error,19475,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,4,['error'],['error']
Availability,"ields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:18986,error,error,18986,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,2,['error'],['error']
Availability,"iency.cxx:3873; TEfficiency::CheckConsistencystatic Bool_t CheckConsistency(const TH1 &pass, const TH1 &total, Option_t *opt="""")Checks the consistence of the given histograms.Definition TEfficiency.cxx:1576; TEfficiency::ClopperPearsonstatic Double_t ClopperPearson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)Calculates the boundaries for the frequentist Clopper-Pearson interval.Definition TEfficiency.cxx:2016; TF11-Dim function classDefinition TF1.h:233; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphAsymmErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphAsymmErrors.h:74; TGraphAsymmErrors::SetPointEYlowvirtual void SetPointEYlow(Int_t i, Double_t eyl)Set EYlow for point i.Definition TGraphAsymmErrors.cxx:1376; TGraphAsymmErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphAsymmErrors.h:30; TGraphAsymmErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideReturns the combined error along Y at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1137; TGraphAsymmErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::Classstatic TClass * Class(); TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:58885,error,error,58885,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['error']
Availability,"iend dataset to this set. Only possible if the TDSet type is; a TTree or derived class. The friendset will be owned by this class; and deleted in its destructor. void Reset(); Reset or initialize access to the elements. Long64_t GetEntries(Bool_t isTree, const char* filename, const char* path, TString& objname); Returns number of entries in tree or objects in file. Returns -1 in; case of error. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success.; This function accepts a TCut objects as argument.; Use the operator+ to concatenate cuts.; Example:; dset.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success.; For more see TTree::Draw(). void StartViewer(); Start the TTreeViewer on this TTree. TTree* GetTreeHeader(TProof* proof); Returns a tree header containing the branches' structure of the dataset. Bool_t ElementsValid(); Check if all elements are valid. Int_t Remove(TDSetElement* elem, Bool_t deleteElem = kTRUE); Remove TDSetElement 'elem' from the list.; Return 0 on success, -1 if the element is not in the list. void Validate(); Validate the TDSet by opening files. void Lookup(Bool_t removeMissing = kFALSE, TList** missingFiles = 0); Resolve the end-point URL for the current elements of this data set; If the removeMissing option is set to kTRUE, remove the TDSetElements; that can not be located.; The method returns the list of removed TDSetElements in *listOfMissingFiles; if the latter is defined (the list must be created outside). void SetLookedUp(); Flag all the elements as looked-up, so to avoid opening the files; if the functionality is not s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:13938,error,error,13938,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,10,['error'],['error']
Availability,"iendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); const char*GetDataSet() const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); TObject*GetEntryList() const; TFileInfo*GetFileInfo(const char* type = ""TTree""); const char*GetFileName() const; Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; TList*GetListOfAssocObjs() const; virtual TList*GetListOfFriends() const; Float_tGetMaxProcTime() const; const char*GetMsd() const; virtual const char*TNamed::GetName() const; Long64_tGetNum() const; virtual char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSetElement.html:2540,error,error,2540,root/html534/TDSetElement.html,https://root.cern,https://root.cern/root/html534/TDSetElement.html,6,['error'],['error']
Availability,"iendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); const char*GetDataSet() const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); TObject*GetEntryList() const; TFileInfo*GetFileInfo(const char* type = ""TTree""); const char*GetFileName() const; Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; TList*GetListOfAssocObjs() const; virtual TList*GetListOfFriends() const; const char*GetMsd() const; virtual const char*TNamed::GetName() const; Long64_tGetNum() const; virtual char*TObject::GetObjectInfo(Int_t px,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSetElement.html:2540,error,error,2540,root/html528/TDSetElement.html,https://root.cern,https://root.cern/root/html528/TDSetElement.html,4,['error'],['error']
Availability,"ient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:37086,error,errors,37086,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,3,['error'],['errors']
Availability,"ient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on sucess and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColor.html:23385,error,error,23385,root/html528/TColor.html,https://root.cern,https://root.cern/root/html528/TColor.html,2,['error'],['error']
Availability,ients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNonCPEigenDecay.html:42988,error,errors,42988,root/html534/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html534/RooNonCPEigenDecay.html,2,['error'],['errors']
Availability,"ierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnStrategy. class ROOT::Minuit2::MnStrategy. API class for defining three levels of strategies: low (0), medium (1),; high (>=2);; acts on: Migrad (behavioural),; Minos (lowers strategy by 1 for Minos-own minimization),; Hesse (iterations),; Numerical2PDerivative (iterations). Function Members (Methods); public:. ~MnStrategy(); unsigned intGradientNCycles() const; doubleGradientStepTolerance() const; doubleGradientTolerance() const; doubleHessianG2Tolerance() const; unsigned intHessianGradientNCycles() const; unsigned intHessianNCycles() const; doubleHessianStepTolerance() const; boolIsHigh() const; boolIsLow() const; boolIsMedium() const; ROOT::Minuit2::MnStrategyMnStrategy(); ROOT::Minuit2::MnStrategyMnStrategy(unsigned int); ROOT::Minuit2::MnStrategyMnStrategy(const ROOT::Minuit2::MnStrategy&); ROOT::Minuit2::MnStrategy&operator=(const ROOT::Minuit2::MnStrategy&); voidSetGradientNCycles(unsigned int n); voidSetGradientStepTolerance(double stp); voidSetGradientTolerance(double toler); voidSetHessianG2Tolerance(double toler); voidSetHessianGradientNCycles(unsigned int n); voidSetHessianNCycles(unsigned int n); voidSetHessianStepTolerance(double stp); voidSetHighStrategy(); voidSetLowStrategy(); voidSetMediumStrategy(); voidSetStorageLevel(unsigned int level); intStorageLevel() const; unsigned intStrategy() const. Data Members; private:. unsigned intfGradNCyc; doublefGradTlr; doublefGradTlrStp; unsigned intfHessGradNCyc; unsigned intfHessNCyc; doublefHessTlrG2; doublefHessTlrStp; intfStoreLevel; unsigned intfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnStrategy(); default strategy. explicit MnStrategy(unsigned int ); user defined strategy (0, 1, >=2). ~MnStrategy(); {}. unsigned int Strategy() const; {return fStrategy;}. unsigned int Gra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnStrategy.html:1248,toler,toler,1248,root/html534/ROOT__Minuit2__MnStrategy.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnStrategy.html,12,['toler'],['toler']
Availability,"ies - think; const std::type_info& ti = std::type_info::lookup(""MyClass"");; MyBase* ptr = ti.default_construct();; And Python is not appropriate for many use cases due to its lack of type safety and speed, and its lack of native binding to C++. Then which other language should we use?; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Hi Alex, . Hi Alex,; Very good points but let me try to defend python. I have found that a following approach (used by ATLAS that I also adopted in my private code) works fantastically well:; -- Use python to read configuration, find input files, etc;; -- Write performance critical code in C++;; -- Create C++ objects in python (relying on ROOT for dictionary support);; -- Pass configuration from python to C++;; -- Do calculations in C++;; -- Return results to python for processing, ploting, etc;; -- Run entire plot making code in python for stacking, labeling, etc.; Granted, this is probably a more complex approach than most of us in physics are willing to tolerate. I suspect that you do not have much choice since the user community wants CINT-like functionality from ROOT (and one feature of the ROOT project that makes it great is a full consideration of what experiments and users need for data taking and analysis).; Thanks for the interesting discussion! I have learned quite a bit about ROOT plans and it all seems very promising. Cheers!. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . Dependency on Python . In my experience, getting python scripts to work is a very unreliable affair. They almost always have dependencies on external packages and if you don't have EXACTLY the same version of python you only have about a 50% chance that anything you use will work. The language is simply not stable. C++ is bad enough. Scripting languages are much, much worse. The maintainers think the language is their playtoy and they take no responsibility to maintain backward compati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:18249,toler,tolerate,18249,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['toler'],['tolerate']
Availability,"ies . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on background sources, originating from the errors provided with the background histograms . (e)SubtractBackground GetEmatrixSysBackgroundScale()GetDeltaSysBackgroundScale() scale errors on background sources . (i)SetInput() GetEmatrixInput()n.a.statistical uncertainty of the input (the measurement) . (i)+(d)+(e)see aboveGetEmatrix()n.a. Partial sun of uncertainties: all sources which are propagated to the covariance before unfolding . (i)+(a)+(b)+(c)+(d)+(e)see aboveGetEmatrixTotal() n.a.All known error sources summed up . Note: (a), (b), (c) are propagated to the result AFTER unfolding, whereas the background errors (d) and (e) are added to the data errors BEFORE unfolding. For this reason the errors of type (d) a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:3297,error,error,3297,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['error']
Availability,"ies of a Profile2D histogram*-*-; *-* ===========================================. Double_t GetBinEffectiveEntries(Int_t bin); Return bin effective entries for a weighted filled Profile histogram.; In case of an unweighted profile, it is equivalent to the number of entries per bin; The effective entries is defined as the square of the sum of the weights divided by the; sum of the weights square.; TProfile::Sumw2() must be called before filling the profile with weights.; Only by calling this method the sum of the square of the weights per bin is stored. *-* =========================================. Double_t GetBinError(Int_t bin) const; *-*-*-*-*-*-*Return bin error of a Profile2D histogram*-*-*-*-*-*-*-*-*. Computing errors: A moving field. The computation of errors for a TProfile2D has evolved with the versions; of ROOT. The difficulty is in computing errors for bins with low statistics.; - prior to version 3.10, we had no special treatment of low statistic bins.; As a result, these bins had huge errors. The reason is that the; expression eprim2 is very close to 0 (rounding problems) or 0.; - The algorithm is modified/protected for the case; when a TProfile2D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile2D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2. If no axis-subrange is specified (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:36654,error,errors,36654,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,10,['error'],['errors']
Availability,"ies of a Profile3D histogram*-*-; *-* ===========================================. Double_t GetBinEffectiveEntries(Int_t bin); Return bin effective entries for a weighted filled Profile histogram.; In case of an unweighted profile, it is equivalent to the number of entries per bin; The effective entries is defined as the square of the sum of the weights divided by the; sum of the weights square.; TProfile::Sumw2() must be called before filling the profile with weights.; Only by calling this method the sum of the square of the weights per bin is stored. *-* =========================================. Double_t GetBinError(Int_t bin) const; *-*-*-*-*-*-*Return bin error of a Profile3D histogram*-*-*-*-*-*-*-*-*. Computing errors: A moving field. The computation of errors for a TProfile3D has evolved with the versions; of ROOT. The difficulty is in computing errors for bins with low statistics.; - prior to version 3.10, we had no special treatment of low statistic bins.; As a result, these bins had huge errors. The reason is that the; expression eprim2 is very close to 0 (rounding problems) or 0.; - The algorithm is modified/protected for the case; when a TProfile3D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile3D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:35696,error,errors,35696,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,10,['error'],['errors']
Availability,"ies, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature orig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:7172,avail,available,7172,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['avail'],['available']
Availability,"ies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooConstVar.h>. Inheritance diagram for RooConstVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooConstVar() [1/3]. RooConstVar::RooConstVar ; (; ). inline . Definition at line 26 of file RooConstVar.h. ◆ RooConstVar() [2/3]. RooConstVar::RooConstVar ; (; const char * ; name, . const char * ; title, . double ; value . ). Constructor with value. ; Definition at line 33 of file RooConstVar.cxx. ◆ RooConstVar() [3/3]. RooConstVar::RooConstVar ; (; const RooConstVar & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 45 of file RooConstVar.cxx. Member Function Documentation. ◆ changeVal(). void RooConstVar::changeVal ; (; double ; value). inline . Change the value of this constant. ; On purpose, this is not setVal, as this could be confused with the setVal that is available for variables. Constants, however, should remain mostly constant. This function is e.g. useful when reading the constant from a file. ; Definition at line 47 of file RooConstVar.h. ◆ Class(). static TClass * RooConstVar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooConstVar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooConstVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 59 of file RooConstVar.h. ◆ clone(). TObject * RooConstVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 29 of file RooConstVar.h. ◆ DeclFileName(). static const char * RooConstVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 59 of file RooConstVar.h. ◆ evaluate(). double RooConstVar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:60464,avail,available,60464,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['avail'],['available']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html:5119,toler,toler,5119,root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html,2,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html:4566,toler,toler,4566,root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html,2,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__ModularFunctionMinimizer.html:5119,toler,toler,5119,root/html604/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__ModularFunctionMinimizer.html,2,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id: ModularFunctionMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:4515,toler,toler,4515,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,1,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id: ModularFunctionMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__ModularFunctionMinimizer.html:4515,toler,toler,4515,root/html528/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__ModularFunctionMinimizer.html,1,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id: ModularFunctionMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__ModularFunctionMinimizer.html:4517,toler,toler,4517,root/html530/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__ModularFunctionMinimizer.html,1,['toler'],['toler']
Availability,"ies. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn&, const GradientCalculator&, const MinimumSeed&, const MnStrategy&, unsigned int, double). » Last changed: root/minuit2:$Id: ModularFunctionMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__ModularFunctionMinimizer.html:4517,toler,toler,4517,root/html532/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__ModularFunctionMinimizer.html,2,['toler'],['toler']
Availability,"ies. Return value is pointing to wfile for compatibility with Which(const char*,const char*,EAccessMode) version. ; Reimplemented from TSystem.; Definition at line 1927 of file TUnixSystem.cxx. ◆ FreeDirectory(). void TUnixSystem::FreeDirectory ; (; void * ; dirp). overridevirtual . Close a Unix file system directory. ; Reimplemented from TSystem.; Definition at line 1404 of file TUnixSystem.cxx. ◆ GetCpuInfo(). int TUnixSystem::GetCpuInfo ; (; CpuInfo_t * ; info, . Int_t ; sampleTime = 1000 . ); const. overridevirtual . Returns cpu load average and load info into the CpuInfo_t structure. ; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the interval over which the CPU load will be measured, in ms (default 1000). ; Reimplemented from TSystem.; Definition at line 5344 of file TUnixSystem.cxx. ◆ GetCryptoRandom(). Int_t TUnixSystem::GetCryptoRandom ; (; void * ; buf, . Int_t ; len . ). overridevirtual . Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ; Reimplemented from TSystem.; Definition at line 740 of file TUnixSystem.cxx. ◆ GetDirEntry(). const char * TUnixSystem::GetDirEntry ; (; void * ; dirp). overridevirtual . Get next Unix file system directory entry. Returns 0 if no more entries. ; Reimplemented from TSystem.; Definition at line 1419 of file TUnixSystem.cxx. ◆ GetDynamicPath(). const char * TUnixSystem::GetDynamicPath ; (; ). overridevirtual . Return the dynamic path (used to find shared libraries). ; Reimplemented from TSystem.; Definition at line 4738 of file TUnixSystem.cxx. ◆ GetEffectiveGid(). Int_t TUnixSystem::GetEffectiveGid ; (; ). overridevirtual . Returns the effective group id. ; The effective group id corresponds to the set id bit on the file being executed. ; Reimplemented from TSystem.; Definition at line 2045 of file TUnixSystem.cxx. ◆ GetEffectiveUid(). Int_t TUnixSystem::GetEffectiveUid ; (; ). overridevirtual . Returns the effectiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:48610,error,error,48610,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"iesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::IsEmptyBool_t IsEmpty() const overrideDefinition TObjArray.h:65; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::GetStringconst TString & GetString() constDefinition TObjString.h:46; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::IncreaseDirLevelstatic Int_t IncreaseDirLevel()Increase the indentation level for ls().Definition TROOT.cxx:2887; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TROOT::DecreaseDirLevelstatic Int_t DecreaseDirLevel()Decrease the indentation level for ls().Definition TROOT.cxx:2746; TStreamerElementDefinition TStreamerElement.h:32; TStreamerElement::GetClassTClass * GetClass() constDefinition TStreamerElement.h:108; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionProxy::GetPropertiesvirtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:31355,error,error,31355,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['error'],['error']
Availability,"ieved with the GetCoordinates method:; double d[3];; //fill d array with (x,y,z) components of v1; v1.GetCoordinates(d);; //fill d array with (r,eta,phi) components of r2; r2.GetCoordinates(d);; std::vector vc(3);; //fill std::vector with (x,y,z) components of v1; v1.GetCoordinates(vc.begin(),vc.end());; See the reference documentation of ROOT::Math::DisplacementVector3D for more details on all the coordinate accessors.; 13.12.2.3 Setter Methods; One can set only all the three coordinates via:; v1.SetCoordinates(c1,c2,c3); // (x,y,z) for a XYZVector; r2.SetCoordinates(c1,c2,c3); // r,theta,phi for a Polar3DVector; r2.SetXYZ(x,y,z); // 3 cartesian components for Polar3DVector; Single coordinate setter methods are available for the basic vector coordinates, like SetX() for a XYZVector or SetR() for a polar vector. Attempting to do a SetX() on a polar vector will not compile.; XYZVector v1;; v1.SetX(1); //OK setting x for a Cartesian vector; Polar3DVector v2;; v2.SetX(1); //ERROR: cannot set X for a Polar vector.; //Method will not compile; v2.SetR(1); //OK setting r for a Polar vector; In addition, there are setter methods from C arrays or iterator; double d[3] = {1.,2.,3.};; XYZVector v;; // set (x,y,z) components of v using values from d; v.SetCoordinates(d);; or, for example, from an std::vector using the iterator; std::vector w(3);; // set (x,y,z) components of v using values from w; v.SetCoordinates(w.begin(),w.end());; 13.12.2.4 Arithmetic Operations; The following operations are possible between vector classes, even of different coordinate system types: (v1,v2 are any type of ROOT::Math::DisplacementVector3D classes, v3 is the same type of v1; a is a scalar value); v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; 13.12.2.5 Comparison; For v1 and v2 of the same type (same coordinate system and same scalar type):; v1 == v2;; v1 != v2;; 13.12.2.6 Dot and Cross Product; We support the dot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:731299,ERROR,ERROR,731299,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['ERROR'],['ERROR']
Availability,"iew, ROOT::Internal::RDF::RVariationsWithReaders *>. private . Definition at line 69 of file RColumnRegister.hxx. Constructor & Destructor Documentation. ◆ RColumnRegister(). ROOT::Internal::RDF::RColumnRegister::RColumnRegister ; (; ROOT::Detail::RDF::RLoopManager * ; lm). explicit . Definition at line 25 of file RDFColumnRegister.cxx. Member Function Documentation. ◆ AddAlias(). void ROOT::Internal::RDF::RColumnRegister::AddAlias ; (; std::string_view ; alias, . std::string_view ; colName . ). Add a new alias to the ledger. ; Registers the strings alias, colName with the current RDataFrame, then uses references to those string to create the new pair for the collection of aliases of this node. ; Definition at line 194 of file RDFColumnRegister.cxx. ◆ AddDefine(). void ROOT::Internal::RDF::RColumnRegister::AddDefine ; (; std::shared_ptr< RDFDetail::RDefineBase > ; define). Add a new defined column. ; Registers the pair (columnName, columnReader) with the current RDataFrame, then keeps a reference to the inserted objects to keep track of the available columns for this node. Internally it recreates the collection with the new column, and swaps it with the old one. ; Definition at line 71 of file RDFColumnRegister.cxx. ◆ AddVariation(). void ROOT::Internal::RDF::RColumnRegister::AddVariation ; (; std::shared_ptr< RVariationBase > ; variation). Register a new systematic variation. ; Definition at line 96 of file RDFColumnRegister.cxx. ◆ BuildDefineNames(). std::vector< std::string_view > ROOT::Internal::RDF::RColumnRegister::BuildDefineNames ; (; ); const. Return the list of the names of defined columns (no aliases). ; Definition at line 39 of file RDFColumnRegister.cxx. ◆ BuildVariationsDescription(). ROOT::RDF::RVariationsDescription ROOT::Internal::RDF::RColumnRegister::BuildVariationsDescription ; (; ); const. Definition at line 179 of file RDFColumnRegister.cxx. ◆ FindVariationAndReaders(). RVariationsWithReaders * ROOT::Internal::RDF::RColumnRegister::FindVariatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:6790,avail,available,6790,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,1,['avail'],['available']
Availability,"if (b2) UpdateBinContent(i, c1 * b1 / (c2 * b2));; 3004 else UpdateBinContent(i, 0);; 3005 ; 3006 if (fSumw2.fN) {; 3007 if (b2 == 0) { fSumw2.fArray[i] = 0; continue; }; 3008 Double_t b1sq = b1 * b1; Double_t b2sq = b2 * b2;; 3009 Double_t c1sq = c1 * c1; Double_t c2sq = c2 * c2;; 3010 Double_t e1sq = h1->GetBinErrorSqUnchecked(i);; 3011 Double_t e2sq = h2->GetBinErrorSqUnchecked(i);; 3012 if (binomial) {; 3013 if (b1 != b2) {; 3014 // in the case of binomial statistics c1 and c2 must be 1 otherwise it does not make sense; 3015 // c1 and c2 are ignored; 3016 //fSumw2.fArray[bin] = TMath::Abs(w*(1-w)/(c2*b2));//this is the formula in Hbook/Hoper1; 3017 //fSumw2.fArray[bin] = TMath::Abs(w*(1-w)/b2); // old formula from G. Flucke; 3018 // formula which works also for weighted histogram (see http://root-forum.cern.ch/viewtopic.php?t=3753 ); 3019 fSumw2.fArray[i] = TMath::Abs( ( (1. - 2.* b1 / b2) * e1sq + b1sq * e2sq / b2sq ) / b2sq );; 3020 } else {; 3021 //in case b1=b2 error is zero; 3022 //use TGraphAsymmErrors::BayesDivide for getting the asymmetric error not equal to zero; 3023 fSumw2.fArray[i] = 0;; 3024 }; 3025 } else {; 3026 fSumw2.fArray[i] = c1sq * c2sq * (e1sq * b2sq + e2sq * b1sq) / (c2sq * c2sq * b2sq * b2sq);; 3027 }; 3028 }; 3029 }; 3030 ResetStats();; 3031 if (binomial); 3032 // in case of binomial division use denominator for number of entries; 3033 SetEntries ( h2->GetEntries() );; 3034 ; 3035 return kTRUE;; 3036}; 3037 ; 3038////////////////////////////////////////////////////////////////////////////////; 3039/// Draw this histogram with options.; 3040///; 3041/// Histograms are drawn via the THistPainter class. Each histogram has; 3042/// a pointer to its own painter (to be usable in a multithreaded program).; 3043/// The same histogram can be drawn with different options in different pads.; 3044/// When a histogram drawn in a pad is deleted, the histogram is; 3045/// automatically removed from the pad or pads where it was drawn.; 3046/// If a histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:120019,error,error,120019,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['error']
Availability,"if (dotpos != kNPOS) ++dotpos; else dotpos = 0;; 3626 dataName.Replace(dotpos,endpos-dotpos,subBranchElement->GetFullName());; 3627 }; 3628 TRealData* rd = pClass->GetRealData(dataName);; 3629 if (rd && (!rd->TestBit(TRealData::kTransient) || alternateElement)) {; 3630 // -- Data member exists in the dictionary meta info, get the offset.; 3631 // If we are using an alternateElement, it is the target of a rule; 3632 // and might be indeed transient.; 3633 offset = rd->GetThisOffset();; 3634 } else if (subBranchElement->TestBit(TStreamerElement::kWholeObject)) {; 3635 // We are a rule with no specific target, it applies to the whole; 3636 // object, let's set the offset to zero; 3637 offset = 0;; 3638 } else {; 3639 // -- No dictionary meta info for this data member, it must no; 3640 // longer exist; 3641 if (fEntries == 0) {; 3642 // ... unless we creating the branch in which case; 3643 // we have an internal error.; 3644 if (pClass->GetListOfRealData()->GetEntries() == 0) {; 3645 // We are probably missing the ShowMember, let's; 3646 // just issue an error.; 3647 Error(""InitializeOffsets"",; 3648 ""Could not find the real data member '%s' when constructing the branch '%s' [Likely missing ShowMember]."",; 3649 dataName.Data(),GetName());; 3650 } else if (subInfo && subInfo->GetClassVersion()!=subInfo->GetClass()->GetClassVersion()) {; 3651 // In the case where we are cloning a TTree that was created with an older version of the layout, we may not; 3652 // able to find all the members; 3653 Info(""InitializeOffsets"",; 3654 ""TTree created with an older schema, some data might not be copied in 'slow-cloning' mode; fast-cloning should have the correct result. '%s' is missing when constructing the branch '%s'. "",; 3655 dataName.Data(),GetName());; 3656 } else {; 3657 // Something really bad happen.; 3658 Fatal(""InitializeOffsets"",; 3659 ""Could not find the real data member '%s' when constructing the branch '%s' [Likely an internal error, please report to the developers]."",; 36",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:133377,error,error,133377,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"if (e2sq > 0 && cnt2 * cnt2 / e2sq < 10) n++;; 2474 }; 2475 }; 2476 }; 2477 if (m) {; 2478 igood += 1;; 2479 Info(""Chi2TestX"",""There is a bin in h1 with less than 10 effective events.\n"");; 2480 }; 2481 if (n) {; 2482 igood += 2;; 2483 Info(""Chi2TestX"",""There is a bin in h2 with less than 10 effective events.\n"");; 2484 }; 2485 Double_t prob = TMath::Prob(chi2, ndf);; 2486 return prob;; 2487 }; 2488 return 0;; 2489}; 2490////////////////////////////////////////////////////////////////////////////////; 2491/// Compute and return the chisquare of this histogram with respect to a function; 2492/// The chisquare is computed by weighting each histogram point by the bin error; 2493/// By default the full range of the histogram is used.; 2494/// Use option ""R"" for restricting the chisquare calculation to the given range of the function; 2495/// Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare); 2496/// Use option ""P"" for using the Pearson chisquare based on the expected bin errors; 2497 ; 2498Double_t TH1::Chisquare(TF1 * func, Option_t *option) const; 2499{; 2500 if (!func) {; 2501 Error(""Chisquare"",""Function pointer is Null - return -1"");; 2502 return -1;; 2503 }; 2504 ; 2505 TString opt(option); opt.ToUpper();; 2506 bool useRange = opt.Contains(""R"");; 2507 ROOT::Fit::EChisquareType type = ROOT::Fit::EChisquareType::kNeyman; // default chi2 with observed error; 2508 if (opt.Contains(""L"")) type = ROOT::Fit::EChisquareType::kPLikeRatio;; 2509 else if (opt.Contains(""P"")) type = ROOT::Fit::EChisquareType::kPearson;; 2510 ; 2511 return ROOT::Fit::Chisquare(*this, *func, useRange, type);; 2512}; 2513 ; 2514////////////////////////////////////////////////////////////////////////////////; 2515/// Remove all the content from the underflow and overflow bins, without changing the number of entries; 2516/// After calling this method, every undeflow and overflow bins will have content 0.0; 2517/// The Sumw2 is also cleared, since there is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:99013,error,errors,99013,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"if (ret != 1) {; 15735 err = SSL_get_error(conn->ssl, ret);; 15736 if ((err == SSL_ERROR_WANT_CONNECT); 15737 || (err == SSL_ERROR_WANT_ACCEPT); 15738 || (err == SSL_ERROR_WANT_READ) || (err == SSL_ERROR_WANT_WRITE); 15739 || (err == SSL_ERROR_WANT_X509_LOOKUP)) {; 15740 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 15741 /* Don't wait if the server is going to be stopped. */; 15742 break;; 15743 }; 15744 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15745 /* Simply retry the function call. */; 15746 mg_sleep(50);; 15747 } else {; 15748 /* Need to retry the function call ""later"".; 15749 * See https://linux.die.net/man/3/ssl_get_error; 15750 * This is typical for non-blocking sockets. */; 15751 struct mg_pollfd pfd;; 15752 int pollres;; 15753 pfd.fd = conn->client.sock;; 15754 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15755 || (err == SSL_ERROR_WANT_WRITE)); 15756 ? POLLOUT; 15757 : POLLIN;; 15758 pollres =; 15759 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15760 if (pollres < 0) {; 15761 /* Break if error occured (-1); 15762 * or server shutdown (-2) */; 15763 break;; 15764 }; 15765 }; 15766 ; 15767 } else if (err == SSL_ERROR_SYSCALL) {; 15768 /* This is an IO error. Look at errno. */; 15769 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15770 break;; 15771 ; 15772 } else {; 15773 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15774 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15775 break;; 15776 }; 15777 ; 15778 } else {; 15779 /* success */; 15780 break;; 15781 }; 15782 }; 15783 ERR_clear_error();; 15784 ; 15785 if (ret != 1) {; 15786 SSL_free(conn->ssl);; 15787 conn->ssl = NULL;; 15788 OPENSSL_REMOVE_THREAD_STATE();; 15789 return 0;; 15790 }; 15791 ; 15792 return 1;; 15793}; 15794 ; 15795 ; 15796/* Return OpenSSL error message (from CRYPTO lib) */; 15797static const char *; 15798ssl_error(void); 15799{; 15800 unsigned long err;; 15801 err = ERR_get_error();; 15802 return ((err == 0) ? """" : ERR_error_string(err, NUL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:466070,error,error,466070,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"if (ret != 1) {; 15736 err = SSL_get_error(conn->ssl, ret);; 15737 if ((err == SSL_ERROR_WANT_CONNECT); 15738 || (err == SSL_ERROR_WANT_ACCEPT); 15739 || (err == SSL_ERROR_WANT_READ) || (err == SSL_ERROR_WANT_WRITE); 15740 || (err == SSL_ERROR_WANT_X509_LOOKUP)) {; 15741 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 15742 /* Don't wait if the server is going to be stopped. */; 15743 break;; 15744 }; 15745 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15746 /* Simply retry the function call. */; 15747 mg_sleep(50);; 15748 } else {; 15749 /* Need to retry the function call ""later"".; 15750 * See https://linux.die.net/man/3/ssl_get_error; 15751 * This is typical for non-blocking sockets. */; 15752 struct mg_pollfd pfd;; 15753 int pollres;; 15754 pfd.fd = conn->client.sock;; 15755 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15756 || (err == SSL_ERROR_WANT_WRITE)); 15757 ? POLLOUT; 15758 : POLLIN;; 15759 pollres =; 15760 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15761 if (pollres < 0) {; 15762 /* Break if error occured (-1); 15763 * or server shutdown (-2) */; 15764 break;; 15765 }; 15766 }; 15767 ; 15768 } else if (err == SSL_ERROR_SYSCALL) {; 15769 /* This is an IO error. Look at errno. */; 15770 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15771 break;; 15772 ; 15773 } else {; 15774 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15775 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15776 break;; 15777 }; 15778 ; 15779 } else {; 15780 /* success */; 15781 break;; 15782 }; 15783 }; 15784 ERR_clear_error();; 15785 ; 15786 if (ret != 1) {; 15787 SSL_free(conn->ssl);; 15788 conn->ssl = NULL;; 15789 OPENSSL_REMOVE_THREAD_STATE();; 15790 return 0;; 15791 }; 15792 ; 15793 return 1;; 15794}; 15795 ; 15796 ; 15797/* Return OpenSSL error message (from CRYPTO lib) */; 15798static const char *; 15799ssl_error(void); 15800{; 15801 unsigned long err;; 15802 err = ERR_get_error();; 15803 return ((err == 0) ? """" : ERR_error_string(err, NUL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:466103,error,error,466103,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['error'],['error']
Availability,"if ROOT.gSystem.GetFromPipe(""root-config --has-tmva-pymva"") == ""yes"":; TMVA.PyMethodBase.PyInitialize(); else:; useKeras = False # cannot use Keras if PYMVA is not available; ; if useKeras:; try:; import tensorflow; except:; ROOT.Warning(""TMVA_Higgs_Classification"", ""Skip using Keras since tensorflow is not available""); useKeras = False; ; outputFile = TFile.Open(""Higgs_ClassificationOutput.root"", ""RECREATE""); factory = TMVA.Factory(; ""TMVA_Higgs_Classification"", outputFile, V=False, ROC=True, Silent=False, Color=True, AnalysisType=""Classification""; ); ; ; ## Setup Dataset(s); ; # Define now input data file and signal and background trees; ; inputFileName = ""Higgs_data.root""; inputFileLink = ""http://root.cern.ch/files/"" + inputFileName; ; ; if ROOT.gSystem.AccessPathName(inputFileName):; ROOT.Info(""TMVA_Higgs_Classification"", ""Download Higgs_data.root file""); TFile.SetCacheFileDir("".""); inputFile = TFile.Open(inputFileLink, ""CACHEREAD""); if inputFile is None:; raise FileNotFoundError(""Input file cannot be downloaded - exit""); else:; # file exists; inputFile = TFile.Open(inputFileName); ; ; # --- Register the training and test trees; signalTree = inputFile.Get(""sig_tree""); backgroundTree = inputFile.Get(""bkg_tree""); signalTree.Print(); ; ## Declare DataLoader(s); ; # The next step is to declare the DataLoader class that deals with input variables; # Define the input variables that shall be used for the MVA training; # note that you may also use variable expressions, which can be parsed by TTree::Draw( ""expression"" )]; loader = TMVA.DataLoader(""dataset""); ; loader.AddVariable(""m_jj""); loader.AddVariable(""m_jjj""); loader.AddVariable(""m_lv""); loader.AddVariable(""m_jlv""); loader.AddVariable(""m_bb""); loader.AddVariable(""m_wbb""); loader.AddVariable(""m_wwbb""); ; # We set now the input data trees in the TMVA DataLoader class; # global event weights per tree (see below for setting event-wise weights); signalWeight = 1.0; backgroundWeight = 1.0; # You can add an arbitrary numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:58779,down,downloaded,58779,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['down'],['downloaded']
Availability,"if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:105984,error,errors,105984,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"if existing. Returns 0 on success, <0 otherwise ; Definition at line 766 of file TPackMgr.cxx. ◆ IsA(). TClass * TPackMgr::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 106 of file TPackMgr.h. ◆ IsEnabled(). Bool_t TPackMgr::IsEnabled ; (; const char * ; pack, . TPackMgr * ; packmgr = nullptr . ). static . Check if the package is enabled; priority is given to packmgr, if defined. ; Returns kTRUE if enabled ; Definition at line 961 of file TPackMgr.cxx. ◆ IsInDir(). Bool_t TPackMgr::IsInDir ; (; const char * ; path). Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ; Definition at line 478 of file TPackMgr.cxx. ◆ IsPackageEnabled(). Bool_t TPackMgr::IsPackageEnabled ; (; const char * ; pack). inline . Definition at line 82 of file TPackMgr.h. ◆ Load() [1/2]. Int_t TPackMgr::Load ; (; const char * ; pack, . const char * ; opts . ). Method to load a package taking an option const char * Return -1 on error, 0 otherwise. ; Definition at line 206 of file TPackMgr.cxx. ◆ Load() [2/2]. Int_t TPackMgr::Load ; (; const char * ; pack, . TList * ; optls = 0 . ). Method to load a package taking an option list Return -1 on error, 0 otherwise. ; Definition at line 220 of file TPackMgr.cxx. ◆ Log(). void TPackMgr::Log ; (; const char * ; msg). private . Wrapper to notofuer / logger. ; Definition at line 73 of file TPackMgr.cxx. ◆ operator=(). TPackMgr & TPackMgr::operator= ; (; const TPackMgr & ; ). private . ◆ ReadMD5(). TMD5 * TPackMgr::ReadMD5 ; (; const char * ; pack). Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ; Returns a pointer to a TMD5 object, transferring ownership to the caller ; Definition at line 708 of file TPackMgr.cxx. ◆ RegisterGlobalPath(). Int_t TPackMgr::RegisterGlobalPath ; (; const char * ; paths). static . Parse one or more paths as possible sources of packages Returns number of paths added; or -1 in case of problems. ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:21332,error,error,21332,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['error'],['error']
Availability,"if in the; particular data sample at hand, no event is observed in this bin. The; latter limitation is not specific to; ,; rather it is always present when one is willing to infer the PDF at the; origin of an histogram, when, for some bins, the number of entries does; not guaranty the applicability of the Gaussian regime. In such; situations, a satisfactory practice is to attach allowed ranges to the; histogram to indicate the upper and lower limits of the PDF value which; are consistent with the actual observation, at a given confidence; level. Figure 3:; The ; (signal on the left, background on the right) obtained for are represented as dots with error bars. They are obtained from a fit using only information from and . Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 4. In the ; for signal one observes that error bars are the largest in the  regions where the background is the largest. Figure 4:; The ; (signal on the left, background on the right) obtained for are represented as dots with error bars. They are obtained from a fit using only information from and . The results above can be obtained by running the tutorial TestSPlot.C. Function Members (Methods); public:. TSPlot(); TSPlot(Int_t nx, Int_t ny, Int_t ne, Int_t ns, TTree* tree); virtual~TSPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:8791,error,error,8791,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,6,['error'],['error']
Availability,"if in the; particular data sample at hand, no event is observed in this bin. The; latter limitation is not specific to; ,; rather it is always present when one is willing to infer the PDF at the; origin of an histogram, when, for some bins, the number of entries does; not guaranty the applicability of the Gaussian regime. In such; situations, a satisfactory practice is to attach allowed ranges to the; histogram to indicate the upper and lower limits of the PDF value which; are consistent with the actual observation, at a given confidence; level. Figure 3:; The ; (signal on the left, background on the right) obtained for are represented as dots with error bars. They are obtained from a fit using only information from and . Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 4. In the ; for signal one observes that error bars are the largest in the  regions where the background is the largest. Figure 4:; The ; (signal on the left, background on the right) obtained for are represented as dots with error bars. They are obtained from a fit using only information from and . The results above can be obtained by running the tutorial TestSPlot.C. Function Members (Methods); public:. virtual~TSPlot(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:8806,error,error,8806,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,4,['error'],['error']
Availability,"if necessary. ; Definition at line 2576 of file TCanvas.cxx. ◆ SetHighLightColor(). void TCanvas::SetHighLightColor ; (; Color_t ; col). inline . Definition at line 207 of file TCanvas.h. ◆ SetName(). void TCanvas::SetName ; (; const char * ; name = """"). overridevirtual . Set canvas name. ; In case name is an empty string, a default name is set. Canvas automatically marked as modified when SetName method called ; Implements TVirtualPad.; Reimplemented in TDialogCanvas.; Definition at line 2047 of file TCanvas.cxx. ◆ SetPadSave(). void TCanvas::SetPadSave ; (; TPad * ; pad). inline . Definition at line 216 of file TCanvas.h. ◆ SetRealAspectRatio(). bool TCanvas::SetRealAspectRatio ; (; const Int_t ; axis = 1). Function to resize a canvas so that the plot inside is shown in real aspect ratio. ; Parameters. [in]axis1 for resizing horizontally (x-axis) in order to get real aspect ratio, 2 for the resizing vertically (y-axis) . Returnsfalse if error is encountered, true otherwise; hpxpy->Draw();; c1->SetRealAspectRatio();; c1return c1Definition legend1.C:41. For defining the concept of real aspect ratio, it is assumed that x and y axes are in same units, e.g. both in MeV or both in ns.; You can resize either the width of the canvas or the height, but not both at the same time; Call this function AFTER drawing AND zooming (SetUserRange) your TGraph or Histogram, otherwise it cannot infer your actual axes lengths; This function ensures that the TFrame has a real aspect ratio, this does not mean that the full pad (i.e. the canvas or png output) including margins has exactly the same ratio; This function does not work if the canvas is divided in several subpads . Definition at line 2079 of file TCanvas.cxx. ◆ SetRetained(). void TCanvas::SetRetained ; (; Bool_t ; retained = kTRUE). inline . Definition at line 218 of file TCanvas.h. ◆ SetSelected(). void TCanvas::SetSelected ; (; TObject * ; obj). overridevirtual . Set selected canvas. ; Implements TVirtualPad.; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:89361,error,error,89361,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['error'],['error']
Availability,"if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * ProjectionZ(const char* name = ""_pz"", Int_t firstxbin = 0, Int_t lastxbin = -1, Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Z*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the cells along the Z axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By setting ixmin=1 and/or ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * DoProject1D(const char* name, const char* title, TAxis* projX, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal methdod performing the projection to 1D histogram; called from TH3::Project3D. TH2D * DoProject2D(const char* name, const char* title, TAxis* projX, TAxis* projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal method performing the projection to a 2D histogram; called from TH3::Project3D. TH1 * Project3D(Option_t* option = ""x"") const; Project a 3-d histogram into 1 or 2-d histograms depending on the; optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3.html:43248,error,errors,43248,root/html534/TH3.html,https://root.cern,https://root.cern/root/html534/TH3.html,2,['error'],['errors']
Availability,"if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void (*)(Int_t&, Double_t*, Double_t&f, Double_t*, Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for eac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:15452,error,error,15452,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,6,['error'],['error']
Availability,"if the name was not prefixed with lib, try to prefix with ""lib"" and search again. If DynamicPathName still couldn't find the library, return -1. If check is true it will only check if libname exists and is readable. Returns 0 on successful loading, -1 in case libname does not exist or in case of error and -2 in case of version mismatch. ; Definition at line 2183 of file TROOT.cxx. ◆ LoadClass() [2/2]. TClass * TROOT::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent = kFALSE . ); const. Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 2167 of file TROOT.cxx. ◆ LoadMacro(). Int_t TROOT::LoadMacro ; (; const char * ; filename, . Int_t * ; error = nullptr, . Bool_t ; check = kFALSE . ). Load a macro in the interpreter's memory. ; Equivalent to the command line command "".L filename"". If the filename has ""+"" or ""++"" appended the macro will be compiled by ACLiC. The filename must have the format: [path/]macro.C[+|++[g|O]]. The possible error codes are defined by TInterpreter::EErrorCode. If check is true it will only check if filename exists and is readable. Returns 0 on successful loading and -1 in case filename does not exist or in case of error. ; Definition at line 2268 of file TROOT.cxx. ◆ ls(). void TROOT::ls ; (; Option_t * ; option = """"); const. overridevirtual . To list all objects of the application. ; Loop on all objects created in the ROOT linked lists. Objects may be files and windows or any other object directly attached to the ROOT linked list. ; Reimplemented from TDirectory.; Definition at line 2250 of file TROOT.cxx. ◆ Macro(). Longptr_t TROOT::Macro ; (; const char * ; filename, . Int_t * ; error = nullptr, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:67408,error,error,67408,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"if the; parameter is so close to a limit (internal value at an odd multiple of #((pi)/(2)); that MINUIT prints a warning to this effect when it prints; the parameter values.; The minimizer can become blocked at a limit, because at a limit the; derivative seen by the minimizer partial F/partial Pint is zero no matter; what the real derivative partial F/partial Pext is. ((partial F)/(partial P ))= ((partial F)/(partial P ))((partial P )/(partial P )) =((partial F)/(partial P ))= 0; int ext ext int ext. Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. Statistical interpretation:. For discussuion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:6949,error,error,6949,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['error'],['error']
Availability,"if they changed since last reading; If 'proofconf' is defined, check also file proofconf for directives. Bool_t CheckProofAuth(Int_t cSec, TString& det); Check if the authentication method can be attempted for the client. void MergeHostAuthList(TList* Std, TList* New, Option_t* Opt = """"); Tool for updating fgAuthInfo or fgProofAuthInfo; 'nin' contains list of last input information through (re)reading; of a rootauthrc-alike file. 'nin' info has priority.; 'std' is cleaned from inactive members.; 'nin' members used to update existing members in 'std' are; removed from 'nin', do that they do not leak; opt = ""P"" for proofauthinfo. void RemoveSecContext(TRootSecContext* ctx); Tool for removing SecContext ctx from THostAuth listed in; fgAuthInfo or fgProofAuthInfo. Int_t ProofAuthSetup(); Authentication related stuff setup in TProofServ.; This is the place where the buffer send by the client / master is; decoded. It contains also password information, if the case requires.; Return 0 on success, -1 on failure. Int_t ProofAuthSetup(TSocket* sock, Bool_t client); Setup of authetication related stuff in PROOF run after a; successful authentication.; Return 0 on success, -1 on failure. Int_t GetClientProtocol(); Static method returning supported client protocol. Bool_t GetPwHash() const; { return fPwHash; }. Int_t GetRSAKey() const; { return fRSAKey; }. ESecurity GetSecurity() const; { return fSecurity; }. Bool_t GetSRPPwd() const; { return fSRPPwd; }. Int_t GetVersion() const; { return fVersion; }. TAuthenticate(TSocket* sock, const char* remote, const char* proto, const char* user = """"); { }. THostAuth * GetHostAuth() const; { return fHostAuth; }. const char * GetProtocol() const; { return fProtocol; }. const char * GetRemoteHost() const; { return fRemote; }. Int_t GetRSAKeyType() const; { return fRSAKey; }. TRootSecContext * GetSecContext() const; { return fSecContext; }. TSocket * GetSocket() const; { return fSocket; }. const char * GetUser() const; { return fUser; }. Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:22047,failure,failure,22047,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,11,['failure'],['failure']
Availability,"if(fSumw2.fN) {; 2935 if (c1 == 0) { fSumw2.fArray[i] = 0; continue; }; 2936 Double_t c1sq = c1 * c1;; 2937 fSumw2.fArray[i] = (GetBinErrorSqUnchecked(i) * c1sq + h1->GetBinErrorSqUnchecked(i) * c0 * c0) / (c1sq * c1sq);; 2938 }; 2939 }; 2940 ResetStats();; 2941 return kTRUE;; 2942}; 2943 ; 2944////////////////////////////////////////////////////////////////////////////////; 2945/// Replace contents of this histogram by the division of h1 by h2.; 2946///; 2947/// `this = c1*h1/(c2*h2)`; 2948///; 2949/// If errors are defined (see TH1::Sumw2), errors are also recalculated; 2950/// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; 2951/// if not already set.; 2952/// The resulting errors are calculated assuming uncorrelated histograms.; 2953/// However, if option =""B"" is specified, Binomial errors are computed.; 2954/// In this case c1 and c2 do not make real sense and they are ignored.; 2955///; 2956/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 2957/// you should call Sumw2 before making this operation.; 2958/// This is particularly important if you fit the histogram after TH1::Divide; 2959///; 2960/// Please note also that in the binomial case errors are calculated using standard; 2961/// binomial statistics, which means when b1 = b2, the error is zero.; 2962/// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; 2963/// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; 2964/// error for the case b1=b2.; 2965///; 2966/// The function return kFALSE if the divide operation failed; 2967 ; 2968Bool_t TH1::Divide(const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2, Option_t *option); 2969{; 2970 ; 2971 TString opt = option;; 2972 opt.ToLower();; 2973 Bool_t binomial = kFALSE;; 2974 if (opt.Contains(""b"")) binomial = kTRUE;; 2975 if (!h1 || !h2) {; 2976 Error(""Divide"", ""At least one of the input histograms passed does not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:117093,error,errors,117093,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"ifferent for every instantiated RooAbsData object. ; This ID can be used whether two RooAbsData are the same object, which is safer than memory address comparisons that might result in false positives when memory is reused. ; Definition at line 308 of file RooAbsData.h. ◆ weight(). virtual double RooAbsData::weight ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. ◆ weightError() [1/2]. virtual void RooAbsData::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; = Poisson . ); const. inlinevirtual . Return the asymmetric errors on the current weight. ; See also weightError(ErrorType) const for symmetric error. Parameters. [out]loLow error. ; [out]hiHigh error. . Reimplemented in RooDataHist, and RooDataSet.; Definition at line 122 of file RooAbsData.h. ◆ weightError() [2/2]. virtual double RooAbsData::weightError ; (; ErrorType ; = Poisson); const. inlinevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented in RooDataHist, and RooDataSet.; Definition at line 112 of file RooAbsData.h. ◆ weightSquared(). virtual double RooAbsData::weightSquared ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. Friends And Related Symbol Documentation. ◆ RooAbsOptTestStatistic. friend class RooAbsOptTestStatistic. friend . Definition at line 332 of file RooAbsData.h. ◆ RooFit::TestStatistics::ConstantTermsOptimizer. friend struct RooFit::TestStatistics::ConstantTermsOptimizer. friend . Definition at line 333 of file RooAbsData.h. ◆ RooFit::TestStatistics::RooAbsL. friend class RooFit::TestStatistics::RooAbsL. friend . Definition at line 335 of file RooAbsData.h. Member Data Documentation. ◆ _cachedVars. RooArgSet RooAbsData::_cachedVars. protected . ! External variables cached with this data set ; Definition at line 349 of file RooAbsData.h. ◆ _dstore. std::unique_ptr<RooAbsDataStore> RooAbsData::_dstore. protected . Data storage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:77441,error,errors,77441,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['error'],['errors']
Availability,"ifferent minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (library libMinuit). Old version of Minuit, based on the TMinuit class. The list of possible algorithms are:. Migrad (default one); Simplex; Minimize (it is a combination of Migrad and Simplex); MigradImproved; Scan; Seek. Minuit2 (library libMinuit2). New C++ version of Minuit. The list of possible algorithm is :. Migrad (default); Simplex; Minimize; Scan; Fumili . This is the same algorithm of TFumili, but implemented in the Minuit2 library. Fumili. Implement a dedicated minimization algorithm for least-square and likelihood fits. It has requirements on the type of method function to be used. No specific algorithm exists; GSLMultiMin (library libMathMore). Minimizer based on the Multidimensional Minimization routines of the Gnu Scientific Library (GSL). T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:202158,avail,available,202158,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,6,['avail'],['available']
Availability,"ifferent number; 5996/// of bins and different limits, BUT the largest bin width must be; 5997/// a multiple of the smallest bin width and the upper limit must also; 5998/// be a multiple of the bin width.; 5999/// Example:; 6000///; 6001/// ~~~ {.cpp}; 6002/// void atest() {; 6003/// TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; 6004/// TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; 6005/// TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; 6006/// TRandom r;; 6007/// for (Int_t i=0;i<10000;i++) {; 6008/// h1->Fill(r.Gaus(-55,10));; 6009/// h2->Fill(r.Gaus(55,10));; 6010/// h3->Fill(r.Gaus(0,10));; 6011/// }; 6012///; 6013/// TList *list = new TList;; 6014/// list->Add(h1);; 6015/// list->Add(h2);; 6016/// list->Add(h3);; 6017/// TH1F *h = (TH1F*)h1->Clone(""h"");; 6018/// h->Reset();; 6019/// h->Merge(list);; 6020/// h->Draw();; 6021/// }; 6022/// ~~~; 6023 ; 6024Long64_t TH1::Merge(TCollection *li,Option_t * opt); 6025{; 6026 if (!li) return 0;; 6027 if (li->IsEmpty()) return (Long64_t) GetEntries();; 6028 ; 6029 // use TH1Merger class; 6030 TH1Merger merger(*this,*li,opt);; 6031 Bool_t ret = merger();; 6032 ; 6033 return (ret) ? GetEntries() : -1;; 6034}; 6035 ; 6036 ; 6037////////////////////////////////////////////////////////////////////////////////; 6038/// Performs the operation:; 6039///; 6040/// `this = this*c1*f1`; 6041///; 6042/// If errors are defined (see TH1::Sumw2), errors are also recalculated.; 6043///; 6044/// Only bins inside the function range are recomputed.; 6045/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 6046/// you should call Sumw2 before making this operation.; 6047/// This is particularly important if you fit the histogram after TH1::Multiply; 6048///; 6049/// The function return kFALSE if the Multiply operation failed; 6050 ; 6051Bool_t TH1::Multiply(TF1 *f1, Double_t c1); 6052{; 6053 if (!f1) {; 6054 Error(""Multiply"",""Attempt to multiply by a non-existing function"");; 6055 return kFALSE;; 6056 }; 6057 ; 6058 // delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:238848,error,errors,238848,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"ifferent package as long as it implements the required signatures. One such vector type is CLHEP's Hep3Vector:; XYZVector v1(1,2,3);; RhoEtaPhiVector r2(v1);; CLHEP::Hep3Vector q(1,2,3);; XYZVector v3(q); qfloat * qDefinition THbookFile.cxx:89; v3@ v3Definition rootcling_impl.cxx:3703. Arithmetic Operations; The following operations are possible between vector classes, even of different coordinate system types:; v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; a#define a(i)Definition RSha256.hxx:99; v2@ v2Definition rootcling_impl.cxx:3702; Note that the multiplication between two vectors using the operator * is not supported because it is ambiguous. Other Methods; The vector classes support methods for:. computation of the dot product via Dot(),; computation of the cross product via Cross(),; construction of a unit vector via Unit(). Transformations; The transformations are modeled using simple (non-template) classes, using double as the scalar type to avoid too large numerical errors. The transformations are grouped in Rotations (in 3 dimensions), Lorentz transformations. Each group has several members which may model physically equivalent transformations but with different internal representations. Transformation classes can operate on all type of vectors using the operator() or the operator * and the transformations can also be combined via the operator *. In more detail the transformations available are:. 3D Rotations. ROOT::Math::Rotation3D, rotation described by a 3x3 matrix of doubles; ROOT::Math::EulerAngles rotation described by the three Euler angles (phi, theta and psi) following the GoldStein definition.; ROOT::Math::RotationZYX rotation described by three angles defining a rotation first along the Z axis, then along the rotated Y' axis and then along the rotated X'' axis.; ROOT::Math::AxisAngle, rotation described by a vector (axis) and an angle; ROOT::Math::Quaternion, rotatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GenVector.html:7463,error,errors,7463,doc/master/group__GenVector.html,https://root.cern,https://root.cern/doc/master/group__GenVector.html,1,['error'],['errors']
Availability,"ificanceMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual RooDataSet*finalizeRun(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html:2242,error,error,2242,root/html526/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html,11,['error'],['error']
Availability,"ification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 554 of file h1analysis.h. ◆ Process(). Bool_t h1analysis::Process ; (; Long64_t ; ). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector. ◆ Reset(). void h1analysis::Reset ; (; ). Definition at line 376 of file h1analysis.h. ◆ SetInputList(). void h1analysis::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 356 of file h1analysis.h. ◆ SetObject(). void h1analys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classh1analysis.html:22086,avail,available,22086,doc/master/classh1analysis.html,https://root.cern,https://root.cern/doc/master/classh1analysis.html,1,['avail'],['available']
Availability,"ified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:40509,error,error,40509,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,10,['error'],['error']
Availability,"ifier id. ;  ; virtual TGButton * GetButton (Int_t id) const;  ; Int_t GetCount () const;  Returns number of buttons in group. ;  ; Int_t GetId (TGButton *button) const;  Finds and returns the id of the button. ;  ; virtual void Hide ();  Hide group of buttons. ;  ; virtual Int_t Insert (TGButton *button, int id=-1);  Inserts a button with the identifier id into the button group. ;  ; Bool_t IsBorderDrawn () const;  ; Bool_t IsEnabled () const;  ; Bool_t IsExclusive () const;  ; Bool_t IsRadioButtonExclusive () const;  ; virtual void Pressed (Int_t id);  ; virtual void ReleaseButtons ();  This slot is activated when one of the buttons in the exclusive group emits the Pressed() signal. ;  ; virtual void Released (Int_t id);  ; virtual void Remove (TGButton *button);  Removes a button from the button group. ;  ; virtual void SetBorderDrawn (Bool_t enable=kTRUE);  Makes border to be visible/invisible. ;  ; virtual void SetButton (Int_t id, Bool_t down=kTRUE);  Sets the button with id to be on/down, and if this is an exclusive group, all other button in the group to be off/up. ;  ; virtual void SetExclusive (Bool_t flag=kTRUE);  Sets the button group to be exclusive if enable is kTRUE, or to be non-exclusive if enable is kFALSE. ;  ; virtual void SetLayoutHints (TGLayoutHints *l, TGButton *button=nullptr);  Set layout hints for the specified button or if button=0 for all buttons. ;  ; virtual void SetRadioButtonExclusive (Bool_t flag=kTRUE);  If enable is kTRUE, this button group will treat radio buttons as mutually exclusive, and other buttons according to IsExclusive(). ;  ; virtual void SetState (Bool_t state=kTRUE);  Sets the state of all the buttons in the group to enable or disable. ;  ; void SetTitle (const char *title) override;  Set or change title. ;  ; void SetTitle (TGString *title) override;  Set or change title. ;  ; virtual void Show ();  Show group of buttons. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHButtonGroup.html:3304,down,down,3304,doc/master/classTGHButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGHButtonGroup.html,4,['down'],['down']
Availability,"ifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. void SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:12959,avail,available,12959,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,1,['avail'],['available']
Availability,"ify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:70482,error,errors,70482,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['error'],['errors']
Availability,"ify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__IntervalCalculator.html:2434,error,error,2434,root/html526/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__IntervalCalculator.html,2,['error'],['error']
Availability,"ify();; Process -> Bool_t h1analysisProxy_Process(Long64_t);; SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; Terminate -> void h1analysisProxy_Terminate();. If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; it is included before the declaration of the proxy class. This can; be used in particular to insure that the include files needed by; the macro file are properly loaded. The default histogram is accessible via the variable named 'htemp'. If the library of the classes describing the data in the branch is; loaded, the skeleton will add the needed #include statements and; give the ability to access the object stored in the branches. To draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. Int_t MakeSelector(const char* selector = 0); Generate skeleton selector class for this tree. The following files are produced: selector.h and selector.C.; If selector is 0, the selector will be called ""nameoftree"". The generated code in selector.h includes the following:; - Identification of the original Tree and Input file name; - Definition of selector class (data and functions); - The following class functions:; - constructor and destructor; - void Begin(TTree *tree); - void SlaveBegin(TTree *tree); - void Init(TTree *tree); - Bool_t Notify(); - Bool_t Process(Long64_t entry); - void Terminate(); - void SlaveTerminate(). The class selector derives from TSelector.; The generated code in selector.C includes empty functions defined above. To use this function:; - connect your Tree file (eg: TFile f(""myfile.root"");); - T->MakeSelector(""myselect""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:102621,avail,available,102621,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,10,['avail'],['available']
Availability,"ify();; Process -> Bool_t h1analysisProxy_Process(Long64_t);; SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; Terminate -> void h1analysisProxy_Terminate();. If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; it is included before the declaration of the proxy class. This can; be used in particular to insure that the include files needed by; the macro file are properly loaded. The default histogram is accessible via the variable named 'htemp'. If the library of the classes describing the data in the branch is; loaded, the skeleton will add the needed #include statements and; give the ability to access the object stored in the branches. To draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. TPrincipal * Principal(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Interface to the Principal Components Analysis class. Create an instance of TPrincipal; Fill it with the selected variables; if option ""n"" is specified, the TPrincipal object is filled with; normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions; return a pointer to the TPrincipal object. It is the user responsibility; to delete this object.; The option default value is ""np"". See TTreePlayer::DrawSelect for explanation of the other parameters. Long64_t Process(const char* filename, Option_t* option, Long64_t nentries, Long64_t firstent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:47647,avail,available,47647,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,10,['avail'],['available']
Availability,"ig EDM = 123456; Double_t*fBlim[fMaxpar2] Upper limits for parameters; Double_t*fCOMDplist[fMaxpar] array used in mncomd; Double_t*fCONTgcc[fMaxpar] array used in mncont; Double_t*fCONTw[fMaxpar] array used in mncont; TStringfCfrom; char*fChpt!Character to be plotted at the X,Y contour positions; TStringfCovmes[4]; TString*fCpnam[fMaxpar2] Array of parameters names; TStringfCstatu; TStringfCtitl; TStringfCundef; TStringfCvrsn; TStringfCword; Double_tfDcovarRelative change in covariance matrix; Double_t*fDgrd[fMaxpar] Uncertainties; Double_t*fDirin[fMaxpar] (Internal) step sizes for current step; Double_t*fDirins[fMaxpar] (Internal) step sizes for current step for fixed params; Double_tfEDMEstimated vertical distance to the minimum; Int_tfEmptyInitialization flag (1 = Minuit initialized); Double_tfEpsi; Double_tfEpsma2sqrt(fEpsmac); Double_tfEpsmacmachine precision for floating points:; Double_t*fErn[fMaxpar] Negative Minos errors if calculated; Double_t*fErp[fMaxpar] Positive Minos errors if calculated; void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t)fFCN!; Double_t*fFIXPyy[fMaxpar] array used in mnfixp; Double_tfFval3; Double_t*fG2[fMaxpar]; Double_t*fG2s[fMaxpar]; Double_t*fGRADgf[fMaxpar] array used in mngrad; Double_t*fGin[fMaxpar2]; Double_t*fGlobcc[fMaxpar] Global Correlation Coefficients; Bool_tfGraphicsModetrue if graphics mode on (default); Double_t*fGrd[fMaxpar] First derivatives; Double_t*fGrds[fMaxpar]; Double_t*fGstep[fMaxpar] Step sizes; Double_t*fGsteps[fMaxpar]; Double_t*fHESSyy[fMaxpar] array used in mnhess; Double_t*fIMPRdsav[fMaxpar] array used in mnimpr; Double_t*fIMPRy[fMaxpar] array used in mnimpr; Int_tfISW[7]Array of switches; Int_tfIcirc[2]; Int_tfIcomndNumber of commands; Int_tfIdbg[11]Array of internal debug switches; Int_t*fIpfix[fMaxpar] List of fixed parameters; Int_tfIstkrd[10]; Int_tfIstkwr[10]; Int_tfIstrat; Int_tfIsysrdstandardInput unit; Int_tfIsyssa; Int_tfIsyswrstandard output unit; Int_tfItaur; Int_tfKe1cr; Int_tfKe2cr; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:24440,error,errors,24440,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,4,['error'],['errors']
Availability,"ig EDM = 123456; Double_t*fBlim[fMaxpar2] Upper limits for parameters; Double_t*fCOMDplist[fMaxpar] array used in mncomd; Double_t*fCONTgcc[fMaxpar] array used in mncont; Double_t*fCONTw[fMaxpar] array used in mncont; TStringfCfrom; char*fChpt!Character to be plotted at the X,Y contour positions; TStringfCovmes[4]; TString*fCpnam[fMaxpar2] Array of parameters names; TStringfCstatu; TStringfCtitl; TStringfCundef; TStringfCvrsn; TStringfCword; Double_tfDcovarRelative change in covariance matrix; Double_t*fDgrd[fMaxpar] Uncertainties; Double_t*fDirin[fMaxpar] (Internal) step sizes for current step; Double_t*fDirins[fMaxpar] (Internal) step sizes for current step for fixed params; Double_tfEDMEstimated vertical distance to the minimum; Int_tfEmptyInitialization flag (1 = Minuit initialized); Double_tfEpsi; Double_tfEpsma2sqrt(fEpsmac); Double_tfEpsmacmachine precision for floating points:; Double_t*fErn[fMaxpar] Negative Minos errors if calculated; Double_t*fErp[fMaxpar] Positive Minos errors if calculated; voidfFCN!; Double_t*fFIXPyy[fMaxpar] array used in mnfixp; Double_tfFval3; Double_t*fG2[fMaxpar] ; Double_t*fG2s[fMaxpar] ; Double_t*fGRADgf[fMaxpar] array used in mngrad; Double_t*fGin[fMaxpar2] ; Double_t*fGlobcc[fMaxpar] Global Correlation Coefficients; Bool_tfGraphicsModetrue if graphics mode on (default); Double_t*fGrd[fMaxpar] First derivatives; Double_t*fGrds[fMaxpar] ; Double_t*fGstep[fMaxpar] Step sizes; Double_t*fGsteps[fMaxpar] ; Double_t*fHESSyy[fMaxpar] array used in mnhess; Double_t*fIMPRdsav[fMaxpar] array used in mnimpr; Double_t*fIMPRy[fMaxpar] array used in mnimpr; Int_tfISW[7]Array of switches; Int_tfIcirc[2]; Int_tfIcomndNumber of commands; Int_tfIdbg[11]Array of internal debug switches; Int_t*fIpfix[fMaxpar] List of fixed parameters; Int_tfIstkrd[10]; Int_tfIstkwr[10]; Int_tfIstrat; Int_tfIsysrdstandardInput unit; Int_tfIsyssa; Int_tfIsyswrstandard output unit; Int_tfItaur; Int_tfKe1cr; Int_tfKe2cr; Bool_tfLimsettrue if a parameter is up against l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:24660,error,errors,24660,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['errors']
Availability,"ig file; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. virtual ~TProofSuperMaster(); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); { return TProof::Process(sel, nent, o); }. » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofSuperMaster.html:24462,error,error,24462,root/html528/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html528/TProofSuperMaster.html,4,['error'],['error']
Availability,"ig"", ""sig"", x, m, s);; ; RooRealVar m2(""m2"", ""m2"", -1, -10, 10);; RooRealVar s2(""s2"", ""s2"", 6, 1, 50);; RooGaussian bkg(""bkg"", ""bkg"", x, m2, s2);; ; RooRealVar fsig(""fsig"", ""fsig"", 0.33, 0, 1);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);; ; // Create binned dataset; x.setBins(25);; std::unique_ptr<RooAbsData> d{model.generateBinned(x, 1000)};; ; // Perform fit and save fit result; std::unique_ptr<RooFitResult> r{model.fitTo(*d, Save(), PrintLevel(-1))};; ; // V i s u a l i z e f i t e r r o r; // -------------------------------------; ; // Make plot frame; RooPlot *frame = x.frame(Bins(40), Title(""P.d.f with visualized 1-sigma error band""));; d->plotOn(frame);; ; // Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; // This results in an error band that is by construction symmetric; //; // The linear error is calculated as; // error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); //; // where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; //; // with f(x) = the plotted curve; // 'da' = error taken from the fit result; // Corr(a,a') = the correlation matrix from the fit result; // Z = requested significance 'Z sigma band'; //; // The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),; // but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; // Gaussian approximations made; //; model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));; ; // Calculate error using sampling method and visualize as dashed red line.; //; // In this method a number of curves is calculated with variations of the parameter values, as sampled; // from a multi-variate Gaussian pdf that is constructed from the fit results covariance matrix.; // The error(x) is determined by calculating a central interval that capture N% of the variations; // for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves; // i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:1461,error,error,1461,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,7,['error'],['error']
Availability,ig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=7.28945 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=7.28945 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=7.28945 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:33959,error,error,33959,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,"igSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Help(const char* line); Print help on interpreter. void LoadGraphicsLibs(); Load shared libs neccesary for graphics. These libraries are only; loaded when gROOT->IsBatch() is kFALSE. void MakeBatch(); Switch to batch mode. Int_t ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); Parse the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Process a single command line, either a C++ statement or an interpreter; command starting with a ""."".; Return the return value of the command cast to a long. Long_t ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Process a file containing a C++ macro. Long_t ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Execute a file containing a C++ macro (static method). Can be used; while TApplication is not y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:17579,error,error,17579,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['error'],['error']
Availability,"igSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Help(const char* line); Print help on interpreter. void LoadGraphicsLibs(); Load shared libs neccesary for graphics. These libraries are only; loaded when gROOT->IsBatch() is kFALSE. void MakeBatch(); Switch to batch mode. Int_t ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); Parse the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Process a single command line, either a C++ statement or an interpreter; command starting with a ""."".; Return the return value of the command casted to a long. Long_t ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Process a file containing a C++ macro. Long_t ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Execute a file containing a C++ macro (static method). Can be used; while TApplication is not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:16118,error,error,16118,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,7,['error'],['error']
Availability,"igenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and belonging to the largest eigenvalues, corresponds to the most; significant features of the description of the original prototypes. let the prototypes be expanded on into a set of basis vectors. ,. (3). The `best' feature coordinates , spanning a feature; space, will be obtained by minimizing the error due to this; truncated expansion, i.e.,. (4). with the conditions:. (5). Multiplying (3) by. using (5),; we get. (6). so the error becomes.  ;  .  ;  .  ;  . (7). The minimization of the sum in (7) is obtained when each; term. is minimum, since is; positive definite. By the method of Lagrange multipliers, and the; condition (5), we get. (8). The minimum condition. leads to the; equation. (9). which shows that is an eigenvector of the covariance; matrix with eigenvalue . The estimated minimum error is; then given by. (10). where. are the eigenvalues associated with the; omitted eigenvectors in the expansion (3). Thus, by choosing; the largest eigenvalues, and their associated eigenvectors, the; error is minimized. The transformation matrix to go from the pattern space to the feature; space consists of the ordered eigenvectors. for its columns. (11). This is an orthogonal transformation, or rotation, of the pattern; space and feature selection results in ignoring certain coordinates; in the transformed space.; . Christian Holm; August 2000, CERN; . Function Members (Methods); public:. TPrincipal(); TPrincipal(Int_t nVariables, Option_t* opt = ""ND""); virtual~TPrincipal(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddRow(const Double_t* x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPrincipal.html:4895,error,error,4895,root/html528/TPrincipal.html,https://root.cern,https://root.cern/root/html528/TPrincipal.html,6,['error'],['error']
Availability,"igenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and belonging to the largest eigenvalues, corresponds to the most; significant features of the description of the original prototypes. let the prototypes be expanded on into a set of basis vectors. ,. (3). The `best' feature coordinates , spanning a feature; space, will be obtained by minimizing the error due to this; truncated expansion, i.e.,. (4). with the conditions:. (5). Multiplying (3) by. using (5),; we get. (6). so the error becomes.  ;  .  ;  .  ;  . (7). The minimization of the sum in (7) is obtained when each; term. is minimum, since is; positive definite. By the method of Lagrange multipliers, and the; condition (5), we get. (8). The minimum condition. leads to the; equation. (9). which shows that is an eigenvector of the covariance; matrix with eigenvalue . The estimated minimum error is; then given by. (10). where. are the eigenvalues associated with the; omitted eigenvectors in the expansion (3). Thus, by choosing; the largest eigenvalues, and their associated eigenvectors, the; error is minimized. The transformation matrix to go from the pattern space to the feature; space consists of the ordered eigenvectors. for its columns. (11). This is an orthogonal transformation, or rotation, of the pattern; space and feature selection results in ignoring certain coordinates; in the transformed space.; . Christian Holm; August 2000, CERN; . Function Members (Methods); public:. virtual~TPrincipal(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddRow(const Double_t* x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPrincipal.html:4897,error,error,4897,root/html602/TPrincipal.html,https://root.cern,https://root.cern/root/html602/TPrincipal.html,4,['error'],['error']
Availability,"igh displacementsDefinition TGraphBentErrors.h:34; TGraphBentErrors::GetEXhighdDouble_t * GetEXhighd() const overrideDefinition TGraphBentErrors.h:85; TGraphBentErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideGet high error on X[i].Definition TGraphBentErrors.cxx:430; TGraphBentErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Add a point with bent errors to the graph.Definition TGraphBentErrors.cxx:192; TGraphBentErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Set ex and ey values for point pointed by the mouse.Definition TGraphBentErrors.cxx:587; TGraphBentErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphBentErrors.h:28; TGraphBentErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphBentErrors.h:29; TGraphBentErrors::~TGraphBentErrors~TGraphBentErrors() overrideTGraphBentErrors default destructor.Definition TGraphBentErrors.cxx:176; TGraphBentErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphBentErrors.cxx:495; TGraphBentErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphBentErrors by a constant c1.Definition TGraphBentErrors.cxx:510; TGraphBentErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:29035,error,errorsDefinition,29035,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"igh errorsDefinition TGraphMultiErrors.h:36; TGraphMultiErrors::SetPointEYvirtual void SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH)Set ey values for point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exL)Set exL value for point i.Definition TGraphMultiErrors.cxx:1853; TGraphMultiErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH)Set eyH values for point i.Definition TGraphMultiErrors.cxx:1907; TGraphMultiErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphMultiErrors.cxx:1379; TGraphMultiErrors::fNYErrorsInt_t fNYErrorsThe amount of different y-errors.Definition TGraphMultiErrors.h:32; TGraphMultiErrors::fEyLstd::vector< TArrayD > fEyLTwo dimensional array of Y low errors.Definition TGraphMultiErrors.h:37; TGraphMultiErrors::GetErrorYDouble_t GetErrorY(Int_t i) const overrideGet error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1454; TGraphMultiErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphMultiErrors.cxx:933; TGraphMultiErrors::DoMergeBool_t DoMerge(const TGraph *tg) overrideProtected function to perform the merge operation of a graph with multiple asymmetric errors.Definition TGraphMultiErrors.cxx:838; TGraphMultiErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t i) const overrideGet high error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1530; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TVectorTTVectorT.Definition TVectorT.h:27; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; mTMarker mDefinition textangle.C:8. hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:25313,error,error,25313,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['error']
Availability,"ight); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootGuiFactory.html:2677,error,error,2677,root/html528/TQRootGuiFactory.html,https://root.cern,https://root.cern/root/html528/TQRootGuiFactory.html,9,['error'],['error']
Availability,"ighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:38471,error,error,38471,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],['error']
Availability,"ighted events with a summed weight of 43K""); r_ml_wgt.Print(); print(""==> Corrected ML Fit results on 1K weighted events with a summed weight of 43K""); r_ml_wgt_corr.Print(); print(""==> Chi2 Fit results on 1K weighted events with a summed weight of 43K""); r_chi2_wgt.Print(); ; c = ROOT.TCanvas(""rf403_weightedevts"", ""rf403_weightedevts"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.8); frame.Draw(); ; c.SaveAs(""rf403_weightedevts.png""); RooDataSet::pxData[x,w] = 1000 entries; RooDataSet::pxData[x,weight:w] = 1000 entries (43238.9 weighted); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#0] WARNING:InputArguments -- RooAbsPdf::fitTo(p2): WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:5996,error,errors,5996,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,1,['error'],['errors']
Availability,"ighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ◆ fSxErr. Double_t TSpectrum2Fit::fSxErr. protected . error value of s parameter for 1D ridges in x direction ; Definition at line 76 of file TSpectrum2Fit.h. ◆ fSxInit. Double_t TSpectrum2Fit::fSxInit. protected . initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ; Definition at line 74 of file TSpectrum2Fit.h. ◆ fSxyCalc. Double_t TSpectrum2Fit::fSxyCalc. protected . calculated value of s parameter for 2D peaks ; Definition at line 66 of file TSpectrum2Fit.h. ◆ fSxyErr. Double_t TSpectrum2Fit::fSxyErr. protected . error value of s parameter for 2D peaks ; Definition at line 67 of file TSpectrum2Fit.h. ◆ fSxyInit. Double_t TSpectrum2Fit::fSxyInit. protected . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpectrum2Fit::fSyErr. protected . error value of s parameter for 1D ridges in y direction ; Definition at line 79 of file TSpectrum2Fit.h. ◆ fSyInit. Double_t TSpectrum2Fit::fSyInit. protected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:92825,error,error,92825,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['error']
Availability,"ights& weights) const; 1071 {; 1072 std::vector<double> nothing; // empty gradients; no backpropagation is done, just forward; 1073 assert (numWeights () == weights.size ());; 1074 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (nothing), std::end (nothing), 10000, nothing, false);; 1075 return error;; 1076 }; 1077 ; 1078 template <typename Weights, typename PassThrough, typename OutContainer>; 1079 double Net::operator() (PassThrough& settingsAndBatch, const Weights& weights, ModeOutput /*eFetch*/, OutContainer& outputContainer) const; 1080 {; 1081 std::vector<double> nothing; // empty gradients; no backpropagation is done, just forward; 1082 assert (numWeights () == weights.size ());; 1083 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (nothing), std::end (nothing), 10000, outputContainer, true);; 1084 return error;; 1085 }; 1086 ; 1087 ; 1088 template <typename Weights, typename Gradients, typename PassThrough>; 1089 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients) const; 1090 {; 1091 std::vector<double> nothing;; 1092 assert (numWeights () == weights.size ());; 1093 assert (weights.size () == gradients.size ());; 1094 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, nothing, false);; 1095 return error;; 1096 }; 1097 ; 1098 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1099 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const; 1100 {; 1101 MATH_UNUSED(eFetch);; 1102 assert (numWeights () == weights.size ());; 1103 assert (weights.size () == gradients.size ());; 1104 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:34330,error,error,34330,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['error'],['error']
Availability,"iginator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459//",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147380,error,errorList,147380,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorList']
Availability,"igma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:24421,error,error,24421,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,30,['error'],['error']
Availability,"igmoid for hidden layers.; Such a structure is very useful because of two theorems:; 1- A linear combination of sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each individual output neuron. In all methods implemented in this library, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, one can express this derivative as the product of the local partial derivative by the weighted sum of the outputs derivatives (for a neuron) or as the product of the input value with the local partial derivative of the output neuron (for a synapse). This computation is called “back-propagation of the errors”. Six learning methods are implemented.; 5.12.3.1 Stochastic Minimization; This is the most trivial learning method. The Robbins-Monro stochastic approximation is applied to multilayer perceptrons. The weights are updated after each example according to the formula:; \[; w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t); \]; with:; \[; \Delta w_{ij}(t) = - \eta \left(; \frac{\partial e_p}{\partial w_{ij}} + \delta \right) +; \epsilon \Delta w_{ij}(t-1); \]; The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.2 Steepest Descent With Fixed Step Size (Batch Learning); It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.3 Steepest Descent Algorithm; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower Tau = highe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:232544,error,errors,232544,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"ignal in object sender from slot_method in object receiver. ;  . Protected Attributes; TGFrame * fContainer;  ; Int_t fX0;  ; Int_t fY0;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGViewPort (const TGViewPort &)=delete;  ; TGViewPort & operator= (const TGViewPort &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewPort.html:25316,mask,mask,25316,doc/master/classTGViewPort.html,https://root.cern,https://root.cern/doc/master/classTGViewPort.html,1,['mask'],['mask']
Availability,"ignal to the default handler, else restore previous behaviour. ;  ; void ResetSignals () override;  Reset signals handlers to previous behaviour. ;  ; void ResetTimer (TTimer *ti) override;  Reset a-sync timer. ;  ; Int_t Select (TFileHandler *fh, Long_t timeout) override;  Select on the file descriptor related to file handler h. ;  ; Int_t Select (TList *active, Long_t timeout) override;  Select on file descriptors. ;  ; int SendBuf (int sock, const void *buffer, int length) override;  Send a buffer headed by a length indicator. ;  ; int SendRaw (int sock, const void *buffer, int length, int flag) override;  Send exactly length bytes from buffer. ;  ; void SetDisplay () override;  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; void SetDynamicPath (const char *lib) override;  Set the dynamic path to a new value. ;  ; void Setenv (const char *name, const char *value) override;  Set environment variable. ;  ; Int_t SetFPEMask (Int_t mask=kDefaultMask) override;  Set which conditions trigger a floating point exception. ;  ; void SetProgname (const char *name) override;  Set the application name (from command line, argv[0]) and copy it in gProgName. ;  ; int SetSockOpt (int sock, int option, int val) override;  Set socket option. ;  ; void SigAlarmInterruptsSyscalls (Bool_t set) override;  When the argument is true the SIGALRM signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void Sleep (UInt_t milliSec) override;  Sleep milliSec milliseconds. ;  ; void StackTrace () override;  Print a stack trace. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Symlink (const char *from, const char *to) override;  Create a symlink from file1 to file2. ;  ; void Syslog (ELogLevel level, const char *mess) override;  Send mess to syslog daemon. ;  ; const char * TempDirectory () const override;  Return a user configure",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:10858,mask,mask,10858,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,2,['mask'],['mask']
Availability,"ignal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEmpty(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAlias(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; TTVLVContainer*GetContainer(); TGItemContext*GetContext(); const char*GetConvName(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTVLVEntry.html:3887,Error,Error,3887,root/html602/TTVLVEntry.html,https://root.cern,https://root.cern/root/html602/TTVLVEntry.html,2,['Error'],['Error']
Availability,"ignal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTextInput(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGLBEntry*FindEntry(const char* s) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGComboBox.html:5102,Error,Error,5102,root/html532/TGComboBox.html,https://root.cern,https://root.cern/root/html532/TGComboBox.html,2,['Error'],['Error']
Availability,"ignal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGFileContainer.html:5273,Error,Error,5273,root/html532/TGFileContainer.html,https://root.cern,https://root.cern/root/html532/TGFileContainer.html,6,['Error'],['Error']
Availability,"ignal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:5254,Error,Error,5254,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,1,['Error'],['Error']
Availability,"ignal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime() const; const char*TProofServ::GetDataDir() const; const char*TProofServ::GetDataDirOpts() const; static TMap*TProofServ::GetDataSetNodeMap(TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServLite.html:4579,error,error,4579,root/html534/TProofServLite.html,https://root.cern,https://root.cern/root/html534/TProofServLite.html,2,['error'],['error']
Availability,"ignal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime() const; const char*TProofServ::GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tTProofServ::GetEffSessions() const; TList*TProofServ::GetEnabledPackages() const; cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServLite.html:4579,error,error,4579,root/html528/TProofServLite.html,https://root.cern,https://root.cern/root/html528/TProofServLite.html,4,['error'],['error']
Availability,"ignals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. void*fDirpdirectory handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRFIOSystem(); Create helper class that allows directory access via rfiod.; The name must start with '-' to bypass the TSystem singleton check. Int_t MakeDirectory(const char* name); Make a directory via rfiod. void * OpenDirectory(const char* name); Open a directory via rfiod. Returns an opaque pointer to a dir; structure. Returns 0 in case of error. void FreeDirectory(void* dirp); Free directory via rfiod. const char * GetDirEntry(void* dirp); Get directory entry via rfiod. Returns 0 in case no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. Int_t Unlink(const char* path); Unlink, i.e. remove, a file or directory. Returns 0 when succesfull,; -1 in case of failure. void * GetDirPtr() const; { return fDirp; }. virtual ~TRFIOSystem(); { }. » Author: Fons Rademakers 20/01/99 + Giulia Taurelli 29/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rfio:$Id:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOSystem.html:20266,error,error,20266,root/html530/TRFIOSystem.html,https://root.cern,https://root.cern/root/html530/TRFIOSystem.html,3,['error'],['error']
Availability,"igned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (uns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5626,error,errortype,5626,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,2,['error'],"['error', 'errortype']"
Availability,"igned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower, double upper);  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:7074,error,errors,7074,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,1,['error'],['errors']
Availability,"igned long int>;; 3531using RVecULL = ROOT::VecOps::RVec<unsigned long long int>;; 3532 ; 3533} // End of ROOT NS; 3534 ; 3535#endif // ROOT_RVEC; fSizedim_t fSizeDefinition DeclareExecutors.h:184; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; d#define d(i)Definition RSha256.hxx:102; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; R__RVEC_NODISCARD#define R__RVEC_NODISCARDDefinition RVec.hxx:19; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; M_PI#define M_PIDefinition Rotated.cxx:105; Rtypes.h; operator<<TBuffer & operator<<(TBuffer &buf, const Tmpl *obj)Definition TBuffer.h:397; R__CLING_PTRCHECK#define R__CLING_PTRCHECK(ONOFF)Definition Rtypes.h:505; Productstatic Double_t Product(const Double_t *x, const Float_t *y)Product.Definition TCTUB.cxx:101; X#define X(type, name); TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; N#define N; CompareInt_t Compare(const void *item1, const void *item2)Definition TGListTree.cxx:2135; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; lengthOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:128401,error,error,128401,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,1,['error'],['error']
Availability,"igned long long ULong64_tDefinition RtypesCore.h:70; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBasket.h; PrintElementsstatic void PrintElements(const TStreamerInfo *info, const TStreamerInfoActions::TIDs &ids)Print branch parameters.Definition TBranchElement.cxx:3816; R__CleanNamestatic void R__CleanName(std::string &name)Remove trailing dimensions and make sure there is a trailing dot.Definition TBranchElement.cxx:1771; TBranchElement.h; TBranchObject.h; TBranchRef.h; TBranchSTL.h; TBrowser.h; TBufferFile.h; TClassEdit.h; TClass.h; TClonesArray.h; TDataMember.h; TDataType.h; EDataTypeEDataTypeDefinition TDataType.h:28; kOther_t@ kOther_tDefinition TDataType.h:32; kIsAbstract@ kIsAbstractDefinition TDictionary.h:71; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFile.h; TFolder.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; cursorOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t cursorDefinition TGWin32VirtualXProxy.cxx:160; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:245618,error,error,245618,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"ignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:16865,error,error,16865,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,2,['error'],['error']
Availability,"ignore negative events in training!"" << Endl;; 224 }; 225 ; 226 if (fArchitectureString == ""STANDARD"") {; 227 Log() << kWARNING << ""The STANDARD architecture is not supported anymore. ""; 228 ""Please use Architecture=CPU or Architecture=CPU.""; 229 ""See the TMVA Users' Guide for instructions if you ""; 230 ""encounter problems.""; 231 << Endl;; 232 Log() << kINFO << ""We will use instead the CPU architecture"" << Endl;; 233 fArchitectureString = ""CPU"";; 234 }; 235 if (fArchitectureString == ""OPENCL"") {; 236 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 237 ""Please use Architecture=CPU or Architecture=CPU for the ""; 238 ""time being. See the TMVA Users' Guide for instructions ""; 239 ""if you encounter problems.""; 240 << Endl;; 241 // use instead GPU; 242 Log() << kINFO << ""We will try using the GPU-CUDA architecture if available"" << Endl;; 243 fArchitectureString = ""GPU"";; 244 }; 245 ; 246 // the architecture can now be set at runtime as an option; 247 ; 248 ; 249 if (fArchitectureString == ""GPU"" || fArchitectureString == ""CUDNN"") {; 250#ifdef R__HAS_TMVAGPU; 251 Log() << kINFO << ""Will now use the GPU architecture !"" << Endl;; 252#else // case TMVA does not support GPU; 253 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 254 ""you have CUDA installed and it was successfully ""; 255 ""detected by CMAKE by using -Dtmva-gpu=On ""; 256 << Endl;; 257 fArchitectureString = ""CPU"";; 258 Log() << kINFO << ""Will now use instead the CPU architecture !"" << Endl;; 259#endif; 260 }; 261 ; 262 if (fArchitectureString == ""CPU"") {; 263#ifdef R__HAS_TMVACPU // TMVA has CPU BLAS and IMT support; 264 Log() << kINFO << ""Will now use the CPU architecture with BLAS and IMT support !"" << Endl;; 265#else // TMVA has no CPU BLAS or IMT support; 266 Log() << kINFO << ""Multi-core CPU backend not enabled. For better performances, make sure ""; 267 ""you have a BLAS implementation and it was successfully ""; 268 ""detected by CMake as well that the imt CMake flag i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:8931,avail,available,8931,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['avail'],['available']
Availability,"ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) -- Override default projection _technique_ (integration). For observables present in given dataset; projection of PDF is achieved by constructing an average over all observable values in given set.; Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, -- As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; const RooAbsData& d). ProjectionRange(const char* rn) -- Override default range of projection integrals to a different range speficied by given range name.; This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) -- Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control. PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per curve. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(Double_t value) -- Set curve points at which (pdf) evaluation error occur to specified value. By default the; function value is plotted. Normalization(Double_t scale, -- Adjust normalization by given scale factor. Interpretation of number depends on code: Relative:; ScaleType code) relative adjustment factor, NumEvent: scale to match given number of events. Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) -- Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1. ShiftToZero(Bool_t flag) -- Shift entire cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:45680,error,errors,45680,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['errors']
Availability,"ign}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \]. The bin content is always the mean of the Z values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell) the bin error e(I,J) is computed from the average of the s(I,J) for all cells if the static function TProfile2D::Approximate has been called. This simple/crude approximation was suggested in order to keep the cell during a fit operation. But note that this approximation is not the default behaviour. Creating and drawing a 2D profile; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }; Float_tfloat Float_tDefinition RtypesCore.h:57; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TProfile2D::TProfile2DTProfile2D()Default constructor for Profile2D histograms.Definition TProfile2D.cxx:88; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:2182,error,error,2182,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['error']
Availability,"igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective; number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective; number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. - chi2 - chisquare of the test; - ndf - number of degrees of freedom (important, when both histograms have the same; empty bins); - res - normalized residuals for further analysis. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Compute and return the chisquare of this histogram with respect to a function; The chisquare is computed by weighting each histogram point by the bin error; By default the full range of the histogram is used.; Use option ""R"" for restricting the chisquare calculation to the given range of the function. Double_t ComputeIntegral(Bool_t onlyPositive = false); Compute integral (cumulative sum of bins); The result stored in fIntegral is used by the GetRandom functions.; This function is automatically called by GetRandom when the fIntegral; array does not exist or when the number of entries in the histogram; has changed since the previous call to GetRandom.; The resulting integral is normalized to 1; If the routine is called with the onlyPositive flag set an error will; be produced in case of negative bin content and a NaN value returned. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called; The array dimension is the number of bins in the histograms; including underflow and overf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:59383,error,error,59383,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['error']
Availability,"igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'; For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective; number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective; number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. - chi2 - chisquare of the test; - ndf - number of degrees of freedom (important, when both histograms have the same; empty bins); - res - normalized residuals for further analysis. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Compute and return the chisquare of this histogram with respect to a function; The chisquare is computed by weighting each histogram point by the bin error; By default the full range of the histogram is used.; Use option ""R"" for restricting the chisquare calculation to the given range of the function. void ClearUnderflowAndOverflow(); Remove all the content from the underflow and overflow bins, without changing the number of entries; After calling this method, every undeflow and overflow bins will have content 0.0; The Sumw2 is also cleared, since there is no more content in the bins. Double_t ComputeIntegral(Bool_t onlyPositive = false); Compute integral (cumulative sum of bins); The result stored in fIntegral is used by the GetRandom functions.; This function is automatically called by GetRandom when the fIntegral; array does not exist or when the number of entries in the histogram; has changed since the previous call to GetRandom.; The resulting integral is normalized to 1; If the routine is called with the onlyPositive flag set an error will; be produced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:60239,error,error,60239,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['error']
Availability,"igurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; Int_tGetClass(Int_t ivar) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Double_tGetData(Int_t isel, Int_t ivar) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ET",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html:3697,error,error,3697,root/html602/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html,4,['error'],['error']
Availability,"igurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBayesClassifier.html:2324,error,error,2324,root/html602/TMVA__MethodBayesClassifier.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBayesClassifier.html,28,['error'],['error']
Availability,"igurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__PDF.html:1409,Error,Error,1409,root/html532/TMVA__PDF.html,https://root.cern,https://root.cern/root/html532/TMVA__PDF.html,1,['Error'],['Error']
Availability,"igurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDF.html:1409,Error,Error,1409,root/html534/TMVA__PDF.html,https://root.cern,https://root.cern/root/html534/TMVA__PDF.html,1,['Error'],['Error']
Availability,"igurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void CalculateMulticlassValues (const TMVA::Event *&evt, std::vector< Double_t > &parameters, std::vector< Float_t > &values);  calculate the values for multiclass ;  ; void ClearAll ();  delete and clear all class members ;  ; void CreateFormula ();  translate formula string into TFormula, and parameter string into par ranges ;  ; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; Double_t InterpretFormula (const Event *, std::vector< Double_t >::iterator begin, std::vector< Double_t >::iterator end);  formula interpretation ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  display fit parameters check maximum length of variable name ;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  . Private Attributes; std::vector< Double_t > fBestPars;  the pars that optimise (minimise) the estimator ;  ; TString fConverger;  fit method uses fConverger as intermediate step to converge into local minimas ;  ; IFitterTarget * fConvergerFitter;  intermediate fitter ;  ; TString fFitMethod;  estimator optimisation method ;  ; FitterBase * fFitter;  the fitter used in the training ;  ; TFormula * fFormula;  the discrimination function ;  ; TString fFormulaStringP;  string with function ;  ; TString fFormulaStringT;  string with function ;  ; UInt_t fNPars;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:27475,avail,available,27475,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,1,['avail'],['available']
Availability,"igurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const vector<double>&GetBoostWeights() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBDT.html:5938,error,error,5938,root/html602/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBDT.html,4,['error'],['error']
Availability,iguration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum Test error found - save the configuration ; : 120 | 11473 10462 0.0200241 0.00179418 43883.8 0; : 121 Minimum Test error found - save the configuration ; : 121 | 11379.1 10368.9 0.0200276 0.00179623 43880.4 0; : 122 Minimum Test error found - save the configuration ; : 122 | 11283.5 10279 0.0203977 0.00185462 43142.8 0; : 123 Minimum Test error found - save the configuration ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:25381,error,error,25381,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26170,error,error,26170,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26734,error,error,26734,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27980,error,error,27980,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36018,error,error,36018,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 253 | 3841.98 2951.54 0.0208487 0.0019305 42287.4 0; : 254 Minimum Test error found - save the configuration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40547,error,error,40547,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum Test error found - save the configuration ; : 345 | 1742.23 1092.31 0.0201296 0.00180634 43660.4 0; : 346 Minimum Test error found - save the configuration ; : 346 | 1726.84 1079.76 0.0201287 0.00180534 43660.1 0; : 347 Minimum Test error found - save the configuration ; : 347 | 1711.03 1067.63 0.0201353 0.00181782 43674.2 0; : 348 Minimum Test error found - save the configuration ; : 348 | 1695.85 1055.38 0.0201691 0.00181876 43596 0; : 349 Minimum Test error found - save the configuration ; : 349 | 1680.85 1042.99 0.0201335 0.00181253 43665.7 0; : 350 Minimum Test error found - save the configuration ; : 350 | 1665.28 1031.67 0.0201289 0.00181121 43673.7 0; : 351 Minimum Test error found - save the configuration ; : 351 | 1649.82 1020.23 0.0201549 0.00183189 43661 0; : 352 Minimum Test error found - save the configuration ; : 352 | 1635.63 1008.56 0.0201479 0.00180795 43620.7 0; : 353 Minimum Test error found - save the configuration ; : 353 | 1620.78 996.719 0.0201232 0.001813 43691.5 0; : 354 Minimum Test error found - save the configuration ; : 354 | 1605.94 985.366 0.0201287 0.00181207 43676.2 0; : 355 Minimum Test error found - save the configuration ; : 355 | 1591.13 974.131 0.0204416 0.00182759 42978.3 0; : 356 Minimum Test error found - save the configuration ; : 356 | 1576.72 963.473 0.0201234 0.00181346 43692.1 0; : 357 Minimum Test error found - save the configuration ; : 357 | 1562.75 952.48 0.0201406 0.00181733 43660.4 0; : 358 Minimum Test error found - save the configuration ; : 358 | 1548.22 941.458 0.0201341 0.00182516 43694.5 0; : 359 Minimum Test error found - save the configuration ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:50756,error,error,50756,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:55734,error,error,55734,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56410,error,error,56410,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 Minimum Test error found - save the configuration ; : 408 | 964.601 533.917 0.0201423 0.00181632 43653.8 0; : 409 Minimum Test error found - save the configuration ; : 409 | 955.421 527.595 0.0204236 0.00190128 43191.2 0; : 410 Minimum Test error found - save the configuration ; : 410 | 945.766 522.368 0.0209062 0.00188448 42057.3 0; : 411 Minimum Test error found - save the configuration ; : 411 | 936.425 516.53 0.0207319 0.00188678 42451.3 0; : 412 Minimum Test error found - save the configuration ; : 412 | 928.172 509.995 0.0202986 0.00182294 43300.2 0; : 413 Minimum Test error found - save the configuration ; : 413 | 918.166 504.988 0.0203305 0.00183515 43254.1 0; : 414 Minimum Test error found - save the configuration ; : 414 | 909.515 499.67 0.0201973 0.00182149 43535.5 0; : 415 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56861,error,error,56861,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Minimum Test error found - save the configuration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minimum Test error found - save the configuration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:61964,error,error,61964,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minimum Test error found - save the configuration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; : 459 Minimum Test error found - save the configuration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:62078,error,error,62078,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 459 | 578.684 310.243 0.020117 0.00181196 43703.7 0; : 460 Minimum Test error found - save the configuration ; : 460 | 572.668 306.849 0.0201178 0.00181375 43706.2 0; : 461 Minimum Test error found - save the configuration ; : 461 | 566.644 303.945 0.0201078 0.00181369 43730 0; : 462 Minimum Test error found - save the configuration ; : 462 | 560.843 301.023 0.0201248 0.00180535 43669.5 0; : 463 Minimum Test error found - save the configuration ; : 463 | 555.13 298.085 0.0201287 0.00181104 43673.6 0; : 464 Minimum Test error found - save the configuration ; : 464 | 549.755 294.833 0.0201145 0.00181462 43716.1 0; : 465 Minimum Test error found - save the configuration ; : 465 | 543.742 292.285 0.0201004 0.00181141 43742.2 0; : 466 Minimum Test error found - save the configuration ; : 466 | 538.058 289.638 0.0201135 0.00181083 43709.6 0; : 467 Minimum Test error found - save the configuration ; : 467 | 532.551 286.201 0.0203237 0.00183254 43264 0; : 468 Minimum Test error found - save the configuration ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:63895,error,error,63895,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78689,error,error,78689,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79592,error,error,79592,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92479,error,error,92479,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:93386,error,error,93386,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.907,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:101435,error,error,101435,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,iguration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22893,error,error,22893,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"iguration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitConfig.h 39474 2011-05-30 07:48:13Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitConfig.html:5041,error,error,5041,root/html530/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitConfig.html,1,['error'],['error']
Availability,"igure out total swap. This adds up the size of the swapfiles */; 4963 DIR *dirp = opendir(""/private/var/vm"");; 4964 if (!dirp); 4965 return;; 4966 ; 4967 Long64_t swap_total = 0;; 4968 struct dirent *dp;; 4969 while ((dp = readdir(dirp)) != 0) {; 4970 struct stat sb;; 4971 char fname [MAXNAMLEN];; 4972 if (strncmp(dp->d_name, ""swapfile"", 8)); 4973 continue;; 4974 strlcpy(fname, ""/private/var/vm/"",MAXNAMLEN);; 4975 strlcat (fname, dp->d_name,MAXNAMLEN);; 4976 if (stat(fname, &sb) < 0); 4977 continue;; 4978 swap_total += sb.st_size;; 4979 }; 4980 closedir(dirp);; 4981 ; 4982 Long64_t used = (Long64_t)(vm_info.active_count + vm_info.inactive_count + vm_info.wire_count) << pshift;; 4983 Long64_t free = (Long64_t)(vm_info.free_count) << pshift;; 4984 Long64_t total = (Long64_t)(vm_info.active_count + vm_info.inactive_count + vm_info.free_count + vm_info.wire_count) << pshift;; 4985 Long64_t avail = (Long64_t)(vm_info.inactive_count + vm_info.free_count) << pshift;; 4986 ; 4987 // Swap is available at same time as mem, so grab values here.; 4988 Long64_t swap_used = vm_info.pageouts << pshift;; 4989 ; 4990 meminfo->fMemTotal = (Int_t) (total >> 20); // divide by 1024 * 1024; 4991 meminfo->fMemUsed = (Int_t) (used >> 20);; 4992 meminfo->fMemFree = (Int_t) (free >> 20);; 4993 meminfo->fSwapTotal = (Int_t) (swap_total >> 20);; 4994 meminfo->fSwapUsed = (Int_t) (swap_used >> 20);; 4995 meminfo->fSwapFree = meminfo->fSwapTotal - meminfo->fSwapUsed;; 4996 meminfo->fMemAvailable = (Int_t)(avail >> 20);; 4997}; 4998 ; 4999////////////////////////////////////////////////////////////////////////////////; 5000/// Get process info for this process on Mac OS X.; 5001/// Code largely taken from:; 5002/// http://www.opensource.apple.com/source/top/top-15/libtop.c; 5003/// The virtual memory usage is slightly over estimated as we don't; 5004/// subtract shared regions, but the value makes more sense; 5005/// than using `virtual_size`, which is useless on 64-bit machines.; 5006 ; 5007stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:160928,avail,available,160928,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['avail'],['available']
Availability,"ii(); voidbin(); voidBinary(); virtual voidTObject::Browse(TBrowser* b); voidbye(); voidcd(const char* dir) const; Int_tChangeDirectory(const char* dir) const; Int_tChangePermission(const char* file, Int_t mode) const; voidchmod(const char* file, Int_t mode) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Int_tClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tDeleteDirectory(const char* dir) const; Int_tDeleteFile(const char* file) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreeDirectory(Bool_t print = kFALSE); voidget(const char* file, const char* localName = 0); Int_tGetBlockSize() const; const char*GetDirEntry(Bool_t print = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetFile(const char* file, const char* localName = 0); virtual const char*TObject::GetIconName() const; Int_tGetMode() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFTP.html:1840,Error,Error,1840,root/html532/TFTP.html,https://root.cern,https://root.cern/root/html532/TFTP.html,4,['Error'],['Error']
Availability,"ikelihood function (see note below) is used.; The functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; the file math/mathcore/src/FitUtil.cxx.; To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Chi2 Fits. By default a chi2 (least-square) fit is performed on the histogram. The so-called modified least-square method; is used where the residual for each bin is computed using as error the observed value (the bin error). Chi2 = Sum{ ( y(i) - f (x(i) | p )/ e(i) )^2 }. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for; an un-weighted histogram. Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins.; When using option ""I"" the residual is computed not using the function value at the bin center, f (x(i) | p), but the integral; of the function in the bin, Integral{ f(x|p)dx } divided by the bin volume. Likelihood Fits. When using option ""L"" a likelihood fit is used instead of the default chi2 square fit.; The likelihood is built assuming a Poisson probability density function for each bin.; The negative log-likelihood to be minimized is; NLL = Sum{ log Poisson( y(i) |{ f(x(i) | p ) ) }; The exact likelihood used is the Poisson likelihood described in this paper:; S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; Nucl. Instrum. Meth. 221 (1984) 437.; This method can then be used only when the bin content represents counts (i.e. errors are sqrt(N) ).; The likelihood method has the advantage of treating correctly bins with low statistics. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:81718,error,errors,81718,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['errors']
Availability,"il(conn->ssl);; 6223 ; 6224 if (to_read > 0) {; 6225 /* We already know there is no more data buffered in conn->buf; 6226 * but there is more available in the SSL layer. So don't poll; 6227 * conn->client.sock yet. */; 6228 ; 6229 pollres = 1;; 6230 if (to_read > len); 6231 to_read = len;; 6232 } else {; 6233 pfd[0].fd = conn->client.sock;; 6234 pfd[0].events = POLLIN;; 6235 ; 6236 to_read = len;; 6237 ; 6238 pollres = mg_poll(pfd,; 6239 1,; 6240 (int)(timeout * 1000.0),; 6241 &(conn->phys_ctx->stop_flag));; 6242 ; 6243 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6244 return -2;; 6245 }; 6246 }; 6247 ; 6248 if (pollres > 0) {; 6249 nread = mbed_ssl_read(conn->ssl, (unsigned char *)buf, to_read);; 6250 if (nread <= 0) {; 6251 if ((nread == MBEDTLS_ERR_SSL_WANT_READ); 6252 || (nread == MBEDTLS_ERR_SSL_WANT_WRITE); 6253 || nread == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6254 nread = 0;; 6255 } else {; 6256 fprintf(stderr, ""SSL read failed, error %d\n"", nread);; 6257 return -2;; 6258 }; 6259 } else {; 6260 err = 0;; 6261 }; 6262 ; 6263 } else if (pollres < 0) {; 6264 /* Error */; 6265 return -2;; 6266 } else {; 6267 /* pollres = 0 means timeout */; 6268 nread = 0;; 6269 }; 6270 ; 6271#elif !defined(NO_SSL); 6272 } else if (conn->ssl != NULL) {; 6273 int ssl_pending;; 6274 struct mg_pollfd pfd[1];; 6275 int pollres;; 6276 ; 6277 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6278 /* We already know there is no more data buffered in conn->buf; 6279 * but there is more available in the SSL layer. So don't poll; 6280 * conn->client.sock yet. */; 6281 if (ssl_pending > len) {; 6282 ssl_pending = len;; 6283 }; 6284 pollres = 1;; 6285 } else {; 6286 pfd[0].fd = conn->client.sock;; 6287 pfd[0].events = POLLIN;; 6288 pollres = mg_poll(pfd,; 6289 1,; 6290 (int)(timeout * 1000.0),; 6291 &(conn->phys_ctx->stop_flag));; 6292 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6293 return -2;; 6294 }; 6295 }; 6296 if (pollres > 0) {; 6297 ERR_clear_error();; 6298 nre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:182405,error,error,182405,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"il(conn->ssl);; 6224 ; 6225 if (to_read > 0) {; 6226 /* We already know there is no more data buffered in conn->buf; 6227 * but there is more available in the SSL layer. So don't poll; 6228 * conn->client.sock yet. */; 6229 ; 6230 pollres = 1;; 6231 if (to_read > len); 6232 to_read = len;; 6233 } else {; 6234 pfd[0].fd = conn->client.sock;; 6235 pfd[0].events = POLLIN;; 6236 ; 6237 to_read = len;; 6238 ; 6239 pollres = mg_poll(pfd,; 6240 1,; 6241 (int)(timeout * 1000.0),; 6242 &(conn->phys_ctx->stop_flag));; 6243 ; 6244 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6245 return -2;; 6246 }; 6247 }; 6248 ; 6249 if (pollres > 0) {; 6250 nread = mbed_ssl_read(conn->ssl, (unsigned char *)buf, to_read);; 6251 if (nread <= 0) {; 6252 if ((nread == MBEDTLS_ERR_SSL_WANT_READ); 6253 || (nread == MBEDTLS_ERR_SSL_WANT_WRITE); 6254 || nread == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6255 nread = 0;; 6256 } else {; 6257 fprintf(stderr, ""SSL read failed, error %d\n"", nread);; 6258 return -2;; 6259 }; 6260 } else {; 6261 err = 0;; 6262 }; 6263 ; 6264 } else if (pollres < 0) {; 6265 /* Error */; 6266 return -2;; 6267 } else {; 6268 /* pollres = 0 means timeout */; 6269 nread = 0;; 6270 }; 6271 ; 6272#elif !defined(NO_SSL); 6273 } else if (conn->ssl != NULL) {; 6274 int ssl_pending;; 6275 struct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:182437,error,error,182437,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:15900,error,error,15900,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,4,['error'],['error']
Availability,"ild .first, .second just fine; 2065 // and those for which the user explicitly requested a dictionary.; 2066 if (!isTransient && GetState() != kHasTClassInit; 2067 && TClassEdit::IsStdClass(GetName()); 2068 && !TClassEdit::IsStdPair(GetName())) {; 2069 Error(""BuildRealData"", ""Inspection for %s not supported!"", GetName());; 2070 }; 2071 ; 2072 // The following statement will recursively call; 2073 // all the subclasses of this class.; 2074 fRealData = new TList;; 2075 TBuildRealData brd(pointer, this);; 2076 ; 2077 // CallShowMember will force a call to InheritsFrom, which indirectly; 2078 // calls TClass::GetClass. It forces the loading of new typedefs in; 2079 // case some of them were not yet loaded.; 2080 if ( ! CallShowMembers(pointer, brd, isTransient) ) {; 2081 if ( isTransient ) {; 2082 // This is a transient data member, so it is probably fine to not have; 2083 // access to its content. However let's no mark it as definitively setup,; 2084 // since another class might use this class for a persistent data member and; 2085 // in this case we really want the error message.; 2086 delete fRealData;; 2087 fRealData = nullptr;; 2088 } else {; 2089 Error(""BuildRealData"", ""Cannot find any ShowMembers function for %s!"", GetName());; 2090 }; 2091 }; 2092 ; 2093 // Take this opportunity to build the real data for base classes.; 2094 // In case one base class is abstract, it would not be possible later; 2095 // to create the list of real data for this abstract class.; 2096 TBaseClass* base = nullptr;; 2097 TIter next(GetListOfBases());; 2098 while ((base = (TBaseClass*) next())) {; 2099 if (base->IsSTLContainer()) {; 2100 continue;; 2101 }; 2102 TClass* c = base->GetClassPointer();; 2103 if (c) {; 2104 c->BuildRealData(nullptr, isTransient);; 2105 }; 2106 }; 2107}; 2108 ; 2109////////////////////////////////////////////////////////////////////////////////; 2110/// Build the list of real data for an emulated class; 2111 ; 2112void TClass::BuildEmulatedRealData(const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:78394,error,error,78394,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['error'],['error']
Availability,"ild .first, .second just fine; 2132 // and those for which the user explicitly requested a dictionary.; 2133 if (!isTransient && GetState() != kHasTClassInit; 2134 && TClassEdit::IsStdClass(GetName()); 2135 && !TClassEdit::IsStdPair(GetName())) {; 2136 Error(""BuildRealData"", ""Inspection for %s not supported!"", GetName());; 2137 }; 2138 ; 2139 // The following statement will recursively call; 2140 // all the subclasses of this class.; 2141 fRealData = new TList;; 2142 TBuildRealData brd(pointer, this);; 2143 ; 2144 // CallShowMember will force a call to InheritsFrom, which indirectly; 2145 // calls TClass::GetClass. It forces the loading of new typedefs in; 2146 // case some of them were not yet loaded.; 2147 if ( ! CallShowMembers(pointer, brd, isTransient) ) {; 2148 if ( isTransient ) {; 2149 // This is a transient data member, so it is probably fine to not have; 2150 // access to its content. However let's no mark it as definitively setup,; 2151 // since another class might use this class for a persistent data member and; 2152 // in this case we really want the error message.; 2153 delete fRealData;; 2154 fRealData = nullptr;; 2155 } else {; 2156 Error(""BuildRealData"", ""Cannot find any ShowMembers function for %s!"", GetName());; 2157 }; 2158 }; 2159 ; 2160 // Take this opportunity to build the real data for base classes.; 2161 // In case one base class is abstract, it would not be possible later; 2162 // to create the list of real data for this abstract class.; 2163 TBaseClass* base = nullptr;; 2164 TIter next(GetListOfBases());; 2165 while ((base = (TBaseClass*) next())) {; 2166 if (base->IsSTLContainer()) {; 2167 continue;; 2168 }; 2169 TClass* c = base->GetClassPointer();; 2170 if (c) {; 2171 c->BuildRealData(nullptr, isTransient);; 2172 }; 2173 }; 2174}; 2175 ; 2176////////////////////////////////////////////////////////////////////////////////; 2177/// Build the list of real data for an emulated class; 2178 ; 2179void TClass::BuildEmulatedRealData(const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:81145,error,error,81145,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['error'],['error']
Availability,"ild;; 3584 }; 3585 ; 3586 virtual void HandleDiagnostic(clang::DiagnosticsEngine::Level DiagLevel, const clang::Diagnostic &Info) override; 3587 {; 3588 using namespace clang::diag;; 3589 ; 3590 // This method catches the module_build remark from clang and checks if; 3591 // the implicitly built module is a system module or not. We only support; 3592 // building system modules implicitly.; 3593 ; 3594 std::string moduleName;; 3595 const clang::Module *module = nullptr;; 3596 ; 3597 // Extract the module from the diag argument with index 0.; 3598 const auto &ID = Info.getID();; 3599 if (ID == remark_module_build || ID == remark_module_build_done) {; 3600 moduleName = Info.getArgStdStr(0);; 3601 module = fMap.findModule(moduleName);; 3602 // We should never be able to build a module without having it in the; 3603 // modulemap. Still, let's print a warning that we at least tell the; 3604 // user that this could lead to problems.; 3605 if (!module) {; 3606 ROOT::TMetaUtils::Warning(nullptr,; 3607 ""Couldn't find module %s in the available modulemaps. This""; 3608 ""prevents us from correctly diagnosing wrongly built modules.\n"",; 3609 moduleName.c_str());; 3610 }; 3611 }; 3612 ; 3613 // A dictionary module could build implicitly a set of implicit modules.; 3614 // For example, the Core module builds libc.pcm and std.pcm implicitly.; 3615 // Those modules do not require I/O information and it is okay to build; 3616 // them as part of another module.; 3617 // However, we can build a module which requires I/O implictly which is; 3618 // an error because rootcling is not able to generate the corresponding; 3619 // dictionary.; 3620 // If we build a I/O requiring module implicitly we should display; 3621 // an error unless -mSystemByproducts or -mByproduct were specified.; 3622 bool isByproductModule = false;; 3623 if (module) {; 3624 // -mSystemByproducts allows implicit building of any system module.; 3625 if (module->IsSystem && gOptSystemModuleByproducts) {; 3626 isByproduc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:143994,avail,available,143994,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['avail'],['available']
Availability,"ilding mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGCanvas * fCan;  provides scroll bars ;  ; TCanvas * fCanvas;  canvas related to the editor ;  ; TClass * fClass;  class of the selected object ;  ; TList fCreatedTabs;  list of created tabs ;  ; TMap fExclMap;  map of excluded editors for selected model ;  ; TMap fFrameMap;  global map of available frames ;  ; TList fGedFrames;  list visible of frames ;  ; Bool_t fGlobal;  true if editor is global ;  ; TObject * fModel;  selected object ;  ; TVirtualPad * fPad;  selected pad ;  ; TGTab * fTab;  tab widget holding the editor ;  ; TGCompositeFrame * fTabContainer;  main tab container ;  ; TList fVisibleTabs;  list ofcurrently used tabs ;  ;  Protected Attributes inherited from TGMainFrame; TList * fBindList;  list with key bindings ;  ; TString fClassName;  WM class name. ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ; TString fIconName;  icon name ;  ; TString fIconPixmap;  icon pixmap name ;  ; UInt_t fMWMFuncs;  MWM functions. ;  ; UInt_t fMWMInput;  MWM input modes. ;  ; UInt_t fMWMValue;  MWM decoration hints. ;  ; TString fResourceName;  WM resource name. ;  ; TString fWindowName;  window name ;  ; UInt_t fWMHeight;  WM height. ;  ; UInt_t fWMHeightInc;  WM height increments. ;  ; EInitialState fWMInitState;  WM initial state. ;  ; UInt_t fWMMaxHeight;  WM max height. ;  ; UInt_t fWMMaxWidth;  WM max width. ;  ; UInt_t fWMMinHeight;  WM min height.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:33816,avail,available,33816,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['avail'],['available']
Availability,"ile RooLegacyExpPoly.h. Public Member Functions;  RooLegacyExpPoly ();  ;  RooLegacyExpPoly (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, int lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooLegacyExpPoly (const RooLegacyExpPoly &other, const char *name=nullptr);  Copy constructor. ;  ; void adjustLimits ();  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; std::string getFormulaExpression (bool expand) const;  ; double getLogVal (const RooArgSet *nset) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; int lowestOrder () const;  Return the order for the first coefficient in the list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooAbsReal const & x () const;  Get the x variable. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:1834,error,error,1834,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['error'],['error']
Availability,"ile TBranchElement.h. ◆ GetClonesName(). virtual const char * TBranchElement::GetClonesName ; (; ); const. inlinevirtual . Definition at line 188 of file TBranchElement.h. ◆ GetCollectionProxy(). TVirtualCollectionProxy * TBranchElement::GetCollectionProxy ; (; ). Return the collection proxy describing the branch content, if any. ; Definition at line 2527 of file TBranchElement.cxx. ◆ GetCurrentClass(). TClass * TBranchElement::GetCurrentClass ; (; ). Return a pointer to the current type of the data member corresponding to branch element. ; Definition at line 2600 of file TBranchElement.cxx. ◆ GetEntry(). Int_t TBranchElement::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). overridevirtual . Read all branches of a BranchElement and return total number of bytes. . If entry = 0, then use current entry number + 1.; If entry < 0, then reset entry number to 0. Returns the number of bytes read from the input buffer.; If entry does not exist, then returns 0.; If an I/O error occurs, then returns -1. See IMPORTANT REMARKS in TTree::GetEntry. ; Reimplemented from TBranch.; Definition at line 2671 of file TBranchElement.cxx. ◆ GetExpectedType(). Int_t TBranchElement::GetExpectedType ; (; TClass *& ; clptr, . EDataType & ; type . ). overridevirtual . Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ; Reimplemented from TBranch.; Definition at line 2804 of file TBranchElement.cxx. ◆ GetFullName(). TString TBranchElement::GetFullName ; (; ); const. overridevirtual . Return the 'full' name of the branch. ; In particular prefix the mother's name when it does not end in a trailing dot and thus is not part of the branch name ; Reimplemented from TBranch.; Definition at line 2839 of file TBranchElement.cxx. ◆ GetIconName(). const char * TBranchElement::GetIconName ; (; ); con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:51930,error,error,51930,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['error'],['error']
Availability,"ile TGraphAsymmErrors.cxx. ◆ ~TGraphAsymmErrors(). TGraphAsymmErrors::~TGraphAsymmErrors ; (; ). override . TGraphAsymmErrors default destructor. ; Definition at line 433 of file TGraphAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0. . ). virtual . Add a point with asymmetric errorbars to the graph. ; Definition at line 451 of file TGraphAsymmErrors.cxx. ◆ Allocate(). Double_t ** TGraphAsymmErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 444 of file TGraphAsymmErrors.cxx. ◆ Apply(). void TGraphAsymmErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 468 of file TGraphAsymmErrors.cxx. ◆ BayesDivide(). void TGraphAsymmErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept for backward compatibility. ; You should rather use the Divide method. It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 508 of file TGraphAsymmErrors.cxx. ◆ Class(). static TClass * TGraphAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphAsymmErrors::Class_Version ; (; ). inlinestat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:41166,down,down,41166,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,1,['down'],['down']
Availability,ile TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 80 of file TGraphBentErrors.h. ◆ GetEXlowd(). Double_t * TGraphBentErrors::GetEXlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 84 of file TGraphBentErrors.h. ◆ GetEYhigh(,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:40697,error,error,40697,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"ile TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:75116,error,errors,75116,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"ile TH1.cxx. ◆ Integral() [3/4]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. privatevirtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented from TH1.; Definition at line 330 of file TH1.cxx. ◆ Integral() [4/4]. Double_t TH3::Integral ; (; Option_t * ; option = """"); const. overridevirtual . Return integral of bin contents. ; Only bins in the bins range are considered. By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x, y and in z. ; Reimplemented from TH1.; Definition at line 1390 of file TH3.cxx. ◆ IntegralAndError() [1/2]. Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. privatevirtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented from TH1.; Definition at line 332 of file TH1.cxx. ◆ IntegralAndError() [2/2]. Double_t TH3::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Int_t ; biny1, . Int_t ; biny2, . Int_t ; binz1, . Int_t ; binz2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ; Calculates also the integral error using error propagation from the bin errors assuming that all the bins are uncorrelated. By default the integral is comput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:86430,error,error,86430,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['error'],['error']
Availability,"ile TH1Editor.cxx. ◆ BuildHistCoordsComboBox(). TGComboBox * TH1Editor::BuildHistCoordsComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create coordinate system type combo box. ; Definition at line 2302 of file TH1Editor.cxx. ◆ BuildHistErrorComboBox(). TGComboBox * TH1Editor::BuildHistErrorComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create error type combo box. ; Definition at line 2320 of file TH1Editor.cxx. ◆ BuildHistTypeComboBox(). TGComboBox * TH1Editor::BuildHistTypeComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create histogram type combo box. ; Definition at line 2282 of file TH1Editor.cxx. ◆ BuildPercentComboBox(). TGComboBox * TH1Editor::BuildPercentComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create Percentage combo box for bar option. ; Definition at line 2353 of file TH1Editor.cxx. ◆ ChangeErrorCombo(). void TH1Editor::ChangeErrorCombo ; (; Int_t ; i). private . Change the error combo box entry. ; Definition at line 2371 of file TH1Editor.cxx. ◆ ConnectSignals2Slots(). void TH1Editor::ConnectSignals2Slots ; (; ). protectedvirtual . Connect signals to slots. ; Definition at line 532 of file TH1Editor.cxx. ◆ CreateBinTab(). void TH1Editor::CreateBinTab ; (; ). protected . Create binning tab. ; Definition at line 340 of file TH1Editor.cxx. ◆ Dividers(). Int_t * TH1Editor::Dividers ; (; Int_t ; n). Return an array of dividers of n (without the trivial divider n). ; The number of dividers is saved in the first entry. ; Definition at line 2417 of file TH1Editor.cxx. ◆ DoAddB(). void TH1Editor::DoAddB ; (; Bool_t ; on). virtual . Slot connected to the bar Add check box. ; Definition at line 948 of file TH1Editor.cxx. ◆ DoAddBar(). void TH1Editor::DoAddBar ; (; Bool_t ; on). virtual . Slot connected to the bar Add check box. ; Definition at line 991 of file TH1Editor.cxx. ◆ DoAddMarker(). void TH1Editor::DoAddMarker ; (; Bool_t ; on). virtual . Slot connected to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:46135,error,error,46135,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['error'],['error']
Availability,"ile TLinearFitter.cxx. ◆ Merge(). Int_t TLinearFitter::Merge ; (; TCollection * ; list). virtual . Merge objects in list. ; Definition at line 1441 of file TLinearFitter.cxx. ◆ MultiGraphLinearFitter(). Int_t TLinearFitter::MultiGraphLinearFitter ; (; Double_t ; h). private . Minimisation function for a TMultiGraph. ; Definition at line 1903 of file TLinearFitter.cxx. ◆ operator=(). TLinearFitter & TLinearFitter::operator= ; (; const TLinearFitter & ; tlf). Assignment operator. ; Definition at line 425 of file TLinearFitter.cxx. ◆ Partition(). Int_t TLinearFitter::Partition ; (; Int_t ; nmini, . Int_t * ; indsubdat . ). private . divides the elements into approximately equal subgroups number of elements in each subgroup is stored in indsubdat number of subgroups is returned ; Definition at line 2554 of file TLinearFitter.cxx. ◆ PrintResults(). void TLinearFitter::PrintResults ; (; Int_t ; level, . Double_t ; amin = 0 . ); const. overridevirtual . Level = 3 (to be consistent with minuit) prints parameters and parameter errors. ; Implements TVirtualFitter.; Definition at line 1748 of file TLinearFitter.cxx. ◆ RDraw(). void TLinearFitter::RDraw ; (; Int_t * ; subdat, . Int_t * ; indsubdat . ). private . Draws ngroup nonoverlapping subdatasets out of a dataset of size n such that the selected case numbers are uniformly distributed from 1 to n. ; Definition at line 2606 of file TLinearFitter.cxx. ◆ ReleaseParameter(). void TLinearFitter::ReleaseParameter ; (; Int_t ; ipar). overridevirtual . Releases parameter #ipar. ; Implements TVirtualFitter.; Definition at line 1046 of file TLinearFitter.cxx. ◆ SetBasisFunctions(). void TLinearFitter::SetBasisFunctions ; (; TObjArray * ; functions). virtual . set the basis functions in case the fitting function is not set directly The TLinearFitter will manage and delete the functions contained in the list ; Definition at line 1460 of file TLinearFitter.cxx. ◆ SetDim(). void TLinearFitter::SetDim ; (; Int_t ; n). virtual . set the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:47045,error,errors,47045,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['error'],['errors']
Availability,ile TListOfEnumsWithLock.cxx. ◆ LastLink(). TObjLink * TListOfEnumsWithLock::LastLink ; (; ); const. overridevirtual . Reimplemented from TList.; Definition at line 284 of file TListOfEnumsWithLock.cxx. ◆ MakeIterator(). TIterator * TListOfEnumsWithLock::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a list iterator. ; Reimplemented from TList.; Definition at line 220 of file TListOfEnumsWithLock.cxx. ◆ operator=(). TListOfEnumsWithLock & TListOfEnumsWithLock::operator= ; (; const TListOfEnumsWithLock & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfEnumsWithLock::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented from TListOfEnums.; Definition at line 190 of file TListOfEnumsWithLock.cxx. ◆ Remove() [1/2]. TObject * TListOfEnumsWithLock::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Reimplemented from TListOfEnums.; Definition at line 201 of file TListOfEnumsWithLock.cxx. ◆ Remove() [2/2]. TObject * TListOfEnumsWithLock::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from TListOfEnums.; Definition at line 210 of file TListOfEnumsWithLock.cxx. ◆ Streamer(). void TListOfEnumsWithLock::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TListOfEnums. ◆ StreamerNVirtual(). void TListOfEnumsWithLock::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TListOfEnumsWithLock.h. Libraries for TListOfEnumsWithLock:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:31921,avail,available,31921,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['avail'],['available']
Availability,"ile TProofPlayer.h. ◆ DeclFileName(). static const char * TProofPlayerSuperMaster::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 442 of file TProofPlayer.h. ◆ HandleTimer(). Bool_t TProofPlayerSuperMaster::HandleTimer ; (; TTimer * ; timer). overrideprotectedvirtual . Send progress and feedback to client. ; Reimplemented from TProofPlayerRemote.; Definition at line 4828 of file TProofPlayer.cxx. ◆ IsA(). TClass * TProofPlayerSuperMaster::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayerRemote.; Definition at line 442 of file TProofPlayer.h. ◆ Process() [1/2]. Long64_t TProofPlayerSuperMaster::Process ; (; TDSet * ; dset, . const char * ; selector_file, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; Runs on super master. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayerRemote.; Definition at line 4481 of file TProofPlayer.cxx. ◆ Process() [2/2]. Long64_t TProofPlayerSuperMaster::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). inlineoverridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of an error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayerRemote.; Definition at line 423 of file TProofPlayer.h. ◆ Progress() [1/6]. void TProofPlayerSuperMaster::Progress ; (; Long64_t ; total, . Long64_t ; processed . ). inlineoverridevirtual . Progress signal. ; Reimplemented from TProofPlayerRemote.; Definition at line 428 of file TProofPlayer.h. ◆ Progress() [2/6]. void TProofPlayerSuperMaster::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:28322,error,error,28322,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['error'],['error']
Availability,"ile and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inherita",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:42182,failure,failures,42182,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['failure'],['failures']
Availability,"ile being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. The string passed will be owned by; the environment and can not be reused till a ""name"" is set; again. The solution below will lose the space for the string; in that case, but if this functions is not called thousands; of times that should not be a problem. const char * Getenv(const char* name); Get environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:29447,error,error,29447,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"ile being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. const char * Getenv(const char* name); Get environment variable. void Unsetenv(const char* name); Unset environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:29787,error,error,29787,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,6,['error'],['error']
Availability,"ile being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:31200,error,error,31200,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,10,['error'],['error']
Availability,"ile f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in RSnapshotOptions: RSnapshotOptions opts;; opts.fLazy = true;; df.Snapshot(""outputTree"", ""outputFile.root"", {""x""}, opts);; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapsh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:126264,avail,available,126264,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['avail'],['available']
Availability,"ile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReadBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:29701,error,errors,29701,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,4,['error'],['errors']
Availability,"ile name; TArchiveMember*fCurMemberCurrent archive member; TFile*fFileFile stream used to access the archive; Int_tfMemberIndexIndex of sub-file in archive; TStringfMemberNameSub-file name; TObjArray*fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArchiveFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th sub-file. This method is; normally only called via TFile. ~TArchiveFile(); Dtor. Long64_t GetMemberFilePosition() const; Return position in archive of current member. Int_t GetNumberOfMembers() const; Returns number of members in archive. Int_t SetMember(const char* member); Explicitely make the specified member the current member.; Returns -1 in case of error, 0 otherwise. Int_t SetMember(Int_t idx); Explicitely make the member with the specified index the current member.; Returns -1 in case of error, 0 otherwise. TArchiveFile * Open(const char* url, TFile* file); Return proper archive file handler depending on passed url.; The handler is loaded via the plugin manager and is triggered by; the extension of the archive file. In case no handler is found 0; is returned. The file argument is used to access the archive.; The archive should be specified as url with the member name as the; anchor, e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#tpc.root"",; where tpc.root is the file in the archive to be opened.; Alternatively the sub-file can be specified via its index number,; e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#3"".; This function is normally only called via TFile::Open(). Bool_t ParseUrl(const char* url, TString& archive, TString& member, TString& type); Try to determine if url contains an anchor specifying an archive member.; Returns kFALSE in case of an error. TArchiveFile(const TArchiveFile& ). TArchiveFile& operator=(const TArchiveFile& ). TArchiveFile(); { }. Int_t O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TArchiveFile.html:7449,error,error,7449,root/html602/TArchiveFile.html,https://root.cern,https://root.cern/root/html602/TArchiveFile.html,4,['error'],['error']
Availability,"ile needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TApplicationRemote.html:17996,error,error,17996,root/html604/TApplicationRemote.html,https://root.cern,https://root.cern/root/html604/TApplicationRemote.html,2,['error'],['error']
Availability,"ile needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationRemote.html:17996,error,error,17996,root/html602/TApplicationRemote.html,https://root.cern,https://root.cern/root/html602/TApplicationRemote.html,2,['error'],['error']
Availability,"ile path are determined, the file will be accessed; via the rootd daemon. File names have to be specified like:; castor:/castor/cern.ch/user/r/rdm/bla.root. If Castor 2.1 is used the file names can also be specified; in the following ways:. castor://stager_host:stager_port/?path=/castor/cern.ch/user/; r/rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. castor://stager_host/?path=/castor/cern.ch/user/; r/rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. castor:///castor?path=/castor/cern.ch/user/; r/rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. path is mandatory as parameter but all the other ones are optional. Use ""&rootAuth=<auth_prot_code>"" in the option field to force the; specified authentication protocol when contacting the server, e.g. castor:///castor?path=/castor/cern.ch/user/r/rdm/bla.root; &svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION&rootAuth=3. will try first the globus/GSI protocol; available protocols are; 0: passwd, 1: srp, 2: krb5, 3: globus, 4: ssh, 5 uidgid; The defaul is taken from the env ROOTCASTORAUTH. Function Members (Methods); public:. TCastorFile(); TCastorFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual~TCastorFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCastorFile.html:1415,avail,available,1415,root/html530/TCastorFile.html,https://root.cern,https://root.cern/root/html530/TCastorFile.html,3,['avail'],['available']
Availability,"ile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:83830,down,downloaded,83830,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['down'],['downloaded']
Availability,"ile' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); Merge all TFileCollection objects in li into this TFileCollection object.; Updates counters at the end.; Returns the number of merged collections or -1 in case of error. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines). void SetAnchor(const char* anchor); Calls TUrl::SetAnchor() for all URLs contained in all TFileInfos. void SetBitAll(UInt_t f); Set the bit for all TFileInfos. void ResetBitAll(UInt_t f); Reset the bit for all TFileInfos. const char * GetDefaultTreeName() const; Returns the tree set with SetDefaultTreeName if set; Returns the name o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFileCollection.html:9277,avail,available,9277,root/html532/TFileCollection.html,https://root.cern,https://root.cern/root/html532/TFileCollection.html,2,['avail'],['available']
Availability,"ile' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); Merge all TFileCollection objects in li into this TFileCollection object.; Updates counters at the end.; Returns the number of merged collections or -1 in case of error. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines); ""filter:[SsCc]"" invokes PrintDetailed() which prints out dataset; content in a formatted fashion by filtering on files; which are (S)taged or not (s), (C)orrupted or not (c). void PrintDetailed(TString& showOnly) const. void FormatSize(Long64_t bytes, TString& um, Double_t& size) const. void SetAnchor(const char* anchor); Calls TUrl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileCollection.html:9431,avail,available,9431,root/html534/TFileCollection.html,https://root.cern,https://root.cern/root/html534/TFileCollection.html,6,['avail'],['available']
Availability,"ile(const char* url, Option_t* options = """"); Construct a TS3WebFile object. The path argument is a URL of one of the; following forms:. s3://host.example.com/bucket/path/to/my/file; s3http://host.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:27535,down,downloading,27535,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,6,['down'],['downloading']
Availability,"ile. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphErrors.cxx. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Author: Rene Brun 15/09/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12 ; 13#include ""TROOT.h""; 14#include ""TBuffer.h""; 15#include ""TGraphErrors.h""; 16#include ""TStyle.h""; 17#include ""TMath.h""; 18#include ""TVirtualPad.h""; 19#include ""TH1.h""; 20#include ""TF1.h""; 21#include ""TVectorD.h""; 22#include ""TSystem.h""; 23#include ""strtok.h""; 24 ; 25#include <iostream>; 26#include <fstream>; 27#include <cstring>; 28#include <string>; 29 ; 30ClassImp(TGraphErrors);; 31 ; 32 ; 33////////////////////////////////////////////////////////////////////////////////; 34 ; 35/** \class TGraphErrors; 36 \ingroup Graphs; 37A TGraphErrors is a TGraph with error bars.; 38 ; 39The TGraphErrors painting is performed thanks to the TGraphPainter; 40class. All details about the various painting options are given in this class.; 41 ; 42The picture below gives an example:; 43 ; 44Begin_Macro(source); 45{; 46 auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; 47 c1->SetFillColor(42);; 48 c1->SetGrid();; 49 c1->GetFrame()->SetFillColor(21);; 50 c1->GetFrame()->SetBorderSize(12);; 51 const Int_t n = 10;; 52 Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; 53 Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; 54 Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; 55 Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; 56 auto gr = new TGraphErrors(n,x,y,ex,ey);; 57 gr->SetTitle(""TGraphErrors Example"");; 58 gr->SetMarkerColor(4);; 59 gr->SetMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:1196,error,error,1196,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['error']
Availability,"ile. Currently there are two supported layouts:. TXMLSetup::kSpecialized = 2; This is default layout of the file, when xml nodes names class names and data member; names are used. For instance:; <TAttLine version=""1"">; <fLineColor v=""1""/>; <fLineStyle v=""1""/>; <fLineWidth v=""1""/>; </TAttLine>. TXMLSetup::kGeneralized = 3; For this layout all nodes name does not depend from class definitions.; The same class looks like; <Class name=""TAttLine"" version=""1"">; <Member name=""fLineColor"" v=""1""/>; <Member name=""fLineStyle"" v=""1""/>; <Member name=""fLineWidth"" v=""1""/>; </Member>. void SetStoreStreamerInfos(Bool_t iConvert = kTRUE); If true, all correspondent to file TStreamerInfo objects will be stored in file; this allows to apply schema avolution later for this file; may be usefull, when file used outside ROOT and TStreamerInfo objects does not required; Can be changed only for newly created file. void SetUsedDtd(Bool_t use = kTRUE); Specify usage of DTD for this file.; Currently this option not available (always false).; Can be changed only for newly created file. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); Specifiy usage of namespaces in xml file; In current implementation every instrumented class in file gets its unique namespace,; which is equal to name of class and refer to root documentation page like; <TAttPad xmlns:TAttPad=""http://root.cern.ch/root/htmldoc/TAttPad.html"" version=""3"">; And xml node for class member gets its name as combination of class name and member name; <TAttPad:fLeftMargin v=""0.100000""/>; <TAttPad:fRightMargin v=""0.100000""/>; <TAttPad:fBottomMargin v=""0.100000""/>; and so on; Usage of namespace increase size of xml file, but makes file more readable; and allows to produce DTD in the case, when in several classes data member has same name; Can be changed only for newly created file. Bool_t AddXmlComment(const char* comment); Add comment line on the top of the xml document; This line can only be seen in xml editor and cannot be accessed late",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLFile.html:31096,avail,available,31096,root/html534/TXMLFile.html,https://root.cern,https://root.cern/root/html534/TXMLFile.html,6,['avail'],['available']
Availability,"ile. Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEntries) for; additional option.; If SetEventList was used on the TTree or TChain, only that subset; of entries will be considered. Long64_t GetEntriesFriend() const; Return pointer to the 1st Leaf named name in any Branch of this Tree or; any branch in the list of friend trees. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of entry and return total number of bytes read. getall = 0 : get only active branches; getall = 1 : get all branches. The function returns the number of bytes read from the input buffer.; If entry does not exist the function returns 0.; If an I/O error occurs, the function returns -1. If the Tree has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""a"" and ""b"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent"",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous object; for each branch. You can force the previous object to be automatically; deleted if you call mybranch.SetAutoDelete(kTRUE) (default is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:91429,error,error,91429,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,2,['error'],['error']
Availability,"ile. Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEntries) for; additional option.; If SetEventList was used on the TTree or TChain, only that subset; of entries will be considered. Long64_t GetEntriesFriend() const; Return pointer to the 1st Leaf named name in any Branch of this Tree or; any branch in the list of friend trees. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of entry and return total number of bytes read. getall = 0 : get only active branches; getall = 1 : get all branches. The function returns the number of bytes read from the input buffer.; If entry does not exist the function returns 0.; If an I/O error occurs, the function returns -1. If the Tree has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""a"" and ""b"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent."",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. Without the trailing dot in the branch creation you have no choice but to; call SetBranchStatus explicitly for each of the sub branches. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:95028,error,error,95028,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['error'],['error']
Availability,"ile. Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEntries) for; additional option.; If SetEventList was used on the TTree or TChain, only that subset; of entries will be considered. Long64_t GetEntriesFriend() const; Return pointer to the 1st Leaf named name in any Branch of this Tree or; any branch in the list of friend trees. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of entry and return total number of bytes read. getall = 0 : get only active branches; getall = 1 : get all branches. The function returns the number of bytes read from the input buffer.; If entry does not exist the function returns 0.; If an I/O error occurs, the function returns -1. If the Tree has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""u"" and ""v"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent"",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous object; for each branch. You can force the previous object to be automatically; deleted if you call mybranch.SetAutoDelete(kTRUE) (default is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:87232,error,error,87232,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['error'],['error']
Availability,"ile.cxx. ◆ ProcessHttpHeader(). void TWebFile::ProcessHttpHeader ; (; const TString & ; headerLine). protectedvirtual . Process the HTTP header in the argument. ; This method is intended to be overwritten by subclasses that exploit the information contained in the HTTP headers. ; Reimplemented in TS3WebFile.; Definition at line 1432 of file TWebFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TWebFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). overridevirtual . Read specified byte range from remote file via HTTP daemon. ; This routine connects to the remote host, sends the request and returns the buffer. Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 429 of file TWebFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TWebFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). overridevirtual . Read specified byte range from remote file via HTTP daemon. ; This routine connects to the remote host, sends the request and returns the buffer. Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 467 of file TWebFile.cxx. ◆ ReadBuffer10(). Bool_t TWebFile::ReadBuffer10 ; (; char * ; buf, . Int_t ; len . ). protectedvirtual . Read specified byte range from remote file via HTTP 1.0 daemon (without mod-root installed). ; This routine connects to the remote host, sends the request and returns the buffer. Returns kTRUE in case of error. ; Definition at line 478 of file TWebFile.cxx. ◆ ReadBuffers(). Bool_t TWebFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). overridevirtual . Read specified byte ranges from remote file via HTTP daemon. ; Reads the nbuf blocks described in arrays pos and len, where pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 517 of file TWebFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:53584,error,error,53584,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['error'],['error']
Availability,"ile.h:50; TProfile::GetBDouble_t * GetB()Definition TProfile.h:64; TProfile::~TProfile~TProfile() overrideDefault destructor for Profile histograms.Definition TProfile.cxx:100; TProfile::SetBinsvoid SetBins(const Int_t *nbins, const Double_t *range)Definition TProfile.h:54; TProfile::fYminDouble_t fYminLower limit in Y (if set)Definition TProfile.h:41; TProfile::fBinEntriesTArrayD fBinEntriesnumber of entries per binDefinition TProfile.h:39; TProfile::GetWDouble_t * GetW()Definition TProfile.h:66; TProfile::Approximatestatic void Approximate(Bool_t approx=kTRUE)Static function to set the fgApproximate flag.Definition TProfile.cxx:324; TProfile::fScalingBool_t fScaling! True when TProfile::Scale is calledDefinition TProfile.h:43; TProfile::GetStatsvoid GetStats(Double_t *stats) const overridefill the array stats from the contents of this profile.Definition TProfile.cxx:921; TProfile::IsATClass * IsA() const overrideDefinition TProfile.h:138; TProfile::GetErrorOptionOption_t * GetErrorOption() constReturn option to compute profile errors.Definition TProfile.cxx:896; TProfile::LabelsOptionvoid LabelsOption(Option_t *option=""h"", Option_t *axis=""X"") overrideSet option(s) to draw axis with labels.Definition TProfile.cxx:1001; TProfile::GetW2Double_t * GetW2()Definition TProfile.h:67; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:85584,error,errors,85584,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['errors']
Availability,"ile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootrc file. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. The current directory (gFile) is changed to this file. void SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFile.html:37002,failure,failure,37002,root/html530/TFile.html,https://root.cern,https://root.cern/root/html530/TFile.html,9,['failure'],['failure']
Availability,"ile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootrc file. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. The current directory (gFile) is changed to this file. void SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. void SetCompressionLevel(Int_t level = 1); Set level of compression for this file:; level = 0 objects written to this file will not be compressed.; level = 1 minimal compression level but fast. level = 9 maximal compression level but slow. Note that the compression level may be changed at any time.; The new compression level will only apply to newly written objects.; The function TFile::Map shows the compression factor; for each object written to this file.; The function TFile::GetCompressionFactor returns the global; compression factor for this file. void SetCacheRead(TFileCacheRead",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:36276,failure,failure,36276,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,1,['failure'],['failure']
Availability,"ile2D.h:67; TProfile2D::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile2D.cxx:1474; TProfile2D::BufferFillInt_t BufferFill(Double_t, Double_t) overrideaccumulate arguments in buffer.Definition TProfile2D.h:44; TProfile2D::fTsumwzDouble_t fTsumwzTotal Sum of weight*Z.Definition TProfile2D.h:39; TProfile2D::FillInt_t Fill(const Double_t *v)Definition TProfile2D.h:51; TProfile2D::ProjectionXYTH2D * ProjectionXY(const char *name=""_pxy"", Option_t *option=""e"") constProject this profile2D into a 2-D histogram along X,Y.Definition TProfile2D.cxx:1287; TProfile2D::MultiplyBool_t Multiply(TF1 *h1, Double_t c1=1) overridePerforms the operation: this = this*c1*f1.Definition TProfile2D.cxx:1235; TProfile2D::LabelsDeflatevoid LabelsDeflate(Option_t *axis=""X"") overrideReduce the number of bins for this axis to the number of bins having a label.Definition TProfile2D.cxx:980; TProfile2D::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturn bin error of a Profile2D histogram.Definition TProfile2D.cxx:881; TProfile2D::GetBinContentDouble_t GetBinContent(Int_t binx, Int_t biny, Int_t) const overrideDefinition TProfile2D.h:115; TProfile2D::Approximatestatic void Approximate(Bool_t approx=kTRUE)Static function, set the fgApproximate flag.Definition TProfile2D.cxx:277; TProfile2D::GetBinSumw2virtual const TArrayD * GetBinSumw2() constDefinition TProfile2D.h:122; TProfile2D::fErrorModeEErrorType fErrorModeOption to compute errors.Definition TProfile2D.h:35; TProfile2D::fZminDouble_t fZminLower limit in Z (if set)Definition TProfile2D.h:36; TProfile2D::RebinXTProfile2D * RebinX(Int_t ngroup=2, const char *newname="""") overrideRebin only the X axis.Definition TProfile2D.cxx:1837; TProfile2D::FillInt_t Fill(const char *namex, const char *namey, Double_t z) overrideIncrement cell defined by namex,namey by a weight w.Definition TProfile2D.h:112; TProfile2D::GetW2Double_t * GetW2()Definition TProfile2D.h:66; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8h_source.html:12435,error,error,12435,doc/master/TProfile2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8h_source.html,1,['error'],['error']
Availability,"ile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,...Definition TProfile3D.h:27; TProfile3D::operator=TProfile3D & operator=(const TProfile3D &profile)Definition TProfile3D.cxx:162; TProfile3D::GetBinErrorSqUncheckedDouble_t GetBinErrorSqUnchecked(Int_t bin) const overrideDefinition TProfile3D.h:67; TProfile3D::DoProjectProfile2DTProfile2D * DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const overrideInternal method to project to a 2D Profile.Definition TProfile3D.cxx:1069; TProfile3D::GetWDouble_t * GetW()Definition TProfile3D.h:75; TProfile3D::MergeLong64_t Merge(TCollection *list) overrideMerge all histograms in the collection in this histogram.Definition TProfile3D.cxx:894; TProfile3D::fgApproximatestatic Bool_t fgApproximateBin error approximation option.Definition TProfile3D.h:42; TProfile3D::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TProfile3D.h:65; TProfile3D::GetErrorOptionOption_t * GetErrorOption() constReturn option to compute profile2D errors.Definition TProfile3D.cxx:753; TProfile3D::fScalingBool_t fScaling! True when TProfile3D::Scale is calledDefinition TProfile3D.h:38; TProfile3D::SetBinsvoid SetBins(const Int_t *nbins, const Double_t *range)Definition TProfile3D.h:50; TProfile3D::FillInt_t Fill(Double_t, Double_t, Double_t) overrideIncrement cell defined by x,y,z by 1 .Definition TProfile3D.h:57; TProfile3D::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile3D.cxx:1175; TProfile3D::Copyvoid Copy(TObject &hnew) const overrideCopy a Profile3D histogram to a new prof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8h_source.html:11228,error,error,11228,doc/master/TProfile3D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8h_source.html,1,['error'],['error']
Availability,"ile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. void BuildOptions(Double_t ymin, Double_t ymax, Option_t* option); Set Profile histogram structure and options*-*-; *-* ===========================================; ymin: minimum value allowed for y; ymax: maximum value allowed for y; if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax = +inf). option: this is the option for the computation of the y error of the profile ( TProfile::GetBinError ); possible values for the options are:. ' ' (Default) the bin errors are the standard error on the mean of Y = S(Y)/SQRT(N); where S(Y) is the standard deviation (RMS) of the Y data in the bin; and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); (i.e the errors are the standard error on the bin content of the profile). 's' Errors are the standard deviation of Y, S(Y). 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); The only difference is only when the standard deviation in Y is zero.; In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; 1./SQRT(12*N).; This approximation assumes that the Y values are integer (e.g. ADC counts); and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12). 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin J; W is obtained as from TProfile::GetBinEntries(ibin); This errors corresponds to the standard deviation of weighted mean where each; measurement Y is uncorrelated and has an error sigma, which is expressed in the; weight used to fill the Profile: w = 1/sigma^2; The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ). TProfile(const TProfile& profile); Copy constructor. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:31125,error,error,31125,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,9,"['Error', 'error']","['Errors', 'error']"
Availability,"ile::Close(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTDirectoryFile::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTDirectoryFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTDirectoryFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual TObject*TDirectoryFile::Get(const char* namecycle); virtual Int_tTDirectoryFile::GetBufferSize() const; const TDatime&TDirectoryFile::GetCreationDate() const; virtual TDirectory*TDirectoryFile::GetDirectory(const char* apath, Bool_t printError = false, const char* funcname = ""GetDirectory""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:3232,error,error,3232,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,2,['error'],['error']
Availability,"ile; 2673/// - <em>dirnameProjectSource.cxx</em>,which contains all the constructors and destructors implementation.; 2674/// and one header per class that is not nested inside another class.; 2675/// The header file name is the fully qualified name of the class after all the special characters; 2676/// ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is; 2677/// pair_edm__Vertex_int_.h; 2678///; 2679/// In the generated classes, map, multimap when the first template parameter is a class; 2680/// are replaced by a vector of pair. set and multiset when the tempalte parameter; 2681/// is a class are replaced by a vector. This is required since we do not have the; 2682/// code needed to order and/or compare the object of the classes.; 2683/// This is a quick explanation of the options available:; 2684/// Option | Details; 2685/// -------|--------; 2686/// new (default) | A new directory dirname is created. If dirname already exist, an error message is printed and the function returns.; 2687/// recreate | If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files.; 2688/// update | New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"".; 2689/// genreflex | Use genreflex rather than rootcint to generate the dictionary.; 2690/// par | Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname).; 2691///; 2692/// If, in addition to one of the 3 above options, the option ""+"" is specified,; 2693/// the function will generate:; 2694/// - a script called MAKEP to build the shared lib; 2695/// - a dirnameLinkDef.h file; 2696/// - rootcint will be run to g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:95723,error,error,95723,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['error'],['error']
Availability,"ile; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MisClassificationError.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MisClassificationError.html:1476,error,error,1476,root/html530/TMVA__MisClassificationError.html,https://root.cern,https://root.cern/root/html530/TMVA__MisClassificationError.html,2,['error'],['error']
Availability,"ile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReadBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:28798,error,errors,28798,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,4,['error'],['errors']
Availability,"ile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetFile.html:26786,error,errors,26786,root/html528/TXNetFile.html,https://root.cern,https://root.cern/root/html528/TXNetFile.html,6,['error'],['errors']
Availability,"ileInfoMeta(const char* objPath, const char* objDir, const char* objClass, Long64_t entries = -1, Long64_t first = 0, Long64_t last = -1, Long64_t totbytes = -1, Long64_t zipbytes = -1); virtual~TFileInfoMeta(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClass() const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; Long64_tGetLast() const; virtual const char*TNamed::GetName() const; const char*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFileInfoMeta.html:1641,Error,Error,1641,root/html532/TFileInfoMeta.html,https://root.cern,https://root.cern/root/html532/TFileInfoMeta.html,2,['Error'],['Error']
Availability,"ilename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t*) const; virtual voidSetPoints(Float_t*) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHalfSpace.html:10451,Toler,Tolerance,10451,root/html534/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html534/TGeoHalfSpace.html,1,['Toler'],['Tolerance']
Availability,"ilename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:29022,error,error,29022,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,10,['error'],['error']
Availability,"ilename); Process an additional configuration file. int fReadFile(const char* fileName, bool is_included = false); Parses the configuration file. The objects can be specified following; the rules of the RooFactoryWSTool, plus some more flexibility. The official format for the datacards is "".rs"". All the instructions end with a "";"" (like in C++). Carriage returns and white lines are irrelevant but adviced since they; improve readability (like in C++). The (Roo)ClassName::objname(description) can be replaced with the more; ""pythonic"" objname = (Roo)ClassName(description). The comments can be specified with a ""//"" if on a single line or with; /* */ if on multiple lines (like in C++). The ""#include path/to/file.rs"" statement triggers the inclusion of a; configuration fragment. The ""import myobject:myworkspace:myrootfile"" will add to the Workspace; the object myobject located in myworkspace recorded in myrootfile.; Alternatively, one could choose the ""import myobject:myrootfile"" in case; no Workspace is present. The ""echo"" statement prompts a message on screen. void fCreateCategory(); Builds the category necessary for the mutidimensional models. Its name; will be <HLFactory name>_category and the types are specified by the; model labels. bool fNamesListsConsistent(); Check the number of entries in each list. If not the same and the list; is not empty prompt an error. int fParseLine(TString& line); Parse a single line and puts the content in the RooWorkSpace. void DumpCfg(const char* cardname); Dump the Workspace content as configuration file; It needs some workspace object list or something.. {cardname=0;}. RooWorkspace* GetWs(); Get the RooWorkspace containing the models and variables. {return fWs;}. » Last changed: root/roostats:$Id: HLFactory.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HLFactory.html:8956,echo,echo,8956,root/html526/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__HLFactory.html,2,"['echo', 'error']","['echo', 'error']"
Availability,"ilename); Process an additional configuration file. int fReadFile(const char* fileName, bool is_included = false); Parses the configuration file. The objects can be specified following; the rules of the RooFactoryWSTool, plus some more flexibility. The official format for the datacards is "".rs"". All the instructions end with a "";"" (like in C++). Carriage returns and white lines are irrelevant but adviced since they; improve readability (like in C++). The (Roo)ClassName::objname(description) can be replaced with the more; ""pythonic"" objname = (Roo)ClassName(description). The comments can be specified with a ""//"" if on a single line or with; /* */ if on multiple lines (like in C++). The ""#include path/to/file.rs"" statement triggers the inclusion of a; configuration fragment. The ""import myobject:myworkspace:myrootfile"" will add to the Workspace; the object myobject located in myworkspace recorded in myrootfile.; Alternatively, one could choose the ""import myobject:myrootfile"" in case; no Workspace is present. The ""echo"" statement prompts a message on screen. void fCreateCategory(); Builds the category necessary for the mutidimensional models. Its name; will be <HLFactory name>_category and the types are specified by the; model labels. bool fNamesListsConsistent(); Check the number of entries in each list. If not the same and the list; is not empty prompt an error. int fParseLine(TString& line); Parse a single line and puts the content in the RooWorkSpace. void DumpCfg(const char* cardname); Dump the Workspace content as configuration file; It needs some workspace object list or something.. {cardname=0;}. RooWorkspace* GetWs(); Get the RooWorkspace containing the models and variables. {return fWs;}. » Last changed: root/roostats:$Id: HLFactory.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HLFactory.html:8950,echo,echo,8950,root/html528/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__HLFactory.html,2,"['echo', 'error']","['echo', 'error']"
Availability,"ilename; filename is assumed to contain at least two columns of numbers; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be skipped,; a ""%*lg"" for each column can be added, e.g. ""%lg %*lg %lg"" would read x-values from; the first and y-values from the third column. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(const TF1* f1) const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort. Bool_t CompareX(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fX[left] > fX[right]. Can be used by Sort. Bool_t CompareY(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fY[left] > fY[right]. Can be used by Sort. Bool_t CompareRadius(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s distance to origin is bigger than; that of point number ""right"". Can be used by Sort. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute the x/y range of the points in this graph. void CopyAndRelease(Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:16032,error,errors,16032,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,2,['error'],['errors']
Availability,"iler version identifier string. ;  ; virtual const char * GetBuildDir () const;  Return the path of the build directory. ;  ; virtual const char * GetBuildNode () const;  Return the build node name. ;  ; virtual int GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; virtual Int_t GetCryptoRandom (void *buf, Int_t len);  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; virtual TString GetDirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual const char * GetDynamicPath ();  Return the dynamic path (used to find shared libraries). ;  ; virtual Int_t GetEffectiveGid ();  Returns the effective group id. ;  ; virtual Int_t GetEffectiveUid ();  Returns the effective user id. ;  ; virtual const char * Getenv (const char *env);  Get environment variable. ;  ; virtual const char * GetError ();  Return system error string. ;  ; const char * GetErrorStr () const;  ; virtual const char * GetFlagsDebug () const;  Return the debug flags. ;  ; virtual const char * GetFlagsOpt () const;  Return the optimization flags. ;  ; virtual Int_t GetFPEMask ();  Return the bitmap of conditions that trigger a floating point exception. ;  ; virtual TString GetFromPipe (const char *command);  Execute command and return output in TString. ;  ; virtual int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree);  Get info about a file system: fs type, block size, number of blocks, number of free blocks. ;  ; virtual Int_t GetGid (const char *group=nullptr);  Returns the group's id. If group = 0, returns current user's group. ;  ; virtual UserGroup_t * GetGroupInfo (const char *group=nullptr);  Returns all group info in the UserGroup_t structure. ;  ; virtual UserGroup_t * GetGroupInfo (Int_t gid);  Returns all group info in the UserGroup_t structure. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:6888,error,error,6888,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,3,['error'],['error']
Availability,"iles, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <fcntl.h>; 197 ; 198#include <libc_extensions.h>; 199 ; 200/* Max worker threads is the max of pthreads minus the main application thread; 201 * and minus the main civetweb thread, thus -2; 202 */; 203#define MAX_WORKER_THREADS (CONFIG_MAX_PTHREAD_COUNT - 2); 204 ; 205#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1); 206#define ZEPHYR_STACK_SIZE USE_STACK_SIZE; 207#else; 208#define ZEPHYR_STACK_SIZE (1024 * 16); 209#endif; 210 ; 211K_THREAD_STACK_DEFINE(civetweb_main_stack, ZEPHYR_STACK_SIZE);; 212K_THREAD_STACK_ARRAY_DEFINE(civetweb_worker_stacks,; 213 MAX_WORKER_THREADS,; 214 Z",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:7632,error,error,7632,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"ili::FitChisquareI ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Chisquare method. ; The ""I""ntegral method is used for each point the cache contains the following info; 1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); 2D : bc,e,xc,xw,yc,yw; 3D : bc,e,xc,xw,yc,yw,zc,zw . Definition at line 1809 of file TFumili.cxx. ◆ FitLikelihood(). void TFumili::FitLikelihood ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Likelihood method. ; Basically, it forms the likelihood by determining the Poisson probability that given a number of entries in a particular bin, the fit would predict it's value. This is then done for each bin, and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin) for each point the cache contains the following info; 1D : bc,e,xc (bin content, error, x of center of bin); 2D : bc,e,xc,yc; 3D : bc,e,xc,yc,zc . Definition at line 1884 of file TFumili.cxx. ◆ FitLikelihoodI(). void TFumili::FitLikelihoodI ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Likelihood method. ; Basically, it forms the likelihood by determining the Poisson probability that given a number of entries in a particular bin, the fit would predict it's value. This is then done for each bin, and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used for each point the cache contains the following info; 1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); 2D : bc,e,xc,xw,yc,yw; 3D : bc,e,xc,xw,yc,yw,zc,zw . Definition at line 1972 of file TFumili.cxx. ◆ FixParameter(). void TFumili::FixParameter ; (; Int_t ; ipar). overridevirtual . Fixes parameter number ipar. ; Implements TVirtualF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:31167,error,error,31167,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['error']
Availability,"iliR__EXTERN TFumili * gFumiliDefinition TFumili.h:117; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; TVirtualFitter.h; TF11-Dim function classDefinition TF1.h:233; TFumiliDefinition TFumili.h:11; TFumili::GetParameterDouble_t GetParameter(Int_t ipar) const overrideReturn current value of parameter ipar.Definition TFumili.cxx:835; TFumili::fWARNBool_t fWARNwarningsDefinition TFumili.h:29; TFumili::fNED12Int_t fNED12fNED1+fNED2Definition TFumili.h:18; TFumili::DeleteArraysvoid DeleteArrays()Deallocates memory. Called from destructor TFumili::~TFumili.Definition TFumili.cxx:261; TFumili::fNumericDerivativesBool_t fNumericDerivativesDefinition TFumili.h:32; TFumili::GetParErrorDouble_t GetParError(Int_t ipar) const overrideReturn error of parameter ipar.Definition TFumili.cxx:826; TFumili::IsFixedBool_t IsFixed(Int_t ipar) const overrideReturn kTRUE if parameter ipar is fixed, kFALSE otherwise)Definition TFumili.cxx:1060; TFumili::fNED2Int_t fNED2K - Length of vector X plus 2 (for chi2)Definition TFumili.h:17; TFumili::GetCovarianceMatrixElementDouble_t GetCovarianceMatrixElement(Int_t i, Int_t j) const overrideReturn element i,j from the covariance matrix.Definition TFumili.cxx:793; TFumili::ExecuteCommandInt_t ExecuteCommand(const char *command, Double_t *args, Int_t nargs) overrideExecute MINUIT commands.Definition TFumili.cxx:391; TFumili::fNparInt_t fNparfNpar - number of parametersDefinition TFumili.h:19; TFumili::PrintResultsvoid PrintResults(Int_t k, Double_t p) const overridePrints fit results.Definition TFumili.cxx:1483; TFumili::GetNumberFreeParametersInt_t GetNumberFreeParameters() const overrideReturn the number of free parameters.Definition TFumili.cxx:814; TFumili::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8h_source.html:7190,error,error,7190,doc/master/TFumili_8h_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8h_source.html,1,['error'],['error']
Availability,"ilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGListTreeEditorFrame(const TGWindow* p = 0, Int_t width = 250, Int_t height = 700); Constructor. ~TEveGListTreeEditorFrame(); Destructor. void SetEditorClass(const char* edclass); Set GED editor class. void ConnectSignals(); Connect list-tree signals. void DisconnectSignals(); Disconnect list-tree signals. void ReconfToHorizontal(); Reconfigure to horizontal layout, list-tree and editor side by side. void ReconfToVertical(); Reconfigure to vertical layout, list-tree above the editor. void ItemBelowMouse(TGListTreeItem* entry, UInt_t mask); Different item is below mouse. void ItemClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Item has been clicked, based on mouse button do:; M1 - select, show in editor;; M2 - paste (call gEve->ElementPaste();; M3 - popup context menu. void ItemDblClicked(TGListTreeItem* item, Int_t btn); Item has been double-clicked, potentially expand the children. void ItemKeyPress(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); A key has been pressed for an item. Only <Delete>, <Enter> and <Return> keys are handled here,; otherwise the control is passed back to TGListTree. TEveListTreeItem& operator=(const TEveGListTreeEditorFrame& ). TEveGListTreeEditorFrame(const TEveGListTreeEditorFrame& ). TGListTree* GetListTree() const; { return fListTree; }. TEveGedEditor* GetEditor() const; { return fEditor; }. » Last changed: root/eve:$Id: TEveBrowser.h 36955 2010-11-25 21:23:09Z matevz $ » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGListTreeEditorFrame.html:22754,mask,mask,22754,root/html528/TEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/root/html528/TEveGListTreeEditorFrame.html,2,['mask'],['mask']
Availability,"ilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGListTreeEditorFrame(const TGWindow* p = 0, Int_t width = 250, Int_t height = 700); Constructor. ~TEveGListTreeEditorFrame(); Destructor. void SetEditorClass(const char* edclass); Set GED editor class. void ConnectSignals(); Connect list-tree signals. void DisconnectSignals(); Disconnect list-tree signals. void ReconfToHorizontal(); Reconfigure to horizontal layout, list-tree and editor side by side. void ReconfToVertical(); Reconfigure to vertical layout, list-tree above the editor. void ItemBelowMouse(TGListTreeItem* entry, UInt_t mask); Different item is below mouse. void ItemClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Item has been clicked, based on mouse button do:; M1 - select, show in editor;; M2 - paste (call gEve->ElementPaste();; M3 - popup context menu. void ItemDblClicked(TGListTreeItem* item, Int_t btn); Item has been double-clicked, potentially expand the children. void ItemKeyPress(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); A key has been pressed for an item. Only <Delete>, <Enter> and <Return> keys are handled here,; otherwise the control is passed back to TGListTree. TEveListTreeItem& operator=(const TEveGListTreeEditorFrame& ). TEveGListTreeEditorFrame(const TEveGListTreeEditorFrame& ). TGListTree* GetListTree() const; { return fListTree; }. TEveGedEditor* GetEditor() const; { return fEditor; }. » Last changed: root/eve:$Id: TEveBrowser.h 36955 2010-11-25 21:23:09Z matevz $ » Last generated: 2011-07-04 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveGListTreeEditorFrame.html:22907,mask,mask,22907,root/html530/TEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/root/html530/TEveGListTreeEditorFrame.html,2,['mask'],['mask']
Availability,"ilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGListTreeEditorFrame(const TGWindow* p = 0, Int_t width = 250, Int_t height = 700); Constructor. ~TEveGListTreeEditorFrame(); Destructor. void SetEditorClass(const char* edclass); Set GED editor class. void ConnectSignals(); Connect list-tree signals. void DisconnectSignals(); Disconnect list-tree signals. void ReconfToHorizontal(); Reconfigure to horizontal layout, list-tree and editor side by side. void ReconfToVertical(); Reconfigure to vertical layout, list-tree above the editor. void ItemBelowMouse(TGListTreeItem* entry, UInt_t mask); Different item is below mouse. void ItemClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Item has been clicked, based on mouse button do:; M1 - select, show in editor;; M2 - paste (call gEve->ElementPaste();; M3 - popup context menu. void ItemDblClicked(TGListTreeItem* item, Int_t btn); Item has been double-clicked, potentially expand the children. void ItemKeyPress(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); A key has been pressed for an item. Only <Delete>, <Enter> and <Return> keys are handled here,; otherwise the control is passed back to TGListTree. TEveListTreeItem& operator=(const TEveGListTreeEditorFrame& ). TEveGListTreeEditorFrame(const TEveGListTreeEditorFrame& ). TGListTree* GetListTree() const; { return fListTree; }. TEveGedEditor* GetEditor() const; { return fEditor; }. » Last changed: root/eve:$Id: TEveBrowser.h 36955 2010-11-25 21:23:09Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveGListTreeEditorFrame.html:22907,mask,mask,22907,root/html532/TEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/root/html532/TEveGListTreeEditorFrame.html,4,['mask'],['mask']
Availability,"iling 0x00 0x00 0xff 0xff bytes; 12869 } else; 12870#endif; 12871 header[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);; 12872 ; 12873#if defined(GCC_DIAGNOSTIC); 12874#pragma GCC diagnostic pop; 12875#endif; 12876 ; 12877 /* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */; 12878 if (dataLen < 126) {; 12879 /* inline 7-bit length field */; 12880 header[1] = (unsigned char)dataLen;; 12881 headerLen = 2;; 12882 } else if (dataLen <= 0xFFFF) {; 12883 /* 16-bit length field */; 12884 uint16_t len = htons((uint16_t)dataLen);; 12885 header[1] = 126;; 12886 memcpy(header + 2, &len, 2);; 12887 headerLen = 4;; 12888 } else {; 12889 /* 64-bit length field */; 12890 uint32_t len1 = htonl((uint32_t)((uint64_t)dataLen >> 32));; 12891 uint32_t len2 = htonl((uint32_t)(dataLen & 0xFFFFFFFFu));; 12892 header[1] = 127;; 12893 memcpy(header + 2, &len1, 4);; 12894 memcpy(header + 6, &len2, 4);; 12895 headerLen = 10;; 12896 }; 12897 ; 12898 if (masking_key) {; 12899 /* add mask */; 12900 header[1] |= 0x80;; 12901 memcpy(header + headerLen, &masking_key, 4);; 12902 headerLen += 4;; 12903 }; 12904 ; 12905 retval = mg_write(conn, header, headerLen);; 12906 if (retval != (int)headerLen) {; 12907 /* Did not send complete header */; 12908 retval = -1;; 12909 } else {; 12910 if (dataLen > 0) {; 12911#if defined(USE_ZLIB) && defined(MG_EXPERIMENTAL_INTERFACES); 12912 if (use_deflate) {; 12913 retval = mg_write(conn, deflated, dataLen);; 12914 mg_free(deflated);; 12915 } else; 12916#endif; 12917 retval = mg_write(conn, data, dataLen);; 12918 }; 12919 /* if dataLen == 0, the header length (2) is returned */; 12920 }; 12921 ; 12922 /* TODO: Remove this unlock as well, when lock is removed. */; 12923 mg_unlock_connection(conn);; 12924 ; 12925 return retval;; 12926}; 12927 ; 12928int; 12929mg_websocket_write(struct mg_connection *conn,; 12930 int opcode,; 12931 const char *data,; 12932 size_t dataLen); 12933{; 12934 return mg_websocket_write_exec(conn, opcode, data, dataLen, 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:375654,mask,mask,375654,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['mask'],['mask']
Availability,"iling 0x00 0x00 0xff 0xff bytes; 12870 } else; 12871#endif; 12872 header[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);; 12873 ; 12874#if defined(GCC_DIAGNOSTIC); 12875#pragma GCC diagnostic pop; 12876#endif; 12877 ; 12878 /* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */; 12879 if (dataLen < 126) {; 12880 /* inline 7-bit length field */; 12881 header[1] = (unsigned char)dataLen;; 12882 headerLen = 2;; 12883 } else if (dataLen <= 0xFFFF) {; 12884 /* 16-bit length field */; 12885 uint16_t len = htons((uint16_t)dataLen);; 12886 header[1] = 126;; 12887 memcpy(header + 2, &len, 2);; 12888 headerLen = 4;; 12889 } else {; 12890 /* 64-bit length field */; 12891 uint32_t len1 = htonl((uint32_t)((uint64_t)dataLen >> 32));; 12892 uint32_t len2 = htonl((uint32_t)(dataLen & 0xFFFFFFFFu));; 12893 header[1] = 127;; 12894 memcpy(header + 2, &len1, 4);; 12895 memcpy(header + 6, &len2, 4);; 12896 headerLen = 10;; 12897 }; 12898 ; 12899 if (masking_key) {; 12900 /* add mask */; 12901 header[1] |= 0x80;; 12902 memcpy(header + headerLen, &masking_key, 4);; 12903 headerLen += 4;; 12904 }; 12905 ; 12906 retval = mg_write(conn, header, headerLen);; 12907 if (retval != (int)headerLen) {; 12908 /* Did not send complete header */; 12909 retval = -1;; 12910 } else {; 12911 if (dataLen > 0) {; 12912#if defined(USE_ZLIB) && defined(MG_EXPERIMENTAL_INTERFACES); 12913 if (use_deflate) {; 12914 retval = mg_write(conn, deflated, dataLen);; 12915 mg_free(deflated);; 12916 } else; 12917#endif; 12918 retval = mg_write(conn, data, dataLen);; 12919 }; 12920 /* if dataLen == 0, the header length (2) is returned */; 12921 }; 12922 ; 12923 /* TODO: Remove this unlock as well, when lock is removed. */; 12924 mg_unlock_connection(conn);; 12925 ; 12926 return retval;; 12927}; 12928 ; 12929int; 12930mg_websocket_write(struct mg_connection *conn,; 12931 int opcode,; 12932 const char *data,; 12933 size_t dataLen); 12934{; 12935 return mg_websocket_write_exec(conn, opcode, data, dataLen, 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:375687,mask,mask,375687,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['mask'],['mask']
Availability,"ility. ; Definition at line 8175 of file TProof.cxx. ◆ EnablePackage() [2/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . const char * ; loadopts, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. It is is possible to specify options for the loading step via 'loadopts'; the string will be passed passed as argument to SETUP. Special option 'chkv=<o>' (or 'checkversion=<o>') can be used to control plugin version checking during building: possible choices are: off no check; failure may occur at loading on check ROOT version [default] svn check ROOT version and Git commit SHA1. (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.) If specified, enables packages only on the specified workers. Returns 0 in case of success and -1 in case of error. ; Definition at line 8197 of file TProof.cxx. ◆ EnablePackage() [3/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . TList * ; loadopts, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. It is is possible to specify a list of objects to be passed to the SETUP functions via 'loadopts'; the objects must be streamable. Returns 0 in case of success and -1 in case of error. ; Definition at line 8258 of file TProof.cxx. ◆ Exec() [1/3]. Int_t TProof::Exec ; (; const char * ; cmd, . Bool_t ; plusMaster = kFALSE . ). Send command to be executed on the PROOF master and/or slaves. ; If plusMaster is kTRUE then exeucte on slaves and master too. Command can be any legal command line command. Commands like """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:87312,error,error,87312,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"ill be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture=CPU:Layout=TANH|50,TANH|50,TANH|50,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:3561,error,error,3561,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"ill be written as a single line containing the written values of each observable in the order they were declared in the dataset and separated by whitespaces ; Definition at line 1557 of file RooDataSet.cxx. ◆ write() [2/2]. bool RooDataSet::write ; (; std::ostream & ; ofs); const. Write the contents of this dataset to the stream. ; Each event will be written as a single line containing the written values of each observable in the order they were declared in the dataset and separated by whitespaces ; Definition at line 1577 of file RooDataSet.cxx. Friends And Related Symbol Documentation. ◆ RooProdGenContext. friend class RooProdGenContext. friend . Definition at line 122 of file RooDataSet.h. Member Data Documentation. ◆ _doWeightErrorCheck. bool RooDataSet::_doWeightErrorCheck {true}. private . ! When adding events with weights, check that weights can actually be stored. ; Definition at line 139 of file RooDataSet.h. ◆ _errorMsgCount. unsigned short RooDataSet::_errorMsgCount {0}. private . ! Counter to silence error messages when filling dataset. ; Definition at line 138 of file RooDataSet.h. ◆ _sumW2Buffer. std::unique_ptr<std::vector<double> > RooDataSet::_sumW2Buffer. mutableprivate . ! Buffer for sumW2 in case a batch of values is requested. ; Definition at line 141 of file RooDataSet.h. ◆ _varsNoWgt. RooArgSet RooDataSet::_varsNoWgt. protected . Vars without weight variable. ; Definition at line 130 of file RooDataSet.h. ◆ _wgtVar. RooRealVar* RooDataSet::_wgtVar = nullptr. protected . Pointer to weight variable (if set) ; Definition at line 131 of file RooDataSet.h. Libraries for RooDataSet:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooDataSet.h; roofit/roofitcore/src/RooDataSet.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:60597,error,error,60597,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['error']
Availability,"ill return; 9079/// the binContent - lower interval value; 9080 ; 9081Double_t TH1::GetBinErrorLow(Int_t bin) const; 9082{; 9083 if (fBinStatErrOpt == kNormal) return GetBinError(bin);; 9084 // in case of weighted histogram check if it is really weighted; 9085 if (fSumw2.fN && fTsumw != fTsumw2) return GetBinError(bin);; 9086 ; 9087 if (bin < 0) bin = 0;; 9088 if (bin >= fNcells) bin = fNcells-1;; 9089 if (fBuffer) ((TH1*)this)->BufferEmpty();; 9090 ; 9091 Double_t alpha = 1.- 0.682689492;; 9092 if (fBinStatErrOpt == kPoisson2) alpha = 0.05;; 9093 ; 9094 Double_t c = RetrieveBinContent(bin);; 9095 Int_t n = int(c);; 9096 if (n < 0) {; 9097 Warning(""GetBinErrorLow"",""Histogram has negative bin content-force usage to normal errors"");; 9098 ((TH1*)this)->fBinStatErrOpt = kNormal;; 9099 return GetBinError(bin);; 9100 }; 9101 ; 9102 if (n == 0) return 0;; 9103 return c - ROOT::Math::gamma_quantile( alpha/2, n, 1.);; 9104}; 9105 ; 9106////////////////////////////////////////////////////////////////////////////////; 9107/// Return upper error associated to bin number bin.; 9108///; 9109/// The error will depend on the statistic option used will return; 9110/// the binContent - upper interval value; 9111 ; 9112Double_t TH1::GetBinErrorUp(Int_t bin) const; 9113{; 9114 if (fBinStatErrOpt == kNormal) return GetBinError(bin);; 9115 // in case of weighted histogram check if it is really weighted; 9116 if (fSumw2.fN && fTsumw != fTsumw2) return GetBinError(bin);; 9117 if (bin < 0) bin = 0;; 9118 if (bin >= fNcells) bin = fNcells-1;; 9119 if (fBuffer) ((TH1*)this)->BufferEmpty();; 9120 ; 9121 Double_t alpha = 1.- 0.682689492;; 9122 if (fBinStatErrOpt == kPoisson2) alpha = 0.05;; 9123 ; 9124 Double_t c = RetrieveBinContent(bin);; 9125 Int_t n = int(c);; 9126 if (n < 0) {; 9127 Warning(""GetBinErrorUp"",""Histogram has negative bin content-force usage to normal errors"");; 9128 ((TH1*)this)->fBinStatErrOpt = kNormal;; 9129 return GetBinError(bin);; 9130 }; 9131 ; 9132 // for N==0 return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:355006,error,error,355006,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"ill the list of constant parameters. void setInitParList(const RooArgList& list); Fill the list of initial values of the floating parameters. void setFinalParList(const RooArgList& list); Fill the list of final values of the floating parameters. Int_t statusCodeHistory(UInt_t icycle) const. const char* statusLabelHistory(UInt_t icycle) const. RooPlot * plotOn(RooPlot* plot, const char* parName1, const char* parName2, const char* options = ""ME"") const; Add objects to a 2D plot that represent the fit results for the; two named parameters. The input frame with the objects added is; returned, or zero in case of an error. Which objects are added; are determined by the options string which should be a concatenation; of the following (not case sensitive):. M - a marker at the best fit result; E - an error ellipse calculated at 1-sigma using the error matrix at the minimum; 1 - the 1-sigma error bar for parameter 1; 2 - the 1-sigma error bar for parameter 2; B - the bounding box for the error ellipse; H - a line and horizontal axis for reading off the correlation coefficient; V - a line and vertical axis for reading off the correlation coefficient; A - draw axes for reading off the correlation coefficients with the H or V options. You can change the attributes of objects in the returned RooPlot using the; various RooPlot::getAttXxx(name) member functions, e.g. plot->getAttLine(""contour"")->SetLineStyle(kDashed);. Use plot->Print() for a list of all objects and their names (unfortunately most; of the ROOT builtin graphics objects like TLine are unnamed). Drag the left mouse; button along the labels of either axis button to interactively zoom in a plot. const RooArgList& randomizePars() const; Return a list of floating parameter values that are perturbed from the final; fit values by random amounts sampled from the covariance matrix. The returned; object is overwritten with each call and belongs to the RooFitResult. Uses; the ""square root method"" to decompose the covariance mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFitResult.html:11432,error,error,11432,root/html534/RooFitResult.html,https://root.cern,https://root.cern/root/html534/RooFitResult.html,30,['error'],['error']
Availability,"ill write into; the file ""FileMerger.root"" in the working directory. Returns true; on success, false in case of error. Bool_t MergeRecursive(TDirectory* target, TList* sourcelist, Int_t type = kRegular | kAll); Merge all objects in a directory; The type is defined by the bit values in EPartialMergeType:; kRegular : normal merge, overwritting the output file (default); kIncremental : merge the input file with the (existing) content of the output file (if already exising); kAll : merge all type of objects (default); kResetable : merge only the objects with a MergeAfterReset member function.; kNonResetable : merge only the objects without a MergeAfterReset member function.; kOnlyListed : merge only objects listed in fObjectNames; kSkipListed : skip merging of objects listed in fObjectNames. Bool_t PartialMerge(Int_t type = kAll | kIncremental); Merge the files. If no output file was specified it will write into; the file ""FileMerger.root"" in the working directory. Returns true; on success, false in case of error.; The type is defined by the bit values in EPartialMergeType:; kRegular : normal merge, overwritting the output file; kIncremental : merge the input file with the content of the output file (if already exising) (default); kAll : merge all type of objects (default); kResetable : merge only the objects with a MergeAfterReset member function.; kNonResetable : merge only the objects without a MergeAfterReset member function. If the type is set to kIncremental the output file is done deleted at the end of; this operation. If the type is not set to kIncremental, the output file is closed. Bool_t OpenExcessFiles(); Open up to fMaxOpenedFiles of the excess files. void RecursiveRemove(TObject* obj); Intercept the case where the output TFile is deleted!. void SetMaxOpenedFiles(Int_t newmax); Set a limit to the number file that TFileMerger will opened at one time.; If the request is higher than the system limit, we reset it to the system limit.; If the request is less tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileMerger.html:11992,error,error,11992,root/html602/TFileMerger.html,https://root.cern,https://root.cern/root/html602/TFileMerger.html,4,['error'],['error']
Availability,"illData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:26588,error,errors,26588,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['errors']
Availability,"illZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:40475,error,error,40475,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"ilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void Save (Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Save values of function in array fSave. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF12.html:16310,error,errors,16310,doc/master/classTF12.html,https://root.cern,https://root.cern/doc/master/classTF12.html,1,['error'],['errors']
Availability,"ilson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)Calculates the boundaries for the frequentist Wilson interval.Definition TEfficiency.cxx:3873; TEfficiency::CheckConsistencystatic Bool_t CheckConsistency(const TH1 &pass, const TH1 &total, Option_t *opt="""")Checks the consistence of the given histograms.Definition TEfficiency.cxx:1576; TEfficiency::ClopperPearsonstatic Double_t ClopperPearson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)Calculates the boundaries for the frequentist Clopper-Pearson interval.Definition TEfficiency.cxx:2016; TF11-Dim function classDefinition TF1.h:233; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphAsymmErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphAsymmErrors.h:74; TGraphAsymmErrors::SetPointEYlowvirtual void SetPointEYlow(Int_t i, Double_t eyl)Set EYlow for point i.Definition TGraphAsymmErrors.cxx:1376; TGraphAsymmErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphAsymmErrors.h:30; TGraphAsymmErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideReturns the combined error along Y at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1137; TGraphAsymmErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::Classstatic TClass * Class(); TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:58751,error,errorsDefinition,58751,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:11125,error,error,11125,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,12,['error'],['error']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:11125,error,error,11125,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,18,['error'],['error']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:10908,error,error,10908,root/html534/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,10,['error'],['error']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:10801,error,error,10801,root/html534/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,20,['error'],['error']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:11125,error,error,11125,root/html604/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,16,['error'],['error']
Availability,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:11125,error,error,11125,root/html604/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,14,['error'],['error']
Availability,"im, public ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. This class is also known as (typedefs to this class)ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::MinimTransformFunction::BaseGradFunc, ROOT::Math::IMultiGradFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IGradientFunctionMultiDim.html:1382,avail,available,1382,root/html534/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IGradientFunctionMultiDim.html,2,['avail'],['available']
Availability,"im::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html:3458,Error,Error,3458,root/html532/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html,8,['Error'],['Error']
Availability,"im>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:5795,error,errors,5795,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,2,['error'],['errors']
Availability,"im[ilax-1]);; 5544 fU[ilax-1] = TMath::Max(fU[ilax-1],fAlim[ilax-1]);; 5545 delu = fU[ilax-1] - ut;; 5546// stop if already at limit with negligible step size; 5547// add also a check if both numerator and denominarot are not zero (ROOT-10835)(LM); 5548 if ( (delu == 0 && ut == 0) ||; 5549 (TMath::Abs(delu) / (TMath::Abs(ut) + TMath::Abs(fU[ilax-1])) < fEpsmac)) goto L440;; 5550 fac = delu / fMNOTw[it-1];; 5551 for (i = 1; i <= fNpar; ++i) {; 5552 fX[i-1] = fXt[i-1] + fac*fMNOTxdev[i-1];; 5553 }; 5554 if (fISW[4] > 1) {; 5555 Printf("" PARAMETER %4d SET TO%11.3e + %10.3e = %12.3e"",ilax,ut,delu,fU[ilax-1]);; 5556 }; 5557// loop to hit AMIN+UP; 5558 fKe1cr = ilax;; 5559 fKe2cr = 0;; 5560 fXmidcr = fU[ilax-1];; 5561 fXdircr = delu;; 5562 ; 5563 fAmin = abest;; 5564 fNfcnmx = nlimit - fNfcn;; 5565 mncros(aopt, iercr);; 5566 if (abest - fAmin > fUp*.01) goto L650;; 5567 if (iercr == 1) goto L440;; 5568 if (iercr == 2) goto L450;; 5569 if (iercr == 3) goto L460;; 5570// error successfully calculated; 5571 eros = fXmidcr - ut + aopt*fXdircr;; 5572 if (fISW[4] > 1) {; 5573 Printf("" THE %4sTIVE MINOS ERROR OF PARAMETER %3d %10s, IS %12.4e""; 5574 ,(const char*)csig,ilax; 5575 ,(const char*)fCpnam[ilax-1],eros);; 5576 }; 5577 goto L480;; 5578// failure returns; 5579L440:; 5580 if (fISW[4] >= 1) {; 5581 Printf("" THE %4sTIVE MINOS ERROR OF PARAMETER %3d, %s EXCEEDS ITS LIMIT.""; 5582 ,(const char*)csig,ilax; 5583 ,(const char*)fCpnam[ilax-1]);; 5584 }; 5585 eros = fUndefi;; 5586 goto L480;; 5587L450:; 5588 if (fISW[4] >= 1) {; 5589 Printf("" THE %4sTIVE MINOS ERROR %4d REQUIRES MORE THAN %5d FUNCTION CALLS.""; 5590 ,(const char*)csig,ilax,nfmxin);; 5591 }; 5592 eros = 0;; 5593 goto L480;; 5594L460:; 5595 if (fISW[4] >= 1) {; 5596 Printf("" %4sTIVE MINOS ERROR NOT CALCULATED FOR PARAMETER %d""; 5597 ,(const char*)csig,ilax);; 5598 }; 5599 eros = 0;; 5600 ; 5601L480:; 5602 if (fISW[4] > 1) {; 5603 Printf("" **************************************************************************"");; 56",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:182100,error,error,182100,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"imate of the number of parameters of the function and its daughters. ;  ; RefCountListLegacyIterator_t * makeLegacyIterator (const RefCountList_t &list) const;  ; void substituteServer (RooAbsArg *oldServer, RooAbsArg *newServer);  Set by the RooFitDriver for this arg to retrieve its result in the run context. ;  . Friends; std::ostream & operator<< (std::ostream &os, const RooAbsArg &arg);  Ostream operator. ;  ; std::istream & operator>> (std::istream &is, RooAbsArg &arg);  Istream operator. ;  ; class RooAbsCollection;  ; class RooAbsReal;  ; class RooArgProxy;  list of caches ;  ; template<class RooCollection_t > ; class RooCollectionProxy;  ; class RooCompositeDataStore;  ; class RooDataSet;  ; class RooHistFunc;  ; class RooHistPdf;  ; class RooRealIntegral;  ; class RooRealMPFE;  ; void RooRefArray::Streamer (TBuffer &);  ; class RooTreeDataStore;  ; class RooVectorDataStore;  ; class RooWorkspace;  . Legacy RooFit interface.; This is a collection of functions that remain supported, but more elegant interfaces are usually available. . R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  . Addition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:40117,avail,available,40117,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['avail'],['available']
Availability,"imator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRobustEstimator.html:1005,robust,robust,1005,root/html528/TRobustEstimator.html,https://root.cern,https://root.cern/root/html528/TRobustEstimator.html,6,['robust'],['robust']
Availability,"ime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:65547,mask,mask,65547,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,2,['mask'],['mask']
Availability,"ime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:56580,mask,mask,56580,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['mask'],['mask']
Availability,"ime(); TGraphTime(const TGraphTime& gr); TGraphTime(Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual~TGraphTime(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(const TObject* obj, Int_t slot, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphTime.html:1633,Error,Error,1633,root/html532/TGraphTime.html,https://root.cern,https://root.cern/root/html532/TGraphTime.html,2,['Error'],['Error']
Availability,"ime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file ""wfil"" in a search path.; The search path is specified as a : separated list of directories.; Return value is pointing to wfile for compatibility with; Which(const char*,const char*,EAccessMode) version. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. The string passed will be owned by; the environment and can not be reused till a ""nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:28625,error,error,28625,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"ime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file ""wfil"" in a search path.; The search path is specified as a : separated list of directories.; Return value is pointing to wfile for compatibility with; Which(const char*,const char*,EAccessMode) version. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. const char * Getenv(const char* name); Get environment variable. void Unsetenv(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:28965,error,error,28965,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,6,['error'],['error']
Availability,"ime. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:23588,alive,alive,23588,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,6,['alive'],['alive']
Availability,"ime. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during qurey processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:22631,alive,alive,22631,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,4,['alive'],['alive']
Availability,"ime_t& ); Requests that the specified selection be converted to the specified; target type. Bool_t SetSelectionOwner(Window_t , Atom_t& ); Changes the owner and last-change time for the specified selection. void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); Alters the property for the specified window and causes the X server; to generate a PropertyNotify event on that window. void SetDNDAware(Window_t , Atom_t* ); Add XdndAware property and the list of drag and drop types to the; Window win. void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); Add the list of drag and drop types to the Window win. Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); Recursively search in the children of Window for a Window which is at; location x, y and is DND aware, with a maximum depth of maxd. Bool_t IsDNDAware(Window_t win, Atom_t* typelist); Checks if the Window is DND aware, and knows any of the DND formats; passed in argument. void BeginModalSessionFor(Window_t window); Start a modal session for a dialog window. Int_t SupportsExtension(const char* ext) const; Returns 1 if window system server supports extension given by the; argument, returns 0 in case extension is not supported and returns -1; in case of error (like server not initialized). void MapGCFont(GContext_t , FontStruct_t ); Map the XftFont with the Graphics Context using it. TVirtualX(); { }. TVirtualX(const char* name, const char* title). virtual ~TVirtualX(); { }. EDrawMode GetDrawMode(); { return fDrawMode; }. void QueryPointer(Int_t& ix, Int_t& iy). Bool_t IsCmdThread() const; { return kTRUE; }. » Author: Fons Rademakers 3/12/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-04-28 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:70794,error,error,70794,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,2,['error'],['error']
Availability,"ime_t& ); Requests that the specified selection be converted to the specified; target type. Bool_t SetSelectionOwner(Window_t , Atom_t& ); Changes the owner and last-change time for the specified selection. void ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); Alters the property for the specified window and causes the X server; to generate a PropertyNotify event on that window. void SetDNDAware(Window_t , Atom_t* ); Add XdndAware property and the list of drag and drop types to the; Window win. void SetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); Add the list of drag and drop types to the Window win. Window_t FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); Recursively search in the children of Window for a Window which is at; location x, y and is DND aware, with a maximum depth of maxd. Bool_t IsDNDAware(Window_t win, Atom_t* typelist); Checks if the Window is DND aware, and knows any of the DND formats; passed in argument. void BeginModalSessionFor(Window_t window); Start a modal session for a dialog window. Int_t SupportsExtension(const char* ext) const; Returns 1 if window system server supports extension given by the; argument, returns 0 in case extension is not supported and returns -1; in case of error (like server not initialized). void MapGCFont(GContext_t , FontStruct_t ); Map the XftFont with the Graphics Context using it. TVirtualX(); { }. TVirtualX(const char* name, const char* title). virtual ~TVirtualX(); { }. EDrawMode GetDrawMode(); { return fDrawMode; }. void QueryPointer(Int_t& ix, Int_t& iy). Bool_t IsCmdThread() const; { return kTRUE; }. » Author: Fons Rademakers 3/12/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualX.html:71502,error,error,71502,root/html604/TVirtualX.html,https://root.cern,https://root.cern/root/html604/TVirtualX.html,2,['error'],['error']
Availability,"imension of y-Errors.; 424This is useful if you want to plot statistic and systematic errors at once.; 425 ; 426To be able to define different drawing options for the multiple error dimensions; 427the option string can consist of multiple blocks separated by semicolons.; 428The painting method assigns these blocks to the error dimensions. The first block; 429is always used for the general draw options and options concerning the x-Errors.; 430In case there are less than NErrorDimensions + 1 blocks in the option string; 431the first block is also used for the first error dimension which is reserved for; 432statistical errors. The remaining blocks are assigned to the remaining dimensions.; 433 ; 434In addition to the draw options of options of `TGraphAsymmErrors` the following are possible:; 435 ; 436| Option | Block | Description |; 437|----------|----------------|-------------------------------------------------------------------|; 438| ""X0"" | First one only | Do not draw errors for points with x = 0 |; 439| ""Y0"" | First one only | Do not draw errors for points with y = 0 |; 440| ""s=%f"" | Any | Scales the x-Errors with %f similar to `gStyle->SetErrorX(dx)` but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) |; 441| ""S"" | First one only | Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. |; 442 ; 443 ; 444Per default the Fill and Line Styles of the Graph are being used for all error; 445dimensions. To use the specific ones add the draw option ""S"" to the first block.; 446 ; 447Begin_Macro(source); 448{; 449 auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; 450 double ax[] = {0, 1, 2, 3, 4};; 451 double ay[] = {0, 2, 4, 1, 3};; 452 double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; 453 double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; 454 double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; 455 double* aeyhstat = new double[5] {0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:17217,error,errors,17217,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,3,['error'],['errors']
Availability,"imensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; »",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__VirtualIntegratorMultiDim.html:1299,Error,Error,1299,root/html532/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__VirtualIntegratorMultiDim.html,2,['Error'],['Error']
Availability,"imensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoTube::SetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidTGeoTube::SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGeoTube::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoEltu(); TGeoEltu(Double_t* params); TGeoEltu(const TGeoEltu&); TGeoEltu(Double_t a, Double_t b, Double_t dz); TGeoEltu(const char* name, Double_t a, Double_t b, Double_t dz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoEltu.html:11321,Toler,Tolerance,11321,root/html602/TGeoEltu.html,https://root.cern,https://root.cern/root/html602/TGeoEltu.html,2,['Toler'],['Tolerance']
Availability,"imer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; Just like for the sum of event sizes, you need to add a variable in your macro. We want to histogram the particles' fPosX; the type of the data member should thus be TH1F *. TH1F is a 1 dimensional histogram storing floats for each bin, see the documentation. Don't forget to initialize the histogram pointer to 0, again just like for the event size sum.; Creating the Histogram; You then create the object with new TH1F(""hPosX"", ""Position in X"", 20, -5, 5);; Associate error bars with this histogram (see TH1F::Sumw2()); Filling the Histogram; The goal is to fill the histogram with the value of fPosX from the tree for all particles with a momentum > 40. You will need access to the particles' total momentum and their X position. Each TTree entry has several particles; it's thus easiest to use one TTreeReaderArray each for these Double_t values, for instance TTreeReaderArray particlesMomentum(myReader, ""fParticles.fMomentum"");. The TTreeReaderArray works just like the TTreeReaderValue we have used before, but gives you access to the number of particles using particlesMomentum.GetSize() and the n-th particle using the particlesMomentum[n] operator.; The analysis happens in loops. The outer loop is iterating through the TTree entries, using the TTreeReader::Next() loop - just as before. For each TTree entry, loop over all particles of the TTree entry with a simple for loop. For each particle, check that its momentum is > 40; if it is, fill the histogram (see TH1F::Fill()) with the fPosX va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:2471,error,error,2471,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,1,['error'],['error']
Availability,"imer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC server with port 1237 (only available with DABC installed); ""dabc:master_host:port"" - attach to DABC master, running on master_host:port (only available with DABC installed). void SetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); create timer which will invoke ProcessRequests() function periodically; Timer is required to perform all actions in main ROOT thread; Method arguments are the same as for TTimer constructor; By default, sync timer with 100 ms period is created. If milliSec == 0, no timer will be created.; In this case application should regularly call ProcessRequests() method. Bool_t VerifyFilePath(const char* fname); Checked that filename does not contains relative path below current directory; Used to prevent access to files below current directory. Bool_t IsFileRequested(const char* uri, TString& res) const; Verifies that request is just file name; File names typically contains pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THttpServer.html:8365,avail,available,8365,root/html602/THttpServer.html,https://root.cern,https://root.cern/root/html602/THttpServer.html,4,['avail'],['available']
Availability,"imetimestamp of the last send command for player process; Double_tfLastRWSendTimetimestamp of the last send command for file reads/writes; map<UInt_t,MonitoredTFileInfo*>*fMonInfoRepo! repo to gather per-file-instance mon info;; Int_tfPid! process id; Int_tfReportIntervalinterval after which to send the latest value; TStopwatchfStopwatchcpu and time measurement for job and proc status; TStringfSubJobId! sub job id; Bool_tfVerboseverbocity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonaLisaWriter(const char* monserver, const char* montag, const char* monid = 0, const char* monsubid = 0, const char* option = """"); Create MonaLisa write object. void Init(const char* monserver, const char* montag, const char* monid, const char* monsubid, const char* option); Creates a TMonaLisaWriter object to send monitoring information to a; MonaLisa server using the MonaLisa ApMon package (libapmoncpp.so/UDP; packets). The MonaLisa ApMon library for C++ can be downloaded at; http://monalisa.cacr.caltech.edu/monalisa__Download__ApMon.html,; current version:; http://monalisa.cacr.caltech.edu/download/apmon/ApMon_cpp-2.0.6.tar.gz. The ROOT implementation is primary optimized for process/job monitoring,; although all other generic MonaLisa ApMon functionality can be exploited; through the ApMon class directly (gMonitoringWriter->GetApMon()). Monitoring information in MonaLisa is structured in the following tree; structure:; <farmname>; |; ---> <nodename1>; |; ---> <key1> - <value1>; ---> <key2> - <value2>; ---> <nodename2>; |; ---> <key3> - <value3>; ---> <key4> - <value4>. The parameter monid is equivalent to the MonaLisa node name, for the; case of process monitoring it can be just an identifier to classify; the type of jobs e.g. ""PROOF_PROCESSING"".; If monid is not specified, TMonaLisaWriter tries to set it in this order; from environement variables:; - PROOF_JOB_ID; - GRID_JOB_ID; - LCG_JOB_ID; - ALIEN_MASTERJOB_ID; - ALIEN_PROC_ID. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:9629,down,downloaded,9629,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,3,['down'],['downloaded']
Availability,"imits:. Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of #((pi)/(2)); that MINUIT prints a warning to this effect when it prints; the parameter values.; The minimizer can become blocked at a limit, because at a limit the; derivative seen by the minimizer partial F/partial Pint is zero no matter; what the real derivative partial F/partial Pext is. ((partial F)/(partial P ))= ((partial F)/(partial P ))((partial P )/(partial P )) =((partial F)/(partial P ))= 0; int ext ext int ext. Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. Statistical interpretation:. For discussuion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:6445,error,errors,6445,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['error'],['errors']
Availability,"imits<std::size_t>::max() . ); const. overrideprotectedvirtual . Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ; Implements RooAbsData.; Definition at line 916 of file RooDataHist.cxx. ◆ registerWeightArraysToDataStore(). void RooDataHist::registerWeightArraysToDataStore ; (; ); const. private . Hand over pointers to our weight arrays to the data store implementation. ; Definition at line 2413 of file RooDataHist.cxx. ◆ removeSelfFromDir(). void RooDataHist::removeSelfFromDir ; (; ). inline . Definition at line 164 of file RooDataHist.h. ◆ reset(). void RooDataHist::reset ; (; ). overridevirtual . Reset all bin weights to zero. ; Reimplemented from RooAbsData.; Definition at line 2158 of file RooDataHist.cxx. ◆ set() [1/4]. void RooDataHist::set ; (; const RooArgSet & ; row, . double ; wgt, . double ; wgtErr = -1. . ). Set a bin content. ; Parameters. [in]rowCoordinates to compute the bin from. ; [in]wgtNew bin content. ; [in]wgtErrOptional error of the bin content. . Definition at line 1791 of file RooDataHist.cxx. ◆ set() [2/4]. void RooDataHist::set ; (; const RooArgSet & ; row, . double ; wgt, . double ; wgtErrLo, . double ; wgtErrHi . ). Set a bin content. ; Parameters. [in]rowCoordinates of the bin to be set. ; [in]wgtNew bin content. ; [in]wgtErrLoLow error of the bin content. ; [in]wgtErrHiHigh error of the bin content. . Definition at line 1732 of file RooDataHist.cxx. ◆ set() [3/4]. void RooDataHist::set ; (; double ; wgt, . double ; wgtErr = -1 . ). Write weight into current bin. ; Set bin content of bin that was last loaded with get(std::size_t).; Deprecated:Use set(std::size_t,double,double) ; Parameters. [in]wgtNew bin content. ; [in]wgtErrOptional error of the bin content. . Definition at line 1777 of file RooDataHist.cxx. ◆ set() [4/4]. void RooDataHist::set ; (; std::size_t ; binNumber, . double ; wgt, . double ; wgtErr . ). Set bin content of bin that was last loaded with get(std::size_t). ; Parameters. [i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:75148,error,error,75148,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['error']
Availability,"imization has to be done before and Minimum must be valid;; possibility to ask only for one side of the Minos Error;. Function Members (Methods); public:. ~MnMinos(); ROOT::Minuit2::MnCrossLoval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleLower(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MinosErrorMinos(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::MnMinos&); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); pair<double,double>operator()(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html:1388,toler,toler,1388,root/html530/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html,5,['toler'],['toler']
Availability,"imization has to be done before and Minimum must be valid;; possibility to ask only for one side of the Minos Error;. Function Members (Methods); public:. ~MnMinos(); ROOT::Minuit2::MnCrossLoval(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; doubleLower(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MinosErrorMinos(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::MnMinos&); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); pair<double,double>operator()(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnMinos&operator=(const ROOT::Minuit2::MnMinos&); doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.1000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html:1421,toler,toler,1421,root/html602/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html,4,['toler'],['toler']
Availability,"imize the size; 780/// of the TProcessID data structures in memory by forcing a delete of; 781/// the unused TProcessID.; 782 ; 783void TChain::CanDeleteRefs(bool flag /* = true */); 784{; 785 fCanDeleteRefs = flag;; 786}; 787 ; 788////////////////////////////////////////////////////////////////////////////////; 789/// Initialize the packet descriptor string.; 790 ; 791void TChain::CreatePackets(); 792{; 793 TIter next(fFiles);; 794 TChainElement* element = nullptr;; 795 while ((element = (TChainElement*) next())) {; 796 element->CreatePackets();; 797 }; 798}; 799 ; 800////////////////////////////////////////////////////////////////////////////////; 801/// Override the TTree::DirectoryAutoAdd behavior:; 802/// we never auto add.; 803 ; 804void TChain::DirectoryAutoAdd(TDirectory * /* dir */); 805{; 806}; 807 ; 808////////////////////////////////////////////////////////////////////////////////; 809/// Draw expression varexp for selected entries.; 810/// Returns -1 in case of error or number of selected events in case of success.; 811///; 812/// This function accepts TCut objects as arguments.; 813/// Useful to use the string operator +, example:; 814/// ~~~{.cpp}; 815/// ntuple.Draw(""x"",cut1+cut2+cut3);; 816/// ~~~; 817///; 818 ; 819Long64_t TChain::Draw(const char* varexp, const TCut& selection,; 820 Option_t* option, Long64_t nentries, Long64_t firstentry); 821{; 822 if (fProofChain) {; 823 // Make sure the element list is up to date; 824 if (!TestBit(kProofUptodate)); 825 SetProof(true, true);; 826 fProofChain->SetEventList(fEventList);; 827 fProofChain->SetEntryList(fEntryList);; 828 return fProofChain->Draw(varexp, selection, option, nentries, firstentry);; 829 }; 830 ; 831 return TChain::Draw(varexp, selection.GetTitle(), option, nentries, firstentry);; 832}; 833 ; 834////////////////////////////////////////////////////////////////////////////////; 835/// Process all entries in this chain and draw histogram corresponding to; 836/// expression varexp.; 837/// Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:31146,error,error,31146,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['error'],['error']
Availability,imized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; Minuit2Minimizer : Invalid minimum - status = 3; FVAL = -2419.31; Edm = -nan; Nfcn = 34; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28374; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 44 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:11975,error,errors,11975,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,4,['error'],"['error', 'errors']"
Availability,"imizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ; Definition at line 304 of file Minimizer.h. ◆ PrintLevel(). int ROOT::Math::Minimizer::PrintLevel ; (; ); const. inline . minimizer configuration parameters ; set print level ; Definition at line 291 of file Minimizer.h. ◆ PrintResults(). virtual void ROOT::Math::Minimizer::PrintResults ; (; ). inlinevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 282 of file Minimizer.h. ◆ ProvidesError(). virtual bool ROOT::Math::Minimizer::ProvidesError ; (; ); const. inlinevirtual . minimizer provides error and error matrix ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, TLinearMinimizer, TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 243 of file Minimizer.h. ◆ ReleaseVariable(). bool ROOT::Math::Minimizer::ReleaseVariable ; (; unsigned int ; ivar). virtual . release an existing variable ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 94 of file Minimizer.cxx. ◆ Scan(). bool ROOT::Math::Minimizer::Scan ; (; unsigned int ; ivar, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). virtual . scan function minimum for variable i. ; Variable and function must be set before using Scan Return false if an error or if minimizer does not support this functionality ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 195 of file Minimizer.cxx. ◆ SetCovariance(). bool ROOT::Math::Minimizer::SetCovariance ; (; std::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:25748,error,error,25748,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,2,['error'],['error']
Availability,"imizer object used for fitting ; Definition at line 353 of file FitResult.h. ◆ fMinimType. std::string ROOT::Fit::FitResult::fMinimType. protected . string indicating type of minimizer ; Definition at line 365 of file FitResult.h. ◆ fMinosErrors. std::map<unsigned int, std::pair<double,double> > ROOT::Fit::FitResult::fMinosErrors. protected . map contains the two Minos errors ; Definition at line 364 of file FitResult.h. ◆ fNCalls. unsigned int ROOT::Fit::FitResult::fNCalls. protected . number of function calls ; Definition at line 347 of file FitResult.h. ◆ fNdf. unsigned int ROOT::Fit::FitResult::fNdf. protected . number of degree of freedom ; Definition at line 346 of file FitResult.h. ◆ fNFree. unsigned int ROOT::Fit::FitResult::fNFree. protected . number of fit free parameters (total parameters are in size of parameter vector) ; Definition at line 345 of file FitResult.h. ◆ fNormalized. bool ROOT::Fit::FitResult::fNormalized. protected . flag for indicating is errors are normalized ; Definition at line 344 of file FitResult.h. ◆ fObjFunc. std::shared_ptr<ROOT::Math::IMultiGenFunction> ROOT::Fit::FitResult::fObjFunc. protected . ! objective function used for fitting ; Definition at line 354 of file FitResult.h. ◆ fParamBounds. std::vector<std::pair<double,double> > ROOT::Fit::FitResult::fParamBounds. protected . parameter bounds ; Definition at line 359 of file FitResult.h. ◆ fParams. std::vector<double> ROOT::Fit::FitResult::fParams. protected . parameter values. Size is total number of parameters ; Definition at line 360 of file FitResult.h. ◆ fParNames. std::vector<std::string> ROOT::Fit::FitResult::fParNames. protected . parameter names (only with FCN only fits, when fFitFunc=0) ; Definition at line 366 of file FitResult.h. ◆ fStatus. int ROOT::Fit::FitResult::fStatus. protected . minimizer status code ; Definition at line 348 of file FitResult.h. ◆ fVal. double ROOT::Fit::FitResult::fVal. protected . minimum function value ; Definition at line 350 of file Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:27488,error,errors,27488,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['error'],['errors']
Availability,"imizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:1850,toler,toler,1850,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,5,['toler'],['toler']
Availability,"imizer::FixVariable"", ""Fixing an existing variable not implemented"");; 90 MATH_UNUSED(ivar);; 91 return false;; 92}; 93/// release an existing variable; 94bool Minimizer::ReleaseVariable(unsigned int ivar); 95{; 96 MATH_ERROR_MSG(""Minimizer::ReleaseVariable"", ""Releasing an existing variable not implemented"");; 97 MATH_UNUSED(ivar);; 98 return false;; 99}; 100/// query if an existing variable is fixed (i.e. considered constant in the minimization); 101/// note that by default all variables are not fixed; 102bool Minimizer::IsFixedVariable(unsigned int ivar) const; 103{; 104 MATH_ERROR_MSG(""Minimizer::IsFixedVariable"", ""Querying an existing variable not implemented"");; 105 MATH_UNUSED(ivar);; 106 return false;; 107}; 108/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings); 109bool Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const; 110{; 111 MATH_ERROR_MSG(""Minimizer::GetVariableSettings"", ""Querying an existing variable not implemented"");; 112 MATH_UNUSED(ivar);; 113 MATH_UNUSED(pars);; 114 return false;; 115}; 116/** return covariance matrices element for variables ivar,jvar; 117 if the variable is fixed the return value is zero; 118 The ordering of the variables is the same as in the parameter and errors vectors; 119*/; 120double Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; 121{; 122 MATH_UNUSED(ivar);; 123 MATH_UNUSED(jvar);; 124 return 0;; 125}; 126 ; 127/**; 128 Fill the passed array with the covariance matrix elements; 129 if the variable is fixed or const the value is zero.; 130 The array will be filled as cov[i *ndim + j]; 131 The ordering of the variables is the same as in errors and parameter value.; 132 This is different from the direct interface of Minuit2 or TMinuit where the; 133 values were obtained only to variable parameters; 134*/; 135bool Minimizer::GetCovMatrix(double *covMat) const; 136{; 137 MATH_UNUSED(covMat);; 138 return false;; 139}; 140 ; 141/**; 142 Fill",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:4397,error,errors,4397,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['error'],['errors']
Availability,"imizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html:3422,toler,toler,3422,root/html534/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html,2,['toler'],['toler']
Availability,"imizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id: CombinedMinimizer.h 21",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html:3371,toler,toler,3371,root/html526/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html,5,['toler'],['toler']
Availability,"imizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html:3185,toler,toler,3185,root/html526/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html,7,['toler'],['toler']
Availability,"imizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::SimplexMinimizer&operator=(const ROOT::Minuit2::SimplexMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(); ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(const ROOT::Minuit2::SimplexMinimizer&). Data Members; private:. ROOT::Minuit2::SimplexBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Librari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html:3201,toler,toler,3201,root/html526/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html,7,['toler'],['toler']
Availability,"imizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::VariableMetricMinimizer&operator=(const ROOT::Minuit2::VariableMetricMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(); ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(const ROOT::Minuit2::VariableMetricMinimizer&). Data Members; private:. ROOT::Minuit2::VariableMetricBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__VariableMetricMinimizer.html:3247,toler,toler,3247,root/html526/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__VariableMetricMinimizer.html,7,['toler'],['toler']
Availability,"imizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__FitConfig.html:5501,error,error,5501,root/html534/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__FitConfig.html,6,['error'],['error']
Availability,"imizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function to control default minimizer type and algorithm. » Author: L. Moneta Thu Sep 21 16:21:29 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitConfig.h 42007 2011-11-15 13:23:17Z moneta $ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitConfig.html:5501,error,error,5501,root/html532/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitConfig.html,2,['error'],['error']
Availability,"imple histogram without errors (= “HIST” draw option). In combination with some other draw options an outer line is drawn on top of the histogram; 3.21.1.2.2 Show markers; draw a marker on to of each bin (=“P” draw option).; 3.21.1.2.3 Draw bar chart; draw a bar chart (=“B” draw option).; 3.21.1.2.4 Bar option; draw a bar chart (=“BAR” draw option); if selected, it will show an additional interface elements for bars: width, offset, percentage and the possibility to draw horizontal bars.; 3.21.1.3 3-D Plot; 3.21.1.3.1 Add; set histogram type Lego-Plot or Surface draw (Lego, Lego1.2, Surf, Surf1…5).; 3.21.1.3.2 Coords; set the coordinate system (Cartesian, Spheric, etc.).; 3.21.1.3.3 Error; same as for 2D plot.; 3.21.1.3.4 Bar; set the bar attributes: width and offset.; 3.21.1.3.5 Horizontal Bar; draw a horizontal bar chart.; 3.21.1.4 The Binning tab; The binning tab has two different layouts. One is for a histogram, which is not drawn from an ntuple. The other one is available for a histogram, which is drawn from an ntuple. In this case, the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see the differences do:; TFile f(""hsimple.root"");; hpx->Draw(""BAR1""); // non ntuple histogram; ntuple->Draw(""px"");// ntuple histogram; 3.21.1.5 Non ntuple histogram; Rebin with a slider and the number of bins (shown in the field below the slider). The number of bins can be changed to any number, which divides the number of bins of the original histogram. A click on the Apply button will delete the origin histogram and will replace it by the rebinned one on the screen. A click on the Ignore button will restore the origin histogram.; 3.21.1.6 Histogram drawn from an ntuple; 3.21.1.6.1 Rebin; with the slider, the number of bins can be enlarged by a factor of 2, 3, 4, 5 (moving to the right) or reduced by a factor of \(\frac{1}{2}\), \(\frac{1}{3}\), \(\frac{1}{4}\), \(\frac{1}{5}\).; 3.21.1.6.2 BinOffset with a BinOffset slider; the origin of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:136694,avail,available,136694,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction works as follows: adjust poisson such that estimate of \(N_\mathrm{expect}\) stays at the same value, but has a different variance, rescale both the observed and expected count of the Poisson with a factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:100244,error,error,100244,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['error']
Availability,"implemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:44747,error,errors,44747,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,3,['error'],['errors']
Availability,"implemented from TVirtualX.; Definition at line 267 of file GX11Gui.cxx. ◆ DestroyWindow(). void TGX11::DestroyWindow ; (; Window_t ; id). overridevirtual . Destroy window. ; Reimplemented from TVirtualX.; Definition at line 257 of file GX11Gui.cxx. ◆ DisplayName(). const char * TGX11::DisplayName ; (; const char * ; dpyName = nullptr). overridevirtual . Return hostname on which the display is opened. ; Reimplemented from TVirtualX.; Definition at line 996 of file TGX11.cxx. ◆ DrawBox(). void TGX11::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . EBoxMode ; mode . ). overridevirtual . Draw a box. . mode=0 hollow (kHollow); mode=1 solid (kSolid) . Reimplemented from TVirtualX.; Definition at line 525 of file TGX11.cxx. ◆ DrawCellArray(). void TGX11::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draw a cell array. ; Parameters. [in]x1,y1: left down corner ; [in]x2,y2: right up corner ; [in]nx,ny: array size ; [in]ic: array. Draw a cell array. The drawing is done with the pixel precision if (X2-X1)/NX (or Y) is not a exact pixel number the position of the top right corner may be wrong. ; Reimplemented from TVirtualX.; Definition at line 559 of file TGX11.cxx. ◆ DrawFillArea(). void TGX11::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fill area described by polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX.; Definition at line 589 of file TGX11.cxx. ◆ DrawLine() [1/2]. void TGX11::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draw a line. ; Reimplemented from TVirtualX.; Definition at line 1731 of file GX11Gui.cxx. ◆ DrawLine() [2/2]. void TGX11::DrawLine ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draw a line. ; Parameters. [in]x1,y1: begin of line ; [in]x2,y2: end of li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:68491,down,down,68491,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['down'],['down']
Availability,"implemented in TProofLite, and TProofSuperMaster.; Definition at line 5412 of file TProof.cxx. ◆ Process() [7/8]. Long64_t TProof::Process ; (; TFileCollection * ; fc, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Process a data set (TFileCollection) using the specified selector object The default tree is analyzed (i.e. ; the first one found). To specify another tree, the default tree can be changed using TFileCollection::SetDefaultMetaData . The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5787 of file TProof.cxx. ◆ Process() [8/8]. Long64_t TProof::Process ; (; TSelector * ; selector, . Long64_t ; n, . Option_t * ; option = """" . ). virtual . Generic (non-data based) selector processing: the Process() method of the specified selector is called 'n' times. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5835 of file TProof.cxx. ◆ Progress() [1/3]. void TProof::Progress ; (; Long64_t ; total, . Long64_t ; processed . ). Get query progress information. ; Connect a slot to this signal to track progress. ; Definition at line 9201 of file TProof.cxx. ◆ Progress() [2/3]. void TProof::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti . ). Get query progress information. ; Connect a slot to this signal to track progress. ; Definition at line 9224 of file TProof.cxx. ◆ Progress() [3/3]. void TProof::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti, . Int_t ; actw, . Int_t ; tses, . Float_t ; eses . ). Get query progress information. ; Connect a slot to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:128003,error,error,128003,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"implemented in the future). Users can enter the function expression in a text entry field.; The entered string is checked after Enter key was pressed. An; error message shows up if the string is not accepted. The current; prototype is limited and users have no freedom to enter file/user; function names in this field. ""Set Parameters"" button opens a dialog for parameters settings. ""Fit Settings"" provides user interface elements related to the; fitter. Currently there are two method choices: Chi-square and; Binned Likelihood. ""Linear Fit"" check button sets the use of Linear fitter is it is; selected. Otherwise the option 'F' is applied if polN is selected.; ""Robust"" number entry sets the robust value when fitting graphs.; ""No Chi-square"" check button sets ON/OFF option 'C' - do not; calculate Chi-square (for Linear fitter). Fit options:; ""Integral"" check button switch ON/OFF option 'I' - use integral; of function instead of value in bin center.; ""Best Errors"" sets ON/OFF option 'E' - better errors estimation; using Minos technique.; ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1,; excluding empty bins and ignoring error bars.; ""Empty bins, weights=1"" sets ON/OFF option 'WW' - all weights; equal to 1, including empty bins, error bars ignored.; ""Use range"" sets ON/OFF option 'R' - fit only data within the; specified function range with the slider.; ""Improve fit results"" sets ON/OFF option 'M' - after minimum is; found, search for a new one.; ""Add to list"" sets On/Off option '+'- add function to the list; without deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:2269,error,errors,2269,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,14,"['Error', 'error']","['Errors', 'errors']"
Availability,"implex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. More...;  ; class  VariableMetricEDMEstimator;  ; class  VariableMetricMinimizer;  Instantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method. More...;  ; class  vec;  ; class  VectorOuterProduct;  . Typedefs; typedef LASymMatrix MnAlgebraicSymMatrix;  ; typedef LAVector MnAlgebraicVector;  . Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kScan; , ;   kFumili; , kMigradBFGS. };  ; enum class  GradientParameterSpace { External; , Internal; };  . Functions; int ControlPrintLevel ();  ; LAVector eigenvalues (const LASymMatrix &mat);  ; double inner_product (const LAVector &, const LAVector &);  ; template<class mt , class M , class T > ; ABObj< mt, MatrixInverse< mt, ABObj< mt, M, T >, T >, T > Inverse (const ABObj< mt, M, T > &obj);  ; ABObj< sym, MatrixInverse< sym, ABObj< sym, LASymMatrix, double >, double >, double > Inverse (const ABObj< sym,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:12717,error,error,12717,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,1,['error'],['error']
Availability,"implex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. More...;  ; class  VariableMetricEDMEstimator;  ; class  VariableMetricMinimizer;  Instantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method. More...;  ; class  vec;  ; class  VectorOuterProduct;  . Typedefs; typedef LASymMatrix MnAlgebraicSymMatrix;  ; typedef LAVector MnAlgebraicVector;  . Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kScan; , ;   kFumili; , kMigradBFGS. };  ; enum class  GradientParameterSpace { External; , Internal; };  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  . Functions; int ControlPrintLevel ();  ; LAVector eigenvalues (const LASymMatrix &mat);  ; double inner_product (const LAVector &, const LAVector &);  ; template<class mt , class M , class T > ; ABObj< mt, MatrixInverse< mt, ABObj< mt, M, T >, T >, T > Inverse (const ABObj< mt, M, T > &obj);  ; ABObj< sym, MatrixInve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:12953,error,error,12953,doc/v632/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html,1,['error'],['error']
Availability,"in /tmp, cd into the untarred directory; and type './configure' followed by 'make install'.; This will install fftw in /usr/local/bin,lib etc... 3) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags '--enable-fftw3' and '--enable-roofit', then run 'make'. If you do not have root access and want to make a private installation of FFTW. 2) Make a private install area for FFTW, e.g. /home/myself/fftw. 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; Substitute /home/myself/fftw with a directory of your choice. This; procedure will install FFTW in the location designated by you. 4) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags; '--enable-fftw3',; '--with-fftw3-incdir=/home/myself/fftw/include',; '--width-fftw3-libdir=/home/myself/fftw/lib' and; '--enable-roofit'; Then run 'make'. Function Members (Methods); public:. RooFFTConvPdf(); RooFFTConvPdf(const RooFFTConvPdf& other, const char* name = 0); RooFFTConvPdf(const char* name, const char* title, RooRealVar& convVar, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Int_t ipOrder = 2); RooFFTConvPdf(const char* name, const char* title, RooAbsReal& pdfConvVar, RooRealVar& convVar, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Int_t ipOrder = 2); virtual~RooFFTConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:4443,down,download,4443,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,7,['down'],['download']
Availability,"in /tmp, cd into the untarred directory; and type './configure' followed by 'make install'.; This will install fftw in /usr/local/bin,lib etc... 3) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags '--enable-fftw3' and '--enable-roofit', then run 'make'. If you do not have root access and want to make a private installation of FFTW. 2) Make a private install area for FFTW, e.g. /home/myself/fftw. 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; Substitute /home/myself/fftw with a directory of your choice. This; procedure will install FFTW in the location designated by you. 4) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags; '--enable-fftw3',; '--with-fftw3-incdir=/home/myself/fftw/include',; '--width-fftw3-libdir=/home/myself/fftw/lib' and; '--enable-roofit'; Then run 'make'. Function Members (Methods); public:. virtual~RooFFTConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* range",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:4443,down,download,4443,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,4,['down'],['download']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Fri Dec 2 14:26:41 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgSet.html:22677,echo,echo,22677,root/html532/RooArgSet.html,https://root.cern,https://root.cern/root/html532/RooArgSet.html,1,['echo'],['echo']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Mon Jul 4 15:21:38 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooArgSet.html:22163,echo,echo,22163,root/html530/RooArgSet.html,https://root.cern,https://root.cern/root/html530/RooArgSet.html,1,['echo'],['echo']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Sat Oct 9 22:38:34 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:21952,echo,echo,21952,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,1,['echo'],['echo']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Tue Jun 2 15:27:50 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooArgSet.html:23948,echo,echo,23948,root/html604/RooArgSet.html,https://root.cern,https://root.cern/root/html604/RooArgSet.html,2,['echo'],['echo']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Tue Jun 30 14:30:53 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:23948,echo,echo,23948,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,2,['echo'],['echo']
Availability,"in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Tue Mar 10 17:14:27 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgSet.html:22696,echo,echo,22696,root/html534/RooArgSet.html,https://root.cern,https://root.cern/root/html534/RooArgSet.html,2,['echo'],['echo']
Availability,"in a macro. Int_t Parse(const char* expr, TString& expr1, TString& expr2, TString& expr3); Parse a string boolean expression and do a syntax check. Find top; level boolean operator and returns its type. Fill the two; substrings to which this operator applies. The returned integer is :; -1 : parse error; 0 : no boolean operator; 1 : union - represented as '+' in expression; 2 : difference (subtraction) - represented as '-' in expression; 3 : intersection - represented as '*' in expression.; Paranthesys should be used to avoid ambiguites. For instance :; A+B-C will be interpreted as (A+B)-C which is not the same as A+(B-C); eliminate not needed paranthesys. void SaveAttributes(const char* filename = ""tgeoatt.C""); Save current attributes in a macro. TGeoNode * SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); Returns the deepest node containing fPoint, which must be set a priori. TGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode* skipnode); Cross next boundary and locate within current node; The current point must be on the boundary of fCurrentNode. TGeoNode * FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE); Compute distance to next boundary within STEPMAX. If no boundary is found,; propagate current point along current direction with fStep=STEPMAX. Otherwise; propagate with fStep=SNEXT (distance to boundary) and locate/return the next; node. TGeoNode * FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); Find distance to next boundary and store it in fStep. Returns node to which this; boundary belongs. If PATH is specified, compute only distance to the node to which; PATH points. If STEPMAX is specified, compute distance only in case fSafety is smaller; than this value. STEPMAX represent the step to be made imposed by other reasons than; geometry (usually physics processes). Therefore in this case this method provides the; answer to the question : ""Is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:50500,down,downwards,50500,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,10,['down'],['downwards']
Availability,"in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsInterrupted () const;  ; Bool_t IsLineProcessing () const;  ; Bool_t IsProofServ () const;  ; Bool_t IsRootFile (const char *filename) const;  Return true if the file is local and is (likely) to be a ROOT file. ;  ; Bool_t IsWebDisplay () const;  ; Bool_t IsWebDisplayBatch () const;  ; Int_t LoadClass (const char *classname, const char *libname, Bool_t check=kFALSE);  Check if class ""classname"" is known to the interpreter (in fact, this check is not needed anymore, so classname is ignored). ;  ; TClass * LoadClass (const char *name, Bool_t silent=kFALSE) const;  Helper function used by TClass::GetClass(). ;  ; Int_t LoadMacro (const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE);  Load a macro in the interpreter's memory. ;  ; void ls (Option_t *option="""") const override;  To list all objects of the application. ;  ; Longptr_t Macro (const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE);  Execute a macro in the interpreter. ;  ; TCanvas * MakeDefCanvas () const;  Return a default canvas. ;  ; void Message (Int_t id, const TObject *obj);  Process message id called by obj. ;  ; Bool_t MustClean () const;  ; Longptr_t ProcessLine (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Longptr_t ProcessLineFast (const char *line, Int_t *error=nullptr);  Process interpreter command directly via CINT interpreter. ;  ; Longptr_t ProcessLineSync (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Bool_t ReadingObject () const;  Deprecated (will be removed in next release). ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from the list of Cleanups. ;  ; void RefreshBrowsers ();  Refresh all browsers. ;  ; TObject * Remove (TObject *) override;  Remove an object from the in-memory list. ;  ; void RemoveClass (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:10731,error,error,10731,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"in case of likelihood must be computed ?. { return fChi2; }. unsigned int Ndf() const; Number of degree of freedom. { return fNdf; }. double Prob() const; p value of the fit (chi2 probability). const std::vector<double> & Errors() const; parameter errors (return st::vector). { return fErrors; }. const double * GetErrors() const; parameter errors (return const pointer). { return &fErrors.front(); }. const std::vector<double> & Parameters() const; parameter values (return std::vector). { return fParams; }. const double * GetParams() const; parameter values (return const pointer). { return &fParams.front();}. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index. void SetMinosError(unsigned int i, double elow, double eup); set the Minos errors for parameter i (called by the Fitter class when running Minos). double LowerError(unsigned int i) const; lower Minos error. If Minos has not run for parameter i return the parabolic error. double UpperError(unsigned int i) const; upper Minos error. If Minos has not run for parameter i return the parabolic error. double GlobalCC(unsigned int i) const; parameter global correlation coefficient. double CovMatrix(unsigned int i, unsigned int j) const; retrieve covariance matrix element. double Correlation(unsigned int i, unsigned int j) const; retrieve correlation elements. void GetCovarianceMatrix(TMatrixTSym<double>& mat) const; fill covariance matrix elements using a generic matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetCorrelationMatrix(TMatrixTSym<double>& mat) const; fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitResult.html:7675,error,error,7675,root/html526/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitResult.html,1,['error'],['error']
Availability,"in center and e(i) is the bin error (sqrt(y(i) for; an un-weighted histogram. Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins.; When using option ""I"" the residual is computed not using the function value at the bin center, f (x(i) | p), but the integral; of the function in the bin, Integral{ f(x|p)dx } divided by the bin volume. Likelihood Fits. When using option ""L"" a likelihood fit is used instead of the default chi2 square fit.; The likelihood is built assuming a Poisson probability density function for each bin.; The negative log-likelihood to be minimized is; NLL = Sum{ log Poisson( y(i) |{ f(x(i) | p ) ) }; The exact likelihood used is the Poisson likelihood described in this paper:; S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; Nucl. Instrum. Meth. 221 (1984) 437.; This method can then be used only when the bin content represents counts (i.e. errors are sqrt(N) ).; The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and chi2 fit; give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method in case of low; bin statistics, where the chi2 method may give incorrect results, in particular when there are; several empty bins (see also below).; In case of a weighted histogram, it is possible to perform a likelihood fit by using the; option ""WL"". Note a weighted histogram is an histogram which has been filled with weights and it; contains the sum of the weight square ( TH1::Sumw2() has been called). The bin error for a weighted; histogram is the square root of the sum of the weight square. Treatment of Empty Bins. Empty bins, which have the content equal to zero AND error equal to zero,; are excluded by default from the chisquare fit, but they ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:82615,error,errors,82615,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['errors']
Availability,"in colored lego plots.; 187 ; 188Two static functions are available that return the bright or dark color number corresponding; 189to a given color index. If these variants don't already exist, they are created as needed:; 190~~~ {.cpp}; 191 Int_t dark = TColor::GetColorDark(color_index);; 192 Int_t bright = TColor::GetColorBright(color_index);; 193~~~; 194 ; 195\anchor C031; 196## Accessible Color Schemes; 197Choosing an appropriate color scheme is essential for making results easy to understand and; 198interpret. Factors like colorblindness and converting colors to grayscale for publications; 199can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; 200three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); 201and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); 202under the MIT License, meet these criteria.; 203 ; 204These three color schemes are available as color sets with 6, 8, and 10 colors, named; 205`kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; 206(`P` for Petroff or Preferred).; 207 ; 208Begin_Macro; 209../../../tutorials/graphics/accessiblecolorschemes.C; 210End_Macro; 211 ; 212The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; 213It also demonstrates that they are effective in grayscale.; 214 ; 215\anchor C04; 216## Grayscale view of of canvas with colors; 217One can toggle between a grayscale preview and the regular colored mode using; 218`TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; 219will return grayscale values according to ITU standards (and close to b&w; 220printer gray-scales), while access via HLS returns de-saturated gray-scales. The; 221image below shows the ROOT color wheel in grayscale mode.; 222 ; 223Begin_Macro(source); 224{; 225 auto w = new TColorWheel();; 226 auto cw = new TCanvas(""cw"",""cw"",0,0,400",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:7316,avail,available,7316,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['avail'],['available']
Availability,"in content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e,xc (bin content, error, x of center of bin); -2D : bc,e,xc,yc; -3D : bc,e,xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. TFumili(Int_t maxpar = 25); TF1 *fTFNF1; //Pointer to theoretical function; void (*fFCN) (Int_t &, Double_t *, Double_t &f, Double_t *, Int_t);; //wrapper function to calculate functional value, gradients and Z-matrix; Double_t (*fTFN)(Double_t *, Double_t *, Double_t*); // Wrapper function for TFN. Double_t* GetPL0() const; { return fPL0;}. Double_t* GetZ() const; { return fZ;}. void SetParNumber(Int_t ParNum); { fNpar = ParNum;}. » Last changed: root/fumili:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFumili.html:24502,error,error,24502,root/html534/TFumili.html,https://root.cern,https://root.cern/root/html534/TFumili.html,2,['error'],['error']
Availability,"in content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e,xc (bin content, error, x of center of bin); -2D : bc,e,xc,yc; -3D : bc,e,xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. TFumili(Int_t maxpar = 25); TF1 *fTFNF1; //Pointer to theoretical function; void (*fFCN) (Int_t &, Double_t *, Double_t &f, Double_t *, Int_t);; //wrapper function to calculate functional value, gradients and Z-matrix; Double_t (*fTFN)(Double_t *, Double_t *, Double_t*); // Wrapper function for TFN. Double_t* GetPL0() const; { return fPL0;}. Double_t* GetZ() const; { return fZ;}. void SetParNumber(Int_t ParNum); { fNpar = ParNum;}. » Last changed: root/fumili:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFumili.html:25015,error,error,25015,root/html604/TFumili.html,https://root.cern,https://root.cern/root/html604/TFumili.html,2,['error'],['error']
Availability,"in content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e,xc (bin content, error, x of center of bin); -2D : bc,e,xc,yc; -3D : bc,e,xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e,xc,xw,yc,yw; -3D : bc,e,xc,xw,yc,yw,zc,zw. TFumili(Int_t maxpar = 25); TF1 *fTFNF1; //Pointer to theoretical function; void (*fFCN) (Int_t &, Double_t *, Double_t &f, Double_t *, Int_t);; //wrapper function to calculate functional value, gradients and Z-matrix; Double_t (*fTFN)(Double_t *, Double_t *, Double_t*); // Wrapper function for TFN. Double_t* GetPL0() const; { return fPL0;}. Double_t* GetZ() const; { return fZ;}. void SetParNumber(Int_t ParNum); { fNpar = ParNum;}. » Last changed: root/fumili:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumili.html:25015,error,error,25015,root/html602/TFumili.html,https://root.cern,https://root.cern/root/html602/TFumili.html,2,['error'],['error']
Availability,"in edge. . kBinCenter Get the bin center. . kBinTo Get the bin high edge. . Definition at line 252 of file RHistImpl.hxx. ◆ EColumnCppType. enum class ROOT::Experimental::Internal::EColumnCppType. strong . EnumeratorkChar ; kBool ; kByte ; kUint8 ; kUint16 ; kUint32 ; kUint64 ; kInt8 ; kInt16 ; kInt32 ; kInt64 ; kFloat ; kDouble ; kClusterSize ; kColumnSwitch ; kMax . Definition at line 119 of file RColumnElementBase.hxx. ◆ EDaosLocatorFlags. enum ROOT::Experimental::Internal::EDaosLocatorFlags. EnumeratorkCagedPage . Definition at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::Cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:16552,error,error,16552,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,1,['error'],['error']
Availability,"in hour-angle. Return; value will always be between 0 and 24 (hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:6896,error,error,6896,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['error'],['error']
Availability,"in hour-angle. Return; value will always be between 0 and 24 (hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(const Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTimeStamp.html:6922,error,error,6922,root/html604/TTimeStamp.html,https://root.cern,https://root.cern/root/html604/TTimeStamp.html,2,['error'],['error']
Availability,"in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode with at most ""nodes"" slaves. Since the fSlaves; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:58890,error,error,58890,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['error'],['error']
Availability,"in the dir ""adir"" of the; dataset named ""mydset""; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void StopProcess(Bool_t abort, Int_t timeout = -1); Send STOPPROCESS message to master and workers. void DisableGoAsyn(); Signal to disable related switches. void GoAsynchronous(); Send GOASYNC message to the master. void RecvLogFile(TSocket* s, Int_t size); Receive the log file of the slave with socket s. void NotifyLogMsg(const char* msg, const char* sfx = ""\n""); Notify locally 'msg' to the appropriate units (file, stdout, window); If defined, 'sfx' is added after 'msg' (typically a line-feed);. void LogMessage(const char* msg, Bool_t all); Log a message into the appropriate window by emitting a signal. Int_t SendGroupView(); Send to all active slaves servers the current slave group size; and their unique id. Returns number of active slaves.; Returns -1 in case of error. Bool_t GetFileInCmd(const char* cmd, TString& fn); Static method to extract the filename (if any) form a CINT command.; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not; appliable. Int_t Exec(const char* cmd, Bool_t plusMaster = kFALSE); Send command to be executed on the PROOF master and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char *cmd, ESlaves list, Bool_t plusMaster); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, const char* ord, Bool_t logtomacr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:60994,error,error,60994,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['error']
Availability,"in the dir ""adir"" of the; dataset named ""mydset""; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void StopProcess(Bool_t abort, Int_t timeout = -1); Send STOPPROCESS message to master and workers. void DisableGoAsyn(); Signal to disable related switches. void GoAsynchronous(); Send GOASYNC message to the master. void RecvLogFile(TSocket* s, Int_t size); Receive the log file of the slave with socket s. void NotifyLogMsg(const char* msg, const char* sfx = ""\n""); Notify locally 'msg' to the appropriate units (file, stdout, window); If defined, 'sfx' is added after 'msg' (typically a line-feed);. void LogMessage(const char* msg, Bool_t all); Log a message into the appropriate window by emitting a signal. Int_t SendGroupView(); Send to all active slaves servers the current slave group size; and their unique id. Returns number of active slaves.; Returns -1 in case of error. Bool_t GetFileInCmd(const char* cmd, TString& fn); Static method to extract the filename (if any) form a CINT command.; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not; appliable. Int_t Exec(const char* cmd, Bool_t plusMaster = kFALSE); Send command to be executed on the PROOF master and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, TProof::ESlaves list, Bool_t plusMaster); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t SendCommand(const char* cmd, TProof::ESlaves li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:53277,error,error,53277,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['error'],['error']
Availability,"in the exclusive group emits the Pressed() signal. ; Definition at line 523 of file TGButtonGroup.cxx. ◆ Released(). virtual void TGButtonGroup::Released ; (; Int_t ; id). inlinevirtual . Definition at line 57 of file TGButtonGroup.h. ◆ Remove(). void TGButtonGroup::Remove ; (; TGButton * ; button). virtual . Removes a button from the button group. ; Definition at line 411 of file TGButtonGroup.cxx. ◆ SavePrimitive(). void TGButtonGroup::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a button group widget as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TGVButtonGroup, and TGHButtonGroup.; Definition at line 619 of file TGButtonGroup.cxx. ◆ SetBorderDrawn(). void TGButtonGroup::SetBorderDrawn ; (; Bool_t ; enable = kTRUE). virtual . Makes border to be visible/invisible. ; Definition at line 283 of file TGButtonGroup.cxx. ◆ SetButton(). void TGButtonGroup::SetButton ; (; Int_t ; id, . Bool_t ; down = kTRUE . ). virtual . Sets the button with id to be on/down, and if this is an exclusive group, all other button in the group to be off/up. ; Definition at line 344 of file TGButtonGroup.cxx. ◆ SetExclusive(). void TGButtonGroup::SetExclusive ; (; Bool_t ; enable = kTRUE). virtual . Sets the button group to be exclusive if enable is kTRUE, or to be non-exclusive if enable is kFALSE. ; An exclusive button group switches off all other toggle buttons when one is switched on. This is ideal for groups of radio-buttons A non-exclusive group allow many buttons to be switched on at the same time. The default setting is kFALSE. ; Definition at line 299 of file TGButtonGroup.cxx. ◆ SetLayoutHints(). void TGButtonGroup::SetLayoutHints ; (; TGLayoutHints * ; l, . TGButton * ; button = nullptr . ). virtual . Set layout hints for the specified button or if button=0 for all buttons. ; Definition at line 603 of file TGButtonGroup.cxx. ◆ SetRadioButtonExclusive(). void TGButtonGroup::SetRadioButton",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:46044,down,down,46044,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,1,['down'],['down']
Availability,"in the file system's (i.e. local machine's) full path name to the file. The function returns false if the class's header file cannot be found.; If your software cannot be mapped into this scheme then derive your own class from TFileDefinition and pass it to THtml::SetFileDefinition(). ; Definition at line 262 of file THtml.cxx. ◆ GetFileName(). bool THtml::TFileDefinition::GetFileName ; (; const TClass * ; cl, . bool ; decl, . TString & ; out_filename, . TString & ; out_fsys, . TFileSysEntry ** ; fse = 0 . ); const. protectedvirtual . Common implementation for GetDeclFileName(), GetImplFileName() ; Definition at line 338 of file THtml.cxx. ◆ GetImplFileName(). bool THtml::TFileDefinition::GetImplFileName ; (; const TClass * ; cl, . TString & ; out_filename, . TString & ; out_fsys, . TFileSysEntry ** ; fse = 0 . ); const. virtual . Determine cl's implementation file name. ; Usually it's just cl->GetImplFileName(), but sometimes conversions need to be done. If no implementation file name is available look for b/src/C.cxx for class A::B::C. out_fsys will contain the file system's (i.e. local machine's) full path name to the file. The function returns false if the class's source file cannot be found.; If your software cannot be mapped into this scheme then derive your own class from TFileDefinition and pass it to THtml::SetFileDefinition(). ; Definition at line 279 of file THtml.cxx. ◆ IsA(). TClass * THtml::TFileDefinition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file THtml.h. ◆ MatchFileSysName(). TString THtml::TFileDefinition::MatchFileSysName ; (; TString & ; filename, . TFileSysEntry ** ; fse = 0 . ); const. protected . Find filename in the list of system files; return the system file name and change filename to the file name as included. ; filename must be normalized (no ""/./"" etc) before calling. ; Definition at line 308 of file THtml.cxx. ◆ NormalizePath(). void T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html:14389,avail,available,14389,doc/master/classTHtml_1_1TFileDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html,1,['avail'],['available']
Availability,"in the file. ;  ; virtual Int_t GetBasketSize () const;  ; virtual TList * GetBrowsables ();  Returns (and, if 0, creates) browsable objects for this branch See TVirtualBranchBrowsable::FillListOfBrowsables. ;  ; ROOT::Experimental::Internal::TBulkBranchRead & GetBulkRead ();  ; virtual const char * GetClassName () const;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TDirectory * GetDirectory () const;  ; Long64_t GetEntries () const;  ; virtual Int_t GetEntryExport (Long64_t entry, Int_t getall, TClonesArray *list, Int_t n);  Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ;  ; Long64_t GetEntryNumber () const;  ; Int_t GetEntryOffsetLen () const;  ; Int_t GetEvent (Long64_t entry=0);  ; virtual Int_t GetExpectedType (TClass *&clptr, EDataType &type);  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TFile * GetFile (Int_t mode=0);  Return pointer to the file where branch buffers reside, returns 0 in case branch buffers reside in the same file as tree header. ;  ; const char * GetFileName () const;  ; Long64_t GetFirstEntry () const;  ; virtual TString GetFullName () const;  Return the 'full' name of the branch. ;  ; const char * GetIconName () const override;  Return icon name depending on type of branch. ;  ; TIOFeatures GetIOFeatures () const;  Returns the IO settings currently in use for this branch. ;  ; virtual TLeaf * GetLeaf (const char *name) const;  Return pointer to the 1st Leaf named name in thisBranch. ;  ; TObjArray * GetListOfBaskets ();  ; TObjArray * GetListOfBranches ();  ; TObjArray * GetListOfLeaves ();  ; virtual bool GetMakeClass () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookBranch.html:4679,failure,failure,4679,doc/master/classTHbookBranch.html,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html,1,['failure'],['failure']
Availability,"in thread; to mark this socket as bad, avoiding race condition when a worker; dies while in processing state. Bool_t IsServProofd(); Return kTRUE if the remote server is a 'proofd'. Int_t GetInterrupt(Bool_t& forward); Get latest interrupt level and reset it; if the interrupt has to be; propagated to lower stages forward will be kTRUE after the call. Int_t Flush(); Flush the asynchronous queue.; Typically called when a kHardInterrupt is received.; Returns number of bytes in flushed buffers. Bool_t Create(Bool_t attach = kFALSE); This method sends a request for creation of (or attachment to) a remote; server application. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); Send a raw buffer of specified length.; Use opt = kDontBlock to ask xproofd to push the message into the proofsrv.; (by default is appended to a queue waiting for a request from proofsrv).; Returns the number of bytes sent or -1 in case of error. Bool_t Ping(const char* ord = 0); Ping functionality: contact the server to check its vitality.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply from server is expected. Int_t PickUpReady(); Wait and pick-up next buffer from the asynchronous queue. TXSockBuf * PopUpSpare(Int_t sz); Pop-up a buffer of at least size bytes from the spare list; If none is found either one is reallocated or a new one; created. void PushBackSpare(); Release read buffer giving back to the spare list. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t SendInterrupt(Int_t type); Send urgent message (interrupt) to remote server; Returns 0 or -1 in case of error. Int_t Send(const TMessage& mess); Send a TMessage object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:16490,Ping,Ping,16490,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,4,['Ping'],['Ping']
Availability,"in volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:26285,error,error,26285,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['error'],['error']
Availability,"in().; The bin numbering to be used is that of TH1::GetBin(). bool IsExcluded(Int_t bin) const; Function for internal use, checking whether the given bin is; excluded from the fit or not. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. TFitResultPtr Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; the class is deleted. void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. void ComputeFCN(Double_t& f, const Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:17614,Error,ErrorAnalysis,17614,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['Error'],['ErrorAnalysis']
Availability,"in(); //merges two bins in one in h1: previous contents of h1 are lost; 6242/// h1->Rebin(5); //merges five bins in one in h1; 6243/// TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; 6244/// // merging 5 bins of h1 in one bin; 6245/// ~~~; 6246///; 6247/// NOTE: If ngroup is not an exact divider of the number of bins,; 6248/// the top limit of the rebinned histogram is reduced; 6249/// to the upper edge of the last bin that can make a complete; 6250/// group. The remaining bins are added to the overflow bin.; 6251/// Statistics will be recomputed from the new bin contents.; 6252///; 6253/// #### case 2 xbins!=0; 6254///; 6255/// A new histogram is created (you should specify newname).; 6256/// The parameter ngroup is the number of variable size bins in the created histogram.; 6257/// The array xbins must contain ngroup+1 elements that represent the low-edges; 6258/// of the bins.; 6259/// If the original histogram has errors stored (via Sumw2), the resulting; 6260/// histograms has new errors correctly calculated.; 6261///; 6262/// NOTE: The bin edges specified in xbins should correspond to bin edges; 6263/// in the original histogram. If a bin edge in the new histogram is; 6264/// in the middle of a bin in the original histogram, all entries in; 6265/// the split bin in the original histogram will be transfered to the; 6266/// lower of the two possible bins in the new histogram. This is; 6267/// probably not what you want. A warning message is emitted in this; 6268/// case; 6269///; 6270/// examples: if h1 is an existing TH1F histogram with 100 bins; 6271///; 6272/// ~~~ {.cpp}; 6273/// Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; 6274/// h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew; 6275/// ~~~; 6276 ; 6277TH1 *TH1::Rebin(Int_t ngroup, const char*newname, const Double_t *xbins); 6278{; 6279 Int_t nbins = fXaxis.GetNbins();; 6280 Double_t xmin = fXaxis.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:246923,error,errors,246923,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"in(nperln,13);; 2533 if (fISW[4] >= 1 && npard > nperln) {; 2534 Printf("" ELEMENTS ABOVE DIAGONAL ARE NOT PRINTED."");; 2535 }; 2536// I counts the rows of the matrix; 2537 for (i = 1; i <= npard; ++i) {; 2538 mndxdi(fX[i-1], i-1, dxdi);; 2539 kga = i*(i-1) / 2;; 2540 for (j = 1; j <= i; ++j) {; 2541 mndxdi(fX[j-1], j-1, dxdj);; 2542 kgb = kga + j;; 2543 emat[i + j*emat_dim1] = dxdi*fVhmat[kgb-1]*dxdj*fUp;; 2544 emat[j + i*emat_dim1] = emat[i + j*emat_dim1];; 2545 }; 2546 }; 2547// IZ is number of columns to be printed in row I; 2548 if (fISW[4] >= 2) {; 2549 for (i = 1; i <= npard; ++i) {; 2550 iz = npard;; 2551 if (npard >= nperln) iz = i;; 2552 ctemp = "" "";; 2553 for (k = 1; nperln < 0 ? k >= iz : k <= iz; k += nperln) {; 2554 k2 = k + nperln - 1;; 2555 if (k2 > iz) k2 = iz;; 2556 for (kk = k; kk <= k2; ++kk) {; 2557 ctemp += TString::Format(""%10.3e "",emat[i + kk*emat_dim1]);; 2558 }; 2559 Printf(""%s"",(const char*)ctemp);; 2560 }; 2561 }; 2562 }; 2563}; 2564 ; 2565////////////////////////////////////////////////////////////////////////////////; 2566/// Utility routine to get MINOS errors; 2567///; 2568/// Called by user.; 2569///; 2570/// NUMBER is the parameter number; 2571///; 2572/// values returned by MNERRS:; 2573/// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; 2574/// - EPARAB is 'parabolic' error (from error matrix).; 2575/// (Errors not calculated are set = 0); 2576/// - GCC is global correlation coefficient from error matrix; 2577 ; 2578void TMinuit::mnerrs(Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc); 2579{; 2580 Double_t dxdi;; 2581 Int_t ndiag, iin, iex;; 2582 ; 2583 iex = number+1;; 2584 ; 2585 if (iex > fNu || iex <= 0) goto L900;; 2586 iin = fNiofex[iex-1];; 2587 if (iin <= 0) goto L900;; 2588 ; 2589// IEX is external number, IIN is internal number; 2590 eplus = fErp[iin-1];; 2591 if (eplus == fUndefi) eplus = 0;; 2592 eminus = fErn[iin-1];; 2593 if (eminus == fUndefi) eminus = 0;; 2594 mndxdi(fX[iin-1],",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:83904,error,errors,83904,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['errors']
Availability,"in) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:230; TGraph2DErrors::~TGraph2DErrors~TGraph2DErrors() overrideTGraph2DErrors destructor.Definition TGraph2DErrors.cxx:137; TGraph2DErrors::GetYminEDouble_t GetYminE() const overrideReturns the Y minimum with errors.Definition TGraph2DErrors.cxx:274; TGraph2DErrors::GetXminEDouble_t GetXminE() const overrideReturns the X minimum with errors.Definition TGraph2DErrors.cxx:252; TGraph2DErrors::GetEZDouble_t * GetEZ() const overrideDefinition TGraph2DErrors.h:47; TGraph2DErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraph2DErrors.h:30; TGraph2DErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraph2DErrors.h:46; TGraph2DErrors::SetPointvoid SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) overrideSet x, y and z values for point number i.Definition TGraph2DErrors.cxx:404; TGraph2DErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""z"") overrideMultiply the values and errors of a TGraph2DErrors by a constant c1.Definition TGraph2DErrors.cxx:322; TGraph2DErrors::fEZDouble_t * fEZ[fNpoints] array of Z errorsDefinition TGraph2DErrors.h:31; TGraph2DErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraph2DErrors.h:45; TGraph2DErrors::SetPointErrorvirtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez)Set ex, ey and ez values for point number i.Definition TGraph2DErrors.cxx:446; TGraph2DErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:206; TGraph2DErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.)Add a point with errorbars to the graph.Definition TGraph2DErrors.cxx:196; TGraph2DErrors::Printvoid Print(Option_t *chopt="""") const overridePrint 2D graph and errors values.Definition TGraph2DErrors.cxx:307; TGraph2DErrors::GetZminEDouble_t GetZminE() const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:15656,error,errors,15656,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,2,['error'],['errors']
Availability,"in)/alfa + Log(x)/alfa \]. \[ = fXtoPixelk + fXtoPixel*Log(x) \]. \[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \]. \[ \Rightarrow fXtoPixel = 1/alfa \]. \[ py = pylow - Log(y/ymin)/beta \]. \[ = fYtoPixelk + fYtoPixel*Log(y) \]. \[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \]. \[ fYtoPixel = 1/beta \]. Implements TVirtualPad.; Definition at line 5624 of file TPad.cxx. ◆ SaveAs(). void TPad::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save the pad content in a file. ; The file's format used to save the pad is determined by the filename extension:. if filename is empty, the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename ends with .ps, a Postscript file is produced; if filename ends with .eps, an Encapsulated Postscript file is produced; if filename ends with .pdf, a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; if filename ends with .svg, a SVG file is produced; if filename ends with .tex, a TeX file is produced; if filename ends with .gif, a GIF file is produced; if filename ends with .gif+NN, an animated GIF file is produced See comments in TASImage::WriteImage for meaning of NN and other .gif sufix variants; if filename ends with .xpm, a XPM file is produced; if filename ends with .png, a PNG file is produced; if filename ends with .bmp, a BMP file is produced; if filename ends with .jpg or .jpeg a JPEG file is produced NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; if filename ends with .tiff, a TIFF file is produced; if filename ends with .C, .cxx,.cpp or .cc, a C++ macro file is produced; if filename ends with .root, a Root file is produced; if filename ends with .xml, a XML file is produced; if filename ends with .json, a JSON file is produced. Remarks; The parameter option is not used.; This method calls TPad::Print(const char *filena",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:114275,avail,available,114275,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['avail'],['available']
Availability,"in, Double_t error); virtual voidTH1::SetBinError(Int_t binx, Int_t biny, Double_t error); virtual voidTH1::SetBinError(Int_t binx, Int_t biny, Int_t binz, Double_t error); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax); virtual voidSetBinsLength(Int_t n = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTH1::SetBuffer(Int_t buffersize, Option_t* option = """"); virtual voidTH1::SetCellContent(Int_t binx, Int_t biny, Double_t content); virtual voidTH1::SetCellError(Int_t binx, Int_t biny, Double_t content); virtual voidTH1::SetContent(const Double_t* content); virtual voidTH1::SetContour(Int_t nlevels, const Double_t* levels = 0); virtual voidTH1::SetContourLevel(Int_t level, Double_t value); static voidTH1::SetDefaultBufferSize(Int_t buffersize = 1000); static voidTH1::SetDefaultSumw2(Bool_t sumw2 = kTRUE); virtual voidTH1::SetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTH1::SetEntries(Double_t n); virtual voidTH1::SetError(const Double_t* error); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTH1::SetLabelColor(Color_t color = 1, Option_t* axis = ""X""); virtual voidTH1::SetLabelFont(Style_t font = 62, Option_t* axis = ""X""); virtual voidTH1::SetLabelOffset(Float_t offset = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1C.html:15531,error,error,15531,root/html528/TH1C.html,https://root.cern,https://root.cern/root/html528/TH1C.html,60,['error'],['error']
Availability,"in,""[cutg1,cutg2]"");; NOTE that if a TH1D named ""name"" exists in the current directory or pad and having a compatible axis, the histogram is reset and filled again with the projected contents of the TH2. In the case of axis incompatibility, an error is reported and a NULL pointer is returned.; NOTE that the Y axis attributes of the TH2 are copied to the X axis of the projection. ; Definition at line 2476 of file TH2.cxx. ◆ PutStats(). void TH2::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimplemented from TH1.; Reimplemented in TProfile2D.; Definition at line 2485 of file TH2.cxx. ◆ QuantilesX(). TH1D * TH2::QuantilesX ; (; Double_t ; prob = 0.5, . const char * ; name = ""_qx"" . ); const. Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ; According to this approximate formula the error on the quantile is estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and n is the number of events used to compute the quantile and f(q) is the probability distribution for the other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be a normal distribution. ; Definition at line 2505 of file TH2.cxx. ◆ QuantilesY(). TH1D * TH2::QuantilesY ; (; Double_t ; prob = 0.5, . const char * ; name = ""_qy"" . ); const. Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ; Definition at line 2518 of file TH2.cxx. ◆ Rebin(). TH2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:101348,error,error,101348,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"in; Int_ti; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; Int_tseed. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SlaveBegin(TTree* tree); Retrieve study pack. Bool_t Process(Long64_t entry). void SlaveTerminate(). void Init(TTree* tree); Set branch addresses and branch pointers. Bool_t Notify(). RooProofDriverSelector(TTree* = 0); { b_i = 0 ; _pkg = 0 ; fChain = 0 ; }. virtual ~RooProofDriverSelector(); { }. Int_t Version() const; { return 2; }. Int_t GetEntry(Long64_t entry, Int_t getall = 0); { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. TList * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProofDriverSelector.html:6999,avail,available,6999,root/html602/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html602/RooProofDriverSelector.html,4,['avail'],['available']
Availability,"inErrorOption(TH1::EBinErrorOpt type); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax); virtual voidTH1::SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); virtual voidTH1::SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax); virtual voidTH3C::SetBinsLength(Int_t n = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTH1::SetBuffer(Int_t buffersize, Option_t* option = """"); virtual UInt_tTH1::SetCanExtend(UInt_t extendBitMask); virtual voidTH1::SetCellContent(Int_t binx, Int_t biny, Double_t content); virtual voidTH1::SetCellError(Int_t binx, Int_t biny, Double_t content); virtual voidTH1::SetContent(const Double_t* content); virtual voidTH1::SetContour(Int_t nlevels, const Double_t* levels = 0); virtual voidTH1::SetContourLevel(Int_t level, Double_t value); static voidTH1::SetDefaultBufferSize(Int_t buffersize = 1000); static voidTH1::SetDefaultSumw2(Bool_t sumw2 = kTRUE); virtual voidTH1::SetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTH1::SetEntries(Double_t n); virtual voidTH1::SetError(const Double_t* error); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTH1::SetLabelColor(Color_t color = 1, Option_t* axis = ""X""); virtual voidTH1::SetLabelFont(Style_t font = 62, Option_t* axis = ""X""); virtual voidTH1::SetLabelOffset(Float_t offset = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLTH3Composition.html:18610,error,error,18610,root/html602/TGLTH3Composition.html,https://root.cern,https://root.cern/root/html602/TGLTH3Composition.html,4,['error'],['error']
Availability,"inGS&); virtual~TASPluginGS(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Bool_tTASImagePlugin::ASImage2File(ASImage*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual ASImage*File2ASImage(const char* filename); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTImagePlugin::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASPluginGS.html:1458,error,error,1458,root/html526/TASPluginGS.html,https://root.cern,https://root.cern/root/html526/TASPluginGS.html,7,['error'],['error']
Availability,"inMap: see method GetEmatrix(); see PrepareSysError(). void GetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); calculate systematic shift from tau variation; ematrix: output; binMap: see method GetEmatrix(). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given source; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); propagate error matrix vyy to the result; vyy: error matrix on input data fY; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); get total error including statistical error; ematrix: output; binMap: see method GetEmatrix(). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:25765,error,error,25765,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,12,['error'],"['error', 'errors']"
Availability,"inWeight = kTRUE;; 1310 if (opt.Contains(""c=e"")) {cequalErrors = kTRUE; computeErrors=kFALSE;}; 1311 if (computeErrors || binWeight || (binEntries && fBinSumw2.fN) ) h1->Sumw2();; 1312 ; 1313 // Fill the projected histogram; 1314 Double_t cont;; 1315 for (Int_t bin =0;bin<=nx+1;bin++) {; 1316 ; 1317 if (binEntries) cont = GetBinEntries(bin);; 1318 else if (cequalErrors) cont = GetBinError(bin);; 1319 else if (binWeight) cont = fArray[bin]; // bin content * bin entries; 1320 else cont = GetBinContent(bin); // default case; 1321 ; 1322 h1->SetBinContent(bin ,cont);; 1323 ; 1324 // if option E projected histogram errors are same as profile; 1325 if (computeErrors ) h1->SetBinError(bin , GetBinError(bin) );; 1326 // in case of option W bin error is deduced from bin sum of z**2 values of profile; 1327 // this is correct only if the profile is filled with weights =1; 1328 if (binWeight) h1->GetSumw2()->fArray[bin] = fSumw2.fArray[bin];; 1329 // in case of bin entries and profile is weighted, we need to set also the bin error; 1330 if (binEntries && fBinSumw2.fN ) {; 1331 R__ASSERT( h1->GetSumw2() );; 1332 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1333 }; 1334 ; 1335 }; 1336 ; 1337 // Copy the axis attributes and the axis labels if needed.; 1338 h1->GetXaxis()->ImportAttributes(this->GetXaxis());; 1339 h1->GetYaxis()->ImportAttributes(this->GetYaxis());; 1340 THashList* labels=this->GetXaxis()->GetLabels();; 1341 if (labels) {; 1342 TIter iL(labels);; 1343 TObjString* lb;; 1344 Int_t i = 1;; 1345 while ((lb=(TObjString*)iL())) {; 1346 h1->GetXaxis()->SetBinLabel(i,lb->String().Data());; 1347 i++;; 1348 }; 1349 }; 1350 ; 1351 h1->SetEntries(fEntries);; 1352 return h1;; 1353}; 1354 ; 1355////////////////////////////////////////////////////////////////////////////////; 1356/// Replace current statistics with the values in array stats.; 1357 ; 1358void TProfile::PutStats(Double_t *stats); 1359{; 1360 fTsumw = stats[0];; 1361 fTsumw2 = stats[1];; 1362 fTsumwx = stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:49057,error,error,49057,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['error']
Availability,"inWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. ~RooHist(); Destructor. Bool_t hasIdenticalBinning(const RooHist& other) const; Return kTRUE if binning of this RooHist is identical to that of 'other'. Bool_t isIdentical(const RooHist& other, Double_t tol = 9.9999999999999995E-7) const; Return kTRUE if contents of this RooHIst is identical within given; relative tolerance to that of 'other'. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this histogram to the specified output stream. Standard: number of entries; Shape: error CL and maximum value; Verbose: print our bin contents and errors. void printName(ostream& os) const; Print name of RooHist. void printTitle(ostream& os) const; Print title of RooHist. void printClassName(ostream& os) const; Print class name of RooHist. RooHist* makeResidHist(const RooCurve& curve, bool normalize = false, bool useAverage = false) const; Create and return RooHist containing residuals w.r.t to given curve.; If normalize is true, the residuals are normalized by the histogram; errors creating a RooHist with pull values. RooHist(). void Print(Option_t* options = 0) const; Printing interface. Double_t getNominalBinWidth() const; { return _nominalBinWidth; }. void setRawEntries(Double_t n); { _rawEntries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHist.html:25821,toler,tolerance,25821,root/html602/RooHist.html,https://root.cern,https://root.cern/root/html602/RooHist.html,4,['toler'],['tolerance']
Availability,"in] = fSumw2.fArray[bin];; 1020 // in case of bin entries and profile is weighted, we need to set also the bin error; 1021 if (binEntries && fBinSumw2.fN ) {; 1022 R__ASSERT( h1->GetSumw2() );; 1023 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1024 }; 1025 }; 1026 }; 1027 }; 1028 h1->SetEntries(fEntries);; 1029 return h1;; 1030}; 1031////////////////////////////////////////////////////////////////////////////////; 1032/// Project a 3-D profile into a 2D-profile histogram depending on the option parameter.; 1033///; 1034/// option may contain a combination of the characters x,y,z:; 1035///; 1036/// - option = ""xy"" return the x versus y projection into a TProfile2D histogram; 1037/// - option = ""yx"" return the y versus x projection into a TProfile2D histogram; 1038/// - option = ""xz"" return the x versus z projection into a TProfile2D histogram; 1039/// - option = ""zx"" return the z versus x projection into a TProfile2D histogram; 1040/// - option = ""yz"" return the y versus z projection into a TProfile2D histogram; 1041/// - option = ""zy"" return the z versus y projection into a TProfile2D histogram; 1042///; 1043/// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal along X; 1044///; 1045/// The resulting profile contains the combination of all the considered bins along X; 1046/// By default, all bins are included considering also underflow/overflows; 1047///; 1048/// The option can also be used to specify the projected profile error type.; 1049/// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; 1050///; 1051/// To select a bin range along an axis, use TAxis::SetRange, eg; 1052/// `h3.GetYaxis()->SetRange(23,56);`; 1053 ; 1054TProfile2D *TProfile3D::Project3DProfile(Option_t *option) const; 1055{; 1056 // can call TH3 method which will call the virtual method :DoProjectProfile2D re-implemented below; 1057 // but need to add underflow/overflow; 1058 TString opt(option);; 1059 opt.Append("" UF OF"");; 1060 return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:38717,error,error,38717,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['error']
Availability,"in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 2056 of file TGCocoa.mm. ◆ FillPolygonAux(). void TGCocoa::FillPolygonAux ; (; Window_t ; wid, . const GCValues_t & ; gcVals, . const Point_t * ; polygon, . Int_t ; nPoints . ). Definition at line 1984 of file TGCocoa.mm. ◆ FillRectangle(). void TGCocoa::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 1954 of file TGCocoa.mm. ◆ FillRectangleAux(). void TGCocoa::FillRectangleAux ; (; Drawable_t ; wid, . const GCValues_t & ; gcVals, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Definition at line 1889 of file TGCocoa.mm. ◆ FindAtom(). Atom_t TGCocoa::FindAtom ; (; const std::string & ; atomName, . bool ; addIfNotFound . ). private . Definition at line 4495 of file TGCocoa.mm. ◆ FindRWindow(). Window_t TGCocoa::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Reimplemented from TVirtualX.; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:78696,mask,mask,78696,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['mask'],['mask']
Availability,"in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX.; Definition at line 2600 of file TGCocoa.mm. ◆ QueryColor(). void TGCocoa::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX.; Definition at line 2927 of file TGCocoa.mm. ◆ QueryPointer() [1/2]. void TGCocoa::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Returns the pointer position. ; Reimplemented from TVirtualX.; Definition at line 3144 of file TGCocoa.mm. ◆ QueryPointer() [2/2]. void TGCocoa::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; Parameters. [in]idspecifies the window ; [in]rootwthe root window that the pointer is in ; [in]childwthe child window that the pointer is located in, if any ; [in]root_x,root_ythe pointer coordinates relative to the root window's origin ; [in]win_x,win_ythe pointer coordinates relative to the specified window ""id"" ; [in]maskthe current state of the modifier keys and pointer buttons . Reimplemented from TVirtualX.; Definition at line 3155 of file TGCocoa.mm. ◆ RaiseWindow(). void TGCocoa::RaiseWindow ; (; Window_t ; id). overridevirtual . Raises the specified window to the top of the stack so that no sibling window obscures it. ; Reimplemented from TVirtualX.; Definition at line 1214 of file TGCocoa.mm. ◆ ReadGIF(). Pixmap_t TGCocoa::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id . ). overridevirtual . If id",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:105714,mask,mask,105714,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['mask'],['mask']
Availability,in_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=7.28945 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=7.28945; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=0.024352 Asig=0.0100451 p_ph_sig2_gamma_bin_0=0.351536 p_ph_sig2_gamma_bin_1=0.352649 p_ph_sig2_gamma_bin_10=0.342736 p_ph_sig2_gamma_bin_11=0.36962 p_ph_sig2_gamma_bin_12=0.383863 p_ph_sig2_gamma_bin_13=0.366897 p_ph_sig2_gamma_bin_14=0.358549 p_ph_sig2_gamma_bin_15=0.358659 p_ph_sig2_gamma_bin_16=0.3674 p_ph_sig2_gamma_bin_17=0.356318 p_ph_sig2_gamma_bin_18=0.362267 p_ph_sig2_gamma_bin_19=0.340116 p_ph_sig2_gamma_bin_2=0.350595 p_ph_sig2_gamma_bin_20=0.352431 p_ph_sig2_gamma_bin_21=0.351643 p_ph_sig2_gamma_bin_22=0.35167 p_ph_sig2_gamma_bin_23=0.344542 p_ph_sig2_gamma_bin_24=0.365744 p_ph_sig2_gamma_bin_3=0.355252 p_ph_sig2_gamma_bin_4=0.34783 p_ph_sig2_gamma_bin_5=0.348683 p_ph_sig2_gamma_bin_6=0.357671 p_ph_sig2_gamma_bin_7=0.351115 p_ph_sig2_gamma_bin_8=0.342731 p_ph_sig2_gamma_bin_9=0.357348; ; RooAbsMinimizerFcn: Minimize,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:36410,error,error,36410,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,"inal axis range of the taget axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; Using a TCutG object, it is possible to select a sub-range of a 2-D histogram. One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileY("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileY("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts:; myhist->ProfileY("" "",firstybin,lastybin,""[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that he Y axis attributes of the TH2 are copied to the X axis of the profile. NOTE that the default under- / overflow behavior differs from what ProjectionX; does! Profiles take the bin center into account, so here the under- and overflow; bins are ignored by default. TH1D * DoProjection(bool onX, const char* name, Int_t firstbin, Int_t lastbin, Option_t* option) const; internal (protected) method for performing projection on the X or Y axis; called by ProjectionX or ProjectionY. TH1D * ProjectionX(const char* name = ""_px"", Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 2-D histogram into a 1-D histogram along X*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; By default, all bins including under- and overflow are included.; The number of en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2.html:49161,error,error,49161,root/html534/TH2.html,https://root.cern,https://root.cern/root/html534/TH2.html,2,['error'],['error']
Availability,"inary dimension of CERF-LUT; static Double_t_imRangeRange in imaginary dimension of CERF-LUT; static Double_t_imStepGrid spacing in imaginary dimension of CERF-LUT; static Int_t_reBinsNumber of grid points in real dimension of CERF-LUT; static double**_reCerfArrayLookup table for Re part of complex error function; static Double_t_reMaxHigh edge of real dimension of CERF-LUT; static Double_t_reMinLow edge of real dimension of CERF-LUT; static Double_t_reRangeRange in real dimension of CERF-LUT; static Double_t_reStepGrid spacing in real dimension of CERF-LUT. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooComplex FastComplexErrFunc(const RooComplex& z). Double_t FastComplexErrFuncRe(const RooComplex& z). Double_t FastComplexErrFuncIm(const RooComplex& z). void cacheCERF(Bool_t flag = kTRUE). RooComplex ComplexErrFunc(Double_t re, Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.; (see ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/c/cwerf64.F). void initFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:3004,error,error,3004,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,5,['error'],['error']
Availability,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofServ.html:18506,error,error,18506,root/html534/TXProofServ.html,https://root.cern,https://root.cern/root/html534/TXProofServ.html,2,['error'],['error']
Availability,"inates :; TGeoManager::SetExplodedView(Int_t opt). Options may be :; - 0 - default (no bombing); - 1 - cartesian coordinates. The bomb factor on each axis can be set with; TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; - 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R; are considered. /*. */. - 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; - TGeoVolume::SetVisibility() : set volume visibility.; - TGeoVolume::VisibleDaughters() : set daughters visibility.; All these actions automatically updates the current view if any. --- Checking the geometry. Several checking methods are accessible from the volume context menu. They; generally apply only to the visible parts of the drawn geometry in order to; ease geometry checking, and their implementation is in the TGeoChecker class; from the painting package. 1. Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z).; This method is drawing the daughters of the volume containing the point one; level down, printing the path to the deepest physical node holding this point.; It also computes the closest distance to any boundary. The point will be drawn; in red. /*. */. 2. Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and; it will draw this volume with current visualization settings. Random points; are generated in the bounding box of the top drawn volume. The points are; classified and drawn with the color of their deepest container. Only points; in visible nodes will be drawn. /*. */. 3. Raytracing.; Can be called from TGeoVolume::RandomRays() (context menu of volumes) and; will shoot rays from a given point in the local reference frame with random; directions. The intersections with displayed nodes will appear as segments; having the color of the touched node. Drawn geometry will be then made invisible; in orde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:10091,CheckPoint,CheckPoint,10091,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,4,['CheckPoint'],['CheckPoint']
Availability,"inates meaningful to the user. But when reporting the individual; 306parabolic errors for limited parameters, Minuit can do a little better, so; 307it does. In this case, Minuit actually transforms the ends of the; 308internal ""error bar"" to external coordinates and reports the length of; 309this transformed interval. Strictly speaking, it is now asymmetric, but; 310since the origin of the asymmetry is only an artificial transformation it; 311does not make much sense, so the transformed errors are symmetrized.; 312 ; 313The result of all the above is that for parameters with limits, the error; 314reported by Minuit is not exactly equal to the square root of the diagonal; 315element of the error matrix. The difference is a measure of how much the; 316limits deform the problem. If possible, it is suggested not to use limits; 317on parameters, and the problem goes away. If for some reason limits are; 318necessary, and you are sensitive to the difference between the two ways of; 319calculating the errors, it is suggested to use Minos errors which take; 320into account the non-linearities much more precisely.; 321 ; 322*/; 323 ; 324#include <cstdlib>; 325#include <cstdio>; 326 ; 327#include ""TROOT.h""; 328#include ""TList.h""; 329#include ""TMinuit.h""; 330#include ""TMath.h""; 331#include ""TError.h""; 332#include ""TPluginManager.h""; 333#include ""TClass.h""; 334 ; 335#include <atomic>; 336 ; 337TMinuit *gMinuit;; 338 ; 339static const char charal[29] = "" .ABCDEFGHIJKLMNOPQRSTUVWXYZ"";; 340 ; 341ClassImp(TMinuit);; 342 ; 343////////////////////////////////////////////////////////////////////////////////; 344/// Minuit normal constructor; 345///; 346 ; 347TMinuit::TMinuit(): TNamed(""MINUIT"",""The Minimization package""); 348{; 349 if (TMinuit::Class()->IsCallingNew() != TClass::kRealNew) {; 350 //preset all pointers to null; 351 fCpnam = nullptr;; 352 fU = nullptr;; 353 fAlim = nullptr;; 354 fBlim = nullptr;; 355 fPstar = nullptr;; 356 fGin = nullptr;; 357 fNvarl = nullptr;; 358 fNiof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:15936,error,errors,15936,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['errors']
Availability,"included in the returned subset. ;  ; Double_t CStep (Int_t ntotal, Int_t htotal, Int_t *index, TMatrixD &data, TMatrixD &sscp, Double_t *ndist);  from the input htotal-subset constructs another htotal subset with lower determinant ;  ; Int_t Exact (Double_t *ndist);  for the exact fit situations returns number of observations on the hyperplane ;  ; Int_t Exact2 (TMatrixD &mstockbig, TMatrixD &cstockbig, TMatrixD &hyperplane, Double_t *deti, Int_t nbest, Int_t kgroup, TMatrixD &sscp, Double_t *ndist);  This function is called if determinant of the covariance matrix of a subset=0. ;  ; Double_t KOrdStat (Int_t ntotal, Double_t *arr, Int_t k, Int_t *work);  because I need an Int_t work array ;  ; Int_t Partition (Int_t nmini, Int_t *indsubdat);  divides the elements into approximately equal subgroups number of elements in each subgroup is stored in indsubdat number of subgroups is returned ;  ; Int_t RDist (TMatrixD &sscp);  Calculates robust distances.Then the samples with robust distances greater than a cutoff value (0.975 quantile of chi2 distribution with fNvar degrees of freedom, multiplied by a correction factor), are given weiht=0, and new, reweighted estimates of location and scatter are calculated The function returns the number of outliers. ;  ; void RDraw (Int_t *subdat, Int_t ngroup, Int_t *indsubdat);  Draws ngroup nonoverlapping subdatasets out of a dataset of size n such that the selected case numbers are uniformly distributed from 1 to n. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMatrixDSym fCorrelation;  ; TMatrixDSym fCovariance;  ; TMatrixD fData;  ; Int_t fExact;  ; Int_t fH;  ; TVectorD fHyperplane;  ; TMatrixDSym fInvcovariance;  ; TVectorD fMean;  ; Int_t fN;  ; Int_t fNvar;  ; TArrayI fOut;  ; TVectorD fRd;  ; TVectorD fSd;  ; Int_t fVarTemp;  ; Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:17113,robust,robust,17113,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['robust'],['robust']
Availability,"ind(i);; 328 return (itr != fMinosErrors.end() );; 329}; 330 ; 331 ; 332double FitResult::LowerError(unsigned int i) const {; 333 // return lower Minos error for parameter i; 334 // return the parabolic error if Minos error has not been calculated for the parameter i; 335 std::map<unsigned int, std::pair<double,double> >::const_iterator itr = fMinosErrors.find(i);; 336 return ( itr != fMinosErrors.end() ) ? itr->second.first : Error(i) ;; 337}; 338 ; 339double FitResult::UpperError(unsigned int i) const {; 340 // return upper Minos error for parameter i; 341 // return the parabolic error if Minos error has not been calculated for the parameter i; 342 std::map<unsigned int, std::pair<double,double> >::const_iterator itr = fMinosErrors.find(i);; 343 return ( itr != fMinosErrors.end() ) ? itr->second.second : Error(i) ;; 344}; 345 ; 346void FitResult::SetMinosError(unsigned int i, double elow, double eup) {; 347 // set the Minos error for parameter i; 348 fMinosErrors[i] = std::make_pair(elow,eup);; 349}; 350 ; 351int FitResult::Index(const std::string & name) const {; 352 // find index for given parameter name; 353 if (! fFitFunc) return -1;; 354 unsigned int npar = fParams.size();; 355 for (unsigned int i = 0; i < npar; ++i); 356 if ( fFitFunc->ParameterName(i) == name) return i;; 357 ; 358 return -1; // case name is not found; 359}; 360 ; 361bool FitResult::IsParameterBound(unsigned int ipar) const {; 362 return fBoundParams.find(ipar) != fBoundParams.end();; 363}; 364 ; 365bool FitResult::IsParameterFixed(unsigned int ipar) const {; 366 return fFixedParams.find(ipar) != fFixedParams.end();; 367}; 368 ; 369bool FitResult::ParameterBounds(unsigned int ipar, double & lower, double & upper) const {; 370 std::map<unsigned int, unsigned int>::const_iterator itr = fBoundParams.find(ipar);; 371 if (itr == fBoundParams.end() ) {; 372 lower = -std::numeric_limits<Double_t>::infinity();; 373 upper = std::numeric_limits<Double_t>::infinity();; 374 return false;; 375 }; 376 ass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:11854,error,error,11854,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['error'],['error']
Availability,"indDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. MinimizerOptions(); constructor using the default options. ~MinimizerOptions(); destructor. MinimizerOptions(const ROOT::Math::MinimizerOptions& opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrieving options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrateg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__MinimizerOptions.html:5017,error,error,5017,root/html534/ROOT__Math__MinimizerOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__MinimizerOptions.html,9,"['Error', 'error']","['ErrorDef', 'error']"
Availability,"indexed color palette does not support transparency. void ColorFromIdx(Color_t ci, UChar_t[4] col, Char_t transparency); Fill col with RGBA values corresponding to index ci and transparency.; ROOT's indexed color palette does not support transparency. void ColorFromIdx(Float_t f1, Color_t c1, Float_t f2, Color_t c2, UChar_t[4] col, Bool_t alpha = kTRUE); Fill col with weighted RGBA values corresponding to; color-indices c1 and c2. If alpha is true, set alpha component; of col to 255. Color_t* FindColorVar(TObject* obj, const char* varname); Find address of Color_t data-member with name varname in object; obj. This is used to access color information for TGListTreeItem; coloration from visualization macros that wrap TObjects into; TEveElementObjectPtr instances. void SetColorBrightness(Float_t value, Bool_t full_redraw = kFALSE); Tweak all ROOT colors to become brighter (if value > 0) or; darker (value < 0). Reasonable values for the value argument are; from -2.5 to 2.5 (error will be printed otherwise).; If value is zero, the original colors are restored. You should call TEveManager::FullRedraw3D() afterwards or set; the argument full_redraw to true (default is false). Bool_t IsU1IntervalContainedByMinMax(Float_t minM, Float_t maxM, Float_t minQ, Float_t maxQ); Return true if interval Q is contained within interval M for U1 variables.; It is assumed that all values are within the [-2pi, 2pi] interval and; minM <= maxM & minQ <= maxQ. Bool_t IsU1IntervalOverlappingByMinMax(Float_t minM, Float_t maxM, Float_t minQ, Float_t maxQ); Return true if interval Q is overlapping within interval M for U1 variables.; It is assumed that all values are within the [-2pi, 2pi] interval and; minM <= maxM & minQ <= maxQ. Float_t GetFraction(Float_t minM, Float_t maxM, Float_t minQ, Float_t maxQ); Get fraction of interval [minQ, maxQ] in [minM, maxM]. Bool_t IsU1IntervalContainedByMeanDelta(Float_t meanM, Float_t deltaM, Float_t meanQ, Float_t deltaQ). Bool_t IsU1IntervalOverlappingByM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveUtil.html:3757,error,error,3757,root/html602/TEveUtil.html,https://root.cern,https://root.cern/root/html602/TEveUtil.html,4,['error'],['error']
Availability,"inding. ; Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. ; For finding the roots users should not use this class directly but instantiate the derived classes, for example ROOT::Math::Roots::Brent for using the Brent algorithm. All the classes defining the alhorithms are defined in the header Math/RootFinderAlgorithm.h They possible types implementing root bracketing algorithms which they do not require function derivatives are: . ROOT::Math::Roots::Bisection . ROOT::Math::Roots::FalsePos . ROOT::Math::Roots::Brent . See also the specific classes for the documentation. See the GSL online manual for information on the GSL Root-Finding algorithms ; Definition at line 73 of file GSLRootFinder.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  . Public Member Functions;  GSLRootFinder ();  ;  GSLRootFinder (const GSLRootFinder &)=delete;  ;  GSLRootFinder (GSLRootFinder &&)=delete;  ;  ~GSLRootFinder () override;  ; int Iterate () override;  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  ; int Iterations () const override;  Return number of iterations. ;  ; const char * Name () const override;  double GSLRootFinder::XLower() const { return fXlow; } ;  ; GSLRootFinder & operator= (const GSLRootFinder &)=delete;  ; GSLRootFinder & operator= (GSLRootFinder &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; bool SetFunction (GSLFuncPointer f, void *params, double xlow, double xup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html:1531,error,error,1531,doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,1,['error'],['error']
Availability,"indings. On top, these bindings are compiled against a specific version of Python, making for a distribution headache (just see the non-pickup of Python3 because of this problem). Compare: dictionaries are already available for all the most important classes in experiments, the EDM, because they are generated for I/O needs. They also do not depend on Python, and thus not on any specific version (only PyROOT does). Besides the obvious ease of use, there is also the benefit of lower memory footprints by not replicating structures. (For that matter, PyROOT creates bindings lazily, the others do not.); Other problems we've had, are that boost.python is very, very slow and only in ""keeping alive"" mode since 2004 or so. Pyste is based on gccxml, so no C++11 there, and has seen no major updates since 2005. SWIG is much, much better in both regards, but not up to snuff: it plain and simply can not parse our header files. The way around that, is to write .i files, but as you can imagine, that duplication is not nice for maintenance. Worse, the developers of individual packages need to do this work, and not every C++ developer has Python, let alone SWIG, experience.; Then there's PyPy. All existing binding generator tools (including PyROOT) rely on CPython internals, or at least on the Python C-API. That does not jive with PyPy as it has for example a garbage collector instead of reference counting. Through some heroics, it does expose a Python C-API, but it's slow as it interferes (blocks, really) the just-in-time compiler. Therefore, within PyPy, there are two new approaches: cffi for C and cppyy for C++. Both are part of the standard PyPy releases. There is also already a PyROOT version for the latter (see: http://root.cern.ch/drupal/content/pypyroot).; Cheers,; Wim. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . Why? . I don't understand. You wish to maintain backwards compatibility. This implies maintaining the insanity that is the equivalen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:7877,mainten,maintenance,7877,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['mainten'],['maintenance']
Availability,"individual; // event weights represent Poisson statistics themselves.; //; // Fit with 'wrong' errors; std::unique_ptr<RooFitResult> r_ml_wgt{p2.fitTo(wdata, Save(), PrintLevel(-1))};; ; // A first order correction to estimated parameter errors in an; // (unbinned) ML fit can be obtained by calculating the; // covariance matrix as; //; // V' = V C-1 V; //; // where V is the covariance matrix calculated from a fit; // to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; // matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; // (i.e. the weights are applied squared); //; // A fit in this mode can be performed as follows:; ; std::unique_ptr<RooFitResult> r_ml_wgt_corr{p2.fitTo(wdata, Save(), SumW2Error(true), PrintLevel(-1))};; ; // P l o t w e i g h e d d a t a a n d f i t r e s u l t; // ---------------------------------------------------------------; ; // Construct plot frame; RooPlot *frame = x.frame(Title(""Unbinned ML fit, binned chi^2 fit to weighted data""));; ; // Plot data using sum-of-weights-squared error rather than Poisson errors; wdata.plotOn(frame, DataError(RooAbsData::SumW2));; ; // Overlay result of 2nd order polynomial fit to weighted data; p2.plotOn(frame);; ; // ML Fit of pdf to equivalent unweighted dataset; // -----------------------------------------------------------------------------------------; ; // Construct a pdf with the same shape as p0 after weighting; RooGenericPdf genPdf(""genPdf"", ""x*x+10"", x);; ; // Sample a dataset with the same number of events as data; std::unique_ptr<RooDataSet> data2{genPdf.generate(x, 1000)};; ; // Sample a dataset with the same number of weights as data; std::unique_ptr<RooDataSet> data3{genPdf.generate(x, 43000)};; ; // Fit the 2nd order polynomial to both unweighted datasets and save the results for comparison; std::unique_ptr<RooFitResult> r_ml_unw10{p2.fitTo(*data2, Save(), PrintLevel(-1))};; std::unique_ptr<RooFitResult> r_ml_unw43{p2.fitTo(*data3, Save(), PrintLevel(-1))};; ; // C h i 2 f i ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:3411,error,error,3411,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,2,['error'],"['error', 'errors']"
Availability,"indow to be resized (minimum to maximum) . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1768 of file TVirtualX.cxx. ◆ SetWMState(). void TVirtualX::SetWMState ; (; Window_t ; id, . EInitialState ; state . ). virtual . Sets the initial state of the window ""id"": either kNormalState or kIconicState. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1778 of file TVirtualX.cxx. ◆ SetWMTransientHint(). void TVirtualX::SetWMTransientHint ; (; Window_t ; id, . Window_t ; main_id . ). virtual . Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ; A window manager may decide not to decorate a transient window or may treat it differently in other ways. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1787 of file TVirtualX.cxx. ◆ ShapeCombineMask(). void TVirtualX::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). virtual . The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2386 of file TVirtualX.cxx. ◆ Streamer(). void TVirtualX::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TVirtualX::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 334 of file TVirtualX.h. ◆ SubtractRegion(). void TVirtualX::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). virtual . Subtracts regb from rega and stores the results in result. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2197 of file TVirtualX.cxx. ◆ SupportsExtension(). Int_t TVirtualX::SupportsExtension ; (; const char * ; ext); const. virtual . Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:132424,mask,mask,132424,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,"indow() [2/2]. void TVirtualX::ResizeWindow ; (; Window_t ; id, . UInt_t ; w, . UInt_t ; h . ). virtual . Changes the width and height of the specified window ""id"", not including its borders. ; This function does not change the window's upper-left coordinate.; Parameters. [in]idwindow identifier ; [in]w,hthe width and height, which are the interior dimensions of the window after the call completes. . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1101 of file TVirtualX.cxx. ◆ ScreenWidthMM(). UInt_t TVirtualX::ScreenWidthMM ; (; ); const. virtual . Returns the width of the screen in millimeters. ; Reimplemented in TGCocoa, TGWin32, and TGX11.; Definition at line 2393 of file TVirtualX.cxx. ◆ SelectInput(). void TVirtualX::SelectInput ; (; Window_t ; id, . UInt_t ; evmask . ). virtual . Defines which input events the window is interested in. ; By default events are propagated up the window stack. This mask can also be set at window creation time via the SetWindowAttributes_t::fEventMask attribute. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1946 of file TVirtualX.cxx. ◆ SelectPixmap(). void TVirtualX::SelectPixmap ; (; Int_t ; qpixid). virtual . Selects the pixmap ""qpixid"". ; Reimplemented in TGCocoa.; Definition at line 700 of file TVirtualX.cxx. ◆ SelectWindow(). void TVirtualX::SelectWindow ; (; Int_t ; wid). virtual . Selects the window ""wid"" to which subsequent output is directed. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 693 of file TVirtualX.cxx. ◆ SendEvent(). void TVirtualX::SendEvent ; (; Window_t ; id, . Event_t * ; ev . ). virtual . Specifies the event ""ev"" is to be sent to the window ""id"". ; This function requires you to pass an event mask. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1623 of file TVirtualX.cxx. ◆ SetCharacterUp(). void TVirtualX::SetCharacterUp ; (; Float_t ; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:115896,mask,mask,115896,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,indow. Definition at line 100 of file TGWin32VirtualXProxy.cxx. ◆ main_id. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void main_id. Definition at line 126 of file TGWin32VirtualXProxy.cxx. ◆ MapSubwindows. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize MapSubwindows. Definition at line 94 of file TGWin32VirtualXProxy.cxx. ◆ markerstyle. Option_t Option_t markerstyle. Definition at line 52 of file TGWin32VirtualXProxy.cxx. ◆ mask. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h mask. Definition at line 178 of file TGWin32VirtualXProxy.cxx. ◆ Mask_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Mask_t. Definition at line 178 of file TGWin32VirtualXProxy.cxx. ◆ mgn. Option_t Option_t TPoint TPoint mgn. Definition at line 48 of file TGWin32VirtualXProxy.cxx. ◆ mode. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor Get,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:194650,mask,mask,194650,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['mask'],['mask']
Availability,"indow::DestroyWindow()MENU ; virtual voidTEveWindow::DestroyWindowAndSlot()MENU ; voidTEveElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); voidEqualizeFrames()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveWindowPack.html:5162,Error,Error,5162,root/html532/TEveWindowPack.html,https://root.cern,https://root.cern/root/html532/TEveWindowPack.html,4,['Error'],['Error']
Availability,"indowID (Int_t wid) override;  Return the X11 window identifier. ;  ; void GetWindowSize (Drawable_t id, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Return geometry of window (should be called GetGeometry but signature already used). ;  ; void GrabButton (Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab=kTRUE) override;  Establish passive grab on a certain mouse button. ;  ; void GrabKey (Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab=kTRUE) override;  Establish passive grab on a certain key. ;  ; void GrabPointer (Window_t id, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab=kTRUE, Bool_t owner_events=kTRUE) override;  Establish an active pointer grab. ;  ; Bool_t HasTTFonts () const override;  Returns True when TrueType fonts are used. ;  ; void IconifyWindow (Window_t id) override;  Iconify the window. ;  ; Bool_t Init (void *display=0) override;  Initialize Win32 system. Returns kFALSE in case of failure. ;  ; Int_t InitWindow (ULongptr_t window) override;  Open window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Return atom handle for atom_name. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the intersection of rega and regb and return result region. ;  ; TClass * IsA () const override;  ; Bool_t IsCmdThread () const override;  returns kTRUE if we are inside cmd/server thread ;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if Window win is DND aware, and knows any of the DND formats passed in argument. ;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Convert a keysym to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Return list of font names matching ""fontname"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:13309,failure,failure,13309,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['failure'],['failure']
Availability,"indows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2386 of file TVirtualX.cxx. ◆ Streamer(). void TVirtualX::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TVirtualX::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 334 of file TVirtualX.h. ◆ SubtractRegion(). void TVirtualX::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). virtual . Subtracts regb from rega and stores the results in result. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2197 of file TVirtualX.cxx. ◆ SupportsExtension(). Int_t TVirtualX::SupportsExtension ; (; const char * ; ext); const. virtual . Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ; Reimplemented in TGX11, and TGCocoa.; Definition at line 2497 of file TVirtualX.cxx. ◆ Sync(). void TVirtualX::Sync ; (; Int_t ; mode). virtual . Set synchronisation on or off. ; Parameters. [in]modesynchronisation on/off; mode=1 on; mode<>0 off . Reimplemented in TGCocoa, TGWin32, and TGX11.; Definition at line 943 of file TVirtualX.cxx. ◆ TextWidth(). Int_t TVirtualX::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). virtual . Return length of the string ""s"" in pixels. Size depends on font. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1816 of file TVirtualX.cxx. ◆ TranslateCoordinates(). void TVirtualX::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). virtual . Translates coordinates in one window to the coordin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:133565,error,error,133565,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['error'],['error']
Availability,"indows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT master - Reference Guide Gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:12950,avail,available,12950,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,1,['avail'],['available']
Availability,"indows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT v6-32 - Reference Guide Gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1option.html:13121,avail,available,13121,doc/v632/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html,1,['avail'],['available']
Availability,"indowsize > 65KB and for platforms supporting window scaling).; Returns socket fd or -1 if socket() failed, -2 if bind() failed; or -3 if listen() failed. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service on path ""kServerPath/<port>"". int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service on path 'sockpath'. int AcceptConnection(int sock); Accept a connection. In case of an error return -1. In case; non-blocking I/O is enabled and no connections are available; return -2. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket. int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. Lenght is the size of; the buffer. Returns the number of bytes received in buf or -1 in; case of error. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. Returns length of sent buffer; or -1 in case of error. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). Buffer; must be able to store at least length bytes. Returns the number of; bytes received (can be 0 if other side of connection was closed) or -1; in case of error, -2 in case of MSG_OOB and errno == EWOULDBLOCK, -3; in case of MSG_OOB and errno == EINVAL and -4 in case of kNoBlock and; errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer; (EPIPE || ECONNRESET). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). Returns the number of bytes sent or -1 in case of; error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). int SetSockOpt(int sock, int option, int val); Set socket optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnixSystem.html:35339,error,error,35339,root/html532/TUnixSystem.html,https://root.cern,https://root.cern/root/html532/TUnixSystem.html,2,['error'],['error']
Availability,"indowsize > 65KB and for platforms supporting window scaling).; Returns socket fd or -1 if socket() failed, -2 if bind() failed; or -3 if listen() failed. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service on path ""kServerPath/<port>"". int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service on path 'sockpath'. int AcceptConnection(int sock); Accept a connection. In case of an error return -1. In case; non-blocking I/O is enabled and no connections are available; return -2. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket. int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. Length is the size of; the buffer. Returns the number of bytes received in buf or -1 in; case of error. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. Returns length of sent buffer; or -1 in case of error. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). Buffer; must be able to store at least length bytes. Returns the number of; bytes received (can be 0 if other side of connection was closed) or -1; in case of error, -2 in case of MSG_OOB and errno == EWOULDBLOCK, -3; in case of MSG_OOB and errno == EINVAL and -4 in case of kNoBlock and; errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer; (EPIPE || ECONNRESET). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). Returns the number of bytes sent or -1 in case of; error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). int SetSockOpt(int sock, int option, int val); Set socket optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:35192,error,error,35192,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,6,['error'],['error']
Availability,"ine . Definition at line 145 of file TApplication.h. ◆ Raise(). virtual void TApplication::Raise ; (; ). inlinevirtual . Definition at line 133 of file TApplication.h. ◆ RemoveIdleTimer(). void TApplication::RemoveIdleTimer ; (; ). virtual . Remove idle timer. Normally called via TROOT::Idle(0). ; Definition at line 1885 of file TApplication.cxx. ◆ ReturnFromRun(). Bool_t TApplication::ReturnFromRun ; (; ); const. inline . Definition at line 153 of file TApplication.h. ◆ ReturnPressed(). void TApplication::ReturnPressed ; (; char * ; text). virtual . Emit signal when return key was pressed. ; Definition at line 1957 of file TApplication.cxx. ◆ Run(). void TApplication::Run ; (; Bool_t ; retrn = kFALSE). virtual . Main application eventloop. Calls system dependent eventloop via gSystem. ; Reimplemented in TRint, TApplicationServer, and TProofServ.; Definition at line 1860 of file TApplication.cxx. ◆ SetEchoMode(). void TApplication::SetEchoMode ; (; Bool_t ; mode). virtual . Set console echo mode: . mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols . Reimplemented in TRint.; Definition at line 1968 of file TApplication.cxx. ◆ SetIdleTimer(). void TApplication::SetIdleTimer ; (; UInt_t ; idleTimeInSec, . const char * ; command . ). virtual . Set the command to be executed after the system has been idle for idleTimeInSec seconds. ; Normally called via TROOT::Idle(...). ; Definition at line 1874 of file TApplication.cxx. ◆ SetReturnFromRun(). void TApplication::SetReturnFromRun ; (; Bool_t ; ret). inline . Definition at line 154 of file TApplication.h. ◆ SetSignalHandler(). void TApplication::SetSignalHandler ; (; TSignalHandler * ; sh). inlineprotected . Definition at line 92 of file TApplication.h. ◆ Show(). virtual void TApplication::Show ; (; ). inlinevirtual . Definition at line 129 of file TApplication.h. ◆ StartIdleing(). void TApplication::StartIdleing ; (; ). virtual . Called when system starts idleing. ; Definition at line 1896 of file TAp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:37251,echo,echo,37251,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['echo'],['echo']
Availability,"ine . Definition at line 37 of file TProofPlayerLite.h. ◆ ~TProofPlayerLite(). TProofPlayerLite::~TProofPlayerLite ; (; ). inlineoverride . Definition at line 39 of file TProofPlayerLite.h. Member Function Documentation. ◆ Class(). static TClass * TProofPlayerLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayerLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayerLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TProofPlayerLite.h. ◆ DeclFileName(). static const char * TProofPlayerLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TProofPlayerLite.h. ◆ Finalize() [1/2]. Long64_t TProofPlayerLite::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize a query. ; Returns -1 in case error, 0 otherwise. ; Reimplemented from TProofPlayer.; Definition at line 331 of file TProofPlayerLite.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayerLite::Finalize ; (; TQueryResult * ; qr). inlineoverridevirtual . Finalize query (may not be used in this class). ; Reimplemented from TProofPlayer.; Definition at line 48 of file TProofPlayerLite.h. ◆ HandleTimer(). Bool_t TProofPlayerLite::HandleTimer ; (; TTimer * ; timer). overrideprotectedvirtual . Send feedback objects to client. ; Reimplemented from TObject.; Definition at line 442 of file TProofPlayerLite.cxx. ◆ IsA(). TClass * TProofPlayerLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayer.; Definition at line 53 of file TProofPlayerLite.h. ◆ MakeSelector(). Int_t TProofPlayerLite::MakeSelector ; (; const char * ; selfile). protected . Create the selector object and save the relevant files and binary information in the cache so that the worker can pick it up.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:28453,error,error,28453,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['error'],['error']
Availability,"ine . Definition at line 79 of file TSelector.h. ◆ Terminate(). virtual void TSelector::Terminate ; (; void ; ). inlinevirtual . Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, TProofDraw, TProofDrawHist, TProofDrawEventList, TProofDrawEntryList, TProofDrawProfile, TProofDrawProfile2D, TProofDrawGraph, TProofDrawPolyMarker3D, TProofDrawListOfGraphs, TProofDrawListOfPolyMarkers3D, TSelectorDraw, TSelectorEntries, h1analysis, and h1analysisTreeReader.; Definition at line 71 of file TSelector.h. ◆ Version(). virtual int TSelector::Version ; (; ); const. inlinevirtual . Reimplemented in TSelEvent, TEveSelectorToEventList, ROOT::Experimental::REveSelectorToEventList, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, TProofDraw, RooProofDriverSelector, TSelectorEntries, h1analysis, and h1analysisTreeReader.; Definition at line 52 of file TSelector.h. Member Data Documentation. ◆ fAbort. EAbort TSelector::fAbort. protected . Abort status. ; Definition at line 38 of file TSelector.h. ◆ fInput. TList* TSelector::fInput. protected . List of objects available during processing. ; Definition at line 41 of file TSelector.h. ◆ fObject. TObject* TSelector::fObject. protected . ! Current object if processing object (vs. TTree) ; Definition at line 40 of file TSelector.h. ◆ fOption. TString TSelector::fOption. protected . Option given to TTree::Process. ; Definition at line 39 of file TSelector.h. ◆ fOutput. TSelectorList* TSelector::fOutput. protected . ! List of objects created during processing ; Definition at line 42 of file TSelector.h. ◆ fStatus. Long64_t TSelector::fStatus. protected . Selector status. ; Definition at line 37 of file TSelector.h. Libraries for TSelector:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TSelector.h; tree/tree/src/TSelector.cxx. TSelector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:27408,avail,available,27408,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['avail'],['available']
Availability,"ine . set minimizer type ; Definition at line 231 of file MinimizerOptions.h. ◆ SetPrecision(). void ROOT::Math::MinimizerOptions::SetPrecision ; (; double ; prec). inline . set the precision ; Definition at line 222 of file MinimizerOptions.h. ◆ SetPrintLevel(). void ROOT::Math::MinimizerOptions::SetPrintLevel ; (; int ; level). inline . set print level ; Definition at line 210 of file MinimizerOptions.h. ◆ SetStrategy(). void ROOT::Math::MinimizerOptions::SetStrategy ; (; int ; stra). inline . set the strategy ; Definition at line 225 of file MinimizerOptions.h. ◆ SetTolerance(). void ROOT::Math::MinimizerOptions::SetTolerance ; (; double ; tol). inline . set the tolerance ; Definition at line 219 of file MinimizerOptions.h. ◆ Strategy(). int ROOT::Math::MinimizerOptions::Strategy ; (; ); const. inline . strategy ; Definition at line 183 of file MinimizerOptions.h. ◆ Tolerance(). double ROOT::Math::MinimizerOptions::Tolerance ; (; ); const. inline . absolute tolerance ; Definition at line 186 of file MinimizerOptions.h. Member Data Documentation. ◆ fAlgoType. std::string ROOT::Math::MinimizerOptions::fAlgoType. private . Minimizer algorithmic specification (Migrad, Minimize, ...) ; Definition at line 250 of file MinimizerOptions.h. ◆ fErrorDef. double ROOT::Math::MinimizerOptions::fErrorDef. private . error definition (=1. for getting 1 sigma error for chi2 fits) ; Definition at line 246 of file MinimizerOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::MinimizerOptions::fExtraOptions. private . Definition at line 253 of file MinimizerOptions.h. ◆ fLevel. int ROOT::Math::MinimizerOptions::fLevel. private . debug print level ; Definition at line 242 of file MinimizerOptions.h. ◆ fMaxCalls. int ROOT::Math::MinimizerOptions::fMaxCalls. private . maximum number of function calls ; Definition at line 243 of file MinimizerOptions.h. ◆ fMaxIter. int ROOT::Math::MinimizerOptions::fMaxIter. private . maximum number of iterations ; Definition at line 244 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:17358,toler,tolerance,17358,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['toler'],['tolerance']
Availability,"ine . set print level ; Definition at line 210 of file MinimizerOptions.h. ◆ SetStrategy(). void ROOT::Math::MinimizerOptions::SetStrategy ; (; int ; stra). inline . set the strategy ; Definition at line 225 of file MinimizerOptions.h. ◆ SetTolerance(). void ROOT::Math::MinimizerOptions::SetTolerance ; (; double ; tol). inline . set the tolerance ; Definition at line 219 of file MinimizerOptions.h. ◆ Strategy(). int ROOT::Math::MinimizerOptions::Strategy ; (; ); const. inline . strategy ; Definition at line 183 of file MinimizerOptions.h. ◆ Tolerance(). double ROOT::Math::MinimizerOptions::Tolerance ; (; ); const. inline . absolute tolerance ; Definition at line 186 of file MinimizerOptions.h. Member Data Documentation. ◆ fAlgoType. std::string ROOT::Math::MinimizerOptions::fAlgoType. private . Minimizer algorithmic specification (Migrad, Minimize, ...) ; Definition at line 250 of file MinimizerOptions.h. ◆ fErrorDef. double ROOT::Math::MinimizerOptions::fErrorDef. private . error definition (=1. for getting 1 sigma error for chi2 fits) ; Definition at line 246 of file MinimizerOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::MinimizerOptions::fExtraOptions. private . Definition at line 253 of file MinimizerOptions.h. ◆ fLevel. int ROOT::Math::MinimizerOptions::fLevel. private . debug print level ; Definition at line 242 of file MinimizerOptions.h. ◆ fMaxCalls. int ROOT::Math::MinimizerOptions::fMaxCalls. private . maximum number of function calls ; Definition at line 243 of file MinimizerOptions.h. ◆ fMaxIter. int ROOT::Math::MinimizerOptions::fMaxIter. private . maximum number of iterations ; Definition at line 244 of file MinimizerOptions.h. ◆ fMinimType. std::string ROOT::Math::MinimizerOptions::fMinimType. private . Minimizer type (Minuit, Minuit2, etc.. ; Definition at line 249 of file MinimizerOptions.h. ◆ fPrecision. double ROOT::Math::MinimizerOptions::fPrecision. private . precision of the objective function evaluation (value <=0 means left to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:17708,error,error,17708,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['error'],['error']
Availability,"ine 144 of file MethodSVM.h. ◆ fMult. Float_t TMVA::MethodSVM::fMult. private . Definition at line 153 of file MethodSVM.h. ◆ fMultiKernels. std::string TMVA::MethodSVM::fMultiKernels. private . Definition at line 160 of file MethodSVM.h. ◆ fNSubSets. UShort_t TMVA::MethodSVM::fNSubSets. private . nr of subsets, default 1 ; Definition at line 136 of file MethodSVM.h. ◆ fNumVars. Float_t TMVA::MethodSVM::fNumVars. private . number of input variables for multi-gaussian ; Definition at line 155 of file MethodSVM.h. ◆ fOrder. Int_t TMVA::MethodSVM::fOrder. private . for Polynomial Kernel ( polynomial order ) ; Definition at line 150 of file MethodSVM.h. ◆ fSupportVectors. std::vector<TMVA::SVEvent*>* TMVA::MethodSVM::fSupportVectors. private . contains support vectors ; Definition at line 141 of file MethodSVM.h. ◆ fSVKernelFunction. SVKernelFunction* TMVA::MethodSVM::fSVKernelFunction. private . kernel function ; Definition at line 142 of file MethodSVM.h. ◆ fTheKernel. TString TMVA::MethodSVM::fTheKernel. private . kernel name ; Definition at line 148 of file MethodSVM.h. ◆ fTheta. Float_t TMVA::MethodSVM::fTheta. private . for Sigmoidal Kernel ; Definition at line 151 of file MethodSVM.h. ◆ fTolerance. Float_t TMVA::MethodSVM::fTolerance. private . tolerance parameter ; Definition at line 134 of file MethodSVM.h. ◆ fTune. std::string TMVA::MethodSVM::fTune. private . Specify parameters to be tuned. ; Definition at line 159 of file MethodSVM.h. ◆ fVarNames. std::vector<TString> TMVA::MethodSVM::fVarNames. private . Definition at line 156 of file MethodSVM.h. ◆ fWgSet. SVWorkingSet* TMVA::MethodSVM::fWgSet. private . svm working set ; Definition at line 139 of file MethodSVM.h. Libraries for TMVA::MethodSVM:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodSVM.h; tmva/tmva/src/MethodSVM.cxx. TMVAMethodSVM. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html:42573,toler,tolerance,42573,doc/master/classTMVA_1_1MethodSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html,1,['toler'],['tolerance']
Availability,"ine 161 of file TUDPSocket.h. ◆ GetCompressionSettings(). Int_t TUDPSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 167 of file TUDPSocket.h. ◆ GetDescriptor(). virtual Int_t TUDPSocket::GetDescriptor ; (; ); const. inlinevirtual . Definition at line 99 of file TUDPSocket.h. ◆ GetErrorCode(). Int_t TUDPSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1005 of file TUDPSocket.cxx. ◆ GetInetAddress(). TInetAddress TUDPSocket::GetInetAddress ; (; ); const. inline . Definition at line 100 of file TUDPSocket.h. ◆ GetLastUsage(). TTimeStamp TUDPSocket::GetLastUsage ; (; ). inline . Definition at line 116 of file TUDPSocket.h. ◆ GetLocalInetAddress(). TInetAddress TUDPSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Definition at line 373 of file TUDPSocket.cxx. ◆ GetLocalPort(). Int_t TUDPSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Definition at line 387 of file TUDPSocket.cxx. ◆ GetOption() [1/2]. Option_t * TUDPSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 83 of file TUDPSocket.h. ◆ GetOption() [2/2]. Int_t TUDPSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). virtual . Get socket options. Returns -1 in case of error. ; Definition at line 993 of file TUDPSocket.cxx. ◆ GetPort(). Int_t TUDPSocket::GetPort ; (; ); const. inline . Definition at line 102 of file TUDPSocket.h. ◆ GetRemoteProtocol(). Int_t TUDPSocket::GetRemoteProtocol ; (; ); const. inline . Definition at line 113 of file TUDPSocket.h. ◆ GetSecContext(). TSecContext * TUDPSocket::GetSecContext ; (; ); const. inline . Definition at line 114 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:23342,error,error,23342,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"ine 163 of file RooAbsCategoryLValue.cxx. ◆ setConstant(). void RooAbsCategoryLValue::setConstant ; (; bool ; value = true). inline . Definition at line 100 of file RooAbsCategoryLValue.h. ◆ setIndex() [1/2]. bool RooAbsCategoryLValue::setIndex ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to state specified by another category state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. NoteThe state name of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 48 of file RooAbsCategoryLValue.h. ◆ setIndex() [2/2]. virtual bool RooAbsCategoryLValue::setIndex ; (; value_type ; index, . bool ; printError = true . ). pure virtual . Change category state by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [1/3]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). pure virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [2/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:52874,error,error,52874,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['error'],['error']
Availability,"ine 181 of file FitUtil.cxx. ◆ CorrectValue(). double ROOT::Fit::FitUtil::CorrectValue ; (; double ; rval). Definition at line 167 of file FitUtil.cxx. ◆ EvaluateChi2(). double ROOT::Fit::FitUtil::EvaluateChi2 ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). Chi2 Functions. ; evaluate the Chi2 given a model function and the data at the point x. return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 226 of file FitUtil.cxx. ◆ EvaluateChi2Effective(). double ROOT::Fit::FitUtil::EvaluateChi2Effective ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int & ; nPoints . ). evaluate the effective Chi2 given a model function and the data at the point x. ; The effective chi2 uses the errors on the coordinates : W = 1/(sigma_y**2 + ( sigma_x_i * df/dx_i )**2 ) return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 424 of file FitUtil.cxx. ◆ EvaluateChi2Gradient(). void ROOT::Fit::FitUtil::EvaluateChi2Gradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:6329,error,errors,6329,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['error'],['errors']
Availability,"ine 284 of file MCMCInterval.h. ◆ fCutoffVar. RooRealVar* RooStats::MCMCInterval::fCutoffVar = nullptr. protected . cutoff variable to use for integrating keys pdf ; Definition at line 295 of file MCMCInterval.h. ◆ fDataHist. RooDataHist* RooStats::MCMCInterval::fDataHist = nullptr. protected . the binned Markov Chain data ; Definition at line 286 of file MCMCInterval.h. ◆ fDelta. double RooStats::MCMCInterval::fDelta = DEFAULT_DELTA. protected . topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ; Definition at line 324 of file MCMCInterval.h. ◆ fDimension. Int_t RooStats::MCMCInterval::fDimension = 1. protected . number of variables ; Definition at line 315 of file MCMCInterval.h. ◆ fEpsilon. double RooStats::MCMCInterval::fEpsilon = DEFAULT_EPSILON. protected . acceptable error for Keys interval determination ; Definition at line 322 of file MCMCInterval.h. ◆ fFull. double RooStats::MCMCInterval::fFull = 0.0. protected . Value of intergral of fProduct. ; Definition at line 298 of file MCMCInterval.h. ◆ fHeaviside. Heaviside* RooStats::MCMCInterval::fHeaviside = nullptr. protected . the Heaviside function ; Definition at line 293 of file MCMCInterval.h. ◆ fHist. TH1* RooStats::MCMCInterval::fHist = nullptr. protected . the binned Markov Chain data ; Definition at line 307 of file MCMCInterval.h. ◆ fHistConfLevel. double RooStats::MCMCInterval::fHistConfLevel = 0.0. protected . the actual conf level determined by hist ; Definition at line 288 of file MCMCInterval.h. ◆ fHistCutoff. double RooStats::MCMCInterval::fHistCutoff = -1. protected . cutoff bin size to be in interval ; Definition at line 289 of file MCMCInterval.h. ◆ fIntervalType. enum IntervalType RooStats::MCMCInterval::fIntervalType = kShortest. protected . Definition at line 329 of file MCMCInterval.h. ◆ fIsHistStrict. bool RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:44131,error,error,44131,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['error'],['error']
Availability,ine 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 80 of file TGraphBentErrors.h. ◆ GetEXlowd(). Double_t * TGraphBentErrors::GetEXlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 84 of file TGraphBentErrors.h. ◆ GetEYhigh(). Double_t * TGraphBentErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 83 of file TGraphBentErrors.h. ◆ GetEYhighd(). Double_t * TGraphBentErrors::GetEY,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:40905,error,error,40905,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"ine 5838 of file TGWin32.cxx. ◆ SetCharacterUp(). void TGWin32::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Set character up vector. ; Reimplemented from TVirtualX.; Definition at line 2866 of file TGWin32.cxx. ◆ SetClassHints(). void TGWin32::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Set the windows class and resource name. ; Reimplemented from TVirtualX.; Definition at line 6534 of file TGWin32.cxx. ◆ SetClipOFF(). void TGWin32::SetClipOFF ; (; Int_t ; wid). overridevirtual . Turn off the clipping for the window wid. ; Reimplemented from TVirtualX.; Definition at line 2895 of file TGWin32.cxx. ◆ SetClipRectangles(). void TGWin32::SetClipRectangles ; (; GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Rectangle_t * ; recs, . Int_t ; n . ). overridevirtual . Set clipping rectangles in graphics context. ; X, Y specify the origin of the rectangles. Recs specifies an array of rectangles that define the clipping mask and n is the number of rectangles. ; Reimplemented from TVirtualX.; Definition at line 7087 of file TGWin32.cxx. ◆ SetClipRegion(). void TGWin32::SetClipRegion ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Set clipping region for the window wid. ; wid : GdkWindow indentifier x,y : origin of clipping rectangle w,h : size of clipping rectangle; ; Reimplemented from TVirtualX.; Definition at line 2913 of file TGWin32.cxx. ◆ SetColor(). void TGWin32::SetColor ; (; GdkGC * ; gc, . Int_t ; ci . ). private . Set the foreground color in GdkGC. ; Definition at line 2953 of file TGWin32.cxx. ◆ SetCursor() [1/2]. void TGWin32::SetCursor ; (; Int_t ; wid, . ECursor ; cursor . ). overridevirtual . Set the cursor. ; Reimplemented from TVirtualX.; Definition at line 2995 of file TGWin32.cxx. ◆ SetCursor() [2/2]. void TGWin32::SetCursor ; (; Window_t ; id, . Cursor_t ; curid . ). overridevirtual . Set the specified cursor. ; Reimplemente",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:104194,mask,mask,104194,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,"ine 59 of file TXMLParser.h. ◆ GetParseCodeMessage(). const char * TXMLParser::GetParseCodeMessage ; (; Int_t ; parseCode); const. Returns the parse code message. ; Definition at line 122 of file TXMLParser.cxx. ◆ GetReplaceEntities(). Bool_t TXMLParser::GetReplaceEntities ; (; ); const. inline . Definition at line 53 of file TXMLParser.h. ◆ GetStopOnError(). Bool_t TXMLParser::GetStopOnError ; (; ); const. inline . Definition at line 64 of file TXMLParser.h. ◆ GetValidate(). Bool_t TXMLParser::GetValidate ; (; ); const. inline . Definition at line 50 of file TXMLParser.h. ◆ GetValidateError(). const char * TXMLParser::GetValidateError ; (; ); const. inline . Definition at line 66 of file TXMLParser.h. ◆ GetValidateWarning(). const char * TXMLParser::GetValidateWarning ; (; ); const. inline . Definition at line 67 of file TXMLParser.h. ◆ InitializeContext(). void TXMLParser::InitializeContext ; (; ). protectedvirtual . Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ; Definition at line 152 of file TXMLParser.cxx. ◆ IsA(). TClass * TXMLParser::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TXMLParser.h. ◆ OnValidateError(). void TXMLParser::OnValidateError ; (; const TString & ; message). protectedvirtual . This function is called when an error from the parser has occurred. ; Message is the parse error. ; Definition at line 105 of file TXMLParser.cxx. ◆ OnValidateWarning(). void TXMLParser::OnValidateWarning ; (; const TString & ; message). protectedvirtual . This function is called when a warning from the parser has occurred. ; Message is the parse error. ; Definition at line 114 of file TXMLParser.cxx. ◆ operator=(). TXMLParser & TXMLParser::operator= ; (; const TXMLParser & ; ). privatedelete . ◆ ParseBuffer(). virtual Int_t TXMLParser::ParseBuffer ; (; const char * ; contents, . I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:18932,error,error,18932,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['error'],['error']
Availability,"ine Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:16109,error,error,16109,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"ine a matrix as a combination of several; others, a special class TGeoHMatrix is provided. Here is an example of matrix; creation :. Matrix creation example:. root[0] TGeoRotation r1,r2;; r1.SetAngles(90,0,30); // rotation defined by Euler angles; r2.SetAngles(90,90,90,180,0,0); // rotation defined by GEANT3 angles; TGeoTranslation t1(-10,10,0);; TGeoTranslation t2(10,-10,5);; TGeoCombiTrans c1(t1,r1);; TGeoCombiTrans c2(t2,r2);; TGeoHMatrix h = c1 * c2; // composition is done via TGeoHMatrix class; root[7] TGeoHMatrix *ph = new TGeoHMatrix(hm); // this is the one we want to; // use for positioning a volume; root[8] ph->Print();. pVolume->AddNode(pVolDaughter,id,ph) // now ph is owned by the manager. Rule for matrix creation:; - unless explicitly used for positioning nodes (TGeoVolume::AddNode()) all; matrices deletion have to be managed by users. Matrices passed to geometry; have to be created by using new() operator and their deletion is done by; TGeoManager class. Available geometrical transformations. 1. TGeoTranslation - represent a (dx,dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCombiTrans.html:5162,Avail,Available,5162,root/html532/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html532/TGeoCombiTrans.html,32,['Avail'],['Available']
Availability,"ine a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 104| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 105| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 106| Filter() | Filter rows based on user-defined conditions. |; 107| FilterAvailable() | Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. |; 108| FilterMissing() | Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. |; 109| Range() | Filter rows based on entry number (single-thread only). |; 110| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 111| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 112| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 113| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 114 ; 115 ; 116### Actions; 117Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 118 ; 119In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions onl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:6278,avail,available,6278,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:15147,error,error,15147,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,7,['error'],['error']
Availability,"ine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::SetFillColorAlphavirtual void SetFillColorAlpha(Int_t e, Color_t fcolor, Float_t falpha)Set Fill Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2051; TGraphMultiErrors::GetLineColorvirtual Color_t GetLineColor() constReturn the line color.Definition TAttLine.h:33; TGraphMultiErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1504; TGraphMultiErrors::Dividevoid Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")This function was adapted from the TGraphAsymmErrors class.Definition TGraphMultiErrors.cxx:1001; TGraphMultiErrors::fAttLinestd::vector< TAttLine > fAttLineThe AttLine attributes of the different errors.Definition TGraphMultiErrors.h:42; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t i) const overrideGet low error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1481; TGraphMultiErrors::TGraphMultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; TGraphMultiErrors::SetEYvirtual void SetEY(Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH)Set error e ey values.Definition TGraphMultiErrors.cxx:1973; TGraphMultiErrors::SetSumErrorsModevirtual void SetSumErrorsMode(Int_t m)Set the sum errors mode and recalculate summed errors.Definition TGraphMultiErrors.cxx:2007; TGraphMultiErrors::BayesDividevirtual void BayesDivide(const TH1 *pass, const TH1 *total, Option_t *opt="""")This function is only kept for backward compatibility.Definition TGraphMultiErrors.cxx:990; TGraphMultiErrors::Printvoid Print(Option_t *chopt="""") const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:78903,error,error,78903,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],['error']
Availability,"ine(const THttpEngine&); virtual~THttpEngine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*GetServer() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* ms",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpEngine.html:1410,error,error,1410,root/html534/THttpEngine.html,https://root.cern,https://root.cern/root/html534/THttpEngine.html,2,['error'],['error']
Availability,ine*fHorizontal3DLinea line under the tool bar; TGPopupMenu*fImportCascadeCascaded menu 'Import'; Bool_tfLastChoice=kTRUE if the user choose OK in the last TStyleDialog; TGLayoutHints*fLayoutExpandXoften used layout; TGLayoutHints*fLayoutExpandXCenterYMarginoften used layout; TGLayoutHints*fLayoutExpandXMarginoften used layout; TGLayoutHints*fLayoutExpandXYoften used layout; TGLayoutHints*fLayoutExpandXYMarginoften used layout; TGLineWidthComboBox*fLegendBorderSizelegend border size combo box; TGLabel*fLegendBorderSizeLabellabel 'Legend's'; TGNumberEntry*fLegoInnerRhistograms lego inner radius number entry; TGColorSelect*fLineColorgeneral line color selection widget; TGNumberEntry*fLineScalePSps/pdf line scale number entry; TGLineStyleComboBox*fLineStylegeneral line style combo box; TGTextButton*fLineStyleEditgeneral line style editor open button; TGLineWidthComboBox*fLineWidthgeneral line width combo box; TGComboBox*fListComboBoxlist of available styles; TGLabel*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TG,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStyleManager.html:39256,Avail,Available,39256,root/html532/TStyleManager.html,https://root.cern,https://root.cern/root/html532/TStyleManager.html,4,['Avail'],['Available']
Availability,"ine,; 220 const std::string &funcname); 221 : fEntry(level, channel, {filename, funcname, line}); 222 {; 223 }; 224 ; 225 /// Emit the log entry through the static log manager.; 226 ~RLogBuilder(); 227 {; 228 fEntry.fMessage = str();; 229 RLogManager::Get().Emit(fEntry);; 230 }; 231};; 232} // namespace Detail; 233 ; 234/**; 235 Change the verbosity level (global or specific to the RLogChannel passed to the; 236 constructor) for the lifetime of this object.; 237 Example:; 238~~~ {.cpp}; 239 RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; 240 Foo::SomethingToDebug();; 241~~~; 242 */; 243class RLogScopedVerbosity {; 244 RLogChannel *fChannel;; 245 ELogLevel fPrevLevel;; 246 ; 247public:; 248 RLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity); 249 : fChannel(&channel), fPrevLevel(channel.SetVerbosity(verbosity)); 250 {; 251 }; 252 explicit RLogScopedVerbosity(ELogLevel verbosity) : RLogScopedVerbosity(RLogManager::Get(), verbosity) {}; 253 ~RLogScopedVerbosity() { fChannel->SetVerbosity(fPrevLevel); }; 254};; 255 ; 256/**; 257 Object to count the number of warnings and errors emitted by a section of code,; 258 after construction of this type.; 259 */; 260class RLogScopedDiagCount {; 261 RLogDiagCount *fCounter = nullptr;; 262 /// The number of the RLogDiagCount's emitted warnings at construction time of *this.; 263 long long fInitialWarnings = 0;; 264 /// The number of the RLogDiagCount's emitted errors at construction time.; 265 long long fInitialErrors = 0;; 266 /// The number of the RLogDiagCount's emitted fatal errors at construction time.; 267 long long fInitialFatalErrors = 0;; 268 ; 269public:; 270 /// Construct the scoped count given a counter (e.g. a channel or RLogManager).; 271 /// The counter's lifetime must exceed the lifetime of this object!; 272 explicit RLogScopedDiagCount(RLogDiagCount &cnt); 273 : fCounter(&cnt), fInitialWarnings(cnt.GetNumWarnings()), fInitialErrors(cnt.GetNumErrors()),; 274 fInitialFatalErrors(cnt.GetNumFatalE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:9030,error,errors,9030,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['error'],['errors']
Availability,"ine; kStandard; kVerbose; kTreeStructure; };. public:. static RooAbsData::StorageTypeRooAbsData::defaultStorageType. protected:. Int_t_arrSizeSize of the weight array; Bool_t*_binValid! Valid bins with current range definition; Double_t*_binv[_arrSize] Bin volume array ; TIterator*RooAbsData::_cacheIter! Iterator over cached variables; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; Int_t_curIndexCurrent index; Double_t_curSumW2Current sum of weights^2; Double_t_curVolumeVolume of bin enclosing current coordinate; Double_t_curWeightWeight associated with the current coordinate; Double_t_curWgtErrHiError on weight associated with the current coordinate; Double_t_curWgtErrLoError on weight associated with the current coordinate; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; Double_t*_errHi[_arrSize] High-side error on weight array; Double_t*_errLo[_arrSize] Low-side error on weight array; vector<Int_t>_idxMultMultiplier jump table for index calculation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; list<const RooAbsBinning*>_lvbins! List of used binnings associated with lvalues; list<RooAbsLValue*>_lvvars! List of observables casted as RooAbsLValue; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; vector<Double_t>*_pbinv! Partial bin volume array; RooCacheManager<std::vector<Double_t> >_pbinvCacheMgr! Cache manager for arrays of partial bin volumes; TIterator*_realIter! Iterator over realVars; RooArgSet_realVarsReal dimensions of the dataset ; Double_t*_sumw2[_arrSize] Sum of weights^2; RooArgSetRooAbsData::_varsDimensions of this data set; Double_t*_wgt[_arrSize] Weight array; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDataHist(); Default constructor. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataHist.html:18164,error,error,18164,root/html532/RooDataHist.html,https://root.cern,https://root.cern/root/html532/RooDataHist.html,4,['error'],['error']
Availability,"ineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::ESummationModesESummationModesDefinition TGraphMultiErrors.h:57; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition TGraphMultiErrors.h:59; TGraphMultiErrors::kOnlyFirst@ kOnlyFirstOnly take errors from first dimension.Definition TGraphMultiErrors.h:58; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineStylevirtual void SetLineStyle(Int_t e, Style_t lstyle)Set Line Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2095; TGraphMultiErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphMultiErrors.cxx:777; TGraphMultiErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exH)Set exH value for point i.Definition TGraphMultiErrors.cxx:1869; TGraphMultiErrors::fExLDouble_t * fExL[fNpoints] array of X low errorsDefinition TGraphMultiErrors.h:35; TGraphMultiErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphMultiErrors.cxx:802; TGraphMultiErrors::fEyHstd::vector< TArrayD > fEyHTwo dimensional array of Y high errors.Definition TGraphMultiErrors.h:38; TGraphMultiErrors::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TGraphMultiErrors::SetPointEXvirtual void SetPointEX(Int_t i, Double_t exL, Double_t exH)Set ex values for point i.Definition TGraphMultiErrors.cxx:1844; TGraphMultiErrors::SetPointEYl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:20256,error,errors,20256,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"inear, it would transform a; 85nice linear problem into a nasty non-linear one, which is the reason why; 86limits should be avoided if not necessary.; 87In addition, the transformation; 88does require some computer time, so it slows down the computation a little; 89bit, and more importantly, it introduces additional numerical inaccuracy into; 90the problem in addition to what is introduced in the numerical calculation; 91of the FCN value.; 92The effects of non-linearity and numerical roundoff both; 93become more important as the external value gets closer to one of the limits; 94(expressed as the distance to nearest limit divided by distance between limits).; 95The user must therefore be aware of the fact that, for example,; 96if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; 97and \f$1.0\f$ will be indistinguishable to the accuracy of most machines.; 98 ; 99The transformation also affects the parameter error matrix, of course,; 100so Minuit does a transformation of the error matrix (and the; 101``parabolic'' parameter errors) when there are parameter limits.; 102Users should however realize that the transformation is only a linear; 103approximation, and that it cannot give a meaningful result if one or more; 104parameters is very close to a limit, where; 105\f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; 106Therefore, it is recommended that:; 107 ; 108 1. Limits on variable parameters should be used only when needed in order; 109to prevent the parameter from taking on unphysical values.; 110 ; 111 2. When a satisfactory minimum has been found using limits, the limits; 112should then be removed if possible, in order to perform or re-perform the; 113error analysis without limits.; 114 ; 115 ; 116### How to get the right answer from MINUIT.; 117 ; 118MINUIT offers the user a choice of several minimization algorithms. The; 119MIGRAD algorithm is in general the best minimizer for; 120nearly all functions. It is a va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:4768,error,error,4768,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,3,['error'],"['error', 'errors']"
Availability,"ined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:38548,error,error,38548,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,1,['error'],['error']
Availability,"ined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError"");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:37941,error,errors,37941,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,20,['error'],"['error', 'errors']"
Availability,"ined profile is just an approximation of the correct profile histogram that would be obtained when filling it directly with the original data (see ROOT-7770) ; Definition at line 2109 of file TH2.cxx. ◆ ProfileY(). TProfile * TH2::ProfileY ; (; const char * ; name = ""_pfy"", . Int_t ; firstxbin = 1, . Int_t ; lastxbin = -1, . Option_t * ; option = """" . ); const. Project a 2-D histogram into a profile histogram along Y. ; The projection is made from the channels along the X axis ranging from firstxbin to lastxbin included. By default, bins 1 to nx are included When all bins are included, the number of entries in the projection is set to the number of entries of the 2-D histogram, otherwise the number of entries is incremented by 1 for all non empty cells.; if option ""d"" is specified, the profile is drawn in the current pad.; if option ""o"" , the original axis range of the target axis will be kept, but only bins inside the selected range will be filled.; The option can also be used to specify the projected profile error type. Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name of the cut between [] in the option. For example, with a TCutG named ""cutg"", one can call: myhist->ProfileY("" "",firstybin,lastybin,""[cutg]""); To invert the cut, it is enough to put a ""-"" in front of its name: myhist->ProfileY("" "",firstybin,lastybin,""[-cutg]""); It is possible to apply several cuts: myhist->ProfileY("" "",firstybin,lastybin,""[cutg1,cutg2]"");; NOTE that if a TProfile named ""name"" exists in the current directory or pad with a compatible axis the profile is reset and filled again with the projected contents of the TH2. In the case of axis incompatibility an error is reported and a NULL pointer is returned.; NOTE that the Y axis attributes of the TH2 are copied to the X axis of the profile.; NOTE that the defa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:95723,error,error,95723,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"ined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migration matrix from generator (x-axis) to detector (y-axis); the errors of histA are the uncorrelated systematic errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:1790,error,error,1790,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,4,['error'],['error']
Availability,"ineoverridevirtual . Process with name of dataset and TSelector object. ; Reimplemented from TProof.; Definition at line 131 of file TProofLite.h. ◆ Process() [3/8]. Long64_t TProofLite::Process ; (; const char * ; selector, . Long64_t ; n, . Option_t * ; option = """" . ). inlineoverridevirtual . Generic (non-data based) selector processing: the Process() method of the specified selector (.C) or TSelector object is called 'n' times. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProof.; Definition at line 122 of file TProofLite.h. ◆ Process() [4/8]. Long64_t TProofLite::Process ; (; TDSet * ; dset, . const char * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process a data set (TDSet) using the specified selector (.C) file. ; Entry- or event-lists should be set in the data set object using TDSet::SetEntryList. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProof.; Definition at line 1083 of file TProofLite.cxx. ◆ Process() [5/8]. Long64_t TProofLite::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). inlineoverridevirtual . Process a data set (TDSet) using the specified selector object. ; Entry- or event-lists should be set in the data set object using TDSet::SetEntryList. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProof.; Definition at line 125 of file TProofLite.h. ◆ Process() [6/8]. Long64_t TProofLite::Process ; (; TFileCollection * ; fc, . const char * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). inlineoverridevirtual . Process a data set (TFileCollection) using the specified selector (.C) file or TSelector object. ; The default tree is analyzed (i.e. the first ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:60571,error,error,60571,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['error'],['error']
Availability,"ineprivate . Definition at line 282 of file xRooNode.h. ◆ getObject() [2/2]. std::shared_ptr< TObject > xRooNode::getObject ; (; const std::string & ; name, . const std::string & ; type = """" . ); const. private . Definition at line 911 of file xRooNode.cxx. ◆ GetPath(). std::string xRooNode::GetPath ; (; ); const. private . Definition at line 2212 of file xRooNode.cxx. ◆ GetRange(). const char * xRooNode::GetRange ; (; ); const. Definition at line 6642 of file xRooNode.cxx. ◆ GetTreeItem(). TGListTreeItem * xRooNode::GetTreeItem ; (; TBrowser * ; b); const. private . Definition at line 4921 of file xRooNode.cxx. ◆ GetXaxis(). TAxis * xRooNode::GetXaxis ; (; ); const. Definition at line 984 of file xRooNode.cxx. ◆ globs(). xRooNode xRooNode::globs ; (; ); const. List of global observables of this node. ; Definition at line 5286 of file xRooNode.cxx. ◆ histo(). xRooNode xRooNode::histo ; (; const xRooNode & ; vars = ""x"", . const xRooNode & ; fr = """", . bool ; content = true, . bool ; errors = true . ); const. private . Definition at line 7504 of file xRooNode.cxx. ◆ Inspect(). void xRooNode::Inspect ; (; ); const. overridevirtual . Dump contents of this object in a graphics canvas. ; Same action as Dump but in a graphical form. In addition pointers to other objects can be followed.; The following picture is the Inspect of a histogram object: . Reimplemented from TObject.; Definition at line 8299 of file xRooNode.cxx. ◆ IntegralAndError(). std::pair< double, double > xRooNode::IntegralAndError ; (; const xRooNode & ; fr = """", . const char * ; rangeName = nullptr . ); const. Definition at line 10874 of file xRooNode.cxx. ◆ Interactive_PLLPlot(). void xRooNode::Interactive_PLLPlot ; (; ). static . Definition at line 145 of file xRooNode_interactive.cxx. ◆ Interactive_Pull(). BEGIN_XROOFIT_NAMESPACE void xRooNode::Interactive_Pull ; (; ). static . Definition at line 30 of file xRooNode_interactive.cxx. ◆ IsA(). TClass * ROOT::Experimental::XRooFit::xRooNode::IsA ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:36951,error,errors,36951,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['error'],['errors']
Availability,"information.Definition RGeomData.cxx:1070; ROOT::RGeomDescription::fPreferredOfflinebool fPreferredOffline! indicates that full description should be provided to clientDefinition RGeomData.hxx:260; ROOT::RGeomDescription::SetDrawOptionsvoid SetDrawOptions(const std::string &opt="""")Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:347; ROOT::RGeomDescription::FindShapeDescrShapeDescr & FindShapeDescr(TGeoShape *shape)Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:857; ROOT::RGeomDescription::GetHighlightedItemstd::vector< int > GetHighlightedItem() constDefinition RGeomData.hxx:413; ROOT::RGeomDescription::fDrawJsonstd::string fDrawJson! JSON with main nodes drawn by clientDefinition RGeomData.hxx:257; ROOT::RGeomDescription::RemoveSignalHandlervoid RemoveSignalHandler(const void *handler)Remove signal handler.Definition RGeomData.cxx:321; ROOT::RGeomDescription::FindNodeIdint FindNodeId(const std::vector< int > &stack)Returns nodeid for given stack array, returns -1 in case of failure.Definition RGeomData.cxx:1602; ROOT::RGeomDescription::ProduceIdShiftsvoid ProduceIdShifts()Count total number of visible childs under each node.Definition RGeomData.cxx:629; ROOT::RGeomDescription::ProduceModifyReplystd::string ProduceModifyReply(int nodeid)Return string with only part of nodes description which were modified Checks also volume.Definition RGeomData.cxx:1734; ROOT::RGeomDescription::fActiveItemNamestd::string fActiveItemName! name of item which should be activated in hierarchyDefinition RGeomData.hxx:262; ROOT::RGeomDescription::GetActiveItemstd::string GetActiveItem() constDefinition RGeomData.hxx:441; ROOT::RGeomDescription::ResetRndrInfosvoid ResetRndrInfos()Reset shape info, which used to pack binary data.Definition RGeomData.cxx:1201; ROOT::RGeomDescription::GetSearchJsonstd::string GetSearchJson() constDefinition RGeomData.hxx:384; ROOT::RGeomDescription::GetNSegmentsint GetNSegments()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:34886,failure,failure,34886,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,1,['failure'],['failure']
Availability,"information.Definition RGeomData.cxx:1070; ROOT::RGeomDescription::fPreferredOfflinebool fPreferredOffline! indicates that full description should be provided to clientDefinition RGeomData.hxx:260; ROOT::RGeomDescription::SetDrawOptionsvoid SetDrawOptions(const std::string &opt="""")Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:347; ROOT::RGeomDescription::FindShapeDescrShapeDescr & FindShapeDescr(TGeoShape *shape)Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:857; ROOT::RGeomDescription::GetHighlightedItemstd::vector< int > GetHighlightedItem() constDefinition RGeomData.hxx:415; ROOT::RGeomDescription::fDrawJsonstd::string fDrawJson! JSON with main nodes drawn by clientDefinition RGeomData.hxx:257; ROOT::RGeomDescription::RemoveSignalHandlervoid RemoveSignalHandler(const void *handler)Remove signal handler.Definition RGeomData.cxx:321; ROOT::RGeomDescription::FindNodeIdint FindNodeId(const std::vector< int > &stack)Returns nodeid for given stack array, returns -1 in case of failure.Definition RGeomData.cxx:1602; ROOT::RGeomDescription::ProduceIdShiftsvoid ProduceIdShifts()Count total number of visible childs under each node.Definition RGeomData.cxx:629; ROOT::RGeomDescription::ProduceModifyReplystd::string ProduceModifyReply(int nodeid)Return string with only part of nodes description which were modified Checks also volume.Definition RGeomData.cxx:1734; ROOT::RGeomDescription::fActiveItemNamestd::string fActiveItemName! name of item which should be activated in hierarchyDefinition RGeomData.hxx:262; ROOT::RGeomDescription::GetActiveItemstd::string GetActiveItem() constDefinition RGeomData.hxx:443; ROOT::RGeomDescription::ResetRndrInfosvoid ResetRndrInfos()Reset shape info, which used to pack binary data.Definition RGeomData.cxx:1201; ROOT::RGeomDescription::GetSearchJsonstd::string GetSearchJson() constDefinition RGeomData.hxx:386; ROOT::RGeomDescription::GetNSegmentsint GetNSegments()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:35137,failure,failure,35137,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,1,['failure'],['failure']
Availability,"ing = 0) const; TH1*CreateHistogram(const char* histogramName, Bool_t originalAxisBinning = kFALSE, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const; static TH2D*CreateHistogramOfMigrations(TUnfoldBinning *const xAxis, TUnfoldBinning *const yAxis, char *const histogramName, Bool_t originalXAxisBinning = kFALSE, Bool_t originalYAxisBinning = kFALSE, char *const histogramTitle = 0); voidDecodeAxisSteering(const char* axisSteering, const char* options, Int_t* isOptionGiven) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TH1*ExtractHistogram(const char* histogramName, const TH1* globalBins, const TH2* globalBinsEmatrix = 0, Bool_t originalAxisBinning = kTRUE, const char* axisSteering = 0) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); const TUnfoldBinning*FindNode(char *const name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetBinFactor(Int_t iBin) const; const TUnfoldBinning*GetBinLocation(Int_t binTHxx, const char* axisSteering, Int_t* axisBins) const; TStringGetBinName(Int_t iBin) const; voidGetBinNeighbours(Int_t globalBin, Int_t axis, Int_t* prev, Double_t* distPrev, Int_t* next, Double_t* distNext) const; Double_tGetBinSize(Int_t iBin) const; voidGetBinUnde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldBinning.html:3769,error,error,3769,root/html534/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html534/TUnfoldBinning.html,2,['error'],['error']
Availability,"ing = 0) const; TH1*CreateHistogram(const char* histogramName, Bool_t originalAxisBinning = kFALSE, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const; static TH2D*CreateHistogramOfMigrations(const TUnfoldBinning* xAxis, const TUnfoldBinning* yAxis, const char* histogramName, Bool_t originalXAxisBinning = kFALSE, Bool_t originalYAxisBinning = kFALSE, const char* histogramTitle = 0); voidDecodeAxisSteering(const char* axisSteering, const char* options, Int_t* isOptionGiven) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TH1*ExtractHistogram(const char* histogramName, const TH1* globalBins, const TH2* globalBinsEmatrix = 0, Bool_t originalAxisBinning = kTRUE, const char* axisSteering = 0) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); const TUnfoldBinning*FindNode(const char* name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetBinFactor(Int_t iBin) const; const TUnfoldBinning*GetBinLocation(Int_t binTHxx, const char* axisSteering, Int_t[32] axisBins) const; TStringGetBinName(Int_t iBin) const; voidGetBinNeighbours(Int_t globalBin, Int_t axis, Int_t* prev, Double_t* distPrev, Int_t* next, Double_t* distNext) const; Double_tGetBinSize(Int_t iBin) const; voidGetBinU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldBinning.html:3591,error,error,3591,root/html602/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html602/TUnfoldBinning.html,4,['error'],['error']
Availability,"ing HTTP as the transport protocol.; The 'options' argument can contain 'NOPROXY' if you want to bypass the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived object, the URL of the web proxy can be specified by setting an environmental variable 'http_proxy'. If this variable is set, we ask that proxy to route our requests HTTP(S) requests to the file server.; In addition, you can also use the 'options' argument to provide the access key and secret key to be used for authentication purposes for this file by using a string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to open several files hosted by different providers in the same program/macro, where the environemntal variables solution is not convenient (see below).; To use AWS temporary security credentials you need to specify the session token. This can be added to the options argument with a string of the form TOKEN=mySessionToken. The temporary access and secret keys must also be available, either via the AUTH option or by environmental variable.; If you need to specify more than one option separate them by ' ' (blank), for instance: ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+""; Examples: TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f3 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""TOKEN=AQoDYXdzEM///////////wEa8AHEYmCinjD+TsGEjtgKSMAT6wnY"");; If there is no authentication information in the 'options' argument (i.e. not AUTH=""...."") the values of the environmental variables S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain the access key id and the secret access key, respectively. You have been provided with these credentials by your S3 service provid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:50069,avail,available,50069,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['avail'],['available']
Availability,"ing PROOF slaves. Returns the number of slaves that responded. void Touch(); Ping PROOF slaves. Returns the number of slaves that responded. void Print(Option_t* option = """") const; Print status of PROOF cluster. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C) file.; The default tree is analyzed (i.e. the first one found). To specify another; tree, the default tree can be changed using TFileCollection::SetDefaultMetaData .; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(const char* dsetname, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process a dataset which is stored on the master with name 'dsetname'.; The syntax for dsetname is name[#[dir/]objname], e.g.; ""mydset"" analysis of the first tree in the top dir of the dataset; named ""mydset""; ""mydset#T"" analysis tree ""T"" in the top dir of the dataset; named ""mydset""; ""mydset#adir/T"" analysis tree ""T"" in the dir ""adir"" of the dataset; named ""mydset""; ""mydset#adir/"" analysis of the first tree in the dir ""adir"" of the; dataset named ""mydset""; The component 'name' in its more general form contains also the group and; user name following ""/<group>/<user>/<dsname>"". Each of these components; can contain one or more wildcards '*', in which case all the datasets matching; the expression are added together as a global dataset (wildcard support has; been added in version 5.27/02).; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:45954,error,error,45954,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['error'],['error']
Availability,"ing ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion of the user base requires a stable product we generally keep at least three versions of the system available for download. The development, production and old versions.; Production release; This is a version we feel comfortable with to exposing to a large audience for serious work. We may issue patch releases of production versions with bug fixes. We release about two production versions per year. The old version is the previous production version that people might need for some time before switching to the new version.; Release candidate; A Release Candidate is a preview of the next production release. It allows users to make their code ready for the new production release, and to provide early feedback.; Development release; Use this to get access to the latest and greatest, but as a side effect there might be some instabilities. However, by trying out the development version you can help us converge much more quickly to a stable version that can then become the new production version.; Nightlies; You can download nightly sna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:2101,avail,available,2101,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,2,"['avail', 'down']","['available', 'download']"
Availability,"ing a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F histogram by specifying option=prof or option=profs.; The option=prof is automatically selected in case of z:y:x>>pf; where pf is an existing TProfile2D histogram. Making a 5D plot using GL. If option GL5D is specified together with 5 variables, a 5D plot is drawn; using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example. Making a parallel coordinates plot. In case of a 2-Dim or more expression with the option=para, one can generate; a parallel coordinates plot. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Making a candle sticks chart. In case of a 2-Dim or more expression with the option=candle, one can generate; a candle sticks chart. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Normalizing the ouput histogram to 1. When option contains ""norm"" the output histogram is normalized to 1. Saving the result of Draw to a TEventList or a TEntryList. TTree::Draw can be used to fill a TEventList object (list of entry numbers); instead of histogramming one variable.; If varexp0 has the form >>elist , a TEventList object named ""elist""; is created in the current directory. elist will contain the list; of entry numbers satisfying the current selection.; If option ""entrylist"" is used, a TEntryList object is created; Example:; tree.Draw("">>yplus"",""y>0""); will create a TEventList object named ""yplus"" in the current directory.; In an interactive session, one can type (after TTree::Draw); yplus.Print(""all""); to print the list of entry numbers in the list.; tree.Draw("">>yplus"", ""y>0"", ""entrylist""); will create a TEntryList object names ""yplus"" in the current directory. By default, the specified entry list is reset.; To contin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:80049,error,error,80049,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,1,['error'],['error']
Availability,"ing a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F histogram by specifying option=prof or option=profs.; The option=prof is automatically selected in case of z:y:x>>pf; where pf is an existing TProfile2D histogram. Making a 5D plot using GL. If option GL5D is specified together with 5 variables, a 5D plot is drawn; using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example. Making a parallel coordinates plot. In case of a 2-Dim or more expression with the option=para, one can generate; a parallel coordinates plot. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Making a candle sticks chart. In case of a 2-Dim or more expression with the option=candle, one can generate; a candle sticks chart. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Normalizing the ouput histogram to 1. When option contains ""norm"" the output histogram is normalized to 1. Saving the result of Draw to a TEventList, a TEntryList or a TEntryListArray. TTree::Draw can be used to fill a TEventList object (list of entry numbers); instead of histogramming one variable.; If varexp0 has the form >>elist , a TEventList object named ""elist""; is created in the current directory. elist will contain the list; of entry numbers satisfying the current selection.; If option ""entrylist"" is used, a TEntryList object is created; If the selection contains arrays, vectors or any container class and option; ""entrylistarray"" is used, a TEntryListArray object is created; containing also the subentries satisfying the selection, i.e. the indices of; the branches which hold containers classes.; Example:; tree.Draw("">>yplus"",""y>0""); will create a TEventList object named ""yplus"" in the current directory.; In an interactive s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:80533,error,error,80533,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,2,['error'],['error']
Availability,"ing accessed via a dCache server. The url; argument must be of the form: dcache:/pnfs/<path>/<file>.root or; dcap://<nodename.org>/<path>/<file>.root. If the file specified in the; URL does not exist, is not accessable or can not be created the kZombie; bit will be set in the TDCacheFile object. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:23386,failure,failure,23386,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,1,['failure'],['failure']
Availability,"ing and Visualization Functions; Miroslav Morháč. Processing and Visualization Functions; 1 BACKGROUND ELIMINATION; 1.1 1-DIMENSIONAL SPECTRA; 1.2 2-DIMENSIONAL SPECTRA. 2 SMOOTHING; 2.1 1-DIMENSIONAL SPECTRA; 2.2 2-DIMENSIONAL SPECTRA. 3 PEAK SEARCHING; 3.1 1-DIMENSIONAL SPECTRA; 3.2 2-DIMENSIONAL SPECTRA. 4 DECONVOLUTION - UNFOLDING; 4.1 1-DIMENSIONAL SPECTRA; 4.2 Gold deconvolution algorithm; 4.3 2-DIMENSIONAL SPECTRA. 5 FITTING; 5.1 1-DIMENSIONAL SPECTRA; 5.2 2-DIMENSIONAL SPECTRA. 6 TRANSFORMS; 6.1 1-DIMENSIONAL SPECTRA; 6.2 2-DIMENSIONAL SPECTRA. 7 VISUALIZATION; 7.1 1-DIMENSIONAL SPECTRA; 7.2 2-DIMENSIONAL SPECTRA. 8 References. Processing and Visualization Functions; *** Miroslav Morháč *** 12; ** E-mail : morhac@savba.sk **; 1 BACKGROUND ELIMINATION; 1.1 1-DIMENSIONAL SPECTRA; This function calculates background spectrum from the source spectrum. The result is placed in the vector pointed by spectrum pointer. On successful completion it returns 0. On error it returns pointer to the string describing error.; char *Background1(float *spectrum,; int size,; int number_of_iterations);; Function parameters:. spectrum: pointer to the vector of the source spectrum; size: length of spectrum; number_of_iterations: or width of the clipping window. The function allows to separate useless spectrum information (continuous background) from peaks, based on Sensitive Nonlinear Iterative Peak Clipping Algorithm. In fact, it represents the second order difference filter (-1,2,-1). The basic algorithm is described in details in [1], [2].; \[ v_p(i)= min\left\{v_{p-1} , \frac{[v_{p-1}(i+p)+v_{p-1}(i-p)]}{2} \right\} \]; where p can be changed as follows:. from 1 up to a given parameter value w by incrementing it in each iteration step by 1 - INCREASING CLIPPING WINDOW; from a given value w by decrementing it in each iteration step by 1 - DECREASING CLIPPING WINDOW. An example of the original spectrum and estimated background (INCREASING CLIPPING WINDOW) is given in the Figure 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:1023,error,error,1023,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,4,['error'],['error']
Availability,"ing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; If 'opts' contains 'S' validation would be run serially (meaningful only if; validation is required).; Returns kTRUE on success. Int_t SetDataSetTreeName(const char* dataset, const char* treename); Set/Change the name of the default tree. The tree name may contain; subdir specification in the form ""subdir/name"".; Returns 0 on success, -1 otherwise. TMap * GetDataSets(const char* uri = """", const char* optStr = """"); Lists all datasets that match given uri.; The 'optStr' can contain a comma-separated list of servers for which the; information is wanted. If ':lite:' (case insensitive) is specified in 'optStr'; only the global information in the TFileCollection is retrieved; useful to only; get the list of available datasets. void ShowDataSets(const char* uri = """", const char* optStr = """"); Shows datasets in locations that match the uri.; By default shows the user's datasets and global ones. Bool_t ExistsDataSet(const char* dataset); Returns kTRUE if 'dataset' exists, kFALSE otherwise. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). TFileCollection * GetDataSet(const char* dataset, const char* optStr = """"); Get a list of TFileInfo objects describing the files of the specified; dataset.; To get the short version (containing only the global meta information); specify optStr = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:92516,avail,available,92516,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['avail'],['available']
Availability,"ing error handling in likelihood evaluations. ; ; import ROOT; ; ; # Create model and dataset; # ----------------------------------------------; ; # Observable; m = ROOT.RooRealVar(""m"", ""m"", 5.20, 5.30); ; # Parameters; m0 = ROOT.RooRealVar(""m0"", ""m0"", 5.291, 5.20, 5.30); k = ROOT.RooRealVar(""k"", ""k"", -30, -50, -10); ; # Pdf; argus = ROOT.RooArgusBG(""argus"", ""argus"", m, m0, k); ; # Sample 1000 events in m from argus; data = argus.generate({m}, 1000); ; # Plot model and data; # --------------------------------------; ; frame1 = m.frame(Bins=40, Title=""Argus model and data""); data.plotOn(frame1); argus.plotOn(frame1); ; # Fit model to data; # ---------------------------------; ; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; ; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area; ; argus.fitTo(data, PrintEvalErrors=10); ; # Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot; ; m0.setError(0.1); argus.fitTo(data, PrintEvalErrors=0, EvalErrorWall=False); ; # Plot likelihood as function of m0; # -------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:1314,error,error,1314,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['error'],['error']
Availability,"ing fLinkedLibs; //Used to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; 313 TString fSoExt; //Extension of shared library (.so, .sl, .a, .dll, etc.); 314 TString fObjExt; //Extension of object files (.o, .obj, etc.); 315 EAclicMode fAclicMode{kDefault}; //Whether the compilation should be done debug or opt; 316 TString fMakeSharedLib; //Directive used to build a shared library; 317 TString fMakeExe; //Directive used to build an executable; 318 TString fLinkdefSuffix; //Default suffix for linkdef files to be used by ACLiC (see EACLiCProperties); 319 Int_t fAclicProperties{0}; //Various boolean flag for change ACLiC's behavior.; 320 TSeqCollection *fCompiled{nullptr}; //List of shared libs from compiled macros to be deleted; 321 TSeqCollection *fHelpers{nullptr}; //List of helper classes for alternative file/directory access; 322 ; 323 TString &GetLastErrorString(); //Last system error message (thread local).; 324 const TString &GetLastErrorString() const; //Last system error message (thread local).; 325 ; 326 TSystem *FindHelper(const char *path, void *dirptr = nullptr);; 327 virtual Bool_t ConsistentWith(const char *path, void *dirptr = nullptr);; 328 virtual const char *ExpandFileName(const char *fname);; 329 virtual Bool_t ExpandFileName(TString &fname);; 330 virtual void SigAlarmInterruptsSyscalls(Bool_t) { }; 331 virtual const char *GetLinkedLibraries();; 332 virtual void DoBeep(Int_t /*freq*/=-1, Int_t /*duration*/=-1) const { printf(""\a""); fflush(stdout); }; 333 ; 334 static const char *StripOffProto(const char *path, const char *proto);; 335 ; 336private:; 337 TSystem(const TSystem&) = delete;; 338 TSystem& operator=(const TSystem&) = delete;; 339 Bool_t ExpandFileName(const char *fname, char *xname, const int kBufSize);; 340 ; 341public:; 342 TSystem(const char *name = ""Generic"", const char *title = ""Generic System"");; 343 virtual ~TSystem();; 344 ; 345 //---- Misc; 346 virtual Bool_t Init();; 347 virtual void SetProgname(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:13492,error,error,13492,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['error'],['error']
Availability,"ing has the same effect as calling the special TProfile constructor above where ylow and yup are specified.; 3.17.1 Build Options; The last parameter is the build option. If a bin has N data points all with the same value Y, which is the case when dealing with integers, the spread in Y for that bin is zero, and the uncertainty assigned is also zero, and the bin is ignored in making subsequent fits. If SQRT(Y) was the correct error in the case above, then SQRT(Y)/SQRT(N) would be the correct error here. In fact, any bin with non-zero number of entries N but with zero spread (spread = s[j]) should have an uncertainty SQRT(Y)/SQRT(N). Now, is SQRT(Y)/SQRT(N) really the correct uncertainty ? That it is only in the case where the Y variable is some sort of counting statistics, following a Poisson distribution. This is the default case. However, Y can be any variable from an original NTUPLE, and does not necessarily follow a Poisson distribution. The computation of errors is based on Y = values of data points; N = number of data points. ' ' - the default is blank, the errors are:; spread/SQRT(N) for a non-zero spread; SQRT(Y)/SQRT(N) for a spread of zero and some data points; 0 for no data points; ‘ s ’ - errors are:; spread for a non-zero spread; SQRT(Y) for a Spread of zero and some data points; 0 for no data points; ‘ i ’ - errors are:; spread/SQRT(N) for a non-zero spread; 1/SQRT(12*N) for a Spread of zero and some data points; 0 for no data points; ‘ G ’ - errors are:; spread/SQRT(N) for a non-zero spread; sigma/SQRT(N) for a spread of zero and some data points; 0 for no data points. The option ’ i ’ is used for integer Y values with the uncertainty of \(\pm 0.5\), assuming the probability that Y takes any value between Y-0.5 and Y+0.5 is uniform (the same argument for Y uniformly distributed between Y and Y+1). An example is an ADC measurement. The ‘G’ option is useful, if all Y variables are distributed according to some known Gaussian of standard deviation Sigma. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:128755,error,errors,128755,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"ing is printed and error status is returned if not all servers could be sucessfully; substituted. RooAbsArg * findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; Find the new server in the specified set that matches the old server.; Allow a name change if nameChange is kTRUE, in which case the new; server is selected by searching for a new server with an attribute; of ""ORIGNAME:<oldName>"". Return zero if there is not a unique match. Bool_t recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); Recursively redirect all servers with new server in collection 'newSet'.; Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:25494,error,error,25494,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,10,['error'],['error']
Availability,"ing list is assumed to have objects with the same; name in the same order. If this is not the case warnings will be printed. If a single; sibling list is specified, 3 columns will be output: the (common) name, the value of this; list and the value in the sibling list. Multiple sibling lists can be specified by; repeating the Sibling() command.; Format(const char* str) -- Classic format string, provided for backward compatibility; Format(...) -- Formatting arguments, details are given below; OutputFile(const char* fname) -- Send output to file with given name rather than standard output. The Format(const char* what,...) has the following structure. const char* what -- Controls what is shown. ""N"" adds name, ""E"" adds error,; ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; FixedPrecision(int n) -- Controls precision, set fixed number of digits; AutoPrecision(int n) -- Controls precision. Number of shown digits is calculated from error; + n specified additional digits (1 is sensible default); VerbatimName(Bool_t flag) -- Put variable name in a \verb+ + clause. Example use: list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) ) ;. void printLatex(ostream& ofs, Int_t ncol, const char* option = ""NEYU"", Int_t sigDigit = 1, const RooLinkedList& siblingLists = RooLinkedList(), const RooCmdArg* formatCmd = 0) const; Internal implementation function of printLatex. Bool_t allInRange(const char* rangeSpec) const; Return true if all contained object report to have their; value inside the specified range. TObject* clone(const char* newname) const. TObject* create(const char* newname) const. TObject* Clone(const char* newname = 0) const. void setHashTableSize(Int_t i); Hash table control. Int_t getHashTableSize() const; Return size of internal hash table. Bool_t contains(const RooAbsArg& var) const; Returns true if object with same name as var is contained in this collection. Bool_t containsInstance(const RooAbsArg& var) const; Returns true if var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCollection.html:18201,error,error,18201,root/html526/RooAbsCollection.html,https://root.cern,https://root.cern/root/html526/RooAbsCollection.html,3,['error'],['error']
Availability,"ing list is assumed to have objects with the same; name in the same order. If this is not the case warnings will be printed. If a single; sibling list is specified, 3 columns will be output: the (common) name, the value of this; list and the value in the sibling list. Multiple sibling lists can be specified by; repeating the Sibling() command.; Format(const char* str) -- Classic format string, provided for backward compatibility; Format(...) -- Formatting arguments, details are given below; OutputFile(const char* fname) -- Send output to file with given name rather than standard output. The Format(const char* what,...) has the following structure. const char* what -- Controls what is shown. ""N"" adds name, ""E"" adds error,; ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; FixedPrecision(int n) -- Controls precision, set fixed number of digits; AutoPrecision(int n) -- Controls precision. Number of shown digits is calculated from error; + n specified additional digits (1 is sensible default); VerbatimName(Bool_t flag) -- Put variable name in a \verb+ + clause. Example use: list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) ) ;. void printLatex(ostream& ofs, Int_t ncol, const char* option = ""NEYU"", Int_t sigDigit = 1, const RooLinkedList& siblingLists = RooLinkedList(), const RooCmdArg* formatCmd = 0) const; Internal implementation function of printLatex. Bool_t allInRange(const char* rangeSpec) const; Return true if all contained object report to have their; value inside the specified range. void makeStructureTag(). void makeTypedStructureTag(). TObject* clone(const char* newname) const. TObject* create(const char* newname) const. TObject* Clone(const char* newname = 0) const. void setHashTableSize(Int_t i); Hash table control. Int_t getHashTableSize() const; Return size of internal hash table. Bool_t contains(const RooAbsArg& var) const; Returns true if object with same name as var is contained in this collection. Bool_t containsIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCollection.html:19074,error,error,19074,root/html532/RooAbsCollection.html,https://root.cern,https://root.cern/root/html532/RooAbsCollection.html,7,['error'],['error']
Availability,"ing of directories that CINT will search when you call #include<...>; returns empty string on failure. ; Definition at line 928 of file TTabCom.cxx. ◆ Hook(). Int_t TTabCom::Hook ; (; char * ; buf, . int * ; pLoc, . std::ostream & ; out . ). [private] ; Definition at line 1567 of file TTabCom.cxx. ◆ InitPatterns(). void TTabCom::InitPatterns ; (; ). private . [private] ; Definition at line 2139 of file TTabCom.cxx. ◆ IsA(). virtual TClass * TTabCom::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 226 of file TTabCom.h. ◆ IsDirectory(). Bool_t TTabCom::IsDirectory ; (; const char ; fileName[]). static . [static utility function]///////////////////////////// ; calls TSystem::GetPathInfo() to see if ""fileName"" is a system directory. ; Definition at line 1029 of file TTabCom.cxx. ◆ MakeClassFromClassName(). TClass * TTabCom::MakeClassFromClassName ; (; const char ; className[]); const. private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ; user must delete. returns 0 in case of error. ; Definition at line 2206 of file TTabCom.cxx. ◆ MakeClassFromVarName(). TClass * TTabCom::MakeClassFromVarName ; (; const char ; varName[], . EContext_t & ; context, . int ; iter = 0 . ). private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ; user must delete. returns 0 in case of error. if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf. context sensitive behavior. ; Definition at line 2255 of file TTabCom.cxx. ◆ NewListOfFilesInPath(). TSeqCollection * TTabCom::NewListOfFilesInPath ; (; const char ; path1[]). static . [static utility function]///////////////////////////// ; creates a list containing the full path name for each file in the (colon separated) string ""path1""; memory is allocated wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:15322,error,error,15322,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['error'],['error']
Availability,ing of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:13131,error,errors,13131,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['error'],['errors']
Availability,"ing of; this and h; instead, each bin's center is used to determine the target bin. Long64_t Merge(TCollection* list); Merge this with a list of THnBase's. All THnBase's provided; in the list must have the same bin layout!. void Multiply(const THnBase* h); Multiply this histogram by histogram h; this = this * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after; calling Multiply(). void Divide(const THnBase* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnBase* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnBase.html:15171,error,errors,15171,root/html534/THnBase.html,https://root.cern,https://root.cern/root/html534/THnBase.html,6,['error'],['errors']
Availability,"ing phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition). void DeclareCompatibilityOptions(). std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t *co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:20690,avail,availabel,20690,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,1,['avail'],['availabel']
Availability,"ing phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(). std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:21603,avail,availabel,21603,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,3,['avail'],['availabel']
Availability,"ing phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:21572,avail,availabel,21572,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,6,['avail'],['availabel']
Availability,"ing the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  hlquantiles.CDemo for quantiles (with highlight mode) ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  Legendre.py Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mathBeta.C Test the TMath::BetaDist and TMath::BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreStatFunc.py Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:135194,avail,available,135194,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['avail'],['available']
Availability,"ing the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ; , . Int_t ;  . ). inlineprotectedvirtual . Definition at line 110 of file TSlave.h. ◆ SetAlias(). void TSlave::SetAlias ; (; const char * ; alias). protectedvirtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 655 of file TSlave.cxx. ◆ SetArchCompiler(). void TSlave::SetArchCompiler ; (; const char * ; ac). inline . Definition at line 158 of file TSlave.h. ◆ SetInputHandler(). void TSlave::SetInputHandler ; (; TFileHandler * ; ih). Adopt and register input handler for this slave. ; Handler will be deleted by the slave. ; Definition at line 393 of file TSlave.cxx. ◆ SetInterruptHandler(). virtual void TSlave::SetInterruptHandler ; (; Bool_t ; ). inlinevirtual . Definition at line 156 of file TSlave.h. ◆ SetROOTVersion(). void TSlave::SetROOTVersion ; (; const char * ; rv). inline . Definition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlave.html:22072,recover,recovered,22072,doc/master/classTSlave.html,https://root.cern,https://root.cern/doc/master/classTSlave.html,1,['recover'],['recovered']
Availability,"ing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:30749,error,error,30749,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,12,"['error', 'failure']","['error', 'failures']"
Availability,"ing the special TProfile constructor below; 117/// where ymin and ymax are specified.; 118///; 119/// H(j) is printed as the channel contents. The errors displayed are s(j) if `option`='S'; 120/// (spread option), or e(j) if `CHOPT`='' (error on mean).; 121///; 122/// See TProfile::BuildOptions() for explanation of parameters; 123///; 124/// see also comments in the TH1 base class constructors; 125 ; 126TProfile::TProfile(const char *name,const char *title,Int_t nbins,Double_t xlow,Double_t xup,Option_t *option); 127: TH1D(name,title,nbins,xlow,xup); 128{; 129 BuildOptions(0,0,option);; 130}; 131 ; 132////////////////////////////////////////////////////////////////////////////////; 133/// Constructor for Profile histograms with variable bin size.; 134///; 135/// See TProfile::BuildOptions() for more explanations on errors; 136/// see also comments in the TH1 base class constructors; 137 ; 138TProfile::TProfile(const char *name,const char *title,Int_t nbins,const Float_t *xbins,Option_t *option); 139: TH1D(name,title,nbins,xbins); 140{; 141 BuildOptions(0,0,option);; 142}; 143 ; 144////////////////////////////////////////////////////////////////////////////////; 145/// Constructor for Profile histograms with variable bin size.; 146///; 147/// See TProfile::BuildOptions for more explanations on errors; 148/// see also comments in the TH1 base class constructors; 149 ; 150TProfile::TProfile(const char *name,const char *title,Int_t nbins,const Double_t *xbins,Option_t *option); 151: TH1D(name,title,nbins,xbins); 152{; 153 BuildOptions(0,0,option);; 154}; 155 ; 156////////////////////////////////////////////////////////////////////////////////; 157/// Constructor for Profile histograms with variable bin size.; 158/// See TProfile::BuildOptions for more explanations on errors; 159///; 160/// see also comments in the TH1 base class constructors; 161 ; 162TProfile::TProfile(const char *name,const char *title,Int_t nbins,const Double_t *xbins,Double_t ylow,Double_t yup,Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:5760,error,errors,5760,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['errors']
Availability,"ing the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes identically named objects from directory; [ROOT-8133] - TROOT::ProcessLine: TString::Replace out of range; [ROOT-8173] - RooStreamParser not working for float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:31287,error,error,31287,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['error'],['error']
Availability,"ing the; 1162/// un-weighted least-square (chi-square) method.; 1163///; 1164///; 1165///\anchor GFitErrors; 1166/// ### TGraphErrors fit:; 1167///; 1168/// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; 1169/// is projected along the y-direction by calculating the function at the points `x-ex_low` and; 1170/// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; 1171/// The chi-square is then computed as the sum of the quantity below at each data point:; 1172///; 1173/// \f[; 1174/// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; 1175/// \f]; 1176///; 1177/// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; 1178/// function `f(x)`.; 1179///; 1180/// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; 1181///; 1182/// The approach used to approximate the uncertainty in y because of the; 1183/// errors in x is to make it equal the error in x times the slope of the line.; 1184/// This approach is called ""effective variance method"" and; 1185/// the implementation is provided in the function FitUtil::EvaluateChi2Effective; 1186///; 1187/// \anchor GFitLinear; 1188/// ### Linear fitting:; 1189/// When the fitting function is linear (contains the `++` sign) or the fitting; 1190/// function is a polynomial, a linear fitter is initialised.; 1191/// To create a linear function, use the following syntax: linear parts; 1192/// separated by `++` sign.; 1193/// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; 1194/// TF1 object as; 1195///; 1196/// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; 1197///; 1198/// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; 1199/// Going via the linear fitter for functions, linear in parameters, gives a; 1200/// considerable advantage in speed.; 1201/// When us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:41795,error,errors,41795,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"ing this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. list<Int_t>fClientIDs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXUnixSocket(const char* u, Int_t psid = -1, Char_t ver = -1, TXHandler* handler = 0, int fd = -1); Constructor. Int_t Reconnect(); Try reconnection after failure. virtual ~TXUnixSocket(); { fSessionID = -1; }. Int_t GetClientID() const; { return (fClientIDs.size() > 0) ? fClientIDs.front() : -1; }. Int_t GetClientIDSize() const; { return fClientIDs.size(); }. void RemoveClientID(); { if (fClientIDs.size() > 1) fClientIDs.pop_front(); }. void SetClientID(Int_t cid); { fClientIDs.push_front(cid); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXUnixSocket.html:11528,failure,failure,11528,root/html534/TXUnixSocket.html,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html,2,['failure'],['failure']
Availability,"ing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:142670,error,error,142670,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['error'],['error']
Availability,"ing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:137975,error,error,137975,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['error'],['error']
Availability,"ing& expected, Bool_t zapOnError = kFALSE); TStringgetPunctuation() const; virtual TClass*IsA() const; Bool_tisPunctChar(char c) const; RooStreamParser&operator=(const RooStreamParser&); Bool_treadDouble(Double_t& value, Bool_t zapOnError = kFALSE); Bool_treadInteger(Int_t& value, Bool_t zapOnError = kFALSE); TStringreadLine(); Bool_treadString(TString& value, Bool_t zapOnError = kFALSE); TStringreadToken(); voidsetPunctuation(const TString& punct); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidzapToEnd(Bool_t inclContLines = kFALSE). Data Members; protected:. Bool_t_atEOF; Bool_t_atEOL; istream*_is; TString_prefix; TString_punct. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooStreamParser(istream& is); Construct parser on given input stream. RooStreamParser(istream& is, const TString& errPrefix); Construct parser on given input stream. Use given errorPrefix to; prefix any parsing error messages. ~RooStreamParser(); Destructor. Bool_t atEOL(); If true, parser is at end of line in stream. void setPunctuation(const TString& punct); Change list of characters interpreted as punctuation. Bool_t isPunctChar(char c) const; Check if given char is considered punctuation. TString readToken(); Read one token separated by any of the know punctuation characters; This function recognizes and handles comment lines in the istream (those; starting with '#', quoted strings ("""") the content of which is not tokenized; and '+-.' characters that are part of a floating point numbers and are exempt; from being interpreted as a token separator in case '+-.' are defined as; token separators. TString readLine(); Read an entire line from the stream and return as TString; This method recognizes the use of '\\' in the istream; as line continuation token. void zapToEnd(Bool_t inclContLines = kFALSE); Eat all characters up to and including then end of the; current line. If inclC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStreamParser.html:2489,error,errorPrefix,2489,root/html528/RooStreamParser.html,https://root.cern,https://root.cern/root/html528/RooStreamParser.html,8,['error'],"['error', 'errorPrefix']"
