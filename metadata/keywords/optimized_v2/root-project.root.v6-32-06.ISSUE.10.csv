quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Security,"ALICE has reported regular crashes due to MT unsafe access in `TDirectory::RegisterGDirectory`. Example backtrace:. ```. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================. Thread 6 (Thread 0x7ff42998d700 (LWP 56550) ""o2-sim-hit-merg""):; #0 0x00007ff44b42eef6 in longest_match () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #1 0x00007ff44b42fd58 in deflate_fast () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #2 0x00007ff44b430822 in deflate () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #3 0x00007ff447cbe8a5 in R__zipZLIB (irep=0x7ff4299869a8, tgt=0x7ff3c94c924f ""ZL\b\177\272"", tgtsize=0x7ff4299869ac, src=0x7ff4299868c0 ""\177"", srcsize=0x7ff4299869ac, cxlevel=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/core/zip/src/RZip.cxx:213; #4 R__zipMultipleAlgorithm (compressionAlgorithm=<optimized out>, irep=0x7ff4299869a8, tgt=0x7ff3c94c924f ""ZL\b\177\272"", tgtsize=0x7ff4299869ac, src=0x7ff4299868c0 ""\177"", srcsize=0x7ff4299869ac, cxlevel=32756) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/core/zip/src/RZip.cxx:109; #5 R__zipMultipleAlgorithm (cxlevel=cxlevel; entry=1, srcsize=srcsize; entry=0x7ff4299869ac, src=src; entry=0x7ff3d000007f ""\300Ro\211\300=\200I\300>\277\341\300D'\254\300F\343\016\300Ix\232\300K\333^\300M\340!\300O\255T\300P\320\344\300Q\254\250\300<\225B\300S,g\300S\313\061\300Tf\250\300TӾ\300U.\b\300U\027\\\300T}d\300S\200\344\300R\220\234\300QT}\300D\241\221\300V\a\360\300U\246\060\300S; \300\300QV\026\300OE\345\300M\020\314\300J\365\f\300I(D\300G\250X\300FE6\300P\r\376\300B\240\300\300; zV\300>\225\324\300=\036\206\300<8t\300;\252d\300;v\376\300;\210w\300;\336J\300HǬ\300\071\322+\300:\205\232\300;\231H\300<\367\a\300=\350\252\300?"", <inco",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:52,access,access,52,https://root.cern,https://github.com/root-project/root/issues/8931,1,['access'],['access']
Security,Access of deleted object during hadd tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9017:0,Access,Access,0,https://root.cern,https://github.com/root-project/root/issues/9017,1,['Access'],['Access']
Security,Access root with termux,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12433:0,Access,Access,0,https://root.cern,https://github.com/root-project/root/issues/12433,1,['Access'],['Access']
Security,Accessing pyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676:0,Access,Accessing,0,https://root.cern,https://github.com/root-project/root/issues/10676,1,['Access'],['Accessing']
Security,Add RPageSinkFile metrics and access them through RNTupleWriter,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7235:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/7235,1,['access'],['access']
Security,"Add a couple of unit tests for two pythonizations:; - Access a TTree branch as an attribute; - Make a TTree iterable. Both of them test different types of branches, which is especially relevant in the first test. The fact that the pythonization of `SetBranchAddress` is still not present in PyROOT experimental prevents the second test from testing more branch types (i.e. those that require a reference to a pointer); this is not an issue anyway since the code of the TTree-iterable pythonization is tested in its entirety by the current cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449:54,Access,Access,54,https://root.cern,https://github.com/root-project/root/pull/2449,1,['Access'],['Access']
Security,"Add a new page source and sink that use S3 as the backing store. Davix; is used as the S3 interface. The implementation is nearly identical; to the DAOS backend and there is a lot of duplicated code. ```cpp; std::string s3Uri(""s3://$(S3_BUCKET).$(S3_HOST)"");; {; auto model = RNTupleModel::Create();; auto pt = model->MakeField<float>(""pt"");; auto vec = model->MakeField<std::vector<int>>(""vec"");; // create a new RNTuple named `my_ntuple`; // -- objects are written to /bucket/my_ntuple/; auto writer = RNTupleWriter::Recreate(std::move(model), ""my_ntuple"", s3Uri);; for (int i = 0; i < 100; i++) {; *pt = 42.0;; *vec = {1, 2, 3};; writer->Fill();; }; }. // opens the RNTuple at the path /bucket/my_ntuple/; auto ntuple = RNTupleReader::Open(""my_ntuple"", s3Uri);; ```; results in the following objects stored in the bucket:; ```shell; my_ntuple/0 # page 0, 1, ... ; my_ntuple/1; my_ntuple/18446744073709551613 # footer; my_ntuple/18446744073709551614 # header; my_ntuple/18446744073709551615 # anchor; my_ntuple/2; ```; Like the current DAOS backend, one object is allocated for every page,; plus three for the header, footer, and anchor. Performance will not be; very good yet as only a single request at a time is issued. Pages are issued keys sequentially from 0, like the DAOS backend. There; are three reserved keys:; * anchor: u64(-1); * header: u64(-2); * footer: u64(-3). S3 access is controlled using the (ROOT & Davix-compatible) envvars:; * S3_REGION; * S3_SECRET_KEY; * S3_ACCESS_KEY. Perhaps these should be changed to the official AWS envvars. Todo:; - [ ] re-add cluster caching functionality to `PopulatePageFromCluster`; - [ ] implement `LoadCluster`; - [ ] test mocks; - [ ] test with real RNTuples; - [ ] issue concurrent requests to S3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8525:1384,access,access,1384,https://root.cern,https://github.com/root-project/root/pull/8525,1,['access'],['access']
Security,Add a specialization of RTreeColumnReader that reads values from a branch of type std::array. The specialization uses the non-adopting view from RVec to expose the contents of the array to nodes of the graph. Fixes #16160,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16161:153,expose,expose,153,https://root.cern,https://github.com/root-project/root/pull/16161,1,['expose'],['expose']
Security,Add accessor functions and functionality needed by CMS event display.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/99:4,access,accessor,4,https://root.cern,https://github.com/root-project/root/pull/99,1,['access'],['accessor']
Security,Add checksum support to LZ4 compression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/926:4,checksum,checksum,4,https://root.cern,https://github.com/root-project/root/pull/926,1,['checksum'],['checksum']
Security,Add checksum to the LZ4 compressed buffer format.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/907:4,checksum,checksum,4,https://root.cern,https://github.com/root-project/root/pull/907,1,['checksum'],['checksum']
Security,Add commented code to httpsccess.C macro which configures authentication. And server can be used with external JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12889:58,authenticat,authentication,58,https://root.cern,https://github.com/root-project/root/pull/12889,1,['authenticat'],['authentication']
Security,"Add deprecation messages in PQ2, old deamons and authentication tools",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1755:49,authenticat,authentication,49,https://root.cern,https://github.com/root-project/root/pull/1755,1,['authenticat'],['authentication']
Security,"Add more error-checking to the `NTupleDescriptor` build process (sibling PR of #5934); Intent after #5985 lands is to make `EnsureValidDescriptor` private, remove `GetDescriptor` and `MoveDescriptor` ; and expose a new method. `RNTupleDescriptorBuilder::MakeDescriptor() -> RResult<RNTupleDescriptor>` . that we can call `Inspect` and `Unwrap` on. . The actual `NTupleDescriptor` validity check is a bit sparse right now (I don't really know many `Column` or `Cluster` invariants).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5989:206,expose,expose,206,https://root.cern,https://github.com/root-project/root/pull/5989,1,['expose'],['expose']
Security,"Add range checks to `RNTupleView`'s indexing operators. Before this change out of bounds accesses were being caught by an internal assert (in `RPageStorageFile::PopulatePage`); ```cpp; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", path);; ntuple->Fill();; ntuple->Fill();; // ntuple has 2 entries; }; auto ntuple = RNTupleReader::Open(""myNTuple"", path);; auto viewPt = ntuple->GetView<float>(""pt"");; std::cout << viewPt(2); // attempt to access the pt field at offset 2 ; ```. Before:; ```; Fatal: clusterId != kInvalidDescriptorId violated at line 400 of `/home/max/projects/rootdev/root/tree/ntuple/v7/src/RPageStorageFile.cxx'; aborting; ```. The assert location:; https://github.com/root-project/root/blob/a4b812bad84be0986ee416bbd65cf44527b92404/tree/ntuple/v7/src/RPageStorageFile.cxx#L391-L400. After this change we throw an exception like:; ```; index 2 out of bounds for field 'pt' with 2 elements; ```. This also required a change to `RFieldBase::GetNElements` to handle a few field corner cases: ; * before columns are generated; * class fields (which do not have a principal column)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7784:89,access,accesses,89,https://root.cern,https://github.com/root-project/root/pull/7784,2,['access'],"['access', 'accesses']"
Security,"Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12665:424,Validat,Validation,424,https://root.cern,https://github.com/root-project/root/pull/12665,1,['Validat'],['Validation']
Security,"Add template specialization for `RVec<T>::operator[]` to access elements by passing a vector of indices. Here an example:. ```cpp; using namespace ROOT::VecOps;; RVec<float> v = {1, 2, 3, 4, 5};; RVec<size_t> idx = {0, 2, 4};; cout << v[idx] << endl;; // Returns: { 1, 3, 5 }; ```. This enable numpy-like element access and a more convenient handling of index magic. See following scenario:. ```cpp; using namespace ROOT::VecOps;; RVec<float> v = {2, 1, 0};; auto idx = Argsort(v);; cout << v[idx] << endl;; // Returns: { 0, 1, 2 }; ```. **TODO:**. - [ ] Add this feature to a tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2621:57,access,access,57,https://root.cern,https://github.com/root-project/root/pull/2621,2,['access'],['access']
Security,Add training-validation split in MethodDL and PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2844:13,validat,validation,13,https://root.cern,https://github.com/root-project/root/pull/2844,1,['validat'],['validation']
Security,Added missing accessors for polish property in TGeoOpticalSurface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3623:14,access,accessors,14,https://root.cern,https://github.com/root-project/root/pull/3623,1,['access'],['accessors']
Security,"Added support for the VecGeom library as external package (-Dvecgeom). Creating new library libConverterVG within geom module. This contains the conversion interface for ROOT shapes into vecgeom ones, activated using the plugin mechanism from ROOT. Included also the class TGeoVGShape bridging TGeoShape methods to either VecGeom solid (navigation) or existing ROOT shape (visualisation and the rest). The conversion can be done once a ROOT geometry is in memory using:; TVirtualGeoConverter::Instance()->ConvertGeometry(); Once this is done, all TGeo functionality and tests can be accessed as for a standard TGeo geometry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/156:583,access,accessed,583,https://root.cern,https://github.com/root-project/root/pull/156,2,['access'],['accessed']
Security,Address sanitizer uncovered an unprotected `memcpy` happening here:; https://github.com/root-project/root/blob/08cbc9bfd363f69a8be02f07e2330c7f44e0b420/core/base/src/TString.cxx#L127-L136. Invoked from here:; https://github.com/root-project/root/blob/08cbc9bfd363f69a8be02f07e2330c7f44e0b420/hist/hist/src/TF1.cxx#L535. Note that it's always 5 characters being copied from the incoming string `formula`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8136:8,sanitiz,sanitizer,8,https://root.cern,https://github.com/root-project/root/issues/8136,1,['sanitiz'],['sanitizer']
Security,Address security threat reported by S. Luders.; Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1467:8,secur,security,8,https://root.cern,https://github.com/root-project/root/pull/1467,2,"['secur', 'threat']","['security', 'threat']"
Security,Addressed security threat reported by S. Luders.; Using the same technology used in TSystem::ExpandFileName .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/513:10,secur,security,10,https://root.cern,https://github.com/root-project/root/pull/513,2,"['secur', 'threat']","['security', 'threat']"
Security,Addressing report in #7423 ; In most cases - potential access to nullptr.; Plus improving GetCppName.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7437:55,access,access,55,https://root.cern,https://github.com/root-project/root/pull/7437,1,['access'],['access']
Security,"Adds a `RRawFile` class in the `ROOT::Experimental::Detail` namespace for accessing files byte-wise or line-wise. This is supposed to be used in RNTuple as well as in the CSV and SQlite `RDataSource` classes. Files are addressed by URLs (e.g. http://server/file or file:///local/path) and derived classes of `RRawFile` implement the protocol-dependent low-level read routine. The class allows for; - unified access to files, either local or remote; - Automatic handling of UNIX and Windows line breaks ; - Control of the I/O buffer mechanism. Current todos:; - [ ] Use upcoming `RStatus` / `RException` based error handling; - [ ] Use RRawFile in RCsvDS and RSqliteDS and compare the performance to the current implementation ; - [x] Implementation of Davix based I/O, using ROOT's plugin infrastructure in order to avoid a dependency of RIO to RDAVIX; - [x] Revised I/O buffering mechanism to avoid buffer thrashing on `Readln`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030:74,access,accessing,74,https://root.cern,https://github.com/root-project/root/pull/3030,2,['access'],"['access', 'accessing']"
Security,Adds drawing possibilities for average ROC curves with cross validation. This integrates the work of @mohammaduzair9. Superseeds PR #2454.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2913:61,validat,validation,61,https://root.cern,https://github.com/root-project/root/pull/2913,1,['validat'],['validation']
Security,Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12048:29,access,access,29,https://root.cern,https://github.com/root-project/root/pull/12048,1,['access'],['access']
Security,"Adds the following columns to an RDF created from an RNTuple:. Inner collections; ----------------------; The inner fields of collection of a record is projected to collections of the inner fields. E.g. a for a field `jet` of type vector of. struct Jet {; float pt;; float eta;; };. the RDF exposes `std::vector<float> jet.pt` and `std::vector<float> jet.eta` in addition to `std::vector<Jet> jet`. Cardinality columns; --------------------------; For every collection `x`, an additional cardinality column `#x` is exposed that contains the number of elements of the collection. Note that for inner collections, the cardinality columns is itself a collection. For instance, for a column `std::vector<std::vector<float>>` the cardinality column is of type `std::vector<std::uint32_t>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6700:291,expose,exposes,291,https://root.cern,https://github.com/root-project/root/pull/6700,2,['expose'],"['exposed', 'exposes']"
Security,"After commit a0fa4fa, the integration of a RooParamHistFunc still; doesn't work when the RooParamHistFunc was cloned with `cloneTree`.; This was because the ranges were stored in a hash map keyed by argument; pointer and then not the correct clones of the arguments were used to; look up the ranges afterwards. This commit is fixing that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7479:181,hash,hash,181,https://root.cern,https://github.com/root-project/root/pull/7479,1,['hash'],['hash']
Security,"After commit a0fa4fa, the integration of a RooParamHistFunc still; doesn't work when the RooParamHistFunc was cloned with `cloneTree`.; This was because the ranges were stored in a hash map keyed by argument; pointer and then not the correct clones of the arguments were used to; look up the ranges afterwards. This commit is fixing that. The problem was reported in the ROOT forum: https://root-forum.cern.ch/t/barlow-beeston-in-subrange/43909/5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7478:181,hash,hash,181,https://root.cern,https://github.com/root-project/root/pull/7478,1,['hash'],['hash']
Security,"After reviewing the implementation of `RPageSinkBuf` and starting to prototype parallel RNTuple writing, I would like to propose moving the code related to descriptor building and serialization into a new class. The main observation here is that ""wrapping"" `RPageSink`s do not need that functionality, only the ""final"" sink that actually writes to files or DAOS. For now, I named the class `RPagePersistentSink`, but that's of course up for debate. Other options include ""final"" (even though that is ambiguous in the context of a class hierarchy) and ""serializing"". The first two commits may be useful independent of the rest of the series; the one to ""Avoid calling `PageSink::UpdateSchema` from `RPageSinkBuf`"" depends on moving the `Commit` implementations first (which access `fOpenColumnRanges` and `fOpenPageRanges`. *If* we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two `virtual` function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142:773,access,access,773,https://root.cern,https://github.com/root-project/root/pull/14142,1,['access'],['access']
Security,All derived classes should also redefine Hash and call recursive remove,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12796:41,Hash,Hash,41,https://root.cern,https://github.com/root-project/root/pull/12796,1,['Hash'],['Hash']
Security,"All these classes using additional histogram to draw axes, therefore one need to create and access such ; histogram before drawing object in web canvas. web canvas can address these histograms for context menu or when axis attributes are changed. Special handling of zoomed axis implemented. When necessary, `fMinimum`/`fMaximum` members are changed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11762:92,access,access,92,https://root.cern,https://github.com/root-project/root/pull/11762,1,['access'],['access']
Security,Allow to pass Bearer token authentication header to Davix client,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802:27,authenticat,authentication,27,https://root.cern,https://github.com/root-project/root/issues/6802,1,['authenticat'],['authentication']
Security,Allow users to set/access the floating point precision when writing GDML,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11890:19,access,access,19,https://root.cern,https://github.com/root-project/root/pull/11890,1,['access'],['access']
Security,"Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:; ```; THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");; ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:; ```; http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12866:10,access,access,10,https://root.cern,https://github.com/root-project/root/pull/12866,3,"['Access', 'access', 'password']","['Access-Control-Allow-Credentials', 'access', 'password']"
Security,"Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python; @ROOT.DeclareCppCallable([""float""], ""float""); def f(x); return 2.0 * x. # General use-cases; ROOT.CppCallable.f(21) # Returns 42; ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe; df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""); ```. You can set an optional name. ```python; @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""); def f(x); return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42; ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python; @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True); def f(x); return 2.0 * x; ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python; @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); def f(x); return ROOT.std.string(str(x)). ROOT.CppCallable.f(x); # 1) Throws Python warning:; # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation.; # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); # 2) Falls back to generic impl and prints ""42"" (as string); ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python; @ROOT.DeclareCallable([""float""], ""float""); def f(x); return 2.0 * x. # General use-cases; ROOT.ROOT.f(21) # Returns 42; ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe; df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""); ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488:348,Inject,Inject,348,https://root.cern,https://github.com/root-project/root/pull/3488,1,['Inject'],['Inject']
Security,Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/566:5,sanitiz,sanitize,5,https://root.cern,https://github.com/root-project/root/pull/566,1,['sanitiz'],['sanitize']
Security,"Alternatively we could enlarge the buffer for `snprintf`. However, this would change the print-out since the truncation feature of `snprintf` is a feature. @lmoneta What do you think?. Edit: The truncation warnings can be found here: https://sft.its.cern.ch/jira/secure/attachment/22139/build.log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3869:263,secur,secure,263,https://root.cern,https://github.com/root-project/root/pull/3869,1,['secur'],['secure']
Security,"Apparently xrootd 5.3.1 have a different sha256 hash (not clear how it could happened or if maybe in PR I was using old). Failure was detected on centos8 rootbench machine (https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/):; ```; -- verifying file...; file='/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz'; -- SHA256 hash of; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz; does not match expected value; expected: '1194ba435dc1e243f3cdb8273f6385407183799faf7622a582a828f4aff6807d'; actual: '0800b4c6444591a6514c5b81b2c4c79439875136ab2267ce4bed99cb94ead6e6'; -- Hash mismatch, removing...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:48,hash,hash,48,https://root.cern,https://github.com/root-project/root/pull/9103,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```; root https://root.cern/js/files/legends.root -e ""legends->Draw()""; ```. Command produce a lot of error output like:; ```; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));; return;; }; else {; (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <prepareFuncPtr>: Compiled function pointer is null; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid !; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12559:530,secur,security,530,https://root.cern,https://github.com/root-project/root/issues/12559,1,['secur'],['security']
Security,"As a follow up of the discussion in ROOT-9846:. https://sft.its.cern.ch/jira/browse/ROOT-9846. This PR injects the necessary pythonizations to support the `len(c)` syntax when getting the size of containers (`TCollection`, `TArray`, `RooAbsCollection` and their respective derivates) from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3082:103,inject,injects,103,https://root.cern,https://github.com/root-project/root/pull/3082,1,['inject'],['injects']
Security,"As a result of discussing #9947 , the following two use cases have arised (in terms of what a user would want to do with a TFile):. 1. Open the file, `cd` into it, write/read stuff to/from it, `cd` out of it (thus restoring the `gDirectory` to the previous open file or something like `gROOT`; 2. Open a file, write/read stuff to/from it, close the file and forget about it and its content. While case 2 can be better addressed with the original idea of the TFile pythonization of the PR linked above, case 1 is actually the purpose of the `TDirectory::TContext` class. Currently, there is no easy way to use this class in Python because it's an RAII construct that fulfills its mission at destruction time. Python scopes are quite different to C++ scopes, and calling the destructor of the TContext explicitly would mean calling the `__destruct__` magic method (which is maybe not even intended for public usage). Thus. a much more pythonic approach is to enable usage of `TContext` as a Python context manager. This allows for example the following:. ```python; import ROOT; from ROOT import TDirectory. with TDirectory.TContext():; # Open some file here; file = ROOT.TFile(...); # Retrieve contents from the file; histo = file.Get(""myhisto""); ```; where after the `with` statement, the current directory is restored to ROOT.gROOT. Or also. ```python; import ROOT; from ROOT import TDirectory. file1 = ROOT.TFile(""file1.root""); file2 = ROOT.TFile(""file2.root""). with TDirectory.TContext(file1, file2):; histo = ROOT.TH1F(...); histo.Write(); ```. where inside the `with` statement the current directory would be `file2`, and afterwards it would be set to `file1`. As an aside, this functionality would not modify anything of the TFile itself, e.g. it would not close it after the `with`. This means that all objects created or read from the file in the with statement would still be alive and accessible afterwards",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10167:1895,access,accessible,1895,https://root.cern,https://github.com/root-project/root/pull/10167,1,['access'],['accessible']
Security,"As discussed in [ROOT-10409](https://sft.its.cern.ch/jira/browse/ROOT-10409), these accessors are very dangerous and aren't backed by a clear use case right now. Therefore, @Axel-Naumann and I think it's best to just remove them for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4708:84,access,accessors,84,https://root.cern,https://github.com/root-project/root/pull/4708,1,['access'],['accessors']
Security,"As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11673:69,access,accessible,69,https://root.cern,https://github.com/root-project/root/issues/11673,1,['access'],['accessible']
Security,"As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112:98,inject,injecting,98,https://root.cern,https://github.com/root-project/root/issues/9112,1,['inject'],['injecting']
Security,"As pointed out by ATLAS, it's currently not possible to use a `std::vector` with a non-default allocator in RNTuple:; ```c++; #include <ROOT/RNTupleModel.hxx>. #include <scoped_allocator>; #include <vector>. void ntuple_vector_allocator() {; auto model = ROOT::Experimental::RNTupleModel::CreateBare();; model->MakeField<std::vector<int, std::scoped_allocator_adaptor<std::allocator<int>>>>(""v"");; }; ```; leads to; ```; Processing ntuple_vector_allocator.C...; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): vector<int,scoped_allocator_adaptor<allocator<int> > > is not supported; At:; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass *) [/home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:1807]. Aborted (core dumped); ```; This is because `RField` is only partially specialized for `std::vector<ItemT>`, so a non-default `Allocator` falls back to the default `RField` declaration (which assumes it's a class and checks that it's not in `std` namespace). Note that in principle, this affects all STL containers. For many of them, there are other template parameters, for example `Hash` for `std::unordered_set`:; ```c++; #include <ROOT/RNTupleModel.hxx>. #include <unordered_set>. struct IntHash : public std::hash<int> {};. void ntuple_unordered_set_hash() {; auto model = ROOT::Experimental::RNTupleModel::CreateBare();; model->MakeField<std::unordered_set<int, IntHash>>(""s"");; }; ```; leads to; ```; Processing ntuple_unordered_set_hash.C...; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): unordered_set<int,IntHash,equal_to<int>,allocator<int> > is not supported; At:; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass *) [/home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:1807]. Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16754:1166,Hash,Hash,1166,https://root.cern,https://github.com/root-project/root/issues/16754,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"As reported by Chris Jones:. > https://github.com/root-project/root/blob/6a1389a16625718f2750ba90156d3f8f9d5dfe8a/core/thread/src/RConcurrentHashColl.cxx#L53-L62; > There is a race condition between line 57 and 58. Between releasing the read lock and taking the write lock, another thread could have inserted the same hash. And indeed, the unconditional return of `true` within the write lock means that in the case of the race condition then the result is incorrect. (a) the only consequence of the race is a small performance loss and the return value of the function is incorrect (true instead of false). (b) but the function does not seem to be called anywhere. The consequence of (a) should be if (b) is incorrect that a StreamerInfo is being re-read when it does not need to, so 'only' a performance decrease when opening files. Also Matti noticed that the 2nd forms was always taking the write lock and that is because:. The proper use of that function is to do the check externally (via a call to Find) and then call the Insert if need be. The call to std::set::insert does a check internally to reject double inserts and return the status via the iterator. So that 2nd function is already doing (indirectly) the check Dan recommended. So the fix is to either fix the return value of the first function or have it call the 2nd function or .... just removing it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11794:318,hash,hash,318,https://root.cern,https://github.com/root-project/root/pull/11794,1,['hash'],['hash']
Security,"As reported by ROOT-8935, when an enum is in a namespace and the; values of the enum are accessed via the namespace, the underlying; type of the enum is not taken into account. With this fix, we check the underlying type of the enum in; PropertyProxy::Set before creating the converter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4202:89,access,accessed,89,https://root.cern,https://github.com/root-project/root/pull/4202,2,['access'],['accessed']
Security,"As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4121:243,inject,inject,243,https://root.cern,https://github.com/root-project/root/pull/4121,1,['inject'],['inject']
Security,"As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1512:55,access,accessing,55,https://root.cern,https://github.com/root-project/root/pull/1512,3,['access'],"['access', 'accessing']"
Security,"As reported in ROOT-9463, the result of GetColumnNames is redundant. A simple reproducer:; ```; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int a;; t.Branch(""a"", &a);; a = 42;; t.Fill();; t.Write();; f.Close();; ROOT::RDataFrame df(""t"", ""f.root"");. for (auto x : df.GetColumnNames()); std::cout <<x <<std::endl;; ```. This redundancy is now not exposed to the user. **It would be nice** to have more tests on real use cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:353,expose,exposed,353,https://root.cern,https://github.com/root-project/root/pull/2443,1,['expose'],['exposed']
Security,"As reported in https://root-forum.cern.ch/t/pure-virtual-method-called-on-hadding-tfiles-with-tfriendelements/46836/6; (see there for reproducer), hadd at tear down accesses already deleted objects. In version of ROOT equal or newer than v6.22/08 and v6.24/00, the problem appears only in a slow merge. (for example `hadd -f0 output.root testroot_1,root testroot_2.root`) . The resulting stack trace is:. ```; ==1241== Process terminating with default action of signal 6 (SIGABRT); ==1241== at 0x5BB618B: raise (raise.c:51); ==1241== by 0x5B9592D: abort (abort.c:100); ==1241== by 0x58C2910: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE38B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE3F6: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CF154: __cxa_pure_virtual (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x551449A: TCollection::RecursiveRemove(TObject*) (TCollection.cxx:579); ==1241== by 0x4A345D0: TTree::RecursiveRemove(TObject*) (TTree.cxx:7857); ==1241== by 0x551F16F: TList::RecursiveRemove(TObject*) (TList.cxx:813); ==1241== by 0x5518879: THashList::RecursiveRemove(TObject*) (THashList.cxx:354); ==1241== by 0x543C003: TROOT::RecursiveRemove(TObject*) (TROOT.cxx:2455); ==1241== by 0x496B26E: ROOT::CallRecursiveRemoveIfNeeded(TObject&) (TROOT.h:398); ==1241== by 0x5512E61: TCollection::~TCollection() (TCollection.cxx:189); ==1241== by 0x5506D19: TSeqCollection::~TSeqCollection() (TSeqCollection.h:37); ==1241== by 0x551BE8E: TList::~TList() (TList.cxx:92); ==1241== by 0x551BEAD: TList::~TList() (TList.cxx:95); ==1241== by 0x4A1DE02: TTree::~TTree() (TTree.cxx:975); ==1241== by 0x4A1E2C7: TTree::~TTree() (TTree.cxx:1023); ==1241== by 0x4A308E9: TTree::Merge(TCollection*, TFileMergeInfo*) (TTree.cxx:6908); ==1241== by 0x4960BA2: ROOT::merge_TTree(void*, TCollection*, TFileMergeInfo*) (G__Tree.cxx:4209); ==1241== by 0x4E739D6: TFileMerger::MergeOne(TDirectory*, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9017:165,access,accesses,165,https://root.cern,https://github.com/root-project/root/issues/9017,1,['access'],['accesses']
Security,"As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a; - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;; - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;; - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So; ```; private:; int size_;; float* data_; //[size_]; float* transient_; //!; ```; can be also expressed as; ```; private:; int size_;; float* data_ [[clang::annotate(""[size_]"")]];; float* transient_ [[clang::annotate(""!"")]];; ```; and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//!; - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`; or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:; ```; float* data_ [[rootio::siz",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12012:499,inject,injected,499,https://root.cern,https://github.com/root-project/root/issues/12012,1,['inject'],['injected']
Security,"As seen in https://root-forum.cern.ch/t/draw-short-integers-as-numbers-not-characters/52530/10,; in that case we get:; ```; Error in <TTreeReaderArrayBase::CreateContentProxy()>: The branch Jet_idx contains data of type char. It cannot be accessed by a TTreeReaderArray<signed char>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11837:239,access,accessed,239,https://root.cern,https://github.com/root-project/root/issues/11837,1,['access'],['accessed']
Security,As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:; ```; TTreeReaderArray<someEnum> test_someEnum ...; ```; leads to error like; ```; Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it.; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12661:244,access,accessing,244,https://root.cern,https://github.com/root-project/root/issues/12661,1,['access'],['accessing']
Security,"As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++; std::vector<std::string>, the variable 'e' that goes through the vector is; not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied; where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4648:207,inject,injected,207,https://root.cern,https://github.com/root-project/root/pull/4648,1,['inject'],['injected']
Security,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9519:239,access,accessible,239,https://root.cern,https://github.com/root-project/root/pull/9519,1,['access'],['accessible']
Security,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"". In particular, in this commit:; - move alias management from RLoopManager to RBookedColumns; - remove alias-managing logic from RLoopManager; - refactor several functions so they only take RBookedColumns as input; rather than a list of defined names plus a map of aliases; (CheckForDefinition, CheckForRedefinition, FindUnknownColumns,; GetValidatedColumnNames, BookFilterJit, FindUsedColumns,; ParseRDFExpression); - use RBookedColumns::ResolveAlias instead of ResolveAlias helper function; - adapt dataframe_utils test to the new signature of FindUnknownColumns. Note that this is a backward-incompatible change for user code that; relied on this global definition of Aliases. We expect this to be an; exceedingly rare usecase, and if such code exists it will produce a; clear error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9496:239,access,accessible,239,https://root.cern,https://github.com/root-project/root/pull/9496,1,['access'],['accessible']
Security,"As we discovered in a CMSSW ROOT `master` sync PR, the new RooFit CPU; backend treats empty datasets differently from the legacy NLL evaluation; backend:; https://github.com/cms-sw/cmsdist/pull/9025. This commit is fixing this, in particular removing the assumption that; datasets used for fits with the new CPU backend are never empty. A unit test that validates the behavior for empty data objects is also; added. I set the priority to ""high"" because this is a blocker for CMSSW to use ROOT master.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14817:354,validat,validates,354,https://root.cern,https://github.com/root-project/root/pull/14817,1,['validat'],['validates']
Security,"At the moment, `push` workflows pass `--base_ref master` to `build_root.py`. This means that they may actually pick up a later commit (= the current commit on the branch) at the time the job actually starts to run. In order to be usable as indications when a certain configuration broke, it would be more useful to test exactly the pushed commit, identified by its hash. Unfortunately, fixing this isn't as easy as replacing; https://github.com/root-project/root/blob/db6ff452b032b23251970046fd1febe066e4fa4d/.github/workflows/root-ci.yml#L456-L465; to pass `--base_ref ${{ github.sha }}` because `build_root.py` calls `git clone --branch {branch} --single-branch {repository}`. Passing a hash here doesn't work (in local tests), and would otherwise probably result in a detached `HEAD`. Another complication is that the sources are included in the build artifacts used by PR builds, so they have to look like an ordinary clone for the rebase operation to work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14061:365,hash,hash,365,https://root.cern,https://github.com/root-project/root/issues/14061,2,['hash'],['hash']
Security,Avoid access to deleted object (indirectly) from TH1::Clone.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1818:6,access,access,6,https://root.cern,https://github.com/root-project/root/pull/1818,1,['access'],['access']
Security,Avoid out-of-bounds vector element access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11704:35,access,access,35,https://root.cern,https://github.com/root-project/root/pull/11704,1,['access'],['access']
Security,"Backport of #15867 . For security reasons this option is off by default. . Only when desired `win.SetUseCurrentDir(true)` should be invoked. ; It happens automatically when ""localapp."" namespace configured as main ui5 panel for the window",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15868:25,secur,security,25,https://root.cern,https://github.com/root-project/root/pull/15868,1,['secur'],['security']
Security,"Before this commit, RDataSource columns were treated like a special; kind of Defined columns: they were registered in RBookedCustomColumn; and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns; corresponding to the RDS columns. Instead, we store the RDS column value; pointers in a dedicated std::map and teach RDSColumnReader to directly; use that. Logic is simpler, we avoid an extra function call and an extra; copy upon data-source value accesses, and we move closer to implementing; column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6208:163,access,accessed,163,https://root.cern,https://github.com/root-project/root/pull/6208,2,['access'],"['accessed', 'accesses']"
Security,"Before this commit, RResultPtr and RLoopManager shared the status (run or not run) of the RAction. Now only the action has knowledge of it, and exposes a method to retrieve the information, used only by the RResultPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2461:144,expose,exposes,144,https://root.cern,https://github.com/root-project/root/pull/2461,1,['expose'],['exposes']
Security,"Before this patch, RCustomColumnBase's destructor could access; RLoopManager after deletion in some cases, e.g. when jitting code after; the computation graph was already out of scope or when the RLoopManager; was kept alive only by another node's shared_ptr to it. I think we never; saw a crash due to this bug because the use is _right after_ deletion,; and there is never an allocation between deletion and use. Valgrind; still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager; and RCustomColumns can actually be removed, and in particular; RCustomColumnBase's destructor does not need to access RLoopManager; anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp; auto f = ROOT::RDataFrame(1).Filter([] { return true; });; ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to; the previous node), which triggers destruction of RLoopManager. Later,; RFilterBase is destructed, which triggers destruction of its registered; custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_""; columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5544:56,access,access,56,https://root.cern,https://github.com/root-project/root/pull/5544,3,['access'],['access']
Security,"Before this patch, friend branches or leaves were listed in the output of `GetColumnNames` twice, as `friendname.bname` and as `bname`. Now we only list the longer version. This fixes #8450 as a side-effect. This PR also adds a test and improves the related docs. Rationale for the change in behavior of `GetColumnNames`: currently, in RDataFrame we have (fairly convoluted) logic to retrieve 3 different lists of branch names given a TTree/TChain:. 1. a user-readable of list of available column names returned by `df.GetColumnNames()`; 2. a larger list of all valid spellings for all column names, used to validate user inputs (this includes all names returned by `df.GetColumnNames()` plus alternative spellings such as `branchname.leafname` when `branchname == leafname`, shorthands for `friendname.branchname` as just `branchname`, etc.; 3. a list of only top-level branches that we use as the list of branches to `Snapshot` by default. Before this patch `df.GetColumnNames()` returned multiple valid spellings for the same friend branch. That can be confusing, so I'd rather (try to) return only one valid spelling for each available branch/leaf. For consistency with `Display` and to not withhold information from users, among the two valid spellings we always show the ""fully qualified friendname.branchname"". Users can still use the shorthand ""branchname"" if it's not ambiguous, as the relevant documentation now points out.; I think this solution is the sweet spot between not being surprising (to users and to RDF developers), being easy to implement without further complicating or completely refactoring the branch-retrieval logic and being somewhat backward-compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8529:608,validat,validate,608,https://root.cern,https://github.com/root-project/root/pull/8529,1,['validat'],['validate']
Security,"Bloom filter in header section of so files is well described by:; https://blogs.oracle.com/solaris/gnu-hash-elf-sections-v2; and; lld/ELF/SyntheticSections.cpp. The point is that the static linker puts bloom filter value to .gnu.hash section; in so files. We just have to read this value and compare to the; mangled_name hash that we're looking for. Bloom filter is a false posive; probability data structure, so it might say ""yes"" to library which; ""doesn't"" contain mangled_name, but it won't say ""no"" to library which; ""do"" contain mangled_name. Modules W/O this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.03 seconds; (TFile *) 0x562b37a14fe0; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.362307 seconds; sys time = 0.039741 seconds; res memory = 278.215 Mbytes; vir memory = 448.973 Mbytes; ```. Modules With this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.05 seconds Cpu Time = 0.05 seconds; (TFile *) 0x564410677780; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.356471 seconds; sys time = 0.079519 seconds; res memory = 266.73 Mbytes; vir memory = 423.59 Mbytes; ```. This difference become bigger when we need to lookup more libraries in; experiments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2131:103,hash,hash-elf-sections-,103,https://root.cern,https://github.com/root-project/root/pull/2131,3,['hash'],"['hash', 'hash-elf-sections-']"
Security,"Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo<double>)) would return; whatever was registered *last*. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences uin the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12480:221,access,accessed,221,https://root.cern,https://github.com/root-project/root/pull/12480,1,['access'],['accessed']
Security,"Boundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:2089,validat,validated,2089,https://root.cern,https://github.com/root-project/root/pull/16442,1,['validat'],['validated']
Security,"Bring down the number of address sanitizer failures to ~ 36. In detail:; - Add use-after-scope checks for clang builds.; - Disable new/delete and malloc/free consistency checks.; Since interpreted code cannot be instrumented, address sanitizer cannot; check whether memory is managed consistently.; (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.); - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs.; - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660:33,sanitiz,sanitizer,33,https://root.cern,https://github.com/root-project/root/pull/5660,4,['sanitiz'],['sanitizer']
Security,Browser will read all data and all scripts from HTML file directly - ; no need to manage access to file system. Make more robust batch mode of web canvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16643:89,access,access,89,https://root.cern,https://github.com/root-project/root/pull/16643,1,['access'],['access']
Security,Build option for Address Sanitizer is broken,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7968:25,Sanitiz,Sanitizer,25,https://root.cern,https://github.com/root-project/root/issues/7968,1,['Sanitiz'],['Sanitizer']
Security,"Bumps [path-parse](https://github.com/jbgutierrez/path-parse) from 1.0.6 to 1.0.7.; <details>; <summary>Commits</summary>; <ul>; <li>See full diff in <a href=""https://github.com/jbgutierrez/path-parse/commits/v1.0.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=path-parse&package-manager=npm_and_yarn&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:511,secur,security-vulnerabilities,511,https://root.cern,https://github.com/root-project/root/pull/11863,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"By default, libraries didn't have .gnu.hash section when compiled by old; compilers like gcc6. We need .gnu.hash section for bloomfilter to; quickly check symbols in the given library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2204:39,hash,hash,39,https://root.cern,https://github.com/root-project/root/pull/2204,2,['hash'],['hash']
Security,"By leveraging std::max_align_t, insure that the return addressed (offset-ed; compared to the address allocated by TStorage::ObjectAlloc) is still well; aligned. In https://root-forum.cern.ch/t/libnew-so-and-tcanvas/51039/8, executing; in rootn.exe:. TMapFile *mf=TMapFile::Create(""test.map"",""recreate""); TH1 *h=new TH1F(""test"",""test"",100,-5,5); h->Fill (0); h->Draw(). led to a segmentation fault in. during the execution of:. => 0x00007ffff2a62a12 <+162>:	movaps %xmm0,0x10(%r12). with an address that was ending in '8'. When allocating; the TMethodCall, the address returned was aligned on a 16 bit; boundary but the memory counting over-allocating was shifting; the address by 'only' 8 bits, leading to a mis-aligned access; by this vector memcpy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11172:720,access,access,720,https://root.cern,https://github.com/root-project/root/pull/11172,1,['access'],['access']
Security,"C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]; 17) ""Non-static data members of a (non-union) class with the same access control; (Clause 11) are allocated so that later members have higher addresses within a; class object. The order of allocation of non-static data members with different; access control is unspecified (Clause 11). Implementation alignment requirements; might cause two adjacent members not to be allocated immediately after each; other; so might requirements for space for managing virtual functions (10.3) and; virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be; continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/570:149,access,access,149,https://root.cern,https://github.com/root-project/root/pull/570,2,['access'],['access']
Security,"C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4540:696,integrity,integrity,696,https://root.cern,https://github.com/root-project/root/pull/4540,1,['integrity'],['integrity']
Security,C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-securi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:11217,secur,security,11217,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"CXXRecordDecls will synthesize special functions through lookup, but; do not expose them as part of the DeclContext iteration. Synthesize them,; and inject them into the iteration of TClingMethodInfo. This is especially; needed for modules which aggressively prune these special functions, relying; on DefinitionData instead. This also fixes roottest/root/meta/runMemberComments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5036:77,expose,expose,77,https://root.cern,https://github.com/root-project/root/pull/5036,2,"['expose', 'inject']","['expose', 'inject']"
Security,"Caches and precomputes data for this calculation, resulting in a; much more cache friendly access pattern. Leads to increased memory; usage during optimisation, which is subsequently released.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/443:91,access,access,91,https://root.cern,https://github.com/root-project/root/pull/443,1,['access'],['access']
Security,Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:47918,secur,security,47918,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is ins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:36562,secur,security,36562,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:37218,secur,security,37218,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:37874,secur,security,37874,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kFloat16_t:' at line 180 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:180; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:181:35: warning: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:59328,Access,Access,59328,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kShort_t:' at line 175 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_short' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:175; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:176:35: warning: Access to field 's_int' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:50850,Access,Access,50850,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"Calling `RooCmdArg::take` in `RooGlobalFunc.h` header can cause linker; errors, because it accesses a static data member. That's unsupported; across DLL boundaries on Windows. This should fix the Windows 10 test errors that appeard after #8416.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8437:91,access,accesses,91,https://root.cern,https://github.com/root-project/root/pull/8437,1,['access'],['accesses']
Security,Ccache has an issue reading the config file on some Linux distros when using an invalid kerberos ticket. For some reason it will attempt to access a ccache config file in the home directory which it does does not have permission to do causing ccache to exit. Approach suggested by @dpiparo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/429:140,access,access,140,https://root.cern,https://github.com/root-project/root/pull/429,1,['access'],['access']
Security,"Change logic how sub-elements in classes like `THStack` or `TMultiGraph` are handled.; Before was tried to disentangle them already on server side - to get direct access to object id (hashed object pointer).; But this made difficult to correctly work with such composed objects on client side. . Therefore now such objects remain as is and one provides special referencing methods to get access to such objects ; via suffixes in object id. Like if THStack has id `123456`, then first histogram in stack will have id `123456#hist_1`.; And X axis of such histogram will be referenced as `123456#hist_1#x`. Such logic used on client side to get context menus; for the objects and execute some methods. Correspondent update in JSROOT with several other fixes. Adjust two tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14040:163,access,access,163,https://root.cern,https://github.com/root-project/root/pull/14040,3,"['access', 'hash']","['access', 'hashed']"
Security,"Checksum is now excluded from the on-disk representation and it's not; stored in the anchor. This allows to leverage the ROOT I/O machinery for; schema evolution rather than having to rely entirely on custom code in; RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4; will be preserved for a while for easing the transition. Support for; version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15553:0,Checksum,Checksum,0,https://root.cern,https://github.com/root-project/root/pull/15553,1,['Checksum'],['Checksum']
Security,"Clang 18 changed the name mangling of function templates, see https://releases.llvm.org/18.1.0/tools/clang/docs/ReleaseNotes.html#c-specific-potentially-breaking-changes. The first mentioned case is ""When a template parameter in a function template depends on a previous template parameter"", for example:; ```; struct A {; template <typename T, std::enable_if_t<std::is_integral_v<T>, int> = 0>; void Member(T p) {}; };. template void A::Member(int);; ```. With Clang < 18 and current versions of GCC, this will mangle to `_ZN1A6MemberIiLi0EEEvT_`, but Clang 18 and later will mangle it to `_ZN1A6MemberIiTnNSt9enable_ifIXsr3stdE13is_integral_vIT_EEiE4typeELi0EEEvS2_` (unless reverted for compatibility with `-fclang-abi-compat=17`). For ROOT's use of Cling, this poses a bidirectional problem:; * If building current master with Clang 18, the compiler will, by default, mangle according to the new rules. At runtime, Cling based on LLVM/Clang 16 will generate the old name, but that symbol cannot be found in the shared library.; * Conversely, in the current attempt to upgrade to LLVM/Clang 18, the opposite situation will happen when building with an ""older"" compiler so the shared library has the old name. In both cases, a failure of `tutorial-tmva-tmva103_Application` can be observed, when Cling cannot find the symbol. Unfortunately, it is not easily possible to detect which symbol names are in the shared library because it depends on the host compiler and configuration. Furthermore, with the current LLVM/Clang 16, we do not have access to the new mangling. Finally, it is unclear if generating the template instantiations in question actually takes up significant time during compilation. As such, the best approach in the current situation is to remove the `extern template` declarations and let the compiler / Cling re-generate them as needed. FYI @devajithvs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176:1543,access,access,1543,https://root.cern,https://github.com/root-project/root/pull/16176,1,['access'],['access']
Security,Classes with the basic functionality for k-fold cross-validation and hyper parameter optimisation have been added. Also there were some changes made to the dataloader to allow for the splitting of the input dataset into k-folds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/245:54,validat,validation,54,https://root.cern,https://github.com/root-project/root/pull/245,1,['validat'],['validation']
Security,"Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the; docker images via the `requirements.txt`. However, this will only have a; delayed effect until the images are re-built. Therefore, we can't; validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be; opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything.; The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:; https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15512:265,validat,validate,265,https://root.cern,https://github.com/root-project/root/pull/15512,1,['validat'],['validate']
Security,"Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12128:85,sanitiz,sanitized,85,https://root.cern,https://github.com/root-project/root/pull/12128,3,['sanitiz'],"['sanitized', 'sanitizer']"
Security,"Common.targets(205,5): error MSB4018: at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.File.InternalWriteAllText(String path, String c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:1871,access,access,1871,https://root.cern,https://github.com/root-project/root/pull/10247,1,['access'],['access']
Security,"Connection id can be arbitrary unsigned integer; Making problem with lonpoll engine, where id produced as hash value",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9826:106,hash,hash,106,https://root.cern,https://github.com/root-project/root/pull/9826,1,['hash'],['hash']
Security,"Could not find any duplicate. ### Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:866,hash,hash,866,https://root.cern,https://github.com/root-project/root/issues/10877,1,['hash'],['hash']
Security,Create SECURITY.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5298:7,SECUR,SECURITY,7,https://root.cern,https://github.com/root-project/root/pull/5298,1,['SECUR'],['SECURITY']
Security,"Create` does not work to the same extent as directly templated fields:; ```cpp; // works ; auto ulong_field = RField<unsigned long>(""ulong""); ; EXPECT_STREQ(""std::uint64_t"", ulong_field.GetType().c_str());; // throws runtime exception; auto other_ulong = RFieldBase::Create(""other ulong"", ""unsigned long"").Unwrap();; ```; ```; C++ exception with description ""Field other ulong has unknown type unsigned long (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```; Typedef / type alias fields are also an issue:; ```cpp; // works; auto str_size_field = RField<std::string::size_type>(""str_size"");; // throws exception; auto other_str_size = RFieldBase::Create(""str_size"", ""std::string::size_type"").Unwrap();; ```; ```; C++ exception with description ""Field str_size has unknown type std::string::size_type (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```; This has implications for user-defined classes, because `RFieldBase::Create` is used to initialize subfields:; ```cpp; struct CustomStruct {; unsigned long ul;; };; // ... ; auto class_field = RField<CustomStruct>(""custom_struct"");; ```; ```; C++ exception with description ""Field ul has unknown type unsigned long (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```. ### Additional context; Related issue #7861 ; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7875:1210,access,access,1210,https://root.cern,https://github.com/root-project/root/issues/7875,2,['access'],['access']
Security,Cross-validation and HyperParameterOptimisation in TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/245:6,validat,validation,6,https://root.cern,https://github.com/root-project/root/pull/245,1,['validat'],['validation']
Security,"Current behavior:. ```; root [0] TFile f(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root""); Error in <TFile::TFile>: file /eos/root-eos/benchmark/Run2012B_SingleMu.root does not exist; (TFile &) Name: /eos/root-eos/benchmark/Run2012B_SingleMu.root Title:; ```. Desirable behavior:. ```; root [0] TFile f(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root""); Error in <TFile::TFile>: please use TFile::Open to access remote files:; auto f = std::unique_ptr<TFile>{TFile::Open(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root"")} ; (TFile &) Name: /eos/root-eos/benchmark/Run2012B_SingleMu.root Title:; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10039:456,access,access,456,https://root.cern,https://github.com/root-project/root/issues/10039,1,['access'],['access']
Security,"Current state:; - the normalized name continues to remove `std::`; - it injects using declarations for the ""most common"" stdlib identifiers; - this PR adds `std::` where ""needed"", to the normalized name, to make identifiers ""compilable"" (in dictionary source). The last point requires to have an authoritative list of ""things in the std namespace"", to prepend `std::` to them. This does not scale - any stdlib implementation might have any non-public identifier that might be needed also for public types, e.g. some libstdc++ have `std::thread::id` as type alias to `std::__thread_id`. Alternatively, this PR could implement a ""if lookup fails, try again with prepending `std::`"". This is an issue for types such as `foo<bar, baz<boo,boz>>` where either any type must be tested for std-ization separately or all possible permutations (`std::foo<bar, baz<boo,boz>>`, `foo<std::bar, baz<boo,boz>>`,`std::foo<std::bar, baz<boo,boz>>`...) must be tried.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027:72,inject,injects,72,https://root.cern,https://github.com/root-project/root/pull/11027,1,['inject'],['injects']
Security,"Currently if we compile this test we get ld warning messages like this:. ```; ld: direct access in function ... to global weak symbol. This was likely; caused by different translation units being compiled with different; visibility settings.; ```. This seems to be caused by the fact that visibility=hidden is spreading; from the parent directory to the test directory, even though it should; only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a; per subdirectory basis, we just move the code for handling the source; code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/644:89,access,access,89,https://root.cern,https://github.com/root-project/root/pull/644,1,['access'],['access']
Security,"Currently, some sections of TFile::ReadProcessID are only protected; from concurrent access if Internal::IsParTreeProcessingEnabled(); is true. The only entity that enables ParTreeProcessing in ROOT; is TTreeProcessorMT::Process. With this patch, concurrent access to TFile::ReadProcessID is always protected. Rationale: if TTreeProcessorMT::Process needs that protection, everyone needs it. Note that `TParTreeProcessing` is unused after this change, so if you agree the change can go in, I'll add a commit that removes `TParTreeProcessing` from ROOT. If you _don't_ agree the change can go in: why does `TTreeProcessorMT::Process` need this protection but other usecases do not (note that `TParTreeProcessing` is in `ROOT::Internal`, so we do not expect users to activate these locks)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288:85,access,access,85,https://root.cern,https://github.com/root-project/root/pull/5288,2,['access'],['access']
Security,DEFoam.cxx:325; 16: Loop condition is false. Execution continues on line 340 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:325; 17: Calling 'PDEFoam::InitCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:343; 18: Field 'fCells' is equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 19: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 20: Value assigned to field 'fCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:364; 21: Assuming field 'fCells' is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 22: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 23: Assuming 'i' is < field 'fNCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 24: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 25: Array access (via field 'fCells') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:370; /opt/root_src/tmva/tmva/src/PDEFoam.cxx:397:11: warning: Array access (via field 'fCells') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fPseRan' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 2: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 3: Assuming field 'fDistr' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 4: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 5: Assuming field 'fDim' is not equal to 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 6: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 7: Field 'fRvec' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 8: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 9: Assuming field 'fDim' is <= 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:308; 10: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:308; 11: Assuming field 'fInhiDiv' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:314; 12: Taking false br,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:96623,access,access,96623,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,"Dear ROOT developers,. this Pull Request tries to address [this issue](https://root-forum.cern.ch/t/using-tfitshdu-to-read-a-table-with-arrays-as-column-elements/37867) I have opened in the ROOT forum. A limitation of the `TFITSHDU` class was its impossibility to read within columns of a FITS table containing a variable-length array. My patch adds such a possibility. I have modified the `Column` and `Cell` `struct`s adding objects necessary to read a variable-length arrays embedded in a cell. The`LoadHDU` function (fundamentally the initialiser of the `TFITSHDU` class) was modified accordingly such that this objects could be assigned. I have modified the functions dealing with printing and reading values from a table such that the occurrence of a column with variable-length arrays embedded can be properly signalled. In order not to interfere with the previous development of data handling I created a function to read within a cell for this specific case: it is called `GetTabVarLengthVectorCell`. I believe it does not make sense to read the entire column in this case (returning an array of variable-length arrays). The user is allowed to access the single cell, when attempting to use any other function (e.g. `GetTabRealVectorColumn`) to read the entire column, a warning is issued pointing him to this specific function. Last I added a tutorial in `tutorials/fitsio/FITS_tutorial8.C` with a test file illustrating the application of this case. I would kindly ask for a review,. Best. Cosimo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099:1153,access,access,1153,https://root.cern,https://github.com/root-project/root/pull/5099,1,['access'],['access']
Security,"Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:; Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309; https://its.cern.ch/jira/browse/ROOT-10593; https://its.cern.ch/jira/browse/ROOT-10284; https://its.cern.ch/jira/browse/ROOT-8828; https://its.cern.ch/jira/browse/ROOT-8538; https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:; Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645:231,inject,injection,231,https://root.cern,https://github.com/root-project/root/pull/14645,1,['inject'],['injection']
Security,"Demonstrates how to access inner fields of a complex collection. In this case, we store an `std::vector<CustomStruct>` and we read `CustomStruct.a` as an `std::vector<float>`. This capability is necessary for efficient collection access in RNTupleDS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6549:20,access,access,20,https://root.cern,https://github.com/root-project/root/pull/6549,2,['access'],['access']
Security,Disable validation of the diagnostic options when loading the C++ module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2680:8,validat,validation,8,https://root.cern,https://github.com/root-project/root/pull/2680,1,['validat'],['validation']
Security,Document RNTuple header crc32 checksum calculation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11318:30,checksum,checksum,30,https://root.cern,https://github.com/root-project/root/issues/11318,1,['checksum'],['checksum']
Security,"Don't export (expose) the '?__type_info_root_node@@3U__type_info_node@@A', this leads to the following error in some cases:; ```; MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7342:14,expose,expose,14,https://root.cern,https://github.com/root-project/root/pull/7342,1,['expose'],['expose']
Security,"During reading C++ definition data for lambda we can access; CXXRecordDecl representing lambda before we finished reading the; definition data. This can happen by reading a captured variable which is; VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,; then trying to merge redeclarable methods and accessing; enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl; ReadCXXRecordDefinition; VisitVarDecl; VisitCXXMethodDecl; mergeRedeclarable; getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6212:53,access,access,53,https://root.cern,https://github.com/root-project/root/pull/6212,2,['access'],"['access', 'accessing']"
Security,"E.g. https://github.com/root-project/root/commit/b1d5b97b7ba5435b8af3994820daebb3e4178e75 improves the situation a bit, but in the end we're still left with many unprotected (threading-wise) accesses to both `fIds` *and* its content, i.e. addition / removal of elements might happen asynchronously. There are usages in the wild of direct access to `fIds`, e.g. https://github.com/root-project/root/blob/407cb5816e819271d348dcb08f50330d59c0dd52/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1902-L1903",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6566:191,access,accesses,191,https://root.cern,https://github.com/root-project/root/issues/6566,2,['access'],"['access', 'accesses']"
Security,"EDIT: as discussed, tmate sessions might be a security breach. Let's just disable this feature for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13186:46,secur,security,46,https://root.cern,https://github.com/root-project/root/pull/13186,1,['secur'],['security']
Security,EmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case kIsEnum:' at line 110 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Control jumps to 'case kFloat_t:' at line 118 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:111; 18: Forming reference to null pointer in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:118; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:120:28: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'helper') [clang-analyzer-core.NullDereference]; 1: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 3: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 6: Calling 'TEmulatedMapProxy::ReadMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:247; 7: Assuming the condition is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapPro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:25185,Access,Access,25185,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"Every time when sub-directory items are requested, set it as `gDirectory`; This helps to directly access objects from that sub-directory in command line. Also automatically update canvas drawing if it was modified during command execution. Add newline in command output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10164:98,access,access,98,https://root.cern,https://github.com/root-project/root/pull/10164,1,['access'],['access']
Security,Example failure:. 562/1224 Test #541: tutorial-gl-gltf3 ...................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.36 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/gl/gltf3.C...; Error in <TList::Delete>: A list is accessing an object (0x7fffd1c959a0) already deleted (list name = Functions); Error in <TList::Delete>: A list is accessing an object (0x7fffd1c95750) already deleted (list name = Functions). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10310:295,access,accessing,295,https://root.cern,https://github.com/root-project/root/pull/10310,2,['access'],['accessing']
Security,"Example with TH1F, for reproducibility, but happens for any class accessed via ROOT. >>> class MyClass(ROOT.TH1F):; ... ""My Class""; ... ; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; KeyError: 'UpdateBinContent'. The variable with the KeyError is always the variable last in the list of private data members. ; This error appears on lxplus, CentOS Linux 7 (Core), gcc version 7.3.0, CXXFLAGS=-fPIC -g -O2 -std=c++17. This error DOES NOT appear on Ubuntu 20.04.1 LTS, gcc version 9.3.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6856:66,access,accessed,66,https://root.cern,https://github.com/root-project/root/issues/6856,1,['access'],['accessed']
Security,"Exception: ""checksum mismatch in RNTuple anchor"" when doing TFile::Get() on RNTuple object",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16134:12,checksum,checksum,12,https://root.cern,https://github.com/root-project/root/issues/16134,1,['checksum'],['checksum']
Security,Exclude a couple of helper scripts that call sanitized executables. Fixes #10017,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10097:45,sanitiz,sanitized,45,https://root.cern,https://github.com/root-project/root/pull/10097,1,['sanitiz'],['sanitized']
Security,"Expanding cross validation capabilities of TMVA; - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion.; - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported.; - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation.; - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1514:16,validat,validation,16,https://root.cern,https://github.com/root-project/root/pull/1514,2,['validat'],['validation']
Security,Expose Cppyy's memory policy symbols in the ROOT facade to collaborate with:; https://github.com/root-project/roottest/pull/357,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4109:0,Expose,Expose,0,https://root.cern,https://github.com/root-project/root/pull/4109,1,['Expose'],['Expose']
Security,Extend GenerateInfoForPair integrity check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6893:27,integrity,integrity,27,https://root.cern,https://github.com/root-project/root/pull/6893,1,['integrity'],['integrity']
Security,"Extend the RooDataHist tests to also validate the schema evolution; from version 5 and version 6. Version 6 is the current version, so the `dataHistv6_ref.root` reference; file was produced with ROOT master. Version 5 was used in ROOT 6.24,; which was used to produce the `dataHistv5_ref.root` reference file. The version 6 reference file is a little bit smaller than the version 5 file, as the `_realVars` member was removed with version 6. A nice aspect of the version 6 update is also that it's backwards compatible. The `initialize()` function is called in the [custom streamer](https://github.com/root-project/root/blob/v6-24-00-patches/roofit/roofitcore/src/RooDataHist.cxx#L1995) of RooDataHist, so if the `_realVars` member is missing in the ROOT file it will still be initialized. This fixes issue https://github.com/root-project/root/issues/8037.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090:37,validat,validate,37,https://root.cern,https://github.com/root-project/root/pull/8090,1,['validat'],['validate']
Security,"Extending FindLZ4 with a xxhash needed for LZ4 checksum func. and adding ""pure"" xxhash API in case standalone lz4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/935:47,checksum,checksum,47,https://root.cern,https://github.com/root-project/root/pull/935,1,['checksum'],['checksum']
Security,Extending FindLZ4.cmake with xxhash includes/library needed for LZ4 checksum functionality,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1059:68,checksum,checksum,68,https://root.cern,https://github.com/root-project/root/pull/1059,1,['checksum'],['checksum']
Security,Failure to build master branch due to xrootd SHA256 checksum mismatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10503:52,checksum,checksum,52,https://root.cern,https://github.com/root-project/root/issues/10503,1,['checksum'],['checksum']
Security,Filter doesn't display command line option `-js` and `-nodraw` in the description anymore. Tutorials now use `gROOT->GetTutorialsDir()` to access tutorial files. converttonotebooks now displays an error message that is picked up by jenkins when nbconvert fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/209:139,access,access,139,https://root.cern,https://github.com/root-project/root/pull/209,1,['access'],['access']
Security,First CPU implementation of HashedNets compression algorithm for DNNs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/220:28,Hash,HashedNets,28,https://root.cern,https://github.com/root-project/root/pull/220,1,['Hash'],['HashedNets']
Security,"First reported on the forum at https://root-forum.cern.ch/t/problem-with-type-conversion-for-lorentz-vector/53639 . Minimal reproducer:. ```cpp; #include <Math/Vector4D.h>; #include <ROOT/RDataFrame.hxx>. float TakeMVector(ROOT::Math::PtEtaPhiMVector &) { return 4.2; }. int main() {; ROOT::RDataFrame df(""Tree"", ""example_file.root"");. df.Define(""unused"", ""L""); // the failure disappears if this is commented out, even if ""unused"" is never used. auto dff4 = df.Define(""x"", TakeMVector, {""L""});; dff4.Max<float>(""x"").GetValue();; }; ```. with the input file at https://root-forum.cern.ch/t/problem-with-type-conversion-for-lorentz-vector/53639/3?u=eguiraud . The program errors out with:. ```; The branch L contains data of type ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >. It cannot be accessed by a TTreeReaderValue<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >>; ```. (so TTreeReaderValue cannot read a `LorentzVector<PtEtaPhiM4D<Double32_t>>` as a `LorentzVector<PtEtaPhiM4D<double>>`). The following patch by @Axel-Naumann seems to fix the problem:. ```diff; diff --git a/tree/treeplayer/src/TTreeReaderValue.cxx b/tree/treeplayer/src/TTreeReaderValue.cxx; index 2323cffee4..6d938f1b14 100644; --- a/tree/treeplayer/src/TTreeReaderValue.cxx; +++ b/tree/treeplayer/src/TTreeReaderValue.cxx; @@ -554,7 +554,8 @@ void ROOT::Internal::TTreeReaderValueBase::CreateProxy() {; auto branchActualTypeAsClass = dynamic_cast<TClass*>(branchActualType);; auto inheritance = dictAsClass && branchActualTypeAsClass && branchActualTypeAsClass->InheritsFrom(dictAsClass);. - if (fDict != branchActualType && !inheritance) {; + if (fDict != branchActualType && !inheritance; + && dictAsClass->GetTypeInfo() != branchActualTypeAsClass->GetTypeInfo()) {; TDataType *dictdt = dynamic_cast<TDataType*>(fDict);; TDataType *actualdt = dynamic_cast<TDataType*>(branchActualType);; bool complainAboutMismatch = true;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12334:806,access,accessed,806,https://root.cern,https://github.com/root-project/root/issues/12334,1,['access'],['accessed']
Security,"Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12846:168,hash,hashing,168,https://root.cern,https://github.com/root-project/root/pull/12846,2,['hash'],['hashing']
Security,"Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13842:168,hash,hashing,168,https://root.cern,https://github.com/root-project/root/pull/13842,1,['hash'],['hashing']
Security,"Fix ROOT-9694, GetStreamerInfoList infinite recursion. Commit b6523df introduces the infinite recursion whenever; there was a problem reading the StreamerInfo record and; introduces a useless attempt to read from file in the case; of a class derived from TFile that overrid GetStreamerInfoList. To allow for increase run-time performance and increase thread; scalability the override ability of TFile::GetStreamerInfoList; is replaced by an override of TFile::GetStreamerInfoListImp with; updated return type and arguments. If a class override; TFile::GetStreamerInfoList you will now see a compilation error like:; {code}; /opt/build/root_builds/rootcling.cmake/include/TSQLFile.h:225:19: error: declaration of 'GetStreamerInfoList' overrides a 'final' function; virtual TList *GetStreamerInfoList();; ^; /opt/build/root_builds/rootcling.cmake/include/TFile.h:231:24: note: overridden virtual function is here; virtual TList *GetStreamerInfoList() final; // Note: to override behavior, please override GetStreamerInfoListImpl; ^; {code}. Instead you need to override the protected method:. {code}; InfoListRet GetStreamerInfoListImpl(bool lookupSICache);; {code}. which can be implemented as; {code}; InfoListRet DerivedClass::GetStreamerInfoListImpl(bool /*lookupSICache*/) {; ROOT::Internal::RConcurrentHashColl::HashValue hash;; TList *infolist = nullptr;; //; // Body of the former Derived::GetStreamerInfoList with the; // return statement replaced with something like:. // The second element indicates success or failure of the load.; // (i.e. {nullptr, 0, hash} indicates the list has already been processed; // {nullptr, 1, hash} indicates the list failed to be loaded; return {infolist, 0, hash};; }; {code}. See TFile::GetStreamerInfoListImpl implementation for an example on how to implement the caching.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2725:1316,Hash,HashValue,1316,https://root.cern,https://github.com/root-project/root/pull/2725,5,"['Hash', 'hash']","['HashValue', 'hash']"
Security,"Fix a debug assertion failure `can't dereference value-initialized vector iterator` ; With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13322:402,access,access,402,https://root.cern,https://github.com/root-project/root/pull/13322,1,['access'],['access']
Security,"Fix a few minor things and pave the way to integrate cutflow reports in TDataFrame. * TDFAction ctor can take a shared_ptr instead of a weak_ptr: TDFAction; can safely assume that the previous node in the chain still exists when it is; being constructed; * fPrevData is now a reference instead of a raw pointer in all classes:; a reference better indicates that we always expect fPrevData to be a valid; node of the chain. In fact, the only case when this condition might not be; met is when the TDataFrameImpl object goes out-of-scope before other nodes; of the chain; we detect this case and throw before trying to access; invalid fPrevData pointers/references.; * use `Long64_t` instead of `int` for all entry variables",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/333:617,access,access,617,https://root.cern,https://github.com/root-project/root/pull/333,1,['access'],['access']
Security,Fix access violation with df017_vecOpsHEP.C on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10443:4,access,access,4,https://root.cern,https://github.com/root-project/root/pull/10443,1,['access'],['access']
Security,Fix an access violation error when using `fscanf` on Windows 64 bit:; ```; 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx...; 243: **********************************************************************; 243: * Starting Graphics - S T R E S S suite *; 243: **********************************************************************; 243: * Starting Basic Graphics - S T R E S S *; 243: **********************************************************************; 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):; 243: error code: Access violation; 243:; 243:; 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9959:7,access,access,7,https://root.cern,https://github.com/root-project/root/pull/9959,2,"['Access', 'access']","['Access', 'access']"
Security,Fix in TEntryList - check fCurrent memeber before access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5234:50,access,access,50,https://root.cern,https://github.com/root-project/root/pull/5234,1,['access'],['access']
Security,Fix invalid memory access in TRandom3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135:19,access,access,19,https://root.cern,https://github.com/root-project/root/pull/14135,1,['access'],['access']
Security,"Fix the following kind of error when building tests (and using rootcling) in parallel on Windows:; ```; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: The ""GetOutOfDateItems"" task failed unexpectedly. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: System.IO.IOException: The process cannot access the file 'C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\x64\Release\X86CommonTableGen\X86Commo.12E1F1A7.tlog\CustomBuild.command.1.tlog' because it is being used by another process. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:559,access,access,559,https://root.cern,https://github.com/root-project/root/pull/10247,1,['access'],['access']
Security,Fix to PR7165 Remove inline access to static member of TGeoManager,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7191:28,access,access,28,https://root.cern,https://github.com/root-project/root/pull/7191,2,['access'],['access']
Security,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2598,1,['inject'],['injected']
Security,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2582,1,['inject'],['injected']
Security,Fix typo in the tmva cross validation evaluation code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/255:27,validat,validation,27,https://root.cern,https://github.com/root-project/root/pull/255,2,['validat'],['validation']
Security,Fix warning in asimage about redefinition of TObject::Hash(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12796:54,Hash,Hash,54,https://root.cern,https://github.com/root-project/root/pull/12796,1,['Hash'],['Hash']
Security,Fix xrootd 5.3.1 sha256 hash for builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:24,hash,hash,24,https://root.cern,https://github.com/root-project/root/pull/9103,1,['hash'],['hash']
Security,"Fixed bug in filter, changed how tutorials access files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/209:43,access,access,43,https://root.cern,https://github.com/root-project/root/pull/209,1,['access'],['access']
Security,Fixes following reproducer in https://sft.its.cern.ch/jira/browse/ROOT-10830 :; ```python; >>> v = cppyy.gbl.std.vector[cppyy.gbl.std.string](); >>> v.push_back('a'); >>> v.push_back('b'); >>> v.push_back('c'); >>> set(v) == set('abc'); True; ```. Hash std::string and str of the same char sequence to the same value. From:; https://bitbucket.org/wlav/cpycppyy/commits/66ad2fca300b4343ce17144b448725fd9e260e21,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7071:248,Hash,Hash,248,https://root.cern,https://github.com/root-project/root/pull/7071,1,['Hash'],['Hash']
Security,"Fixes issue #8284 where TKeys with the same name as the requested RNTuple; would be attempted to be parsed as an RNTuple, leading to internal; parser assert failures later on. e.g.; ```cpp; // actually holds a TTree named ""Events""; auto reader = RNTupleReader::Open(""Events"", ""test80X_NANO.root"");; ```. Internal error before: ; ```; Fatal: nread == nbytes violated at line 1011 of `~/root/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; ```. Exception thrown after: ; ```; C++ exception with description ""no RNTuple named 'Events' in file 'test80X_NANO.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8285:576,access,access,576,https://root.cern,https://github.com/root-project/root/pull/8285,1,['access'],['access']
Security,Fixing includes for classic build LZ4 after adding new checksum feature,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/927:55,checksum,checksum,55,https://root.cern,https://github.com/root-project/root/pull/927,1,['checksum'],['checksum']
Security,"For custom classes with dictionaries, store the streamer checksum in the field metadata. The checksum is used to apply read rules that use checksums to identify the source class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16060:57,checksum,checksum,57,https://root.cern,https://github.com/root-project/root/pull/16060,3,['checksum'],"['checksum', 'checksums']"
Security,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1334,validat,validated,1334,https://root.cern,https://github.com/root-project/root/pull/16750,1,['validat'],['validated']
Security,"For security reasons this option is off by default. . Only when desired `win.SetUseCurrentDir(true)` should be invoked. ; It happens automatically when ""localapp."" namespace configured as main ui5 panel for the window. Required for `tutorials/webgui/panel` example.; Will be required for local fonts or special apps in eve7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15867:4,secur,security,4,https://root.cern,https://github.com/root-project/root/pull/15867,1,['secur'],['security']
Security,"For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a; fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became; clear gradually how important this step is, as many changes need to be; done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:574,expose,exposes,574,https://root.cern,https://github.com/root-project/root/pull/12079,1,['expose'],['exposes']
Security,"From @henryiii :. > ROOT can't pass homebrew's audit any more because it is now injecting `-flat_namespace`. Flat namespaces have been deprecated since the move to Intel. I believe this was done due to `-undefined dynamic_lookup` producing a warning - Apple plans to add something to replace this in the future, but it's not the old `-flat_namespace`. See [Homebrew/homebrew-core#114543 (comment)](https://github.com/Homebrew/homebrew-core/pull/114543#issuecomment-1330719444); > Flat namespace makes major changes to the layout, is more deprecated than dynamic_lookup, and isn't supposed to even work in conda-forge. See also https://github.com/pybind/pybind11/pull/4301 .; > `-undefined dynamic_lookup` does silence the linker on missing symbols, that's what it's for. The problem is that the method it uses is deprecated, producing a warning (and already broken in iOS) `-flat_namespace` doesn't just silence the linker, it changes the binary layout for every symbol. You could always just silence the warning `-Wl,-w` or `-Wl,-no_fixup_chains`; this will eventually break, but is less deprecated than `-flat_namespace`.; > Apple's official statement is basically ""live with the warning for now, we'll find a way to not break all CPython extensions eventually"" from what I gather.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11937:47,audit,audit,47,https://root.cern,https://github.com/root-project/root/issues/11937,2,"['audit', 'inject']","['audit', 'injecting']"
Security,From Axel: Short-circuit for TObject-derived classes: they have Streamer() and Hash().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1837:79,Hash,Hash,79,https://root.cern,https://github.com/root-project/root/pull/1837,1,['Hash'],['Hash']
Security,"From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa; did not provide any API to access scaling-related information.; After they have introduced this API and released retina MacBooks, our GUI; rendering was just fine and worked out of box, our 'pixmap-based' graphics; was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting; the corresponding scaling CTM on the bitmap context. It appears, all these; years we did not know how expensive this scaling transformation is.; As was noticed recently, even a relatively simple poly-line consisting; of 25K segments takes _forever_ to draw - apparently Quartz is working; hard doing hell knows what under the hood (disabling anti-aliasing does not change; anything, for example). This patch is a possible fix, the proper solution would require a serious redesign; in many places (starting from TVirtualX and TCanvas) - for now we simply cancel; the scaling transformation when rendering potentially complex geometry and scale; coordinates manually instead. A macro reproducing this problem on retina display would be:. {; int n = 5000;; double xx[n];; double yy[n];; TRandom r;; for (int i=0; i<n; i++) {; xx[i] = r.Gaus(-1,0.5);; yy[i] = r.Gaus(1,1.5);; }; TGraph *g = new TGraph(n, xx,yy);; g->Draw(""al"");; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1177:110,access,access,110,https://root.cern,https://github.com/root-project/root/pull/1177,1,['access'],['access']
Security,"Fully implement the `Offset(""bin"")` feature also for RooDataSet, both; with CPU/CUDA BatchMode and the legacy tests statistics. This is done now by introducing a new element in the computation graph:; an ""offset pdf"" that is created as a RooHistPdf from the observed data,; and it is used to get the counterterm in each bin. It was validated with the `rf614` tutorial that this binwise offsetting; is inteed fixing the convergense problems that the simple offsetting by; the initial NLL value can't fix. Closes https://github.com/root-project/root/issues/11965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13665:332,validat,validated,332,https://root.cern,https://github.com/root-project/root/pull/13665,1,['validat'],['validated']
Security,"Functions and classes that are outdated, but will probably never be removed, can be flagged with deprecation warnings at the discretion of the user. This was a request by the experiments during the Sarajevo workshop.; The macros would be used as follows:; ```; class BetterNotUse {; } R__SUGGEST_CLASS(""NewerClass"");; ```; ```; TIterator* createIterator() const; R__SUGGEST_FUNCTION(""begin(), end() or range-based for loops.""); {; return new RooLinkedListIter(makeLegacyIterator());; }; ```; Since this uses class/function attributes, these need to be put *after* the class body and *before* the function body. Defining `R__SUGGEST_FASTER_FUNCTIONS`, the compiler will e.g. issue:; ```; root-src/roofit/roofitcore/src/RooAbsCollection.cxx:725:21: warning: 'fwdIterator' is deprecated:; This function has faster/more secure alternatives:; begin(), end() and range-based for loops. [-Wdeprecated-declarations]; RooFIter iter = fwdIterator() ;; ^; ```; With `R__SUGGEST_FASTER_CLASSES`, one gets:; ```; /home/shageboe/root-dbg/include/RooStats/RooStatsUtils.h:64:7: warning: 'RooLinkedListIter' is deprecated: This class has a faster/more secure alternative: The ROOFIter is faster. [-Wdeprecated-declarations]; RooLinkedListIter it = set->iterator();; ```; PS: Names are totally up for debate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100:816,secur,secure,816,https://root.cern,https://github.com/root-project/root/pull/3100,2,['secur'],['secure']
Security,"Fwd decls from rootmap files were injected to ROOT at the startup time.; However with modules we don't need any foward decls as we're preloading; all modules. Our future plan is to remove rootmap files as a whole, but we still need; to support more features (see 2380). So for now we can remove what we; are not using. *edit This patch also contains adding fHasCxxModule as a private member. This improves startup memory by 10 mbytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2592:34,inject,injected,34,https://root.cern,https://github.com/root-project/root/pull/2592,1,['inject'],['injected']
Security,"Garbage access warnings and more.; (ROOT master of today, with xrootd off). ```; /opt/root_src/core/base/inc/TStorage.h:119:19: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Assuming field 'fList' is non-null in /opt/root_src/core/base/src/TFileCollection.cxx:870; 2: Left side of '||' is false in /opt/root_src/core/base/src/TFileCollection.cxx:870; 3: Assuming the condition is false in /opt/root_src/core/base/src/TFileCollection.cxx:870; 4: Taking false branch in /opt/root_src/core/base/src/TFileCollection.cxx:870; 5: Assuming 'exclude' is non-null in /opt/root_src/core/base/src/TFileCollection.cxx:877; 6: Left side of '&&' is true in /opt/root_src/core/base/src/TFileCollection.cxx:877; 7: Assuming the condition is true in /opt/root_src/core/base/src/TFileCollection.cxx:877; 8: Taking true branch in /opt/root_src/core/base/src/TFileCollection.cxx:877; 9: Calling default constructor for 'TUri' in /opt/root_src/core/base/src/TFileCollection.cxx:880; 10: Calling default constructor for 'TObject' in /opt/root_src/core/base/inc/TUri.h:73; 11: Calling 'TStorage::UpdateIsOnHeap' in /opt/root_src/core/base/inc/TObject.h:245; 12: Calling 'TStorage::FilledByObjectAlloc' in /opt/root_src/core/base/inc/TStorage.h:132; 13: The left operand of '==' is a garbage value in /opt/root_src/core/base/inc/TStorage.h:119; /opt/root_src/core/base/inc/TStorage.h:119:19: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Calling default constructor for 'TUri' in /opt/root_src/core/base/src/TUri.cxx:1124; 2: Calling default constructor for 'TObject' in /opt/root_src/core/base/inc/TUri.h:73; 3: Calling 'TStorage::UpdateIsOnHeap' in /opt/root_src/core/base/inc/TObject.h:245; 4: Calling 'TStorage::FilledByObjectAlloc' in /opt/root_src/core/base/inc/TStorage.h:132; 5: The left operand of '==' is a garbage value in /opt/root_src/core/base/inc/TStorage.h:119; /opt/root_src/core/ba",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:8,access,access,8,https://root.cern,https://github.com/root-project/root/issues/7412,1,['access'],['access']
Security,"GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12175:61,hash,hash,61,https://root.cern,https://github.com/root-project/root/pull/12175,1,['hash'],['hash']
Security,"GitHub repacks archives from time to time, which changes the hash. (cherry picked from commit 43003424171111fb2d8ec6fd182001c57ed6901a). Backport of https://github.com/root-project/root/pull/12175",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12176:61,hash,hash,61,https://root.cern,https://github.com/root-project/root/pull/12176,1,['hash'],['hash']
Security,"Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id); Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4810:155,access,accessed,155,https://root.cern,https://github.com/root-project/root/pull/4810,1,['access'],['accessed']
Security,"Given the following function declared to ROOT and accessed via a Python proxy:. ```; int foo(int x);; ```. Currently accessing its `func_doc`, which in turn calls `CPPMethod::GetPrototype`, gives:. 'int ::foo(int x)'. The extra set of '::' can be avoided by checking that the function is not declared inside a namespace. Note: this is a check, may be not worthy in the end if we find places that rely on those extra ""::"" being present",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11413:50,access,accessed,50,https://root.cern,https://github.com/root-project/root/pull/11413,2,['access'],"['accessed', 'accessing']"
Security,"Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14604:99,access,accessing,99,https://root.cern,https://github.com/root-project/root/pull/14604,1,['access'],['accessing']
Security,Good hash,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1144:5,hash,hash,5,https://root.cern,https://github.com/root-project/root/pull/1144,1,['hash'],['hash']
Security,"HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1499:220,checksum,checksums,220,https://root.cern,https://github.com/root-project/root/pull/1499,1,['checksum'],['checksums']
Security,"Handle line and fill attribute from individual bins ; Support ""p"" and ""*"" for markers drawing; Switch off color draw optimization. Now JSROOT should be very close to ROOT graphics. Other changes in JSROOT as:; - use localStorage instead of cookies (not exposed to network); - support URL options export when using ""Show in new tab"" menu command",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15000:253,expose,exposed,253,https://root.cern,https://github.com/root-project/root/pull/15000,1,['expose'],['exposed']
Security,"Hello,. this is a rather small, but I think very useful addition.; One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis.; However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,; Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4830:1320,checksum,checksum,1320,https://root.cern,https://github.com/root-project/root/pull/4830,1,['checksum'],['checksum']
Security,"Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with; deterministic checksum that is not dependent on timestamp or hostname or; anything: Create a file with the same content twice on different; machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:; The file is created in one place at one time and not incrementally over; a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4083:400,checksum,checksum,400,https://root.cern,https://github.com/root-project/root/pull/4083,5,['checksum'],"['checksum', 'checksums']"
Security,"Hi `root-project/root`!. This is a one-off automatically generated pull request from LGTM.com :robot:. You might have heard that we’ve integrated LGTM’s underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull req",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:282,secur,security,282,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,"Hi please check here:; https://root-forum.cern.ch/t/6-24-00-does-not-complile-on-redhat-8-3/45161. details:. Hello,; I’m running into problems compiling root 6.24.00:. $ cmake -Dclad=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j8. …; [ 76%] Linking CXX static library …/…/…/…/lib/libclingInterpreter.a; [ 76%] Built target clingInterpreter; Scanning dependencies of target CLING; [ 76%] Built target CLING; Scanning dependencies of target LLVMRES; [ 76%] Copying LLVM resource and header files; [ 76%] Built target LLVMRES; (stucks…). $ cmake --build . --install; [ 0%] Built target AFTERIMAGE; [ 0%] Built target OPENUI5; [ 0%] Built target LZMA; [ 0%] Performing download step (download, verify and extract) for ‘VDT’; (stucks). seems that vdt uses network access, which I do not have (not mentioned in the docs).; I think I do not need it anyhow…. so again:; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . --install; …; [ 79%] Generating G__Thread.cxx, …/…/lib/Thread.pcm; [ 79%] Generating G__forward_listDict.cxx, …/…/lib/libforward_listDict.rootmap; [ 79%] Generating G__vectorDict.cxx, …/…/lib/libvectorDict.rootmap; In file included from input_line_7:21:; /srv/ussapc/home/ussapc/sw/root_build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: ‘tbb/enumerable_thread_specific.h’ file not found; #include “tbb/enumerable_thread_specific.h”; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error: /srv/ussapc/home/ussapc/sw/root_build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/srv/ussapc/home/ussapc/sw/root_build/lib/libThreaddb2bde6cdd_dictUmbrella.h); gmake[2]: *** [core/thread/CMakeFiles/G__Thread.dir/build.make:109: core/thread/G__Thread.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:27339: core/thread/CMakeFiles/G__Thread.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs…. I found out that tbb is required by imt, so again; $ rm -rf *; $ cmake -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292:802,access,access,802,https://root.cern,https://github.com/root-project/root/issues/8292,1,['access'],['access']
Security,"Hi,. Amazon has this concept of short-lived credentials via the ""Security Token Service"" (https://aws.amazon.com/documentation/iam/). In addition to generating the usual access and secure keys, the STS also generates a session token that needs to be used. This adds support for this. . I made fToken public instead of a do-nothing getter, but that's a trivial change if you prefer it the other way. (Also I should ask Georgios and friends to add this to davix - I didn't see it from a cursory glance at the code.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/110:65,Secur,Security,65,https://root.cern,https://github.com/root-project/root/pull/110,3,"['Secur', 'access', 'secur']","['Security', 'access', 'secure']"
Security,"Hi,. I was testing LCG_100_ATLAS_1 for root and found an issue with webdav access that is failing. I can reproduce it for LCG_100. Here is the recipe:. First, this is the code to test file access:; $ cat read_file.C ; ```; void read_file(){; const char *filename = gSystem->Getenv(""ALRB_TESTING_FILENAME"");; cout << filename << endl; . TFile *tfile = TFile::Open(filename); ; if (tfile == 0 ) {; exit(1);; };; exit(0);; }; ```. test 1: LCG_99 works:; (login to lxplus); ```; mkdir test; cd test; cp /afs/cern.ch/user/d/desilva/public/rootTest/read_file.C ./. ; source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_99 x86_64-centos7-gcc8-opt; voms-proxy-init -voms atlas; (or export X509_USER_PROXY=/tmp/x509up_u`id -u` if you have a proxy set); export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; root -b './read_file.C'; echo $?; ```. test2: LCG_100 fails:; (login to lxplus); ```; mkdir test; cd test; cp /afs/cern.ch/user/d/desilva/public/rootTest/read_file.C ./. ; source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_100 x86_64-centos7-gcc8-opt; voms-proxy-init -voms atlas; (or export X509_USER_PROXY=/tmp/x509up_u`id -u` if you have a proxy set); export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; root -b './read_file.C'; echo $?; ```. failing stdout from test2; ```; [desilva@lxplus7107 rootTest]$ source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_100 x86_64-centos7-gcc8-opt; [desilva@lxplus7107 rootTest]$ export X509_USER_PROXY=/tmp/x509up_u`id -u`; [desilva@lxplus7107 rootTest]$ which root; /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/bin/root; [desilva@lxplus7107 rootTest]$ export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; [desilva@lxplus7107 rootTest]$ root -b './read_file.C'; ---------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092:75,access,access,75,https://root.cern,https://github.com/root-project/root/issues/8092,2,['access'],['access']
Security,How to access RNTuple in a BulkIO style,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112:7,access,access,7,https://root.cern,https://github.com/root-project/root/pull/7112,1,['access'],['access']
Security,"Hub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; TClass members which are typedefs of supported RNTuple types are not being resolved to their true types during serialization, which is causing runtime errors. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Define a custom class with, e.g. a typedef'd `std::string` member intended to be serialized using rootcling and `TClass`; ```cpp; class CustomStruct { ; typedef std::string typedef_string;; typedef_string str;; };. auto classField = RField<CustomStruct>(""field"");; ```; Trying to create this field fails at run time:; ```; C++ exception with description ""Field npos has unknown type const string::size_type (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> >; ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) ; [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```; ### Setup; ROOT master; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; This is likely resolved by using `GetTrueTypeName` instead of `GetFullTypeName` here (thank you @jblomer):; https://github.com/root-project/root/blob/28f86b343f4ec280937fbbe8ecf64d9582651dcb/tree/ntuple/v7/src/RField.cxx#L550. <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7861:1326,access,access,1326,https://root.cern,https://github.com/root-project/root/issues/7861,1,['access'],['access']
Security,"I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1639:409,access,accesses,409,https://root.cern,https://github.com/root-project/root/pull/1639,1,['access'],['accesses']
Security,"I get a build failure on Ubuntu22.04 when ROOT tries to build FTGL itself. The error comes from lacking a library at the linker stage, viz. `libbrotlicommon.so`. ```; [ 51%] Linking CXX shared library ../../lib/libGraf.so; 	cd /home/graemes/tmp/root-build-nobrotli/graf2d/graf && /usr/bin/cmake -E cmake_link_script CMakeFiles/Graf.dir/link.txt --verbose=1; 	/usr/bin/c++ -fPIC -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libGraf.so -o ../../lib/libGraf.so CMakeFiles/Graf.dir/src/TArc.cxx.o CMakeFiles/Graf.dir/src/TArrow.cxx.o CMakeFiles/Graf.dir/src/TAttImage.cxx.o CMakeFiles/Graf.dir/src/TBox.cxx.o CMakeFiles/Graf.dir/src/TCandle.cxx.o CMakeFiles/Graf.dir/src/TCrown.cxx.o CMakeFiles/Graf.dir/src/TCurlyArc.cxx.o CMakeFiles/Graf.dir/src/TCurlyLine.cxx.o CMakeFiles/Graf.dir/src/TCutG.cxx.o CMakeFiles/Graf.dir/src/TDiamond.cxx.o CMakeFiles/Graf.dir/src/TEllipse.cxx.o CMakeFiles/Graf.dir/src/TFrame.cxx.o CMakeFiles/Graf.dir/src/TGaxis.cxx.o CMakeFiles/Graf.dir/src/TGraphPolar.cxx.o CMakeFiles/Graf.dir/src/TGraphPolargram.cxx.o CMakeFiles/Graf.dir/src/TGraphQQ.cxx.o CMakeFiles/Graf.dir/src/TImage.cxx.o CMakeFiles/Graf.dir/src/TLatex.cxx.o CMakeFiles/Graf.dir/src/TLegend.cxx.o CMakeFiles/Graf.dir/src/TLegendEntry.cxx.o CMakeFiles/Graf.dir/src/TLine.cxx.o CMakeFiles/Graf.dir/src/TLink.cxx.o CMakeFiles/Graf.dir/src/TMarker.cxx.o CMakeFiles/Graf.dir/src/TMathText.cxx.o CMakeFiles/Graf.dir/src/TPave.cxx.o CMakeFiles/Graf.dir/src/TPaveLabel.cxx.o CMakeFiles/Graf.dir/src/TPaveStats.cxx.o CMakeFiles/Graf.dir/src/TPaveText.cxx.o CMakeFiles/Graf.dir/src/TPavesText.cxx.o CMakeFiles/Graf.dir/src/TPie.cxx.o CMakeFiles/Graf.dir/src/TPieSlice.cxx.o CMakeFiles/Graf.dir/src/TPoints.cxx.o CMakeFiles/Graf.dir/src/TPolyLine.cxx.o CMakeFiles/Graf.dir/src/TTF.cxx.o CMakeFiles/Graf.dir/src/TText.cxx.o CMakeFiles/Graf.dir/src/TWbox.cxx.o CMakeFi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11239:540,hash,hash-style,540,https://root.cern,https://github.com/root-project/root/issues/11239,1,['hash'],['hash-style']
Security,"I just looked in the code while want to add support of TGeoTesselated to JSROOT.; Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:; * Fix potential memory access problem in new TGeoFacet; * In assign operator one should release memory before allocating new one; * `fIvert` member was not copied in assign operator; * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4923:203,access,access,203,https://root.cern,https://github.com/root-project/root/pull/4923,1,['access'],['access']
Security,"I may be missing something but I seem to be unable to compile ROOT 6.28/04 with c++14. I use. ```; cmake ../root/root-6.28.04/ -DCMAKE_CXX_VERSION=14; ```. And get the following confirmation at the end of the cmake output. ```; System Linux-3.10.0-1160.88.1.el7.x86_64; Processor 36 core Intel(R) Xeon(R) CPU E5-2695 v4 @ 2.10GHz (x86_64); Build type Release; Compiler GNU 6.3.0; Compiler flags:; C -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++14 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined -Wl,--hash-style=""both""; ```; As far as I can tell, gcc6.3.0 should have full c++14 capability. However, eventually I get the following errors:. ```; Consolidate compiler generated dependencies of target Dictgen; Consolidate compiler generated dependencies of target ClingUtils; Consolidate compiler generated dependencies of target MetaCling; [ 78%] Built target ClingUtils; [ 78%] Built target Dictgen; Consolidate compiler generated dependencies of target rootcling_stage1; [ 78%] Built target rootcling_stage1; [ 78%] Built target MetaCling; [ 78%] Generating G__Core.cxx, ../lib/Core.pcm; [ 78%] Linking CXX shared library ../../../lib/libCling.so; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; input_line_1:1:10: note: submodule of top-level module 'std' implicitly imported here; #include <new>; ^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/root-build/etc/cling/Interpreter/RuntimeUniverse.h:27:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: note: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:611,hash,hash-style,611,https://root.cern,https://github.com/root-project/root/issues/13453,1,['hash'],['hash-style']
Security,"I noticed that RooArgList doesn't handle the case where idx is negative. But also thought it would be nice to add support for use of negative numbers to access the list from the back, so it behaves like a python list in this respect. I noticed that there is nice operator[] behavior in 6.24 (uses at and throws exception) but this isn't in master???",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8174:153,access,access,153,https://root.cern,https://github.com/root-project/root/pull/8174,1,['access'],['access']
Security,"I realized we were missing a test for accessing a view out of bounds, so I added one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16789:38,access,accessing,38,https://root.cern,https://github.com/root-project/root/pull/16789,1,['access'],['accessing']
Security,"I'd like to test that issue #9020 is triggered also on our Fedora34 node, to validate #9065",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9066:77,validat,validate,77,https://root.cern,https://github.com/root-project/root/pull/9066,1,['validat'],['validate']
Security,Identifiers containing a double underscore are reserved in C++. We have to do this now because we kind of expose `__rdf` to RDataSource; implementations via the (unreleased) `#var` aliasing mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8754:106,expose,expose,106,https://root.cern,https://github.com/root-project/root/pull/8754,1,['expose'],['expose']
Security,"If a TTree contains. a branch ""v"" with a leaf ""a"", created with t.Branch(""v"", &a, ""a/I""); a branch ""w"" containing a split struct that has a datamember ""v"" with a datamember ""a"". constructing TTreeReaderValue<int>(r, ""v.a"") attaches the reader to ""w.v.a"" instead of ""v.a"". Note that in this scenario there is no way to access ""v.a"", because constructing TTreeReaderValue<int>(r, ""v"") attaches to ""w.v""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2645:318,access,access,318,https://root.cern,https://github.com/root-project/root/pull/2645,1,['access'],['access']
Security,"If specified, enforce unique key every time client connect to; web window. Once key used, it is not possible to use it again for reconnect.; If one wants to connect to window again, one should; call RWebWindow::Show() method again. Now parameter is off, but once tested - will be enabled by default.; This should significantly increase security for web applications. Fix problem with random seed for key generation . Add warning when browser on remote node is started - by checking DISPLAY variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11213:336,secur,security,336,https://root.cern,https://github.com/root-project/root/pull/11213,1,['secur'],['security']
Security,"If the method `__str__` is already defined on the C++ side, don't inject; the cling based pretty printing. Related to ROOT-10967. @etejedor You see any performance implications with the check added below? Do we trigger lookups with the `dir(...)`? Just to be sure :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6119:66,inject,inject,66,https://root.cern,https://github.com/root-project/root/pull/6119,1,['inject'],['inject']
Security,"If widget URL includes sensitive information,; one just put it into local file and start browser with such local HTML file. ; Internally its will redirect to normal http server. This is most easy way to hide secret information from the system.; Exactly this method used by Jupyter. . Now it possible to enforce unique key (single-time-token) authentication for web widgets.; In such case URL to connect web widgets always has include `?key=` parameter - which generated new every time; new URL string is requested. Attempt to connect with same key twice will fail. To support such functionality, `GetWindowUrl()` add to all web-based widgets to let use such capability also; from `RBrowser` which integrate all existing widgets together. In addition to that jupyter does, ROOT adds secret session key (after `#` symbol), which remains only on client side.; This session key together with connection key are used to create ~~MD5~~ HMAC/SHA256 checksum, which is sends to server instead as connection request. While connection request may be retried many times, new request will get new number and therefore new ~~MD5~~ HMAC checksum. Once connection is accepted - same key cannot be use for new connection, but still will be used for ~~MD5~~ HMAC packets signs. To solve main-in-the-middle problem, each data packet is signed with ~~md5~~ HMAC checksum. Each packet includes sequence counter, which also protected by ~~md5~~ HMAC checksum. Therefore even if anybody gain control over http traffic between; client and server, it only be able to observe traffic but will not be able manipulate it - as long as secret session; key is not gained by other means. Also re-submitting same packets will not be possible - while packet with; already used counter will not be accepted. HTTP sniffing can only catch connection request and try to use it faster than normal client.; But even if connection gained by sniffer - it will not be able use it. To use connection, each packet ; should be signed by ~~md5~~ H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14136:342,authenticat,authentication,342,https://root.cern,https://github.com/root-project/root/pull/14136,2,"['authenticat', 'checksum']","['authentication', 'checksum']"
Security,"If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:203,validat,validated,203,https://root.cern,https://github.com/root-project/root/pull/13538,1,['validat'],['validated']
Security,"Implements the following two improvements to views and iteration of view values. - Make the type of iteration explicit: over the events, over the values of a collection within an event, or over all the values of a field, which for a nested field can be more or less than the number of entries. - `RNTupleView` now uses automatically a field's `Map()` zero-copy access method, if such a method exists for the the field; replaces the template specializations of `RNTupleView`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5015:361,access,access,361,https://root.cern,https://github.com/root-project/root/pull/5015,1,['access'],['access']
Security,Implements writing page checksums and checksum verification on read.; Page checksums are written on `SealPage()`. They are verified on `LoadSealedPage()` and on `UnsealPage()`. Note that the page size stored in locators does not change. Pages flagged as having a checksum are serialized with additional trailing 8 bytes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15921:24,checksum,checksums,24,https://root.cern,https://github.com/root-project/root/pull/15921,4,['checksum'],"['checksum', 'checksums']"
Security,"Improve class design around `RAttrBase` classes. ; Introduce `RAttrValue<typename T>` template class to access single value from attributes.; Use it in all attributes classes and existing drawable classes. ; Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:; * `Error()`; * `Text()`; * `Marker()`; * `Bar()`; * `Line()`; * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5926:104,access,access,104,https://root.cern,https://github.com/root-project/root/pull/5926,1,['access'],['access']
Security,"In `RooLinkedList::find()`, the `operator[]` of `unordered_map` was used; to look up elements. However, this has the side effect that if the; elment for the key doesn't exists, it is implicitly created and; instantiated with `nullptr`! Now the desaster continues: new elements; are added in `RooLinkedList::Add()` via `unordered_map::insert()`.; But `insert()` method doesn't do anything if an item already exists!. This means that if you look up an element in a `RooLinkedList` that is; long enough to use the hash tables, and this element is not found,; adding this element to the list then will not succeed. It's surprising that this problem was uncovered only now, thanks to; @cburgard who provided a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10158:511,hash,hash,511,https://root.cern,https://github.com/root-project/root/pull/10158,1,['hash'],['hash']
Security,"In `RooProdPdf::getConstraints()`, the full computation graph was; traversed two or three times for each component pdf, depending on the; code branch. There were calls to `pdf->dependsOnValue()` and; `pdf->getParameters(&observables)`, but both are very expensive for; large computation graphs because they check if any of the observables is; in the server list of any RooAbsArg in the graph. It is much cheaper to call `pdf->getParameters(nullptr)` to get all; value server variables of a pdf, and then use `overlaps` to check if the; pdf depends on observables or constrained parameters. To get then the set of actual parameters, it is suggested to use; `tmp.remove(observables)`, which is is cheap for RooArgSets because of; the hash-assisted find by name. This commit speeds up the `createNLL()` call for the ATLAS Higgs; combination workspace by 30 %. Here one can see the flamegraphs for createNLL in the ATLAS Higgs combination fit [before this commit](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_before_11015.svg) and [after](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_after_11015.svg).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11015:732,hash,hash-assisted,732,https://root.cern,https://github.com/root-project/root/pull/11015,1,['hash'],['hash-assisted']
Security,In case of exception in JavaScript painting code show warning sign and let easily see associated log message. Before some printout was done in browser console which is not easily accessible by users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16424:179,access,accessible,179,https://root.cern,https://github.com/root-project/root/pull/16424,1,['access'],['accessible']
Security,"In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:327,validat,validation,327,https://root.cern,https://github.com/root-project/root/pull/4480,1,['validat'],['validation']
Security,"In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```; Warning in <TStreamerInfo::BuildCheck>:; The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root; has the same version (=8) as the active class but a different checksum.; You should update the version to ClassDef(RooRealVar,9).; Do not try to write objects with the current class definition,; the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 8 of class 'RooRealVar' differs from; the in-memory layout version 8:; RooAbsBinning _binning; //; vs; unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12114:523,checksum,checksum,523,https://root.cern,https://github.com/root-project/root/pull/12114,1,['checksum'],['checksum']
Security,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:577,access,access,577,https://root.cern,https://github.com/root-project/root/pull/11695,1,['access'],['access']
Security,"In most drawables and aggregations provide public access to the attributes.; One can directly assign value to such member like:; ```cpp; line->line.style = 12;; text->text.font.face = ""Arial"";; ```; And one always can check if attribute `Has()` value or `Clear()` it like:; ```cpp; if (!line->line.style.Has()) // do somthing;; text->text.font.face.Clear();; ```; Introduce several new aggregations like `RAttrAxisTitle`, `RAttrAxisLabels`, `RAttrAxisTicks`, `RAttrFont` to let provide syntax:; ```; frame->x.labels.font.size = 12;; frame->y.ticks.color = RColor::kRed;; ```; Sometime assign operator defined in aggregation to let assign value to whole aggregation like:; ```; frame->x.labels.font = 11;; ```; This will assign ROOT font type 11 to `RAttrFont` which is `face = ""Courier New""; style = ""oblique""; weight = ""bold"";`. Adjust all tests and tutorials. Waiting for fixing cling error https://github.com/root-project/root/issues/8547 - all python tests should fail now",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8566:50,access,access,50,https://root.cern,https://github.com/root-project/root/pull/8566,1,['access'],['access']
Security,"In old versions of RooFormula, one could mutate the internal formula; object from the outside. This was unsafe. Therefore, the visibility of; formula() was reduced.; It can, however, be beneficial to have at least read access. Therefore,; a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:219,access,access,219,https://root.cern,https://github.com/root-project/root/pull/6250,2,['access'],['access']
Security,In particular. - Add support for 8 bit unsigned integer; - Add support for directly accessing a class member with a view,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4273:84,access,accessing,84,https://root.cern,https://github.com/root-project/root/pull/4273,1,['access'],['accessing']
Security,"In preparation of adding page checksums, it makes sense to enable `LoadSealedPage()` support with DAOS and the caging option (caging: storage of multiple pages in a single object). Even though the implementation is not very performant, it will later allow to streamline the test for checksum verification.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15892:30,checksum,checksums,30,https://root.cern,https://github.com/root-project/root/pull/15892,2,['checksum'],"['checksum', 'checksums']"
Security,In preparation of adding page checksums. The `GetSize()` getter will later be split in `GetPayloadSize()` (page size without checksum) and `GetTotalPageSize()` (page size with checksum).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15884:30,checksum,checksums,30,https://root.cern,https://github.com/root-project/root/pull/15884,3,['checksum'],"['checksum', 'checksums']"
Security,"In preparation of adding support for incremental loading page locations, the descriptor access in the page source needs to be locked. Currently, the descriptor is an immutable data structure. When page locations can be mapped in and out dynamically during the lifetime of an ntuple, the descriptor actually does change from time to time. This patch sets replaces direct descriptor access in the page source by a guarded access with a r/w lock. Read-only access is guarded by a shared lock, write access guarded by an exclusive lock. A follow-up PR will change the page source API such that `Attach()` does not load any page locations but another call will be needed to load the page locations of a given cluster range or event range.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10185:88,access,access,88,https://root.cern,https://github.com/root-project/root/pull/10185,5,['access'],['access']
Security,"In previous allmodules&autoloading patch, we used callback from; DeserializationListener to get Decl and loaded corresponding libraries.; It worked, but the performance was bad because ROOT was loading; excessive libraries. In this patch, we use TCling::LazyFunctionCreatorAutoloadForModule. This; function gets callback when ""mangled_name"" was not found in loaded; libraries thus we have to the load corresponding library and lookup; again. I used unordered_map to store mangled identifier and library pair. I'm; doing an optimization by hashing mangled name and storing library not by; name but by uint8 and hold uint8-name information in another vector.; Also tried std::map but unorderd_map was more performant. There are; better hash table like:; https://probablydance.com/2018/05/28/a-new-fast-hash-table-in-response-to-googles-new-fast-hash-table/; we can try to use them if this part gets crucial. With this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.03 seconds; (TFile *) 0x562b37a14fe0; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.362307 seconds; sys time = 0.039741 seconds; res memory = 278.215 Mbytes; vir memory = 448.973 Mbytes; ```. W/o this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.08 seconds Cpu Time = 0.07 seconds; (TFile *) 0x5563018a1d30; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 1.524314 seconds; sys time = 0.157075 seconds; res memory = 546.867 Mbytes; vir memory = 895.184 Mbytes; ```. So it improves time by 4x times and memory by 2x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2093:539,hash,hashing,539,https://root.cern,https://github.com/root-project/root/pull/2093,3,['hash'],"['hash', 'hash-table-in-response-to-googles-new-fast-hash-table', 'hashing']"
Security,In setups where we have debug symbols in a separate library the .gnu.hash section appears invalid. Clients can strip the debug symbols into a separate library by:. objcopy --only-keep-debug libA.so libA.so.dbg; objcopy --strip-debug libA.so; objcopy --add-gnu-debuglink=libA.so.dbg libA.so. This should fix an issue reported by ATLAS when migrating to ROOT v6.20. cc: @krasznaa (I do not seem to find Scott's and Reiner's github handles).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5398:69,hash,hash,69,https://root.cern,https://github.com/root-project/root/pull/5398,1,['hash'],['hash']
Security,In setups where we have debug symbols in a separate library the .gnu.hash; section appears invalid. Clients can strip the debug symbols into a separate; library by:. objcopy --only-keep-debug libA.so libA.so.dbg; objcopy --strip-debug libA.so; objcopy --add-gnu-debuglink=libA.so.dbg libA.so. This should fix an issue reported by ATLAS when migrating to ROOT v6.20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5444:69,hash,hash,69,https://root.cern,https://github.com/root-project/root/pull/5444,1,['hash'],['hash']
Security,"In some node where ROOT was using lagacy compiler, they didn't compile; shared library with a linker flag --hash-style=gnu. So libraries didn't; have .gnu.hash section. We need to search symbols for these libraries,; too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2203:108,hash,hash-style,108,https://root.cern,https://github.com/root-project/root/pull/2203,2,['hash'],"['hash', 'hash-style']"
Security,"In such mode only requests for websocket-handlers are allowed.; And if connection token is configured, such connection only; can be established by providing the token. Increases security of THttpServer used for webgui widgets in public networks. Provide default THttpServer page for WS-only mode that one sees list of active widgets",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7122:178,secur,security,178,https://root.cern,https://github.com/root-project/root/pull/7122,1,['secur'],['security']
Security,"In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum!. https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14185:576,validat,validated,576,https://root.cern,https://github.com/root-project/root/pull/14185,1,['validat'],['validated']
Security,"In the ROOT 6.26 development cycle, the RooProdPdf was partially rewritten in moden C++ with less manual memory allocation to improve performance (PR #7907). In that PR, a unit test that verifies the RooProdPdf can correctly deal with factorizing PDFs was implemented. However, that test used an arbitrary PDF where the correct factorization was checked in a rather crude way: check by hashing the content of the RooProdPdf cache element for a given normalization set that said PR doesn't change any behavior (the reference hash was hardcoded in the unit test). This commit suggests a better alternative for the unit test, checking for a multidimensional product pdf of factorizing uniform pdfs that the pdf values for differenc normalization sets is as expected. This should cover the same functionality and is less fragile and implementation dependend than hashing the cache elements. This closes GitHub issue #12430, as the rewritten test is not affected anymore by the problem reported in that issue. The commit also removed the `RooProdPdf::writeCacheToStream()` function that was an implementation detail of the old unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:386,hash,hashing,386,https://root.cern,https://github.com/root-project/root/pull/12447,3,['hash'],"['hash', 'hashing']"
Security,"In the case of the storage location, this change turns an assert; failure into an exception:. Before:; ```; Fatal: fileStream violated at line 1145 of `ntuple/v7/src/RMiniFile.cxx'; ```. After:; ```; C++ exception with description ""empty storage location""; ```. For the RNTuple name, the empty string only caused issues when added to; a TFile (but that's enough to ban it):. ```cpp; std::string path = ""some_file.root""; auto file = TFile::Open(path.c_str(), ""RECREATE"");; {; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; auto ntuple = RNTupleWriter::Append(std::move(model), """", *file);; ntuple->Fill();; }; file->Close();; delete file;. // throws; auto ntuple = RNTupleReader::Open("""", path);; ```; ```; C++ exception with description ""no RNTuple named '' in file 'test_ntuple_empty_filename.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8511:863,access,access,863,https://root.cern,https://github.com/root-project/root/pull/8511,1,['access'],['access']
Security,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:639,sanitiz,sanitizer,639,https://root.cern,https://github.com/root-project/root/pull/15477,1,['sanitiz'],['sanitizer']
Security,"In the original implementation of the RooBatchCompute library, the; evaluation was done multi-threaded in implicit multi-threading was; enabled in ROOT with `ROOT::EnableImplicitMT()`. This commit removes this feature now, because it was never really; validated, overlapped with other parallelization capabilities of RooFit,; and keeping it will have many unforeseen consequences on users now that; the new CPU evaluation backend is the default in RooFit. See also:; https://github.com/cms-sw/cmsdist/pull/9047",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14909:252,validat,validated,252,https://root.cern,https://github.com/root-project/root/pull/14909,1,['validat'],['validated']
Security,"In this forum post, the point was made that; `RooWorkspace::getSnapshot()` should not print an error if a snapshot; with the passed name is not found. https://root-forum.cern.ch/t/roofit-check-if-snapshot-exist-without-showing-objecthandling-error. Just like in the other `RooWorkspace` access functions, like `arg()`,; `pdf()`, or `function()`, users expect to use `getSnapshot()` also to; query if a snapshot exists and check if the returned value is `nullptr`.; So there should be no error printed in `getSnapshot()` itself. If it is; actually an error for th caller that no snapshot has been found, an; error or exception should be raised by the caller. A second commit in this PR applies some general code modernization to `RooWorkspace.cxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11584:287,access,access,287,https://root.cern,https://github.com/root-project/root/pull/11584,1,['access'],['access']
Security,"In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```; Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList); ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12845:218,access,accessing,218,https://root.cern,https://github.com/root-project/root/pull/12845,1,['access'],['accessing']
Security,"Indeed, if you have a RooArgList, and two elements with the same name, you might remove the first one from the hash map. The find function will now report that there's no element by that name if the hash map is active. If it's inactive, it will report the element. It's something we have to think about. @guitargeek ; This is anyway a bit shaky, since it will only ever find the first element by that name if you ask for this in a list with duplicates. It doesn't seem to be a big issue in RF so far, as nobody seems to use the hash map with ArgLists and duplicates, but it might lead to surprises. _Originally posted by @hageboeck in https://github.com/root-project/root/pull/9419#discussion_r767570121_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9425:111,hash,hash,111,https://root.cern,https://github.com/root-project/root/issues/9425,3,['hash'],['hash']
Security,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:0,Inject,Inject,0,https://root.cern,https://github.com/root-project/root/pull/1804,1,['Inject'],['Inject']
Security,Injecting class span inside the std namespace is asking for problem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042:0,Inject,Injecting,0,https://root.cern,https://github.com/root-project/root/issues/13042,1,['Inject'],['Injecting']
Security,Inline and access optimizations for TLorentzVector and TVector3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/165:11,access,access,11,https://root.cern,https://github.com/root-project/root/pull/165,2,['access'],['access']
Security,Installation without internet access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8424:30,access,access,30,https://root.cern,https://github.com/root-project/root/issues/8424,1,['access'],['access']
Security,"Instead of N passes of `RooAbsCollection::remove(RooAbsArg)`, do single pass over the `_list` and use `contains`.; That algorithm is much faster when the collection to remove is large and therefore has the hash-assisted find.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9419:206,hash,hash-assisted,206,https://root.cern,https://github.com/root-project/root/pull/9419,1,['hash'],['hash-assisted']
Security,Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14189:100,expose,expose,100,https://root.cern,https://github.com/root-project/root/pull/14189,1,['expose'],['expose']
Security,"Introduce the new `RooAbsPdf::createExpectedEvents()` method to; explicitly create an object that represents the expected number of; events. Like this, the expected number of events is fully exposed in the; computation graph, just like the integrals. This makes adding support of RooFit codegen+AD for extended fits; trivial, and also optimizes the BatchMode because the RooFitDriver can; de-duplicate integrals that appear both in the regular evaluation path; and `RooAbsPdf::expectedEvents()`. Now that a function that represents the expected events is; part of the computation graph, using it in the RooFit code generation; for the NLL is straight forward.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12998:191,expose,exposed,191,https://root.cern,https://github.com/root-project/root/pull/12998,1,['expose'],['exposed']
Security,"Introduces a new option to the DNN, ValidationSize, which can be used to split the training data into two parts, one for training and one for validation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/968:36,Validat,ValidationSize,36,https://root.cern,https://github.com/root-project/root/pull/968,2,"['Validat', 'validat']","['ValidationSize', 'validation']"
Security,"Introducing the intermediate class RFloatField<T> that is inherited by RField<float> and RField<double> which exposes the SetHalfPrecision(), SetTruncated() and SetQuantized() methods for both classes. This also adds the previously-missing but advertised `double -> Real16` mapping and the `double -> Real32Trunc` mapping. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16546:110,expose,exposes,110,https://root.cern,https://github.com/root-project/root/pull/16546,1,['expose'],['exposes']
Security,"It crashes with an access violation, so disable it on Windows (32 and 64 bit)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10436:19,access,access,19,https://root.cern,https://github.com/root-project/root/pull/10436,1,['access'],['access']
Security,"It looks like `#define -compilerI/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/g++-v12 1` is generated due to broken parsing somewhere... Here is the summary of the configuration and the full CMake configuration line:. ```; -- ROOT Configuration . System Linux-5.18.5-gentoo; Processor 16 core AMD Ryzen 9 3950X 16-Core Processor (x86_64); Build type Debug; Install path /usr/lib/root/6.26; Compiler GNU 12.2.1; Compiler flags:; C -march=native -O2 -pipe -g -fno-omit-frame-pointer -Wno-implicit-fallthrough -pipe -Wall -W -pthread ; C++ -march=native -O2 -pipe -g -fno-omit-frame-pointer -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; Linker flags:; Executable -Wl,-O1 -Wl,--as-needed -rdynamic; Module -Wl,-O1 -Wl,--as-needed; Shared -Wl,-O1 -Wl,--as-needed -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_openui5 dataframe davix exceptions fftw3 fitsio fortran gdml gsl_shared gviz http fcgi imt mathmore mlp minuit2 mpi mysql odbc opengl oracle pgsql pyroot pythia6 pythia8 qt5web roofit webgui root7 shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran uring vc vdt x11 xml xrootd; ```. ```; cmake -C /var/tmp/portage/sci-physics/root-6.26.06/work/root-6.26.06_build/gentoo_common_config.cmake -G Unix Makefiles -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_COMPILER=gcc-12.2.1 -DCMAKE_CXX_COMPILER=g++-12.2.1 -DCMAKE_CUDA_HOST_COMPILER=g++-12.2.1 -DCMAKE_C_FLAGS=-march=native -O2 -pipe -g -fno-omit-frame-pointer -DCMAKE_CXX_FLAGS=-march=native -O2 -pipe -g -fno-omit-frame-pointer -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=/usr/bin/python3.11 -DCMAKE_INSTALL_PREFIX=/usr/lib/root/6.26 -DCMAKE_INSTALL_MANDIR=/usr/lib/root/6.26/share/man -DCMAKE_INSTALL_LIBDIR=lib -DDEFAULT_SYSROOT= -DCLING_BUILD_PLUGINS=OFF -Dasserts=OFF -Ddev=OFF -Dexceptions=ON -Dfail-on-missing=ON -Dgnuinstall=OFF -Dshared=ON -Dsoversion=ON -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11381:866,hash,hash-style,866,https://root.cern,https://github.com/root-project/root/issues/11381,1,['hash'],['hash-style']
Security,"It seems that VecCore is a wrapper over Vc, however ROOT uses Vc in the context; of VecCore but also standalone. Adapt CMake to only try to load the Vc module when the Vc option is on as VecCore; might have not exposed Vc... This change improves root-project/root@f2ac9b349f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9572:211,expose,exposed,211,https://root.cern,https://github.com/root-project/root/pull/9572,1,['expose'],['exposed']
Security,It was validated with the unbinned benchmarks in `rootbench` that the; implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12161:7,validat,validated,7,https://root.cern,https://github.com/root-project/root/pull/12161,1,['validat'],['validated']
Security,"It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```; genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed.; --; /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12138:1263,audit,auditor,1263,https://root.cern,https://github.com/root-project/root/issues/12138,1,['audit'],['auditor']
Security,"Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`.; This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4652:92,access,accessible,92,https://root.cern,https://github.com/root-project/root/pull/4652,1,['access'],['accessible']
Security,"KernelTrivial.cxx:80:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:77; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:77; 3: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:80; /opt/root_src/tmva/tmva/src/PDF.cxx:267:8: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Passing value via 1st parameter 'hist' in /opt/root_src/tmva/tmva/src/PDF.cxx:188; 2: Calling 'PDF::BuildPDF' in /opt/root_src/tmva/tmva/src/PDF.cxx:188; 3: Assuming 'hist' is equal to NULL in /opt/root_src/tmva/tmva/src/PDF.cxx:264; 4: Taking true branch in /opt/root_src/tmva/tmva/src/PDF.cxx:264; 5: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDF.cxx:267; /opt/root_src/tmva/tmva/src/Reader.cxx:384:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 3: Calling 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: Returning pointer (loaded from 'method'), which participates in a condition later in /opt/root_src/tmva/tmva/src/Reader.cxx:424; 11: Returning pointer (loaded from 'method') in /opt/root_src/tmva/tmva/src/Reader.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:109986,Access,Access,109986,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,"LZMA by default creates very large hash tables for its dictionaries, e.g., at compression level 4, the hash table is 4Mi 4 byte entries, 16 MiB total. The hash table has to be zeroed before use so it is allocated via calloc(), which means all the pages have to be allocated, mapped and written. ROOT baskets are often much smaller than the default LZMA dictionaries; for small baskets, the large dictionary has very little compression benefit, while zeroing the hash table can be more expensive than the actual compression operation. Since R__zipLZMA() is actually being used to compress a buffer of known size, not a stream, we can use the size of the buffer to estimate an appropriate size for the dictionary. This PR uses a slightly more advanced part of the LZMA API to set the dictionary size to 1/4 the size of the input buffer, if that is smaller than the default size from the selected preset compression level. In tests with CMS data, this results in less than 1% increase in the output size and (in one test job) a 25% reduction in job total run time, with LZMA compression time reduced by 80% (all of that time that was being spent in memset() zeroing the hash table). I also tested this with the ""Event"" test program with Brian's changes from #59. With the same test parameters as Brian (""./Event 4000 6 99 1 1000 2""), I get. ZLIB level-6: 14.4 MB/s; Original LZMA level-6: 2.3 MB/s; Modified LZMA level-6: 3.0 MB/s. With 100 tracks per event (and hence smaller baskets) the improvement is from 2.2 MB/s to 3.9 MB/s. This change should be fully transparent and backwards compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194:35,hash,hash,35,https://root.cern,https://github.com/root-project/root/pull/194,5,['hash'],['hash']
Security,Lack of size validation in ZSTD compression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9334:13,validat,validation,13,https://root.cern,https://github.com/root-project/root/issues/9334,1,['validat'],['validation']
Security,"Launching the Python tutorials from the 'tutorials/launcher.py' module injected; the `__main__` namespace in the tutorial itself. In general it is not a problem,; but it can sometimes hide errors like the one fixed by; https://github.com/root-project/root/pull/10177 . Using a rootlogon file serves; the same purpose and the tutorials can thus be launched by simply calling; 'python tutorialname.py'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10207:71,inject,injected,71,https://root.cern,https://github.com/root-project/root/pull/10207,1,['inject'],['injected']
Security,"Let configure different parameter in the THttpServer and in the threads layout to minimize as much as possible; round-trip packet time. After all tunings round-trip time can be reduced from 30ms to 1.4ms. . Introduce `tutorials/webgui/ping/` example, which demonstrate and let test all possible tuning parameters independently. Once code adjusted to headless mode, one potentially can include it into stress tests during ROOT nightly/PR builds.; It is very simple, but powerful test of JSROOT/THttpServer/RWebWindow code integrity. Thanks to @osschar and @alja for initial idea.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7777:521,integrity,integrity,521,https://root.cern,https://github.com/root-project/root/pull/7777,1,['integrity'],['integrity']
Security,Let test webgui integrity; - if THttpServer work properly; - if JSROOT loads on client side; - if communication runs between server and clients,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901:16,integrity,integrity,16,https://root.cern,https://github.com/root-project/root/pull/7901,1,['integrity'],['integrity']
Security,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:354,inject,injected,354,https://root.cern,https://github.com/root-project/root/pull/3098,1,['inject'],['injected']
Security,"Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06); ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06); ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06); ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957); ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061); ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119); ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172); ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284); ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103); ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316); ==201374== by 0x139AA957: GetClass (TClass.h:628); ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644); ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654); ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175); ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218); ==201374== by 0x139A9B5C: ROOT::Math::Factory:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14199:1871,hash,hash,1871,https://root.cern,https://github.com/root-project/root/issues/14199,1,['hash'],['hash']
Security,Lock access to global functions list,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/31:5,access,access,5,https://root.cern,https://github.com/root-project/root/pull/31,1,['access'],['access']
Security,"Looking e.g. at https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx there are some places where a `R__ASSERT` is desirable (validation of input parameters, erroring out in certain edge cases), but in others I think we use it for ensuring that no bugs are present, in which case `assert` would be more appropriate. I did not see places where the checks are so expensive that the difference might matter in terms of performance, but it might be better to establish clear usage patterns before that happens :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10618:151,validat,validation,151,https://root.cern,https://github.com/root-project/root/issues/10618,1,['validat'],['validation']
Security,Make FileAndIndex class ordered and hashable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8637:36,hash,hashable,36,https://root.cern,https://github.com/root-project/root/pull/8637,1,['hash'],['hashable']
Security,Make TTreeReaderArray's iterator random access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259:40,access,access,40,https://root.cern,https://github.com/root-project/root/pull/1259,1,['access'],['access']
Security,"Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: ; - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709; - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above).; Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:; For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12621:1169,access,access,1169,https://root.cern,https://github.com/root-project/root/issues/12621,1,['access'],['access']
Security,"Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:503,validat,validated,503,https://root.cern,https://github.com/root-project/root/pull/13384,1,['validat'],['validated']
Security,"Mulltiprocessing of Hyper Parameter Optimisation, Cross Validation and Variable Importance",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/858:56,Validat,Validation,56,https://root.cern,https://github.com/root-project/root/pull/858,1,['Validat'],['Validation']
Security,"MultiTF1Templ<T>::HasParameterHessian(); from BasicFCNL::HasHessian; from ROOT::Fit::Fitter::DoInitMinimizer; ```. Note: The tutorials seems unrelated to Clad. ### Reproducer. disabled and run `ctest -R tutorial-fit-exampleFit3D`. With clad disabled, we get:; ```; Command: ""/Applications/CMake.app/Contents/bin/cmake"" ""-DCMD=/Users/pcanal/root_working/builds/master-pr/bin/root.exe^-b^-l^-q^/Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C"" ""-DSYS=/Users/pcanal/root_working/bu; ilds/master-pr"" ""-DENV=PATH=/Users/pcanal/root_working/builds/master-pr/bin::/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3; .8/bin:/Users/pcanal/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstra; p/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/podman/bin#DYLD_LIBRARY_PATH=/Users/pcanal/root_working/builds/master-pr/lib:#ROOTSYS=/Users/pcanal/root_working; /builds/master-pr#PYTHONPATH=/Users/pcanal/root_working/builds/master-pr/lib:"" ""-P"" ""/Users/pcanal/root_working/builds/master-pr/RootTestDriver.cmake""; Directory: /Users/pcanal/root_working/builds/master-pr/runtutorials; ""tutorial-fit-exampleFit3D"" start time: Mar 28 16:08 CDT; Output:; ----------------------------------------------------------. Processing /Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C...; In file included from input_line_38:1:; /opt/build/root_builds/master-pr/include/Math/CladDerivator.h:25:10: fatal error: 'plugins/include/clad/Differentiator/Differentiator.h' file not found; #include <plugins/include/clad/Differentiator/Differentiator.h>; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_39:4:1: error: use of undeclared identifier ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15091:1854,secur,security,1854,https://root.cern,https://github.com/root-project/root/issues/15091,1,['secur'],['security']
Security,"Not expose ROOT/RConfig.h to rootcling, but to add the header to ROOT_Config pcm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3299:4,expose,expose,4,https://root.cern,https://github.com/root-project/root/pull/3299,1,['expose'],['expose']
Security,"Now for each attribute three methods should be used:; 1. const Getter; 2. non-const Setter; 3. Access by reference. ```; const RAttrText &GetAttrText() const { return fAttrText; }; CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }; RAttrText &AttrText() { return fAttrText; }; ```. Such set of methods allow to clearly separate const and non-const; access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4523:95,Access,Access,95,https://root.cern,https://github.com/root-project/root/pull/4523,2,"['Access', 'access']","['Access', 'access']"
Security,Now one RDF is used instead of a number of individual ones; and users can see what a dataset specification file looks like; and how to access the metadata information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12929:135,access,access,135,https://root.cern,https://github.com/root-project/root/pull/12929,1,['access'],['access']
Security,"Now that we have an efficient hash-assisted `find` mechanism to find by name, it can be used in `RooArgSet` to optimize `containsInstance` (as we are certain there is only one parameter with a given name). This reduces the writing of large workspaces to file (such as ATLAS Higgs combination) by a significant factor (not precisely measured, but at least 5).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9417:30,hash,hash-assisted,30,https://root.cern,https://github.com/root-project/root/pull/9417,1,['hash'],['hash-assisted']
Security,"Ntup->Print(""NUD_total_ADC*""); ******************************************************************************; *Tree :DmpMCEvtNtup: DAMPE MC Event nTuple Tree *; *Entries : 30000 : Total = 42024515 bytes File Size = 5331016 *; * : : Tree compression factor = 7.90 *; ******************************************************************************; *Br 0 :NUD_total_ADC : nud_total_adc/D *; *Entries : 30000 : Total Size= 241261 bytes File Size = 7509 *; *Baskets : 8 : Basket Size= 32000 bytes Compression= 32.06 *; *............................................................................*; ```. ```; DmpMCEvtNtup->Draw(""NUD_total_ADC""); ```; works, while; ```; root [13] TTreeReader r(DmpMCEvtNtup);; root [14] TTreeReaderValue<double> rv(r, ""NUD_total_ADC"");; root [15] r.Next(); Error in <TTreeReaderValueBase::GetBranchDataType()>: The branch NUD_total_ADC was created using a leaf list and cannot be represented as a C++ type. Please access one of its siblings using a TTreeReaderArray:; Error in <TTreeReaderValueBase::GetBranchDataType()>: NUD_total_ADC.nud_total_adc; Error in <TTreeReaderValueBase::CreateProxy()>: The branch NUD_total_ADC contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; (bool) false; ```. does not. `TTreeReader` instead requires the full leaf name:. ```; root [1] TTreeReader r(DmpMCEvtNtup);; root [2] TTreeReaderValue<double> rv(r, ""NUD_total_ADC.nud_total_adc"");; root [3] r.Next(); (bool) true; root [4] *rv; (double) -999.00000; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. `TTreeReader` should support the same set of ""valid branch names"" that `TTree::Draw` supports. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. Reproduced with 6.22/02 and master@4ea4d8943 . ### Additional context; <!--; Add any other context about the problem here.; -->. This looks similar to ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6881:1588,access,access,1588,https://root.cern,https://github.com/root-project/root/issues/6881,1,['access'],['access']
Security,NullDeref check changed from injection of if(stmt) to a runtime call.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/112:29,inject,injection,29,https://root.cern,https://github.com/root-project/root/pull/112,1,['inject'],['injection']
Security,"On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES; guard. If this macro is not defined at the start of the program, some; other header file might include math.h and the header is suppressed; forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of; the file and also custom defines M_PI as it is not exposed on building; Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6309:348,expose,exposed,348,https://root.cern,https://github.com/root-project/root/pull/6309,1,['expose'],['exposed']
Security,"Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1555:103,access,accessing,103,https://root.cern,https://github.com/root-project/root/pull/1555,1,['access'],['accessing']
Security,One can construct relatively complex structures of elements for using them in RBrowser; Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. ; Access top ROOT folder (and all sub-folders); Access already opened files. Now data structures approximately that I want to see in RBrowser!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4638:220,Access,Access,220,https://root.cern,https://github.com/root-project/root/pull/4638,2,['Access'],['Access']
Security,Optimize TPrincipal::AddRow function since it is reported that is causing a significative time in CMS reconstruction. . Move divisions outside loop and use directly access to internal TVector and TMatrix elements.; In case data are not stored in the class the gain in the loop that is adding the row has been measured to be a factor of 10 for a data of 100 dimension and 100000 points,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6630:165,access,access,165,https://root.cern,https://github.com/root-project/root/pull/6630,1,['access'],['access']
Security,Otherwise we end up trying to access a Defined column that does not; exist. This fixes #7058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7060:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/7060,1,['access'],['access']
Security,Out-of-bounds vector access in roofit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:21,access,access,21,https://root.cern,https://github.com/root-project/root/issues/15730,1,['access'],['access']
Security,"Parts of this were accessed through redefining private/protected as public; which, besides of being a nasty hack, does not work with gcc-5. TColor had a static bool member fgInitDone that is now a local static in InitializeColors(). I just added a bool argument force=kFALSE as this was a minimal change. If desired, I can do the following:; . Split InitializeColors() into initial part that does the check is-init-done and the actual initialization code that is private.; . Introduce new static function InitializeColorsForce() that skips the check.; This way the interface to InitializeColors() will not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/99:19,access,accessed,19,https://root.cern,https://github.com/root-project/root/pull/99,1,['access'],['accessed']
Security,"Pressing ctrl-r when no ~/.root_hist file is present or possibly; when it contains 0 lines used to cause a segfault. The culprit; if an out-of-bound access in History::GetLine, as the case in which; the history has zero entries was not taken into account. With this patch, Histoy::GetLine returns an empty string instead.; This fixes ROOT-10917.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6006:149,access,access,149,https://root.cern,https://github.com/root-project/root/pull/6006,1,['access'],['access']
Security,"Pressing ctrl-r when no ~/.root_hist file is present or possibly; when it contains 0 lines used to cause a segfault. The culprit; if an out-of-bound access in History::GetLine, as the case in which; the history has zero entries was not taken into account. With this patch, Histoy::GetLine returns an empty string instead.; This fixes ROOT-10917. Co-authored-by: Axel Naumann <Axel.Naumann@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6098:149,access,access,149,https://root.cern,https://github.com/root-project/root/pull/6098,1,['access'],['access']
Security,Prevent Access of deleted object during hadd tear down,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021:8,Access,Access,8,https://root.cern,https://github.com/root-project/root/pull/9021,1,['Access'],['Access']
Security,Prevent access violation when executing the df017_vecOpsHEP.C tutorial with ROOT built in release mode. To be reviewed when updating Visual Studio or LLVM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10443:8,access,access,8,https://root.cern,https://github.com/root-project/root/pull/10443,1,['access'],['access']
Security,Print variable importances for each fold when using Cross Validation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7092:58,Validat,Validation,58,https://root.cern,https://github.com/root-project/root/issues/7092,1,['Validat'],['Validation']
Security,Protect access to TROOT::GetListOfGlobalFunctions in TFormula,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/117:8,access,access,8,https://root.cern,https://github.com/root-project/root/pull/117,1,['access'],['access']
Security,Protect against out-of-bounds access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1639:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/1639,1,['access'],['access']
Security,Protect concurrent access to gROOT->GetListOfFiles(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/38:19,access,access,19,https://root.cern,https://github.com/root-project/root/pull/38,2,['access'],['access']
Security,Protect global list of functions from concurrent access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/24:49,access,access,49,https://root.cern,https://github.com/root-project/root/pull/24,1,['access'],['access']
Security,Protect multi-thread access to TSystem::fHelper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5126:21,access,access,21,https://root.cern,https://github.com/root-project/root/pull/5126,2,['access'],['access']
Security,Protection in TGDMLWrite for optical surfaces for nodes not connected to the geometry hierarchy. Added few accessors for material properties,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3781:107,access,accessors,107,https://root.cern,https://github.com/root-project/root/pull/3781,1,['access'],['accessors']
Security,"Provide access to whether the enum is a scoped enum through TEnum::Property().; Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4031:8,access,access,8,https://root.cern,https://github.com/root-project/root/pull/4031,1,['access'],['access']
Security,Provide public access to `RAttrValue<T>` members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8566:15,access,access,15,https://root.cern,https://github.com/root-project/root/pull/8566,1,['access'],['access']
Security,"Provides support for both 32bit and 64bit cardinality fields. This has no implication on the width of the on-disk offsets but the cardinality field width (32bit or 64bit) is for the width of the collection sizes that are computed from the offsets. For converted TTree files with leaf count arrays, 32bit widths cardinality fields must be used because the count leaf is 32bit. This makes sure that the (projected) leaf count field in the RNTuple (e.g., `nJets`) can be accessed with the same type than the TTree branch, e.g. in RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12815:468,access,accessed,468,https://root.cern,https://github.com/root-project/root/pull/12815,1,['access'],['accessed']
Security,"Pull request #11731 introduced internal support for per field post-read callbacks. This follow-up pull request registers a callback for each `#pragma read` rule on user-defined classes.; Currently, `#pragma read` rules referencing non-transient members as a `target` are intentionally disallowed -- a warning is logged in that case. Only target class version is checked, i.e. checksum is ignored. Raw read rules are not (and will likely not be) supported, as they take a `TBuffer &`. ## Changes or fixes:; - Introduce `RFieldBase::AddReadCallbacksFromIORules()`. This function registers a post-read callback for each of the given `ROOT::TSchemaRule`s.; - `RFieldBase::ConnectPageSource()`: cache C++ type version as stored in the RNTupleDescriptor. This information can be accessed via `GetOnDiskTypeVersion()`.; `RFieldBase::RegisterReadCallbacks()` is called as part of `ConnectPageSource()`. This function can be overridden; in particular, derived classes can make use of the on-disk type version to enable/disable read rules.; - RClassField: register a post-read callback for each of the custom I/O rules associated with the target class version.; - I/O customization rules referencing non-transient members are ignored for now. Such rules shall trigger a warning, e.g.; ```; 210: Warning in <[ROOT.NTuple] Warning /home/jalopezg/CERN/repos/root/tree/ntuple/v7/src/RField.cxx:931 in ; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass*)::<lambda(const ; ROOT::TSchemaRule*)>>: ignoring I/O customization rule with non-transient member: a; ```. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR partially takes care of #10019.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11944:376,checksum,checksum,376,https://root.cern,https://github.com/root-project/root/pull/11944,2,"['access', 'checksum']","['accessed', 'checksum']"
Security,REve: Implement scene subscription and add accessable view navigation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12383:43,access,accessable,43,https://root.cern,https://github.com/root-project/root/pull/12383,1,['access'],['accessable']
Security,"RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection.; A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:; - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type.; - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access; - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:; - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface.; Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below).; ```c++; // Alternatively, this can be specified via a member type in the user-defined class; see the documentation; template <>; struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();; auto fieldKlass = model->MakeField<MyCl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11525:1025,access,access,1025,https://root.cern,https://github.com/root-project/root/pull/11525,1,['access'],['access']
Security,"RFieldBase::Create(""fieldname"", ""classame"") in ROOT 6.24.0 returns an error when the class contains an anonymous enum. ; To reproduce execute a ROOT macro EmumTest.C containing:; ```; class ContainsEnum { public: enum { EnumField1, EnumField2 }; }; ; void EnumTest() { ; try { auto field = ROOT::Experimental::Detail::RFieldBase::Create(""HasEnum"", ""ContainsEnum"").Unwrap(); ; } catch(const std::exception& exc) { ; std::cout << ""ERROR: "" << exc.what() << std::endl; ; } ; }; ``` ; ```root [0] ; Processing EnumTest.C...; ERROR: Field EnumField1 has unknown type ContainsEnum::(anonymous) (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-v6.24.00/src/ROOT/v6.24.00/tree/ntuple/v7/src/RField.cxx:225]; ```; Marcin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8901:607,access,access,607,https://root.cern,https://github.com/root-project/root/issues/8901,1,['access'],['access']
Security,ROOT 6.24.00 in LCG_100 fails webdav authentication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092:37,authenticat,authentication,37,https://root.cern,https://github.com/root-project/root/issues/8092,1,['authenticat'],['authentication']
Security,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload TMVA/TreePlayer; to fix all failing tests that are related to this feature/bug with; modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1355:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1355,1,['inject'],['injected']
Security,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. 2. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1396,1,['inject'],['injected']
Security,ROOT does not work when launched from non-accessible folder,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12409:42,access,accessible,42,https://root.cern,https://github.com/root-project/root/issues/12409,1,['access'],['accessible']
Security,"ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,; ```cpp; // rootmap file; namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code; namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3; ```; `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547:5,inject,injects,5,https://root.cern,https://github.com/root-project/root/pull/1547,1,['inject'],['injects']
Security,ROOT-5076: Support random access compression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/152:26,access,access,26,https://root.cern,https://github.com/root-project/root/pull/152,1,['access'],['access']
Security,ROOT-8985 TMVA DNN validation set,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/968:19,validat,validation,19,https://root.cern,https://github.com/root-project/root/pull/968,1,['validat'],['validation']
Security,"Rationale; ---------. We create a number of small root files to serve as conditions data. The; algorithm tells the framework to save the data to be valid for a given interval of; time. To de-duplicate files we use the md5 checksum: same checksum, same; content, so no new file needed. Technically we create the file as a; temporary file, calculate the checksum and use a directory structure; similar to git objects: if no file with the checksum as name exists,; rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the; TFile. And since we rename the file anyway it really doesn't matter what; TFile thinks its name is. Implementation; --------------. This tries to be the minimal change to the current feature of; reproducible files (thanks again): We piggyback on the same flag but if; the flag also has a value instead of jut being present we use it as the; name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5549:222,checksum,checksum,222,https://root.cern,https://github.com/root-project/root/pull/5549,5,['checksum'],['checksum']
Security,"Rebase PR #1396. Original PR comment:; ""ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697:201,inject,injected,201,https://root.cern,https://github.com/root-project/root/pull/1697,1,['inject'],['injected']
Security,"Recently, the overload of `RooAbsData::createHistogram` that takes; integer bin numbers instead of command arguments was deprecated because; its default behavior was inconsistent with the command argument; overload. However, that overload with bin numbers had the advantage that it; accepted the variable names in a comma-separated string, which was often; more convenient than passing the variables by RooFit object references. To preserve this convenience even when the bin integer overload is; removed, a new overload is introduced that also takes strings for; variable names but this time uses RooFit command arguments. A further improvement is made for PyROOT. There was no reason to have these overloads not in `RooAbsData`: no; functionality specific to RooDataSet is used. By moving all `createHistogram` overloads to the RooAbsDataBase class,; we make all overloads accessible to PyROOT also via instances. In the second commit, the RooFit Python tutorials were also code formatted with `black --line-length=120`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10456:875,access,accessible,875,https://root.cern,https://github.com/root-project/root/pull/10456,1,['access'],['accessible']
Security,"Redirect calls to:; * TGaxis::SetMaxDigits(); * TGaxis::GetMaxDigits(); * TGaxis::SetExponentOffset(). Let use these configurations also in TWebCanvas, which has access to; gStyle object. Small adjustment in TStyle class. Implement all these attributes in JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12513:162,access,access,162,https://root.cern,https://github.com/root-project/root/pull/12513,1,['access'],['access']
Security,Refactor ParamHistFunc treatment to support both MC stat (BB-lite); and user-defined ShapeSys. Validated on ATLAS VHbb workspace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9683:95,Validat,Validated,95,https://root.cern,https://github.com/root-project/root/pull/9683,1,['Validat'],['Validated']
Security,Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1394:139,access,accessed,139,https://root.cern,https://github.com/root-project/root/pull/1394,1,['access'],['accessed']
Security,"Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo)) would return; whatever was registered last. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename. ---. This PR fixes #12509",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15599:282,access,accessed,282,https://root.cern,https://github.com/root-project/root/pull/15599,1,['access'],['accessed']
Security,Remove dangerous thread-unsafe accessors of RHistConcurrentFiller,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4708:31,access,accessors,31,https://root.cern,https://github.com/root-project/root/pull/4708,1,['access'],['accessors']
Security,Removes MarkovChain interfaces that are one-time used in `MCMCInterval` . Now obtain the reduced markov chain data (also as Hist ) by calling `reduce` on the RooDataSet (which can be directly accessed through `MarkovChain::GetAsConstDataSet`). . Updates all `reduce` and `reduceEng`methods to const across `RooAbsData` and other RooFit classes with overrides.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334:192,access,accessed,192,https://root.cern,https://github.com/root-project/root/pull/16334,1,['access'],['accessed']
Security,"Reported in https://root-forum.cern.ch/t/pullhist-only-uses-upper-range/48582. When plotting a pdf in 2 separate ranges, 2 RooCurve objects are created with the same name .; When using pullHist or whatever function of RooPlot accessing the RooCurve by its name, only the last of the two curve can be retrieved. ; Since RooPlot has no way to access its list of containing objects, apart than given the name, only the RooCurve with the upper range will be used. . Example code from Forum post:; ```Python; import ROOT as r. ws = r.RooWorkspace(""workspace""); x = ws.factory(""x[-10, 10]""); x.setRange(""lo"", -10, -5); x.setRange(""hi"", 5, 10); pdf = ws.factory(""Gaussian::pdf(x, m1[0], s1[3])""); ds = pdf.generate(r.RooArgSet(x), 1000). fr = x.frame(); ds.plotOn(fr); pdf.plotOn(fr, r.RooFit.Range(""lo,hi"")); pull = fr.pullHist(). c = r.TCanvas(); fr2 = x.frame(); fr2.addPlotable(pull, ""P""); fr2.Draw(); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9741:226,access,accessing,226,https://root.cern,https://github.com/root-project/root/issues/9741,2,['access'],"['access', 'accessing']"
Security,"Reproducer:. ```; [eguiraud@lxplus727 ~]$ source /cvmfs/sft.cern.ch/lcg/views/LCG_98python3/x86_64-centos7-gcc8-opt/setup.sh; [eguiraud@lxplus727 ~]$ python; Python 3.7.6 (default, Aug 12 2020, 09:46:40) ; [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> from ROOT import TMVA; >>> from ROOT import TFile; Error in <RootX11ErrorHandler>: BadAccess (attempt to access private resource denied) (XID: 418, XREQ: 18); ```. This error is not printed with other LCG releases, e.g. LCG_99.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7162:409,access,access,409,https://root.cern,https://github.com/root-project/root/issues/7162,1,['access'],['access']
Security,"Reproducer:. ```cpp; #include <Math/Vector3D.h>; #include <ROOT/RDataFrame.hxx>; #include <vector>; #include <TClass.h>. int main() {; {; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; ROOT::Math::XYZVector x(1, 2, 3);; std::vector<ROOT::Math::XYZVector> y{ROOT::Math::XYZVector(4,5,6)};; t.Branch(""x"", &x);; // original line:; // t.Branch(""y"", &y); // commenting this line ""fixes"" the problem!; // Actual trigger:; auto c = TClass::GetClass(""std::vector<ROOT::Math::XYZVector>""); // commenting this line ""fixes"" the problem!; t.Fill();; t.Write();; }. TFile f(""f.root"");; TTreeReader r(""t"", &f);; TTreeReaderValue<ROOT::Math::XYZVector> rx(r, ""x"");; r.Next();; *rx;; }; ```; yields:. ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch x contains data of type ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>. It cannot be accessed by a TTreeReaderValue<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>>; Error in <TTreeReaderValue::Get()>: Value reader not properly initialized, did you call TTreeReader::Set(Next)Entry() or TTreeReader::Next()?; ```. Interestingly, if branch `""y""` is not written out, then branch `""x""` can be read correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10423:901,access,accessed,901,https://root.cern,https://github.com/root-project/root/issues/10423,1,['access'],['accessed']
Security,"Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10781:87,attack,attackers,87,https://root.cern,https://github.com/root-project/root/pull/10781,3,"['attack', 'secur']","['attackers', 'secure', 'securitylab']"
Security,"Revert ""Use preprocessor macro __ROOTCLING__ instead of __CINT__ in linkdef""; ; This reverts commit 915d488afd46a8e8199484ab77861bb47d8bac09.; ; The replacement prevented the recording of the data member documentation; strings for the content of the library and thus was breaking the I/O, in; particular transientness, for thoses classes, eg TTreePerfStats.; (See below for an example).; ; This seems to be due to the fact that we need/must not add __ROOTCLING__; during the parsing that will be recorded in the the pch, see in; core/dictgen/src/rootcling_impl.cxx line 4334:; ; // We do not want __ROOTCLING__ in the pch!; if (!onepcm) {; clingArgs.push_back(""-D__ROOTCLING__"");; ; So, at least for now, we need to keep using __CINT__ for the LinkDef.h; of the libraries included in the PCH.; ; See:; ; root [0] TClass::GetClass(""TTreePerfStats"")->GetStreamerInfo()->ls(); ; StreamerInfo for class: TTreePerfStats, version=7, checksum=0x1f86d003; TVirtualPerfStats BASE offset= 0 type= 0 ABC for collecting PROOF statistics; int fTreeCacheSize offset= 16 type= 3 TTreeCache buffer size; int fNleaves offset= 20 type= 3 Number of leaves in the tree; ; vs; ; root [0] TClass::GetClass(""TTreePerfStats"")->GetStreamerInfo()->ls(); ; StreamerInfo for class: TTreePerfStats, version=6, checksum=0x84181ab4; TVirtualPerfStats BASE offset= 0 type= 0 ABC for collecting PROOF statistics; int fTreeCacheSize offset= 16 type= 3; int fNleaves offset= 20 type= 3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1978:927,checksum,checksum,927,https://root.cern,https://github.com/root-project/root/pull/1978,2,['checksum'],['checksum']
Security,"Revert ""[cmake] Update xrootd hash after a new version of the xrootd …",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11164:30,hash,hash,30,https://root.cern,https://github.com/root-project/root/pull/11164,1,['hash'],['hash']
Security,"Revert D153003 ""[clang] Fix ODR hashing of template template parameters""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14777:32,hash,hashing,32,https://root.cern,https://github.com/root-project/root/pull/14777,1,['hash'],['hashing']
Security,"Right now we only generate modulemaps for the ROOT libraries which; are exposed to the user. But we also have generate dictionary; calls for dictionaries that are not exposed to the user and should; only be private (such as TBench, TMathCoreUnitDict etc.). Right now we fail when compiling root on those dictionaries as we; don't have a modulemap for those dictionaries and we don't generate; one. This will also break tests that use the generate dictionary; call as those also don't have a modulemap now. This patch reuses the existing CMake code for generating modulemaps; and also uses it in those cases to provide a dictionary that; rootcling can use to generate a C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1091:72,expose,exposed,72,https://root.cern,https://github.com/root-project/root/pull/1091,2,['expose'],['exposed']
Security,"RooArgSets could not be constructed from STL collections and initialiser; lists. This fixes this shortcoming. The same holds for adding multiple; elements from a collection.; Further, operator[] was overloaded to react both to index and name; access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3976:243,access,access,243,https://root.cern,https://github.com/root-project/root/pull/3976,1,['access'],['access']
Security,"RooDataSets can be written to ASCII files. However, the output stream is not exposed to the user, i.e., the user cannot modify e.g. the precision. By exposing the stream to the user, the data set can be written to any ostream with user-defined stream modifiers. The rf102 tutorial has been updated accordingly, input/output tests have been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3083:77,expose,exposed,77,https://root.cern,https://github.com/root-project/root/pull/3083,1,['expose'],['exposed']
Security,"RooFit categories were using the class `RooCatType (: public TObject)`; instead of an integer to represent category states. It contains an integer; and a char[256], which can store a part of the category name.; This prevents fast batch access, and increases the overhead for data storage; and data loading. From now on, categories are represented as integers.; Every state index also has a state name attached, but instead of storing; it in each row of the dataset, the mapping from state index to; state name is now stored in the category class. **For reviewers**:; Although there is a lot of noise, that's mostly getting rid of unnecessary classes. The user-facing interfaces are stable (to be proven by the fact that all the rest of RooFit still compiles, and that tutorials run).; This is the chance to modernise/improve the `RooCategory` interface. It would be nice if you could specifically look at `RooCategory.h`, maybe in conjunction with the modernised tutorial on how they can be used in the future:; https://github.com/hageboeck/root/blob/cleanupCategories/tutorials/roofit/rf404_categories.C. More details what happened:; - Replace RooCatType by an integer.; - Replace names saved in each instance of RooCatType by a map in; RooAbsCategory that maps state numbers to strings. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Convert RooVectorDataStore from saving RooCatType to integers of; category states.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Provide new interfaces for categories to work without RooCatType.; - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change.; - Add function to define multiple category states at once with; initialiser lists. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType wh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219:236,access,access,236,https://root.cern,https://github.com/root-project/root/pull/5219,1,['access'],['access']
Security,Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to; get the TCling's instance of the cling interpreter. This in turn might; need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing; system modules such as libc and stl to be loaded. This criples rootcling; and whenever it #includes a header file we get an error that we included; a module from ROOT which depends on modules stl but it is not accessible; through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1395:456,access,accessible,456,https://root.cern,https://github.com/root-project/root/pull/1395,1,['access'],['accessible']
Security,"Running. ```cpp; // repro.C; void repro() {; TMVA::Experimental::RBDT<> bdt(""Bc2TauNu_BDT"", ""doesnotexist.root"");; }; ```; as. ```; root -l -b -q repro.C; ```; yields:; ```; Error in <TFile::TFile>: file /tmp/doesnotexist.root does not exist. *** Break *** segmentation violation; ```. RBDT should probably protect nullptr accesses or similar and throw an exception or return an error rather than crashing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9316:323,access,accesses,323,https://root.cern,https://github.com/root-project/root/issues/9316,1,['access'],['accesses']
Security,SHA-256 Hash Mismatch for xrootd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10578:8,Hash,Hash,8,https://root.cern,https://github.com/root-project/root/issues/10578,1,['Hash'],['Hash']
Security,Security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13663:0,Secur,Security,0,https://root.cern,https://github.com/root-project/root/pull/13663,1,['Secur'],['Security']
Security,"Seems to be, cling/llvm9 have problems to parse OCCI headers. ; With enabled oracle hsimple.C crashes making some message about accessing libOracle module; In any case such form is preferable for plugins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7465:128,access,accessing,128,https://root.cern,https://github.com/root-project/root/pull/7465,1,['access'],['accessing']
Security,"Seems to be, cling/llvm9 have problems to parse OCCI headers.; If oracle plugin enabled, root crashes when running hsimple.C.; Looking in back-trace, one can identify that it crashes by accessing or rebuilding libOracle module.; Most simple way to resolve issue - remove OCCI includes from `TOracle...` header files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7497:186,access,accessing,186,https://root.cern,https://github.com/root-project/root/issues/7497,1,['access'],['accessing']
Security,Separate in method DL the training data in pure training and validation which is used to ; stop the iterative optimisation process. . Similar split should also be done now in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2844:61,validat,validation,61,https://root.cern,https://github.com/root-project/root/pull/2844,1,['validat'],['validation']
Security,"Several of us were surprised to discover that calling `TTree::FlushBaskets()` does not actually create a new event cluster in terms of the TTree metadata -- even though it effectively creates an event cluster in terms of the physical disk layout!. There may be cases where the user has special knowledge of the file where using the internally-calculated auto-flush intervals result in poor choices; CMS's NanoAOD is one such case. However, when CMS switched to calling `FlushBaskets` explicitly and disabling `AutoFlush`, this triggered unexpected behavior in `RDataFrame` as the file did not appear to have any proper event clusters. This change causes the `FlushBaskets` method to create an explicit event cluster. As we used the old behavior in some ROOT unit tests, the prior behavior is now accessible through a flag passed to the method. Fixes: ROOT-9442",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412:796,access,accessible,796,https://root.cern,https://github.com/root-project/root/pull/2412,1,['access'],['accessible']
Security,Similar functionality can be accessed through the RRecordField (untyped records) and RVectorField::CreateUntyped() (untyped collections). Fixes #14642,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16585:29,access,accessed,29,https://root.cern,https://github.com/root-project/root/pull/16585,1,['access'],['accessed']
Security,"Since 79a669bb1cd0ccd8bcaeb6c8f6b09c5ced761ac7, the mechanism that cleans up other thread's `gDirectory` when a file is deleted by the current thread is **disabled** leading to many problems, including the issues seen in https://github.com/cms-sw/cmssw/issues/40290 (`TContext` accessing/using a delete objects).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11907:278,access,accessing,278,https://root.cern,https://github.com/root-project/root/issues/11907,1,['access'],['accessing']
Security,"Since ROOT 6.22 is the second latest ROOT version that CMS uses in production, I need to make it compile again in order to do some validations. This means some PyROOT fixes need to be backported to make it compile again with newer Python versions:. * https://github.com/root-project/root/pull/10734; * https://github.com/root-project/root/pull/6994; * https://github.com/root-project/root/pull/7022; * https://github.com/root-project/root/pull/7961; * https://github.com/root-project/root/pull/8036; * https://github.com/root-project/root/pull/8257; * https://github.com/root-project/root/pull/10047",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14294:131,validat,validations,131,https://root.cern,https://github.com/root-project/root/pull/14294,1,['validat'],['validations']
Security,"Since commit 9030460858 (""[ntuple] add xxhash3 checksum handling to anchor""), we require xxHash 0.8 while Ubuntu 20.04 only has version 0.7.3 in its package repositories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14338:47,checksum,checksum,47,https://root.cern,https://github.com/root-project/root/pull/14338,1,['checksum'],['checksum']
Security,Since root-project/root@10a0dec we do not expose flags from the build system; directly to rootcling. We use that opportunity to simplify the setup while; preparing rootcling for the new argument parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4269:42,expose,expose,42,https://root.cern,https://github.com/root-project/root/pull/4269,1,['expose'],['expose']
Security,"Since the distributed RDataFrame feature is experimental let's give it access to more modern features of the Python language. 3.7 seems a good compromise between maturity (released in October 2018) and features (typing, dataclasses). **NOTE**:; I'm uncertain about whether giving a message at configure time that DistRDF is active in the build process. I have put a simple message for now, could be changed or removed. Let me know your opinions",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9060:71,access,access,71,https://root.cern,https://github.com/root-project/root/pull/9060,1,['access'],['access']
Security,"Since the upgrade to LLVM 13, at least two tests are failing because of broken interactions with multiple interpreters:; * `CodeUnloading/AtExit.C` does not find the symbol `gChild`.; * `MultipleInterpreters/MultipleInterpreters.C` cannot find the symbol `_ZN5cling7runtime6gClingE` / `cling::runtime::gCling` during `ChildInterp.echo()` (the first usage to construct `cling::Interpreter ChildInterp(*gCling, 1, argV);` seems fine). Based on this, one might theorize that the child interpreter doesn't have access to symbols declared in its parent (not sure how this worked before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12455:507,access,access,507,https://root.cern,https://github.com/root-project/root/issues/12455,1,['access'],['access']
Security,"Small update. When working with the cross validation manual, I came across these inconveniences.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1694:42,validat,validation,42,https://root.cern,https://github.com/root-project/root/pull/1694,1,['validat'],['validation']
Security,"So far, the `ParamHistFunc` BatchMode implementation was still; sub-uptimal because it used the non-vectorized interface of the; RooDataHist. Using the new `RooAbsBinning::binNumbers()` function too look up; multiple bin indices at once, the implementaiton can be improved and; sped. In the three-dimensional many-bin case, the new implementation is a bit; more than three times faster than the old one. This should benefit; HistFactory fits with many bins. A new `testParamHistFunc` unit test was also introduced to validate the; results of a ParamHistFunc both with and without the batch mode,; comparing to manually computed reference results.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11170:517,validat,validate,517,https://root.cern,https://github.com/root-project/root/pull/11170,1,['validat'],['validate']
Security,"So here are the changes that I needed to make from the comments of the last pull request and some other changes:; 1) I've added the name for a enum constant because I realised when declaring kMyConstant = 42 that I didn't save the name.; 2) I've added some checks in the TCling to see if the TEnum and TEnumConstants are actually created, because when I run the test:; // MyEnumComment; enum EMyEnum {; kMyEnumConstant = 42 // enumConstantComment; };. int assertTEnum(); {. ```; if (!(TEnum*)gROOT->GetListOfEnums()->FindObject(""EMyEnum"")) {; Error (""TEnum"", ""Constructor of TEnum failure."");; return -1;; ```. }; It does return and Error. I tried that on the root[0] promp as well and the address of GetListOfEnum is not NULL(because the HashTable is created), but the address of FindObject is 0x0. ; Now I don't get the Errors of TEnum and TEnumConstant are not created..I wanted to check whether they are added to the fEnums and fGlobals, but Add() for TCollection is a void function. My best guess is that they are not added to the lists, maybe you can see why...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2:739,Hash,HashTable,739,https://root.cern,https://github.com/root-project/root/pull/2,1,['Hash'],['HashTable']
Security,Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4956:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/4956,1,['access'],['access']
Security,"Some garbage access warnings, null dereferencing, and buffer bounding warnings by Clang:; (ROOT master of today, with xrootd off); ```; /opt/root_src/build/rmkdepend/cppsetup.c:150:4: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:150; /opt/root_src/build/rmkdepend/cppsetup.c:180:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:13,access,access,13,https://root.cern,https://github.com/root-project/root/issues/7410,5,"['access', 'secur']","['access', 'security']"
Security,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:195,inject,injects,195,https://root.cern,https://github.com/root-project/root/pull/6969,1,['inject'],['injects']
Security,"Some platforms have problems (rightfully so!) in finding symbols; from libCling.so, which is dlopened with RTLD_LOCAL. libCling should; me made available to RuntimeDyld, but priority should be given to; the main binary, i.e. the ""traditional"" symbol resolution. This is; achieved by injecting libCling as a symbol source into the; DynLibManager *after* the initialization of cling::Interpreter. This fixes e.g. ROOT-10499, by resolving to the process's `cout`,; not the ""copy"" in libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6108:283,inject,injecting,283,https://root.cern,https://github.com/root-project/root/pull/6108,1,['inject'],['injecting']
Security,"Some platforms respect RTLD_LOCAL: symbols from libraries loaded with; this flag cannot be resolved by dlsym through the process. They should; instead be exposed to the JIT by calling ExposeHiddenSharedLibrarySymbols().; But then the JIT needs to actually make use of these libraries from; symbol resolution. That is done by setting SearchOrder to SO_LoadedLast, as; nicely documented in that flag. Fixes ROOT not finding libCling symbols on some platforms, e.g. CentOS7,; Ubuntu 16 and 18.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6126:154,expose,exposed,154,https://root.cern,https://github.com/root-project/root/pull/6126,2,"['Expose', 'expose']","['ExposeHiddenSharedLibrarySymbols', 'exposed']"
Security,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:695,access,access,695,https://root.cern,https://github.com/root-project/root/pull/5985,2,['access'],['access']
Security,"Starting from the `debian:sid` Docker image, create the following environment:; ```; apt update && apt dist-upgrade; apt install cmake gcc g++ git libxrootd-client-dev ninja-build python3; ```; Then clone `root.git` and configure + build with; ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dx11=OFF ../root/; ninja; ```; Afterwards try executing `./bin/root.exe tutorials/dataframe/df103_NanoAODHiggsAnalysis.C`. It will hang and setting `XRD_LOGLEVEL=Debug` reveals:; ```; [2023-02-06 12:00:28.136048 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Sending authentication data; [2023-02-06 12:00:28.137346 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using krb5; [2023-02-06 12:00:28.137406 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol krb5: Seckrb5: No or invalid credentials; No credentials cache found (p=xrootd/eospublic.cern.ch@CERN.CH).; [2023-02-06 12:00:28.137968 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using gsi; [2023-02-06 12:00:32.761097 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol gsi: Secgsi: ErrParseBuffer: unknown CA: cannot verify server certificate: kXGS_init; ```. Instead, installing the `xrootd-client` package and running; ```; xrdcp root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/SMHiggsToZZTo4L.root .; ```; works just fine - the `Debug` log shows that it proceeds with `Trying to authenticate using uni` (after `Cannot get credentials for protocol gsi` was also signaled kind of immediately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231:572,authenticat,authentication,572,https://root.cern,https://github.com/root-project/root/issues/12231,5,"['authenticat', 'certificate']","['authenticate', 'authentication', 'certificate']"
Security,Store internal RDataFrame in distributed mode and expose GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11816:50,expose,expose,50,https://root.cern,https://github.com/root-project/root/pull/11816,1,['expose'],['expose']
Security,Stratified Splitting Functionality Added in Cross Validation in TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2557:50,Validat,Validation,50,https://root.cern,https://github.com/root-project/root/pull/2557,1,['Validat'],['Validation']
Security,Switch on hash-assisted finding workspaces with 50 or more datasets. Note on the arbitrary 200 elements:; The list will double its size of the initial 200 elements are not enough.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5740:10,hash,hash-assisted,10,https://root.cern,https://github.com/root-project/root/pull/5740,1,['hash'],['hash-assisted']
Security,"Systems with older versions of glibc do not have modern functions to get cryptographically secure random numbers. Introduce a fallback to using `/dev/urandom` in such cases. A notable example is the conda-build environment which is based on Centos7 where the glibc version is 2.17. This change is *required* to fix the conda build, so it must be backported to 6.32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15417:91,secur,secure,91,https://root.cern,https://github.com/root-project/root/pull/15417,1,['secur'],['secure']
Security,TBB exposed in public includes of Thread library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8022:4,expose,exposed,4,https://root.cern,https://github.com/root-project/root/issues/8022,1,['expose'],['exposed']
Security,"TFile::Open(), HTTP basic authentication and DaviX",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9072:26,authenticat,authentication,26,https://root.cern,https://github.com/root-project/root/issues/9072,1,['authenticat'],['authentication']
Security,"TFormula indirectly accesses gROOT->fGlobalFunctions. Therefore to safely call different TFormula on different threads, access to the global function list must be serialized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/31:20,access,accesses,20,https://root.cern,https://github.com/root-project/root/pull/31,2,['access'],"['access', 'accesses']"
Security,TMessage: do not access not-allocated buffer ROOT-10340,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:17,access,access,17,https://root.cern,https://github.com/root-project/root/pull/4551,1,['access'],['access']
Security,"TNamedBranchProxy did not implement a Hash method.; Therefore when adding TNamedBranchProxy instances to the THashList dedicated to their bookkeping in TTreeReader TObject::Hash was used.; Unfortunately when trying to find the TNamedBranchProxies, their name was used and the hash was built differently by THashList (based on the name).; In order to fix this the following steps were taken.; - THashList was replaced by an unordered_map with names as keys and unique_ptr<TNamedBranchProxy> as values. The unique_ptr is used to automatically manage ownership.; - The methods of TTreeReader were adapted to use this new container as well as the code in TTreeReaderValue and TTreeReaderArray. A real usecase from CMS where the mass of the W boson is studied shows a significant speedup (30%).; The code uses TDataFrame and several nodes are created which read from the same branch in an input tree which holds weights in a collection.; This configuration stressed the performance degradation pattern fixed by this commit as it triggered multiple times the deserialisation of the ""weights branch"". Thanks to Elisabetta Manca and Lorenzo Bianchini for providing the bug report and initial reproducer. These changes will need to be backported at least to ROOT 6.12",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768:38,Hash,Hash,38,https://root.cern,https://github.com/root-project/root/pull/1768,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. ; This makes ; ``` while((task=(TTask*)next())) {```; an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. ; C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:6,expose,exposes,6,https://root.cern,https://github.com/root-project/root/issues/11663,1,['expose'],['exposes']
Security,"TThreadedObject currently has a fixed amount of available slots,; the number of which can be set at construction time. This makes; it impossible to use TThreadedObject inside TBB tasks safely, because; TBB can potentially swap out worker threads for different threads at; runtime, resulting in TThreadedObject counting more thread ID's than; slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,; so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5464:379,access,accesses,379,https://root.cern,https://github.com/root-project/root/pull/5464,1,['access'],['accesses']
Security,TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:339; 27: Returning from 'TVectorT::ResizeTo' in /opt/root_src/math/matrix/src/TVectorT.cxx:1049; 28: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TVectorT.cxx:1051; /opt/root_src/math/minuit/src/TFitter.cxx:164:10: warning: Value stored to 'igrad' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'igrad' is never read in /opt/root_src/math/minuit/src/TFitter.cxx:164; /opt/root_src/math/minuit/src/TFitter.cxx:182:7: warning: Value stored to 'igrad' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'igrad' is never read in /opt/root_src/math/minuit/src/TFitter.cxx:182; /opt/root_src/math/minuit/src/TFitter.cxx:483:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/math/minuit/src/TFitter.cxx:483; /opt/root_src/math/minuit/src/TLinearFitter.cxx:1375:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/math/minuit/src/TLinearFitter.cxx:1375; /opt/root_src/math/minuit/src/TLinearFitter.cxx:2152:10: warning: Value stored to 'chi2' is never read [clang-analyze,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:158013,secur,security,158013,https://root.cern,https://github.com/root-project/root/issues/7458,1,['secur'],['security']
Security,Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 22: Called C++ object pointer is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:192; /opt/root_src/tree/tree/src/TLeaf.cxx:237:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:237; /opt/root_src/tree/tree/src/TLeaf.cxx:270:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:270; /opt/root_src/tree/tree/src/TLeaf.cxx:272:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:272; /opt/root_src/tree/tree/src/TLeafObject.cxx:94:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:69658,secur,security,69658,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,"Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3535:344,access,accessed,344,https://root.cern,https://github.com/root-project/root/pull/3535,1,['access'],['accessed']
Security,"The AddressSanitizer also loads the LeakSanitizer flags and even though the documentation suggests that `exitcode` can be set per sanitizer, this doesn't appear to be the case and our tests exit with code 0 after the AddressSanitizer found a problem. After this change, around 100 tests will fail due to several issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005:130,sanitiz,sanitizer,130,https://root.cern,https://github.com/root-project/root/pull/10005,1,['sanitiz'],['sanitizer']
Security,"The Aggregate method was calling CheckAndFillDSColumns with an index sequence; of length 2 rather than 1 (the aggregator lambda does take 2 arguments,; but only the second corresponds to an RDF column). This resulted in; a harmless out of bounds access in a vector<bool>: two bits were checked; rather than one, but because of bit-packing the capacity of a vector<bool>; is always a multiple of 8 so this never resulted in access to invalid; memory (and because of zero-initialization, the out-of-bounds values always; happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6214:246,access,access,246,https://root.cern,https://github.com/root-project/root/pull/6214,2,['access'],['access']
Security,"The FileAndIndex class needs to be ordered and hashable because in `get_clustered_ranges` objects of this class are stored in a set and sorted to find, per each partition of the distributed RDataFrame, what files need to be considered.; Python classes get `__eq__` and `__hash__` methods by default, but not the ordering ones. Without this commit, `filelist` members of the `TreeRange` objects resulting from `get_clustered_ranges` would just be a 1:1 copy of the filenames that each cluster in the chain of that partition belongs to.; For example, given a tree with ten thousand entries and ten clusters split in two partitions, one would get:. Partition 0; Range of entries [0, 5000]; Filelist of the partition ['tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root']. Partition 1; Range of entries [5000, 10000]; Filelist of the partition ['tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root', 'tree10000entries10clusters.root']. So effectively we would be sending ranges with one filename per cluster in the range, which would lead to wrong reads.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8637:47,hash,hashable,47,https://root.cern,https://github.com/root-project/root/pull/8637,1,['hash'],['hashable']
Security,"The LoopManager now tracks the actions that have already run. This commit is needed by the Graph drawing PR. This can't be directly tested as the LM is not exposed. To test it I used the following code, not commited. RInterface has a Test() method that just call GetAllActions() on the RLoopManager. ```; TEST_P(RDFSimpleTests, Action); {; RDataFrame rd1(8);; EXPECT_EQ(rd1.Test().size(), 0);; auto a1 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 1);; auto a2 = rd1.Mean<>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 2);; auto a3 = rd1.Count();. EXPECT_EQ(rd1.Test().size(), 3);; *a1;; EXPECT_EQ(rd1.Test().size(), 3);; {; auto a4 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 4);; }; EXPECT_EQ(rd1.Test().size(), 3);; {; auto a4 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 4);; *a4;; }; EXPECT_EQ(rd1.Test().size(), 3);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2470:156,expose,exposed,156,https://root.cern,https://github.com/root-project/root/pull/2470,1,['expose'],['exposed']
Security,"The RooMinimizer interface does not allow for changing the number of points on a likelihood contour.; By promoting this parameter to a default argument, this is now accessible to the user.; Doxygen was updated accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3327:165,access,accessible,165,https://root.cern,https://github.com/root-project/root/pull/3327,1,['access'],['accessible']
Security,"The TFile objects need to be closed before the ROOT files can be; deleted. Otherwise, we get errors such as these on Windows 10:. ```; Traceback (most recent call last):; File ""C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/pyroot/pyroot006_tcontext_context_manager.py"", line 56, in <module>; os.remove(""pyroot006_file_{}.root"".format(i)); PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pyroot006_file_1.root'; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_pyroot_pyroot006_tcontext_context_manager_py/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10378:411,access,access,411,https://root.cern,https://github.com/root-project/root/pull/10378,1,['access'],['access']
Security,"The TRandom3 generator was observed to fail; a very simple test on the SetSeed/GetSeed interface:. ```; gRandom->SetSeed(11);; auto a = gRandom->GetSeed();; gRandom->SetSeed(12);; auto b = gRandom->GetSeed();; assert(a != b);; ```. Indeed a `GetSeed()` following any `SetSeed(seed)` call always returns the magic number 624. This is because in the current implementation. `GetSeed() { return fMT[fCount624]; }`. we access memory location `fMT[624]` which does not exist in fMT ... and so the value of fCount624 is returned, which happens to be `624`. This commit fixes this bug by imposing an index range between 0 and 623.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135:415,access,access,415,https://root.cern,https://github.com/root-project/root/pull/14135,1,['access'],['access']
Security,"The TestData target is currently declared ALL, which means it is always executed during the build.; However, the data it downloads is only used for running the stressProof test, so if this test is not run the downloaded data files are not needed. By removing the TestData target from ALL and making it a requirement of the test-stressproof target instead, the files are only downloaded if they are needed. Disabling the stressProof test now also disables the download of the data files. This is important when building in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/402:553,access,access,553,https://root.cern,https://github.com/root-project/root/pull/402,1,['access'],['access']
Security,"The _miss cache_, implemented in this pull request, implements an optimization when the TTreeCache fails to work. The miss cache will keep track of any branch that has been accessed; when there is a TTC miss, it automatically fetches the current basket for all active branches. This should have a worst case read size equal to the size of the file's cluster size, but potentially a significant savings in the number of IO operations. The latter is extremely useful if we're doing IO on high-latency links. This optimization works well for the ""trigger pattern,"" where the user may examine a number of branches and, when the event contents for those branches passes a particular filter, reads out the remaining branches. If there are 100 additional branches, this would do all reads in a single network round-trip as opposed to 100 round trips. The approach has served us well in CMS and been utilized as a layer on top of ROOT for about 3 years. Unfortunately, we must iterate through a set of branches and find the correct basket. This is not necessarily a cheap CPU operation and may be too expensive if the underlying filesystem is SSD-based. Hence, we turn this optimization off by default.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/240:173,access,accessed,173,https://root.cern,https://github.com/root-project/root/pull/240,1,['access'],['accessed']
Security,"The `RooAbsPdf::_normSet` member should be not used, because it can; happen in many situations that the RooArgSet it points to gets out of; scope and then you get a crash. There were several cases reported on the; forum where this happened with a RooAddPdf recently, becaues with ROOT; 6.26 some logic of the RooAddPdf got changed to better deal with empty; normalization sets. This commit avoids using `_normSet` by overriding `getValV` in RooAddPdf; directly, instead of `evaluate()`. This way, it has access to the actual; normalization set that is passed to the call to `getVal()`. For the batch mode, we now pass `nullptr` to; `RooAddPdf::getNormAndCache()` instead of `_normSet`. In this case it; falls back to using `_copyOfLastNormSet`, which is guaranteed to still; be valid because it's a unique_ptr owned by the RooAddPdf itself. Needs to be backported to ROOT 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:504,access,access,504,https://root.cern,https://github.com/root-project/root/pull/10550,1,['access'],['access']
Security,The `SealPage()` signature is already rather large and it will grow more with page checksums. So I felt it's time to turn the parameters into a config struct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15894:83,checksum,checksums,83,https://root.cern,https://github.com/root-project/root/pull/15894,1,['checksum'],['checksums']
Security,"The `TestGauss` unit tests in roottest are failing with Jonas' ROOT; build (gcc 10 on Arch Linux). The failure was tracked down to a; `nullptr` dereferencing in when accessing `RunContext::spans`. The origin of the `nullptr` is in `RooVectorDataStore::getBatches`,; where the `unordered_map` with pointers to the variables is filled via; `unordered_map::emplace`. For some reason, the key becomes a nullptr; *right after emplacing* ([link to code](https://github.com/root-project/root/blob/https://github.com/root-project/root/blob/9296e5ed912b3010456fa4b50db77f2c4c97a09a/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345)). For some other reason, wrapping the `RooAbsReal const*` pointer in a; struct that is used as the key for `RunContext::spans` solves the; problem. This is implemented in this commit. This PR is more of a draft PR for now, because before merging I would really like to understand what's going on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8590:166,access,accessing,166,https://root.cern,https://github.com/root-project/root/pull/8590,1,['access'],['accessing']
Security,"The `df103_NanoAODHiggsAnalysis` tutorial, already available in C++, has been converted to PyROOT. In this tutorial, many functions are called as arguments to nodes in the RDataFrame computational graph. In Python, these could be either written as multiline strings and then exposed to the C++ interpeter one by one with `gInterpreter.Processline()`, or put all together in one C++ header which is then declared to the interpreter via `gInterpreter.Declare()`. This second approach has been pursued, thus there are two files making up the Python version of the tutorial: one `.h` file for the header and one `.py` file for the analysis itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4019:275,expose,exposed,275,https://root.cern,https://github.com/root-project/root/pull/4019,1,['expose'],['exposed']
Security,The access to the static class member TGeoManager::fgDefaultUnits in an inline function causes problem.; This PR moves the access to this class member to the compiled code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7191:4,access,access,4,https://root.cern,https://github.com/root-project/root/pull/7191,4,['access'],['access']
Security,The bogus XML designation causes the file to fail XML diagnostic tests. Test description:; Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:; ----. Result: VERIFY; 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:; Extra content at the end of the document. Suggested Remedy:; Correct the reported errors in the XML document,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11646:393,Authoriz,Authorization,393,https://root.cern,https://github.com/root-project/root/pull/11646,1,['Authoriz'],['Authorization']
Security,"The compiler invokations run by ACLiC were not updated in case of a build with address sanitizer options enabled. This resulted in spurious warnings of the sort:. ```; $: root -q -l -b test.C+. Processing test.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /tmp/./test_C.so; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15840:87,sanitiz,sanitizer,87,https://root.cern,https://github.com/root-project/root/pull/15840,1,['sanitiz'],['sanitizer']
Security,"The current API forces the user to copy the entire fColumnRanges map and do a map lookup if they want to iterate the column ranges. With this change, one can simply access the underlying map directly, avoiding extra work in most cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022:165,access,access,165,https://root.cern,https://github.com/root-project/root/pull/16022,1,['access'],['access']
Security,"The custom hash table implementation RooHashTable is only used in; RooLinkedList for a transient data member. By using std::unordered_map; instead, RooHashTable gets obsolete and could be deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7818:11,hash,hash,11,https://root.cern,https://github.com/root-project/root/pull/7818,1,['hash'],['hash']
Security,"The feature test __cpp_lib_three_way_comparison is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525. (cherry picked from commit b85231d2ad62645f0fe7291a64284f61bb8a83c2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12803:115,expose,expose,115,https://root.cern,https://github.com/root-project/root/pull/12803,1,['expose'],['expose']
Security,"The feature test `__cpp_lib_three_way_comparison` is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12792:117,expose,expose,117,https://root.cern,https://github.com/root-project/root/pull/12792,1,['expose'],['expose']
Security,"The field range of a view is determined on construction. If the field is empty (no columns), the field range remains undefined. Currently, in this case the creation of the view fails. Change this to instead only fail on the attempt to actually access the field range (as opposed to, e.g., iterate over the entry range of the empty field). Backport of #16832 . Fixes #16826",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16833:244,access,access,244,https://root.cern,https://github.com/root-project/root/pull/16833,1,['access'],['access']
Security,"The field range of a view is determined on construction. If the field is empty (no columns), the field range remains undefined. Currently, in this case the creation of the view fails. Change this to instead only fail on the attempt to actually access the field range (as opposed to, e.g., iterate over the entry range of the empty field). Fixes #16826 . @amete FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16832:244,access,access,244,https://root.cern,https://github.com/root-project/root/pull/16832,1,['access'],['access']
Security,"The functionality to fit pulls in the RooMCStudy with a Gaussian is; widely used, and it's not good that it uses a RooGenericPdf because of; the numeric integration. Probably the RooGaussian was not used because unlike the RooMCStudy, the; RooGaussian is not in RooFitCore and using it would result in a circular; dependency. This commit suggests a way to use the RooGaussian anyway, via the; RooWorkspace factory interface. The PR also includes a second commit that gets rid of manual memory management in the `RooMCStudy` class, which also affects the friend class `RooAbsMCStudyModule` that accesses some protected members of the RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11777:594,access,accesses,594,https://root.cern,https://github.com/root-project/root/pull/11777,1,['access'],['accesses']
Security,"The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it.; ; Kudos Arpitha Raghunandan (@arpi-r)!. We still need some performance measurements but the preliminary results are promising. Performance; ===. Methodology; ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:; 1) root master without modules (modulesoff); 2) root master with modules (moduleson); 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation; ---; A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016:56,hash,hash,56,https://root.cern,https://github.com/root-project/root/pull/4016,1,['hash'],['hash']
Security,"The goal of the class is to be an (almost) drop in replacement for SmallVector and std::vector when those are presized and filled later, as it happens in SourceManager and ASTReader. By doing so, sparsely accessed PagedVector can profit from reduced memory footprint. Co-authored-by: Jonas Hahnfeld <jonas.hahnfeld@cern.ch>. (cherry picked from commit 9c7bac05ea52cea6757f083fec8e2b794f8b79d6, backport of https://github.com/root-project/root/pull/13808)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14411:205,access,accessed,205,https://root.cern,https://github.com/root-project/root/pull/14411,1,['access'],['accessed']
Security,"The idea is to have an identifier that describes the used dataset (name of the TTree or similar), make this info accessible as public API and also add it to `Describe`. See the discussion here:. https://github.com/root-project/root/issues/7561#issuecomment-817629082. https://github.com/root-project/root/issues/7561#issuecomment-817717882. Remember to make the identifier returned by this API subject to change because it's for interactive use and not to be parsed automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7829:113,access,accessible,113,https://root.cern,https://github.com/root-project/root/issues/7829,1,['access'],['accessible']
Security,"The idea is to have an identifier that describes the used datasource (or TTree or simple DF), make this info accessible as public API and also add it to `Describe`. See the discussion here:. https://github.com/root-project/root/issues/7561#issuecomment-817629082. https://github.com/root-project/root/issues/7561#issuecomment-817717882. Remember to make the identifier returned by this API subject to change because it's for interactive use and not to be parsed automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7828:109,access,accessible,109,https://root.cern,https://github.com/root-project/root/issues/7828,1,['access'],['accessible']
Security,"The inner logic is the same as TEntryList::Enter(entry, treepointer); but we assume that `entry` is always a local entry, corresponding to; the treename and filename passed as argument. This is useful e.g. in RDataFrame where we can tell an output TEntryList the tree and file name, but the actual TTree pointer is not accessible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10186:319,access,accessible,319,https://root.cern,https://github.com/root-project/root/pull/10186,1,['access'],['accessible']
Security,"The interfaces of `RooPoisson` and `RooDataSet` are extended to support some of the new developments in other PRs:. * getters for `x` and `mean` of RooPoisson (needed by https://github.com/root-project/root/pull/8944); * `RooDataSet::weightVar()` to access weight variable if set (needed by https://github.com/root-project/root/pull/8944, https://github.com/root-project/root/pull/9004)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9337:250,access,access,250,https://root.cern,https://github.com/root-project/root/pull/9337,1,['access'],['access']
Security,"The issue is initially reported and discussed on the ROOT forum [here](https://root-forum.cern.ch/t/rdataframe-tree-friends-branches-with-identical-variable-name-but-different-types/42701/4). ### Describe the bug. RDataFrame has two tree friends.; Both tree friends have a branch with identical name.; Type of a branch in the 1st friend tree: XYZVector; Type of a branch in the 2nd friend tree: vector\<XYZTVector>. 1st friend tree is attached to RDataFrame before 2nd friend tree.; Access of 2nd friend tree branch results in error due to unexpected type of the branch assumed by RDataFrame as shown in the stand alone example bellow. ### To Reproduce. Run this stand alone example:. ```; import ROOT. vectors = '''; #include ""Math/Vector3D.h""; #include ""Math/Vector4D.h""; #include ""TFile.h""; #include ""TTree.h""; #include <vector>; using namespace ROOT::Math;; using namespace ROOT::VecOps;. RVec <double> getArrZ(const RVec<XYZTVector>& vec){; auto getItemZ = [](const XYZTVector& item) { return item.Z(); };; return Map(vec, getItemZ);; }. '''. ROOT.gInterpreter.Declare(vectors). if __name__ == ""__main__"":; ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(10, 10, 10)"").Snapshot(""Particle"", ""f1.root""); ROOT.RDataFrame(1).Define(""vec"", ""XYZVector(20, 20, 20)"").Snapshot(""Cluster"", ""f2.root""); ROOT.RDataFrame(1).Define(""vec"", ""std::vector<XYZTVector>{XYZTVector(30, 30, 30, 30)}"").Snapshot(""Vertex"", ""f3.root""). ch1 = ROOT.TChain(""Particle""); ch1.Add(""f1.root""); ch2 = ROOT.TChain(""Cluster""); ch2.Add(""f2.root""); ch3 = ROOT.TChain(""Vertex""); ch3.Add(""f3.root""). ch1.AddFriend(ch2, ""cluster""); ch1.AddFriend(ch3, ""vertex""). df = ROOT.RDataFrame(ch1); print(df.Define(""particle_z"", ""vec.Z()"").Histo1D(""particle_z"").GetMean()); print(df.Define(""cluster_z"", ""cluster.vec.Z()"").Histo1D(""cluster_z"").GetMean()); print(df.Define(""vertex_z"", ""getArrZ(vertex.vec)"").Histo1D(""vertex_z"").GetMean()); ```. which results in the error on 3rd print. Full output:. ```; 10.0; 20.0; input_line_99:2:142: error: no matc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944:483,Access,Access,483,https://root.cern,https://github.com/root-project/root/issues/6944,1,['Access'],['Access']
Security,"The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15583:212,validat,validate,212,https://root.cern,https://github.com/root-project/root/pull/15583,2,['validat'],['validate']
Security,"The link **Getting started with Root** redirects to [this page](https://root.cern/getting-started) which is no longer accessible, it should redirect [here](https://root.cern/get_started).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6976:118,access,accessible,118,https://root.cern,https://github.com/root-project/root/pull/6976,1,['access'],['accessible']
Security,The list returned from TROOT::GetListOfFunctions needs to be protected; from concurrent access to allow use of TFormulas on different; threads.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/24:88,access,access,88,https://root.cern,https://github.com/root-project/root/pull/24,1,['access'],['access']
Security,The logic for summing over histogram bins in different ranges used in; RooHistPdf is also implemented in RooParamHistFunc. This means the; range is now considered when computing integrals of RooParamHistFunc. RooParamHistFunc allows you to scale the counts in each bin with a; parameter. The interface of RooDataHist::sum was extended with a; function parameter to inject the logic of scaling the bin weight; depending on the bin index. This commit partly fixes issue #7182. We still need to implement the; range feature in RooHistFunc.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7198:365,inject,inject,365,https://root.cern,https://github.com/root-project/root/pull/7198,1,['inject'],['inject']
Security,"The logic from RooAbsArg is copied into RooAbsData. This allows to use the hash-map functionality of RooLinkedList; for RooAbsData objects, as the namePtr mechanism allows to track; renaming and therefore avoids false negatives that result in; linear scans of the collection. In turn, this improves significantly the run-time of large workspace; imports (x2 to x4), which were dominated by embeddedData() calls.; This patch is based on the JSON tool use-case, but presumably will; significantly also improve other heavy uses of workspace import, such; as Higgs combination workspaces manipulation workflows. The cost of one additional pointer per RooAbsData object seems a low; price to pay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684:75,hash,hash-map,75,https://root.cern,https://github.com/root-project/root/pull/9684,1,['hash'],['hash-map']
Security,"The maximum unsigned int value was used for an integer resulting in a negative integer value and this was causing a bug when accessing the numfold parameter in the CvSplit expression formula.; The bug is present when the parameter ""NumFold"" is not used in the SPlit expression.; See https://root-forum.cern.ch/t/tmva-crossvalidation-crashes-on-destructor-pyroot/51195",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11267:125,access,accessing,125,https://root.cern,https://github.com/root-project/root/pull/11267,1,['access'],['accessing']
Security,"The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:; 1) Replace gROOTMutex by a TRWMutexImp; 2) Add R__READLOCKGUARD; 3) Add a TListWithRWLock and THashListWithRWLock; 4) Use those in TROOT; 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles); 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock.; 7) Introduce scalability test on RecursiveRemove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/676:43,access,access,43,https://root.cern,https://github.com/root-project/root/pull/676,1,['access'],['access']
Security,"The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568:27,validat,validation,27,https://root.cern,https://github.com/root-project/root/pull/1568,1,['validat'],['validation']
Security,"The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED.; [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library.; * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp.; * lib/MetaProcessor/CMakeLists.txt: Likewise.; * lib/Utils/CMakeLists.txt: Likewise.; * tools/Jupyter/CMakeLists.txt: Likewise.; * tools/driver/CMakeLists.txt: Likewise.; * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally; -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563:245,expose,exposed,245,https://root.cern,https://github.com/root-project/root/pull/15563,1,['expose'],['exposed']
Security,"The operations done by the LookupHelper are costly in both memory and; performance. Almost every operation requires memory allocation and parsing; of often non-trivial C++ code. Unfortunately, the LookupHelper is used very intensively by rootcling and; ROOT. The callers usually do not use any caching mechanisms and redo the; expensive operations over and over even though the answer is known to be; the same as before. For instance, building the dictionary of shows:. ```; MathCore:; Cached entries: 217; Total parse requests: 54051; Cache hits: 53834; TreePlayer:; Cached entries: 183; Total parse requests: 57697; Cache hits: 57514; ```. This patch introduces the first set of caching functionality. In; particular, each LookupHelper::find* function allocates a memory buffer; which is then stored in the clang::SourceManager. We hash the buffer; content and keep a mapping between a hash and FileID and next time we; encounter the same content we do not allocate a new FileID but reuse the; old one. We see decrease in memory footprint by 7% for non-cxxmodules ROOT. For cxxmodules we see significant reduction of the pcm sizes (by half); which translates into rss improvements:. ```; master before:; cpu time = 0.291462 seconds; sys time = 0.064409 seconds; res memory = 345.816 Mbytes; vir memory = 573.508 Mbytes; master after:; cpu time = 0.235828 seconds; sys time = 0.098327 seconds; res memory = 260.012 Mbytes; vir memory = 377.945 Mbytes; ```. Patch by Yuka Takahashi and me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483:834,hash,hash,834,https://root.cern,https://github.com/root-project/root/pull/2483,2,['hash'],['hash']
Security,"The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12853:111,access,access,111,https://root.cern,https://github.com/root-project/root/pull/12853,1,['access'],['access']
Security,"The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12854:111,access,access,111,https://root.cern,https://github.com/root-project/root/pull/12854,1,['access'],['access']
Security,"The original issue is with some python tutorial failing on macOS nodes due to; ```; <TNetXNGFile::Open>: [FATAL] Auth failed; ```; Which in turn is due to a failure in loading some xrootd security libraries, among which; ```; [Error ][Utility ] Unable to pre-load libXrdSecpwd.so: Plugin unable to load libXrdSecpwd-4.so; dlopen(libXrdSecpwd-4.so, 256): image not found; ```. This happens because the library depends on other libraries (`libXrdCrypto`, `libXrdUtils`) and cannot find them since the `@rpath` palceholder is not substituted with the correct path to the libraries directory at runtime.; While this is true for the xrootd libraries in `build/lib`, it's not for the ones in `build/XROOTD-prefix/../src` which have the `LC_RPATH` variable set. The difference can be shown with `otool -l`; ```; $ otool -l build/lib/libXrdSecpwd-4.so > libXrdSecpwd_buildlib.txt; $ otool -l build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so > libXrdSecpwd_xrootdprefixlib.txt; $ diff libXrdSecpwd_buildlib.txt libXrdSecpwd_xrootdprefixlib.txt; < build/lib/libXrdSecpwd-4.so:; ---; > build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so:; 307a308,311; > cmd LC_RPATH; > cmdsize 80; > path /Users/sftnight/vpadulan/build/XROOTD-prefix/src/XROOTD-build/src (offset 12); > Load command 14; 312c316; < Load command 14; ---; ```. This `LC_RPATH` variable is set for our own libraries, e.g. `libHtml.so`; ```; $ otool -l build/lib/libHtml.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/build/lib (offset 12); ```; But for some reason this information is lost after building `builtin_xrootd` (probably while installing the libraries from the prefix to the install directory). A way to solve this is by manually adding the `CMAKE_INSTALL_RPATH` option to the `cmake` invokation of `builtin_xrootd` as is done in this PR. The result is:; ```; $ otool -l build/lib/libXrdSecpwd-4.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128:188,secur,security,188,https://root.cern,https://github.com/root-project/root/pull/6128,1,['secur'],['security']
Security,"The pr includes the implementation of a profiling mechanism for DistRDF.; When the feature is activated, profiling data is collected in each distributed node and merged to produce a visualization (i.e. flamegraph) on the client side. Activation of the feature is done using the ClingProfile ctx manager, accessed from ROOT.RDF.Experimental.Distributed module.; Usage example (dimuon analysis):. ```python; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ClingProfile = ROOT.RDF.Experimental.Distributed.ClingProfile; ...; df = RDataFrame(""Events"", files, npartitions=npartitions, daskclient=client); with ClingProfile(df, filename=""flamegraph.svg""):; df = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); ...; h.GetValue(); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11214:304,access,accessed,304,https://root.cern,https://github.com/root-project/root/pull/11214,1,['access'],['accessed']
Security,"The preprocessor defines enabled by the `march=native` flag are made part of the string of options to be hashed to create the artifact tarball names, therewith avoiding incompatible binaries. Moreover, the special builds preserve their overrides also for nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15839:105,hash,hashed,105,https://root.cern,https://github.com/root-project/root/pull/15839,1,['hash'],['hashed']
Security,"The pythonisation proposed in this PR injects a `__setitem__` implementation into `TClonesArray` that customizes the setting of an item. The `__setitem__` pythonization that `TClonesArray` inherits from `TSeqCollection` does not apply in this case and a redefinition is required. The reason is `TClonesArray `sets objects by constructing them in-place, which is impossible to support as the Python object given as value must exist a priori. It can, however, be memcpy'd and stolen, which is the approach used in this redefinition. This is also the reason why this pythonisation needs to be implemented in C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3423:38,inject,injects,38,https://root.cern,https://github.com/root-project/root/pull/3423,1,['inject'],['injects']
Security,The pythonization RDataFrame.AsNumpy looks for the attribute; RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found.; This error can not be triggered if ROOT is imported but is raised if; RDataFrame is accessed through cppyy.gbl. This PR implements a; protection for this skipping the pythonization if the pythonizer; function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4362:229,access,accessed,229,https://root.cern,https://github.com/root-project/root/pull/4362,1,['access'],['accessed']
Security,"The replacements removes the -Werror option for externals, which is intended.; However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5902:125,secur,security,125,https://root.cern,https://github.com/root-project/root/pull/5902,3,['secur'],['security']
Security,The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4516:11,integrity,integrity,11,https://root.cern,https://github.com/root-project/root/pull/4516,1,['integrity'],['integrity']
Security,The test fails (access violation) on Windows 64 built in RelWithDebInfo mode when running with `ctest` (i.e. it runs fine from the command prompt). So let's disable it on win64 for the time being.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10127:16,access,access,16,https://root.cern,https://github.com/root-project/root/pull/10127,1,['access'],['access']
Security,The test previously build an expression with 4096 occurrences of the 'x' variable. This was causing a segfault with the address sanitizer that is independent of RDataFrame and tracked at; https://github.com/root-project/root/issues/15818. Shorten the test expression to 100 occurences of 'x' which still represents a realistically long one-line expression and better decouples the clang-related asan issue from the rest of the RDataFrame testing infrastructure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15824:128,sanitiz,sanitizer,128,https://root.cern,https://github.com/root-project/root/pull/15824,1,['sanitiz'],['sanitizer']
Security,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:561,validat,validate,561,https://root.cern,https://github.com/root-project/root/pull/8065,1,['validat'],['validate']
Security,"The warnings were raised by TThreadExecutor trying to be smart when chunking, overriding user specified number of chunks to avoid accessing uninitialized positions of the results vector. This is annoying f.e. when Fitting, with several calls to Map() with the same ""conflictive when chunking"" data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028:130,access,accessing,130,https://root.cern,https://github.com/root-project/root/pull/1028,1,['access'],['accessing']
Security,There are two types of helper functions in PyROOT: those that are used from the pythonizors in Python and those that are used from the C++ implementation of the pythonizations. Only the former are exposed in the interface of the PyROOT extension module. This PR adds the necessary documentation to explain this.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2953:197,expose,exposed,197,https://root.cern,https://github.com/root-project/root/pull/2953,1,['expose'],['exposed']
Security,There is build problem on mac11 nodes:; ```; FAILED: core/thread/G__Thread.cxx lib/Thread.pcm ; /Users/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: 'tbb/enumerable_thread_specific.h' file not found; ```; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115867/console. It is because of that PR: https://github.com/root-project/root/pull/7260. It exposes TBB to public includes - via ROOT/TReentrantRWLock.hxx file. First of all one should specify that `Thread` library depend on `TBB` builtins - thats easy. But also one should export `TBB_INCLUDE_DIRS` and `TBB_CXXFLAGS` as INTERFACE (not PRIVATE) properties of `Thread` library. Do we want this?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8022:434,expose,exposes,434,https://root.cern,https://github.com/root-project/root/issues/8022,1,['expose'],['exposes']
Security,"There seems to be a problem in TNetXNGFile when accessing archive members directly, the file size corresponds to the whole archive instead of the archive member. Because of that, there is mismatch of how much data ROOT requests from XRootD, and how much XRootD client returns, so the transfer fails. With TXNetFile, the GetSize() method is implemented in TFile, while TNetXNGFile overrides it. The code in this PR is adding the same functionality from TFile::GetSize() to TNetXNGFile::GetSize().",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5039:48,access,accessing,48,https://root.cern,https://github.com/root-project/root/pull/5039,1,['access'],['accessing']
Security,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:375,access,access,375,https://root.cern,https://github.com/root-project/root/pull/10754,1,['access'],['access']
Security,"There was an infinite loop on the arm platform when running TMVAMulticlass.root. When compiling with the -ffast-math flag, sometimes a nan would be generated in the GA part of the cut optimisation. @dpiparo @martinmine Hopefully this resolves your issue. Tried it on the build machine I was given access to and it works there now. We in the TMVA team still need to revisit this part at some point, but for now I think this should be ok.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/450:297,access,access,297,https://root.cern,https://github.com/root-project/root/pull/450,1,['access'],['access']
Security,"These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/523:142,hash,hashing,142,https://root.cern,https://github.com/root-project/root/pull/523,1,['hash'],['hashing']
Security,"These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:; https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules.; > ; > When streamer infos are printed, checksums appear in hex. When rules are; > parsed, hex values were not accepted, though. This allows both hex and; > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4677:247,checksum,checksums,247,https://root.cern,https://github.com/root-project/root/pull/4677,4,['checksum'],"['checksum', 'checksums']"
Security,These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`); - [ ] Add numba test to `roottest`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096:230,access,accessing,230,https://root.cern,https://github.com/root-project/root/pull/11096,1,['access'],['accessing']
Security,"These changes test and provide the functionality to access quantities called ""mybranch.mysubbranch""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1701:52,access,access,52,https://root.cern,https://github.com/root-project/root/pull/1701,1,['access'],['access']
Security,These files are available in the source tree. By trying these local copies before trying the remote copies it is possible to run the tests without network access.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/403:155,access,access,155,https://root.cern,https://github.com/root-project/root/pull/403,1,['access'],['access']
Security,"This PR adds (a first version of) the `RNTupleIndex`, which is an in-memory structure that maps RNTuple field values (or combinations thereof) to an entry index in the RNTuple for which the index was built. Currently, the index only resides in memory and thus has to be (re)build each time. `RNTupleIndex` will be used by the `RNTupleProcessor` to enable dataset joins and will be as transparent as possible to users. Currently, no public interface is foreseen. At this point, no persistification is foreseen, but this might be added in the future. The implementation of the `RNTupleIndex` in this PR is hash-based. An implementation that is vector-based (but with the same interface) will also be considered. The idea is to benchmark and evaluate both implementations (and potentially more). Based on the results we can decide which one to actually use (or alternatively make multiple implementations available if they show clear tradeoffs in different use cases).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116:604,hash,hash-based,604,https://root.cern,https://github.com/root-project/root/pull/15116,1,['hash'],['hash-based']
Security,"This PR adds `RooGradMinimizerFcn`, an alternative to `RooMinimizerFcn` that calculates gradient itself outside of Minuit during minimization. To be able to use `RooGradMinimizerFcn`, `RooMinimizer` had to be refactored to be able to use `RooAbsMinimizerFcn` instead of the concrete RooMinimizerFcn class. To accomodate this change, several other changes had to be made:; - `_optConst` and `_func` members were removed, since these are now managed by the `*MinimizerFcn`.; - This means also things like function name and title, but also optimization switches, were moved to `RooAbsMinimizerFcn` as well.; - Functions `getMultiGenFcn`, `fitterFcn` and `fitFcn` were added which are used in several places as convenience functions to access the concrete `RooAbsMinimizerFcn` object with its proper type. The concrete type matters, for instance, when passing the class to the derivator, because a gradient enabled `*MinimizerFcn` needs to take different overloads than the classic function-value-only `RooMinimizerFcn`. A `FcnMode` enum class was added for this disambiguation as well.; - Construction of a `RooMinimizer` can be done the same as always when using a classic `RooMinimizerFcn`. However, to activate `RooGradMinimizerFcn`, a new create function can be used with the proper type as template parameter. In a later PR, this pattern will be extended with another gradient-enabled `RooAbsMinimizerFcn` instantiation that will also include multi-processing implementations. Since we had to refactor construction, we took the opportunity to also put default parameters in the header declaration, instead of in the constructor initializer lists. Finally, this PR changes the default minimizer from Minuit to Minuit2. **Note that this may require some discussion.** We already briefly touched upon this in a Zoom meeting, but haven't thoroughly mapped out consequences yet. The reason for the switch is that the derivator scheme used in `RooGradMinimizerFcn` replicates that of Minuit2, so comparing",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596:732,access,access,732,https://root.cern,https://github.com/root-project/root/pull/8596,1,['access'],['access']
Security,This PR adds a message viewing accessible through top left menu.; At the moment the view content is browser console messages and a checkbox to enable/disable debug mode. There are also minor changes in log messages and additional try/catch blocks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7270:31,access,accessible,31,https://root.cern,https://github.com/root-project/root/pull/7270,1,['access'],['accessible']
Security,This PR adds a simple metric (`nPagesCommitted`) to `RPageSinkFile` which is newly accessible through `RNTupleWriter`. The implementation mirrors `RNTupleReader`. I refactored the `RPageSinkFile` constructors to delegate metrics initialization to a new private constructor as in `RNTupleReader`. There are definitely many other metrics to be added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7235:83,access,accessible,83,https://root.cern,https://github.com/root-project/root/pull/7235,1,['access'],['accessible']
Security,"This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1217:87,access,access,87,https://root.cern,https://github.com/root-project/root/pull/1217,1,['access'],['access']
Security,This PR adds some meaningful error message printing when a pythonization fails to be injected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9729:85,inject,injected,85,https://root.cern,https://github.com/root-project/root/pull/9729,1,['inject'],['injected']
Security,"This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/593:252,access,access,252,https://root.cern,https://github.com/root-project/root/pull/593,1,['access'],['access']
Security,"This PR adds the possibility to register subfields to an RNTuple model for direct access to the values of these fields in entries belonging to the model. Registerging subfields in a collection is not permitted as of this PR, but will be added at a later point, borrowing from the implementation of `RNTupleDS`. This functionality will be used in the `RNTupleProcessor`, which provides an iterator over an `REntry`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16693:82,access,access,82,https://root.cern,https://github.com/root-project/root/pull/16693,1,['access'],['access']
Security,"This PR adds the possibility to specify which fields should be read by the `RNTupleProcessor` by passing an `RNTupleModel` to its constructor. The processor will create and own an `REntry` based on this, but it will use the pointers from the model's default entry to hold the field values during iteration. This way, the pointers returned by `RNTupleModel::MakeField` can be used in the processor iteration to access the values being read. Passing a model is optional; if not provided, one will be created from the descriptor of the first specified RNTuple. A follow-up PR will add the possibility to change the model after the processor has been created (useful when the set of fields to read cannot be decided at compile-time). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15985:410,access,access,410,https://root.cern,https://github.com/root-project/root/pull/15985,1,['access'],['access']
Security,"This PR adds two sets of pythonizations to `TSeqCollection` and its subclasses:; - Injection of item access methods (`__getitem__`, `__setitem__`, `__delitem__`), both for integer indices and slices.; - Injection of Python-list-like methods (`insert`, `pop`, `reverse`, `sort`, `index`). The PR also includes the corresponding unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3387:83,Inject,Injection,83,https://root.cern,https://github.com/root-project/root/pull/3387,3,"['Inject', 'access']","['Injection', 'access']"
Security,"This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing; the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4246:101,inject,injection,101,https://root.cern,https://github.com/root-project/root/pull/4246,2,"['access', 'inject']","['accessed', 'injection']"
Security,"This PR does a few things; 1) Extends the RDF Fill functionality to support arbitrary types and number of columns and an arbitrary mix of individual objects and containers with variadic templates. Note that this will likely result in slower code being generated in case of compiling/jitting without optimization. 2) Adds a HistoND function to RDF to fill a THnD with arbitrary number of dimensions. The main issue here was actually that THnT does not have a publicly accessible copy constructor or assignment operator, which are needed for use with RDF. I didn't have the patience to implement this by hand for all the classes in the inheritance chain, so the relevant classes have been migrated from C-style arrays to std::vector such that default copy (and move) constructors and assignment operators can be automatically generated. 3) Appropriate constructors have been added to allow THnT to be used with variable binning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499:467,access,accessible,467,https://root.cern,https://github.com/root-project/root/pull/7499,1,['access'],['accessible']
Security,"This PR enhances the Max Pooling Layer in the following ways:. 1. **Increased test coverage.** Tests have been added for the backwards propagation, covering the cases where `depth > 1`, as well as overlapping receptive fields. The testing suite was also refactored using templates to eliminate code duplication. 2. **Bug Fix**. The newly added tests exposed a bug in the `Reference` implementation of back-propagation, in the case of overlapping receptive fields. The bug is resolved. 3. **CUDA implementation.** The GPU version is now fully functional in both forward and backward propagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2175:350,expose,exposed,350,https://root.cern,https://github.com/root-project/root/pull/2175,1,['expose'],['exposed']
Security,"This PR fixes ; - #15919; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). clingwrapper tries to lookup the `ClassInfo` of `TViewPubFunctions` in meta which is not public. The return type of `GetListOfAllPublicMethods` should be a `TList` but the public `ClassDefInlineOverride` here:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TViewPubFunctions.h#L78-L82. and this usage:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TClass.cxx#L3845-L3849. exposes the type as `TViewPubFunctions`. This causes the observed offset calculation between `TList` and `TViewPubFunctions` in `Cppyy::GetBaseOffset`:; https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1443-L1457. which then fails, producing the warning. Running a check on the type:. ```python; import ROOT; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName())""; ```. Gives:; ```; Warning: failed offset calculation between TList and TViewPubFunctions; Type: TViewPubFunctions; ```. No longer performing this override in `TViewPubFunction.h` fixes the type back to `TList` and the call to `GetBaseOffset` no longer happens:. ```python; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName()); ```; and the warning disappears:. ```; Type: TList; ```. This fix also required an update in the reference file in roottest : https://github.com/root-project/roottest/pull/1159",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16177:585,expose,exposes,585,https://root.cern,https://github.com/root-project/root/pull/16177,1,['expose'],['exposes']
Security,This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns.; A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1558:107,access,access,107,https://root.cern,https://github.com/root-project/root/pull/1558,1,['access'],['access']
Security,"This PR includes fix to the pyroot iterator issue.; It also includes new method for accessing covariance calculations between nodes, as well as new ways of accessing binned data content of a dataset",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15301:84,access,accessing,84,https://root.cern,https://github.com/root-project/root/pull/15301,2,['access'],['accessing']
Security,This PR includes two sets of pythonisations for `TObject`:; - Injection of `__contains__` to support 'obj1 in obj2` syntax; https://sft.its.cern.ch/jira/browse/ROOT-9968; - Addition of comparison operators; https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3445:62,Inject,Injection,62,https://root.cern,https://github.com/root-project/root/pull/3445,1,['Inject'],['Injection']
Security,"This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:; - Issue a deprecation warning when the conversion None -> null pointer happens; - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`); - Make nullptr accessible as cppyy.nullptr; - Make pythonization functions accessible via cppyy.py ; - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible; - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT; - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`; - Provide `BindObject` and `AsCObject`. Related test PR:; https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4661:328,access,accessible,328,https://root.cern,https://github.com/root-project/root/pull/4661,2,['access'],['accessible']
Security,"This PR is the third part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce the RooFit::MultiProcess package. RooFit::MultiProcess is a task-based parallelization framework that will be used to parallelize gradients in RooFit/Minuit2 fits. It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize. The communication between processes is done using ZeroMQ, accessed through convenience functions in RooFitZMQ introduced in #8385. Notes:; - This PR branch is forked off of the branch in #8385, so until that is merged first, I may do some rebasing in this branch, so please be aware of that if you want to check this branch out locally.; - test_Job still fails, it has to be updated to the latest communication framework. With that in mind, this PR is ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8412:921,access,accessed,921,https://root.cern,https://github.com/root-project/root/pull/8412,1,['access'],['accessed']
Security,"This PR makes sure that member function templates are added to the dictionary of class proxies, so that they are found when the user is trying to access them. For instance:. ```python; import ROOT. ROOT.gInterpreter.Declare(""""""; struct TestClass {; template<class T> void templatedMember(const T& value) { }; };; """"""). t = ROOT.TestClass(); t.templatedMember('int')(1); ```; The example also works if there are non-templated overloads and the user tries to instantiate the templated one, thanks to https://github.com/root-project/root/pull/3226. The re-injection of the pythonization of `GetObject` in `TDirectoryFile` is now necessary because, as a result of these changes, `GetObject` will be added to the dictionary of `TDirectoryFile` as a `TemplateProxy`. If we want the pythonization to prevail, we need to inject it (it will replace the `TemplateProxy`, just like in `TDirectory`). `TFile` will inherit that pythonization too, so we keep the current behaviour and all tests green. An extension of the PyROOT tests for templates is coming in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3237:146,access,access,146,https://root.cern,https://github.com/root-project/root/pull/3237,3,"['access', 'inject']","['access', 'inject', 'injection']"
Security,"This PR propagates the disconnect action from TFileCacheRead to TFilePrefetch. This is needed to restore TFilePrefetch compatibility with the CMS use of kDoNotDisconnect to swap TTreeCaches. CMS frequently swaps TTree caches with code like. filePtr_->SetCacheRead(cache, nullptr , TFile::kDoNotDisconnect);; branch->GetEntry(entryNumber);; filePtr_->SetCacheRead(nullptr, nullptr , TFile::kDoNotDisconnect);. This is done partially for ownership reasons and partially because CMS uses multiple TTreeCaches for different use cases (one cache for frequently read branches, a second for less frequently accessed branches, and potentially one or two more specialized use cases). kDoNotDisconnect tells the TFile that this cache may later be reconnected to the TFile, so it should not disconnect the cache from the file. TFile propagates the flag to TFileCacheRead, but TFileCacheRead does not propagate it to TFilePrefetch. If pre-fetching is enabled, TFilePrefetch clears its cached blocks due to this commit:. https://github.com/root-project/root/commit/4290bf4942285b754b2edb7bffd122bcf36c979d. which added clearing of the read and pending prefetch lists when SetFile() is called. This violates the assumptions made by TTreeCache in the kDoNotDisconnect case, leading to a deadlock where `TTreeCache::ReadBufferPrefetch` waits forever on a buffer that has been cleared from the prefetched and pending lists. This patch propagates the kDisconnect/kDoNotDisconnect action flag to `TFilePrefetch::SetFile`, only clearing the fetched and pending lists in the kDisconnect case. (The same end could be accomplished more simply by just not calling TFilePrefetch::SetFile() for the kDoNotDisconnect case; propagating the action seems more correct to me, but it is a matter of taste.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1769:600,access,accessed,600,https://root.cern,https://github.com/root-project/root/pull/1769,1,['access'],['accessed']
Security,"This PR provides the first steps to the `RNTupleProcessor`, which is envisioned as an interface for reading vertically and horizontally composed RNTuples (i.e., chains and friends), and combinations thereof. The interface provides an iterator which gives access to the `REntry` containing the field values of the current entry index, as well as some additional bookkeeping information. At this point, only vertically composed RNTuples (i.e., chains) are supported. Horizontal compositions in the form of (unaligned) friends and the ability to combine vertical and horizontal compositions will be addressed in a future PR.; Other additions that will be accounted for in one or more follow-up PRs include:; - The possibility for users to provide their own entries/value pointers to the processor.; - The possibility for users to specify the `RNTupleModel` used to construct the processor entry.; - An extension to this involves the ability to specify multiple models, together with the ability to ""enable"" certain models while iterating. This would enable the possibility to read from certain fields conditionally, e.g. after a cut. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15084:255,access,access,255,https://root.cern,https://github.com/root-project/root/pull/15084,1,['access'],['access']
Security,This PR re-exposed the field type of an `RNTupleView` which otherwise must be matched out from the template signature (e.g. via `boost::mp11::mp_first).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12142:11,expose,exposed,11,https://root.cern,https://github.com/root-project/root/pull/12142,1,['expose'],['exposed']
Security,"This PR reactivates and fixes the test for RooGradMinimizerFcn (introduced in #8596). The first commit provides a way for external gradient calculators to use previous gradient information (gradient itself, second derivatives, step size) to calculate the next gradient values. Simultaneously, it allows the external calculator to pass back (via the same arrays to keep the redesign as minimal as possible, in anticipation of planned dedicated Hessian support) the second derivative and step sizes, so they can also be reused in the next gradient calculation. All of this reuse was already going on in Numerical2PGradientCalculator, but external gradient calculators had no access to this data, because the FCNGradAdaptor and IMultiGradFunction had no support for passing it back and forth. The commit also implements use of this mechanism in ExternalInternalGradientCalculator and in RooGradMinimizerFcn. The second commit reactivates the (already existing) test, and fixes it, because it turned out it had a small remaining bug. The bug was fixed by removing an unused parameter from `NumericalGradient::SetInitialGradient`, so that was two birds with one stone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694:673,access,access,673,https://root.cern,https://github.com/root-project/root/pull/8694,1,['access'],['access']
Security,This Pull request fixes an array access overflow then the interpolation order used in the RooDataHist is >= 10.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9984:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/9984,1,['access'],['access']
Security,"This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it.; - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend.; - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores.; - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`.; - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12109:514,expose,exposes,514,https://root.cern,https://github.com/root-project/root/pull/12109,1,['expose'],['exposes']
Security,This allows us to access the `llvm::orc::LLJIT` similar to the `getExecutionEngine` interface in clang-repl which is required for the functioning of libInterOp starting from LLVM 16. cc: @vgvassilev @devajithvs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16537:18,access,access,18,https://root.cern,https://github.com/root-project/root/pull/16537,1,['access'],['access']
Security,This allows us to inject -DGSL_LIBRARY etc for relwase builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3214:18,inject,inject,18,https://root.cern,https://github.com/root-project/root/pull/3214,1,['inject'],['inject']
Security,"This avoids the remaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:140,hash,hashing,140,https://root.cern,https://github.com/root-project/root/pull/9486,2,['hash'],"['hash', 'hashing']"
Security,"This bug report is the result of the initial report at https://root-forum.cern.ch/t/crashes-when-reading-a-ttree-with-a-friend. Initially a tree t2 has a friend t1, and both are stored to a TFile, t2 with t1 stored as a friend. When opening both t2 and t1 from the file, then calling TFile::Close(), there is a crash. Most likely it is a matter of deletion order, where a tree already deleted is deleted again due to ""friendliness"". . Please find attached C++ and PyROOT scripts that reproduce the bug. The bug can be worked around by calling t2.RemoveFriend(t1) before calling TFile::Close(). Fixing this bug is important in a PyROOT workflow, where the branches values are accessible as attributes of the TTree. In such a case t2.GetEntry(x) also gets an entry in t1. If t1 is read from the file, both t1 and t2 branches values are available through their attributes - the most convenient way to access them in PyROOT. This behaviour does not exist in C++, thus I suspect in C++ hardly anyone opens both t1 and t2 and encounter this bug. Encountered on ROOT 6.24.00 compiled from sources on Fedora 34.; [test_friends.zip](https://github.com/root-project/root/files/6725477/test_friends.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8549:675,access,accessible,675,https://root.cern,https://github.com/root-project/root/issues/8549,2,['access'],"['access', 'accessible']"
Security,"This commit includes fix to the pyroot iterator issue. It also includes new method for accessing covariance calculations between nodes, as well as new ways of accessing binned data content of a dataset. Backport of #15301.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15341:87,access,accessing,87,https://root.cern,https://github.com/root-project/root/pull/15341,2,['access'],['accessing']
Security,"This commit introduces a new layer on top of RDataFrame to enable distributed computations. It is a port of the previously known PyRDF python package, that includes all changes discussed recently in the team. The python package, inside bindings/experimental/distrdf, is dynamically injected into the ROOT.RDF namespace. TODO:; 1. Figure out a better approach to injection, currently the following happens:; ```; >>> import ROOT # ok; >>> import ROOT.RDF # ok; >>> from ROOT import RDF # ok; >>> from ROOT.RDF import Distributed # ok; >>> Distributed; <module 'DistRDF' from '/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/DistRDF/__init__.py'>; >>> import ROOT.RDF.Distributed; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/ROOT/_facade.py"", line 121, in _importhook; return _orig_ihook(name, *args, **kwds); ModuleNotFoundError: No module named 'ROOT.RDF'; 'ROOT' is not a package; >>> from ROOT.RDF.Distributed import Spark; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/ROOT/_facade.py"", line 121, in _importhook; return _orig_ihook(name, *args, **kwds); ModuleNotFoundError: No module named 'ROOT.RDF.Distributed'; 'ROOT.RDF' is not a package; ```; 2. Remove `DistRDF` from the available modules in a python session, e.g. this should not be possible (I believe); ```; >>> import DistRDF; >>> DistRDF; <module 'DistRDF' from '/home/vpadulan/Programs/rootproject/rootinstall/branchdev/lib/DistRDF/__init__.py'>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7139:282,inject,injected,282,https://root.cern,https://github.com/root-project/root/pull/7139,2,['inject'],"['injected', 'injection']"
Security,This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12140:79,access,access,79,https://root.cern,https://github.com/root-project/root/pull/12140,1,['access'],['access']
Security,"This fixes #10131. The core issue is that TDataMember::Init and TStreamerInfo::GenerateInfoForPair were not consistent. TDataMember::Init was ignoring the underlying type of an enum while the newer TStreamerInfo::GenerateInfoForPair was taking it in consideration. In the reported case, it meant that some of the pair's TStreamerInfo recorded the type as being 'signed intwhile other was recording the type asunsigned int`. In addition the whole infrastructure assumed (but only in ""some/most"" places) that the TStreamerInfo for a std::pair could never change and the infrastructure was also inconsistent on knowing whether the schema layout for std::pair is version of non-versioned. NOTE: The last commit is might cause the user classes to require a version incrementing when using enums ... (i.e. this commit might be removed) ... it was indeed removing ... in addition changing the stored type of the enum changes the schema layout but does not (sometimes?) change (yet?) the checksum so it leads to incorrect reading of data ....",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10132:980,checksum,checksum,980,https://root.cern,https://github.com/root-project/root/pull/10132,4,['checksum'],['checksum']
Security,"This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other; threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file.; (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase; (a) take the TFile spin lock and update all the TContext that points to the file; (b) still hold the spin lock, clean the other thread's directory.; (c) deal with the TContext that were being destructed at the same time; (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and; is held at the start of RegisterContext after thread 2 release the spin lock,; thread 1 might awaken only after the TFile object has been deleted and thus; RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the; creation of a TContext, but is suspended right before the start of RegisterContext,; when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11908:997,access,access,997,https://root.cern,https://github.com/root-project/root/pull/11908,4,['access'],['access']
Security,"This fixes the JIRA ticket ROOT-4188:; https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:; ```c++; void repro(); {; RooRealVar x{""x"", """", 0.0005, 0.001};; RooRealVar gamma{""gamma"", """", 0.5};; RooRealVar beta{""beta"", """", 2};; RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);; pdf.plotOn(frame);; frame->Draw();. c1.SaveAs(""plot.png"");; }; ```. Result before this PR:; ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:; ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12702:189,validat,validated,189,https://root.cern,https://github.com/root-project/root/pull/12702,1,['validat'],['validated']
Security,"This fixes the OS X warnings like this one:. ld: warning: direct access in function 'XXX' from file; 'libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak; symbol 'llvm::ReverseIterate<bool>::value' from file; 'interpreter/llvm/src/lib/libclingUtils.a(AST.cpp.o)'; means the weak symbol cannot be overridden; at runtime. This was likely caused by different translation; units being compiled with different visibility settings. I assume it's a compiler bug and it maybe fixes itself in LLVM 6.0; as this is quite recently introduced code, so let's go with the; most conservative fix and just disable this validation layer in LLVM; (that we don't use from what I can see).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/845:65,access,access,65,https://root.cern,https://github.com/root-project/root/pull/845,2,"['access', 'validat']","['access', 'validation']"
Security,"This fixes the error ""TorchScript requires source access in order to carry out compilation, make sure original .py files are available""; it can not be executed with exec in python. Best ; Omar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6934:50,access,access,50,https://root.cern,https://github.com/root-project/root/pull/6934,1,['access'],['access']
Security,"This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4589:160,certificate,certificate,160,https://root.cern,https://github.com/root-project/root/pull/4589,1,['certificate'],['certificate']
Security,"This fixes warnings such as these:; ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL19make_ROperator_SeluERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Selu(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; ```; # This Pull request:. ## Changes or fixes:. Move private declarations away from the public header file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10145:686,hash,hash,686,https://root.cern,https://github.com/root-project/root/pull/10145,1,['hash'],['hash']
Security,"This implements the `RDataFrame` pythonization `AsNumpy`, which reads out the dataframe as a collection of numpy arrays. Here's an example how it looks like:. ```python; df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root"") \; .Filter(""All(Muon_pt>30)"", ""Only events with muons that have pt larger 30GeV""); npy = df.AsNumpy(columns=[""nMuon"", ""PV_npvs""]). print(""Number of events selected: {}"".format(npy[""PV_npvs""].size)); print(""Average number of primary vertices per event: {:.2f}"".format(numpy.mean(npy[""PV_npvs""]))); print(""Average number of muons per event: {:.2f}"".format(numpy.mean(npy[""nMuon""]))); ```; ```; Number of events selected: 2846996; Average number of primary vertices per event: 16.03; Average number of muons per event: 1.29; ```. In addition to reading fundamental types, we support reading out any type of C++ object in the file being returned as a numpy array of Python objects wrapped by PyROOT. ```python; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a function that returns such an object. This is called to fill the dataframe.; CustomObject fill_object() { return CustomObject(); }; """"""). df = ROOT.RDataFrame(4).Define(""custom_object"", ""fill_object()""); npy = df.AsNumpy(); print(npy); ```; ```; {'custom_object': array([<ROOT.CustomObject object at 0x64d8d50>,; <ROOT.CustomObject object at 0x79bd140>,; <ROOT.CustomObject object at 0x743f440>,; <ROOT.CustomObject object at 0x7359710>], dtype=object)}; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3107:1039,Inject,Inject,1039,https://root.cern,https://github.com/root-project/root/pull/3107,1,['Inject'],['Inject']
Security,This integrates the work of @mohammaduzair9 on stratified splitting for cross validation. Superseeds PR #2557.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2914:78,validat,validation,78,https://root.cern,https://github.com/root-project/root/pull/2914,1,['validat'],['validation']
Security,"This is ROOT6 support for [CMA-ES](https://www.lri.fr/~hansen/cmaesintro.html), a state-of-the-art black box stochastic minimizer. The implementation uses [libcmaes](https://github.com/beniz/libcmaes), a novel high performance C++11 (with Python bindings) library for blackbox optimization. The new minimizer yields better results than Minuit2 for most problems, though for an higher computation cost on average. See below for links to relevant benchmarks backing up these claims. This implementation is on behalf of [Inria Saclay Research group TAO](http://www.inria.fr/en/teams/tao), [Laboratoire de l'Accelerateur Lineaire, group AppStat](http://appstat.lal.in2p3.fr/) and [University Paris-Sud LRI](https://www.lri.fr/index_en.php?lang=EN). ===Features===; - Seamless replacement for Minuit, Minuit2 and Fumili; - Seamless support for RooFit; - Relying on libcmaes allows for best performances known for CMA-ES + access to several flavors of the original algorithm, yielding best results with a trade off for computational cost, as needed; - Compilation support for both Autotools and CMake; - Included tutorial files, tests, and a special benchmark vs Minuit2. ===Documentation===; - Main documentation for building and using the new minimizer is here: https://github.com/beniz/libcmaes/wiki/using-CMA-ES-in-CERN's-ROOT. ===Performances===; - On-par with Minuit2 on low dimensional problems (< 10-D), consistently beats Minuit2 in higher dimension, leading to better fits. These claims are backed by two benchmarks and two experiments on real world data (we are still waiting from some results from usage at CERN); - Benchmark CMA-ES vs Minuit on [BBOB](http://coco.gforge.inria.fr/doku.php?id=bbob-2013) available here: https://drive.google.com/open?id=0B3J1vWYhta9ibktXc2JLRUExUTA&authuser=0; - In-ROOT benchmark vs Minuit2 on low-dimensional problems, results available here: https://drive.google.com/open?id=0B3J1vWYhta9iTmR0T0hnN21lSGM&authuser=0; - Beats out Minuit2 up to 98% of the time o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40:917,access,access,917,https://root.cern,https://github.com/root-project/root/pull/40,1,['access'],['access']
Security,"This is a new feature to support random access compression. For details, please take a look at this link:; https://sft.its.cern.ch/jira/browse/ROOT-5076",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/152:40,access,access,40,https://root.cern,https://github.com/root-project/root/pull/152,1,['access'],['access']
Security,"This is a partial, but long-overdue modernisation of RooDataHist. Instead of accessing members in array or vectors, it was using the convoluted logic of:; - I need the event weight of event `i`.; - So I have to load the coordinates(!) of `i` by calling `get(i)`.; - This has the side effect of writing the weight that belongs to `i` into the mutable member `_curWgt` or similar.; - To retrieve the weight, I can now call `weight()`. This obviously creates problems and might be slow, so the overwriting of such internal buffers was removed to a large extent. Many things can now be retrieved by index (`weight(i)` for example), and many functions don't have side effects, any more. Further:; - Remove lots of unnecessary mutable members from RooDataHist/RooVectorDataStore.; - Remove side effects from many of RooDataHist's functions.; - Implement getters that don't rely on setting the active bin.; ""h.get(binNumber); h.weight() --> h.weight(binNumber)"" etc.; - Remove useless members such as _curWeight. Those are replaced by; a lookup in the weight vectors.; - Implement retrieval of bin coordinates and weights in batches.; - Sort functions that rely on the presence of side effects into a; deprecated section for doxygen.; - Fix docstrings of many functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6718:77,access,accessing,77,https://root.cern,https://github.com/root-project/root/pull/6718,1,['access'],['accessing']
Security,"This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:; ```python; import cppyy; cppyy.cppdef(""auto l = []{cout << 100 << endl;};""); cppyy.gbl.l(); ```; Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5541:48,access,accessing,48,https://root.cern,https://github.com/root-project/root/pull/5541,1,['access'],['accessing']
Security,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:887,Validat,Validation,887,https://root.cern,https://github.com/root-project/root/pull/5757,1,['Validat'],['Validation']
Security,"This is a reproducer (segfaults frequently but not always):. ```cpp; #include <ROOT/TTreeProcessorMT.hxx>; #include <TROOT.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>. void workload(TTreeReader &r) {; TTreeReaderArray<double> ra(r, ""truthCaloPt"");; while (r.Next()); ra.GetSize();; }. int main() {; ROOT::EnableImplicitMT(2);; ROOT::TTreeProcessorMT mt({""f1.root"", ""f2.root"", ""f3.root"", ""f4.root"", ""f5.root""}, ""t"");; mt.Process(workload);; }; ```. With these files: [files.zip](https://github.com/root-project/root/files/8451196/files.zip). The problem seems to be at the level of TGenCollectionProxy: multiple threads end up sharing the same TGenCollectionProxy objects, which is not thread safe (e.g. because of https://github.com/root-project/root/blob/bce5777b8f479212babb7a8af5485d9a6bbd251e/io/io/src/TEmulatedCollectionProxy.cxx#L84-L85). In principle, however, as we use different TChains/TTreeReaders in each thread, they should also access different TGenCollectionProxy instances. Example backtraces at the point of crash (this is one of several failure modes, but it's the one where the problem is clear -- both threads, at frame 0, are accessing the same TGenCollectionProxy instance):. ```; >>> thread apply all bt 10. Thread 2 (Thread 0x7fffdc0e2640 (LWP 312745) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff7d57a15 in TVirtualCollectionProxy::TPushPop::~TPushPop (this=0x7fffdc0dad20, __in_chrg=<optimized out>) at ../core/cont/inc/TVirtualCollectionProxy.h:65; #2 0x00007ffff76274b1 in TEmulatedCollectionProxy::Destructor (this=0x7fffd4016090, p=0x7fffd40156e0, dtorOnly=false) at ../io/io/src/TEmulatedCollectionProxy.cxx:87; #3 0x00007ffff7d4f8c2 in TClass::Destructor (this=0x7fffd40152c0, obj=0x7fffd40156e0, dtorOnly=false) at ../core/meta/src/TClass.cxx:5417; #4 0x00007ffff676afdb in TBranchElement::ReleaseObject (this=0x7fffd4017590) at ../tree/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:959,access,access,959,https://root.cern,https://github.com/root-project/root/issues/10357,1,['access'],['access']
Security,"This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12064:58,access,accessor,58,https://root.cern,https://github.com/root-project/root/pull/12064,2,['access'],"['access', 'accessor']"
Security,This is an implementation of HashedNets (https://arxiv.org/pdf/1504.04788.pdf) in ROOT. It is built over the existing implementation of DNNs in TMVA and supports multithreading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/220:29,Hash,HashedNets,29,https://root.cern,https://github.com/root-project/root/pull/220,1,['Hash'],['HashedNets']
Security,"This is an update to PR #40 that includes:; - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017); - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**; However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to; ```C++; ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);; opts.SetIntValue(""lambda"",lambda);; ```; Code above now appears to fail with errors such as:; ```; root [0] .L tutorials/fit/cmaesFitBench.C++g; Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so; In file included from input_line_11:9:; ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; Error in <ACLiC>: Dictionary generation failed!; ```; Help is needed to fix the above. **How to build**; ```; cd build; cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on; make; ```; The build will fail because of the header issue mentioned above, so do:; ```; cd include; ln -s eigen3/Eigen .; ln -s eigen3/unsupported .; cd ..; make; ```; You can then use the newly built ROOT and test that CMA-ES is",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507:719,access,access,719,https://root.cern,https://github.com/root-project/root/pull/507,1,['access'],['access']
Security,"This is based on @dpiparo 's work to parallelize `GetEntry`. The basic idea is, when we are flushing all active branches, we do each branch in parallel. We have to maintain mutual exclusion when interacting with the `TTree` or `TFile`, but we can parallelize the compression of the baskets (which is a significant amount of CPU time). Note the least satisfactory part of this work is having to use a mutex to access the byte-counters in `TTree`; this is because these fields are serialized and `std::atomic<>` is not serializable. Any hints as to how to get around this?. Setting `MainEvent.cxx` in the `test` sub-directory to use this (with LZMA as the compression algorithm), I get:. ```; RealTime=76.340815 seconds, CpuTime=131.770000 seconds; ```. @pcanal @Dr15Jones - this spun off from our discussion about CMSSW efficiency. It's really easy to parallelize `FlushBaskets` using a `tbb::task_group` that I later wait for. However, continuation-style programming is difficult here because `FlushBaskets` is called from deep callstacks. Further, there's a lot of state in the basket itself we'd need to unravel. Looking at stack traces for the sample `Event` program, the next most advantageous place to parallelize compression is here:. ```; #11 0x00007f00743e80fe in R__zipMultipleAlgorithm ; #12 0x00007f00729aec25 in TBasket::WriteBuffer ; #13 0x00007f00729b53f3 in TBranch::WriteBasket ; #14 0x00007f00729b5c95 in TBranch::Fill ; #15 0x00007f00729cb630 in TBranchElement::Fill; #16 0x00007f00729cb418 in TBranchElement::Fill ; #17 0x00007f00729cb418 in TBranchElement::Fill ; #18 0x00007f0072a063f3 in TTree::Fill; ```. The idea would be to make `WriteBuffer` kick off a separate task, but block `TBranch::Fill` (and a handful of other functions, such as anything that can change the branch's `TFile`) from being called until the `WriteBuffer` task was completed. Harder than this approach, but not impossible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/277:409,access,access,409,https://root.cern,https://github.com/root-project/root/pull/277,1,['access'],['access']
Security,"This is first step to make Web GUI code running in multiple threads.; There are many threads introduced and many communication patterns are supported. 1. Provide special thread, which handle all http requests of THttpServer.; This thread serves JavaScript/HTML files and redirects websocket requests to recipients.; Try to reduce access to global ROOT structures from that thread - only list of classes for the moment is used. Potentially many THttpServer instances with such thread can run fully independent. 2. Let run websocket handlers (THttpWSHandler) in separate threads. ; Requires correct locking of shared resources. 3. Support special threads for sending data via websocket from server to clients. ; When many clients are connected to the same TWebWindow, slowest client can ; break down performance. With use of such specialized thread problem can be solved. 4. Implement all necessary locks and protections to use many TWebWindows in different user threads. ; Provide TWebWindow::Run(double) method, which allows to run window code in any user thread. . Introduce tutorials/v7/draw_mt.cxx macro, which shows how three RCanvas instances can run; in three independent thread and regularly updated. Of course, default behavior should work - all functionality runs in main thread. ; Means THttpServer requests processing, websockets processing, RCanvas handling - ; everything runs in main application thread. Simple, but not scalable. This is very preliminary code , I still plan to change/extend some API.; Any comments comments are welcome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487:330,access,access,330,https://root.cern,https://github.com/root-project/root/pull/2487,1,['access'],['access']
Security,This is needed so that the new RooBrowser doesn't need to access the private collision grid of the TPad. These additional options allow the placement of the box with choice of priority over directions as well as option to place within the margins of the pad. . Wanted for 6.28 release too!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12066:58,access,access,58,https://root.cern,https://github.com/root-project/root/pull/12066,1,['access'],['access']
Security,This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9241:20,inject,inject,20,https://root.cern,https://github.com/root-project/root/issues/9241,1,['inject'],['inject']
Security,"This is special drawable, which I used as playground for new functionality. `RHistStatBox` class is drawable, which hold reference to histogram and can calculate statistic in range, selected in the `RFrame` on the client side. If there are several clients (several web browsers with shown canvas) each client will be able to select zoomed range individually and get right statistic. If necessary, several `RHistStatBox` for different histograms can be shown on the RCanvas - even if only one histogram is displayed. `RHistStatBox` object instance is not send to client as simple `RText` or `RLine`. Instead - only css attributes (fill, line, text colors etc) are send. This is necessary, while otherwise histogram will be send - and it can be huge. . Special `RDrawableRequest` / `RDrawableReply` classes are introduced. They allow to submit any kind of request to selected drawable from the client. Now it is universal method to access C++ functionality from JavaScript. It is replacement to `gROOT->ProcessLine()` which was used up to now. . Dedicated `RStatBoxRequest` class used to get statbox lines every time when zooming is changed. Via `friend class` relation it can access private methods in `RHistStatBox`. This is solution for methods which should remain protected from user. For the future. `RHistStatBox` can be generalized - one can extract `RStatBox` base class and use it to implement statbox for `RGraph`, `RProfile` or any other classes where it make sense. Here is actual screenshot:; ![Canvas](https://user-images.githubusercontent.com/4936580/79573534-181ec500-80bf-11ea-9326-659b06fcbdf2.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5379:930,access,access,930,https://root.cern,https://github.com/root-project/root/pull/5379,2,['access'],['access']
Security,"This is spinning off the commits from #15616 that don't depend on a new Clad release, so we can merge and validate the development in the nightlies early.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16007:106,validat,validate,106,https://root.cern,https://github.com/root-project/root/pull/16007,1,['validat'],['validate']
Security,"This is the first attempt for merging the bulk IO APIs (hidden inside the `ROOT::Internal` namespace). The initial goal here is to start getting reviewer attention and feedback. The bulk IO APIs aim to provide as fast access as possible in the case where the user is using relatively simple datatypes and the objects can be deserialized ""non-destructively"" (i.e., in-place in the existing memory buffers). For example - primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:; - A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; - A `TTreeReader`-like interface, `TTreeReaderFast`. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize *and* apply user code, rather than two.; - The intent is that this interface can be extended in the future and used by `TDataFrame`, provided we can make `TDataFrame` sufficiently fast.; - A Python-based `numpy` export interface. This exposes the (possibly serialized) me",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943:218,access,access,218,https://root.cern,https://github.com/root-project/root/pull/943,1,['access'],['access']
Security,"This is the second attempt for merging the bulk IO APIs (hidden inside the ROOT::Internal namespace); original version was in #943; this is a large rebase and update (particularly, removing the buffer sharing between the ROOT and the user). The initial goal here is to get another round of @pcanal attention and feedback. The bulk IO APIs aim to provide as fast access as possible in the case where the user is using relatively simple datatypes and the objects can be deserialized ""non-destructively"" (i.e., in-place in the existing memory buffers). For example - primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:. * A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; * A TTreeReader-like interface, TTreeReaderFast. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize and apply user code, rather than two.; * The intent is that this interface can be extended in the future and used by TDataFrame, pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519:362,access,access,362,https://root.cern,https://github.com/root-project/root/pull/2519,1,['access'],['access']
Security,"This is to make the RooArgSet payload accessible via; RooCmdConfig::decodeObjOnTheFly, which is used [in one of the RooNLLVar; constructors](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooNLLVar.cxx#L97). This fixes Jira issue [ROOT-6895](https://sft.its.cern.ch/jira/browse/ROOT-6895).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8299:38,access,accessible,38,https://root.cern,https://github.com/root-project/root/pull/8299,1,['access'],['accessible']
Security,"This is very first attempt to make ROOT I/O conform RDrawable classes with attributes.; Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:; ```; ""fAttr"" : {; ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",; ""fContIO"" : {; ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",; ""user_class"" : """",; ""map"" : {; ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", ; ""line_width"": {; ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",; ""v"" : 2; }; }; }; }; ```; I can easily exclude ""_typename"" already now. ; Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:; ```; ""line_width"": 2; ```; New DrawableAttributes class can be use in `RPadLength` implementation.; It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4352:553,access,access,553,https://root.cern,https://github.com/root-project/root/pull/4352,1,['access'],['access']
Security,"This makes it possible to create a pre-downloaded cache before running the tests, so that it is possible to run the tests in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:156,access,access,156,https://root.cern,https://github.com/root-project/root/pull/404,1,['access'],['access']
Security,"This method can be called instead of `Fill` if the `RNTupleWriter` or `RNTupleFillContext` should not commit the cluster automatically. Instead the calling code must check `ShouldCommitCluster()` and call it explicitly if necessary. FYI @makortel this should be the interface that we were discussing some time ago, and should also allow to append multiple RNTuples into a single `TFile` using parallel writing: The framework must only call `FillNoCommit` and manually synchronize access to the underlying `TFile` while explicitly invoking `CommitCluster`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15239:480,access,access,480,https://root.cern,https://github.com/root-project/root/pull/15239,1,['access'],['access']
Security,"This patch already landed in https://reviews.llvm.org/rL336660 in Clang. This was biting us to enable runtime modules in CMSSW. Detailed desciption:; https://bugs.llvm.org/show_bug.cgi?id=37878. lookupModule was falling back to loadSubdirectoryModuleMaps when it couldn't; find ModuleName in (proper) search paths. This was causing iteration over all; files in the search path subdirectories for example ""/usr/include/foobar"" in; bugzilla case. Users don't expect Clang to load modulemaps in subdirectories implicitly, and; also the disk access is not cheap. if (AllowExtraModuleMapSearch) true with ObjC with @import ModuleName.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2307:538,access,access,538,https://root.cern,https://github.com/root-project/root/pull/2307,1,['access'],['access']
Security,"This patch consolidates the symbol resolution facilities throughout TCling into; a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:; * Symlink resolution -- it implements a memory efficient representation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:620,hash,hash,620,https://root.cern,https://github.com/root-project/root/pull/4717,2,['hash'],['hash']
Security,This prevents the vector to be reallocated if the size exceeds the capacity of; the vector causing invalid pointer accesses. Fixes ROOT-7749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3658:115,access,accesses,115,https://root.cern,https://github.com/root-project/root/pull/3658,1,['access'],['accesses']
Security,This prevents the vector to be reallocated if the size exceeds the capacity of; the vector causing invalid pointer accesses. Fixes ROOT-7749. Backport requested https://sft.its.cern.ch/jira/browse/ROOT-10080,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3726:115,access,accesses,115,https://root.cern,https://github.com/root-project/root/pull/3726,2,['access'],['accesses']
Security,This prevents the vector to be reallocated if the size exceeds the capacity of; the vector causing invalid pointer accesses. Fixes ROOT-7749. Backport requested in https://sft.its.cern.ch/jira/browse/ROOT-10080,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3728:115,access,accesses,115,https://root.cern,https://github.com/root-project/root/pull/3728,1,['access'],['accesses']
Security,"This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage.; - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. ; - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results); - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once.; - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10860:823,Hash,Hash,823,https://root.cern,https://github.com/root-project/root/pull/10860,2,['Hash'],['Hash']
Security,"This pull request introduces RField support for user-defined classes that behave as collections of elements. These classes specify a ""collection proxy"" that provides access to the elements in the collection.; A legacy collection proxy is provided in the form of an instance of a class derived from `TVirtualCollectionProxy`. The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In this pull request, we introduce support for legacy collection proxies derived from the `TVirtualCollectionProxy` class, although in later stages, RNTuple might provide this functionality through an interface different interface. At a bare minimum, the user is required to provide an implementation for the following functions in `TVirtualCollectionProxy`:; - `HasPointers()`, `GetProperties()`, `GetValueClass()`, `GetType()`, `Sizeof()`: for general information about the collection and its value type.; - `Sizeof()`, `At()`, `Clear()`, and `Insert()`: for element access; - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:; - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface.; Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below).; ```c++; // Alternatively, this can be specified via a member type in the user-defined class; see the documentation; template <>; struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();; auto fieldK",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11525:166,access,access,166,https://root.cern,https://github.com/root-project/root/pull/11525,1,['access'],['access']
Security,"This pull request introduces ntuple management at the DAOS container level, extending support for more than one ntuple to populate a container. ## Changes or fixes:; - Support for up to 2\^32 - 1 ntuples in a DAOS container, by assigning an index to a previously-unused portion of the DAOS Object ID address space. The index thus induces a subspace dedicated for all objects belonging to a given ntuple. The zeroth space (index `0`) is reserved for any container-wide metadata objects that may need to be stored in the future.; - `ROOT::Experimental::Detail::RDaosContainerNTupleLocator` is a structure that concentrates the functionality for locating and retrieving stored metadata from an ntuple by its name.; - The structure hashes the name into a well-distributed 32-bit index. Collisions are expressly forbidden to simplify implementation; a different ntuple name must be provided to the sink upon creation if an ntuple stored in the container with another name happens to have the same hash (index).; - The sink (in `RPageSinkDaos` ctor) uses the locator to assign an index for a new ntuple, which may fail if the name's resulting hash collides with some other ntuple present unless the name matches. Overwriting (""recreating"") an existing ntuple is allowed in this context.; - The source (in `RPageSourceDaos::AttachImpl()`) locates the ntuple by the name to validate that it is indeed present in storage (otherwise, an exception is thrown). The objects that are read for this validation are reused as part of the ntuple metadata deserialization procedure when attaching. ; - Unit test coverage is provided for the following cases: write and read from different ntuples in a container; and attempt to open an ntuple that was not stored there. ## Checklist:. - [x] tested changes locally + cluster on single client with libdaos 2.2.0; - [x] updated the docs (if necessary). This PR fixes #10958",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11480:728,hash,hashes,728,https://root.cern,https://github.com/root-project/root/pull/11480,5,"['hash', 'validat']","['hash', 'hashes', 'validate', 'validation']"
Security,This pull request replaces a variable's type from `size_t` to `uint64_t` to avoid warnings on 32-bit platforms. The variable is the output of a hashing function and undergoes shifting by 32 bits as the seeding step of a hash combination between the two-halves of a 64-bit value. The change has no functional impact. It prevents the following compilation warning in 32-bit systems:. ```; In file included from /path/to/src/RPageStorageDaos.cxx:29:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx: In static member function ‘static ROOT::Experimental::Detail::ntuple_index_t ROOT::Experimental::Detail::RDaosContainerNTupleLocator::Hash(const string&)’:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:120:43: warning: right shift count >= width of type [-Wshift-count-overflow]; 120 | auto seed = static_cast<uint32_t>(h >> 32);; ```. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12473:144,hash,hashing,144,https://root.cern,https://github.com/root-project/root/pull/12473,3,"['Hash', 'hash']","['Hash', 'hash', 'hashing']"
Security,"This pull request replaces the implementation of `InputValidator::validate()` by simpler, more maintainable code that also fixes JIRA issue [ROOT-9202](https://sft.its.cern.ch/jira/browse/ROOT-9202). The previous implementation was unable to properly handle line continuation after ',' or '\\'. Specifically, it skipped over non-punctuation tokens, entering continuation mode even if ',' or '\' were not the last tokens in the input, e.g.; ```; int a, b; ```; or; ```; int a \ b; ```; caused cling to request more input, where it shouldn't. ## Changes or fixes:; - MetaLexer:; - Return `/*` and `*/` as independent tokens.; - Added `ReadToEndOfLine()` function (consume input until '\r', '\n', or EOF).; - Added `MetaLexer::RAII` that saves the current lexing position and restores it on destruction.; - Remove unused `LexPunctuatorAndAdvance()`.; - Rewrite of `InputValidator::validate()`. ## Checklist:; - [X] tested changes locally. Fixes [ROOT-9202](https://sft.its.cern.ch/jira/browse/ROOT-9202).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8771:66,validat,validate,66,https://root.cern,https://github.com/root-project/root/pull/8771,2,['validat'],['validate']
Security,"This replaces the homegrown MnRefCountedPointer with std::shared_ptr. Using standard components is better, of course, and clang's address sanitizer has reported issues with MnRefCountedPointer, another reason to do this. I removed obsolete implementations of copy constructors, copy assignment operators and destructors from the affected classes, that just implemented the default behaviour. The patch currently looks very complicated, because I used the new clang-formatted style, but will become much more easy to read when #6917 is accepted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6918:138,sanitiz,sanitizer,138,https://root.cern,https://github.com/root-project/root/pull/6918,1,['sanitiz'],['sanitizer']
Security,"This results in more modular code that is also safer: the `ROOT::Fit::Fitter` has no access to the RooAbsMinimizerFcn anymore, only to the member that is a lightweight adapter. This means the `RooAbsMinimizerFcn` also doesn't get cloned unexpectedly, so we don't need extra checks in the RooMinimizer to account for that!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348:85,access,access,85,https://root.cern,https://github.com/root-project/root/pull/12348,1,['access'],['access']
Security,"This reverts commit b327dd8fd159494666842607708140c429fa4055.; This should fix the following error:; ```; Error in <TPServerSocket::Authenticate>: can't find SrvAuthenticate; ```; as reported on the forum: [Getting ""can't find SrvAuthenticate"" in authserver.C](https://root-forum.cern.ch/t/getting-cant-find-srvauthenticate-in-authserver-c/54469)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14149:132,Authenticat,Authenticate,132,https://root.cern,https://github.com/root-project/root/pull/14149,1,['Authenticat'],['Authenticate']
Security,"This set of patches makes THDFSFile work again. ; It also enables CMake build and allows linking against libhdfs3 (experimental native HDFS client implementation). Kind of major change: HDFS URLs are now absolute instead of relative as it was before. I.e. one have to use ""hdfs:///user/username/dir1/file2.root"" notation to access file in the home directory. ; This makes HDFS URLs somewhat standard in the sense that they could be used interchangeably between ROOT and Hadoop API and command-line utilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/94:324,access,access,324,https://root.cern,https://github.com/root-project/root/pull/94,1,['access'],['access']
Security,This should fix failures in `test_readTotemNtuple` that started happening after the switch from `Calc` to `ProcessLine` (the access to the zero-length ReaderArrays was caught by `ProcessLine`'s instrumentation).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:125,access,access,125,https://root.cern,https://github.com/root-project/root/pull/1938,1,['access'],['access']
Security,"This should fix the recent test failures seen in `gtest-tree-treeplayer-test-treetreeplayertestUnit`. Full lldb stack traces at https://codimd.web.cern.ch/s/QKEMHg5H1. # PR description. The test was dynamically allocating the array data members of the `Data` struct, but never deallocating them. This commit polishes the `Data` struct definition and ensures proper management of the data members. The previous way of writing data to the TTree was leading to a bad memory access in the ReadBasicPointer inlined function in TStreamerInfoReadBuffer.cxx while reading the `double*` array. In particular, the issue arises when accessing and then deallocating the array at the current index provided by the `TCompInfo` object. ```; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x00000001044cf140 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this=<unavailable>, b=<unavailable>, arr=<unavailable>, compinfo=<unavailable>, first=<unavailable>, last=<unavailable>, narr=<unavailable>, eoffset=<unavailable>, arrayMode=0) at TStreamerInfoReadBuffer.cxx:923:65 [opt]; 920 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong: ReadBasicPointer(Long_t); continue;; 921 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong64: ReadBasicPointer(Long64_t); continue;; 922 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat: ReadBasicPointer(Float_t); continue;; -> 923 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble: ReadBasicPointer(Double_t); continue;; 924 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUChar: ReadBasicPointer(UChar_t); continue;; 925 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUShort: ReadBasicPointer(UShort_t); continue;; 926 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUInt: ReadBasicPointer(UInt_t); continue;; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x000000010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16501:471,access,access,471,https://root.cern,https://github.com/root-project/root/pull/16501,2,['access'],"['access', 'accessing']"
Security,"This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being; cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another; copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent; call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1.; Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3.; h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during; the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,; however (since it is not even supposed to exist) h3 is not informed and; keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats; as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed; and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5597:1128,access,accessed,1128,https://root.cern,https://github.com/root-project/root/pull/5597,2,['access'],['accessed']
Security,This the upstream version of a patch to ROOT meta that exposes the `isAggregate()` class property from Cling. The current `master` branch of CPyCppyy relies on this property. Originally implemented in this commit by @wlav:; https://github.com/wlav/cppyy-backend/commit/fe1c0f114800ab45b8136fa74ade3a71c137e86f. This PR is part of the larger effort to sync `CPyCppyy`:; https://github.com/root-project/root/pull/14507,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14596:55,expose,exposes,55,https://root.cern,https://github.com/root-project/root/pull/14596,1,['expose'],['exposes']
Security,"This was causing roottest-root-core-execStatusBitsCheck failure. TEmulatedTuple is injected to AST by creating virtual file called; `input_line_<number>`. This is the same way as we inject ""ClassDef(name,; id)"" and we need to `undef __ROOTCLING__` in that case (because it's not; ROOTCLING)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2112:83,inject,injected,83,https://root.cern,https://github.com/root-project/root/pull/2112,2,['inject'],"['inject', 'injected']"
Security,"This was first reported at: https://cdcvs.fnal.gov/redmine/issues/25615; with the error:; ```; Fatal Root Error: TBranchElement::InitializeOffsets; Could not find the real data member 'fOutputNames' when constructing the branch '4anab::MVADescriptions_emtrkmichelid_emtrkmichel_Reco1.obj' [Likely an internal error, please report to the developers].; ROOT severity: 6000; ```; during the creation of a branch. With a class like:; ```; class mystrarray {; public:; string fDataTag; ///< offset= 0 type=300 ,stl=365, ctype=365, Tag of the reco data products (art::InputTag format); string fOutputInstance; ///< offset= 32 type=300 ,stl=365, ctype=365, Instance name of the feature vector collection; string fOutputNames[4]; ///< offset= 64 type=320 ,stl=365, ctype=365, Feature vector entries names/meaning. static short Class_Version() { return 10; }; };; ```; creating any split branch containing this kind of object (or collection there of) will work fine. But if a file containing the `StreamerInfo` for `mystrarray` version 10 before loading the library containing its dictionary then the `StreamerInfo` from the file (since it has the same checksum has the one that would come from the dictionary info) is used. However, instead of; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames[4]""; ```; it produces:; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames""; ```; Which does not match the expectation of `TBranchElement::InitializeOffsets`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8033:1144,checksum,checksum,1144,https://root.cern,https://github.com/root-project/root/issues/8033,1,['checksum'],['checksum']
Security,Tmva cross validation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1514:11,validat,validation,11,https://root.cern,https://github.com/root-project/root/pull/1514,1,['validat'],['validation']
Security,"To correctly manage build artifacts, make the compiler name part of the string to be hashed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15866:85,hash,hashed,85,https://root.cern,https://github.com/root-project/root/pull/15866,1,['hash'],['hashed']
Security,"To reproduce, download http://ccdb-test.cern.ch:8080/download/d64bd450-1619-11ec-a9d5-200114580202 and open it in TBrowser. Works on ubuntu, but on mac I get:. ```; root [2] Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0xdc6299b4 for the class ""array<Long64_t,1>"" in /Users/ktf/Downloads/array<Long64_t,1>_1631706076679.root.; Error in <TBufferFile::CheckByteCount>: object of class array<Long64_t,1> read too few bytes: 6 instead of 14; ```. when clicking on `ccdb_object;1`. Both ROOT 6.24.02 and 6.24.06 seem to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9001:250,checksum,checksum,250,https://root.cern,https://github.com/root-project/root/issues/9001,1,['checksum'],['checksum']
Security,"Today I read User's Guide and spotted many mistakes I noticed when reading it for the first time 15 years ago. I thought that now is the time for me to act and to finally fix them.; I'm not a native speaker, so I don't insist on all of them (I still doubt the usage of articles when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:856,expose,exposed,856,https://root.cern,https://github.com/root-project/root/issues/7284,1,['expose'],['exposed']
Security,"True` as optional argument. ```python; @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True); def f(x); return 2.0 * x; ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python; @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); def f(x); return ROOT.std.string(str(x)). ROOT.CppCallable.f(x); # 1) Throws Python warning:; # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation.; # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); # 2) Falls back to generic impl and prints ""42"" (as string); ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python; @ROOT.DeclareCallable([""float""], ""float""); def f(x); return 2.0 * x. # General use-cases; ROOT.ROOT.f(21) # Returns 42; ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe; df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""); ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily).; However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python; @ROOT.DeclareCallable([""float""], ""float"", ""my_name""); def f(x):; return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42; ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python; import ROOT. # Because C++ is strong",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488:1742,Inject,Inject,1742,https://root.cern,https://github.com/root-project/root/pull/3488,1,['Inject'],['Inject']
Security,"Try searching through a vector instead of the Hashlist, making use of a list of elements to skip, then escaping the loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1801:46,Hash,Hashlist,46,https://root.cern,https://github.com/root-project/root/pull/1801,1,['Hash'],['Hashlist']
Security,Uncomment some different code that is used to compute the discriminat of the; resolvent cubic equation used to find the roots of a quartic equation. ; This different code seems to be better numerically. . This fixes #6900. Add tests for quartic equations to validate code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6908:258,validat,validate,258,https://root.cern,https://github.com/root-project/root/pull/6908,1,['validat'],['validate']
Security,"Until now, in the case where `VecCore` is enabled, only `BinData::fData` was padded to protect vectorized loops against memory access errors. This commit adds the same padding in the case `VecCore` is enabled to all coordinate, data and error vectors of `FitData` family; in particular:; * `FitData::fCoords[i]` (for every `i`); * `BinData::fCoordErrors[i]` (for every `i`); * `BinData::fData`, `BinData::fDataError`; * `BinData::fDataErrorHigh`; * `BinData::fDataErrorLow`; * `BinData::fBinEdge[i]` (for every `i`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/896:127,access,access,127,https://root.cern,https://github.com/root-project/root/pull/896,1,['access'],['access']
Security,"Up to now comments were ignored:; ```; ClassDefOverride(name,version) // class comments; ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9934:112,access,accessing,112,https://root.cern,https://github.com/root-project/root/pull/9934,1,['access'],['accessing']
Security,Update the checksum for xrootd-5.4.2.tar.gz (fixes #10503),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10505:11,checksum,checksum,11,https://root.cern,https://github.com/root-project/root/pull/10505,2,['checksum'],['checksum']
Security,Use Read/Write lock where relevant. Cache the last result of TProcessID::IsValid and TProcessID::GetProcessWithUID as; most often the same PID will be used for most of the process lifetime. This addresses: https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2391:253,access,accessing-tref-data-from-multiple-threads,253,https://root.cern,https://github.com/root-project/root/pull/2391,1,['access'],['accessing-tref-data-from-multiple-threads']
Security,Use a lock to protect access to collection from TROOT::GetListOfClean…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/576:22,access,access,22,https://root.cern,https://github.com/root-project/root/pull/576,1,['access'],['access']
Security,Use file cache when accessing remote files during testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:20,access,accessing,20,https://root.cern,https://github.com/root-project/root/pull/404,1,['access'],['accessing']
Security,"Use larger vectors and access them more sparsely if needed (e.g.; threads now access one every 16 elements in hot std::vector<int>; on systems where a cache line is 64 bytes). In some edge cases in which the analysis workload is light and/or many; threads (48, 64) are involved, this patch reduces runtimes by factors.; The increase in memory usage should be little relative to the memory; required e.g. by jitting or by per-thread histograms.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8007:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/8007,2,['access'],['access']
Security,Use the gROOTMutex to protect access to possible concurrent accesses; to gROOT->GetListOfFiles().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/45:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/45,2,['access'],"['access', 'accesses']"
Security,Use the gRootMutex to protect access to possible concurrent accesses; to gROOT->GetListOfFiles().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/38:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/38,2,['access'],"['access', 'accesses']"
Security,Use the std::atomic load() method to access its content,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1098:37,access,access,37,https://root.cern,https://github.com/root-project/root/pull/1098,1,['access'],['access']
Security,Using higher-level wrapper of OpenSSL SHA1 hash function in civetweb,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10380:43,hash,hash,43,https://root.cern,https://github.com/root-project/root/pull/10380,1,['hash'],['hash']
Security,WE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18899; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18914:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18914; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18969:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18969; /opt/root_src/net/http/civetweb/civetweb.c:18984:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:75582,secur,security,75582,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"W_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #17 0x00002b8fcf5ec950 in clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #18 0x00002b8fcf57b004 in clang::Parser::ParseLinkage(clang::ParsingDeclSpec&, unsigned int) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #19 0x00002b8fcf5e611e in clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #20 0x00002b8fcf5e64b1 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #21 0x00002b8fcf5ecf42 in clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #22 0x00002b8fcf5ed399 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #23 0x00002b8fcef7c0e6 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:8388,Access,AccessSpecifier,8388,https://root.cern,https://github.com/root-project/root/issues/7093,1,['Access'],['AccessSpecifier']
Security,"We get races if all threads access the same TEntryList reference.; This reverts commit f0556c0b49c4229b8c690dbc39ff5deda44be1e5,; and adds a comment so we remember in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2988:28,access,access,28,https://root.cern,https://github.com/root-project/root/pull/2988,1,['access'],['access']
Security,"We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,; which in turn meant another libllvm.so could interfere with those of cling. By hiding these; symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689:15,expose,exposed,15,https://root.cern,https://github.com/root-project/root/pull/4689,1,['expose'],['exposed']
Security,"We have identified in previous meetings (see [here](https://indico.cern.ch/event/945804/) and [here](https://indico.cern.ch/event/956672/)) that a typical HEP analysis benefits from a `Define` version, which evaluates only once per ""dataset"". The identifier of a ""dataset"" is not yet clear. An example scenario is given below (event weights per sample, typical for simulated datasets):. ```cpp; // Construct RDF; RDataFrame df(tree, files);. // Declare computations; auto get_scale = [](const Identifier_t& dataset); {; // dataset = filename.root/treename; if (dataset.contains(""Data"")) return 1.0;; else if (dataset.contains(""DY"")) return 0.9;; else if (dataset.contains(""WJets"")) return 1.1;; else throw std::runtime_error(""Unknown dataset"");; };; auto h = df.DefinePerSample(""weight"", get_scale); .Histo1D(""nMuon"", ""weight"");. // Access result; h->Draw();; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6745:833,Access,Access,833,https://root.cern,https://github.com/root-project/root/issues/6745,1,['Access'],['Access']
Security,"We have to avoid using the CPyCppyy internals in the ROOT pythonization; libray. Otherwise, the ROOT pythonizations will break when updating to the; new CPyCppyy, where the internals have changed a lot. This commit makes sure the internals are not used where it can easily; avoided by using the public CPyCppyy API, or using the C Python API; directly instead of some private compatibility macros defined in; CPyCppyy (that were necessary in the past to support both Python 2 and; 3). Furthermore, the private sources of `CPyCppyy` are now not publically; exposed anymore at the CMake level. This means that we are now forced to; include them via relative paths in the ROOT repository. This makes is; much easier to spot remaining usage of the internal headers (it is quite; hard to tell otherwise that `Utility.h` is a private header from; CPyCppyy). Better exposing this should help in the discussion about how; the get rid of the remaining usage of private headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14414:556,expose,exposed,556,https://root.cern,https://github.com/root-project/root/pull/14414,1,['expose'],['exposed']
Security,"We need to disable the validation of PCM files because rootcling; serializes what it sees. For instance, we even serialize in the PCM; file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The; TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`; is not enough because we rely more on the clang driver to setup correctly; our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling; refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1345:23,validat,validation,23,https://root.cern,https://github.com/root-project/root/pull/1345,2,['validat'],['validation']
Security,"We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp; The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5874:7,authenticat,authentication,7,https://root.cern,https://github.com/root-project/root/pull/5874,1,['authenticat'],['authentication']
Security,"We see the assert ""Specialization is already registered as lazy"" triggered; due to a hash collision of two sets of template arguments: the arguments; are different but the hash happens to be identical. Be more specific when; claiming that the specialization was already registered as lazy, by not; only comparing the hash, but also the template arguments we found under; that hash key (""structurallyEquals"" is good enough here). Fixes macOS builds with assertions enabled:; $ root.exe -l -b tutorials/multicore/mp001_fillHistos.C; where these two specializations have the same hash:. ClassTemplateSpecializationDecl 0x1019a3478 </Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:1364:1, col:113> col:50 imported in std.type_traits hidden <undeserialized declarations> struct remove_reference definition; |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init; | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr; | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveConstructor exists simple trivial needs_implicit; | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveAssignment exists simple trivial needs_implicit; | `-Destructor simple irrelevant trivial needs_implicit; `-TemplateArgument type '(lambda at /Users/axel/build/root/master/deb/include/nlohmann/json.hpp:17411:24)'. while looking for the argument. RecordType 0x1038b8be0 'class (lambda at /Users/axel/build/root/master/deb/tutorials/multicore/mp001_fillHistos.C:23:20)'. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:85,hash,hash,85,https://root.cern,https://github.com/root-project/root/pull/9248,5,['hash'],['hash']
Security,"We will use this helper function for variations too, let's put it in a more generally accessible place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9234:86,access,accessible,86,https://root.cern,https://github.com/root-project/root/pull/9234,1,['access'],['accessible']
Security,"When TGraph2D points are almost aligned, the computation of the plot limits did not work for example like the one exposed here:; https://root-forum.cern.ch/t/issue-related-to-contour-plots-with-tgraph2d/50153. a reproducer is:; ```; void Contour(){; double x[20] = {300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 300, 400};; double y[20] = {1.00e-07, 2.00e-07, 3.00e-07, 4.00e-07, 5.00e-07, 5.00e-07, 6.00e-07, 7.00e-07, 8.00e-07, 9.00e-07, 5.00e-07, 9.10e-07, 9.20e-07, 9.30e-07, 9.40e-07, 9.50e-07, 9.60e-07, 9.70e-07, 1.00e-06, 2.00e-06};; double z[20] = {17.7646, 15.2535, 17.7124, 9.47505, 9.16325, 8.72872, 6.42959, 3.16349, 5.01813, 4.37426, 3.21201, 3.60176, 1.77229, 1.80264, 1.38047, 0.816474, 0.801699, 0.385277, 16.3985, 16.0283};; auto g = new TGraph2D(""contour"",""contour"",20,x,y,z);; g->Draw(""cont4 z"");; }; ```. This PR also allows to define properly the 2D histogram. In the past old interpolator was used by SetHistogram(). Now the default is the new one.; ```; void Contour(){; double x[20] = {300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 300, 400};; double y[20] = {1.00e-07, 2.00e-07, 3.00e-07, 4.00e-07, 5.00e-07, 5.00e-07, 6.00e-07, 7.00e-07, 8.00e-07, 9.00e-07, 5.00e-07, 9.10e-07, 9.20e-07, 9.30e-07, 9.40e-07, 9.50e-07, 9.60e-07, 9.70e-07, 1.00e-06, 2.00e-06};; double z[20] = {17.7646, 15.2535, 17.7124, 9.47505, 9.16325, 8.72872, 6.42959, 3.16349, 5.01813, 4.37426, 3.21201, 3.60176, 1.77229, 1.80264, 1.38047, 0.816474, 0.801699, 0.385277, 16.3985, 16.0283};; auto g = new TGraph2D(""contour"",""contour"",20,x,y,z);; auto h = new TH2D(""h"",""h"",40,200,3000,40,1.00e-07,1.00e-06);; g->SetHistogram(h);; g->Draw(""cont4 z"");; }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10677:114,expose,exposed,114,https://root.cern,https://github.com/root-project/root/pull/10677,1,['expose'],['exposed']
Security,When adding a weighted profile to a non weighted one there was a bug in handling the w2 data structure. Sumw2 is needed to be called before accessing the corresponding array (TProfile::GetB2()).; This fixes ROOT-10153,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7113:140,access,accessing,140,https://root.cern,https://github.com/root-project/root/pull/7113,1,['access'],['accessing']
Security,When building latest ROOT (6.28.02) with latest Protobuf 22.4 tmva/sofie_parsers build fails during linking step with errors of the type:; ```; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::log_internal::LogMessage::OstreamView::~OstreamView()...; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::Mutex::~Mutex()'; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `utf8_range::IsStructurallyValid(...; ```; The problem seems to be caused by adding new dependency of Protobuf on Abseil in Protobuf 22.x (https://protobuf.dev/news/2022-08-03/). To make the code build I needed to:; Add in file `cmake/modules/SearchInstalledSoftware.cmake` after line ; ```; find_package(Protobuf); ```; lines (probably this should be dependent on version of Protobuf); ```; find_package(absl REQUIRED); find_package(utf8_range REQUIRED); ```; In file `tmva/sofie_parsers/CMakeLists.txt` add inside linking after line; ```; ${Protobuf_LIBRARIES}; ```; lines; ```; absl::str_format_internal; absl::log_internal_message; absl::hash; absl::flat_hash_set; absl::log_internal_check_op; utf8_range::utf8_validity; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12770:1084,hash,hash,1084,https://root.cern,https://github.com/root-project/root/issues/12770,1,['hash'],['hash']
Security,"When building root from source, I encountered an error that the SHA-256 hash in root_build/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/download-XROOTD.cmake does not match the hash of the latest (5.4.2) version of the downloaded file. Most likely the hardcoded hash in this file needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10578:72,hash,hash,72,https://root.cern,https://github.com/root-project/root/issues/10578,3,['hash'],['hash']
Security,When building with a macOS SDK before 12.0 and running with 12.0+ the validation of private modulemaps fails due to a change in layout. This change disables the check when DisablePCHValidation is active. (cherry picked from commit 85c757ad962e609779dcf8171e37cf70f611d238). Backport of PR #10555,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10669:70,validat,validation,70,https://root.cern,https://github.com/root-project/root/pull/10669,1,['validat'],['validation']
Security,"When chunking and fitting the right amount of elements per chunk you; may end up with empty chunks at the end. This chunks will still consist; of N elements per chunk, but they will not be initialized. Accessing; them was a problem. Solved by reducing the number of chunks (not; allowing empty chunks)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/811:202,Access,Accessing,202,https://root.cern,https://github.com/root-project/root/pull/811,1,['Access'],['Accessing']
Security,"When doing I/O of RVec objects, TClassEdit::STLArgs was accessing; an element one after the end of a static array. asan rightly complains. This commit fixes #7903,; which contains more details. This PR is a backport of #7920",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7924:56,access,accessing,56,https://root.cern,https://github.com/root-project/root/pull/7924,1,['access'],['accessing']
Security,"When doing I/O of RVec objects, TClassEdit::STLArgs was accessing; an element one after the end of a static array. asan rightly complains. This commit fixes https://github.com/root-project/root/issues/7903,; which contains more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7920:56,access,accessing,56,https://root.cern,https://github.com/root-project/root/pull/7920,1,['access'],['accessing']
Security,"When generating the GQt module in rootcling, we hit the assertions; in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```; CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition; |-also in GQt.TQtClientWidget.h; |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo; |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public; |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes; | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'; | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>; | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'; | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'; | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'; | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3; `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian; |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'; |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'; `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'; `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>; `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'; ```. The reason for this is that we have QSysInfo both in the TQtClientWidget; and TGQt submodules and our current translation (which is supposed to; parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1236:425,Access,AccessSpecDecl,425,https://root.cern,https://github.com/root-project/root/pull/1236,1,['Access'],['AccessSpecDecl']
Security,"When injecting symbols, do not rely on the last Module:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7506:5,inject,injecting,5,https://root.cern,https://github.com/root-project/root/pull/7506,2,['inject'],['injecting']
Security,"When installing ROOT 6.24 with a package manager, CMake will try to modify `/usr` directly even when the installation is supposed to happen to a staging area beforehand. We need to change the link creation to respect DESTDIR such that installations like `env DESTDIR=${PWD}/test-install cmake --build . --target install` doesn't try to modify any system directories.; Here is a sandbox violation report from Portage:; ```; * --------------------------- ACCESS VIOLATION SUMMARY ---------------------------; * LOG FILE: ""/var/tmp/portage/sci-physics/root-6.24.00/temp/sandbox.log""; * ; VERSION 1.0; FORMAT: F - Function called; FORMAT: S - Access Status; FORMAT: P - Path as passed to function; FORMAT: A - Absolute Path (not canonical); FORMAT: R - Canonical Path; FORMAT: C - Command Line. F: symlink; S: deny; P: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; A: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; R: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; C: /usr/bin/cmake -E create_symlink /usr/lib64/root-6.24/libcppyy_backend3_8.so /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so . F: symlink; S: deny; P: /usr/lib/python3.8/site-packages/libcppyy3_8.so; A: /usr/lib/python3.8/site-packages/libcppyy3_8.so; R: /usr/lib/python3.8/site-packages/libcppyy3_8.so; C: /usr/bin/cmake -E create_symlink /usr/lib64/root-6.24/libcppyy3_8.so /usr/lib/python3.8/site-packages/libcppyy3_8.so ; * --------------------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7964:453,ACCESS,ACCESS,453,https://root.cern,https://github.com/root-project/root/issues/7964,2,"['ACCESS', 'Access']","['ACCESS', 'Access']"
Security,"When noting that a TStreamerInfo set has already been processed, we; must do it in 3 separates steps:; - check it was seen before; - read and process the set; - record that the set as been seen. The previous situation:; - check and record that the set as been seen; - read and process the set; led to a race condition if a second thread was checking the same; set before the second step was completed (in which case the; second thread was believing that the set was process and looking; for the result of the process (one of the StreamerInfo) but could; not find it. We extend RConcurrentHashColl to have 2 new operations; - standalone Hash calculation; - standalone Find of hash; - standalone Insert of hash.; and we use it to split the check and the recording as described; previously. (this is an addendum to 95bf468438)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2710:636,Hash,Hash,636,https://root.cern,https://github.com/root-project/root/pull/2710,6,"['Hash', 'hash']","['Hash', 'hash']"
Security,"When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12537:568,Access,Accessing,568,https://root.cern,https://github.com/root-project/root/issues/12537,1,['Access'],['Accessing']
Security,"When plotting a pdf in 2 separate ranges, 2 RooCurve objects are created with the same name . When using pullHist or whatever function of RooPlot accessing the RooCurve by its name, only the last of the two curve can be retrieved. Since RooPlot has no way to access its list of containing objects, apart than given the name, only the RooCurve with the upper range will be used. Code to reproduce the problem:. ```Python; import ROOT as r. ws = r.RooWorkspace(""workspace""); x = ws.factory(""x[-10, 10]""); x.setRange(""lo"", -10, -5); x.setRange(""hi"", 5, 10); pdf = ws.factory(""Gaussian::pdf(x, m1[0], s1[3])""); ds = pdf.generate(r.RooArgSet(x), 1000). fr = x.frame(); ds.plotOn(fr); pdf.plotOn(fr, r.RooFit.Range(""lo,hi"")); pull = fr.pullHist(). c = r.TCanvas(); fr2 = x.frame(); fr2.addPlotable(pull, ""P""); fr2.Draw(); ```. This commit suggests to fix the issue by also considering the ranges of all the other curves that have the same name as the first curve that was found. Closes #9741.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11419:146,access,accessing,146,https://root.cern,https://github.com/root-project/root/pull/11419,2,['access'],"['access', 'accessing']"
Security,"When registering a new specialization, we cannot assert that the; specialization is new, as in: has not been registered as a loadable; specialization before, at least not based on the ODRHash. The ODRHash is not unique for different types (hash collision), i.e.; different specialization template arguments might map to the same; ODRHash value. loadLazySpecializationsImpl() will thus load something,; and claim that the ""Specialization is already registered as lazy"",; but it will in fact be an unrelated specialization. Give up on asserting any of this. NOTE: it is unclear whether the ambiguity in which specialization will; be loaded is causing problems down the road; so far we have not observed; such problems in the wild. If so, the ODRHash must not be the lookup key,; but a mere lookup hint into a multimap or similar, where the search compares; the actual template arguments to identify which lazy specialization to load. Based on discussion with Vassil (and in turn Richard Smith). This fixes e.g.; ```; roottest/cling/threading/clinglock.C...; Assertion failed: (!loadLazySpecializationsImpl(Args) && ""Specialization is already registered as lazy""), function addSpecializationImpl, file /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/AST/DeclTemplate.cpp, line 253.; ```; on macOS 11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9621:240,hash,hash,240,https://root.cern,https://github.com/root-project/root/pull/9621,1,['hash'],['hash']
Security,"When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:; ```; : Preparing the Decorrelation transformation...; : Preparing the Gaussian transformation...; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; : Split TMVA training data in 6400 training events and 1600 validation events; : Print Training Model Architecture; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Program aborted due to an unhandled Error:; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12170:971,validat,validation,971,https://root.cern,https://github.com/root-project/root/issues/12170,2,['validat'],['validation']
Security,"When wrong-formatted TMessage is received, length of buffer may be 0.; As result, buffer may not be allocated at all.; One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:164,access,accessed,164,https://root.cern,https://github.com/root-project/root/pull/4551,1,['access'],['accessed']
Security,"While many widgets will access JSROOT, try to always access JSROOT version from top server location; One cannot simply use src=""/jsrootsys/scripts/JSRoot.core.js"" while it does not work with FastCGI.; Therefore one have to use relative paths like ""../../jsrootsys/scripts/JSRoot.core.js"".; More efficiently will use browser cache",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7124:24,access,access,24,https://root.cern,https://github.com/root-project/root/pull/7124,2,['access'],['access']
Security,"With PCH+Module, sometimes compiler gives a hard error:; _Module file ‘<some-file path>.pcm' is out of date and needs to be rebuilt._; Adding fmodules-disable-diagnostic-validation helps in situation if two compiler instances only differ in diagnostic options, the later instance will not invalidate the original pcm.; Details: https://reviews.llvm.org/D22773",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2680:170,validat,validation,170,https://root.cern,https://github.com/root-project/root/pull/2680,1,['validat'],['validation']
Security,"With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user; interface, because it is an implementation detail of the RooFormulaVar; and RooGenericPdf. However, there are cases where people used the RooFormula interface to; access some information that was otherwise unavailable, like the set of; actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem; like these classes provide an interface to the actual variables; themselves:. ```c++; const RooArgList& dependents() const { return _actualVars; }; ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine; ```. However, `_actualVars` is containing **all** variables, not the actual; variables as the name suggests!. Fixing this removes the need to access the actual vars via the; `RooFormula`. This connects to a discussion that was held on GitHub:; https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12826:271,access,access,271,https://root.cern,https://github.com/root-project/root/pull/12826,2,['access'],['access']
Security,"With a new checksum functionality, it is required to have xxhash library: FindLZ4.cmake was extended to check if you have xxhash includes (for the case if you build your own standalone LZ4, where xxhash is a part of project) and find library in case if you are using system LZ4 that doesn't have xxhash (in this case you need to build standalone xxhash library), otherwise to fall back to builtin_lz4 option.; Builtin LZ4 version has xxhash library built inside by itself and provides different xxhash symbols for the LZ4 library extended with LZ4 namespace, while if it is used standalone LZ4 with standalone xxhash. To separate them, it was introduced LZ4_DEFINITIONS.; @amadio @bbockelm can you look please?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/935:11,checksum,checksum,11,https://root.cern,https://github.com/root-project/root/pull/935,1,['checksum'],['checksum']
Security,"With llvm9, the module ptr gets reset upon emission.; Instead, just look for the symbol in the JIT - where it should be found,; as Init() is injecting it there, and we want to find *that* symbol,; not the one from the binary. Fixes `CodeUnloading/AtExit.C` cling test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7506:141,inject,injecting,141,https://root.cern,https://github.com/root-project/root/pull/7506,1,['inject'],['injecting']
Security,"With the objective of fixing tests, this PR exposes in the ROOT module some functionality of the CPyCppyy extension module. Such functionality is available in the current PyROOT and some tests rely on it. A more exhaustive investigation on which functionality of cppyy we want to expose via the ROOT module is required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3370:44,expose,exposes,44,https://root.cern,https://github.com/root-project/root/pull/3370,2,['expose'],"['expose', 'exposes']"
Security,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11945:226,access,access,226,https://root.cern,https://github.com/root-project/root/pull/11945,1,['access'],['access']
Security,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12096:226,access,access,226,https://root.cern,https://github.com/root-project/root/pull/12096,1,['access'],['access']
Security,"With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9956:187,inject,injecting,187,https://root.cern,https://github.com/root-project/root/pull/9956,1,['inject'],['injecting']
Security,"With this change, fields are only added to the `REntry` and read when they are referenced in the processor loop. This prevents unecessary reads of unused fields. It also makes the REntry completely transparent from an interface perspective. Pointers to values can be obtained through the processor interface itself *before* the iteration starts, or alternatively via the iterator returned by the processor. Important to note that during iteration, the pointer returned by `RNTupleProcessor::GetPtr` will **not** contain the value for the current entry. The reason for this is that from the `RNTupleProcessor` interface there is (with the current implementation) no way to know what the current entry index is. For now, `RNTupleProcessor::GetPtr` contains a warning and a recommendation to get the pointer through the iterator instead. Alternative solutions could be:; 1. Remove `RNTupleProcessor::GetPtr` altogether and only allow access to the field value pointers through the iterator.; 2. Dispatch the local entry index from `RState` back to the processor on every `Advance`, and (re)load the entry when `RNTupleProcessor::GetPtr` is called. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15939:931,access,access,931,https://root.cern,https://github.com/root-project/root/pull/15939,1,['access'],['access']
Security,Without this it currently works fine because RDataFrame does not rewind a DataSource while doing a run on it. However the new RCombinedDS (a RDataSource which iterates on the cartesian product of two other datasources) which I just implemented exposes the issue because the above mentioned condition is not true anymore. This corrects the bug by effectively moving the cached cursor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3428:244,expose,exposes,244,https://root.cern,https://github.com/root-project/root/pull/3428,1,['expose'],['exposes']
Security,Workaround for multi-threaded environment; Ensure main thread id picked when canvas implementation is created otherwise it may be assigned in other thread and screw-up `gPad` access. Workaround may not work if main thread id was wrongly initialized before. This resolves issue https://github.com/root-project/root/issues/15498,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15825:175,access,access,175,https://root.cern,https://github.com/root-project/root/pull/15825,1,['access'],['access']
Security,Workaround for multi-threaded environment; Ensure main thread id picked when canvas implementation is created otherwise it may be assigned in other thread and screw-up gPad access. Workaround may not work if main thread id was wrongly initialized before. This resolves issue https://github.com/root-project/root/issues/15498. Backport of #15825,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15830:173,access,access,173,https://root.cern,https://github.com/root-project/root/pull/15830,1,['access'],['access']
Security,[6.16] [cxxmodules][pch] Disable validation of transent files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4552:33,validat,validation,33,https://root.cern,https://github.com/root-project/root/pull/4552,1,['validat'],['validation']
Security,[6.18] [cxxmodules][pch] Disable validation of transent files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4550:33,validat,validation,33,https://root.cern,https://github.com/root-project/root/pull/4550,1,['validat'],['validation']
Security,"[CMake] Add build option ""asan"" for address sanitizer builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066:44,sanitiz,sanitizer,44,https://root.cern,https://github.com/root-project/root/pull/5066,2,['sanitiz'],['sanitizer']
Security,"[CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 AthenaPoolConverter 0 0 ERROR poolToObject: Could not get object for Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 Exception: POOL read failed. Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000] (no backtrace available).; 12:37:41 AthenaPoolConverter 0 0 ERROR createObj - caught exception: AthenaPoolCnvSvc::::ExcCaughtException: Caught exception in StatusCode T_AthenaPoolCustomCnvWithKey<TRANS, PERS>::PoolToDataObject(DataObject*&, const Token*, const std::string&) [with TRANS = xAOD::EventInfo_v1; PERS = xAOD::EventInfo_v1; std::string = std::__cxx11::basic_string<char>] while creating transient objectxAOD::EventInfo_v1/EventInfo: std::runtime_error: POOL read failed. Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 AthenaPoolConverter 0 0 ERROR createObj failed to get DataObject, Token = [DB=7316ACAF-6478-5C4A-B7E8-29498AC3D2AB][CNT=EventData(xAOD::EventInfo_v1/EventInfo)][CLID=AE8BED6D-1D41-4CAF-994B-42613FC91A0A][TECH=00000205][OID=0000097700000026-0000097700000000]; 12:37:41 DataProxy 0 0 WARNING accessData: conversion failed for data object 45903698/EventInfo; 12:37:41 Returning NULL DataObject pointer; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR Unable to retrieve Event root object; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR declareEventRootAddress for context s: 0 e: 0 failed; 12:37:41 AthenaHiveEventLoopMgr 0 0 ERROR Terminating event processing loop due to errors; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16826:2712,access,accessData,2712,https://root.cern,https://github.com/root-project/root/issues/16826,1,['access'],['accessData']
Security,[Core][Cont] TRefArray: force the loading of the referenced branch when accessing by index,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16246:72,access,accessing,72,https://root.cern,https://github.com/root-project/root/pull/16246,1,['access'],['accessing']
Security,"[CppInterOp](https://github.com/compiler-research/CppInterOp) exposes API from Clang and LLVM in a mostly backward compatibe way. The API support downstream tools that utilize interactive C++ by using the compiler as a service. Adopting more of CppInterOp in ROOT will help simplify the LLVM migration process and allow us to upstream more patches to either CppInterOp or LLVM. @aaronj0, you can take it from here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16296:62,expose,exposes,62,https://root.cern,https://github.com/root-project/root/pull/16296,1,['expose'],['exposes']
Security,"[CppInterOp](https://github.com/compiler-research/CppInterOp) exposes API from Clang and LLVM in a mostly backward compatibe way. The API support downstream tools that utilize interactive C++ by using the compiler as a service. This PR is the first step in using pure clang based reflection API in meta, and part of eventually integrating the JITCall and DynamicLibraryManager infrastructure. Adopting more of CppInterOp in ROOT will help simplify the LLVM migration process and allow us to upstream more patches to either CppInterOp or LLVM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16814:62,expose,exposes,62,https://root.cern,https://github.com/root-project/root/pull/16814,1,['expose'],['exposes']
Security,[Cppyy][13410] Fix accessibility of derived class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13820:19,access,accessibility,19,https://root.cern,https://github.com/root-project/root/pull/13820,1,['access'],['accessibility']
Security,[DF] Breaking change: expose type of Defined column from RInterface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3431:22,expose,expose,22,https://root.cern,https://github.com/root-project/root/pull/3431,1,['expose'],['expose']
Security,[DF] Fix out of bounds access in AddDSColumns,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6214:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/6214,1,['access'],['access']
Security,[Doc][Root-7664] Expose to doxygen core/dictgen,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3778:17,Expose,Expose,17,https://root.cern,https://github.com/root-project/root/pull/3778,1,['Expose'],['Expose']
Security,[Exp PyROOT] Expose cppyy functionality in ROOT module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3370:13,Expose,Expose,13,https://root.cern,https://github.com/root-project/root/pull/3370,1,['Expose'],['Expose']
Security,[Exp PyROOT] Make Cppyy memory management symbols accessible in facade,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4109:50,access,accessible,50,https://root.cern,https://github.com/root-project/root/pull/4109,1,['access'],['accessible']
Security,[FreeBSD] Add access to some cpu information,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13129:14,access,access,14,https://root.cern,https://github.com/root-project/root/pull/13129,1,['access'],['access']
Security,[IO] Add test for hashing of streamer info record + misc fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188:18,hash,hashing,18,https://root.cern,https://github.com/root-project/root/pull/2188,1,['hash'],['hashing']
Security,[IO] Backport hashing of StreamerInfos before injecting them in the type system,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2179:14,hash,hashing,14,https://root.cern,https://github.com/root-project/root/pull/2179,2,"['hash', 'inject']","['hashing', 'injecting']"
Security,[IO] Do not include base classes of pair in CheckSum calculation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4445:44,CheckSum,CheckSum,44,https://root.cern,https://github.com/root-project/root/pull/4445,1,['CheckSum'],['CheckSum']
Security,[JupyROOT] 6.22: Rescue lost JavaScript code injected by JupyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7215:45,inject,injected,45,https://root.cern,https://github.com/root-project/root/pull/7215,1,['inject'],['injected']
Security,[NFC][skip-ci] Fix some typos in sanitizer/README.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8591:33,sanitiz,sanitizer,33,https://root.cern,https://github.com/root-project/root/pull/8591,1,['sanitiz'],['sanitizer']
Security,[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1512:41,access,accessing,41,https://root.cern,https://github.com/root-project/root/pull/1512,1,['access'],['accessing']
Security,[PyROOT] Sanitize input arguments to AsNumpy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6521:9,Sanitiz,Sanitize,9,https://root.cern,https://github.com/root-project/root/pull/6521,1,['Sanitiz'],['Sanitize']
Security,[PyROOT] Test that RVec is accessible from the ROOT namespace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7687:27,access,accessible,27,https://root.cern,https://github.com/root-project/root/pull/7687,1,['access'],['accessible']
Security,[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4895:21,Inject,Inject,21,https://root.cern,https://github.com/root-project/root/pull/4895,1,['Inject'],['Inject']
Security,[PyROOT][ROOT-10830] Add hash pythonization for std::string,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7071:25,hash,hash,25,https://root.cern,https://github.com/root-project/root/pull/7071,1,['hash'],['hash']
Security,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4916:20,Inject,Inject,20,https://root.cern,https://github.com/root-project/root/pull/4916,1,['Inject'],['Inject']
Security,[RDataFrame] Expose more local df operations for distributed RDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15039:13,Expose,Expose,13,https://root.cern,https://github.com/root-project/root/issues/15039,1,['Expose'],['Expose']
Security,[RF] Clean up RooDataHist & implement batch data access.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6718:49,access,access,49,https://root.cern,https://github.com/root-project/root/pull/6718,1,['access'],['access']
Security,[RF] Extra public accessor methods in root browser classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12064:18,access,accessor,18,https://root.cern,https://github.com/root-project/root/pull/12064,1,['access'],['accessor']
Security,[RF] Figure out how to handle RooArgList with duplicates and hash-assisted find,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9425:61,hash,hash-assisted,61,https://root.cern,https://github.com/root-project/root/issues/9425,1,['hash'],['hash-assisted']
Security,[RF] Fix recently-introduced hash table bug in `RooLinkedList`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10158:29,hash,hash,29,https://root.cern,https://github.com/root-project/root/pull/10158,1,['hash'],['hash']
Security,[RF] New public accessor methods for various roofit data members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12030:16,access,accessor,16,https://root.cern,https://github.com/root-project/root/pull/12030,1,['access'],['accessor']
Security,[RF] Prevent access into empty vector in ConfidenceBelt.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5197:13,access,access,13,https://root.cern,https://github.com/root-project/root/pull/5197,1,['access'],['access']
Security,[RF] Re-expose RooFormulaVar::formula().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:8,expose,expose,8,https://root.cern,https://github.com/root-project/root/pull/6250,1,['expose'],['expose']
Security,[RF] Replace RooLinkedList by hash map for RooRealVar binnings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5657:30,hash,hash,30,https://root.cern,https://github.com/root-project/root/pull/5657,1,['hash'],['hash']
Security,[RF] additional public methods for accessing/modifying product factors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12048:35,access,accessing,35,https://root.cern,https://github.com/root-project/root/pull/12048,1,['access'],['accessing']
Security,[RF] prevent accessing empty vector (histOut),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15902:13,access,accessing,13,https://root.cern,https://github.com/root-project/root/pull/15902,1,['access'],['accessing']
Security,[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14249:16,access,access,16,https://root.cern,https://github.com/root-project/root/pull/14249,1,['access'],['access']
Security,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:319,sanitiz,sanitizer,319,https://root.cern,https://github.com/root-project/root/pull/5466,2,['sanitiz'],['sanitizer']
Security,[RVec] Improve error message in case of out-of-bounds access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11771:54,access,access,54,https://root.cern,https://github.com/root-project/root/pull/11771,1,['access'],['access']
Security,[RooFit] Fix ROOT-6378: accessing the binning of default ctr'd RooRealVar objects leads to crashes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2575:24,access,accessing,24,https://root.cern,https://github.com/root-project/root/pull/2575,1,['access'],['accessing']
Security,[TDF] Avoid accessing zero-length TTreeReaderArray,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:12,access,accessing,12,https://root.cern,https://github.com/root-project/root/pull/1938,1,['access'],['accessing']
Security,[TDF] Early validation of column names,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/775:12,validat,validation,12,https://root.cern,https://github.com/root-project/root/pull/775,1,['validat'],['validation']
Security,[TDF] Fix ROOT-9210: validate columns before snapshotting,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1543:21,validat,validate,21,https://root.cern,https://github.com/root-project/root/pull/1543,1,['validat'],['validate']
Security,"[TMVA] Clean-up cross-validation, add error-handling and example",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/281:22,validat,validation,22,https://root.cern,https://github.com/root-project/root/pull/281,1,['validat'],['validation']
Security,[TMVA] Enable weights for validation events in PyKeras method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/285:26,validat,validation,26,https://root.cern,https://github.com/root-project/root/pull/285,1,['validat'],['validation']
Security,[TMVA] root-8988 -- Validate batchsize before training,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2586:20,Validat,Validate,20,https://root.cern,https://github.com/root-project/root/pull/2586,1,['Validat'],['Validate']
Security,[TTreeProcessorMT] Access pointer after we check it's not null,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10214:19,Access,Access,19,https://root.cern,https://github.com/root-project/root/pull/10214,1,['Access'],['Access']
Security,[Tree] Bogus data silently read when trying to access an indexed friend TTree with an invalid index,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7713:47,access,access,47,https://root.cern,https://github.com/root-project/root/issues/7713,1,['access'],['access']
Security,[Tree] Expose tree utility functions for internal use,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785:7,Expose,Expose,7,https://root.cern,https://github.com/root-project/root/pull/7785,1,['Expose'],['Expose']
Security,[WIP] Use a lock to protect access to collection from TROOT::GetListOfCleanups,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/67:28,access,access,28,https://root.cern,https://github.com/root-project/root/pull/67,1,['access'],['access']
Security,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660:51,sanitiz,sanitizer,51,https://root.cern,https://github.com/root-project/root/pull/5660,1,['sanitiz'],['sanitizer']
Security,"[ci] SonarCloud: run on GH infra, better for security. [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13010:45,secur,security,45,https://root.cern,https://github.com/root-project/root/pull/13010,1,['secur'],['security']
Security,[clang-analyzer-core.NullDereference]; 1: Assuming 'delta' is >= 'min_dec' in /opt/root_src/gui/gui/src/TGPack.cxx:532; 2: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:532; 3: 'f0' initialized to a null pointer value in /opt/root_src/gui/gui/src/TGPack.cxx:537; 4: Calling 'TGPack::FindFrames' in /opt/root_src/gui/gui/src/TGPack.cxx:538; 5: Loop condition is false. Execution continues on line 226 in /opt/root_src/gui/gui/src/TGPack.cxx:217; 6: Returning without writing to 'f0' in /opt/root_src/gui/gui/src/TGPack.cxx:227; 7: Returning from 'TGPack::FindFrames' in /opt/root_src/gui/gui/src/TGPack.cxx:538; 8: Assuming field 'fDragOverflow' is >= 0 in /opt/root_src/gui/gui/src/TGPack.cxx:540; 9: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:540; 10: Assuming field 'fDragOverflow' is <= 0 in /opt/root_src/gui/gui/src/TGPack.cxx:550; 11: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:550; 12: Access to field 'fFrame' results in a dereference of a null pointer (loaded from variable 'f0') in /opt/root_src/gui/gui/src/TGPack.cxx:561; /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53:12: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:37; 2: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:37; 3: Assuming 'pname' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 4: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 5: Value assigned to field 'fImage' in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:49; 6: Assuming field 'fImage' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 7: Left side of '||' is true in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 8: Called C++ object pointer is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53; /opt/root_src/gui/gui/src/TGSpeedo.cxx:462:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:49195,Access,Access,49195,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,[cling] Add interfaces that expose JIT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16537:28,expose,expose,28,https://root.cern,https://github.com/root-project/root/pull/16537,1,['expose'],['expose']
Security,[cling] Do not inject libCling first (ROOT-10499):,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6108:15,inject,inject,15,https://root.cern,https://github.com/root-project/root/pull/6108,1,['inject'],['inject']
Security,[cling] Explicitly resolve symbols also from injected libs:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6126:45,inject,injected,45,https://root.cern,https://github.com/root-project/root/pull/6126,1,['inject'],['injected']
Security,[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4710:8,Expose,Expose,8,https://root.cern,https://github.com/root-project/root/pull/4710,1,['Expose'],['Expose']
Security,[cling] Inject symbols from libc_nonshared.a,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13286:8,Inject,Inject,8,https://root.cern,https://github.com/root-project/root/pull/13286,1,['Inject'],['Inject']
Security,[cling] Only set result type if result type is known for auto-injection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14451:62,inject,injection,62,https://root.cern,https://github.com/root-project/root/pull/14451,1,['inject'],['injection']
Security,[cling] Rewrite implementation of `InputValidator::validate()`; fixes ROOT-9202,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8771:51,validat,validate,51,https://root.cern,https://github.com/root-project/root/pull/8771,1,['validat'],['validate']
Security,[cling] Unify access to template_arguments,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13223:14,access,access,14,https://root.cern,https://github.com/root-project/root/pull/13223,1,['access'],['access']
Security,[cmake] Inject -isysroot ${CMAKE_OSX_SYSROOT} to unuran.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2699:8,Inject,Inject,8,https://root.cern,https://github.com/root-project/root/pull/2699,1,['Inject'],['Inject']
Security,[core/base] Null ptr access safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443:21,access,access,21,https://root.cern,https://github.com/root-project/root/pull/11443,1,['access'],['access']
Security,"[core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'.; [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'.; [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds.; [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds.; [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds.; [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference.; [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference.; [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference.; [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference.; [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435:442,access,accessed,442,https://root.cern,https://github.com/root-project/root/pull/1435,3,['access'],['accessed']
Security,[core] Solve Streamer function warning in Doxygen and partly expose ClassDef documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9629:61,expose,expose,61,https://root.cern,https://github.com/root-project/root/pull/9629,1,['expose'],['expose']
Security,[cxxmodules] Add -fno-validate-pch in invocation of Clang with modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2686:22,validat,validate-pch,22,https://root.cern,https://github.com/root-project/root/pull/2686,1,['validat'],['validate-pch']
Security,[cxxmodules] Disable module file validation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1345:33,validat,validation,33,https://root.cern,https://github.com/root-project/root/pull/1345,1,['validat'],['validation']
Security,[cxxmodules] Do not emit relocation error when -fno-validate-pch is set,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2407:52,validat,validate-pch,52,https://root.cern,https://github.com/root-project/root/pull/2407,1,['validat'],['validate-pch']
Security,[cxxmodules] Fix bloom filter without .gnu.hash,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2203:43,hash,hash,43,https://root.cern,https://github.com/root-project/root/pull/2203,1,['hash'],['hash']
Security,[cxxmodules] Prevent RScanner from accessing hidden declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/915:35,access,accessing,35,https://root.cern,https://github.com/root-project/root/pull/915,1,['access'],['accessing']
Security,[cxxmodules] Support both sysv and gnu hash for bloom filter,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2204:39,hash,hash,39,https://root.cern,https://github.com/root-project/root/pull/2204,1,['hash'],['hash']
Security,[cxxmodules][pch] Disable validation of transent files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:26,validat,validation,26,https://root.cern,https://github.com/root-project/root/pull/4480,1,['validat'],['validation']
Security,[gui] Editable combo box nullptr access if SetEnabled is called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14301:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/14301,1,['access'],['access']
Security,[hist] prevent nullptr access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15094:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/15094,1,['access'],['access']
Security,[hist] prevent nullptr access with copy from default constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/16773,1,['access'],['access']
Security,[http] Let configure `Access-Control-Allow-Credentials` header,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12866:22,Access,Access-Control-Allow-Credentials,22,https://root.cern,https://github.com/root-project/root/pull/12866,1,['Access'],['Access-Control-Allow-Credentials']
Security,[io] Prevent infinite loops and add more security for overflows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14820:41,secur,security,41,https://root.cern,https://github.com/root-project/root/pull/14820,1,['secur'],['security']
Security,[io] Protect out-of-bounds access in R__WriteDestructorBody:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5642:27,access,access,27,https://root.cern,https://github.com/root-project/root/pull/5642,1,['access'],['access']
Security,[io] Validate ZSTD target/source sizes and compr level,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15038:5,Validat,Validate,5,https://root.cern,https://github.com/root-project/root/pull/15038,1,['Validat'],['Validate']
Security,[io] prevent nullptr access if oldclass not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15876:21,access,access,21,https://root.cern,https://github.com/root-project/root/pull/15876,1,['access'],['access']
Security,[math] Avoid out-of-bounds array access with `vc` in FitUtil.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/13772,1,['access'],['access']
Security,[ntuple] Add page checksum creation and verification,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15921:18,checksum,checksum,18,https://root.cern,https://github.com/root-project/root/pull/15921,1,['checksum'],['checksum']
Security,[ntuple] Add page checksums,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15789:18,checksum,checksums,18,https://root.cern,https://github.com/root-project/root/pull/15789,1,['checksum'],['checksums']
Security,[ntuple] Add static method to access on-disk size of column elements,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6833:30,access,access,30,https://root.cern,https://github.com/root-project/root/pull/6833,1,['access'],['access']
Security,[ntuple] Consider making `REntry::AddValue()` publicly accessible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11673:55,access,accessible,55,https://root.cern,https://github.com/root-project/root/issues/11673,1,['access'],['accessible']
Security,[ntuple] Enable subfield access in `REntry`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16693:25,access,access,25,https://root.cern,https://github.com/root-project/root/pull/16693,1,['access'],['access']
Security,[ntuple] Expose fixed-size arrays as RVecs in RDF datasource,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10664:9,Expose,Expose,9,https://root.cern,https://github.com/root-project/root/issues/10664,1,['Expose'],['Expose']
Security,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12140:70,access,access,70,https://root.cern,https://github.com/root-project/root/pull/12140,1,['access'],['access']
Security,[ntuple] Only give const ref access to fields in RNTupleModel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14354:29,access,access,29,https://root.cern,https://github.com/root-project/root/pull/14354,1,['access'],['access']
Security,[ntuple] Protect descriptor access in page source by r/w lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10185:28,access,access,28,https://root.cern,https://github.com/root-project/root/pull/10185,1,['access'],['access']
Security,[ntuple] Re-expose field type of RNTupleView,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12142:12,expose,expose,12,https://root.cern,https://github.com/root-project/root/pull/12142,1,['expose'],['expose']
Security,[ntuple] Restrict public access to RValues in REntry,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14353:25,access,access,25,https://root.cern,https://github.com/root-project/root/pull/14353,1,['access'],['access']
Security,[ntuple] Store streamer checksum if available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16060:24,checksum,checksum,24,https://root.cern,https://github.com/root-project/root/pull/16060,1,['checksum'],['checksum']
Security,[ntuple] add a test for accessing a RNTupleView out of bounds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16789:24,access,accessing,24,https://root.cern,https://github.com/root-project/root/pull/16789,1,['access'],['accessing']
Security,[ntuple] check field range validity only on access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16832:44,access,access,44,https://root.cern,https://github.com/root-project/root/pull/16832,1,['access'],['access']
Security,"[ntuple] expose RNTuple(Un)ownedView instead of RNTupleView<T, bool>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16363:9,expose,expose,9,https://root.cern,https://github.com/root-project/root/pull/16363,1,['expose'],['expose']
Security,[ntuple] remove checksum field from anchor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15553:16,checksum,checksum,16,https://root.cern,https://github.com/root-project/root/pull/15553,1,['checksum'],['checksum']
Security,[rbrowser] let access in-memory objects from TDirectory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10523:15,access,access,15,https://root.cern,https://github.com/root-project/root/pull/10523,1,['access'],['access']
Security,"[skip-ci]. # This Pull request:. Makes the CI load OpenStack object-store credentials from files on runners instead of using GitHub secrets. When `pull_request` is a workflow trigger, the job can't access secrets, which means that the S3 secret token is unavailable. Adding S3 credentials to the runners themselves solves this issue. The OpenStack credentials are defined [here](https://gitlab.cern.ch/ai/it-puppet-hostgroup-lcgapp/-/blob/rootci_test/code/manifests/build/root.pp#L43) (using [teigi](https://configdocs.web.cern.ch/secrets/adding.html)). If a malicious actor makes a PR with a job to print the credentials, or to upload a malicious artifact, it would still have to be approved by a maintainer. A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201:198,access,access,198,https://root.cern,https://github.com/root-project/root/pull/12201,1,['access'],['access']
Security,[textinput] kCmdUndo: prevent accessing empty vector,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10181:30,access,accessing,30,https://root.cern,https://github.com/root-project/root/pull/10181,1,['access'],['accessing']
Security,"[the spec](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) only says:; > CRC32: Checksum of the envelope and the payload. which has multiple possible interpretation, the most straightforward one being crc32 is calculated by using the bytes of the entire header?; https://github.com/root-project/root/blob/0bb465e60960efea6ddfe1d16b98767104df273e/tree/ntuple/v7/src/RNTupleSerialize.cxx#L261-L270. maybe we can document how the crc32 is calculated in this 2-step (?) process inside the spec? cc @jpivarski . ref: https://github.com/scikit-hep/uproot5/pull/705",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11318:119,Checksum,Checksum,119,https://root.cern,https://github.com/root-project/root/issues/11318,1,['Checksum'],['Checksum']
Security,[tmva] fix nullptr access in public methods of ftraininfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14859:19,access,access,19,https://root.cern,https://github.com/root-project/root/pull/14859,1,['access'],['access']
Security,[tree] Prevent garbage access and buffer overflow,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15280:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/15280,1,['access'],['access']
Security,[tree] prevent crash due to null access in clones,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15335:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/15335,1,['access'],['access']
Security,[tree] prevent nullptr access in ttreereader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15929:23,access,access,23,https://root.cern,https://github.com/root-project/root/pull/15929,1,['access'],['access']
Security,[tree] raise error instead of crash when trying to access null GetTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15283:51,access,access,51,https://root.cern,https://github.com/root-project/root/pull/15283,1,['access'],['access']
Security,"[v6-26] Revert ""[cmake] Update xrootd hash after a new version of the…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11165:38,hash,hash,38,https://root.cern,https://github.com/root-project/root/pull/11165,1,['hash'],['hash']
Security,[v6-30][gui] Editable combo box nullptr access if SetEnabled is called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14397:40,access,access,40,https://root.cern,https://github.com/root-project/root/pull/14397,1,['access'],['access']
Security,[v632][BP] [hist] prevent nullptr access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15133:34,access,access,34,https://root.cern,https://github.com/root-project/root/pull/15133,1,['access'],['access']
Security,[v634][ntuple] Check field range validity only on access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16833:50,access,access,50,https://root.cern,https://github.com/root-project/root/pull/16833,1,['access'],['access']
Security,"[webgui] change loopback via API, do not expose server dirs [6.30]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14189:41,expose,expose,41,https://root.cern,https://github.com/root-project/root/pull/14189,1,['expose'],['expose']
Security,"[wincxxmodules] Simplify includes, Expose M_PI for Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6309:35,Expose,Expose,35,https://root.cern,https://github.com/root-project/root/pull/6309,1,['Expose'],['Expose']
Security,"](https://root.cern/doc/master/HistoToWorkspaceFactoryFast_8cxx_source.html#l02109); the Asimov workspace is created before the ParamSettings are applied. This commit is fixing this problem. The problem can be reproduced with the following script/instructions:. ```C++; using namespace RooStats;; using namespace HistFactory;. // Step 1: initialize the XML files; //; // Run prepareHistFactory before in this directory; //; // Modify the GaussExample in the generated example to be:; //; // <Measurement Name=""GaussExample"" Lumi=""1."" LumiRelErr=""0.1"" >; // <POI>SigXsecOverSM</POI>; // <ParamSetting Const=""True"">Lumi</ParamSetting>; // <ParamSetting Val=""20"" Const=""True"">alpha_syst1</ParamSetting>; // </Measurement>. // Step 2: Create the RooWorkspace; //. ConfigParser parser{};; auto measurements = parser.GetMeasurementsFromXML(""config/example.xml"");. // Get the first example, the GaussExample; Measurement& meas = measurements.front();. // Collect the histograms from their files,; meas.CollectHistograms();. // Now, do the measurement; std::unique_ptr<RooWorkspace> ws{MakeModelAndMeasurementFast( meas )};. // Step 3: Validation plot to show mismatch between model and Asimov data; //. auto x = ws->var(""obs_x_channel1"");; auto data = ws->data(""asimovData"");; auto pdf = ws->pdf(""model_channel1"");. // Draw the asimov data together with the model and check if they match; TCanvas c1(""c1"");; RooPlot *xframe = x->frame();; data->plotOn(xframe);; pdf->plotOn(xframe);. xframe->Draw();. c1.SaveAs(""plot.png"");. // Note that the errors will be plotted wrongly if the Asimov data is; // correct. That's because if the changed alpha_syst1 value is considered; // correctly, the asimov dataset has non-integer weights. In this case, the; // plotting uses SumW2 errors instead of Poisson erros, and the weights; // squared is not filled correctly in the Asimov data that is created by; // AsymptoticCalculator::GenerateAsimovData(). But this is a completely; // different issue.; ```; Closes #8186.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10761:1435,Validat,Validation,1435,https://root.cern,https://github.com/root-project/root/pull/10761,1,['Validat'],['Validation']
Security,"_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #16 0x00002b8fcf5e5fa1 in clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #17 0x00002b8fcf5ec950 in clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #18 0x00002b8fcf57b004 in clang::Parser::ParseLinkage(clang::ParsingDeclSpec&, unsigned int) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #19 0x00002b8fcf5e611e in clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #20 0x00002b8fcf5e64b1 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #21 0x00002b8fcf5ecf42 in clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #22 0x00002b8fcf5ed399 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:8069,Access,AccessSpecifier,8069,https://root.cern,https://github.com/root-project/root/issues/7093,1,['Access'],['AccessSpecifier']
Security,"_This PR is not intended to be merged into ROOT! That's why it's a draft!_. The purpose of this PR is to show which private members I had to make public to access RNTuple in a BulkIO style. Two of these changes were just to parameterize the cluster and page sizes:. * `fClusterSizeEntries` was made public so that I could set it and make it apples-to-apples with the other formats.; * `kDefaultElementsPerPage = 2097152` is large, but 8× less than the maximum size that can be compressed. The maximum is `0xffffff` because the header provides 3 bytes to specify the uncompressed size, so that uncompressed size can't exceed that. The number I chose here is `2**21`, which is 8× below that limit, to allow for 8-byte integers and floating point numbers. What's probably missing here is the logic for splitting the data to be compressed into a series of blocks with this maximum size. (TTree and normal serialized objects do that.). The rest of the changes are just turning private/protected members into public ones so that they can be read directly in a BulkIO style. Here's how that's done: suppose you're filling a buffer named `array` using a `view` of type `V` returned by `GetViewCollection` or `GetView<T>`. We know the `length` of elements to read, so the function is. ```c++; template <typename V, typename T>; void read_from_rntuple_view(T* buffer, V& view, int64_t& offset, int64_t length) {; int64_t current = 0;; while (current < length) {; T* data = (T*)view.fField.Map(offset + current);; int32_t num = view.fField.fPrincipalColumn->fCurrentPage.GetNElements();; int32_t skipped = (offset + current) - view.fField.fPrincipalColumn->fCurrentPage.GetGlobalRangeFirst();; int32_t remaining = num - skipped;; if (current + remaining > length) {; remaining = length - current;; }; if (remaining > 0) {; std::memcpy(&buffer[current], data, remaining*sizeof(T));; }; current += remaining;; }; offset += current;; }; ```. Here's a sample usage:. ```c++; auto ntuple = RNTupleReader::Open(std::mo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112:156,access,access,156,https://root.cern,https://github.com/root-project/root/pull/7112,1,['access'],['access']
Security,_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:403; 11: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:404; 12: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:404; 13: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:406; /opt/root_src/tmva/tmva/src/Reader.cxx:443:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:432; 2: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:435; 3: Assuming 'method' is non-null in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 4: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 6: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 7: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:440; 8: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 10: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:443; /opt/root_src/tmva/tmva/src/Reader.cxx:535:22: warning: Called C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:113249,Access,Access,113249,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,`RBrowser` is no longer experimental and can be compiled once `webgui` is enabled.; It also required to implement file dialogs in other widgets (like TWebCanvas) therefore need to be compiled together. Add `ROOT::RWebWindowsManager::SetUseConnectionKey` method to let change security settings via method call.; Before only rootrc file can be used. Small fix in URL generation when token is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15979:275,secur,security,275,https://root.cern,https://github.com/root-project/root/pull/15979,1,['secur'],['security']
Security,```; /opt/root_src/core/clib/src/Demangle.c:326:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:326; /opt/root_src/core/clib/src/Demangle.c:327:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:327; /opt/root_src/core/clib/src/Demangle.c:344:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:344; /opt/root_src/core/clib/src/Demangle.c:345:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that sup,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:284,secur,security,284,https://root.cern,https://github.com/root-project/root/issues/7422,4,['secur'],['security']
Security,```; /opt/root_src/core/cont/inc/TBits.h:82:60: warning: Using copy-ctor but class TBits::TReference has a trivial copy-ctor but non trivial assign operator [clazy-rule-of-two-soft]; /opt/root_src/core/cont/inc/TBtree.h:248:40: warning: Access to field 'fInnerMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') [clang-analyzer-core.NullDereference]; 1: Passing null pointer value via 2nd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:1279; 2: Calling constructor for 'TBtInnerNode' in /opt/root_src/core/cont/src/TBtree.cxx:1279; 3: Passing null pointer value via 3rd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:688; 4: Calling constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:688; 5: Assuming 'p' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:546; 6: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:546; 7: 't' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:547; 10: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 11: Loop condition is false. Exiting loop in /opt/root_src/core/cont/src/TBtree.cxx:547; 12: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:123; 13: Null pointer value stored to field 'fTree' in /opt/root_src/core/cont/src/TBtree.cxx:548; 14: Returning from constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:688; 15: Calling 'TBtInnerNode::MaxIndex' in /opt/root_src/core/cont/src/TBtree.cxx:690; 16: Access to field 'fInnerMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') in /opt/root_src/core/cont/inc/TBtree.h:248; /opt/root_src/core/cont/inc/TBtree.h:314:41: warning: Access to field 'fLeafMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') [clang-analyzer-core.NullDerefere,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:237,Access,Access,237,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Access'],['Access']
Security,```; /opt/root_src/core/cont/inc/TBits.h:82:60: warning: Using copy-ctor but class TBits::TReference has a trivial copy-ctor but non trivial assign operator [clazy-rule-of-two-soft]; /opt/root_src/math/fumili/src/TFumili.cxx:853:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/math/fumili/src/TFumili.cxx:853; /opt/root_src/math/fumili/src/TFumili.cxx:1018:13: warning: Value stored to 'ki' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ki' is never read in /opt/root_src/math/fumili/src/TFumili.cxx:1018; /opt/root_src/math/fumili/src/TFumili.cxx:2141:10: warning: Value stored to 'eu' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'eu' is never read in /opt/root_src/math/fumili/src/TFumili.cxx:2141; /opt/root_src/math/genvector/src/3DConversions.cxx:510:20: warning: Value stored to 'u' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'u' is never read in /opt/root_src/math/genvector/src/3DConversions.cxx:510; /opt/root_src/math/genvector/src/3DConversions.cxx:516:21: warning: Value stored to 'u' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'u' is never read in /opt/root_src/math/genvector/src/3DConversions.cxx:516; /opt/root_src/math/genvector/src/AxisAngleXother.cxx:108:19: warning: Value stored to 'aqu' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'aqu' is never read in /opt/root_src/math/genvector/src/AxisAngleXother.cxx:108; /opt/root_src/math/genvector/src/AxisAngleXother.cxx:139:19: warning: Value stored to ',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:464,secur,security,464,https://root.cern,https://github.com/root-project/root/issues/7458,1,['secur'],['security']
Security,```; /opt/root_src/core/rint/src/TTabCom.cxx:1431:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1431; /opt/root_src/core/rint/src/TTabCom.cxx:1452:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1452; /opt/root_src/core/rint/src/TTabCom.cxx:1455:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1455; /opt/root_src/core/rint/src/TTabCom.cxx:1459:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-securi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:285,secur,security,285,https://root.cern,https://github.com/root-project/root/issues/7427,2,['secur'],['security']
Security,```; /opt/root_src/graf2d/asimage/src/TASImage.cxx:3385:7: warning: Value stored to 'x' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'x' is never read in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3385; /opt/root_src/graf2d/asimage/src/TASImage.cxx:3386:7: warning: Value stored to 'y' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'y' is never read in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3386; /opt/root_src/graf2d/asimage/src/TASImage.cxx:3652:17: warning: Array access (via field 'argb32') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fImage' is non-null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3623; 2: Taking false branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3623; 3: Assuming field 'fScaledImage' is null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3628; 4: '?' condition is false in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3628; 5: 'img' is non-null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3629; 6: Taking false branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3629; 7: Assuming field 'argb32' is null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3631; 8: Taking true branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3631; 9: Field 'fScaledImage' is null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3632; 10: Taking false branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3632; 11: Assuming 'i' is < field 'height' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3649; 12: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3649; 13: Assuming 'j' is < field 'width' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3650; 14: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3650; 15: Array access (via field 'argb32') results in a null pointer dereference in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3652; /opt/root_src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:529,access,access,529,https://root.cern,https://github.com/root-project/root/issues/7432,1,['access'],['access']
Security,"```; ROOT Version: root-5-34-00-patches; Platform: 4.18.0-193.6.3.el8_2.x86_64 (RHEL 8.2 Ootpa); Compiler: gcc (GCC) 8.3.1 20191121 (Red Hat 8.3.1-5); ```. I have been asked to install ROOT v5-34 in a machine that does not have an internet connection. My configure line is:; ```; ./configure --prefix=/software/root/5.34; ```; But it fails to find the LZ4 library as shown below in the output of the `configure` command:; ```; Checking whether to build included lz4 ... yes; ```; Even if the library can be found in the PATH by the command `which`. This is a problem, because it will then try to download the package and it will fail. So I try the following configure line:; ```; ./configure --prefix=/software/root/5.34 --disable-builtin-lz4; ```; But the option is ignored and the output of the configure shows that it will build the builtin_lz4 (and therefore download it from internet):; ```; Enabled support for asimage, astiff, builtin_afterimage, builtin_glew, builtin_lz4, cintex, explicitlink, fftw3, gviz, genvector, krb5, memstat, opengl, reflex, shadowpw, shared, ssl, tmva, vdt, x11, xft, xml.; ```; I was able to bypass the behaviour for the version 6.24 using `cmake` with the following line:; ```; cmake -DCMAKE_INSTALL_PREFIX=<some-path> -Dasimage=on -Dcocoa=on -Dvdt=off -Dxrootd=off -Dclad=off <path-to-source>; ```; Again, for version 6.24, I was not able to use the `--disable` option, but somehow, this combination of options resulted in the bypassing of the builtin-lz4. This issue was opened following a [suggestion in the root forum](https://root-forum.cern.ch/t/installation-without-internet-access/45361/2?u=eduardo) where the same question was posted earlier. Regards,; Eduardo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8424:1618,access,access,1618,https://root.cern,https://github.com/root-project/root/issues/8424,1,['access'],['access']
Security,"```; build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]; 306 | sprintf(path, ""%s/%s"", *pp, include);; | ^~; ```; Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12099:233,expose,expose,233,https://root.cern,https://github.com/root-project/root/pull/12099,1,['expose'],['expose']
Security,"`fWcsTitle` accessed wrongly, following macro crashes:. ```; void bug(); {; TText txt1(0,0, L""Any text 1"");; TText txt2(0,0, L""Any text 2"");; ; txt2 = txt1; // this is crashing; }; ```. Discovered in gcc11 warnings",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8319:12,access,accessed,12,https://root.cern,https://github.com/root-project/root/pull/8319,1,['access'],['accessed']
Security,"aa0b9be10db43857cd7""><code>570e8b1</code></a> add publishConfig for v3 publishes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:2055,secur,security-vulnerabilities,2055,https://root.cern,https://github.com/root-project/root/pull/11864,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::GenerateCXXGlobalVarDeclInitFunc (this=this; entry=0x7fffe1b042c0, Fn=0x55ed2cd76b78, D=0x55ed2ccd0f20, Addr=Addr; entry=0x55ed2cd76b08, PerformInit=PerformInit; entry=true) at /usr/local/src/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:17157,Access,AccessType,17157,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,"aded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'; <<snip>>; [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12152:2309,secur,security,2309,https://root.cern,https://github.com/root-project/root/issues/12152,2,"['hash', 'secur']","['hash-style', 'security']"
Security,agManager.cxx:3335; 24: expanded from macro 'gVirtualX' in /opt/root_src/core/base/inc/TVirtualX.h:338; 25: Taking false branch in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3335; 26: 'file' is non-null in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3336; 27: '?' condition is true in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3336; 28: Called C++ object pointer is null in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3338; /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3806:7: warning: Value stored to 'ok' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ok' is never read in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3806; /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:149:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:149; /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:208:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:208; /opt/root_src/gui/guihtml/src/TGHtmlIndex.cxx:394:13: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:77314,secur,security,77314,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"ake --build . --target install -- -j4`. ### Setup; <!--; 1. ROOT version; 8. Operating system; 9. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->; 1. `gcc -v`; ```sh; Using built-in specs.; COLLECT_GCC=gcc; COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/lto-wrapper; Target: x86_64-pc-linux-gnu; Configured with: /build/gcc/src/gcc/configure --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++,d --enable-bootstrap --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --with-linker-hash-style=gnu --with-system-zlib --enable-__cxa_atexit --enable-cet=auto --enable-checking=release --enable-clocale=gnu --enable-default-pie --enable-default-ssp --enable-gnu-indirect-function --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-multilib --enable-plugin --enable-shared --enable-threads=posix --disable-libssp --disable-libstdcxx-pch --disable-werror --with-build-config=bootstrap-lto --enable-link-serialization=1 gdc_include_dir=/usr/include/dlang/gdc; Thread model: posix; Supported LTO compression algorithms: zlib zstd; gcc version 11.2.0 (GCC); ```; 2. `clang -v`; ```sh; clang version 13.0.1; Target: x86_64-pc-linux-gnu; Thread model: posix; InstalledDir: /usr/bin; Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-pc-linux-gnu/11.2.0; Found candidate GCC installation: /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.2.0; Selected GCC installation: /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.2.0; Candidate multilib: .;@m64; Candidate multilib: 32;@m32; Selected multilib: .;@m64; ```; 3. `cat /etc/*release`; ```sh; DISTRIB_ID=""Arch""; DISTRIB_RELEASE=""rolling""; DISTRIB_DESCRIPTION=""Arch Linux""; NAME=""Arch Linux""; PRETTY_NAME=""Arch Linux""; ID=arch; BUILD_ID=rolling; ANSI_COLOR=""38;2;23;147;209""; HOME_URL=""https://arch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:30785,hash,hash-style,30785,https://root.cern,https://github.com/root-project/root/issues/10528,1,['hash'],['hash-style']
Security,aking true branch in /opt/root_src/core/base/src/TROOT.cxx:1168; 30: The right operand of '+' is a garbage value in /opt/root_src/core/base/src/TROOT.cxx:1169; /opt/root_src/core/base/src/TRegexp.cxx:172:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TRegexp.cxx:172; /opt/root_src/core/base/src/TRegexp.cxx:188:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TRegexp.cxx:188; /opt/root_src/core/base/src/TRegexp.cxx:273:11: warning: 3rd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]; 1: Calling 'TString::operator()' in /opt/root_src/core/base/src/TRegexp.cxx:281; 2: 'len' declared without an initial value in /opt/root_src/core/base/src/TRegexp.cxx:271; 3: Calling 'TString::Index' in /opt/root_src/core/base/src/TRegexp.cxx:272; 4: Calling 'TRegexp::Index' in /opt/root_src/core/base/src/TRegexp.cxx:263; 5: Assuming field 'fStat' is equal to kOK in /opt/root_src/core/base/src/TRegexp.cxx:211; 6: Taking false branch in /opt/root_src/core/base/src/TRegexp.cxx:211; 7: Assuming 'slen' is < 'i' in /opt/root_src/core/base/src/TRegexp.cxx:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:115634,secur,security,115634,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:53834,secur,security,53834,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:54491,secur,security,54491,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:55148,secur,security,55148,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:56462,secur,security,56462,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:58437,secur,security,58437,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:59094,secur,security,59094,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:59751,secur,security,59751,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:60408,secur,security,60408,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:65668,secur,security,65668,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetwe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:28187,secur,security,28187,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:34595,secur,security,34595,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:48575,secur,security,48575,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:49232,secur,security,49232,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:49889,secur,security,49889,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:55805,secur,security,55805,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:63038,secur,security,63038,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66982,secur,security,66982,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:67639,secur,security,67639,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:68296,secur,security,68296,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:68953,secur,security,68953,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18899; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:73736,secur,security,73736,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:52520,secur,security,52520,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:53177,secur,security,53177,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:62381,secur,security,62381,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:65011,secur,security,65011,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,all to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66325,secur,security,66325,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,alling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kDouble32_t:' at line 187 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:187; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:198:21: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is a,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:71202,Access,Access,71202,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,alling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUShort_t:' at line 183 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_short' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:183; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:184:35: warning: Access to field 'u_int' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:64410,Access,Access,64410,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"als/src/Python/Objects/call.c:283; #36 0x00007faf4b430ef7 in _PyObject_Vectorcall (kwnames=0x0, nargsf=2, args=0x7ffdb628f800, callable=0x7faf298dbaf0); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #37 method_vectorcall (method=<optimized out>, args=<optimized out>, nargsf=<optimized out>, kwnames=0x0); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Objects/classobject.c:89; #38 0x00007faf4b42df36 in _PyObject_Vectorcall (kwnames=0x0, nargsf=1, args=0x7ffdb628f890, callable=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #39 _PyObject_FastCall (nargs=1, args=0x7ffdb628f890, func=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:147; ...; ```. Unfortunately all I could decipher from this is that things go south while accessing the `DataVector<xAOD::TauJet_v3>` type in Python. That access itself happens in a fairly complicated way itself, in this helper code:. https://gitlab.cern.ch/atlas/athena/-/blob/master/Control/xAODRootAccess/python/GenerateDVIterators.py. As before, I found that by explicitly accessing types ""in the right order"", I can work around the issue. (See: https://gitlab.cern.ch/atlas/athena/-/merge_requests/44843) But I'd really like to understand what the underlying issue actually is. Note that this problem only shows up in a debug build. In an optimised build the test in question runs just fine. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The code should not encounter an assertion inside LLVM/Cling. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run you",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:10857,access,accessing,10857,https://root.cern,https://github.com/root-project/root/issues/8578,1,['access'],['accessing']
Security,alse branch in /opt/root_src/gui/gui/src/TGFont.cxx:809; 23: Assuming 'start' is >= 'end' in /opt/root_src/gui/gui/src/TGFont.cxx:706; 24: Loop condition is false. Execution continues on line 832 in /opt/root_src/gui/gui/src/TGFont.cxx:706; 25: Assuming field 'fNumChunks' is > 0 in /opt/root_src/gui/gui/src/TGFont.cxx:832; 26: Left side of '&&' is true in /opt/root_src/gui/gui/src/TGFont.cxx:832; 27: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:832; 28: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:832; 29: Value assigned to 'chunk' in /opt/root_src/gui/gui/src/TGFont.cxx:844; 30: Assuming 'chunk' is null in /opt/root_src/gui/gui/src/TGFont.cxx:845; 31: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:845; 32: 'n' is < field 'fNumChunks' in /opt/root_src/gui/gui/src/TGFont.cxx:846; 33: Loop condition is true. Entering loop body in /opt/root_src/gui/gui/src/TGFont.cxx:846; 34: Access to field 'fY' results in a dereference of a null pointer (loaded from variable 'chunk') in /opt/root_src/gui/gui/src/TGFont.cxx:849; /opt/root_src/gui/gui/src/TGFont.cxx:853:24: warning: The right operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Assuming 'numChars' is >= 0 in /opt/root_src/gui/gui/src/TGFont.cxx:681; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:681; 3: Loop condition is true. Entering loop body in /opt/root_src/gui/gui/src/TGFont.cxx:706; 4: 'start' is >= 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:707; 5: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:707; 6: Loop condition is false. Execution continues on line 727 in /opt/root_src/gui/gui/src/TGFont.cxx:710; 7: 'start' is >= 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:728; 8: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:728; 9: 'start' is equal to 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:741; 10: Left side of '&&' is true in /opt/root_src/gui/gui/src/TGFont.cxx:7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:21373,Access,Access,21373,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,ame.cxx:49; 6: Assuming field 'fImage' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 7: Left side of '||' is true in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 8: Called C++ object pointer is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53; /opt/root_src/gui/gui/src/TGSpeedo.cxx:462:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:462; /opt/root_src/gui/gui/src/TGSpeedo.cxx:470:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:470; /opt/root_src/gui/gui/src/TGSplitFrame.cxx:260:15: warning: Access to field 'fSplitTool' results in a dereference of a null pointer [clang-analyzer-core.NullDereference]; 1: Assuming field 'fFrame' is null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 2: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 3: Calling 'TGSplitFrame::SplitVertical' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:595; 4: Field 'fFrame' is null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:605; 5: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:605; 6: Calling 'TGSplitFrame::VSplit' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:621; 7: Assuming field 'fSplitter' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 8: Left side of '||' is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 9: Assuming field 'fFirst' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 10: Left side of '||' is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 11: Assuming field 'fSecond' is equal to null in /opt/root_src/gui/gui/src/TGSpli,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:50820,Access,Access,50820,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,"analysis logic or framework is taking up the time. The best way to decrease the runtime would be to optimize your code, attempt to parallelize it onto multiple threads if possible, or use a machine with a more performant CPU. The best way to decrease the runtime would be to optimize your code (or the framework's), parallelize it onto multiple threads if possible (for example with RDataFrame and EnableImplicitMT) or switch to a machine with a more performant CPU. 2. The 'Real Time' is significantly higher than 'CPU Time / number of threads'.; If the real time is higher than the CPU time per core it implies the reading of data is the bottleneck, as the CPU cores are wasting time waiting for data to arrive from your disk/drive or network connection in order to decompress it. The best way to decrease your runtime would be transferring the data you need onto a faster storage medium (i.e. a faster disk/drive such as an SSD, or connecting to a faster network for remote file access), or to use a compression algorithm with a higher compression ratio, possibly at the cost of the decompression rate. Changing the number of threads is unlikely to help, and in fact using too many threads may degrade performance if they make requests to different regions of your local storage.; N.B. If no '--threads' argument was provided this is 1, otherwise it is the minimum of the value provided and the number of threads your CPU can run in parallel. It is worth noting that - on shared systems or if running other heavy applications - the number of your own threads running at any time may be lower than the limit due to demand on the CPU. 3. The 'Real Time' is similar to 'CPU Time / number of threads' AND 'Compressed Throughput' is lower than expected for your storage medium:; This would imply that your CPU threads aren't decompressing data as fast as your storage medium can provide it, and so decompression is the bottleneck. The best way to decrease your runtime would be to utilise a system with",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14039:3942,access,access,3942,https://root.cern,https://github.com/root-project/root/pull/14039,1,['access'],['access']
Security,"anch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'elBranch' is never read in /opt/root_src/tree/tree/src/TBranchSTL.cxx:305; /opt/root_src/tree/tree/src/TBufferSQL.cxx:292:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TBufferSQL.cxx:292; /opt/root_src/tree/tree/src/TBufferSQL.cxx:635:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TBufferSQL.cxx:635; /opt/root_src/tree/tree/src/TChain.cxx:2366:32: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Taking false branch in /opt/root_src/tree/tree/src/TChain.cxx:2346; 2: Calling 'TString::Contains' in /opt/root_src/tree/tree/src/TChain.cxx:2356; 3: 's' is non-null in /opt/root_src/core/base/inc/TString.h:625; 4: '?' condition is true in /opt/root_src/core/base/inc/TString.h:625; 5: Assuming the condition is true in /opt/root_src/core/base/inc/TString.h:625; 6: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:625; 7: Returning from 'TString::Contains' in /opt/root_src/tree/tree/src/TChain.cxx:2356; 8: Takin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:44202,secur,security,44202,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,"and concise description of what you expected to happen.; -->; The compilation does not fail. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile with `vecgeom` option. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Compiling ROOT v6.26.04 on Debian Unstable (amd64), with GCC 11.3.0 and VecGeom 1.2.0, with this configuration:; ```; -- ROOT Configuration . System Linux-5.18.0-2-amd64; Processor 4 core Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz (x86_64); Build type None; Install path /usr; Compiler GNU 11.3.0; Compiler flags:; C -g -O2 -ffile-prefix-map=<srcdir>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Wno-implicit-fallthrough -pipe -Wall -W -pthread ; C++ -g -O2 -ffile-prefix-map=<srcdir>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; Linker flags:; Executable -Wl,-z,relro -Wl,-z,now -rdynamic; Module -Wl,-z,relro -Wl,-z,now; Shared -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_unuran builtin_vdt ccache dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi imt mathmore mlp minuit2 mpi mysql odbc opengl pgsql pyroot qt5web qt6web r roofit root7 rpath shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-sofie tmva-pymva tmva-rmva spectrum unuran uring vc vdt veccore x11 xml xrootd; ```. ### Additional context; <!--; Add any other context about the problem here.; --",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10984:5308,secur,security,5308,https://root.cern,https://github.com/root-project/root/issues/10984,1,['secur'],['security']
Security,andard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-ana,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:35828,secur,security,35828,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,andard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-an,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:37272,secur,security,37272,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"ang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395; 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441; 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51; 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855; 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138; 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373; 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423; 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588; 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704; 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81; 19 rootcling_stage1 0x000000010cd",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:1923,Access,AccessSpecifier,1923,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Access'],['AccessSpecifier']
Security,"ar, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984; #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006; #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500; #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:5462,hash,hash,5462,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],"['hash', 'hashtable']"
Security,arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:22007,secur,security,22007,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:28027,secur,security,28027,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:60946,secur,security,60946,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:58317,secur,security,58317,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:50427,secur,security,50427,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:63576,secur,security,63576,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:26754,secur,security,26754,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:52400,secur,security,52400,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:62261,secur,security,62261,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:64891,secur,security,64891,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ase of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/l,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:2951,secur,security,2951,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ase of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:3739,secur,security,3739,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"aster of today, with xrootd off); ```; /opt/root_src/build/rmkdepend/cppsetup.c:150:4: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:150; /opt/root_src/build/rmkdepend/cppsetup.c:180:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:1164,secur,security,1164,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,athcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 39: Passing null pointer value via 2nd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 40: Calling 'IntegralEvaluator::operator()' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 41: Assuming field 'fIg1Dim' is null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 42: Taking false branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 43: Assuming field 'fIgNDim' is non-null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:210; 44: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:210; 45: Assuming 'i' is < field 'fDim' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:212; 46: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:212; 47: Array access (from variable 'x2') results in a null pointer dereference in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:213; /opt/root_src/math/mathcore/inc/TMath.h:1373:16: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming the condition is false in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2370; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Left side of '||' is false in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2370; 4: Assuming field 'fInputFunction' is null in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2370; 5: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 6: Left side of '||' is false in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2370; 7: Assuming field 'fSpecial' is > 200 in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2370; 8: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 9: Taking false branch in /opt/root_src/math/minuit/src/TLinearFitte,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:13571,access,access,13571,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,body in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:653; 30: Taking false branch in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:657; 31: Left side of '||' is false in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:663; 32: Taking false branch in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:663; 33: Loop condition is true. Entering loop body in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:681; 34: Assigned value is garbage or undefined in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:687; /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:1226:4: warning: Value stored to 'z' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'z' is never read in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:1226; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357:16: warning: Call to function 'strcpy' is insecure as it does not provide bo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:94249,secur,security,94249,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:44799,secur,security,44799,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:33817,secur,security,33817,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:39719,secur,security,39719,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:40374,secur,security,40374,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:44144,secur,security,44144,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:45454,secur,security,45454,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that supp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:46109,secur,security,46109,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:39064,secur,security,39064,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:43489,secur,security,43489,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:7189,secur,security,7189,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"branch in /opt/root_src/core/cont/src/TArrayS.cxx:37; 4: Calling 'TArrayS::Set' in /opt/root_src/core/cont/src/TArrayS.cxx:37; 5: 'n' is >= 0 in /opt/root_src/core/cont/src/TArrayS.cxx:107; 6: Taking false branch in /opt/root_src/core/cont/src/TArrayS.cxx:107; 7: 'n' is not equal to field 'fN' in /opt/root_src/core/cont/src/TArrayS.cxx:108; 8: Taking true branch in /opt/root_src/core/cont/src/TArrayS.cxx:108; 9: 'temp' initialized to a null pointer value in /opt/root_src/core/cont/src/TArrayS.cxx:109; 10: 'n' is not equal to 0 in /opt/root_src/core/cont/src/TArrayS.cxx:110; 11: Taking true branch in /opt/root_src/core/cont/src/TArrayS.cxx:110; 12: 'n' is >= field 'fN' in /opt/root_src/core/cont/src/TArrayS.cxx:112; 13: Taking false branch in /opt/root_src/core/cont/src/TArrayS.cxx:112; 14: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/core/cont/src/TArrayS.cxx:114; /opt/root_src/core/cont/src/TRefArray.cxx:348:30: warning: Array access (via field 'fUIDs') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'obj' is non-null in /opt/root_src/core/cont/src/TRefArray.cxx:378; 2: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:378; 3: Calling 'TRefArray::Last' in /opt/root_src/core/cont/src/TRefArray.cxx:379; 4: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:575; 5: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:575; 6: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/src/TRefArray.cxx:578; 7: Returning from 'TRefArray::Last' in /opt/root_src/core/cont/src/TRefArray.cxx:379; 8: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:379; 9: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:379; 10: Calling 'TRefArray::AddLast' in /opt/root_src/core/cont/src/TRefArray.cxx:393; 11: Calling 'TRefArray::AddAtAndExpand' in /opt/root_src/core/cont/src/TRefArray.cxx:284; 12: 'ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:12230,access,access,12230,https://root.cern,https://github.com/root-project/root/issues/7424,1,['access'],['access']
Security,buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:630; /opt/root_src/gui/gui/src/TGText.cxx:671:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:671; /opt/root_src/gui/gui/src/TGText.cxx:1106:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:1106; /opt/root_src/gui/gui/src/TGTextEdit.cxx:504:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGTextEdit.cxx:504; /opt/root_src/gui/gui/src/TGTextEdit.cxx:1873:10: warning: Value stored to 'len' is never read [clang-analyzer-deadcode.DeadStores]; 1: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:56664,secur,security,56664,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:135; /opt/root_src/build/rmkdepend/pr.c:141:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:141; /opt/root_src/build/rmkdepend/pr.c:147:8: warning: Potential leak of memory pointed to by 'ipifile' [clang-analyzer-unix.Malloc]; 1: Assuming the condition is false in /opt/root_src/build/rmkdepend/pr.c:173; 2: Taking false branch in /opt/root_src/build/rmkdepend/pr.c:173; 3: Assuming 'file' is not equal to field 'i_file' in /opt/root_src/build/rmkdepend/pr.c:176; 4: Taking true branch in /opt/root_src/build/rmkdepend/pr.c:176; 5: Calling 'pr' in /opt/root_src/build/rmkdepend/pr.c:177; 6: Assuming 'len' is > 2 in /opt/root_src/build/rmkdepend/pr.c:104; 7: Left side of '&&' is true in /opt/root_src/build/rmkdepend/pr.c:104; 8: Assuming the condition is true in /opt/root_src/build/rmkdepend/pr.c:104; 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:46205,secur,security,46205,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,c/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:505; /opt/root_src/core/clib/src/Demangle.c:1316:22: warning: Null pointer passed to 1st parameter expecting 'non,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:7310,secur,security,7310,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,c/graf2d/x11/src/Rotated.cxx:1198; 46: Access to field 'fNext' results in a dereference of a null pointer (loaded from variable 'last') in /opt/root_src/graf2d/x11/src/Rotated.cxx:1205; /opt/root_src/graf2d/x11/src/TGX11.cxx:2280:4: warning: Maybe you meant to call TVirtualX::SetLineColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:2385:4: warning: Maybe you meant to call TVirtualX::SetMarkerColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3119:4: warning: Maybe you meant to call TVirtualX::SetTextAlign() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3129:4: warning: Maybe you meant to call TVirtualX::SetTextColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/gifencode.c:246:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/graf2d/x11/src/gifencode.c:246; /opt/root_src/graf2d/x11ttf/src/TGX11TTF.cxx:150:1: warning: non-POD static (TTFX11Init) [clazy-non-pod-global-static]; /opt/root_src/graf2d/asimage/src/TASImage.cxx; /opt/root_src/graf2d/gpad/src/TButton.cxx; /opt/root_src/graf2d/gpad/src/TCanvas.cxx; /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx; /opt/root_src/graf2d/gpad/src/TGroupButton.cxx; /opt/root_src/graf2d/gpad/src/TPad.cxx; /opt/root_src/graf2d/gpadv7/src/RColor.cxx; /opt/root_src/graf2d/graf/src/TCandle.cxx; /opt/root_src/graf2d/graf/src/TCurlyLine.cxx; /opt/root_src/graf2d/graf/src/TGaxis.cxx; /opt/root_src/graf2d/gr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:96528,secur,security,96528,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,c/sql/mysql/src/TMySQLStatement.cxx:729; 19: Taking false branch in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:729; 20: Control jumps to 'case MYSQL_TYPE_TINY:' at line 745 in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:741; 21: Execution continues on line 764 in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:745; 22: Assuming 'allocsize' is > 'fgAllocSizeLimit' in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:764; 23: Taking true branch in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:764; 24: The value 0 is assigned to 'allocsize' in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:764; 25: Call to 'malloc' has an allocation size of 0 bytes in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:766; /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:940:15: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/sql/mysql/src/TMySQLStatement.cxx:940; /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:808:4: warning: Null pointer passed as 1st argument to string copy function [clang-analyzer-unix.cstring.NullArg]; 1: Calling 'TPgSQLStatement::SetSQLParamType' in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:806; 2: Assuming 'npar' is >= 0 in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:702; 3: Left side of '||' is false in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:702; 4: Assuming 'npar' is < field 'fNumBuffers' in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:702; 5: Taking false branch in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:702; 6: Assuming 'maxsize' is < 0 in /opt/root_src/sql/pgsql/src/TPgSQLStatement.cxx:704,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7525:2877,secur,security,2877,https://root.cern,https://github.com/root-project/root/issues/7525,1,['secur'],['security']
Security,c/tmva/tmva/src/PDEFoam.cxx:319; 14: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:319; 15: 'i' is >= field 'fDim' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:325; 16: Loop condition is false. Execution continues on line 340 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:325; 17: Calling 'PDEFoam::InitCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:343; 18: Field 'fCells' is equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 19: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 20: Value assigned to field 'fCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:364; 21: Assuming field 'fCells' is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 22: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 23: Assuming 'i' is < field 'fNCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 24: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 25: Array access (via field 'fCells') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:370; /opt/root_src/tmva/tmva/src/PDEFoam.cxx:397:11: warning: Array access (via field 'fCells') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fPseRan' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 2: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 3: Assuming field 'fDistr' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 4: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 5: Assuming field 'fDim' is not equal to 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 6: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 7: Field 'fRvec' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 8: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 9: Assuming field 'fDim' is <= 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:308; 10: Taking false branch in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:96446,access,access,96446,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:12390,secur,security,12390,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:414; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:447:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:1376,secur,security,1376,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/l,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:2163,secur,security,2163,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:6096,secur,security,6096,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:6883,secur,security,6883,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:7670,secur,security,7670,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:8457,secur,security,8457,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:9244,secur,security,9244,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:10031,secur,security,10031,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:25438,secur,security,25438,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:63127,secur,security,63127,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ccess (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:20633,secur,security,20633,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,ce with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:28943,secur,security,28943,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:120; /opt/root_src/core/clib/src/mrealloc.c:142:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:142; /opt/root_src/core/clib/src/Demangle.c; /opt/root_src/core/clib/src/attach.c; /opt/root_src/core/clib/src/mcalloc.c; /opt/root_src/core/clib/src/mmalloc.c; /opt/root_src/core/clib/src/mrealloc.c; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:28821,secur,security,28821,https://root.cern,https://github.com/root-project/root/issues/7422,3,['secur'],['security']
Security,ced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:62938,secur,security,62938,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:32318,secur,security,32318,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is not equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming 'preserveSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4frame.c:1356; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1356; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1404:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:53214,secur,security,53214,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"change loopback via API, do not expose server dirs [6.28]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14477:32,expose,expose,32,https://root.cern,https://github.com/root-project/root/pull/14477,1,['expose'],['expose']
Security,checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:135; /opt/root_src/build/rmkdepend/pr.c:141:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:141; /opt/root_src/build/rmkdepend/pr.c:147:8: warning: Potential leak of memory pointed to by 'ipifile' [clang-analyzer-unix.Malloc]; 1: Assuming the condition is false in /opt/root_src/b,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:45714,secur,security,45714,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:28729,secur,security,28729,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,civetweb.c:18065; 13: Taking true branch in /opt/root_src/net/http/civetweb/civetweb.c:18065; 14: Loop condition is true. Entering loop body in /opt/root_src/net/http/civetweb/civetweb.c:18066; 15: Field 'stop_flag' is equal to 0 in /opt/root_src/net/http/civetweb/civetweb.c:18072; 16: Left side of '&&' is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 17: Assuming the condition is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 18: Taking true branch in /opt/root_src/net/http/civetweb/civetweb.c:18072; 19: Calling 'accept_new_connection' in /opt/root_src/net/http/civetweb/civetweb.c:18073; 20: Assuming the condition is false in /opt/root_src/net/http/civetweb/civetweb.c:17937; 21: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:17937; 22: 1st function call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:72770,secur,security,72770,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:32627,secur,security,32627,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,cks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:61114,secur,security,61114,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"clang might need to find a definition, that ""we"" might have.; But we need to find it based on a type name from clang, from a fwd decl;; or (as in ROOT-10804) based on a typename-from-typeid operation.; So register that as an alias!. The normalized-name-as-known-to-ROOT and typeid-name can be different,; for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed; because it involves an inline namespace, and LHCb uses typeid demangling.; LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`); that failed to load because `v1` is an inline namespace, thus failing; instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid.; The transaction unloading then fails to completely remove this instantiation; (an unrelated bug), such that the remainders of the invalid decl are picked; up by a subsequent template instantiation which then asserts because of the; incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling.; Now that multiple locations need it, just store it with the AnnotatedRecordDecl.; It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5819:769,hash,hashmap,769,https://root.cern,https://github.com/root-project/root/pull/5819,1,['hash'],['hashmap']
Security,clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:7045,secur,security,7045,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"clude <TROOT.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>. void workload(TTreeReader &r) {; TTreeReaderArray<double> ra(r, ""truthCaloPt"");; while (r.Next()); ra.GetSize();; }. int main() {; ROOT::EnableImplicitMT(2);; ROOT::TTreeProcessorMT mt({""f1.root"", ""f2.root"", ""f3.root"", ""f4.root"", ""f5.root""}, ""t"");; mt.Process(workload);; }; ```. With these files: [files.zip](https://github.com/root-project/root/files/8451196/files.zip). The problem seems to be at the level of TGenCollectionProxy: multiple threads end up sharing the same TGenCollectionProxy objects, which is not thread safe (e.g. because of https://github.com/root-project/root/blob/bce5777b8f479212babb7a8af5485d9a6bbd251e/io/io/src/TEmulatedCollectionProxy.cxx#L84-L85). In principle, however, as we use different TChains/TTreeReaders in each thread, they should also access different TGenCollectionProxy instances. Example backtraces at the point of crash (this is one of several failure modes, but it's the one where the problem is clear -- both threads, at frame 0, are accessing the same TGenCollectionProxy instance):. ```; >>> thread apply all bt 10. Thread 2 (Thread 0x7fffdc0e2640 (LWP 312745) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff7d57a15 in TVirtualCollectionProxy::TPushPop::~TPushPop (this=0x7fffdc0dad20, __in_chrg=<optimized out>) at ../core/cont/inc/TVirtualCollectionProxy.h:65; #2 0x00007ffff76274b1 in TEmulatedCollectionProxy::Destructor (this=0x7fffd4016090, p=0x7fffd40156e0, dtorOnly=false) at ../io/io/src/TEmulatedCollectionProxy.cxx:87; #3 0x00007ffff7d4f8c2 in TClass::Destructor (this=0x7fffd40152c0, obj=0x7fffd40156e0, dtorOnly=false) at ../core/meta/src/TClass.cxx:5417; #4 0x00007ffff676afdb in TBranchElement::ReleaseObject (this=0x7fffd4017590) at ../tree/tree/src/TBranchElement.cxx:4743; #5 0x00007ffff676b265 in TBranchElement::ResetAddress (this=0x7fffd4017590) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:1164,access,accessing,1164,https://root.cern,https://github.com/root-project/root/issues/10357,1,['access'],['accessing']
Security,clude/ctype.h:89; 50: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:1311; 51: Value assigned to 'mangled' in /opt/root_src/core/clib/src/Demangle.c:1314; 52: Calling 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 53: Assuming 's' is equal to NULL in /opt/root_src/core/clib/src/Demangle.c:2679; 54: Left side of '||' is true in /opt/root_src/core/clib/src/Demangle.c:2679; 55: Returning from 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 56: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/clib/src/Demangle.c:1316; /opt/root_src/core/clib/src/Demangle.c:1528:10: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:1528; /opt/root_src/core/clib/src/Demangle.c:1910:34: warning: Array access (via field 'typevec') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Null pointer value stored to field 'typevec' in /opt/root_src/core/clib/src/Demangle.c:505; 6: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:507; 7: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:507; 8: Assuming the cond,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:13183,secur,security,13183,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,code.DeadStores]; 1: Value stored to 'sSignalHandlerActive' is never read in /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:102; /opt/root_src/core/unix/src/TUnixSystem.cxx:689:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:689; /opt/root_src/core/unix/src/TUnixSystem.cxx:4246:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:3749,secur,security,3749,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the same position ID in the object store. ; - `RNTupleLocator`: leverages the changes introduced by PR #11828; all DAOS locators use the type `kDaos` and payload format `RNTupleLocatorObject64`. To locate pages within a cage, the 64-bit payload encodes the cage index in the LS half and the offset in the MS half. If caging is disabled, the offset remains zero, and each 'cage' is trivially the sealed page.; - Currently, there are no plans to enable support for page-wise reading without cluster caching if the desired page is caged, as that use-case is not performant and thus not recommended. Caged pages in DAOS should be accessed with the page buffering read option turned on. By disallowing the reading of a single caged page when the wrapping cage size is unknown, the cage sizes - or upper bounds for them - do not need to be passed to `RPageSourceDaos`; they are trivially devised in `RPageSourceDaos::LoadClusters()` by accessing all page locators in a buffered page-group. ; - `RPageSourceDaos::LoadClusters()` and `RPageSourceDaos::PopulatePageFromCluster()` extract the cage position and offset-in-cage from each sealed page's `RNTupleLocator::fPosition`. The former function has been changed to coalesce the page locators by cage index and perform a single read operation per cage. ## Checklist:. - [x] tested changes locally + HPE `delphi` cluster; - [x] updated the docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:2620,access,accessed,2620,https://root.cern,https://github.com/root-project/root/pull/11466,2,['access'],"['accessed', 'accessing']"
Security,cpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23671,secur,security,23671,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,cro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18969:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18969; /opt/root_src/net/http/civetweb/civetweb.c:18984:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18984; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19012:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:76401,secur,security,76401,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ction call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:73616,secur,security,73616,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ctions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:14678,secur,security,14678,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ctions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4hc.c:1167; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1167; 9: 'dictSiz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:64677,secur,security,64677,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,cureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:2194,secur,security,2194,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,cxx:1195; 58: Assuming 'stack' is non-null in /opt/root_src/io/xml/src/TBufferXML.cxx:978; 59: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:978; 60: Assuming the condition is true in /opt/root_src/io/xml/src/TBufferXML.cxx:983; 61: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:983; 62: Calling 'TBufferXML::PerformPostProcessing' in /opt/root_src/io/xml/src/TBufferXML.cxx:984; 63: Assuming the condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:1203; 64: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:1203; 65: '?' condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:1207; 66: Dereference of null pointer in /opt/root_src/io/xml/src/TBufferXML.cxx:1207; /opt/root_src/io/xml/src/TBufferXML.cxx:2535:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TBufferXML.cxx:2535; /opt/root_src/io/xml/src/TBufferXML.cxx:2558:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is true in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 2: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 4: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 6: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 7: Memory is allocated in /opt/root_src/io/xml/src/TBufferXML.cxx:2557; 8: Use of zero-allocated memory in /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:127659,secur,security,127659,https://root.cern,https://github.com/root-project/root/issues/7431,1,['secur'],['security']
Security,"cxx:1330; 13: Taking false branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1330; 14: Assuming 'slice1' is null in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1332; 15: Left side of '&&' is false in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1332; 16: 'slice1' is null in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1335; 17: Taking false branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1335; 18: Control jumps to 'case 2:' at line 1352 in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1345; 19: Passing null pointer value via 4th parameter 'array2' in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1353; 20: Calling 'TGeoVoxelFinder::Intersect' in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1353; 21: Assuming 'current_byte' is < 'nbytes' in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1554; 22: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1554; 23: Array access (from variable 'array2') results in a null pointer dereference in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1555; /opt/root_src/geom/geom/src/TGeoXtru.cxx:558:13: warning: Value stored to 'dist' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dist' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:558; /opt/root_src/geom/geom/src/TGeoXtru.cxx:878:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoXtru.cxx:878; /opt/root_src/geom/geom/src/TGeoXtru.cxx:939:13: warning: Value stored to 'safz' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safz' during its initialization is never read in /opt/root_src/geom/geom/src/TGeo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:79163,access,access,79163,https://root.cern,https://github.com/root-project/root/issues/7428,1,['access'],['access']
Security,cxx:787; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:788:10: warning: Value stored to 'bSelCut' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'bSelCut' is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:788; /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:527:17: warning: Array access (from variable 'xpg') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'xpg' is equal to null in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:516; 2: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:516; 3: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:519; 4: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:519; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:526; 6: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:526; 7: Array access (from variable 'xpg') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:527; /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:440:16: warning: The expression is an uninitialized value. The computed value will also be garbage [clang-analyzer-core.uninitialized.Assign]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:158; 2: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:158; 3: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:164; 4: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:164; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:169; 6: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:169; 7: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:174; 8: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:174; 9: Assuming th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:58714,access,access,58714,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,"d an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,; entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder.; The user is no longer supposed to build a RDatasetSpec directly.; Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable; methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group; information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group.; In the RLoopManager ctor (accepting a RDatasetSpec) the globs are; expanded and the group sizes are updated. However, group positioning; remains relevant to the global TChain in RLoopManager and hence; currently accesing groups/metadata requires global TTreeProcessorMT; chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---; Example of a valid json file to be parsed:; ```json; {; 	""groups"": [{; 			""tag"": ""SIMULATED"",; 			""trees"": [""tree"", ""subTree"", ""subTree""],; 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],; 			""metadata"": {; 				""year"": 2040,; 				""lumi"": 3.14,; 				""edeposit"": 19.0,; 				""datatype"": ""MC""; 			}; 		},; 		{; 			""tag"": ""REAL"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2012,; 				""century"": 20,; 				""experiment"": ""CMS""; 			}; 		},; 		{; 			""tag"": ""BLABLA"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2030,; 				""century"": 20,; 				""experiment"": ""CMS""; 			}; 		}; 	],; 	""friends"": {; 		""friendAlias1"": {; 			""trees"": [""subTree0""],; 			""files"": [""specTestFile6*.root"", ""specTestFile6.root""]; 		},; 		""friendAlias2"": {; 			""trees"": [""subTree1"", ""subTree2""],; 			""fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526:1230,access,accessed,1230,https://root.cern,https://github.com/root-project/root/pull/11526,1,['access'],['accessed']
Security,"d by; transaction created during the callbacks executed during the; ```cling::IncrementalParser::commitTransaction``` of the main transaction. Reproducer:. With a main composed of 'only':; ```; int main(int argc, char ** argv); {; char const * class_string = (argc == 2) ? argv[1] : ""std::vector<int>"";; auto const result [[gnu::unused]] = TClass::GetClass(class_string);; return 0;; }; ```; which is a representation of real use case (in a more complex setup) in ART.; We were getting:; ```; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); {; if (ret) {; (*(TStreamerInfo**)ret) = new TStreamerInfo();; return;; }; else {; new TStreamerInfo();; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <TClingCallFunc::ExecT>: Called with no wrapper, not implemented!; Error in <TVirtualStreamerInfo::Factory>: The plugin handler for TVirtualStreamerInfo was found but failed to create the factory object!; ```; The reason is that during TClingCallFunc::make_wrapper, the call to cling::Interpreter::compileFunction ends with:; ```; if (const llvm::GlobalValue* GV; = getLastTransaction()->getModule()->getNamedValue(name)); ```; However in the 'broken' case, the getLastTransaction does not return the transaction for the code being compiled by DeclareCFunction but instead the one used/created at:. ```; #0 cling::IncrementalParser::endTransaction (this=0x4a2980, T=0x8c0fb0) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:345; #1 0x00007fffeebc7899 in cling::Interpreter::PushTransactionRAII::pop (this=0x7fffffffcb00) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/Interpreter.cpp:111; #2 0x00007fffeebc785e in cling::Interpreter::PushTransactionRAII::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2776:889,secur,security,889,https://root.cern,https://github.com/root-project/root/pull/2776,2,['secur'],['security']
Security,d in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Cal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:31278,secur,security,31278,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,d to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:311; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:439:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:439; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574:7: warning: Call to function 'strcpy' is insecure as it does not provide boun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:46662,secur,security,46662,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,d to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:749; /opt/root_src/build/rmkdepend/mainroot.cxx:52:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]; /opt/root_src/build/rmkdepend/mainroot.cxx:53:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]; /opt/root_src/build/rmkdepend/mainroot.cxx:116:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/build/rmkdepend/mainroot.cxx:116; /opt/root_src/build/rmkdepend/parse.c:392:17: warning: Access to field 's_name' results in a dereference of a null pointer (loaded from variable 'stab') [clang-analyzer-core.NullDereference]; 1: Loop condition is true. Entering loop body in /opt/root_src/build/rmkdepend/parse.c:542; 2: Control jumps to 'case 17:' at line 602 in /opt/root_src/build/rmkdepend/parse.c:543; 3: Assuming 'recursion' is 0 in /opt/root_src/build/rmkdepend/parse.c:605; 4: Taking true branch in /opt/root_src/build/rmkdepend/parse.c:605; 5: 'recursion' is 0 in /opt/root_src/build/rmkdepend/parse.c:609; 6: Taking false branch in /opt/root_src/build/rmkdepend/parse.c:609; 7: Calling 'define' in /opt/root_src/build/rmkdepend/parse.c:613; 8: Assuming the condition is false in /opt/root_src/build/rmkdepend/parse.c:406; 9: expanded from macro 'isalnum' in /usr/include/ctype.h:189; 10: expanded from macro '__isctype' in /usr/include/ctype.h:89; 11: Left side of '||' is false in /opt/root_src/build/rmkdepend/parse.c:406; 12: expanded from macro 'isalnum' in /usr/include/ctype.h:189; 13: expanded from macro '__isctype' in /u,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:39755,Access,Access,39755,https://root.cern,https://github.com/root-project/root/issues/7410,1,['Access'],['Access']
Security,d. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:54276,secur,security,54276,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,d/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:135; /opt/root_src/build/rmkdepend/pr.c:141:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:141; /opt/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:45560,secur,security,45560,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:54371,secur,security,54371,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:55028,secur,security,55028,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:55685,secur,security,55685,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:58974,secur,security,58974,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:59631,secur,security,59631,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:60288,secur,security,60288,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66205,secur,security,66205,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:35131,secur,security,35131,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:49112,secur,security,49112,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:49769,secur,security,49769,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:56342,secur,security,56342,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:67519,secur,security,67519,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:68176,secur,security,68176,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:68833,secur,security,68833,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:53057,secur,security,53057,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:53714,secur,security,53714,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:62918,secur,security,62918,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:65548,secur,security,65548,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,dary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66862,secur,security,66862,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,des boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to functi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:36629,secur,security,36629,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,des boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:38074,secur,security,38074,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,df107_SingleTopAnalysis.py:; - fix arguments parsing; - fix data file access. df106_HiggsToFourLeptons.py:; - fix data file access. Makefile:; - Some DF tutorials need `PYSPARK_PYTHON` to be defined,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10446:70,access,access,70,https://root.cern,https://github.com/root-project/root/pull/10446,2,['access'],['access']
Security,dition is false in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3628; 5: 'img' is non-null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3629; 6: Taking false branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3629; 7: Assuming field 'argb32' is null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3631; 8: Taking true branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3631; 9: Field 'fScaledImage' is null in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3632; 10: Taking false branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3632; 11: Assuming 'i' is < field 'height' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3649; 12: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3649; 13: Assuming 'j' is < field 'width' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3650; 14: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3650; 15: Array access (via field 'argb32') results in a null pointer dereference in /opt/root_src/graf2d/asimage/src/TASImage.cxx:3652; /opt/root_src/graf2d/asimage/src/TASImage.cxx:3797:16: warning: The right operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: expanded from macro '_alphaBlend' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:159; 2: Assuming 'i' is < 'nx' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5141; 3: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5141; 4: Assuming 'j' is < 'ny' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5143; 5: Loop condition is true. Entering loop body in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5143; 6: Assuming 'icol' is not equal to 'color' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5145; 7: Taking true branch in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5145; 8: Calling 'TASImage::FillRectangleInternal' in /opt/root_src/graf2d/asimage/src/TASImage.cxx:5148; 9: Assuming the condition is false,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:1867,access,access,1867,https://root.cern,https://github.com/root-project/root/issues/7432,1,['access'],['access']
Security,"ds/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] std::span<int> s; (std::span<int> &) {}; root [1] ; ```; which looks wrong to me. ### What is the expected behaviour?. `__has_include(<span>)` should evaluate to false in C++17 builds. ### How to reproduce?. from lxplus.cern.ch; ```; ❯ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Thu/x86_64-centos7-gcc12-dbg/setup.sh; ❯ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/05 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 13 2023, 00:22:00 |; | From heads/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] #include <range/v3/range/access.hpp>; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Thu/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-dbg/etc/cling/std.modulemap:312:10: error: module 'std.span' requires feature 'cplusplus20'; module ""span"" {; ^; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Thu/x86_64-centos7-gcc12-dbg/include/range/v3/range/access.hpp:25:10: note: submodule of top-level module 'std' implicitly imported here; #include <span>; ^; root.exe: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/AST/DeclBase.cpp:1517: void clang::DeclContext::removeDecl(clang::Decl*): Assertion `Pos != Map->end() && ""no lookup entry for decl""' failed.; ```. ### ROOT version. v6-28-00-patches@v6-28-04-96-g9248a09. ### How did you install ROOT?. LCG nightly builds in /cvmfs/sft-nightlies.cern.ch. ### Which operating system are you using?. Linux CentOS 7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13032:2022,access,access,2022,https://root.cern,https://github.com/root-project/root/issues/13032,2,['access'],['access']
Security,e C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:2384,secur,security,2384,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,e branch in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3175; 16: Assuming the object is not a 'CXXRecordDecl' in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3190; 17: 'parent_clxx' initialized to a null pointer value in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3190; 18: 'parent_clxx' is null in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3192; 19: Taking false branch in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3192; 20: 'index1' is null in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3194; 21: Taking false branch in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3194; 22: Forming reference to null pointer in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3230; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3287:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3287; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:15339,secur,security,15339,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security,e branch in /opt/root_src/net/auth/src/rsalib.cxx:389; 7: Assuming 'bi' is > 0 in /opt/root_src/net/auth/src/rsalib.cxx:393; 8: Loop condition is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 9: Assuming pointer value is null in /opt/root_src/net/auth/src/rsalib.cxx:394; 10: Assuming 'hp' is non-null in /opt/root_src/net/auth/src/rsalib.cxx:394; 11: Taking true branch in /opt/root_src/net/auth/src/rsalib.cxx:394; 12: Assuming 'ab' is < rsa_MAXBIT in /opt/root_src/net/auth/src/rsalib.cxx:406; 13: Loop condition is false. Execution continues on line 393 in /opt/root_src/net/auth/src/rsalib.cxx:406; 14: Assuming 'bi' is > 0 in /opt/root_src/net/auth/src/rsalib.cxx:393; 15: Loop condition is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 16: 2nd function call argument is an uninitialized value in /opt/root_src/net/auth/src/rsalib.cxx:394; /opt/root_src/net/http/civetweb/civetweb.c:1635:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:21388,secur,security,21388,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,e memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:108; /opt/root_src/build/rmkdepend/pr.c:119:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:119; /opt/root_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:44232,secur,security,44232,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:17013,secur,security,17013,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:17803,secur,security,17803,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:18593,secur,security,18593,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:19383,secur,security,19383,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:20173,secur,security,20173,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:22393,secur,security,22393,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:23183,secur,security,23183,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:23973,secur,security,23973,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:24763,secur,security,24763,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:25553,secur,security,25553,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:28413,secur,security,28413,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:29203,secur,security,29203,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:29993,secur,security,29993,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:30783,secur,security,30783,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/bu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:31573,secur,security,31573,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,e of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions tha,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:31470,secur,security,31470,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,e of a null pointer in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:260; /opt/root_src/gui/gui/src/TGTable.cxx:1387:10: warning: Value stored to 'ncolumns' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ncolumns' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1387; /opt/root_src/gui/gui/src/TGTable.cxx:1399:10: warning: Value stored to 'nrows' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrows' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1399; /opt/root_src/gui/gui/src/TGTable.cxx:1508:4: warning: Value stored to 'pos' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'pos' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1508; /opt/root_src/gui/gui/src/TGText.cxx:171:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:171; /opt/root_src/gui/gui/src/TGText.cxx:196:22: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Calling 'TGText::InsText' in /opt/root_src/gui/gui/src/TGText.cxx:922; 2: Field 'fY' is <= field 'fRowCount' in /opt/root_src/gui/gui/src/TGText.cxx:801; 3: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:801; 4: Field 'fY' is equal to field 'fRowCount' in /opt/root_src/gui/gui/src/TGText.cxx:810; 5: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:810; 6: Assuming 'start_src.fY' is equal to 'end_src.fY' in /opt/root_src/gui/gui/src/TGText.cxx:824; 7: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:824; 8: 'len' is > 0 in /opt/root_src/gui/gui/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:53427,secur,security,53427,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"e() () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libTree.so; #8 0x00007f5acebeb4f8 in THashList::Delete(char const*) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #9 0x00007f5aceb37e7a in TROOT::EndOfProcessCleanups() () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #10 0x00007f5acec9161f in TUnixSystem::Exit(int, bool) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #11 0x00007f5aceb44017 in TApplication::Terminate(int) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #12 0x00007f5acee3c936 in TRint::Run(bool) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libRint.so; #13 0x000000000040110c in main (); ===========================================================. Error in &lt;TList::Delete&gt;: A list is accessing an object (0x7f5acedf5830) already deleted (list name = ClosedFiles). </pre>. 3. Substituting the line; ```C++; auto dfOut = dfAug.Redefine(...);; ```; with; ```C++; auto dfOut = dfAug;; ```; and it will complete the execution without errors. ### Setup; 1. ROOT version: master (commit eb7c9c44465ad3f8db90d83598e3116a45ca630e), ""6.25/01""; 2. Operating system: NixOS; - system: `""x86_64-linux""`; - host os: `Linux 5.10.48, NixOS, 21.05.20210717.b2f87e0 (Okapi)`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.4pre20210601_5985b8b`; - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`; 3. How you obtained ROOT: Build myself by upgrading the Nixpkgs `root` package. ### Additional context; Nix expressions used to build ROOT:; `flake.nix`; ```Nix; {; inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";; inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";; inputs.flake-utils.url = ""github:numtide/flake-utils"";; inputs.root-source.url = ""github:root-proje",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8857:9589,access,accessing,9589,https://root.cern,https://github.com/root-project/root/issues/8857,1,['access'],['accessing']
Security,"e, true>, true>::operator[]' requested here; { return _M_h[std::move(__k)]; }; ^; /home/jhahnfel/ROOT/build/include/TTreeReader.h:264:15: note: in instantiation of member function 'std::unordered_map<std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> >, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > > >::operator[]' requested here; fProxies[bpName].reset(p);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:915:12: note: candidate function not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; void _M_rehash_aux(size_type __n, std::true_type);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:918:12: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; void _M_rehash_aux(size_type __n, std::false_type);; ^; Error: /home/jhahnfel/ROOT/build/bin/rootcling: compilation failure (/home/jhahnfel/ROOT/build/lib/libTreePlayer8033212c3f_dictUmbrella.h); ```; and; ```; FAILED: montecarlo/pythia8/G__EGPythia8.cxx lib/EGPythia8.pcm; [...]; In module 'std' imported from input_line_1:1:; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:601:2: error: no matching member function for call to '_M_move_assign'; _M_move_assign(std::move(__x), __bool_constant<__move_storage>());; ^~~~~~~~~~~~~~; /usr/include/Pythia8/LHEF3.h:212:25: note: in instantiation of member function 'std::vector<Pythia8::XMLTag *, std::allocator<Pythia8::XMLTag *> >::operator=' requested here; tags.back()->tags = findXMLTags(tags.back()->contents, &leftovers);; ^; /usr/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:4074,hash,hashtable,4074,https://root.cern,https://github.com/root-project/root/issues/8642,1,['hash'],['hashtable']
Security,e/cont/src/TBtree.cxx:688; 5: Assuming 'p' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:546; 6: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:546; 7: 't' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:547; 10: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 11: Loop condition is false. Exiting loop in /opt/root_src/core/cont/src/TBtree.cxx:547; 12: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:123; 13: Null pointer value stored to field 'fTree' in /opt/root_src/core/cont/src/TBtree.cxx:548; 14: Returning from constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:688; 15: Calling 'TBtInnerNode::MaxIndex' in /opt/root_src/core/cont/src/TBtree.cxx:690; 16: Access to field 'fInnerMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') in /opt/root_src/core/cont/inc/TBtree.h:248; /opt/root_src/core/cont/inc/TBtree.h:314:41: warning: Access to field 'fLeafMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') [clang-analyzer-core.NullDereference]; 1: Passing null pointer value via 3rd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:1695; 2: Calling constructor for 'TBtLeafNode' in /opt/root_src/core/cont/src/TBtree.cxx:1695; 3: Passing null pointer value via 3rd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:1363; 4: Calling constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:1363; 5: Assuming 'p' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:546; 6: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:546; 7: 't' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/co,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:1662,Access,Access,1662,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Access'],['Access']
Security,"e/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:2172; #3 TUnixSystem::StackTrace (this=0xe50280) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:2419; #4 0x00007fba37e8638c in TUnixSystem::DispatchSignals (this=0xe50280, sig=kSigSegmentationViolation) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:1294; #5 <signal handler called>; #6 0x00007fba36ddb793 in AliAnalysisTask::SetUsed (this=0x27a9980, flag=flag; entry=true) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisTask.cxx:540; #7 0x00007fba36dc471a in AliAnalysisManager::InitAnalysis (this=0x24a9f30) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisManager.cxx:1633; #8 0x00007fba36df65e1 in G__G__ANALYSIS_215_0_109 (result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/BUILD/ec8cb744704e066b1ec26fcf535125d0830c6a08/AliRoot/ANALYSIS/ANALYSIS/G__ANALYSIS.cxx:5453; #9 0x00007fba33306dee in Cint::G__ExceptionWrapper (funcp=funcp; entry=0x7fba36df65d0 <G__G__ANALYSIS_215_0_109(G__value*, char const*, G__param*, int)>, result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/Api.cxx:393; #10 0x00007fba3322b094 in G__execute_call (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/newlink.cxx:2408; #11 0x00007fba3322b38b in G__call_cppfunc (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/al",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:1906,hash,hash,1906,https://root.cern,https://github.com/root-project/root/issues/6977,2,['hash'],['hash']
Security,e/tree/src/TBasket.cxx:888; 9: Assuming the condition is false in /opt/root_src/tree/tree/src/TBasket.cxx:443; 10: Taking false branch in /opt/root_src/tree/tree/src/TBasket.cxx:443; 11: Null pointer value stored to field 'fEntryOffset' in /opt/root_src/tree/tree/src/TBasket.cxx:446; 12: Returning from 'TBasket::ResetEntryOffset' in /opt/root_src/tree/tree/src/TBasket.cxx:888; 13: 'storeEntryOffset' initialized to a null pointer value in /opt/root_src/tree/tree/src/TBasket.cxx:896; 14: Null pointer value stored to field 'fEntryOffset' in /opt/root_src/tree/tree/src/TBasket.cxx:916; 15: Assuming field 'fNevBufSize' is not equal to 0 in /opt/root_src/tree/tree/src/TBasket.cxx:917; 16: Taking true branch in /opt/root_src/tree/tree/src/TBasket.cxx:917; 17: Assuming 'i' is < field 'fNevBufSize' in /opt/root_src/tree/tree/src/TBasket.cxx:918; 18: Loop condition is true. Entering loop body in /opt/root_src/tree/tree/src/TBasket.cxx:918; 19: Array access (via field 'fEntryOffset') results in a null pointer dereference in /opt/root_src/tree/tree/src/TBasket.cxx:918; /opt/root_src/tree/tree/src/TBranch.cxx:233:14: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'basketsize' is < 100 in /opt/root_src/tree/tree/src/TBranch.cxx:203; 2: '?' condition is true in /opt/root_src/tree/tree/src/TBranch.cxx:203; 3: Assuming 'tree' is null in /opt/root_src/tree/tree/src/TBranch.cxx:208; 4: '?' condition is false in /opt/root_src/tree/tree/src/TBranch.cxx:208; 5: Null pointer value stored to field 'fTree' in /opt/root_src/tree/tree/src/TBranch.cxx:229; 6: Called C++ object pointer is null in /opt/root_src/tree/tree/src/TBranch.cxx:233; /opt/root_src/tree/tree/src/TBranchClones.cxx:92:28: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Passing null pointer value via 1st parameter 'tree' in /opt/root_src/tree/tree/src/TBranchClones.cxx:75; 2: Calling 'TBranchClones::Init' in /opt/root_src/tree/tree/src/TBranchC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:17452,access,access,17452,https://root.cern,https://github.com/root-project/root/issues/7429,1,['access'],['access']
Security,ead [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'descent2' is never read in /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:498; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1095:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1095; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1389:10: warning: Call to function 'strcat' is insecure as it does no,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:79747,secur,security,79747,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"ec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t, uint32_t&) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:629]\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:646]\n"" (of type char const*); [ FAILED ] RNTuple.SerializeEnvelope (0 ms); [ RUN ] RNTuple.SerializeFrame; [ OK ] RNTuple.SerializeFrame (0 ms); [ RUN ] RNTuple.SerializeFeatureFlags; [ OK ] RNTuple.SerializeFeatureFlags (0 ms); [ RUN ] RNTuple.SerializeLocator; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:341: Failure; Failed; unsupported locator type should throw; [ FAILED ] RNTuple.SerializeLocator (0 ms); [ RUN ] RNTuple.SerializeEnvelopeLink; [ OK ] RNTuple.SerializeEnvelopeLink (0 ms); [ RUN ] RNTuple.SerializeClusterSummary; [ OK ] RNTuple.Seriali",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:12382,access,access,12382,https://root.cern,https://github.com/root-project/root/issues/12426,1,['access'],['access']
Security,"ect output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second offset= 0 type=300 ,stl=365, ctype=365,. **root 6.22,24**. root [3] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0xb5fb752; array<string,2> first offset= 0 type=62 Emulation; string second offset= 0 type=300 ,stl=365, ctype=365, Emulation; ; StreamerInfo for class: array<string,2>, version=1, checksum=0x6b3ba626; string _M_elems offset= 0 type=320 ,stl=365, ctype=365. Unfortunately, I don't how to proceed further. ### Setup. 1. Reproduced with ROOT 6.22.08, 6.24 (today's version from the",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:2188,checksum,checksum,2188,https://root.cern,https://github.com/root-project/root/issues/8268,2,['checksum'],['checksum']
Security,"ed for duplicates. ### Describe the bug. When updating the version of the RooAbsArg class with 068465e (part of https://github.com/root-project/root/pull/8764), an unexpected warning appears in the testProxiesAndCategories unit test:. ```; Warning in <TStreamerInfo::BuildCheck>: ; The StreamerInfo of class RooRealVar read from file categories_v624.root; has the same version (=7) as the active class but a different checksum.; You should update the version to ClassDef(RooRealVar,8).; Do not try to write objects with the current class definition,; the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 7 of class 'RooRealVar' differs from ; the in-memory layout version 7:; RooAbsBinning _binning; //; vs; unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning; //; ```. The warning is uexpected because:; * it comes from the RooRealVar class that was not changed in 068465e; * it only appears now after seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info for RooReal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:1089,checksum,checksums,1089,https://root.cern,https://github.com/root-project/root/issues/8791,1,['checksum'],['checksums']
Security,ed in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security chec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:25248,secur,security,25248,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"elp), I think it doesn't require anything except standardised list of type_info-derived types [8]; > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly.; > ; > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm; > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm; > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163; > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo; > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20; > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26; > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147; > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:; > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi).; > Also I've updated my TDirectory test so they have the same output format [a]; >; > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35; > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463:3868,access,access,3868,https://root.cern,https://github.com/root-project/root/pull/463,1,['access'],['access']
Security,emory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:119; /opt/root_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:44852,secur,security,44852,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,emset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:26239,secur,security,26239,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"enerateHessianPar(; from TFormula::HessianPar; from GeneralHessianCalc<T>::Hessian; from GeneralHessianCalc<T>::IsAvailable(fFunc); from WrappedMultiTF1Templ<T>::HasParameterHessian(); from BasicFCNL::HasHessian; from ROOT::Fit::Fitter::DoInitMinimizer; ```. Note: The tutorials seems unrelated to Clad. ### Reproducer. disabled and run `ctest -R tutorial-fit-exampleFit3D`. With clad disabled, we get:; ```; Command: ""/Applications/CMake.app/Contents/bin/cmake"" ""-DCMD=/Users/pcanal/root_working/builds/master-pr/bin/root.exe^-b^-l^-q^/Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C"" ""-DSYS=/Users/pcanal/root_working/bu; ilds/master-pr"" ""-DENV=PATH=/Users/pcanal/root_working/builds/master-pr/bin::/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3; .8/bin:/Users/pcanal/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstra; p/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/podman/bin#DYLD_LIBRARY_PATH=/Users/pcanal/root_working/builds/master-pr/lib:#ROOTSYS=/Users/pcanal/root_working; /builds/master-pr#PYTHONPATH=/Users/pcanal/root_working/builds/master-pr/lib:"" ""-P"" ""/Users/pcanal/root_working/builds/master-pr/RootTestDriver.cmake""; Directory: /Users/pcanal/root_working/builds/master-pr/runtutorials; ""tutorial-fit-exampleFit3D"" start time: Mar 28 16:08 CDT; Output:; ----------------------------------------------------------. Processing /Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C...; In file included from input_line_38:1:; /opt/build/root_builds/master-pr/include/Math/CladDerivator.h:25:10: fatal error: 'plugins/include/clad/Differentiator/Differentiator.h' file not found; #include <plugins/include/clad/D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15091:1710,secur,security,1710,https://root.cern,https://github.com/root-project/root/issues/15091,1,['secur'],['security']
Security,ength arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:25786,secur,security,25786,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"entation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|; |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|; |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|; |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|; |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of runn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:1202,Hash,Hash,1202,https://root.cern,https://github.com/root-project/root/pull/4717,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,ents such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:326; /opt/root_src/core/clib/src/Demangle.c:327:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:327; /opt/root_src/core/clib/src/Demangle.c:344:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:344; /opt/root_src/core/clib/src/Demangle.c:345:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:345; /opt/root_src/core/clib/src/Demangle.c:361:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:1500,secur,security,1500,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"envs/aslsRun2_ana/lib/libFoam.6.22.06.so"" ""/<path/to>/opt/anaconda3/envs/aslsRun2_ana/lib/libGraf.6.22.06.so"" ""/<path/to>/opt/anaconda3/envs/aslsRun2_ana/lib/libHist.6.22.06.so"" ""/<path/to>/opt/anaconda3/envs/aslsRun2_ana/lib/libMatrix.6.22.06.so"" ""/<path/to>/opt/anaconda3/envs/aslsRun2_ana/lib/libMathCore.6.22.06.so"" ""-lsandbox.1"" ""-lCoreStorage"" ""-lcsfde"" ""-lMatch.1"" -o ""/<path/to>/Downloads/.wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws/RooSDSCBShape_cxx.so""' failed!; [#0] ERROR:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() ERROR compiling class RooSDSCBShape, to fix this you can do the following: ; 1) Fix extracted source code files in directory .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws/; 2) In clean ROOT session compiled fixed classes by hand using '.x .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws/ClassName.cxx+'; 3) Reopen file with RooWorkspace with broken source code in UPDATE mode. Access RooWorkspace to force loading of class; Broken instances in workspace will _not_ be compiled, instead precompiled fixed instances will be used.; 4) Reimport fixed code in workspace using 'RooWorkspace::importClassCode(""*"",kTRUE)' method, Write() updated workspace to file and close file; 5) Reopen file in clean ROOT session to confirm that problems are fixed; ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT version 6.22/06 on macOS, obtained from conda-forge. ### Additional context; <!--; Add any other context about the problem here.; -->; See the forum post [here](https://root-forum.cern.ch/t/import-custom-pdf-in-rooworkspace/43478?u=mwilkins). In my view, `importClassCode` ought to be sufficient on its own, but in any case, once this is resolved, the required sequence of `RooWorkspace::addClassDeclImportDir`, `RooWorkspace::addClassImplImportDir`, `RooWorkspace::importClassCode`, `TClass::SetDeclFile`, and `TClass::SetImplFileName` ought to",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249:7973,Access,Access,7973,https://root.cern,https://github.com/root-project/root/issues/7249,1,['Access'],['Access']
Security,eplace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18914; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18969:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18969; /opt/root_src/net/http/civetweb/civetweb.c:18984:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18984; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:75891,secur,security,75891,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"er seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info for RooRealVar from the [categories_v624.root reference file](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/categories_v624.root):; ```; root [6] _file0->ShowStreamerInfo(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset= 0 type= 8 Symmetric error associated with current value; double _asymErrLo offset= 0 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset= 0 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset= 0 type=64; ```. ### Expected behavior. There should be no warnings in `TStreamerInfo::BuildCheck` and `TStreamerInfo::CompareContent`. ### To Reproduce. Open the [categories_v624.root reference file](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/categories_v624.root) with ROOT master plus commit 068465e cherry-picked on top.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:2248,checksum,checksum,2248,https://root.cern,https://github.com/root-project/root/issues/8791,1,['checksum'],['checksum']
Security,er-deadcode.DeadStores]; 1: Value stored to 'sSelCut' during its initialization is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:761; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:762:13: warning: Value stored to 'bSelCut' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'bSelCut' during its initialization is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:762; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:787:10: warning: Value stored to 'sSelCut' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSelCut' is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:787; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:788:10: warning: Value stored to 'bSelCut' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'bSelCut' is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:788; /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:527:17: warning: Array access (from variable 'xpg') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'xpg' is equal to null in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:516; 2: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:516; 3: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:519; 4: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:519; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:526; 6: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:526; 7: Array access (from variable 'xpg') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/MethodCFMlpANN.cxx:527; /opt/root_src/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:440:16: warning: The expression is an uninitialized value. The computed value will also be garbage [clang-analyzer-core.uninitialized.Assign]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:58074,access,access,58074,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:27220,secur,security,27220,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks int,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:35597,secur,security,35597,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:27876,secur,security,27876,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:34284,secur,security,34284,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:36253,secur,security,36253,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,es not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:38220,secur,security,38220,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"es where one wants to import or export JSON data into ROOT-based code. Examples could be . - Input and output of HEPData data. For example, one may want to read in some table via JSON and visualize, or one has produced a result one wants to upload to HEPData ; - Interoperability with Python. Python has support for many data format - not least JSON. . The attached class `TJSON` allows for this in a relatively straight forward manner. For example, one can do . ```c++; TJSON null;; TJSON b(true);; TJSON s(""RawString"");; TJSON s2(std::string(""C++String""));; TJSON i(42);; TJSON f(3.14);; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();; ```; for null, boolean, string, numbers (int and float), arrays or objects (associative container). . A more complex object can be created like . ```c++ ; TJSON o2 = std::map<std::string,TJSON>{; {""key1"",""value""},; {""key2"",true},; {""key3"",; {""key4"", TJSON::Array(""This"",""is"",""an"",""array""),; ""key5"",; {""boolean"", true}; }; }; };; ```. and elements are accessed via `operator[]` . ```c++; assert o2[""key1""] == ""value"";; assert o2[""key3""][""key4""][1] == ""is""; ```. One can loop over arrays or objects via `TJSON::ArrayRange` or `TJSON::ObjectRange` respectively. . ```c++; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();. for (size_t i = 0; i < 4; i++); a[i] = ""Test""+std::to_string(i);. o[""key0""] = ""value1"";; o[""key1""] = a;; o[""key2""] = 123;. std::cout << ""Array: "" << std::endl;; for (auto& e : a.ArrayRange()); std::cout << e << std::endl;. std::cout << ""Object: "" << std::endl;; for (auto& kv : o.ObjectRange()); std::cout << ""o["" << kv.first << ""] = "" << kv.second << std::endl;; ```. JSON can be read and written to streams . ```c++; std::cout << ""=== Loading ==="" << std::endl;; std::string s(""{\""key1\"":\""string\"",""; 		"" \""key2\"": true,""; 		"" \""key3\"": 1234,""; 		"" \""key4\"":null}"");. std::stringstream str(s);. TJSON j;; str >> j;; std::cout << j << std::endl;; ; TJSON j2 = TJSON::Load(s);; std::cout << j2 << std::endl;; ```. I attach `TJSON.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889:1158,access,accessed,1158,https://root.cern,https://github.com/root-project/root/issues/6889,1,['access'],['accessed']
Security,et' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:24315,secur,security,24315,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,et' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:7499,secur,security,7499,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 2: 'onDiskPage' initialized here in /opt/root_src/tree/ntuple/v7/src/RPageStorageFile.cxx:612; 3: Assuming 'onDiskPage' is null in /opt/root_src/tree/ntuple/v7/src/RPageStorageFile.cxx:613; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 5: Taking true branch in /opt/root_src/tree/ntuple/v7/src/RPageStorageFile.cxx:613; 6: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 7: Loop condition is false. Exiting loop in /opt/root_src/tree/ntuple/v7/src/RPageStorageFile.cxx:613; 8: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 9: Called C++ object pointer is null in /opt/root_src/tree/ntuple/v7/src/RPageStorageFile.cxx:614; 10: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120. /opt/root_src/tree/tree/src/TBasket.cxx:918:57: warning: Array access (via field 'fEntryOffset') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tree/tree/src/TBasket.cxx:825; 2: Taking false branch in /opt/root_src/tree/tree/src/TBasket.cxx:825; 3: Assuming 'max_size' is 0 in /opt/root_src/tree/tree/src/TBasket.cxx:853; 4: Left side of '&&' is false in /opt/root_src/tree/tree/src/TBasket.cxx:853; 5: Taking false branch in /opt/root_src/tree/tree/src/TBasket.cxx:866; 6: Assuming 'newNevBufSize' is equal to 0 in /opt/root_src/tree/tree/src/TBasket.cxx:887; 7: Taking true branch in /opt/root_src/tree/tree/src/TBasket.cxx:887; 8: Calling 'TBasket::ResetEntryOffset' in /opt/root_src/tree/tree/src/TBasket.cxx:888; 9: Assuming the condition is false in /opt/root_src/tree/tree/src/TBasket.cxx:443; 10: Taking false branch in /opt/root_src/tree/tree/src/TBasket.cxx:443; 11: Null pointer value stored to field 'fEntryOffset' in /opt/root_src/tree/tree/src/TBasket.cxx:446; 12: Returning from 'TBasket::ResetEntry,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:15789,access,access,15789,https://root.cern,https://github.com/root-project/root/issues/7429,1,['access'],['access']
Security,extended output of rms-validation in tmva/TransformationHandler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1669:23,validat,validation,23,https://root.cern,https://github.com/root-project/root/pull/1669,1,['validat'],['validation']
Security,f the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:135; /opt/root_src/build/rmkdepend/pr.c:141:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:45370,secur,security,45370,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,"first and; second derivatives of the scale factors are smooth. The `PiecewiseInterpolation` class is more general, because instead of; taking constant interpolation parameters, it takes other `RooAbsReals`.; That means it makes no sense for that class to cache the polynomial; coefficients that have to re recomputed anyway each time the input; changes. It uses an optimized formula to do the interpolation on the; fly. The `FlexibleInterpVar` however precomputes and caches the polynomial; coefficients. This has serveral disadvantages:. * High cost in memory (the big ATLAS models can have thousands of; `FlexibleInterpVars`. * It's inconsistent with the `PiecewiseInterpolation`, which should be; equivalent. * Most importantly, and this was the motivation for this PR now:; when we do the code generation for AD, we can't pre-compute cached; coefficients because it would bloat the generated code with constant; arrays. Computing on the fly is much more AD-friendly. Validation of the new `FlexibleInterpVar` values for `low=0.9` and; `high=1.2` that shows the interpolated values are agreeing to the 5e-4; level. This is completely accepatable for such an ad-hoc polynomial; motivation, where the shape is not given by any physical meaning anyway; but just by the continuity condition at the boundaries. And at the; boundaries (and `param=0`), the difference between both implementations; goes to zero. It was also checked that this change has no performance; effect on fitting the full ATLAS Higgs combination modes. ```txt; param ref new diff_abs diff_rel; 0 -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00; 1 -0.95 0.9047424331 0.9047437816 0.0000013485 1.49E-06; 2 -0.85 0.9140836603 0.9141118876 0.0000282273 3.09E-05; 3 -0.75 0.9230659064 0.9231653329 0.0000994265 1.08E-04; 4 -0.65 0.9317147727 0.9319176341 0.0002028614 2.18E-04; 5 -0.55 0.9402402768 0.9405514067 0.0003111300 3.31E-04; 6 -0.45 0.9489635592 0.9493568763 0.0003933171 4.14E-04; 7 -0.35 0.9582539443 0.9586769214 0.00",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13067:1166,Validat,Validation,1166,https://root.cern,https://github.com/root-project/root/pull/13067,1,['Validat'],['Validation']
Security,"forts. ## Behavior changes. ### No implicit conversion from fixed-sized char buffers to null-terminated string. If you have a `char` buffer with constant size, people might use it for different things. For example, to store null-terminated short strings in a TTree. Therefore, the current PyROOT converts such buffers to Python strings. However, that means it's impossible to get the full buffer if it contains zeros, which can be useful if the buffer doesn't contain a string but for example some status bytes. Therefore, the used is not required to *explicitly convert the buffer to a Python string* with the `as_string()` method. Demo:; ```python; import ROOT. ROOT.gInterpreter.Declare("""""". struct Struct {; char char_buffer[5] {};; };. void fill_char_buffer(Struct & st); {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }. """"""); struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); ```; The output:; ```txt; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; ```. ## Associated GitHub issues. This will close the following GitHub issue:; * https://github.com/root-project/root/issues/12718; * https://github.com/root-project/root/issues/7686; * https://github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/root/issues/11411; * https://github.com/root-project/root/issues/11596. ## Upstream contributions to cppyy in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:1307,access,access,1307,https://root.cern,https://github.com/root-project/root/pull/14507,1,['access'],['access']
Security,g false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2104; 43: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 44: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 45: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 46: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 47: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 48: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 49: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 50: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 51: Assuming the condition is true in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 52: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 53: Array access results in a null pointer dereference in /opt/root_src/gui/gui/src/TGFont.cxx:2129; /opt/root_src/gui/gui/src/TGFont.cxx:2154:11: warning: Array access results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 3: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 4: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 5: Calling 'TGFontPool::GetFont' in /opt/root_src/gui/gui/src/TGFont.cxx:1709; 6: 'font' is non-null in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 7: Left side of '||' is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 8: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 9: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 10: Assuming 'f' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 11: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 12: Assuming 'nf' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1571; 13: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1571; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:29292,access,access,29292,https://root.cern,https://github.com/root-project/root/issues/7533,1,['access'],['access']
Security,"g<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node' requested here; return __h->_M_insert_unique_node(__n, __code, __p)->second;; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/unordered_map.h:978:16: note: in instantiation of member function 'std::__detail::_Map_base<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here; { return _M_h[std::move(__k)]; }; ^; /home/jhahnfel/ROOT/build/include/TTreeReader.h:264:15: note: in instantiation of member function 'std::unordered_map<std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> >, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > > >::operator[]' requested here; fProxies[bpName].reset(p);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../..",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:2889,hash,hash,2889,https://root.cern,https://github.com/root-project/root/issues/8642,1,['hash'],['hash']
Security,"gImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535; 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395; 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441; 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51; 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855; 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138; 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373; 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423; 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588; 17 rootcling_stage1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:1675,Access,AccessSpecifier,1675,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Access'],['AccessSpecifier']
Security,grad' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'igrad' is never read in /opt/root_src/math/minuit/src/TFitter.cxx:182; /opt/root_src/math/minuit/src/TFitter.cxx:483:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/math/minuit/src/TFitter.cxx:483; /opt/root_src/math/minuit/src/TLinearFitter.cxx:1375:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/math/minuit/src/TLinearFitter.cxx:1375; /opt/root_src/math/minuit/src/TLinearFitter.cxx:2152:10: warning: Value stored to 'chi2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'chi2' is never read in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2152; /opt/root_src/math/minuit/src/TLinearFitter.cxx:2230:10: warning: Value stored to 'chi2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'chi2' is never read in /opt/root_src/math/minuit/src/TLinearFitter.cxx:2230; /opt/root_src/math/minuit/src/TLinearFitter.cxx:2252:7: warning: Value stored to 'chi2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'chi2' is never read in /opt/root_src/math/minuit/src/TLinea,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:158591,secur,security,158591,https://root.cern,https://github.com/root-project/root/issues/7458,1,['secur'],['security']
Security,graf2d/x11/src/GX11Gui.cxx:2829; 7: Assuming 'win' is not equal to 'input' in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:2829; 8: Taking false branch in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:2829; 9: Calling 'TGX11::GetWindowAttributes' in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:2831; 10: Assuming 'id' is 0 in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:778; 11: Taking true branch in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:778; 12: Returning without writing to 'attr.fMapState' in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:778; 13: Returning from 'TGX11::GetWindowAttributes' in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:2831; 14: The left operand of '!=' is a garbage value in /opt/root_src/graf2d/x11/src/GX11Gui.cxx:2832; /opt/root_src/graf2d/x11/src/Rotated.cxx:186:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf2d/x11/src/Rotated.cxx:186; /opt/root_src/graf2d/x11/src/Rotated.cxx:283:46: warning: Potential leak of memory pointed to by 'data' [clang-analyzer-unix.Malloc]; 1: expanded from macro 'MSBFirst' in /usr/include/X11/X.h:715; 2: Calling 'XRotPaintAlignedString' in /opt/root_src/graf2d/x11/src/Rotated.cxx:328; 3: Assuming 'text' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:349; 4: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:349; 5: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:351; 6: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:351; 7: Loop condition is false. Execution continues on line 356 in /opt/root_src/graf2d/x11/src/Rotated.cxx:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:75941,secur,security,75941,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,h analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:5554,secur,security,5554,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"h and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we’ve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deployed on GitHub.com; your repository will automatically benefit from the most recently released version. #### The analysis doesn’t seem to be working; If you get an error in GitHub Actions that indicates that CodeQL wasn’t able to analyze your code, please [follow the instructions here](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow) to debug the analysis. #### How do I disable LGTM.com?; If you have LGTM’s automatic pull request analysis enabled, then you can [follow these steps to disable the LGTM pull request analysis](https://lgtm.com/help/lgtm/managing-automated-code-review#disabling-pr-integration). You don’t actually need to remove your repository from LGTM.com; it will automatically be remo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:3061,secur,security,3061,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,"h anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:; ```python; @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True); def pythonizor_RVec_stdvec(klass, name):; ...; ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:; - They are more costly that simple string comparison.; - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128:2869,access,accesses,2869,https://root.cern,https://github.com/root-project/root/pull/9128,1,['access'],['accesses']
Security,h arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to functio,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:60919,secur,security,60919,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,h arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:24504,secur,security,24504,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,h arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:7688,secur,security,7688,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,h as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:15837,secur,security,15837,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"h. If you see question; 2187: marks as part of the stack trace, try to recompile with debugging information; 2187: enabled and export CLING_DEBUG=1 environment variable before running.; 2187: You may get help by asking at the ROOT forum https://root.cern/forum; 2187: Only if you are really convinced it is a bug in ROOT then please submit a; 2187: report at https://root.cern/bugs Please post the ENTIRE stack trace; 2187: from above as an attachment in addition to anything else; 2187: that might help us fixing this issue.; 2187: ===========================================================; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=0x1 <error: Cannot access memory at address 0x1>, alternate=0x7f2a491937c0 <error: Cannot access memory at address 0x7f2a491937c0>) at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:792; 2187: #8 0x00007f2a60081efb in _GLOBAL__sub_I_libInitOrder.cxx () at roottest/root/meta/tclass/libInitOrder.cxx:123; 2187: #9 0x00007f2a631f305a in call_init (l=<optimized out>, argc=argc; 2187: entry=37, argv=argv; 2187: entry=0x7ffc0cd45a68, env=env; 2187: entry=0x61600030f680) at dl-init.c:72; 2187: #10 0x00007f2a631f315a in call_init (env=0x61600030f680, argv=0x7ffc0cd45a68, argc=37, l=<optimized out>) at dl-init.c:30; 2187: #11 _dl_init (main_map=0x61a00008b280, argc=37, argv=0x7ffc0cd45a68, env=0x61600030f680) at dl-init.c:119; 2187: #12 0x00007f2a617509bc in _dl_catch_exception () from /lib64/libc.so.6; 2187: #13 0x00007f2a631fa88e in dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:794; 2187: #14 dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:757; 2187: #15 0x00007f2a61750964 in _dl_catch_exception () from /lib64/libc.so.6; 2187: #16 0x00007f2a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:8111,access,access,8111,https://root.cern,https://github.com/root-project/root/issues/11867,2,['access'],['access']
Security,"har **, bool) E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\dictgen\src\rootcling_impl.cxx:4927:0; #39 0x00007ffef58759d9 ROOT_rootcling_Driver E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\dictgen\src\rootcling_impl.cxx:6171:0; #40 0x00007ff6481b2635 main E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\main\src\rootcling.cxx:44:0; #41 0x00007ff6481b2ae9 invoke_main D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:79:0; #42 0x00007ff6481b298e __scrt_common_main_seh D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288:0; #43 0x00007ff6481b284e __scrt_common_main D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:331:0; #44 0x00007ff6481b2b7e mainCRTStartup D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp:17:0; #45 0x00007fffb4f47604 (C:\Windows\System32\KERNEL32.DLL+0x17604); #46 0x00007fffb6de26a1 (C:\Windows\SYSTEM32\ntdll.dll+0x526a1); ```; ### Expected behavior; Build succeeds. ### To Reproduce. (if you know how to use vcpkg & git); checkout https://github.com/microsoft/vcpkg/pull/31161; bootstrap vcpkg; vcpkg install root. ### Setup; 1. Ref: 6438fdb78a7d0cc06e2f3dd2dd5bf057b00fa7ea; 2. Windows 10; VS 17.5.4. ### Additional context; I tried debugging the problem and the only thing I found is that in `io\io\src\TStreamerInfoWriteBuffer.cxx:` the call; `proxy->GetFunctionCreateIterators(/*read = */ kFALSE)(obj, &begin, &end, proxy);` returns a start iterator which is higher then the end iterator leading later to a read access violation when trying to (infinitely) iterate over it. So I assume `obj` is somehow bogus but without knowing what that actually should be further steps back are not possible., The error is reproducible but seems to occur at different times of execution if retried (number of breakpoint hits vary). ; The release build however seems fine. ; If you need a full configure/build log I can provide it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12738:22112,access,access,22112,https://root.cern,https://github.com/root-project/root/issues/12738,1,['access'],['access']
Security,"hashes are not stable when downloading release sources from github, see; https://security.stackexchange.com/a/240209; https://github.com/root-project/root/issues/10503",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10585:0,hash,hashes,0,https://root.cern,https://github.com/root-project/root/pull/10585,2,"['hash', 'secur']","['hashes', 'security']"
Security,"hashes are not stable when downloading release sources from github, see; https://security.stackexchange.com/a/240209; https://github.com/root-project/root/issues/10503. (cherry picked from commit 8f05559cb9d74e5bc6c65bbd39a0dce82b18a3eb)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10674:0,hash,hashes,0,https://root.cern,https://github.com/root-project/root/pull/10674,2,"['hash', 'secur']","['hashes', 'security']"
Security,hecks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: N,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:63960,secur,security,63960,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"https://github.com/root-project/root/pull/7506 for v6-24. With llvm9, the module ptr gets reset upon emission.; Instead, just look for the symbol in the JIT - where it should be found,; as Init() is injecting it there, and we want to find *that* symbol,; not the one from the binary. Fixes `CodeUnloading/AtExit.C` cling test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7524:199,inject,injecting,199,https://root.cern,https://github.com/root-project/root/pull/7524,1,['inject'],['injecting']
Security,i/src/TGText.cxx:191; 18: Memory is allocated in /opt/root_src/gui/gui/src/TGText.cxx:195; 19: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGText.cxx:196; /opt/root_src/gui/gui/src/TGText.cxx:630:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:630; /opt/root_src/gui/gui/src/TGText.cxx:671:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:671; /opt/root_src/gui/gui/src/TGText.cxx:1106:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:1106; /opt/root_src/gui/gui/src/TGTextEdit.cxx:504:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory b,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:56101,secur,security,56101,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"ict.cxx, …/…/lib/libforward_listDict.rootmap; [ 79%] Generating G__vectorDict.cxx, …/…/lib/libvectorDict.rootmap; In file included from input_line_7:21:; /srv/ussapc/home/ussapc/sw/root_build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: ‘tbb/enumerable_thread_specific.h’ file not found; #include “tbb/enumerable_thread_specific.h”; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error: /srv/ussapc/home/ussapc/sw/root_build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/srv/ussapc/home/ussapc/sw/root_build/lib/libThreaddb2bde6cdd_dictUmbrella.h); gmake[2]: *** [core/thread/CMakeFiles/G__Thread.dir/build.make:109: core/thread/G__Thread.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:27339: core/thread/CMakeFiles/G__Thread.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs…. I found out that tbb is required by imt, so again; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -Dimt=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j 8; …; [100%] Building CXX object roofit/roostats/CMakeFiles/RooStats.dir/src/ToyMCSampler.cxx.o; [100%] Building CXX object roofit/roostats/CMakeFiles/RooStats.dir/src/ToyMCStudy.cxx.o; [100%] Building CXX object roofit/roostats/CMakeFiles/RooStats.dir/src/UniformProposal.cxx.o; [100%] Building CXX object roofit/roostats/CMakeFiles/RooStats.dir/src/UpperLimitMCSModule.cxx.o; [100%] Linking CXX shared library …/…/lib/libRooStats.so; [100%] Built target RooStats; (stucks). $ cmake --build . – install; [ 0%] Built target OPENUI5; [ 0%] Performing download step (download, verify and extract) for ‘XROOTD’. unbeliveable…; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -Dimt=OFF -Dxrootd=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j 8. runs.; Please fix at next release.; I would recommend to implement a “localonly” option in case you don’t have internet access from the installation PC. Georg. _ROOT Version: 6.24.00; _Platform: RetHat 8.3; _Compiler:gcc 8.3.1-5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292:3011,access,access,3011,https://root.cern,https://github.com/root-project/root/issues/8292,1,['access'],['access']
Security,"if the hashAssistedFind feature is active, the old code gave an invalid read because of the delete further up. This change ensures the deletion happens last",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13033:7,hash,hashAssistedFind,7,https://root.cern,https://github.com/root-project/root/pull/13033,1,['hash'],['hashAssistedFind']
Security,"ignable<Inner<int> > >'; is_copy_assignable<_T2>>::value,; ~~~~~~~~~~~~~~~~~~~~~~~~~~^; ./instGood.cxx:10:33: note: in instantiation of template class 'std::pair<std::__cxx11::basic_string<char>, Inner<int> >' requested here; std::pair<string,Inner<int>> p;; ^; In module 'std' imported from input_line_1:1:; /usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/bits/stl_pair.h:403:36: error: no member named 'value' in 'std::__and_<std::is_move_assignable<std::__cxx11::basic_strin; g<char> >, std::is_move_assignable<Inner<int> > >'; is_move_assignable<_T2>>::value,; ~~~~~~~~~~~~~~~~~~~~~~~~~~^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class Outer with content:. #line 1 ""instlib dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""instGood.cxx"". #undef _BACKWARD_BACKWARD_WARNING_H. input_line_55:2:34: error: member access into incomplete type 'Outer'; {Outer *o = (Outer*)0x2e6d470; o->Print();}; ^; instlib dictionary forward declarations' payload:5:65: note: forward declaration of 'Outer'; class __attribute__((annotate(""$clingAutoload$instGood.cxx""))) Outer;; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class Inner with content:. #line 1 ""inst2lib dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""instGood.cxx"". #undef _BACKWARD_BACKWARD_WARNING_H. Error in <TInterpreter::AutoParse>: Error parsing payload code for class Inner<int> with content:. #line 1 ""inst2lib dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""instGood.cxx"". #undef _BACKWARD_BACKWARD_WARNING_H. ERROR: Class info for instantiation is not valid!; Error in <TInterpreter::AutoParse>: Error parsing payload code for class Inner with content:. #line 1 ""inst2lib dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""instGood.cxx"". #undef _BACKWARD_BACKWARD_WARNING_H. Info: ClassInfo is not valid; Name ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8187:1786,access,access,1786,https://root.cern,https://github.com/root-project/root/issues/8187,1,['access'],['access']
Security,ild/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:2505,secur,security,2505,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,ild/rmkdepend/parse.c:389; 37: Access to field 's_name' results in a dereference of a null pointer (loaded from variable 'stab') in /opt/root_src/build/rmkdepend/parse.c:392; /opt/root_src/build/rmkdepend/pr.c:108:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:108; /opt/root_src/build/rmkdepend/pr.c:119:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:119; /opt/root_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:43674,secur,security,43674,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,ils/src/TClingUtils.cxx:3194; 22: Forming reference to null pointer in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3230; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3287:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3287; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:15929,secur,security,15929,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security,"imistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>; <li>security notice for additional prototype pollution issue <a href=""https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.4...v1.2.5"">v1.2.5</a> - 2020-03-12</h2>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.3...v1.2.4"">v1.2.4</a> - 2020-03-11</h2>; <h3>Commits</h3>; <ul>; <li>security notice <a href=""https://github.com/minimistjs/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f""><code>4cf1354</code></a></li>; <li>additional test for constructor prototype pollution <a href=""https://github.com/minimistjs/minimist/commit/1043d212c3caaf871966e710f52cfdf02f9eea4b""><code>1043d21</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.2...v1.2.3"">v1.2.3</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>more failing proto pollution tests <a href=""https://github.com/minimistjs/minimist/commit/13c01a5327736903704984b7f65616b8476850cc""><code>13c01a5</code></a></li>; <li>even more aggressive checks for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab""><code>38a4d1c</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.1...v1.2.2"">v1.2.2</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>failing test for protocol pollution ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:3615,secur,security,3615,https://root.cern,https://github.com/root-project/root/pull/11865,1,['secur'],['security']
Security,improve RNTuple CRC32 checksum description,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11319:22,checksum,checksum,22,https://root.cern,https://github.com/root-project/root/pull/11319,1,['checksum'],['checksum']
Security,in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:3353,secur,security,3353,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.ins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:4140,secur,security,4140,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 3: Assuming field 'fFinder' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 5: Assuming 'ncells' is not equal to 0 in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 6: Left side of '||' is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 7: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 8: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 9: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2892; 10: Assuming 'i' is < 'ncells' in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2895; 11: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2895; 12: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899; /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1555:37: warning: Array access (from variable 'array2') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: 'slice2' initialized to a null pointer value in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1305; 2: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1309; 3: Taking false branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1309; 4: Assuming the condition is true in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1316; 5: Taking true branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1316; 6: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1318; 7: Taking false branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1318; 8: 'slice1' is null in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1320; 9: Taking false branch in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1320; 10: Assuming the condition is true in /opt/root_src/geom/geom/src/TGeoVoxelFinder.cxx:1328; 11: Taking true branch in /opt/root_src/geom/geom/src/T,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:77071,access,access,77071,https://root.cern,https://github.com/root-project/root/issues/7428,1,['access'],['access']
Security,in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kDouble_t:' at line 181 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:181; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:182:35: warning: Access to field 'u_char' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:61228,Access,Access,61228,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kFloat16_t:' at line 180 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:180; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:181:35: warning: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:59537,Access,Access,59537,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUInt_t:' at line 184 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_int' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:184; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:185:35: warning: Access to field 'u_long' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:66316,Access,Access,66316,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:11603,secur,security,11603,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:6213,secur,security,6213,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:21217,secur,security,21217,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:26598,secur,security,26598,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ine' in /opt/root_src/gui/gui/src/TGText.cxx:831; 11: Assuming the condition is true in /opt/root_src/gui/gui/src/TGText.cxx:1000; 12: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:1000; 13: Calling 'TGTextLine::GetText' in /opt/root_src/gui/gui/src/TGText.cxx:1001; 14: Assuming 'pos' is < field 'fLength' in /opt/root_src/gui/gui/src/TGText.cxx:187; 15: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:187; 16: Assuming the condition is false in /opt/root_src/gui/gui/src/TGText.cxx:191; 17: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:191; 18: Memory is allocated in /opt/root_src/gui/gui/src/TGText.cxx:195; 19: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGText.cxx:196; /opt/root_src/gui/gui/src/TGText.cxx:630:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:630; /opt/root_src/gui/gui/src/TGText.cxx:671:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:671; /opt/root_src/gui/gui/src/TGText.cxx:1106:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:55539,secur,security,55539,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,ing false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4hc.c:1167; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1167; 9: 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4hc.c:1168; 10: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1168; 11: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1578:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1578; /opt/root_src/builtins/zstd/compress/fse_compress.c:226:47: warning: Branch condition evaluates to a garbage value [clang-analyzer-core.uninitialized.Branch]; 1: Calling 'FSE_compress2' in /opt/root_src/builtins/zstd/compress/fse_compress.c:701; 2: Taking false branch in /opt/root_src/builtins/zstd/compress/fse_compress.c:695; 3: Calling 'FSE_compress_wksp' in /opt/root_src/builtins/zstd/compress/fse_compress.c:696; 4: 'tableLog' is <= 12 in /opt/root_src/builtins/zstd/compress/fse_compress.c:650; 5: expanded from macro 'FSE_COMPRESS_WKSP_SIZE_U32' in /opt/root_src/builtins/zstd/common/fse.h:327; 6: '?' condition is false in /opt/root_src/builtins/zstd/compress/fse_compress.c:650; 7: expanded from macro 'FSE_COMPRESS_WKSP_SIZE_U32' in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:66300,secur,security,66300,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:13766,secur,security,13766,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:447:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:1966,secur,security,1966,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:5899,secur,security,5899,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:6686,secur,security,6686,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:7473,secur,security,7473,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:8260,secur,security,8260,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:9047,secur,security,9047,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to func,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:9834,secur,security,9834,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:62490,secur,security,62490,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:21091,secur,security,21091,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:21738,secur,security,21738,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:22385,secur,security,22385,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprin,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:23737,secur,security,23737,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,inter passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1404:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:53630,secur,security,53630,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:5895; #9 0x00007fffebf8e2c8 in clang::Sema::ActOnCXXMemberDeclarator (this=0x5250d0, S=0x6a4ee0, AS=clang::AS_public, D=..., TemplateParameterLists=..., BW=0x0, VS=..., InitStyle=clang::ICIS_NoInit); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp:3430; #10 0x00007fffeba4151e in clang::Parser::ParseCXXInlineMethodDef (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., D=..., TemplateInfo=..., VS=..., PureSpecLoc=...); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseCXXInlineMethods.cpp:42; #11 0x00007fffeb986810 in clang::Parser::ParseCXXClassMemberDeclaration (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., TemplateInfo=..., TemplateDiags=0x0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:2858; #12 0x00007fffeb9885f5 in clang::Parser::ParseCXXClassMemberDeclarationWithPragmas (this=0x6a8f70, AS=@0x7fffffff7ac8: clang::AS_public, AccessAttrs=..., TagType=clang::TST_class, TagDecl=0x1407fc0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:3284; #13 0x00007fffeb989306 in clang::Parser::ParseCXXMemberSpecification (this=0x6a8f70, RecordLoc=..., AttrFixitLoc=..., Attrs=..., TagType=25, TagDecl=0x1407fc0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:3488; #14 0x00007fffeb983667 in clang::Parser::ParseClassSpecifier (this=0x6a8f70, TagTokKind=clang::tok::kw_class, StartLoc=..., DS=..., TemplateInfo=..., AS=clang::AS_none, EnteringContext=true,; DSC=clang::Parser::DeclSpecContext::DSC_top_level, Attributes=...) at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:2030; #15 0x00007fffeb95e5c7 in clang::Parser::ParseDeclarationSpecifiers (this=0x6a8f70, DS=..., TemplateInfo=..., AS=c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:7311,Access,AccessAttrs,7311,https://root.cern,https://github.com/root-project/root/issues/13034,1,['Access'],['AccessAttrs']
Security,"into local file and start browser with such local HTML file. ; Internally its will redirect to normal http server. This is most easy way to hide secret information from the system.; Exactly this method used by Jupyter. . Now it possible to enforce unique key (single-time-token) authentication for web widgets.; In such case URL to connect web widgets always has include `?key=` parameter - which generated new every time; new URL string is requested. Attempt to connect with same key twice will fail. To support such functionality, `GetWindowUrl()` add to all web-based widgets to let use such capability also; from `RBrowser` which integrate all existing widgets together. In addition to that jupyter does, ROOT adds secret session key (after `#` symbol), which remains only on client side.; This session key together with connection key are used to create ~~MD5~~ HMAC/SHA256 checksum, which is sends to server instead as connection request. While connection request may be retried many times, new request will get new number and therefore new ~~MD5~~ HMAC checksum. Once connection is accepted - same key cannot be use for new connection, but still will be used for ~~MD5~~ HMAC packets signs. To solve main-in-the-middle problem, each data packet is signed with ~~md5~~ HMAC checksum. Each packet includes sequence counter, which also protected by ~~md5~~ HMAC checksum. Therefore even if anybody gain control over http traffic between; client and server, it only be able to observe traffic but will not be able manipulate it - as long as secret session; key is not gained by other means. Also re-submitting same packets will not be possible - while packet with; already used counter will not be accepted. HTTP sniffing can only catch connection request and try to use it faster than normal client.; But even if connection gained by sniffer - it will not be able use it. To use connection, each packet ; should be signed by ~~md5~~ HMAC checksum which is not possible without secret session key.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14136:1123,checksum,checksum,1123,https://root.cern,https://github.com/root-project/root/pull/14136,4,['checksum'],['checksum']
Security,"introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks int",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:46953,secur,security,46953,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ion 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:27237,secur,security,27237,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ion is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 9: Assuming pointer value is null in /opt/root_src/net/auth/src/rsalib.cxx:394; 10: Assuming 'hp' is non-null in /opt/root_src/net/auth/src/rsalib.cxx:394; 11: Taking true branch in /opt/root_src/net/auth/src/rsalib.cxx:394; 12: Assuming 'ab' is < rsa_MAXBIT in /opt/root_src/net/auth/src/rsalib.cxx:406; 13: Loop condition is false. Execution continues on line 393 in /opt/root_src/net/auth/src/rsalib.cxx:406; 14: Assuming 'bi' is > 0 in /opt/root_src/net/auth/src/rsalib.cxx:393; 15: Loop condition is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 16: 2nd function call argument is an uninitialized value in /opt/root_src/net/auth/src/rsalib.cxx:394; /opt/root_src/net/http/civetweb/civetweb.c:1635:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:21577,secur,security,21577,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:42100,secur,security,42100,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builti,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:42745,secur,security,42745,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:5039,secur,security,5039,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,ks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:21603,secur,security,21603,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:27623,secur,security,27623,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,l to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:57122,secur,security,57122,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,l to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17916; /opt/root_src/net/http/civetweb/civetweb.c:17939:29: warning: 1st function call argument i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:69613,secur,security,69613,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,l to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:26874,secur,security,26874,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,l to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:35251,secur,security,35251,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,l/src/TGHtmlDraw.cxx:208; /opt/root_src/gui/guihtml/src/TGHtmlIndex.cxx:394:13: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/guihtml/src/TGHtmlIndex.cxx:394; /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:469:33: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:469; /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:498:19: warning: Value stored to 'descent2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'descent2' is never read in /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:498; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1095:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1095; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147:10: warning: Call to function 'strcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:79166,secur,security,79166,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,lDereference]; 1: Value assigned to field 'fCutMin' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:435; 2: Assuming field 'fCutMin' is equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 3: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 4: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 5: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 6: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 7: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 8: Assuming 'ibin' is < field 'fNbins' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 10: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 11: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 12: Array access (via field 'fCutMin') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:454; /opt/root_src/tmva/tmva/src/MethodCuts.cxx:455:45: warning: Array access (via field 'fCutMax') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Value assigned to field 'fCutMax' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:435; 2: Assuming field 'fCutMin' is not equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 3: Left side of '||' is false in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 4: Assuming field 'fCutMax' is equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 5: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 6: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 7: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 8: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:76187,access,access,76187,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,lace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:23108,secur,security,23108,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,lcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574; /opt/root_src/gui/gui/src/TGPack.cxx:561:30: warning: Access to field 'fFrame' results in a dereference of a null pointer (loaded from variable 'f0') [clang-analyzer-core.NullDereference]; 1: Assuming 'delta' is >= 'min_dec' in /opt/root_src/gui/gui/src/TGPack.cxx:532; 2: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:532; 3: 'f0' initialized to a null pointer value in /opt/root_src/gui/gui/src/TGPack.cxx:537; 4: Calling 'TGPack::FindFrames' in /opt/root_src/gui/gui/src/TGPack.cxx:538; 5: Loop condition is false. Execution continues on line 226 in /opt/root_src/gui/gui/src/TGPack.cxx:217; 6: Returning without writing to 'f0' in /opt/root_src/gui/gui/src/TGPack.cxx:227; 7: Returning from 'TGPack::FindFrames' in /opt/root_src/gui/gui/src/TGPack.cxx:538; 8: Assuming field 'fDragOverflow' is >= 0 in /opt/root_src/gui/gui/src/TGPack.cxx:540; 9: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:540; 10: Assuming field 'fDragOverflow' is <= 0 in /opt/root_src/gui/gui/src/TGPack.cxx:550; 11: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:550; 12: Access to f,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:48158,Access,Access,48158,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,"lexExternalSemaSource::LookupUnqualified (this=0x72d0b0, R=..., S=0x6a4ee0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/MultiplexExternalSemaSource.cpp:241; #7 0x00007fffec47ee6c in clang::Sema::LookupName (this=0x5250d0, R=..., S=0x6a4ee0, AllowBuiltinCreation=false) at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2026; #8 0x00007fffebe7a672 in clang::Sema::HandleDeclarator (this=0x5250d0, S=0x6a4ee0, D=..., TemplateParamLists=...) at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:5895; #9 0x00007fffebf8e2c8 in clang::Sema::ActOnCXXMemberDeclarator (this=0x5250d0, S=0x6a4ee0, AS=clang::AS_public, D=..., TemplateParameterLists=..., BW=0x0, VS=..., InitStyle=clang::ICIS_NoInit); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp:3430; #10 0x00007fffeba4151e in clang::Parser::ParseCXXInlineMethodDef (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., D=..., TemplateInfo=..., VS=..., PureSpecLoc=...); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseCXXInlineMethods.cpp:42; #11 0x00007fffeb986810 in clang::Parser::ParseCXXClassMemberDeclaration (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., TemplateInfo=..., TemplateDiags=0x0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:2858; #12 0x00007fffeb9885f5 in clang::Parser::ParseCXXClassMemberDeclarationWithPragmas (this=0x6a8f70, AS=@0x7fffffff7ac8: clang::AS_public, AccessAttrs=..., TagType=clang::TST_class, TagDecl=0x1407fc0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:3284; #13 0x00007fffeb989306 in clang::Parser::ParseCXXMemberSpecification (this=0x6a8f70, RecordLoc=..., AttrFixitLoc=..., Attrs=..., TagType=25, TagDecl=0x1407fc0); at /local2/pcan",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:6711,Access,AccessAttrs,6711,https://root.cern,https://github.com/root-project/root/issues/13034,1,['Access'],['AccessAttrs']
Security,ling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kULong64_t:' at line 186 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_longlong' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:186; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:187:41: warning: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:69502,Access,Access,69502,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,ling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 sta,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:29792,secur,security,29792,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"ll (allowing a ""builtin_lz4"" option in CMake analogous to ""builtin_lzma""). I am unable to test this on Windows currently. The LZ4 algorithm focuses on decompression speed while sacrificing compression ratio. Compression level < 4 uses the ""LZ4 compression"" algorithm while compression level >= 4 uses ""LZ4HC"" (HC = high compression) variant. LZ4HC is comparable to zlib in speeds, but has approximately 20% larger file size. To evaluate, I use the Event executable in the test/ directory. I extend this to allow the compression algorithm be specified via CLI. Example invocation:. time ./Event 4000 6 99 1 1000 4; time ./Event 4000 4 99 0 1000 4. Here, the CLI arguments are:; - 1: Number of events (4000); - 2: Compression ratio (6); - 3: Split level (99); - 4: 1 for write, 0 for read.; - 5: Number of tracks per event (1000).; - 6: Compression algorithm (1 = zlib, 2 = lzma, 4 = lz4. 3 is the deprecated zlib-like algorithm). I extended MainEvent.cxx to include TTreePerfStats information, which gives us access to the compression-time-only rates. Performance results (testing on a 2.6GHz Intel Westmere E56xx-based VM) summary:. LZ4HC compression:; - File size: 231MB; - 14.7MB/s CPU time for writing. ZLIB level-6 compression:; - File size: 189MB; - 10.5MB/s CPU time for writing.; Summary: LZ4HC compression resulted in a file 20% larger. Compression time was 44% faster. LZMA level-6 compression:; - File size: 163MB; - .62MB/s CPU time for writing.; Summary: LZMA compression resulted in a file 13% smaller. Compression time was 16x slower than ZLIB level-6. LZ4 decompression:; - 233MB/s CPU time for decompression only.; - 189MB/s CPU time for reading. ZLIB decompression:; - 118MB/s CPU time for decompression only; - 104MB/s CPU time for reading.; Summary: LZ4 decompression was 97% faster, resulting in 81% faster reading for this case. LZMA decompression:; - 15.4MB/s CPU time for decompression only; - 14.7MB/s CPU time for reading.; Summary: LZMA decompression was 7x slower than zlib",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/59:1173,access,access,1173,https://root.cern,https://github.com/root-project/root/pull/59,1,['access'],['access']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:50547,secur,security,50547,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:51205,secur,security,51205,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:51863,secur,security,51863,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:61066,secur,security,61066,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:61724,secur,security,61724,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:63696,secur,security,63696,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ll to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:64354,secur,security,64354,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,lling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kLong64_t:' at line 178 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_longlong' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:178; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:179:35: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:55939,Access,Access,55939,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"llvm IR naming of private constants (CodeGenModule::createUnnamedGlobalFrom(), line 1136) will name private symbols without caring about possible name clashes. We will create these name clashes by marking such private symbols as weak ones, re-using previously emitted symbols (e.g. in JITDylib::defineImpl() where they get added to MUDefsOverridden and thus re-used instead of re-emitted). Let me see what happens when we keep private symbols private. In principle, the interpreter should have no means fo accessing them from another transaction - private symbols seem to be function-local ones.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12183:506,access,accessing,506,https://root.cern,https://github.com/root-project/root/pull/12183,1,['access'],['accessing']
Security,located in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3435; 4: Execution continues on line 3464 in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3436; 5: Potential memory leak in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3464; /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3958:10: warning: Value stored to 'asize' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'asize' is never read in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3958; /opt/root_src/io/io/src/TStreamerInfoActions.cxx:4063:13: warning: Value stored to 'asize' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'asize' is never read in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:4063; /opt/root_src/io/sql/src/TBufferSQL2.cxx:1871:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1871; /opt/root_src/io/sql/src/TBufferSQL2.cxx:1894:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fIOVersion' is < 2 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 2: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 4: Taking false branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 6: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 7: Memory is allocated in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1893; 8: Use of zero-allocated mem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:119366,secur,security,119366,https://root.cern,https://github.com/root-project/root/issues/7431,1,['secur'],['security']
Security,"ltinCreation=false) at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2026; #8 0x00007fffebe7a672 in clang::Sema::HandleDeclarator (this=0x5250d0, S=0x6a4ee0, D=..., TemplateParamLists=...) at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:5895; #9 0x00007fffebf8e2c8 in clang::Sema::ActOnCXXMemberDeclarator (this=0x5250d0, S=0x6a4ee0, AS=clang::AS_public, D=..., TemplateParameterLists=..., BW=0x0, VS=..., InitStyle=clang::ICIS_NoInit); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp:3430; #10 0x00007fffeba4151e in clang::Parser::ParseCXXInlineMethodDef (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., D=..., TemplateInfo=..., VS=..., PureSpecLoc=...); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseCXXInlineMethods.cpp:42; #11 0x00007fffeb986810 in clang::Parser::ParseCXXClassMemberDeclaration (this=0x6a8f70, AS=clang::AS_public, AccessAttrs=..., TemplateInfo=..., TemplateDiags=0x0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:2858; #12 0x00007fffeb9885f5 in clang::Parser::ParseCXXClassMemberDeclarationWithPragmas (this=0x6a8f70, AS=@0x7fffffff7ac8: clang::AS_public, AccessAttrs=..., TagType=clang::TST_class, TagDecl=0x1407fc0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:3284; #13 0x00007fffeb989306 in clang::Parser::ParseCXXMemberSpecification (this=0x6a8f70, RecordLoc=..., AttrFixitLoc=..., Attrs=..., TagType=25, TagDecl=0x1407fc0); at /local2/pcanal/cint_working/rootcling/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseDeclCXX.cpp:3488; #14 0x00007fffeb983667 in clang::Parser::ParseClassSpecifier (this=0x6a8f70, TagTokKind=clang::tok::kw_class, StartLoc=..., DS=..., TemplateInfo=..., AS=clang::AS_none, EnteringContext=true,; DSC=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:7007,Access,AccessAttrs,7007,https://root.cern,https://github.com/root-project/root/issues/13034,1,['Access'],['AccessAttrs']
Security,ltins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-ana,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:32782,secur,security,32782,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ltins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:11406,secur,security,11406,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process.; We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable; Pros: It just works (possibly) without out of tree modifications. Easy to relocate.; Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance; Pros: It's neat. One can control load path precisely.; Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1360:42,Integrity,Integrity,42,https://root.cern,https://github.com/root-project/root/pull/1360,1,['Integrity'],['Integrity']
Security,"makeFlags = [; ""-Drpath=ON""; ""-DCMAKE_INSTALL_BINDIR=bin""; ""-DCMAKE_INSTALL_LIBDIR=lib""; ""-DCMAKE_INSTALL_INCLUDEDIR=include""; ""-Dbuiltin_llvm=OFF""; ""-Dbuiltin_nlohmannjson=OFF""; ""-Dbuiltin_openui5=OFF""; ""-Dalien=OFF""; ""-Dbonjour=OFF""; ""-Dcastor=OFF""; ""-Dchirp=OFF""; ""-Dclad=OFF""; ""-Ddavix=ON""; ""-Ddcache=OFF""; ""-Dfail-on-missing=ON""; ""-Dfftw3=OFF""; ""-Dfitsio=OFF""; ""-Dfortran=OFF""; ""-Dimt=ON""; ""-Dgfal=OFF""; ""-Dgviz=OFF""; ""-Dhdfs=OFF""; ""-Dhttp=ON""; ""-Dkrb5=OFF""; ""-Dldap=OFF""; ""-Dmonalisa=OFF""; ""-Dmysql=OFF""; ""-Dodbc=OFF""; ""-Dopengl=ON""; ""-Doracle=OFF""; ""-Dpgsql=OFF""; ""-Dpythia6=OFF""; ""-Dpythia8=OFF""; ""-Drfio=OFF""; ""-Droot7=OFF""; ""-Dsqlite=OFF""; ""-Dssl=ON""; ""-Dtmva=ON""; ""-Dvdt=OFF""; ""-Dwebgui=OFF""; ""-Dxml=ON""; ""-Dxrootd=OFF""; ]; ++ lib.optional (stdenv.cc.libc != null) ""-DC_INCLUDE_DIRS=${lib.getDev stdenv.cc.libc}/include""; ++ lib.optionals stdenv.isDarwin [; ""-DOPENGL_INCLUDE_DIR=${OpenGL}/Library/Frameworks""; ""-DCMAKE_DISABLE_FIND_PACKAGE_Python2=TRUE"". # fatal error: module map file '/nix/store/<hash>-Libsystem-osx-10.12.6/include/module.modulemap' not found; # fatal error: could not build module '_Builtin_intrinsics'; ""-Druntime_cxxmodules=OFF""; ];. NIX_LDFLAGS = lib.optionalString (stdenv.isLinux && stdenv.isAarch64 && stdenv.cc.isGNU) ""-lgcc"";. postInstall = ''; for prog in rootbrowse rootcp rooteventselector rootls rootmkdir rootmv rootprint rootrm rootslimtree; do; wrapProgram ""$out/bin/$prog"" \; --set PYTHONPATH ""$out/lib"" \; --set ${lib.optionalString stdenv.isDarwin ""DY""}LD_LIBRARY_PATH ""$out/lib""; done. # Make ldd and sed available to the ROOT executable; wrapProgram ""$out/bin/root"" --prefix PATH : ""${lib.makeBinPath [; gnused # sed; stdenv.cc # c++ ld etc.; stdenv.cc.libc # ldd; ]}"". # Patch thisroot.{sh,csh,fish}. # The main target of `thisroot.sh` is ""bash-like shells"",; # but it also need to support Bash-less POSIX shell like dash,; # as they are mentioned in `thisroot.sh`. # `thisroot.sh` would include commands `lsof` and `procps` since ROOT 6.28.; # S",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:7091,hash,hash,7091,https://root.cern,https://github.com/root-project/root/issues/11920,1,['hash'],['hash']
Security,"malloc, garbage value and boundary warnings:; (ROOT master of today, with xrootd off); ```; /opt/root_src/builtins/lz4/lz4.c:414:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:414; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:447:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:203,secur,security,203,https://root.cern,https://github.com/root-project/root/issues/7411,4,['secur'],['security']
Security,"map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151; #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648; #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #16 0x0000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:8106,hash,hash,8106,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security,"map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151; #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648; #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #23 0x0000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:18959,hash,hash,18959,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security,matrix/src/TMatrixTSparse.cxx:1912; 24: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 25: Left side of '&&' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 26: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 27: Taking true branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 28: 'flagRow' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 29: Taking true branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 30: Assuming 'index' is <= 'left' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1924; 31: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1924; 32: Array access (from variable 'colIndex_old') results in a null pointer dereference in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1926; /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1967:32: warning: Array access (from variable 'colIndex_old') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 2: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 3: Assuming 'irow' is >= field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 4: Loop condition is false. Execution continues on line 1888 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 5: 'colIndex_old' initialized here in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1894; 6: Assuming 'irow' is < field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 7: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 8: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 9: Left side of '&&' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 10: Assuming the condition is true in /opt/root_src/math/ma,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:143594,access,access,143594,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:25597,secur,security,25597,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3166; /opt/root_src/graf3d/x3d/src/x3d.c:3170:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3170; /opt/root_src/graf3d/x3d/src/x3d.c:3174:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3174; /opt/root_src/graf3d/x3d/src/x3d.c:3175:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3175; /opt/root_src/core/cont/inc/TList.h; /opt/root_src/graf3d/eve/src/TEveElement.cxx; /opt/root_src/graf3d/eve/src/TEveFrameBox.cxx; /opt/root_src/graf3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:60222,secur,security,60222,https://root.cern,https://github.com/root-project/root/issues/7531,1,['secur'],['security']
Security,memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3170; /opt/root_src/graf3d/x3d/src/x3d.c:3174:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3174; /opt/root_src/graf3d/x3d/src/x3d.c:3175:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3175; /opt/root_src/core/cont/inc/TList.h; /opt/root_src/graf3d/eve/src/TEveElement.cxx; /opt/root_src/graf3d/eve/src/TEveFrameBox.cxx; /opt/root_src/graf3d/eve/src/TEveGeoNode.cxx; /opt/root_src/graf3d/eve/src/TEveJetConeGL.cxx; /opt/root_src/graf3d/eve/src/TEveLine.cxx; /opt/root_src/graf3d/eve/src/TEveProjectionAxesGL.cxx; /opt/root_src/graf3d/eve/src/TEveProjectionManager.cxx; /opt/root_src/graf3d/eve/src/TEveWindow.cxx; /opt/root_src/graf3d/eve7/glu/mesh.c; /opt/root_src/graf3d/eve7/glu/normal.c; /opt/root_src/graf3d/eve7/glu/sweep.c; /opt/root_src/graf3d/eve7/src/REveCalo.cxx; /opt/root_src/graf3d/eve7/src/REveCaloData.cxx; /opt/root_src/graf3d/eve7/src/REveDataCollection.cxx; /opt/root_src/graf3d/e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:60781,secur,security,60781,https://root.cern,https://github.com/root-project/root/issues/7531,1,['secur'],['security']
Security,memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:42179,secur,security,42179,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:24710,secur,security,24710,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:55111,secur,security,55111,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:55757,secur,security,55757,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:56403,secur,security,56403,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:57049,secur,security,57049,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:57695,secur,security,57695,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:58341,secur,security,58341,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:58987,secur,security,58987,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:59633,secur,security,59633,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support lengt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:60279,secur,security,60279,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"mldoc"" ""-P"" ""C:/Users/bellenot/build/release/RootTestDriver.cmake""; 993: Environment variables:; 993: ROOT_HIST=0; 993: Test timeout computed to be: 1500; 993: input_line_35:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RCanvas>*)obj)->operator-><ROOT::Experimental::RCanvas, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: input_line_39:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RBox>*)obj)->operator-><ROOT::Experimental::RBox, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: Traceback (most recent call last):; 993: File ""C:\Users\bellenot\git\master\tutorials\launcher.py"", line 34, in <module>; 993: spec.loader.exec_module(module); 993: File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; 993: File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; 993: File ""C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"", line 24, in <module>; 993: box1.border.color = RColor.kBlue; 993: AttributeError: <class cppyy.gbl.ROOT.Experimental.RColor at 0x12092B98> has no attribute 'kBlue'. Full details:; 993: attribute access requires an instance; 993: 'ROOT::Experimental::RColor::kBlue' is not a known C++ class; 993: 'kBlue' is not a known C++ template; 993: 'kBlue' is not a known C++ enum; 993: CMake Error at C:/Users/bellenot/build/release/RootTestDriver.cmake:227 (message):; 993: error code: 1; 993:; 993:; 1/1 Test #993: tutorial-rcanvas-rbox-py .........***Failed 3.69 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; tutorial = 3.69 sec*proc (1 test). Total Test time (real) = 6.60 sec. The following tests FAILED:; 993 - tutorial-rcanvas-rbox-py (Failed); Errors while running CTest; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035:1917,access,access,1917,https://root.cern,https://github.com/root-project/root/pull/9035,1,['access'],['access']
Security,"mous namespace)::VisibleDeclsRecord&, bool, bool) [clone .part.1455] 0x7fffead875c6 ; 10 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92949 ; 11 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92540 ; 12 clang::Sema::LookupVisibleDecls(clang::Scope *, clang::Sema::LookupNameKind, clang::VisibleDeclConsumer&, bool, bool) 0x7fffead9319b ; 13 clang::Sema::CodeCompleteOrdinaryName(clang::Scope *, clang::Sema::ParserCompletionContext) 0x7fffeaa73a0f ; 14 clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt *, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation *, clang::Parser::ParsedAttributesWithRange&) 0x7fffea81ba2d ; 15 clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt *, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation *) 0x7fffea81c2e9 ; 16 clang::Parser::ParseCompoundStatementBody(bool) 0x7fffea81f6a9 ; 17 clang::Parser::ParseFunctionStatementBody(clang::Decl *, clang::Parser::ParseScope&) 0x7fffea8219cb ; 18 clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList *) 0x7fffea83fbe2 ; 19 clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation *, clang::Parser::ForRangeInit *) 0x7fffea7bd7de ; 20 clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) 0x7fffea83d081 ; 21 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec *, clang::AccessSpecifier) [clone .part.262] 0x7fffea83d6a1 ; 22 clang::Parser::ParseExternalDecla",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8126:2827,Access,AccessSpecifier,2827,https://root.cern,https://github.com/root-project/root/issues/8126,2,['Access'],['AccessSpecifier']
Security,n /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case 1073745921:' at line 147 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Called C++ object pointer is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:148; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:173:35: warning: Access to field 'boolean' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:45973,Access,Access,45973,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,n /opt/root_src/net/auth/src/rsalib.cxx:393; 15: Loop condition is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 16: 2nd function call argument is an uninitialized value in /opt/root_src/net/auth/src/rsalib.cxx:394; /opt/root_src/net/http/civetweb/civetweb.c:1635:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/ci,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:22043,secur,security,22043,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"n English. On 24/03/17 22:32, Axel Naumann wrote:; > Hi Berserker,; >; > I'm more and more convinced that this is the way to go... I'm talking; > specifically about; > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>; > here.; >; > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:; > Hi Axel,; > ; > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones.; > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2].; > Unfortunately, [2] says:; >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data).; > ; > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3].; > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6].; > ; > So, if we want this exception hander matching algorithm, there are a couple of options:; > 1) Stick to libsupc++ with its ""public"" __do_catch() member function; > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]; > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, bec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463:1446,access,accessible,1446,https://root.cern,https://github.com/root-project/root/pull/463,1,['access'],['accessible']
Security,n case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:4524,secur,security,4524,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,n case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:32507,secur,security,32507,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,n case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18899; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18914:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:74246,secur,security,74246,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"nViolation) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:1294; #5 <signal handler called>; #6 0x00007fba36ddb793 in AliAnalysisTask::SetUsed (this=0x27a9980, flag=flag; entry=true) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisTask.cxx:540; #7 0x00007fba36dc471a in AliAnalysisManager::InitAnalysis (this=0x24a9f30) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisManager.cxx:1633; #8 0x00007fba36df65e1 in G__G__ANALYSIS_215_0_109 (result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/BUILD/ec8cb744704e066b1ec26fcf535125d0830c6a08/AliRoot/ANALYSIS/ANALYSIS/G__ANALYSIS.cxx:5453; #9 0x00007fba33306dee in Cint::G__ExceptionWrapper (funcp=funcp; entry=0x7fba36df65d0 <G__G__ANALYSIS_215_0_109(G__value*, char const*, G__param*, int)>, result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/Api.cxx:393; #10 0x00007fba3322b094 in G__execute_call (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/newlink.cxx:2408; #11 0x00007fba3322b38b in G__call_cppfunc (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/newlink.cxx:2612; #12 0x00007fba33212c9f in G__interpret_func (result7=result7; entry=0x7ffcac8c2c90, funcname=0xfa4210 ""InitAnalysis"", libp=libp; entry=0x7ffcac8c2cd0, hash=1240, p_ifunc=0x249df80, funcmatch=funcmatch; entry=1, memfunc_flag=<optimized out>) at /home/gnp78160/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:2313,hash,hash,2313,https://root.cern,https://github.com/root-project/root/issues/6977,2,['hash'],['hash']
Security,nch in /opt/root_src/gui/gui/src/TGFont.cxx:2101; 41: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2104; 42: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2104; 43: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 44: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 45: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 46: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 47: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 48: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 49: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 50: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 51: Assuming the condition is true in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 52: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 53: Array access results in a null pointer dereference in /opt/root_src/gui/gui/src/TGFont.cxx:2129; /opt/root_src/gui/gui/src/TGFont.cxx:2154:11: warning: Array access results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 3: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 4: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 5: Calling 'TGFontPool::GetFont' in /opt/root_src/gui/gui/src/TGFont.cxx:1709; 6: 'font' is non-null in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 7: Left side of '||' is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 8: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 9: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 10: Assuming 'f' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 11: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 12:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:29140,access,access,29140,https://root.cern,https://github.com/root-project/root/issues/7533,1,['access'],['access']
Security,nch in /opt/root_src/gui/gui/src/TGFont.cxx:2104; 43: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 44: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2107; 45: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 46: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2110; 47: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 48: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2113; 49: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 50: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2121; 51: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 52: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:2128; 53: Assuming the condition is true in /opt/root_src/gui/gui/src/TGFont.cxx:2153; 54: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:2153; 55: Array access results in a null pointer dereference in /opt/root_src/gui/gui/src/TGFont.cxx:2154; /opt/root_src/gui/gui/src/TGFont.cxx:2188:23: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 3: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 4: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 5: Calling 'TGFontPool::GetFont' in /opt/root_src/gui/gui/src/TGFont.cxx:1709; 6: 'font' is non-null in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 7: Left side of '||' is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 8: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 9: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 10: Assuming 'f' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 11: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:33486,access,access,33486,https://root.cern,https://github.com/root-project/root/issues/7533,1,['access'],['access']
Security,nction 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:63576,secur,security,63576,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,nctions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:505; /opt/root_src/core/clib/src/Demangle.c:1316:22: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:507; 6: Taking false branch in /opt/root_src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:7836,secur,security,7836,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"nd_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- Performing Test found_attribute_always_inline; -- Performing Test found_attribute_always_inline - Success; -- Performing Test has_found_attribute_noinline; -- Performing Test has_found_attribute_noinline - Success; -- Performing Test found_hardware_interference_size; -- Performing Test found_hardware_interference_size - Failed; Running /home/razorr/Softwares/Installed/HEP/Root/gitclone/build/unix/compiledata.sh; Making /home/razorr/Softwares/Installed/HEP/Root/build/ginclude/compiledata.h; -- ROOT Configuration. System Linux-5.15.37-1-lts; Processor 2 core Intel(R) Core(TM) i3-5010U CPU @ 2.10GHz (x86_64); Build type Release; Install path /home/razorr/Softwares/Installed/HEP/Root/install; Compiler GNU 11.2.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_ftgl builtin_gl2ps builtin_glew builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd clad dataframe exceptions fftw3 gdml http imt mathmore mlp minuit2 mysql opengl pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd; -- Configuring done; -- Generating done; -- Build files have been written to: /home/razorr/Softwares/Installed/HEP/Root/build; ```. </details>. `$ cmake --build . --target install -- -j4`; <details>; <summary>truncated output</summary>. ``` ; [ 75%] Building CXX object core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o; [ 75%] Built target Dictgen; [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:11908,hash,hash-style,11908,https://root.cern,https://github.com/root-project/root/issues/10528,1,['hash'],['hash-style']
Security,ndard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:38718,secur,security,38718,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ndary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:48455,secur,security,48455,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,nding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:150; /opt/root_src/build/rmkdepend/cppsetup.c:180:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with anal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:1285,secur,security,1285,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,ng true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:596; 11: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:598; 12: Assuming 'cl' is non-null in /opt/root_src/tree/tree/src/TBranchObject.cxx:600; 13: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:600; 14: Memory is allocated in /opt/root_src/tree/tree/src/TBranchObject.cxx:601; 15: Potential leak of memory pointed to by 'voidobj' in /opt/root_src/tree/tree/src/TBranchObject.cxx:610; /opt/root_src/tree/tree/src/TBranchSTL.cxx:305:10: warning: Value stored to 'elBranch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'elBranch' is never read in /opt/root_src/tree/tree/src/TBranchSTL.cxx:305; /opt/root_src/tree/tree/src/TBufferSQL.cxx:292:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TBufferSQL.cxx:292; /opt/root_src/tree/tree/src/TBufferSQL.cxx:635:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TBufferSQL.cxx:635; /opt/root_src/tree/tree/src/TChain.cxx:2366:32: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage];,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:43629,secur,security,43629,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,ng-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:33170,secur,security,33170,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ng-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:33971,secur,security,33971,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ng-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: war,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:34772,secur,security,34772,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"ng<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here; { return _M_h[std::move(__k)]; }; ^; /home/jhahnfel/ROOT/build/include/TTreeReader.h:264:15: note: in instantiation of member function 'std::unordered_map<std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> >, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > > >::operator[]' requested here; fProxies[bpName].reset(p);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:915:12: note: candidate function not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; void _M_rehash_aux(size_type __n, std::true_type);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:918:12: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; void _M_rehash_aux(size_type __n, std::false_type);; ^; Error: /home/jhahnfel/ROOT/build/bin/rootcling: compilation failure (/home/jhahnfel/ROOT/build/lib/libTreePlayer8033212c3f_dictUmbrella.h); ```; and; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:3417,hash,hash,3417,https://root.cern,https://github.com/root-project/root/issues/8642,1,['hash'],['hash']
Security,ngth arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:26428,secur,security,26428,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,ngth arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:25145,secur,security,25145,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:54182,secur,security,54182,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:54839,secur,security,54839,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12222; /opt/root_src/net/http/civetweb/civetweb.c:12224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:55496,secur,security,55496,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:56811,secur,security,56811,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:58785,secur,security,58785,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:59442,secur,security,59442,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12455; /opt/root_src/net/http/civetweb/civetweb.c:12462:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:60099,secur,security,60099,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12462; /opt/root_src/net/http/civetweb/civetweb.c:12834:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:60757,secur,security,60757,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66016,secur,security,66016,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:34942,secur,security,34942,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:48923,secur,security,48923,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:49580,secur,security,49580,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11508; /opt/root_src/net/http/civetweb/civetweb.c:11591:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:50238,secur,security,50238,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12224; /opt/root_src/net/http/civetweb/civetweb.c:12234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:56153,secur,security,56153,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:63387,secur,security,63387,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:67330,secur,security,67330,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:67987,secur,security,67987,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:16593; /opt/root_src/net/http/civetweb/civetweb.c:17184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:68644,secur,security,68644,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:69302,secur,security,69302,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:52868,secur,security,52868,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12186; /opt/root_src/net/http/civetweb/civetweb.c:12187:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12187; /opt/root_src/net/http/civetweb/civetweb.c:12222:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:53525,secur,security,53525,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:62729,secur,security,62729,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:65359,secur,security,65359,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14337; /opt/root_src/net/http/civetweb/civetweb.c:14471:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14471; /opt/root_src/net/http/civetweb/civetweb.c:14472:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14472; /opt/root_src/net/http/civetweb/civetweb.c:16593:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:66673,secur,security,66673,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ns with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1095; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1389:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1389; /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1109:24: warning: Called C++ object pointer is null [clang-analyzer-c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:80329,secur,security,80329,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,ns/lz4/lz4.c:414:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:414; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:447:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:1179,secur,security,1179,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ns/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:2754,secur,security,2754,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ns/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to functio,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:4329,secur,security,4329,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ns/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to functi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:10622,secur,security,10622,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ns/lz4/lz4frame.c:1305; 38: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1311; 39: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1311; 40: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1322; 41: Left side of '&&' is false in /opt/root_src/builtins/lz4/lz4frame.c:1322; 42: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1329; 43: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking true branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1344; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1344; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1357:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:47453,secur,security,47453,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ns/lz4/lz4frame.c:1322; 42: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1329; 43: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking true branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1344; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1344; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1357:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Null pointer passed to 2nd parameter expecting 'nonnul,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:47762,secur,security,47762,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"nt/src/var.cxx:5407; #16 0x00007fba331e12f1 in G__getitem (item=0xe73370 ""mgr->InitAnalysis()"") at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1906; #17 0x00007fba331e5c70 in G__getexpr (expression=<optimized out>) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1488; #18 0x00007fba331f2003 in G__test (expr=<optimized out>) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1998; #19 0x00007fba33256ef4 in G__exec_if () at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/parse.cxx:1381; #20 G__exec_statement (mparen=mparen; entry=0x7ffcac8d188c) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/parse.cxx:7285; #21 0x00007fba3321462a in G__interpret_func (result7=result7; entry=0x7ffcac8d2400, funcname=<optimized out>, libp=libp; entry=0x7ffcac8d2440, hash=<optimized out>, p_ifunc=0x2243ac0, funcmatch=funcmatch; entry=1, memfunc_flag=<optimized out>) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/ifunc.cxx:6710; #22 0x00007fba33204c22 in G__getfunction (item=item; entry=0xe65770 ""RunEtaC()"", known3=known3; entry=0x7ffcac8dcee4, memfunc_flag=<optimized out>, memfunc_flag; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/func.cxx:2901; #23 0x00007fba331e1752 in G__getitem (item=0xe65770 ""RunEtaC()"") at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1918; #24 0x00007fba331e5c70 in G__getexpr (expression=expression; entry=0x2315180 ""RunEtaC()"") at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1488; #25 0x00007fba331f090c in G__calc_internal (exprwithspace=<optimized out>) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/expr.cxx:1071; #26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:5254,hash,hash,5254,https://root.cern,https://github.com/root-project/root/issues/6977,1,['hash'],['hash']
Security,ntMethodIdx' is <= 0 in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:390; 10: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:390; 11: 'method' initialized here in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:392; 12: Value assigned to field 'fCurrentMethod' in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:398; 13: Assuming field 'fCurrentMethod' is not equal to null in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:400; 14: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:400; 15: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:406; 16: Taking true branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:406; 17: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:407; 18: 'methCat' is null in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:408; 19: Taking true branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:408; 20: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:410; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:761:13: warning: Value stored to 'sSelCut' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSelCut' during its initialization is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:761; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:762:13: warning: Value stored to 'bSelCut' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'bSelCut' during its initialization is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:762; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:787:10: warning: Value stored to 'sSelCut' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSelCut' is never read in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:787; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:788:10: warning: Value stored to 'bSelCut' is never read [,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:56802,Access,Access,56802,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,ntent' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maxContent' is never read in /opt/root_src/graf3d/gl/src/TGLBoxPainter.cxx:411; /opt/root_src/graf3d/gl/src/TGLScene.cxx:1500:7: warning: Value stored to 'logicalShape' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'logicalShape' is never read in /opt/root_src/graf3d/gl/src/TGLScene.cxx:1500; /opt/root_src/graf3d/gl/src/TGLScene.cxx:1510:7: warning: Value stored to 'physicalShape' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'physicalShape' is never read in /opt/root_src/graf3d/gl/src/TGLScene.cxx:1510; /opt/root_src/graf3d/gl/src/TGLVoxelPainter.cxx:270:7: warning: Value stored to 'maxContent' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maxContent' is never read in /opt/root_src/graf3d/gl/src/TGLVoxelPainter.cxx:270; /opt/root_src/graf3d/gviz3d/src/TStructViewerGUI.cxx:509:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/graf3d/gviz3d/src/TStructViewerGUI.cxx:509; /opt/root_src/graf3d/x3d/src/x3d.c:730:10: warning: Value stored to 'index2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'index2' is never read in /opt/root_src/graf3d/x3d/src/x3d.c:730; /opt/root_src/graf3d/x3d/src/x3d.c:761:10: warning: Value stored to 'index2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'index2' is never read in /opt/root_src/graf3d/x3d/src/x3d.c:761; /opt/root_src/graf3d/x3d/src/x3d.c:3166:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:58224,secur,security,58224,https://root.cern,https://github.com/root-project/root/issues/7531,1,['secur'],['security']
Security,nts or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:21280,secur,security,21280,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,nts or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:21927,secur,security,21927,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,nts or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:22574,secur,security,22574,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,ntypes' in /opt/root_src/core/clib/src/Demangle.c:1904; 75: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1904; 76: Array access (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:20444,secur,security,20444,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"nu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Debug' (flags = ''); -- Compiler Flags: -march=native -O2 -pipe -Og -fno-omit-frame-pointer -g -ggdb -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 3.8.10; CMake Error at CMakeLists.txt:139 (string):; string sub-command REGEX, mode REPLACE needs at least 6 arguments total to; command. CMake Error at CMakeLists.txt:140 (string):; string sub-command REGEX, mode REPLACE needs at least 6 arguments total to; command.; ```. Note that the default flags for 'Debug' build are empty (on purpose, because compile flags are controlled by the package manager), and that this makes a string substitution command fail, likely because of lack of quoting some variable. I set `asserts` to `OFF` in the command line, though. Ideally, if something is exposed as an option to users, like `-Dasserts=ON` is, and it's set to `OFF` on the command line, it should not be altered by the build system, as that is surprising behavior. In any case, empty default flags (or even build type) is not something that should break configuration. Note that in multi-configuration generators, `CMAKE_BUILD_TYPE` is *always* empty, so the build system cannot assume it has any value.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:5382,expose,exposed,5382,https://root.cern,https://github.com/root-project/root/issues/8193,1,['expose'],['exposed']
Security,o kROOTD_RSAKEY in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 26: Left side of '||' is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 27: Assuming 'stat' is >= 1 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 28: Left side of '||' is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 29: Assuming 'stat' is <= 2 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 30: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1592; 31: Assuming 'gDebug' is <= 3 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1601; 32: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1601; 33: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:1608; 34: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1608; 35: 'needsalt' is 1 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1612; 36: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1612; 37: Calling 'TAuthenticate::SecureRecv' in /opt/root_src/net/auth/src/TAuthenticate.cxx:1615; 38: 'str' is non-null in /opt/root_src/net/auth/src/TAuthenticate.cxx:2874; 39: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2874; 40: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2878; 41: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2878; 42: Assuming 'gDebug' is <= 3 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 43: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 44: Assuming 'len' is not equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 45: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 46: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 47: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 48: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 49: Taking false branch in /opt/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:6870,Secur,SecureRecv,6870,https://root.cern,https://github.com/root-project/root/issues/7528,1,['Secur'],['SecureRecv']
Security,oam.cxx:325; 17: Calling 'PDEFoam::InitCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:343; 18: Field 'fCells' is equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 19: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:359; 20: Value assigned to field 'fCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:364; 21: Assuming field 'fCells' is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 22: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:365; 23: Assuming 'i' is >= field 'fNCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 24: Loop condition is false. Execution continues on line 377 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:369; 25: Calling 'PDEFoam::CellFill' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:377; 26: Assuming field 'fLastCe' is not equal to field 'fNCells' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:392; 27: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:392; 28: Array access (via field 'fCells') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:397; /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1233:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1221; 2: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1221; 3: Assuming 'h1' is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1227; 4: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1227; 5: Value assigned to 'h1' in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1228; 6: Assuming 'h1' is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1230; 7: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1230; 8: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1233; /opt/root_src/tmva/tmva/src/PDEFoam.cxx:1304:33: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:99005,access,access,99005,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,oduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:40393,secur,security,40393,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:44610,secur,security,44610,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:33628,secur,security,33628,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:39530,secur,security,39530,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with anal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:40185,secur,security,40185,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:43955,secur,security,43955,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:45265,secur,security,45265,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to func",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:45920,secur,security,45920,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:38875,secur,security,38875,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oes not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:43300,secur,security,43300,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:21406,secur,security,21406,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:6856,secur,security,6856,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"of `cling::evaluate` (underlying) seems to proliferate b/c of RDataFrame, it is also directly relevant to ROOT usage. The issue is that although names such as `TCling::Calc()` and `cling::evaluate` suggest these can be used for dynamic evaluation of C++ code, they are in fact not insulated one-offs of evaluating the code in some context. They introduce code and leak (they even leak beyond the basic introduction of more code). There also does not appear any alternative that does provide the one-off behavior that the name `Calc` suggests. Start on the ROOT side, with `TCling::Calc` (and `ProcessLine` etc.). If the Cling evaluation returns something non-void, a `cling::Value` is stored in `fTemporaries`, which is destroyed on application shutdown. This behavior means that a developer using these functions will see their code leak (and application crash if it runs out of memory), but leak checkers will report nothing. Pretty bad in itself, in particular since the developer can't do anything about it (there is no reset or access to `pop_back` on `fTemporaries`). A better implementation would transfer ownership responsibilities to the caller, if so desired. Also, the code only checks for `valRef.isVoid()`, whereas integer types with sizes smaller than that of `long` can be returned without a need to store the `cling::Value`. (Aside, the final cast to `long` rather than to e.g. `intptr_t` means that this code breaks many applications on Win64.). Next, `cling::evaluate` leaves a transaction behind. This is a good chunk of the leak, albeit not all. Using `unload(1)` one can get rid of the transaction, but there appears to be no way to indicate that the transaction should not be committed in the first place. The code also does not work with transaction RAIIs and there is no way to tell `evaluate` that the caller-side wants to take over the transaction. Finally, beyond temporaries and left-behind leaks, there is still another leak (in fact, the major part) unaccounted for that",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7201:1165,access,access,1165,https://root.cern,https://github.com/root-project/root/issues/7201,1,['access'],['access']
Security,of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /op,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:4919,secur,security,4919,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"oken.txt"").read().strip(); >>> ROOT.TFile.Open(url).ls(); TNetXNGFile**		root://eosuser.cern.ch//eos/user/c/cburr/hsimple.root	Demo ROOT file with histograms; TNetXNGFile*		root://eosuser.cern.ch//eos/user/c/cburr/hsimple.root	Demo ROOT file with histograms; KEY: TH1F	hpx;1	This is the px distribution; KEY: TH2F	hpxpy;1	py vs px; KEY: TProfile	hprof;1	Profile of pz versus px; KEY: TNtuple	ntuple;1	Demo ntuple; >>> df = ROOT.RDataFrame(""ntuple"", url); >>>; ```. ### Reproducer. On lxplus:. ```bash; $ source /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.32.04/x86_64-almalinux9.4-gcc114-opt/bin/thisroot.sh; $ cp /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.32.04/x86_64-almalinux9.4-gcc114-opt/tutorials/hsimple.root /eos/user/c/cburr/hsimple.root; $ EOS_MGM_URL=root://eoshome-c.cern.ch eos token --path /eos/user/c/cburr/hsimple.root --permission=rx --expires=$(date +%s -d ""30 minutes"") > token.txt; $ kdestroy; $ python3; ```. ```python; Python 3.9.18 (main, Aug 23 2024, 00:00:00); [GCC 11.4.1 20231218 (Red Hat 11.4.1-3)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> url = 'root://eosuser.cern.ch//eos/user/c/cburr/hsimple.root?xrd.wantprot=unix&authz=' + open(""token.txt"").read().strip(); >>> ROOT.TFile.Open(url).ls(); TNetXNGFile**		root://eosuser.cern.ch//eos/user/c/cburr/hsimple.root	Demo ROOT file with histograms; TNetXNGFile*		root://eosuser.cern.ch//eos/user/c/cburr/hsimple.root	Demo ROOT file with histograms; KEY: TH1F	hpx;1	This is the px distribution; KEY: TH2F	hpxpy;1	py vs px; KEY: TProfile	hprof;1	Profile of pz versus px; KEY: TNtuple	ntuple;1	Demo ntuple; >>> df = ROOT.RDataFrame(""ntuple"", url); Error in <TNetXNGSystem::GetDirEntry>: Unable to give access - user access restricted - unauthorized identity used ; Permission denied; *** Break *** segmentation violation; ```. ### ROOT version. 6.32.04. ### Installation method. sft.cern.ch. ### Operating system. Linux (lxplus). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475:2203,access,access,2203,https://root.cern,https://github.com/root-project/root/issues/16475,2,['access'],['access']
Security,"omas/ROOT/build/TBB-prefix/src/TBB/src/tbb/../../include/oneapi/tbb/detail/_utils.h:22,; from /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/address_waiter.cpp:17:; In member function ‘void std::__atomic_base<_IntTp>::store(__int_type, std::memory_order) [with _ITp = bool]’,; inlined from ‘void std::atomic<bool>::store(bool, std::memory_order)’ at /usr/include/c++/14/atomic:109:20,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all_relaxed() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:430:53,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:413:26,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::destroy() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:446:24,; inlined from ‘void tbb::detail::r1::clear_address_waiter_table()’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/address_waiter.cpp:60:40:; /usr/include/c++/14/bits/atomic_base.h:477:25: warning: ‘void __atomic_store_1(volatile void*, unsigned char, int)’ writing 1 byte into a region of size 0 overflows the destination [-Wstringop-overflow=]; 477 | __atomic_store_n(&_M_i, __i, int(__m));; | ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~; In function ‘void tbb::detail::r1::clear_address_waiter_table()’:; cc1plus: note: destination object is likely at address zero; gmake[4]: *** [CMakeFiles/Makefile2:134: src/tbb/CMakeFiles/tbb.dir/all] Error 2; gmake[3]: *** [Makefile:156: all] Error 2; ```. ### Reproducer. See above. ### ROOT version. ROOT master (October 11, 9 am CERN time), commit hash: 9f8c9ca67224c283652d5db45b81e66cb6aad8a9. ### Installation method. build from source. ### Operating system. Ubuntu 24.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16654:2711,hash,hash,2711,https://root.cern,https://github.com/root-project/root/issues/16654,1,['hash'],['hash']
Security,"on scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: ; ```. #ifndef _mwe_event_h; #define _mwe_event_h. #include ""TObject.h"" ; #include <array>. class MWEEvent ; {. public: ; MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly ; double get_foo(int i) const { return foo[i]; } . int iev; ; double bar; ; double foo[2]; ; virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);; }; ; ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.get_foo(0)); print (ev.get_foo(1)); ```. But if you try to access the array member directly (as used to work), it does not work:; ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.foo[0]); print (ev.foo[1]). ```. This results in . ```; python breaks.py ; 0; 0.9989327176093981 ; -0.43476438941434026 ; 0.7817962561955079 ; 0 ; 0.9989327176093981 ; *** Break *** segmentation violation; ; ; ; =========================================================== ; There was a crash. ; This is the entire stack trace of all threads: ; =========================================================== ; #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 ; #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 ; #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so; #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:1666,access,access,1666,https://root.cern,https://github.com/root-project/root/issues/6468,1,['access'],['access']
Security,oot_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:135; /opt/root_src/build/rmkdepend/pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:45006,secur,security,45006,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:17417,secur,security,17417,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:18207,secur,security,18207,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:18997,secur,security,18997,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-se,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:19787,secur,security,19787,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:20578,secur,security,20578,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:22797,secur,security,22797,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:23587,secur,security,23587,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:24377,secur,security,24377,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-se,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:25167,secur,security,25167,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:25958,secur,security,25958,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:28817,secur,security,28817,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:29607,secur,security,29607,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:30397,secur,security,30397,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:31187,secur,security,31187,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kULong_t:' at line 185 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_long' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:185; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:186:35: warning: Access to field 'u_longlong' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:68012,Access,Access,68012,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUShort_t:' at line 183 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_short' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:183; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:184:35: warning: Access to field 'u_int' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:64623,Access,Access,64623,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:25907,secur,security,25907,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,opt/root_src/tmva/tmva/src/Reader.cxx:406; /opt/root_src/tmva/tmva/src/Reader.cxx:443:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:432; 2: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:435; 3: Assuming 'method' is non-null in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 4: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 6: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 7: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:440; 8: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 10: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:443; /opt/root_src/tmva/tmva/src/Reader.cxx:535:22: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:519; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:519; 3: Value assigned to 'method' in /opt/root_src/tmva/tmva/src/Reader.cxx:526; 4: 'kl' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:528; 5: Assuming 'kl' is equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:530; 6: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:530; 7: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/Reader.cxx:535; /opt/root_src/tmva/tmva/src/Reader.cxx:584:22: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'Reader::EvaluateRegression' in /opt/root_src/tmva/tmva/src/Reader.cxx:617; 2: Assuming the condition is fals,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:114083,Access,Access,114083,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,opy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370:19: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370; /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:276:4: warning: Value stored to 'height1' is never read [clang-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:95401,secur,security,95401,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,opy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370:19: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370; /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:276:4: warning: Value stored to 'height1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'height1' is never read in /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:276; /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:277:4: warning: Value stored to 'width1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'width1' is never read in /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:277; /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2673:9: warning: Access to field 'fStatus' results in a dereference of a null pointer (loaded from field 'fActQue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:95977,secur,security,95977,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,opy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:115; /opt/root_src/core/base/src/TQConnection.cxx:186:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:186; /opt/root_src/core/base/src/TQObject.cxx:183:23: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQObject.cxx:183; /opt/root_src/core/base/src/TQObject.cxx:240:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQObject.cxx:240; /opt/root_src/core/base/src/TROOT.cxx:1169:75: warning: The right operand of '+' is a garbage value [clang-analyzer-core.UndefinedBin,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:111282,secur,security,111282,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,ort length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:27426,secur,security,27426,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:58128,secur,security,58128,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:26565,secur,security,26565,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:50896,secur,security,50896,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:51554,secur,security,51554,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11666; /opt/root_src/net/http/civetweb/civetweb.c:12186:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:52211,secur,security,52211,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:61415,secur,security,61415,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14262; /opt/root_src/net/http/civetweb/civetweb.c:14271:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:62072,secur,security,62072,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:64045,secur,security,64045,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ot provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14332; /opt/root_src/net/http/civetweb/civetweb.c:14337:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:64702,secur,security,64702,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"ot-project/root/issues/12718; * https://github.com/root-project/root/issues/7686; * https://github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/root/issues/11411; * https://github.com/root-project/root/issues/11596. ## Upstream contributions to cppyy in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:2739,validat,validate,2739,https://root.cern,https://github.com/root-project/root/pull/14507,1,['validat'],['validate']
Security,"ot_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:3619; #5 <signal handler called>; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::GenerateCXXGlobalVarDeclInitFunc (this=this; entry=0x7fffe1b042c0, Fn=0x55ed2cd76b78, D=0x55ed2ccd0f20, Addr=Addr; entry=0x55ed2cd76b08, PerformInit=PerformInit; entry=true) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:670; #15 0x00007f54c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:2826,Access,AccessType,2826,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,ot_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:41643,secur,security,41643,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,otherwise I encounter a crash due to a gGLManager=nullptr being accessed in line 1147,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8190:64,access,accessed,64,https://root.cern,https://github.com/root-project/root/pull/8190,1,['access'],['accessed']
Security,"ound Python3: /usr/bin/python3 (found suitable version ""3.11.6"", minimum required is ""3.0"") found components: Interpreter ; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 13.0.0; -- Not building amdgpu-arch: hsa-runtime64 not found; -- Building Cling as part of ROOT; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/include/c++/13:/usr/include/x86_64-linux-gnu/c++/13:/usr/include/c++/13/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-13'; -- Performing Test CXX_HAS_fno_rtti; ```. The last lines of this cmake were:; ```cmake; -- ROOT Configuration . System Linux-6.5.0-15-generic; Processor 2 core Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz (x86_64); Build type Release; Install path /home/<user>/root_install; Compiler GNU 13.2.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module ; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_ftgl builtin_gl2ps builtin_glew builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_vdt builtin_xrootd builtin_xxhash builtin_zstd clad dataframe gdml http imt mlp opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xrootd; -- Configuring done (28.0s); -- Generating done (3.2s); -- Build files have been written to: /home/<user>; ```. I tried to run `cmake --build . --target install` and ended up with. ```; CMake Error: The current CMakeCache.txt directory /home/<user>/root_build/CMakeCache.txt is different than the directory /home/<user> where CMakeCache.txt was created. This may result in binaries being created in the w",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479:3873,hash,hash-style,3873,https://root.cern,https://github.com/root-project/root/issues/14479,1,['hash'],['hash-style']
Security,oundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:27409,secur,security,27409,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:35786,secur,security,35786,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:36442,secur,security,36442,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,oundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:38409,secur,security,38409,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:186; /opt/root_src/core/base/src/TQObject.cxx:183:23: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQObject.cxx:183; /opt/root_src/core/base/src/TQObject.cxx:240:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQObject.cxx:240; /opt/root_src/core/base/src/TROOT.cxx:1169:75: warning: The right operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Assuming the condition is true in /opt/root_src/core/base/src/TROOT.cxx:3050; 2: expanded from macro 'gROOT' in /opt/root_src/core/base/inc/TROOT.h:406; 3: Taking true branch in /opt/root_src/core/base/src/TROOT.cxx:3050; 4: Calling 'TROOT::EndOfProcessCleanups' in /opt/root_src/core/base/src/TROOT.cxx:3051; 5: expanded from macro 'gROOT' in /opt/root_src/core/base/inc/TROOT.h:406; 6: Calling 'TROOT::CloseFiles' in /opt/root_src/core/base/src/TROOT.cxx:1207; 7: Assuming field 'fFiles' is null in /opt/root_src/core/base/src/TROOT.cxx:1127; 8:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:111852,secur,security,111852,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,ovides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:3688,secur,security,3688,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,"oving more Pythonization logic; into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:; ```python; import ROOT; import numpy as np. ROOT.gInterpreter.Declare(; """"""; template<class T>; void * MyGetAddress(T * b) {; return *(void**)b->GetAddress();; }; """"""; ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually; v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))); # using the Pythonization; v2 = getattr(tree, ""value2""); return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):; ROOT.gSystem.GetProcInfo(pinfo); print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:; def __init__(self, tree_name, new_file, src_file):; self.src_file = ROOT.TFile.Open(src_file); self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""); self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':; self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:; self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):; self.new_branches[name] = {}; self.new_branches[name][""f""] = f; self.new_branches[name][""name""] = name; self.new_branches[name][""value_type""] = value_type; self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(); self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):; nentries = self.src_tree.GetEntries(); for i in range(nentries):; # Get entry and make sure src_tree and new_tree are synced; self.src_tree.GetEntry(i); self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:; for branch_name, branch_dict in self.new_branches.items():; branch_dict[""value""].clear(); # self.new_tree; branch_dict[""f""](self.new_tree); # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all compu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15608:1839,access,access,1839,https://root.cern,https://github.com/root-project/root/pull/15608,1,['access'],['access']
Security,"oxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here; { return _M_h[std::move(__k)]; }; ^; /home/jhahnfel/ROOT/build/include/TTreeReader.h:264:15: note: in instantiation of member function 'std::unordered_map<std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> >, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > > >::operator[]' requested here; fProxies[bpName].reset(p);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:915:12: note: candidate function not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; void _M_rehash_aux(size_type __n, std::true_type);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:918:12: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; void _M_rehash_aux(size_type __n, std::false_type);; ^; Error: /home/jhahnfel/ROOT/build/bin/rootcling: compilation failure (/home/jhahnfel/ROOT/build/lib/libTreePlayer8033212c3f_dictUmbrella.h); ```; and; ```; FAILED: montecarlo/pythia8/G__EGPythia8.cxx lib/EGPythia8.pcm; [...]; In module 'std' imported from input_line_1:1:; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:601:2: error: no matching member function for call to '_M_move_assign'; _M_move_assign(std::move(__x), __bool_constant<__move_storage>(",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:3800,hash,hashtable,3800,https://root.cern,https://github.com/root-project/root/issues/8642,1,['hash'],['hashtable']
Security,parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4hc.c:1167; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1167; 9: 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4hc.c:1168; 10: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1168; 11: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1578:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1578; /opt/root_src/builtins/zstd/compress/fse_compress.c:226:47: warning: Branch condition evaluates to a garbage value [clang-analyzer-core.uninitialized.Branch]; 1: Calling 'FSE_compress2' in /opt/root_src/builtins/zstd/compress/fse_compress.c:701; 2: Taking false branch in /opt/root_src/builtins/zstd/compress/fse_compress.c:695; 3: Calling 'FSE_compress_wksp' in /opt/root_src/builtins/zstd/compress/fse_compress.c:696; 4: 'tableLog' is <= 12 in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:65991,secur,security,65991,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"peName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855; 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138; 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373; 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423; 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588; 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704; 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81; 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884; 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110; 21 rootcling_stage1 0x000000010c964389 RootCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:2366,Access,AccessSpecifier,2366,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Access'],['AccessSpecifier']
Security,"penat(AT_FDCWD, ; 243 readlink(; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95832, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95834, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95838, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95840, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; ```; ```; time python -c ""import ROOT"". real	0m0.447s; user	0m0.317s; sys	0m0.130s; ```. Compared with current master which shows; ```; strace -e file python -c 'import ROOT' 2>&1 | awk -v FS='""' '{ print $1 }' | sort | uniq -c; 206 access(; 2 chdir(; 1 execve(; 1 +++ exited with 0 +++; 181 getcwd(; 2 newfstatat(0, ; 2 newfstatat(1, ; 2 newfstatat(2, ; 532 newfstatat(3, ; 29 newfstatat(4, ; 10123 newfstatat(AT_FDCWD, ; 546 openat(AT_FDCWD, ; 843 readlink(; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95944, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95946, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95950, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; ```; And; ```; time python -c ""import ROOT"". real	0m0.779s; user	0m0.572s; sys	0m0.203s; ```. That is a factor ~3 reduction in `newfstatat` calls and >40% improved speed for `import ROOT`. One of the main motivators is the presence of spurious paths in .pcm files, which are then traversed when loading the library. For example, taken a ROOT sourced from the install directory, I see; ```; $: strings lib/Core.pcm | grep rootbuild; /home/vpadulan/programs/rootproject/rootbuild/master-fbd6abb371-release/include; /home/vpadulan/programs/rootproject/rootbuild/master-fbd6abb371-release/core/<<< cling interactive line includer >>>; /home/vpadulan/program",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14296:1631,access,access,1631,https://root.cern,https://github.com/root-project/root/issues/14296,1,['access'],['access']
Security,"pilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>; runtime_error: ; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>; runtime_error: ; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state.; ```. ### Expected behavior. Expected behavior that identical branch names don't interfere as they accessed with different tree aliases `cluster.vec` and `vertex.vec` and should be distinguished with the following output:. ```; 10.0; 20.0; 30.0; ```. ### Setup; 1. ROOT version 6.22/00 from /cvmfs/sft.cern.ch/lcg/views/LCG_98python3/x86_64-centos7-gcc9-opt/bin/root; 2. OS: RedHat CentOS 7.9.2009; 3. Python 3.7.6 from /cvmfs/sft.cern.ch/lcg/views/LCG_98python3/x86_64-centos7-gcc9-opt/bin/python. ### Additional context; 1) **With** Cluster tree attached as a friend `df.GetColumnType(""vertex.vec"")` yields :; ```; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>; ```. 2) **Without** Cluster tree attached as a friend `df.GetColumnType(""vertex.vec"")` yields :; ```; ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944:5733,access,accessed,5733,https://root.cern,https://github.com/root-project/root/issues/6944,1,['access'],['accessed']
Security,"place in the existing memory buffers). For example - primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:. * A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; * A TTreeReader-like interface, TTreeReaderFast. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize and apply user code, rather than two.; * The intent is that this interface can be extended in the future and used by TDataFrame, provided we can make TDataFrame sufficiently fast.; * A Python-based numpy export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; * The numpy interface is low-level for Python; we intend to further explore the ideal high-level interface through projects such as https://github.com/diana-hep/plur. (With many thanks to @jpivarski for driving this work home with his work on a python interface!)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519:2097,expose,exposes,2097,https://root.cern,https://github.com/root-project/root/pull/2519,2,"['access', 'expose']","['access', 'exposes']"
Security,pport length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:63765,secur,security,63765,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,pport length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:42834,secur,security,42834,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:57471,secur,security,57471,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17916; /opt/root_src/net/http/civetweb/civetweb.c:17939:29: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]; 1: Calling 'master_thread_run' in /opt/root_src/net/http/civetweb/civetweb.c:18156; 2: Assuming 'ctx' is non-null in /opt/root_src/net/http/civetweb/civetweb.c:18021; 3: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:18021; 4: Assuming field 'init_thread' is null in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:69962,secur,security,69962,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:318; /opt/root_src/build/rmkdepend/main.c:256:30: warning: The left operand of '+' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 2: Assuming 'argc' is equal to 2 in /opt/root_src/build/rmkdepend/main.c:176; 3: Left side of '&&' is true in /op,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:4183,secur,security,4183,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,pt/root_src/build/rmkdepend/parse.c:345; 30: 'sp' is equal to NULL in /opt/root_src/build/rmkdepend/parse.c:376; 31: Taking false branch in /opt/root_src/build/rmkdepend/parse.c:376; 32: 'sp' is <= 'dest' in /opt/root_src/build/rmkdepend/parse.c:384; 33: Loop condition is false. Execution continues on line 388 in /opt/root_src/build/rmkdepend/parse.c:384; 34: Value assigned to 'stab' in /opt/root_src/build/rmkdepend/parse.c:388; 35: Assuming 'stab' is equal to NULL in /opt/root_src/build/rmkdepend/parse.c:389; 36: Taking true branch in /opt/root_src/build/rmkdepend/parse.c:389; 37: Access to field 's_name' results in a dereference of a null pointer (loaded from variable 'stab') in /opt/root_src/build/rmkdepend/parse.c:392; /opt/root_src/build/rmkdepend/pr.c:108:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:108; /opt/root_src/build/rmkdepend/pr.c:119:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:119; /opt/root_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:43116,secur,security,43116,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,pt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security chec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:36017,secur,security,36017,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,pt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security che,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:37461,secur,security,37461,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,py functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:689; /opt/root_src/core/unix/src/TUnixSystem.cxx:4246:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to functi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:4326,secur,security,4326,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,py' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:60730,secur,security,60730,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,py' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:40005,secur,security,40005,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,py' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:700; /opt/root_src/core/zip/src/ZInflate.c:707:27: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Calling 'R__Inflate_block' in /opt/root_src/core/zip/src/ZInflate.c:1075; 2: Loop condition is true. Entering loop body in /opt/root_src/core/zip/src/ZInflate.c:1019; 3: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 4: Assuming the condition is false in /opt/root_src/core/zip/src/ZIn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:8143,secur,security,8143,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,py'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:41990,secur,security,41990,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"r()(fair::mq::State) (this=<optimized out>, args#0=<optimized out>, args#0; entry=fair::mq::State::Running) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/boost/v1.75.0-local8/include/boost/signals2/detail/signal_template.hpp:243; #34 0x00007ff44acb0620 in boost::signals2::signal<void (fair::mq::State), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void (fair::mq::State)>, boost::function<void (boost::signals2::connection const&, fair::mq::State)>, boost::signals2::mutex>::operator()(fair::mq::State) const (args#0=fair::mq::State::Running, this=0x162f300) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/boost/v1.75.0-local8/include/boost/smart_ptr/shared_ptr.hpp:720; #35 fair::mq::fsm::Machine_::CallStateHandler (state=fair::mq::State::Running, this=0x162f270) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/StateMachine.cxx:157; #36 fair::mq::fsm::Machine_::ProcessWork (this=this; entry=0x162f270) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/StateMachine.cxx:205; #37 0x00007ff44aca5969 in fair::mq::StateMachine::ProcessWork (this=0x162d700) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/StateMachine.cxx:373; #38 0x00007ff44b1fc227 in FairMQDevice::RunStateMachine (this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/FairMQDevice.h:364; #39 fair::mq::DeviceRunner::Run (this=this; entry=0x7ffe775d7520) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/DeviceRunner.cxx:182; #40 0x0000000000426a0a in main (argc=<optimized out>, argv=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/FairMQ/v1.4.40-local2/include/fairmq/runFairMQDevice.h:51; ===========================================================; ```. For the record (not publicly accessible) ALICE bug reports:. * https://alice.its.cern.ch/jira/browse/O2-2372; * https://alice.its.cern.ch/jira/browse/O2-2532",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:52712,access,accessible,52712,https://root.cern,https://github.com/root-project/root/issues/8931,1,['access'],['accessible']
Security,"r, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500; #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:6326,hash,hash,6326,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],"['hash', 'hashtable']"
Security,"r, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500; #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:17179,hash,hash,17179,https://root.cern,https://github.com/root-project/root/issues/12023,4,['hash'],"['hash', 'hashtable']"
Security,"r, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984; #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006; #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500; #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:16315,hash,hash,16315,https://root.cern,https://github.com/root-project/root/issues/12023,4,['hash'],"['hash', 'hashtable']"
Security,r. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:671; /opt/root_src/gui/gui/src/TGText.cxx:1106:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:1106; /opt/root_src/gui/gui/src/TGTextEdit.cxx:504:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGTextEdit.cxx:504; /opt/root_src/gui/gui/src/TGTextEdit.cxx:1873:10: warning: Value stored to 'len' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'len' is never read in /opt/root_src/gui/gui/src/TGTextEdit.cxx:1873; /opt/root_src/gui/gui/src/TGTextEditDialogs.cxx:55:1: warning: non-POD static (TString) [clazy-non-pod-global-static]; /opt/root_src/gui/gui/src/TGTextEntry.cxx:1608:10: warning: Value stored to 'charWidth' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'charWidth' is never read in /opt/root_src/gui/gui/src/TGTextEntry.cxx:1608; /opt/root_src/gui/gui/src/TGTextEntry.cxx:1619:10: warning: Value stored to 'charWidth' is never read [clang-analyzer-deadcode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:57231,secur,security,57231,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"r::FitFCN` is https://github.com/cms-sw/cmssw/blob/6d2f66057131baacc2fcbdd203588c41c885b42c/RecoPPS/ProtonReconstruction/src/ProtonReconstructionAlgorithm.cc#L269-L281. FYI @[iarspider](https://github.com/iarspider). [a]; ```; #0 0x00002aac70829ae1 in poll () from /lib64/libc.so.6; #1 0x00002aac78b8872f in full_read.constprop () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #2 0x00002aac78b890bc in edm::service::InitRootHandlers::stacktraceFromThread() () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 0x00002aac78b8ba0b in sig_dostack_then_abort () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #4 <signal handler called>; #5 __cxxabiv1::(anonymous namespace)::adjust_pointer<void> (offset=<error reading variable: Cannot access memory at address 0xfffffffffffffff0>, base=0x7ffc4c62b5b0) at ../../../../libstdc++-v3/libsupc++/tinfo.h:65; #6 __cxxabiv1::__dynamic_cast (src_ptr=0x7ffc4c62b5b0, src_type=0x2aac6e5a6df0 <typeinfo for ROOT::Math::IBaseFunctionMultiDimTempl<double>>, dst_type=0x2aac6e5a69f0 <typeinfo for ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData>>, src2dst=0) at ../../../../libstdc++-v3/libsupc++/dyncast.cc:55; #7 0x00002aac6e40b2d0 in ROOT::Fit::Fitter::GetDataFromFCN<ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData> > (this=0x2aacc8992140) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-c963ca4826d5b69bf3ff29bd97e3fad4/root-6.27.01/math/mathcore/inc/Fit/Fitter.h:560; #8 0x00002aac6e407b8e in ROOT::Fit::Fitter::ExamineFCN (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10732:1443,access,access,1443,https://root.cern,https://github.com/root-project/root/issues/10732,1,['access'],['access']
Security,"r]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=2, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData offset= 32 type=300 ,stl=1, ctype=61, internal CalArrays; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Pad subset granularity; [1965517:tpc-tracker]: i= 0, mName type=300, offset= 0, len=1, method=0; [1965517:tpc-tracker]: i= 1, mData type=300, offset= 32, len=1, method=0; [1965517:tpc-tracker]: i= 2, mPadSubset type= 3, offset= 56, len=1, method=0; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=1, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData offset= 32 type=300 ,stl=1, ctype=61, internal CalArrays; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Pad subset granularity; [1965517:tpc-tracker]: i= 0, mName type=300, offset= 0, len=1, method=0; [1965517:tpc-tracker]: i= 1, mData type=300, offset= 32, len=1, method=0; [1965517:tpc-tracker]: i= 2, mPadSubset type= 3, offset= 56, len=1, method=0; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: ====>Rebuilding TStreamerInfo for class: o2::tpc::CalArray<o2::tpc::PadFlags>, version: 1; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalArray<o2::tpc::PadFlags>, version=1, checksum=0xb03d18c2; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365,; [1965517:tpc-tracker]: vector<o2::tpc::PadFlags> mData offset= 32 type=300 ,stl=1, ctype=3, calibration data; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Subset type; [1965517:tpc-tracker]: int mPadSubsetNumber offset= 60 type= 3 Number of the pad subset, e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:2637,checksum,checksum,2637,https://root.cern,https://github.com/root-project/root/issues/16312,1,['checksum'],['checksum']
Security,rame.cxx:37; 2: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:37; 3: Assuming 'pname' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 4: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 5: Value assigned to field 'fImage' in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:49; 6: Assuming field 'fImage' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 7: Left side of '||' is true in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 8: Called C++ object pointer is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53; /opt/root_src/gui/gui/src/TGSpeedo.cxx:462:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:462; /opt/root_src/gui/gui/src/TGSpeedo.cxx:470:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:470; /opt/root_src/gui/gui/src/TGSplitFrame.cxx:260:15: warning: Access to field 'fSplitTool' results in a dereference of a null pointer [clang-analyzer-core.NullDereference]; 1: Assuming field 'fFrame' is null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 2: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 3: Calling 'TGSplitFrame::SplitVertical' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:595; 4: Field 'fFrame' is null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:605; 5: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:605; 6: Calling 'TGSplitFrame::VSplit' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:621; 7: Assuming field 'fSplitter' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 8: Left side of '||' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:50597,secur,security,50597,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,rc/Rotated.cxx:396; 110: 'align' is not equal to MLEFT in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 111: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 112: 'align' is not equal to BLEFT in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 113: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 114: 'align' is equal to NONE in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 115: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:396; 116: 'bg' is 1 in /opt/root_src/graf2d/x11/src/Rotated.cxx:412; 117: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:412; 118: Assuming 'xpoints' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:419; 119: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:419; 120: Potential leak of memory pointed to by 'item' in /opt/root_src/graf2d/x11/src/Rotated.cxx:419; /opt/root_src/graf2d/x11/src/Rotated.cxx:1205:18: warning: Access to field 'fNext' results in a dereference of a null pointer (loaded from variable 'last') [clang-analyzer-core.NullDereference]; 1: Calling 'XRotPaintAlignedString' in /opt/root_src/graf2d/x11/src/Rotated.cxx:328; 2: Assuming 'text' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:349; 3: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:349; 4: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:351; 5: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:351; 6: Loop condition is false. Execution continues on line 356 in /opt/root_src/graf2d/x11/src/Rotated.cxx:354; 7: Loop condition is false. Execution continues on line 358 in /opt/root_src/graf2d/x11/src/Rotated.cxx:356; 8: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:361; 9: Left side of '&&' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:361; 10: Calling 'XRotRetrieveFromCache' in /opt/root_src/graf2d/x11/src/Rotated.cxx:366; 11: Assuming the condition is false in /opt/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:91688,Access,Access,91688,https://root.cern,https://github.com/root-project/root/issues/7432,1,['Access'],['Access']
Security,rc/TROOT.cxx:1167; 23: expanded from macro 'gInterpreter' in /opt/root_src/core/meta/inc/TInterpreter.h:560; 24: Returning without writing to '*' in /opt/root_src/core/meta/inc/TInterpreter.h:391; 25: Returning from 'TInterpreter::CallFunc_SetFuncProto' in /opt/root_src/core/base/src/TROOT.cxx:1167; 26: expanded from macro 'gInterpreter' in /opt/root_src/core/meta/inc/TInterpreter.h:560; 27: Assuming the condition is true in /opt/root_src/core/base/src/TROOT.cxx:1168; 28: expanded from macro 'gInterpreter' in /opt/root_src/core/meta/inc/TInterpreter.h:560; 29: Taking true branch in /opt/root_src/core/base/src/TROOT.cxx:1168; 30: The right operand of '+' is a garbage value in /opt/root_src/core/base/src/TROOT.cxx:1169; /opt/root_src/core/base/src/TRegexp.cxx:172:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TRegexp.cxx:172; /opt/root_src/core/base/src/TRegexp.cxx:188:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TRegexp.cxx:188; /opt/root_src/core/base/src/TRegexp.cxx:273:11: warning: 3rd function call argument is an uninitialized value [clang-analyzer-core.CallA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:115066,secur,security,115066,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,rc/core/clib/res/Demangle.h:58; 46: Left side of '||' is true in /opt/root_src/core/clib/src/Demangle.c:1311; 47: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:1311; 48: expanded from macro 'isdigit' in /usr/include/ctype.h:192; 49: expanded from macro '__isctype' in /usr/include/ctype.h:89; 50: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:1311; 51: Value assigned to 'mangled' in /opt/root_src/core/clib/src/Demangle.c:1314; 52: Calling 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 53: Assuming 's' is equal to NULL in /opt/root_src/core/clib/src/Demangle.c:2679; 54: Left side of '||' is true in /opt/root_src/core/clib/src/Demangle.c:2679; 55: Returning from 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 56: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/clib/src/Demangle.c:1316; /opt/root_src/core/clib/src/Demangle.c:1528:10: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:1528; /opt/root_src/core/clib/src/Demangle.c:1910:34: warning: Array access (via field 'typevec') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:12872,secur,security,12872,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,rc/graf2d/mathtext/src/fontembed.cxx:993:50: warning: Value stored to 'priority' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'priority' is never read in /opt/root_src/graf2d/mathtext/src/fontembed.cxx:993; /opt/root_src/graf2d/mathtext/src/fontembed.cxx:997:50: warning: Value stored to 'priority' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'priority' is never read in /opt/root_src/graf2d/mathtext/src/fontembed.cxx:997; /opt/root_src/graf2d/mathtext/src/fontembed.cxx:1001:50: warning: Value stored to 'priority' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'priority' is never read in /opt/root_src/graf2d/mathtext/src/fontembed.cxx:1001; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1832:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1832; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1851:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1851; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1877:7: warning: Value stored to 'dxwn' is never read [clang-analyzer-dead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:66082,secur,security,66082,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,rc/math/mathcore/inc/Fit/FitUtil.h:136; 36: Returning from constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 39: Passing null pointer value via 2nd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 40: Calling 'IntegralEvaluator::operator()' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 41: Field 'fIg1Dim' is non-null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 42: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 43: Dereference of null pointer (loaded from variable 'x2') in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:208; /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:213:22: warning: Array access (from variable 'x2') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fIntegral' is true in /opt/root_src/math/mathcore/src/FitUtil.cxx:1273; 2: Left side of '&&' is true in /opt/root_src/math/mathcore/src/FitUtil.cxx:1273; 3: Assuming field 'fBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1274; 4: Left side of '&&' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1274; 5: 'x2' initialized to a null pointer value in /opt/root_src/math/mathcore/src/FitUtil.cxx:1278; 6: 'useBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1282; 7: Taking false branch in /opt/root_src/math/mathcore/src/FitUtil.cxx:1282; 8: 'useBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1294; 9: '?' condition is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1294; 10: 'useBinIntegral' is true in /opt/root_src/math/mathcore/src/FitUtil.cxx:1296; 11: Taking false branch in /opt/root_src/math/mathcore/src/FitUtil.cxx:1296; 12: 'u,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:8592,access,access,8592,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,rcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary chec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:5365,secur,security,5365,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,rd. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:41454,secur,security,41454,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"re suffix; - [x] document important things with doxygen; - [x] remove commented out code and TODOs and other junk; - [x] fix copyright headers + author lists (RooFitZMQ: me, Roel; MP: me, Inti, Vince); - [ ] rebase in 2-3 neat commits that all compile and pass tests; - [x] clang-tidy up; - [x] change libzmq builtin back to master after PR is merged: https://github.com/zeromq/libzmq/pull/4266; - [ ] ~use `enum class` instead of template parameters for minimizer function implementation choice~ -> next PR. _Edit 18 Nov 2021:_ the following list is to keep track of unaddressed (at time of writing) comments made in this thread (because the thread is so long that it is very inconvenient to navigate on GitHub which doesn't load it all at once):; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-773656413: only need to rebase, but that is already listed above. ; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-790026907: we have to double check whether the build issues still exist. They should be gone, because we don't build dictionaries anymore.; - [x] https://github.com/root-project/root/pull/9078#discussion_r736998615: Related to the issue above, iiuc, because the include was missing from the dictionary, so this can probably also be marked resolved now.; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-791797535: change `inc` to `res` in RooFitZMQ and MultiProcess and only include these zmq header exposing include directories to specific targets that need them using `target_include_directories`. This way, we don't transitively expose zmq includes to ROOT users.; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-791786326: The above solution also circumvents this issue with `ZMQ_ENABLE_DRAFT` preprocessor defines.; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-791883192: change copyright/license headers. Let me know if you find additional items for the todo list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078:3740,expose,expose,3740,https://root.cern,https://github.com/root-project/root/pull/9078,1,['expose'],['expose']
Security,"re"", ""new_jersey"",; ""new_mexico"", ""new_york"", ""north_carolina"", ""north_dakota"",; ""ohio"", ""oklahoma"", ""oregon"", ""pennsylvania"",; ""rhode_island"", ""south_carolina"", ""south_dakota"", ""tennessee"",; ""texas"", ""utah"", ""vermont"", ""virginia"",; ""washington"", ""west_virginia"", ""wisconsin"", ""wyoming""; };; Double_t pop[nx] = {; 4708708, 6595778, 2889450, 36961664, 5024748, 3518288, 885122, 18537969,; 9829211, 1545801, 12910409, 6423113, 3007856, 2818747, 4314113, 4492076,; 1318301, 5699478, 6593587, 9969727, 5266214, 2951996, 5987580, 974989,; 1796619, 2643085, 1324575, 8707739, 2009671, 19541453, 9380884, 646844,; 11542645, 3687050, 3825657, 12604767, 1053209, 4561242, 812383, 6296254,; 24782302, 2784572, 621760, 7882590, 6664195, 1819777, 5654774, 544270; };. Double_t lon1 = -130;; Double_t lon2 = -65;; Double_t lat1 = 24;; Double_t lat2 = 50;; TH2Poly *p = new TH2Poly(""USA"",""USA Population"",lon1,lon2,lat1,lat2);; gErrorIgnoreLevel = 9999;; TFile::SetCacheFileDir(""."");; TFile *f = TFile::Open(""http://root.cern/files/usa.root"", ""CACHEREAD"");. if (!f) {; printf(""Cannot access usa.root. Is internet working ?\n"");; return;; }. // Define the TH2Poly bins.; TMultiGraph *mg;; TKey *key;; TIter nextkey(gDirectory->GetListOfKeys());; while ((key = (TKey*)nextkey())) {; TObject *obj = key->ReadObj();; if (obj->InheritsFrom(""TMultiGraph"")) {; mg = (TMultiGraph*)obj;; p->AddBin(mg);; }; }. // Fill TH2Poly.; printf(""nx = %d\n"",nx);; for (i=0; i<nx; i++) {; printf(""%s %f\n"",states[i], pop[i]); // commenting this line make it fail; p->Fill(states[i], pop[i]);; }. gStyle->SetOptStat(11);; p->DrawClone(""COL"");; }; ```. When the macro is run in compiled mode it is fine. The histogram has 48 entries. ```; root sg50b.C++; ```. When it is run in interpreted mode it is fine if we keep the `printf` in the filling loop but it is failing if we comment it.; In that case only one bin is filled. The number of entries is 1 instead of 48. ### ROOT version. Master. ### Operating system. MacOS - Intel Processor",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14598:1798,access,access,1798,https://root.cern,https://github.com/root-project/root/issues/14598,1,['access'],['access']
Security,read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'priority' is never read in /opt/root_src/graf2d/mathtext/src/fontembed.cxx:1001; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1832:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1832; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1851:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1851; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1877:7: warning: Value stored to 'dxwn' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dxwn' is never read in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1877; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1878:7: warning: Value stored to 'dywn' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dywn' is never read in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1878; /opt/root_src/graf2d/postscript/src/TPDF.cxx:1887:10: warning: Value stored to 'yncm' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'yncm' is never read in /opt/root_src/graf2d/postscript/src/TPDF.cxx:1887; /opt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:66661,secur,security,66661,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,rence]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 3: Calling 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:403; 11: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:404; 12: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:404; 13: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:406; /opt/root_src/tmva/tmva/src/Reader.cxx:443:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:432; 2: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:435; 3: Assuming 'method' is non-null in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 4: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:437; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 6: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:439; 7: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:440; 8: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:441; 10: Access to field 'fDat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:113036,Access,Access,113036,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,"ressions. I discarded that because of two reasons:; - They are more costly that simple string comparison.; - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128:3849,inject,injected,3849,https://root.cern,https://github.com/root-project/root/pull/9128,2,"['access', 'inject']","['access', 'injected']"
Security,rguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:64366,secur,security,64366,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,rncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:24956,secur,security,24956,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,rning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:505; /opt/root_src/core/clib/src/Demangle.c:1316:22: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:507; 6: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:507; 7: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:519; 8: expanded from macro 'AUTO_DEMANGLING' in /op,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:7956,secur,security,7956,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,roduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: war,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:36216,secur,security,36216,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,roduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: w,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:37660,secur,security,37660,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"roject/root/blob/1dbb35307ed55a1017b4620eb15f2aa22bd8514f/tree/ntuple/v7/src/RField.cxx#L2935 (also make sure to `#include <TVirtualStreamerInfo.h>:; ```cpp; if (fClass->GetDataMember(""first"") == nullptr || fClass->GetDataMember(""second"") == nullptr) {; std::cerr << ""The TClass for "" << GetType() << "" is in state: "" << fClass->GetState() << "" and has: \n"";; fClass->GetListOfDataMembers()->ls();; fClass->GetStreamerInfo()->ls();; throw RException(R__FAIL(""Insufficient information for "" + GetType()));; }; ```; ## Observed output; ### From the snippet added above:; ```; The TClass for std::pair<char,std::int64_t> is in state: 2 and has: ; OBJ: TListOfDataMembers	TListOfDataMembers	List of TDataMembers for a class : 0. StreamerInfo for class: pair<char,long>, checksum=0xb5fb752; char first offset= 0 type= 1 Emulation ; long second offset= 8 type= 4 Emulation ; i= 0, first type= 1, offset= 0, len=1, method=0; i= 1, second type= 4, offset= 8, len=1, method=0; unknown file: Failure; C++ exception with description ""Insufficient information for std::pair<char,std::int64_t>; ```; ### Stack trace from GDB; (When the above snippet is not included); ```; #0 0x00007ffff730c6fe in TDataMember::GetOffset (this=0x0) at /home/florine/cern/root/src/core/meta/src/TDataMember.cxx:445; #1 0x00007ffff7d2a7c6 in ROOT::Experimental::RPairField::RPairField (this=0x26dc5d0, fieldName=..., itemFields=...); at /home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:2936; #2 0x00007ffff7d3181f in std::make_unique<ROOT::Experimental::RPairField, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::array<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase, std::default_delete<ROOT::Experimental::Detail::RFieldBase> >, 2ul>&> () at /usr/include/c++/13/bits/unique_ptr.h:1070; #3 ROOT::Experimental::Detail::RFieldBase::Create (fieldName=""_0"", canonicalType=""std::pair<char,std::int64_t>"", ; typeAlias=""std::pair<char,std::int64_t>"") at /home/florine/cern/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14084:2172,checksum,checksum,2172,https://root.cern,https://github.com/root-project/root/issues/14084,1,['checksum'],['checksum']
Security,root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-ana,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:31981,secur,security,31981,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,root_src/builtins/lz4/lz4frame.c:1311; 40: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1322; 41: Left side of '&&' is false in /opt/root_src/builtins/lz4/lz4frame.c:1322; 42: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1329; 43: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking true branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1344; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1344; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1357:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:47642,secur,security,47642,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,root_src/gui/gui/src/TGListTree.cxx:1528; /opt/root_src/gui/gui/src/TGListTree.cxx:1531:7: warning: Value stored to 'yline' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'yline' is never read in /opt/root_src/gui/gui/src/TGListTree.cxx:1531; /opt/root_src/gui/gui/src/TGListView.cxx:854:7: warning: Value stored to 'select_frame' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'select_frame' is never read in /opt/root_src/gui/gui/src/TGListView.cxx:854; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:311:7: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:311; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:439:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:439; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449:7: warning: Call to function 'strcpy' is insecure as it does not provide boun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:46087,secur,security,46087,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"rootcling performs an integrity check on the headers that are passed; via the command line and the ones we have in the modulemap. As this; check currently fails because we had to split up the Core and Thread,; we signal with a `use` directive that these other modules belong to; the current module. The `use` directive is usually only for signalling that we intend; to use this other module from our module, but as we anyway don't; use `-fmodules-decluse` in ROOT we can just reuse this for telling; rootcling that it should also check the split out submodules when; doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split; out of `Thread` to fix a cycle between `Core` and `Thread`.; However, rootcling now doesn't see the ThreadLocalStorage headers; in the `Thread` module but we pass them to the rootcling invocation; for `Thread`. This adds a `use ThreadLocalStorage` to Thread and; lets rootcling also iterate all `use`'d other modules when doing; this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1458:22,integrity,integrity,22,https://root.cern,https://github.com/root-project/root/pull/1458,2,['integrity'],['integrity']
Security,"round the buggy address:; 0x0c0c8001a4f0: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a500: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; 0x0c0c8001a510: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd; 0x0c0c8001a520: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fa; 0x0c0c8001a530: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa; =>0x0c0c8001a540: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd; 0x0c0c8001a550: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a560: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; 0x0c0c8001a570: fd fd fd fd fd fd fd fd fa fa fa fa 00 00 00 00; 0x0c0c8001a580: 00 00 00 00 fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a590: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; Shadow gap: cc; ==934566==ABORTING; ```. ### Expected behavior. Expected behavior is for ROOT to realize the branch address has been changed to nullptr and create an internal buffer, not read from the freed memory area. Interestingly it doesn't seem to have a problem without calling `SetAddress` as it then realizes it points to nullptr and will create a new object and modify `f`. ### To Reproduce. Run the above with ROOT compiled with `-Dasan=ON`. ### Setup. * ROOT 6.24.0; * GCC 10.2; * Ubuntu 18.04. ### Additional context. We didn't see this with ROOT 6.20 but I also did not specifically test it with address sanitizer so it might have been there already and just not cause any problems. <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027:5050,sanitiz,sanitizer,5050,https://root.cern,https://github.com/root-project/root/issues/8027,1,['sanitiz'],['sanitizer']
Security,rue in /opt/root_src/core/clib/src/Demangle.c:1311; 48: expanded from macro 'isdigit' in /usr/include/ctype.h:192; 49: expanded from macro '__isctype' in /usr/include/ctype.h:89; 50: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:1311; 51: Value assigned to 'mangled' in /opt/root_src/core/clib/src/Demangle.c:1314; 52: Calling 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 53: Assuming 's' is equal to NULL in /opt/root_src/core/clib/src/Demangle.c:2679; 54: Left side of '||' is true in /opt/root_src/core/clib/src/Demangle.c:2679; 55: Returning from 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 56: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/clib/src/Demangle.c:1316; /opt/root_src/core/clib/src/Demangle.c:1528:10: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:1528; /opt/root_src/core/clib/src/Demangle.c:1910:34: warning: Array access (via field 'typevec') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Null pointer value stored to field 'typevec' in /opt/root_src/core/clib/src/Demangle.c:505; 6: Assumin,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:13062,secur,security,13062,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,ry checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12234; /opt/root_src/net/http/civetweb/civetweb.c:12278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:57001,secur,security,57001,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:22894,secur,security,22894,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17184; /opt/root_src/net/http/civetweb/civetweb.c:17324:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:69492,secur,security,69492,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11591; /opt/root_src/net/http/civetweb/civetweb.c:11602:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:51085,secur,security,51085,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11602; /opt/root_src/net/http/civetweb/civetweb.c:11609:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11609; /opt/root_src/net/http/civetweb/civetweb.c:11610:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11610; /opt/root_src/net/http/civetweb/civetweb.c:11666:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:51743,secur,security,51743,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12834; /opt/root_src/net/http/civetweb/civetweb.c:12835:11: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12835; /opt/root_src/net/http/civetweb/civetweb.c:12859:29: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12859; /opt/root_src/net/http/civetweb/civetweb.c:14262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:61604,secur,security,61604,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14271; /opt/root_src/net/http/civetweb/civetweb.c:14291:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14291; /opt/root_src/net/http/civetweb/civetweb.c:14308:13: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:14308; /opt/root_src/net/http/civetweb/civetweb.c:14332:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:64234,secur,security,64234,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ry checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provide,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:23857,secur,security,23857,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"r~ilp64+locking+pic+shared symbol_suffix=none threads=none arch=darwin-monterey-m1; [+] ^perl@5.30.3%apple-clang@13.1.6~cpanm+shared+threads arch=darwin-monterey-m1; [+] ^pcre@8.45%apple-clang@13.1.6~jit+multibyte+utf arch=darwin-monterey-m1; [+] ^python@3.9.13%apple-clang@13.1.6+bz2+ctypes+dbm~debug+libxml2+lzma~nis~optimizations+pic+pyexpat+pythoncmd+readline+shared+sqlite3+ssl~tix~tkinter~ucs4+uuid+zlib patches=0d98e93,4c24573,f2fd060 arch=darwin-monterey-m1; [+] ^apple-libuuid@1353.100.2%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^expat@2.4.8%apple-clang@13.1.6~libbsd arch=darwin-monterey-m1; [+] ^gdbm@1.23%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^readline@8.1.2%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^gettext@0.21%apple-clang@13.1.6+bzip2+curses+git~libunistring+libxml2+tar+xz arch=darwin-monterey-m1; [+] ^libffi@3.4.2%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^openssl@1.1.1q%apple-clang@13.1.6~docs~shared certs=mozilla patches=3fdcf2d arch=darwin-monterey-m1; [+] ^ca-certificates-mozilla@2022-07-19%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^sqlite@3.39.2%apple-clang@13.1.6+column_metadata+dynamic_extensions+fts~functions+rtree arch=darwin-monterey-m1; [+] ^unuran@1.8.1%apple-clang@13.1.6~gsl+rngstreams+shared arch=darwin-monterey-m1; [+] ^rngstreams@1.0.1%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^vdt@0.4.3%apple-clang@13.1.6~ipo~preload build_type=RelWithDebInfo arch=darwin-monterey-m1; [+] ^python@3.9.13%apple-clang@13.1.6+bz2+ctypes+dbm~debug+libxml2+lzma~nis~optimizations+pic+pyexpat+pythoncmd+readline+shared+sqlite3+ssl~tix~tkinter~ucs4+uuid+zlib patches=0d98e93,4c24573,f2fd060 arch=darwin-monterey-m1; [+] ^apple-libuuid@1353.100.2%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^bzip2@1.0.8%apple-clang@13.1.6~debug~pic+shared arch=darwin-monterey-m1; [+] ^gdbm@1.23%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^readline@8.1.2%apple-clang@13.1.6 arch=darwin-monterey-m1; [+] ^ncurses@5.7.20081102%apple-clang@13.1.6~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11312:9935,certificate,certificates-mozilla,9935,https://root.cern,https://github.com/root-project/root/issues/11312,1,['certificate'],['certificates-mozilla']
Security,s functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:62610,secur,security,62610,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s in ROOT binary files (#13423); 91d7dc9cee [tmva] use SetDirectory(nullptr); 34c4a497c5 [tmva] reduce usage of `Form` method; df8ab656e3 [tmvagui] avoid usage of Form function; 5bf591928a [tmva] avoid Form usage in tests; a18373ec99 [tmva] fix wrong Form usage in remaining classes; c251183d62 [tmva] reduce usage of Form; a50b03c9b7 [tmva] fix multiple places where Form is wrongly used twice is same call; 20fa3a3b4d [tmva] fix wrong Form usage is several next classes; 9eba38ba7a [tmva] fix wrong usage of Form in several classes; 9b3e9dc4e0 [tmva] replace Form by TString::Format in several classes; a6c9608215 [tmva] avoid Form usage in Classification.cxx; 50bd755c37 [tmva] fix Form usage in MethodTMlpANN; befd36fdb1 Fix yet another assertion failure on Windows; fb94e0b032 [tmva] Fix RTensor::ExpandDims(); 99378cfba9 Fix Lenght typos (#13281); 8786fa4392 Added cpp files for RBatchGenerator; 3f55b20888 feat: added tutorial links; c432106115 feat: include link for sofie onnx parser; cf5449bd63 fix: email id for communication; 4f8a5972df docs: Update SOFIE documentation; cdb4a81f87 Error function implemented successfully with the corresponding unit tests; 8157df1a22 [cmake] Remove usage of LLVM_VERSION in tree; b9ff1db6bd [tmva] Fix default weight directory name used in DataLoder; 1bc8c0657a [tmva] Fix drawing of progressbar for nevt<100; 8303abd18e Fix: The Gemm Operator can accept standalone Matmul operator as well as MatMul + Add operator (#12894); 3296ff0600 [GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser (#12918); b7b8646c53 [tmva][cmake] Fix issue introduced accidentally in PR #12751; 4fd50f0dd8 [cmake] Ensure TMVA emitFromXYZ uses libs from current ROOT build.; c6e6d4d59a feat: Resize method for RTensor; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; 9c3a4ad1a9 Remove unnecessary includes propagated by the libCore target; cc6248b3bd feat: GetValueFromDict method for handling dictionary access; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:4138,access,access,4138,https://root.cern,https://github.com/root-project/root/pull/13783,1,['access'],['access']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:54922,secur,security,54922,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:55568,secur,security,55568,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:56214,secur,security,56214,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:56860,secur,security,56860,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:57506,secur,security,57506,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:58152,secur,security,58152,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:58798,secur,security,58798,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:59444,secur,security,59444,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'me,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:60090,secur,security,60090,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,s insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23029,secur,security,23029,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,s not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary chec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:22702,secur,security,22702,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,s not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:36909,secur,security,36909,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,s not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks int,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:37565,secur,security,37565,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,s not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:318; /opt/root_src/build/rmkdepend/main.c:256:30: warning: The left operand of '+' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 2: Assuming 'argc' is equal to 2 in /opt/root_src/build/rmkdepend/main.c:176; 3: Left side of '&&' is true in /opt/root_src/build/rmkdepend/main.c:176; 4: Assuming the condition is true in /opt/root_src/build/rmkdepend/main.c:176; 5: Taking true branch in /opt/root_src/build/rmkdepend/main.c:176; 6: Assuming the condition is false in /opt/root_src/build/rmkdepend/main.c:185; 7: Taking false branch in /opt/root_src/build/rmkdepend/main.c:185; 8,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:4527,secur,security,4527,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,"s of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we’ve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deployed on GitHub.com; your repository will automatically benefit from the most recently released version. #### The analysis doesn’t seem to be working; If you get an error in GitHub Actions that indicates that CodeQL wasn’t able to analyze your code, please [follow the instructions here](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow) to debug the analysis. #### How do I disable LGTM.com?; If you have LGTM’s automatic pull request analysis enabled, then you can [follow these steps to disable the LGTM pull request analysis](https://lgtm.com/help/lgtm/managing-automated-code-review#disabling-pr-integration). You don’t actually need to remove your repository from LGTM.com; it will automatically be removed in the next few months as part of the deprecation of LGTM.com ([more info here](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/)). #### Which source code hosting platforms does code scanning support?; GitHub code scanning is deeply integrated within GitHub itself. If you’d like to scan source code that is hosted elsewhere, we suggest that you create a mirror of that code on GitHub. #### How do I know this PR is legitimate?; This PR is filed by the official LGTM.com GitHub App, in line with the [deprecation timeline that was announ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:3634,secur,security,3634,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,s with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1107; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1147; /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1389:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlParse.cxx:1389; /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1109:24: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: 'font' initialized to a null pointer value in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1080; 2: Assuming field 'fPFirst' is not equal to null in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1086; 3: Taking false branch in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1086; 4: Assuming field 'fLastSized' is equal to null in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1088; 5: Taking true branch in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1088; 6: 'stop' is 0 in /opt/root_src/gui/guihtml/src/TGHtmlSizer.cxx:1095; 7: Left side of '&&' is true,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:80911,secur,security,80911,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:47142,secur,security,47142,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:41002,secur,security,41002,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"s(205,5): error MSB4018: System.IO.IOException: The process cannot access the file 'C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\x64\Release\X86CommonTableGen\X86Commo.12E1F1A7.tlog\CustomBuild.command.1.tlog' because it is being used by another process. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Micro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:1369,access,access,1369,https://root.cern,https://github.com/root-project/root/pull/10247,1,['access'],['access']
Security,"s);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooArgList(fitnsig, fitnbg));. 	RooMCStudy* mcstudy =; 		new RooMCStudy(mcdist, x, FitModel(model), Binned(kFALSE), Silence(), Extended(kFALSE),; 			FitOptions(Extended(kFALSE), PrintEvalErrors(-1), Save(kTRUE)));. 	RooDLLSignificanceMCSModule sigModule(""nsig"", 0);; 	mcstudy->addModule(sigModule);. 	mcstudy->generateAndFit(100, nevents, kTRUE);. 	std::cout << mcstudy->fitParDataSet() << std::endl;; }; ```. which results in . ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_model_distribution) ERROR: datasets have different size; RooDataSet::fitParData_model_distribution[#mean_{gauss},#sigma_{gauss},nbg,nsig,power,shape,NLL,ngen,#mean_{gauss}err,#mean_{gauss}pull,#sigma_{gauss}err,#sigma_{gauss}pull,nbgerr,nbgpull,nsigerr,nsigpull,powererr,powerpull,shapeerr,shapepull] = 84 entries; ```. ### Setup; ROOT 6.22/02; WSL v2 with Ubuntu 20.04 ; Binay download (built for linuxx8664gcc). ### Additional context; RooDLLSignificanceMCSModule::finalizeRun() states that ` If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. `, however that is not true.; If some of the toy experiments performed did not converge, the RooMCStudy dataset size is lower than the number of experiments. At the same time, there is no way (that i could find) to access the fit result status of current run from RooAbsMCStudyModule, making it hard to consistently avoid the merge error",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:3700,access,access,3700,https://root.cern,https://github.com/root-project/root/issues/6949,1,['access'],['access']
Security,s/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to funct,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:3542,secur,security,3542,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"se the following GitHub issue:; * https://github.com/root-project/root/issues/12718; * https://github.com/root-project/root/issues/7686; * https://github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/root/issues/11411; * https://github.com/root-project/root/issues/11596. ## Upstream contributions to cppyy in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:2724,validat,validation,2724,https://root.cern,https://github.com/root-project/root/pull/14507,1,['validat'],['validation']
Security,se.cxx:1942; 20: Assuming 'colIndex_old' is null in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1951; 21: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1951; 22: Assuming 'irow' is < field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 23: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 24: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 25: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 26: 'flagRow' is false in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 27: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 28: Assuming 'index' is < 'eIndex_o' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1965; 29: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1965; 30: Array access (from variable 'colIndex_old') results in a null pointer dereference in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1967; /opt/root_src/math/matrix/src/TMatrixTSym.cxx:414:16: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:155; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:155; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Control jumps to 'case kAtA:' at line 158 in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:157; 6: Calling 'TMatrixTSym::TMult' in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:160; 7: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:383; 8: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 9: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixTSym.cxx:383; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:146451,access,access,146451,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,se_name' in /opt/root_src/build/rmkdepend/main.c:498; 17: Passing null pointer value via 1st parameter 'str' in /opt/root_src/build/rmkdepend/main.c:659; 18: Calling 'copy' in /opt/root_src/build/rmkdepend/main.c:659; 19: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:567; /opt/root_src/build/rmkdepend/main.c:569:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/main.c:569; /opt/root_src/build/rmkdepend/main.c:716:7: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/main.c:716; /opt/root_src/build/rmkdepend/main.c:749:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'makefile' initialized to a null pointer value in /opt/root_src/build/rmkdepend/main.c:161; 2: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 3: Assuming 'argc' is not equal to 2 in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:35443,secur,security,35443,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,secure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:6402,secur,security,6402,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,set' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:26882,secur,security,26882,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"sking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::Gener",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:16965,Access,AccessType,16965,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,"so D[0xb61ff1]]; 0x7f102be771c6 TCling::Load(char const*, bool) ??:0 + 0x1a6 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so D[0xa9a1c6]]; 0x7f1031ec07c9 TSystem::Load(char const*, char const*, bool) ??:0 + 0x799 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCore.so D[0x2117c9]]; 0x7f1031e4ec71 TROOT::LoadClass(char const*, char const*, bool) ??:0 + 0x71 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCore.so D[0x19fc71]]; 0x7f102be752c3 TCling::ShallowAutoLoadImpl(char const*) ??:0 + 0x2e3 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so D[0xa982c3]]; 0x7f102be8c0c4 TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) ??:0 + 0x164 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so D[0xaaf0c4]]; 0x7f102be8c604 TCling::AutoLoad(char const*, bool) ??:0 + 0x214 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so D[0xaaf604]]; 0x7f102be8c7e1 TCling::AutoLoad(std::type_info const&, bool) ??:0 + 0xe1 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so D[0xaaf7e1]]; 0x7f1031f4c8e9 TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) ??:0 + 0x4b9 [/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCore.so D[0x29d8e9]]; ```; The second crash can be reproduced like this:; `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11933:9689,hash,hash,9689,https://root.cern,https://github.com/root-project/root/issues/11933,1,['hash'],['hash']
Security,"sr/include/c++/12/bits/stl_construct.h:151; #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648; #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346; #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317; #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:8710,hash,hash,8710,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security,"sr/include/c++/12/bits/stl_construct.h:151; #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648; #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346; #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317; #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:19563,hash,hash,19563,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security,src/MethodBase.cxx:2711; 5: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2711; 6: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2712; /opt/root_src/tmva/tmva/src/MethodBase.cxx:2715:21: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: 'resMulticlass' initialized here in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2707; 2: Assuming 'resMulticlass' is null in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2708; 3: Taking true branch in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2708; 4: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2711; 5: Loop condition is false. Execution continues on line 2715 in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2711; 6: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/MethodBase.cxx:2715; /opt/root_src/tmva/tmva/src/MethodBoost.cxx:410:35: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:361; 2: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:361; 3: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:364; 4: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:364; 5: Assuming 'varTrafoStart' is <= 0 in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:379; 6: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:379; 7: Assuming field 'fCurrentMethodIdx' is < field 'fBoostNum' in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:388; 8: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:388; 9: Field 'fCurrentMethodIdx' is <= 0 in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:390; 10: Taking false branch in /opt/root_src/tmva/tmva/src/MethodBoost.cxx:390; 11: 'method' initialized here in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:55009,Access,Access,55009,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,src/build/rmkdepend/main.c:569:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/main.c:569; /opt/root_src/build/rmkdepend/main.c:716:7: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/main.c:716; /opt/root_src/build/rmkdepend/main.c:749:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'makefile' initialized to a null pointer value in /opt/root_src/build/rmkdepend/main.c:161; 2: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 3: Assuming 'argc' is not equal to 2 in /opt/root_src/build/rmkdepend/main.c:176; 4: Left side of '&&' is false in /opt/root_src/build/rmkdepend/main.c:176; 5: Loop condition is false. Execution continues on line 373 in /opt/root_src/build/rmkdepend/main.c:223; 6: Loop condition is false. Execution continues on line 375 in /opt/root_src/build/rmkdepend/main.c:373; 7: 'numundefs' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:35787,secur,security,35787,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,ssed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:16026,secur,security,16026,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"ssion, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:47798,secur,security,47798,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151; #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:6838,hash,hash,6838,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security,"std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151; #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:17691,hash,hash,17691,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security,"sted it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we’ve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:2216,Secur,Security,2216,https://root.cern,https://github.com/root-project/root/pull/11808,1,['Secur'],['Security']
Security,strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:42645,secur,security,42645,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TDatime.cxx:141; /opt/root_src/core/base/src/TDirectory.cxx:1071:20: warning: Value stored to 'newdir' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'newdir' is never read in /opt/root_src/core/base/src/TDirectory.cxx:1071; /opt/root_src/core/base/src/TDirectory.cxx:1246:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TDirectory.cxx:1246; /opt/root_src/core/base/src/TDirectory.cxx:1260:21: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/core/base/src/TDirectory.cxx:1180; 2: Left side of '||' is false in /opt/root_src/core/base/src/TDirectory.cxx:1180; 3: Assuming the condition is false in /opt/root_src/core/base/src/TDirectory.cxx:1180; 4: Taking false branch in /opt/root_src/core/base/src/TDirectory.cxx:1180; 5: Calling 'TString::operator+=' in /opt/root_src/core/base/src/TDirectory.cxx:1183; 6: 'cs' is non-null in /opt/root_src/core/base/inc/TString.h:577; 7: '?' condition is true in /opt/root_src/core/base/inc/T,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:106217,secur,security,106217,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,sults in a dereference of a null pointer (loaded from variable 'f0') in /opt/root_src/gui/gui/src/TGPack.cxx:561; /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53:12: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:37; 2: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:37; 3: Assuming 'pname' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 4: Taking false branch in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:45; 5: Value assigned to field 'fImage' in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:49; 6: Assuming field 'fImage' is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 7: Left side of '||' is true in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:50; 8: Called C++ object pointer is null in /opt/root_src/gui/gui/src/TGShapedFrame.cxx:53; /opt/root_src/gui/gui/src/TGSpeedo.cxx:462:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:462; /opt/root_src/gui/gui/src/TGSpeedo.cxx:470:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/gui/gui/src/TGSpeedo.cxx:470; /opt/root_src/gui/gui/src/TGSplitFrame.cxx:260:15: warning: Access to field 'fSplitTool' results in a dereference of a null pointer [clang-analyzer-core.NullDereference]; 1: Assuming field 'fFrame' is null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 2: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:588; 3: Calling 'TGSplitFrame::SplitVertical' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:595; 4: Field 'fFrame' is null in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:50278,secur,security,50278,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,suming 'nbin' is >= 1 in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:187; 14: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:187; 15: Assuming 'h1' is null in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:198; 16: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:198; 17: Value assigned to 'h1' in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:199; 18: Assuming 'h1' is null in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:201; 19: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:201; 20: Assuming 'cell_value' is not equal to kValue in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:202; 21: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:202; 22: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:208; /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:86:36: warning: Access to field 'fLastCe' results in a dereference of a null pointer (loaded from variable 'foam') [clang-analyzer-core.NullDereference]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:81; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:81; 3: Access to field 'fLastCe' results in a dereference of a null pointer (loaded from variable 'foam') in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:86; /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:112:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:79; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:79; 3: Passing null pointer value via 1st parameter 'foam' in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:82; 4: Calling 'PDEFoamKernelLinN::WeightLinNeighbors' in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:82; 5: Called C++ object pointer is null in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:107908,Access,Access,107908,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,suming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1344; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1344; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1357:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builti,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:48098,secur,security,48098,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"t help us fixing this issue.; ===========================================================; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::GenerateCXXGlobalVarDeclInitFunc (this=this; entry=0x7fffe1b042c0, Fn=0x55ed2cd76b78, D=0x55ed2ccd0f20, Addr=Addr; entry=0x55ed2cd76b08, PerformInit=PerformInit; entry=true) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:670; #15 0x00007f54c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:17173,Access,AccessType,17173,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,"t of unavailable class TObject, offset=1171537962 pointer will be 0; Error in <TExMap::Remove>: key 586225820 not found at 447; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0; Error in <TExMap::Remove>: key 423978783 not found at 84; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0; Error in <TExMap::Remove>: key 839042239 not found at 12; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0; Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551; Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation; root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed.; Corrupt value: 0x0; root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug; ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq ; It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02; 2. Operating system: MacOS (but the same happens on lxplus); 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12710:2440,checksum,checksum,2440,https://root.cern,https://github.com/root-project/root/issues/12710,1,['checksum'],['checksum']
Security,t provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:28537,secur,security,28537,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,t support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:35494,secur,security,35494,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,t support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:36938,secur,security,36938,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"t triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile with `vecgeom` option. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Compiling ROOT v6.26.04 on Debian Unstable (amd64), with GCC 11.3.0 and VecGeom 1.2.0, with this configuration:; ```; -- ROOT Configuration . System Linux-5.18.0-2-amd64; Processor 4 core Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz (x86_64); Build type None; Install path /usr; Compiler GNU 11.3.0; Compiler flags:; C -g -O2 -ffile-prefix-map=<srcdir>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Wno-implicit-fallthrough -pipe -Wall -W -pthread ; C++ -g -O2 -ffile-prefix-map=<srcdir>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; Linker flags:; Executable -Wl,-z,relro -Wl,-z,now -rdynamic; Module -Wl,-z,relro -Wl,-z,now; Shared -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_unuran builtin_vdt ccache dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi imt mathmore mlp minuit2 mpi mysql odbc opengl pgsql pyroot qt5web qt6web r roofit root7 rpath shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-sofie tmva-pymva tmva-rmva spectrum unuran uring vc vdt veccore x11 xml xrootd; ```. ### Additional context; <!--; Add any other context about the problem here.; -->; I have build VecGeom as a shared library, but this shouldn't make a difference. I think the VecGeom part of ROOT is just out of date (last change made 2 years ago).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10984:5490,secur,security,5490,https://root.cern,https://github.com/root-project/root/issues/10984,2,"['hash', 'secur']","['hash-style', 'security']"
Security,"t you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:1545,secur,security,1545,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,t' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:27526,secur,security,27526,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"t' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'height' is never read in /opt/root_src/gui/gui/src/TGInputDialog.cxx:82; /opt/root_src/gui/gui/src/TGInputDialog.cxx:154:22: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGInputDialog.cxx:154; /opt/root_src/gui/gui/src/TGInputDialog.cxx:180:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGInputDialog.cxx:180; /opt/root_src/gui/gui/src/TGLayout.cxx:286:16: warning: Value stored to 'y' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'y' is never read in /opt/root_src/gui/gui/src/TGLayout.cxx:286; /opt/root_src/gui/gui/src/TGLayout.cxx:450:16: warning: Value stored to 'x' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'x' is never read in /opt/root_src/gui/gui/src/TGLayout.cxx:450; /opt/root_src/gui/gui/src/TGLayout.cxx:811:12: warning: Although the value stored to 'ptr' is used in the enclosing expression, the value is never actually read from 'ptr' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'ptr' is used in the enclosing exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:40115,secur,security,40115,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,t/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kLong64_t:' at line 178 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_longlong' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:178; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:179:35: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:56155,Access,Access,56155,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,t/root_src/net/auth/src/TAuthenticate.cxx:4162; 5: Assuming the condition is true in /opt/root_src/net/auth/src/TAuthenticate.cxx:4164; 6: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4164; 7: Assuming the condition is true in /opt/root_src/net/auth/src/TAuthenticate.cxx:4165; 8: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4165; 9: Assuming the condition is true in /opt/root_src/net/auth/src/TAuthenticate.cxx:4172; 10: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4172; 11: Assuming 'fKey' is non-null in /opt/root_src/net/auth/src/TAuthenticate.cxx:4173; 12: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4173; 13: Assuming 'klen' is > 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:4175; 14: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4175; 15: 'pwd' initialized to a null pointer value in /opt/root_src/net/auth/src/TAuthenticate.cxx:4193; 16: Calling 'TAuthenticate::SecureRecv' in /opt/root_src/net/auth/src/TAuthenticate.cxx:4194; 17: 'str' is non-null in /opt/root_src/net/auth/src/TAuthenticate.cxx:2874; 18: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2874; 19: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2878; 20: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2878; 21: Assuming 'gDebug' is <= 3 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 22: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 23: Assuming 'len' is not equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 24: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 25: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 26: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 27: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 28: Taking false branch in /opt/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:10204,Secur,SecureRecv,10204,https://root.cern,https://github.com/root-project/root/issues/7528,1,['Secur'],['SecureRecv']
Security,t/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/ci,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:23548,secur,security,23548,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,t/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Cal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:30235,secur,security,30235,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"t; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second offset= 0 type=300 ,stl=365, ctype=365,. **root 6.22,24**. root [3] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0xb5fb752; array<string,2> first offset= 0 type=62 Emulation; string second offset= 0 type=300 ,stl=365, ctype=365, Emulation; ; StreamerInfo for class: array<string,2>, version=1, checksum=0x6b3ba626; string _M_elems offset= 0 type=320 ,stl=365, ctype=365. Unfortunately, I don't how to proceed further. ### Setup. 1. Reproduced with ROOT 6.22.08, 6.24 (today's version from the branch with patches); 2. Operating system Fedora 33 / centos7; 3. binary download / you built it yourself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:2691,checksum,checksum,2691,https://root.cern,https://github.com/root-project/root/issues/8268,3,['checksum'],['checksum']
Security,"t_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-math-exampleFunction-py. ReferenceError: attempt to access a null-pointer; ~~~; 1132/1272 Test #1132: tutorial-math-exampleFunction-py ....................................***Failed Error regular expression found in output. Regex=[Error in] 2.11 sec; Error in <ROOT::Math::Fitter::SetFCN>: FCN function has zero parameters ; Use Functor1D for wrapping one-dimensional function and compute integral of f(x) = x^2-1; integral-1D value = 5.999999999999999; Use Functor for wrapping a multi-dimensional function, the Rosenbrock Function r(x,y) and find its minimum; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/math/exampleFunction.py"", line 57, in <module>; fitter.Result().Print(ROOT.std.cout); ReferenceError: attempt to access a null-pointer; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_CNN_Classification-py. There are probably 6 thread, not 25769803776. (Zero-extended from 32 to 64 bits in the wrong direction.). $ printf '%016x\n' 25769803776; 0000000600000000. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1270/1272 Test #1267: tutorial-tmva-TMVA_CNN_Classification-py ............................***Failed 1.33 sec; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using Keras since tensorflow is not installed; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using PyTorch since torch is not installed; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 1000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 1000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:7520,access,access,7520,https://root.cern,https://github.com/root-project/root/issues/12429,1,['access'],['access']
Security,t_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:54465,secur,security,54465,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"tem::StackTrace (this=0x55ed24b27570) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:2399; #4 0x00007f54c9095257 in TUnixSystem::DispatchSignals (this=0x55ed24b27570, sig=kSigSegmentationViolation) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:3619; #5 <signal handler called>; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::Gener",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:2618,Access,AccessType,2618,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,th analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:327; /opt/root_src/core/clib/src/Demangle.c:344:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:344; /opt/root_src/core/clib/src/Demangle.c:345:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:345; /opt/root_src/core/clib/src/Demangle.c:361:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:361; /opt/root_src/core/clib/src/Demangle.c:362:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:2066,secur,security,2066,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,th arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:27071,secur,security,27071,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,"the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:; - A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; - A `TTreeReader`-like interface, `TTreeReaderFast`. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize *and* apply user code, rather than two.; - The intent is that this interface can be extended in the future and used by `TDataFrame`, provided we can make `TDataFrame` sufficiently fast.; - A Python-based `numpy` export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; - The `numpy` interface is low-level for Python; we intend to further explore the ideal high-level interface through projects such as https://github.com/diana-hep/plur. So indeed, lot's of experimental / internal interface work here - but we felt that (a) a sufficient amount depends on this and (b) we've demonstrated enough utility that it was time to start talking about merging. (With many thanks to @jpivarski for driving this work home with his work on a python interface!)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943:1965,expose,exposes,1965,https://root.cern,https://github.com/root-project/root/pull/943,2,"['access', 'expose']","['access', 'exposes']"
Security,"this PR aims to reduce the contention in TClass::GetBaseClassOffset.; Zero is returned as offset value if the class that the TClass instance represents; and all of its ancestors has no multiple inheritance.; This information can be checked without accessing the interpreter, and therewith; acquiring the global lock, because it now originally resides in the dictionaries.; The information is put in the dictionaries by rootcling, which explores the; inheritance chain *at build time*. The expectation is to reduce *considerably* contention due to accesses to the interpreter and caches of offsets in the TClassInfo instances. Potentially, this mechanism can be upgraded inserting in the dictionaries; not only the aforementioned information, but also the offsets to all the; bases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2319:248,access,accessing,248,https://root.cern,https://github.com/root-project/root/pull/2319,2,['access'],"['accesses', 'accessing']"
Security,"thread T0; #0 0x7f530c576a65 in TMVA::TSpline2::Eval(double) const root/tmva/tmva/src/TSpline2.cxx:84; #1 0x7f530c3dd685 in TMVA::PDF::FillSplineToHist() root/tmva/tmva/src/PDF.cxx:539; #2 0x7f530c3de1e8 in TMVA::PDF::BuildSplinePDF() root/tmva/tmva/src/PDF.cxx:364; #3 0x7f530c3dfc62 in TMVA::PDF::BuildPDF(TH1 const*) root/tmva/tmva/src/PDF.cxx:299; #4 0x7f530be8247c in TMVA::MethodBase::CreateMVAPdfs() root/tmva/tmva/src/MethodBase.cxx:2220; #5 0x7f530beaaa67 in TMVA::MethodBase::TrainMethod() root/tmva/tmva/src/MethodBase.cxx:691; #6 0x7f530bd67bb7 in TMVA::Factory::TrainAllMethods() root/tmva/tmva/src/Factory.cxx:1173; #7 0x7f5311416107 in Belle2::MVA::TMVATeacher::trainFactory(TMVA::Factory&, TMVA::DataLoader&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const belle2/mva/methods/src/TMVA.cc:164; #8 0x7f5311418389 in Belle2::MVA::TMVATeacherClassification::train(Belle2::MVA::Dataset&) const belle2/mva/methods/src/TMVA.cc:303; #9 0x90859d in (anonymous namespace)::TMVATest_TMVAClassificationInterface_Test::TestBody() belle2/mva/methods/tests/test_TMVA.cc:153; ```. Looking at the TH1 Warning about only having one bin and the code in `TSpline2::Eval` there is indeed a problem if the histogram/TGraph has only one point as (bin+2) is accessed. Now I'm fully aware interpolating a 1 point histogram doesn't make much sense but still, a heap-overflow is not the expected behavior. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Probably just return the value itself if only one point is in the graph. ### To Reproduce. ```c++; void tspline() {; double x{1};; TGraph* g = new TGraph(1, &x, &x);; TMVA::TSpline2 s(""spline"", g);; s.Eval(x);; }; ```. ### Setup. * ROOT 6.24.0; * GCC 10.2; * Ubuntu 18.04. ## Additional Context. I would also like to point out that `TSpline2.cxx` claims it doesn't own the `TGraph` instance in a comment in the constructor and contradicts this ten lines later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8021:2176,access,accessed,2176,https://root.cern,https://github.com/root-project/root/issues/8021,1,['access'],['accessed']
Security,"thread_create() failed.; [ERROR] Failed to generate model using python; CMake Error at /home/pcanal/root_working/code/quick-devel/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1. <end of output>; Test time = 54.61 sec; ----------------------------------------------------------; Test Failed.; ""PyMVA-Keras-Classification"" end time: Sep 24 20:02 UTC; ""PyMVA-Keras-Classification"" time elapsed: 00:00:54; ```. Other errors:. ```; 14323: system_error: Resource temporarily unavailable; 614356:/bin/sh: fork: retry: Resource temporarily unavailable; 614357:/bin/sh: fork: retry: Resource temporarily unavailable; 614358:/bin/sh: fork: retry: Resource temporarily unavailable; 614359:/bin/sh: fork: retry: Resource temporarily unavailable; 614360:/bin/sh: fork: Resource temporarily unavailable; 614444:/bin/sh: fork: retry: Resource temporarily unavailable; 614445:/bin/sh: fork: retry: Resource temporarily unavailable; 614446:/bin/sh: fork: retry: Resource temporarily unavailable; 614447:/bin/sh: fork: retry: Resource temporarily unavailable; 616571:LLVM ERROR: pthread_create failed: Resource temporarily unavailable; 616573:sh: fork: retry: Resource temporarily unavailable; 616574:sh: fork: retry: Resource temporarily unavailable; 616575:sh: fork: retry: Resource temporarily unavailable; 616576:sh: fork: retry: Resource temporarily unavailable; 616577:sh: fork: Resource temporarily unavailable; ```. ### ROOT version. master. ### Installation method. hand build. ### Operating system. Alma9 . ### Additional context. Node is VM with 128GB of RAM and is access via Jupyter notebook.; ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ uname -a; Linux jupyter-pcanal-rootdevel 6.3.12-200.fc38.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Jul 6 04:05:18 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux; ```; ```; CPU(s): 127; On-line CPU(s) list: 0-126; Vendor ID: AuthenticAMD; Model name: AMD EPYC 7543 32-Core Processor; CPU family: 25; Model: 1; Thread(s) per core: 1; Core(s) per socket: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552:5135,access,access,5135,https://root.cern,https://github.com/root-project/root/issues/16552,1,['access'],['access']
Security,tins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to func,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:12980,secur,security,12980,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,tins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:61704,secur,security,61704,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,tions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:20889,secur,security,20889,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,tions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide securi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:26269,secur,security,26269,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,tions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:87,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:41577,secur,security,41577,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,tmva/tmva/src/Reader.cxx:424; 12: Returning from 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 13: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 14: 'method' is non-null in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 15: Left side of '&&' is true in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 16: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 17: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 18: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:381; 19: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:382; 20: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:382; 21: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:384; /opt/root_src/tmva/tmva/src/Reader.cxx:406:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 3: Calling 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:403; 11: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:404; 12: Taking true branch in /opt/root_src/tmva/tmva/src/R,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:111962,Access,Access,111962,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12454; /opt/root_src/net/http/civetweb/civetweb.c:12455:3: warning: Call to function 'memcpy' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:57780,secur,security,57780,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17916; /opt/root_src/net/http/civetweb/civetweb.c:17939:29: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]; 1: Calling 'master_thread_run' in /opt/root_src/net/http/civetweb/civetweb.c:18156; 2: Assuming 'ctx' is non-null in /opt/root_src/net/http/civetweb/civetweb.c:18021; 3: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:18021; 4: Assuming field 'init_thread' is null in /opt/root_src/net/http/civetweb/civetweb.c:18049; 5: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:18049; 6: Assuming field 'stop_flag' is equal to 0 in /opt/root_src/net/http/civetweb/civetweb.c:18059; 7: Loop condition is true. Entering loop body in /opt/root_src/net/http/civetweb/civet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:70271,secur,security,70271,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:26218,secur,security,26218,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,tored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/xml/src/TXMLFile.cxx:203; /opt/root_src/io/xml/src/TXMLPlayer.cxx:394:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TXMLPlayer.cxx:394; /opt/root_src/io/xml/src/TXMLPlayer.cxx:404:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TXMLPlayer.cxx:404; /opt/root_src/io/io/src/TBufferFile.cxx; /opt/root_src/io/io/src/TBufferJSON.cxx; /opt/root_src/io/io/src/TEmulatedCollectionProxy.cxx; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx; /opt/root_src/io/io/src/TFPBlock.cxx; /opt/root_src/io/io/src/TFile.cxx; /opt/root_src/io/io/src/TFileMerger.cxx; /opt/root_src/io/io/src/TGenCollectionStreamer.cxx; /opt/root_src/io/io/src/TKey.cxx; /opt/root_src/io/io/src/TMakeProject.cxx; /opt/root_src/io/io/src/TMapFile.cxx; /opt/root_src/io/io/src/TMemFile.cxx; /opt/root_src/io/io/src/TStreamerInfo.cxx; /opt/root_src/io/io/src/TStreamerInfoActions.cxx; /opt/root_src/io/sql/src/TBufferSQL2.cxx; /opt/root_src/io/sql/src/TSQLFile.cxx; /opt/root_src/io/xml/src/TBuf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:134137,secur,security,134137,https://root.cern,https://github.com/root-project/root/issues/7431,1,['secur'],['security']
Security,"tr_base.h:1071; #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43; #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104; #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82; ```; </details>. <details>; <summary>ROOT backtrace</summary>. ```; *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:10518,hash,hash,10518,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security,"tr_base.h:1071; #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43; #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104; #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then pl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:21371,hash,hash,21371,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security,trixTSparse.cxx:1951; 22: Assuming 'irow' is < field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 23: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 24: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 25: Left side of '&&' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 26: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 27: Taking true branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 28: 'flagRow' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 29: Taking true branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1921; 30: Assuming 'index' is <= 'left' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1924; 31: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1924; 32: Array access (from variable 'colIndex_old') results in a null pointer dereference in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1926; /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1967:32: warning: Array access (from variable 'colIndex_old') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 2: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 3: Assuming 'irow' is >= field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 4: Loop condition is false. Execution continues on line 1888 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 5: 'colIndex_old' initialized here in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1894; 6: Assuming 'irow' is < field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 7: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 8: Assuming the condition is true in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:143387,access,access,143387,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,trncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:318; /opt/root_src/build/rmkdepend/main.c:256:30: warning: The left operand of '+' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]; 1: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 2: Assuming 'argc' is equal to 2 in /opt/root_src/build/rmkdepend/main.c:176; 3: Left side of '&&' is true in /opt/root_src/build/rmkdepend/main.c:176; 4: Assuming the condition is true in /opt/root_src/build/rmkdepend/main.c:176; 5: Taking true branch in /opt/root_src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:4373,secur,security,4373,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,trol jumps to 'case kAtA:' at line 154 in /opt/root_src/math/matrix/src/TMatrixT.cxx:123; 6: Calling 'TMatrixT::TMult' in /opt/root_src/math/matrix/src/TMatrixT.cxx:156; 7: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:855; 8: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:855; 9: Calling 'AtMultB<double>' in /opt/root_src/math/matrix/src/TMatrixT.cxx:894; 10: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixT.cxx:3105; 11: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixT.cxx:3106; 12: Loop condition is false. Execution continues on line 3114 in /opt/root_src/math/matrix/src/TMatrixT.cxx:3109; 13: Null pointer value stored to 'cp' in /opt/root_src/math/matrix/src/TMatrixT.cxx:3114; 14: Dereference of null pointer in /opt/root_src/math/matrix/src/TMatrixT.cxx:3114; /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1926:32: warning: Array access (from variable 'colIndex_old') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 2: Taking false branch in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1853; 3: Assuming 'irow' is >= field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 4: Loop condition is false. Execution continues on line 1888 in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1877; 5: 'colIndex_old' initialized here in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1894; 6: Assuming 'irow' is < field 'fNrows' in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 7: Loop condition is true. Entering loop body in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1912; 8: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 9: Left side of '&&' is true in /opt/root_src/math/matrix/src/TMatrixTSparse.cxx:1915; 10: Assuming the condition is true in /opt/root_src/math/ma,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:140363,access,access,140363,https://root.cern,https://github.com/root-project/root/issues/7458,1,['access'],['access']
Security,ts such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:6999,secur,security,6999,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,ts such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:119; /opt/root_src/build/rmkdepend/pr.c:121:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:121; /opt/root_src/build/rmkdepend/pr.c:132:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/pr.c:132; /opt/root_src/build/rmkdepend/pr.c:135:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to fu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:44662,secur,security,44662,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,ts.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides bou,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:5674,secur,security,5674,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"turning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 38: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 39: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 40: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:214; 41: 'valid' is true in /opt/root_src/core/cont/src/TRefArray.cxx:215; 42: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 43: 'valid' is true in /opt/root_src/core/cont/src/TRefArray.cxx:254; 44: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:254; 45: Returning the value 1 (loaded from 'valid'), which participates in a condition later in /opt/root_src/core/cont/src/TRefArray.cxx:258; 46: Returning from 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:347; 47: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:347; 48: Array access (via field 'fUIDs') results in a null pointer dereference in /opt/root_src/core/cont/src/TRefArray.cxx:348; /opt/root_src/core/cont/src/TRefArray.cxx:348:30: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming 'obj' is non-null in /opt/root_src/core/cont/src/TRefArray.cxx:378; 2: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:378; 3: Calling 'TRefArray::Last' in /opt/root_src/core/cont/src/TRefArray.cxx:379; 4: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:575; 5: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:575; 6: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/src/TRefArray.cxx:578; 7: Returning from 'TRefArray::Last' in /opt/root_src/core/cont/src/TRefArray.cxx:379; 8: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:379; 9: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:379; 10: Calling 'TRefArray::AddLast' in /opt/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:16277,access,access,16277,https://root.cern,https://github.com/root-project/root/issues/7424,1,['access'],['access']
Security,"ude ""TROOT.h""; #include <iostream>. struct Dummy {; double x;; };. struct Dummy2{; };. template<typename... Args, typename Extra = Dummy2>; double sumT(Args... args) {; return (args.x + ...);; }. int test() {; auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");; TMethodCall call_explicit(meth_explicit);. double res;; const Dummy arg{5.};; const void *args[3] = {&arg, &arg, &arg};; call_explicit.Execute(nullptr, args, 3, &res);; std::cout << ""res = "" << res << std::endl;. return 0;; }; ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```; In file included from input_line_8:1:; /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'; return (args.x + ...);; ~~~~ ^; input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; ^; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; else {; (void)(((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented!; res = 7.31217e-322; (int) 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12549:1441,secur,security,1441,https://root.cern,https://github.com/root-project/root/issues/12549,1,['secur'],['security']
Security,"ue could fix these problems. ## To reproduce. 1. Run the following script with ROOT 6.26.02 (or any newer 6.26 commit):; ```c++; {; TFile f(""myFile.root"", ""RECREATE"");; TH1D h(""myHist"", """", 10, 0, 10);; h.Write();; }; std::vector<std::string> names = {""ws1"", ""ws2""};; for (auto name : names) {; RooStats::HistFactory::Measurement meas(name.c_str(), name.c_str());; meas.SetOutputFilePrefix((name + ""/WS"").c_str());; meas.SetPOI(""mu"");; meas.SetLumi(1);; meas.AddConstantParam(""Lumi"");; meas.SetExportOnly(true);; RooStats::HistFactory::Channel chan(""SR"");; chan.SetData("""", """");; RooStats::HistFactory::Sample sample(""samp"");; sample.SetHistoName(""myHist"");; sample.SetInputFile(""myFile.root"");; sample.AddNormFactor(""mu"", 1, 0, 100);; chan.AddSample(sample);; meas.AddChannel(chan);; meas.CollectHistograms();; //if(name == ""ws2""); //delete RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; }; ```; 2. Validate the file sizes:; ```bash; ls -lah ws1 ws2; ```; 4. Try to open the second workspace with any ROOT 6.28 version:; ```bash; root ws2/WS_combined_ws2_model.root -b -q -e ""combined->GetName()""; ```. There will be errors such as:; ```; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 2 of the class RooAbsReal, object skipped at offset 6484979; Error in <TBufferFile::CheckByteCount>: object of class RooAbsReal read too few bytes: 2 instead of 336; ```. ## Information on the origin of the problem. The first bad commit in the 6.26 branch is 00ca5ca9b23f2 from the PR https://github.com/root-project/root/pull/10215.; The comes from a backport of https://github.com/root-project/root/pull/9486 to the 6.26 patch release branch. Before that commit, when you run the reproducer script above, the `ws1` and `ws2` files are compatible:; ```bash; ls -lah ws1 ws2; ```; ```txt; ws1:; total 88K; drwxr-xr-x 2 rembserj rembserj 4.0K May 7 23:31 .; drwxr-xr-x 4 rembserj rembserj 4.0K May 7 23:31",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12783:1751,Validat,Validate,1751,https://root.cern,https://github.com/root-project/root/issues/12783,1,['Validat'],['Validate']
Security,"ue is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:47609,secur,security,47609,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,uffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:237; /opt/root_src/tree/tree/src/TLeaf.cxx:270:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:270; /opt/root_src/tree/tree/src/TLeaf.cxx:272:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:272; /opt/root_src/tree/tree/src/TLeafObject.cxx:94:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeafObject.cxx:94; /opt/root_src/tree/tree/src/TTree.cxx:2084:30: warning: Dereference of null pointer (loaded from variable 'apointer') [clang-analyzer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:70221,secur,security,70221,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,ui/gui/src/TGTextView.cxx:1016:16: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 2: Taking false branch in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 3: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 4: Loop condition is false. Execution continues on line 999 in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 5: Memory is allocated in /opt/root_src/gui/gui/src/TGTextView.cxx:1002; 6: Loop condition is false. Execution continues on line 1016 in /opt/root_src/gui/gui/src/TGTextView.cxx:1004; 7: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGTextView.cxx:1016; /opt/root_src/gui/gui/src/TGTextView.cxx:1027:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGTextView.cxx:1027; /opt/root_src/gui/gui/src/TRootApplication.cxx:83:12: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Calling 'TRootApplication::GetOptions' in /opt/root_src/gui/gui/src/TRootApplication.cxx:41; 2: Assuming 'argc' is non-null in /opt/root_src/gui/gui/src/TRootApplication.cxx:79; 3: Taking false branch in /opt/root_src/gui/gui/src/TRootApplication.cxx:79; 4: Assuming the condition is true in /opt/root_src/gui/gui/src/TRootApplication.cxx:82; 5: Loop condition is true. Entering loop body in /opt/root_src/gui/gui/src/TRootApplication.cxx:82; 6: Taking true branch in /opt/root_src/gui/gui/src/TRootApplication.cxx:83; 7: Assuming the c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:59758,secur,security,59758,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,uiltins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to fun,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:5112,secur,security,5112,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,ulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case kIsEnum:' at line 110 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Control jumps to 'case kULong64_t:' at line 126 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:111; 18: Forming reference to null pointer in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:126; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:128:28: warning: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'helper') [clang-analyzer-core.NullDereference]; 1: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 3: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 6: Calling 'TEmulatedMapProxy::ReadMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:247; 7: Assuming the condition is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapPro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:37541,Access,Access,37541,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"ull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we’ve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deploy",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:2324,secur,security,2324,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,uments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:42289,secur,security,42289,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,uments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builtins/lz4/lz4frame.c:1395; 5: 'dstBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1403; 6: Taking true branch in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:42934,secur,security,42934,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,uments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23218,secur,security,23218,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,uments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:120; /opt/root_src/core/clib/src/mrealloc.c:142:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:28362,secur,security,28362,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,unction 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:2846,secur,security,2846,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,undary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:28066,secur,security,28066,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,undary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:34474,secur,security,34474,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,undary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:37098,secur,security,37098,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,undary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7726; /opt/root_src/net/http/civetweb/civetweb.c:7735:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:37754,secur,security,37754,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,update xrootd hash,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11106:14,hash,hash,14,https://root.cern,https://github.com/root-project/root/pull/11106,1,['hash'],['hash']
Security,upport length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:41118,secur,security,41118,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,upport length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:53939,secur,security,53939,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"ur issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When changing the compression settings using hadd, using the same compression level used by the input file won't trigger a recompression of the branches in the output file, even with a different algorithm. ie. Passing -f301 with a 101 compressed input file results in a ""301"" compressed file but with 101 compressed branches. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; I would expect the output file's branches to be recompressed with the provided compression algorithm. ie. Passing -f301 with a 101 compressed input file results in a genuine 301 compressed file with 301 compressed branches. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. 1. Get the compression settings of any .root file, for example the 101 compressed [dimuon dataset](http://opendata.web.cern.ch/record/12341).; 2. Run `hadd` and change the compression to a different algorithm of the same level, for example 101 -> 201 or 403 -> 303:; `hadd -f201 fake_dimuon_201.root orig_dimuon_101.root`; 3. You can validate the weird behaviour by performing an intermediate conversion:; `hadd -f202 real_202_out.root orig_dimuon_101.root` -> `hadd -f201 real_dimuon_201.root real_dimuon_202.root`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT Version 6.27/01; 2. Linux CentOS 8 + Linux Debian 11; 3. Built from source. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11245:1724,validat,validate,1724,https://root.cern,https://github.com/root-project/root/issues/11245,1,['validat'],['validate']
Security,ure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:29578,secur,security,29578,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,ure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:30427,secur,security,30427,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,us functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1459; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:93:5: warning: Value stored to 'sSignalHandlerActive' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSignalHandlerActive' is never read in /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:93; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:102:11: warning: Value stored to 'sSignalHandlerActive' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSignalHandlerActive' is never read in /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:102; /opt/root_src/core/unix/src/TUnixSystem.cxx:689:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:689; /opt/root_src/core/unix/src/TUnixSystem.cxx:4246:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide b,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:3173,secur,security,3173,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"ustrate the problem, I take a bin size of 5 GeV (else the problem will not appear, which appears to be normal due to the technical explanation given in the attachement). *The nll is computed by roofit, with two methods that give the same result (probably they use the same internal function). *The nll is computed ""by hand"" :; -I could reproduce exactly the value of nll of roofit if I ""forget"" to multiply the pdf by the bin size *only in the sum part* of the likelihood formula. -If I compute it in what I think is ""correct"", I could not find the value obtain by roofit. Hypothesis of explanation : createNLL does not anticipate the possibility of binned pdf. More details : pdf : 3 slides; [Minimum_Problem_NLL.pdf](https://github.com/root-project/root/files/6383379/Minimum_Problem_NLL.pdf). A minimum reproducible example is given here :; /afs/cern.ch/work/e/escalier/public/ForOthers/ForRootExperts/ProblemNLL. (github prevents to attach a .C file : it would be useful to authorize it if we wish to keep persistent minimum examples for the future). Remark : the anomaly would not have consequence for the result of a fit. But if the bin size would be variable, maybe there would be (I don't know). Anyway, there is incompatibility of treatment of the bin size for the total of the pdf and the value of pdf in a given bin. ### Expected behavior; the expected value is given in the example : roofit does not find the mathematical correct value because it forgets to multiply by the bin size for the ""sum part"" (while it does not forget to multiply by the bin size for the ""total prediction"" part. ### To Reproduce; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. a) put : do_mistake_computation_find_official_roofit_value=1 for reproducing the result of roofit. b) put do_mistake_computation_find_official_roofit_value=0 for reproducing what I think is the correct value (different to the one of roofit). 3. How to r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8005:1340,authoriz,authorize,1340,https://root.cern,https://github.com/root-project/root/issues/8005,1,['authoriz'],['authorize']
Security,"utorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; sh: 1: ipython3: not found; Traceback (most recent call last):; File ""/github/home/ROOT-CI/roottest/python/JupyROOT/nbdiff.py"", line 197, in <module>; retCode = canReproduceNotebook(nbFileName, kernelName, needsCompare); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; ```; ```; Exception occurred during processing of request from ('127.0.0.1', 53110); FTraceback (most recent call last):; File ""/usr/lib/python3.12/socketserver.py"", line 318, in _handle_request_noblock; self.process_request(request, client_address); ```. ### Reproducer. Grab the image:; ```; $ docker run --security-opt label=disable -it registry.cern.ch/root-ci/ubuntu2404:buildready; ```; Then:; ``` ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; git fetch https://github.com/root-project/root 9fc748389d42ce698fe8654ac177f9cf9a542f5c; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin 7d45ab2957efacf7b6685f4ae126a9fed243494c:fix-15733; git checkout fix-15733; git rebase 531620f59e898e5ec809043135583d15b0d151a6; ); (; git clone --branch master --single-branch https://github.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:4437,secur,security-opt,4437,https://root.cern,https://github.com/root-project/root/issues/16242,1,['secur'],['security-opt']
Security,v6-26-02 fails to build with XROOTD download hash mismatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10527:45,hash,hash,45,https://root.cern,https://github.com/root-project/root/issues/10527,1,['hash'],['hash']
Security,v622 Prevent Access of deleted object during hadd tear down,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9027:13,Access,Access,13,https://root.cern,https://github.com/root-project/root/pull/9027,1,['Access'],['Access']
Security,v624 Prevent Access of deleted object during hadd tear down,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9026:13,Access,Access,13,https://root.cern,https://github.com/root-project/root/pull/9026,1,['Access'],['Access']
Security,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11109:28,hash,hash,28,https://root.cern,https://github.com/root-project/root/pull/11109,1,['hash'],['hash']
Security,vetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:25559,secur,security,25559,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18899; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18914:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18914; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18969:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support le,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:74995,secur,security,74995,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:18984:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18984; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19012:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19012; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19071:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:77150,secur,security,77150,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:19012:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19012; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19071:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19071; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19143:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:77899,secur,security,77899,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:19071:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19071; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19143:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19143; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19234:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:78648,secur,security,78648,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:19143:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19143; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19234:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19234; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19241:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:79397,secur,security,79397,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:19234:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19234; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19241:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19241; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19242:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:80146,secur,security,80146,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,vetweb/civetweb.c:19241:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19241; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:19242:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:19242; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/net/src/TNetFile.cxx:697:7: warning: Value stored to 'read' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'read' is never read in /opt/root_src/net/net/src/TNetFile.cxx:697; /opt/root_src/net/net/src/TNetFile.cxx:722:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/net/net/src/TNetFile.cxx:722; /opt/root_src/net/net/src/TNetFile.cxx:728:7: warning: Value stored to 'update' is ne,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:80895,secur,security,80895,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"w singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:; * Symlink resolution -- it implements a memory efficient representation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|; |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|; |osx 10.14| roottest-root-tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:1074,hash,hash,1074,https://root.cern,https://github.com/root-project/root/pull/4717,1,['hash'],['hash']
Security,warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does n,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:20753,secur,security,20753,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does n,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:21400,secur,security,21400,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2697; /opt/root_src/core/clib/src/Demangle.c:2711:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:22047,secur,security,22047,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2711; /opt/root_src/core/clib/src/Demangle.c:2752:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:22694,secur,security,22694,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:120; /opt/root_src/core/clib/src/mrealloc.c:142:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:142; /opt/root_src/core/clib/src/Demangle.c; /opt/root_src/core/clib/src/attach.c; /opt/root_src/core/clib/src/m,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:28483,secur,security,28483,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,web/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8638; /opt/root_src/net/http/civetweb/civetweb.c:8656:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:42299,secur,security,42299,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,werGUI.cxx:509:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/graf3d/gviz3d/src/TStructViewerGUI.cxx:509; /opt/root_src/graf3d/x3d/src/x3d.c:730:10: warning: Value stored to 'index2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'index2' is never read in /opt/root_src/graf3d/x3d/src/x3d.c:730; /opt/root_src/graf3d/x3d/src/x3d.c:761:10: warning: Value stored to 'index2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'index2' is never read in /opt/root_src/graf3d/x3d/src/x3d.c:761; /opt/root_src/graf3d/x3d/src/x3d.c:3166:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3166; /opt/root_src/graf3d/x3d/src/x3d.c:3170:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3170; /opt/root_src/graf3d/x3d/src/x3d.c:3174:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Repla,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:59104,secur,security,59104,https://root.cern,https://github.com/root-project/root/issues/7531,1,['secur'],['security']
Security,which is more secure. BP of https://github.com/root-project/root/pull/15134,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15165:14,secur,secure,14,https://root.cern,https://github.com/root-project/root/pull/15165,1,['secur'],['secure']
Security,"x11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash' requested here; _M_rehash(__do_rehash.second, __saved_state);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable_policy.h:739:16: note: in instantiation of member function 'std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node' requested here; return __h->_M_insert_unique_node(__n, __code, __p)->second;; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/unordered_map.h:978:16: note: in instantiation of member function 'std::__detail::_Map_base<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:1980,hash,hash,1980,https://root.cern,https://github.com/root-project/root/issues/8642,1,['hash'],['hash']
Security,"x55ed24b27570, sig=kSigSegmentationViolation) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:3619; #5 <signal handler called>; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper (this=this; entry=0x55ed2cce0be0, Ty=<optimized out>, Ty; entry=0x55ed2ccd12c0) at /usr/local/src/conda-prefix/include/llvm/ADT/PointerIntPair.h:174; #7 0x00007f54c1df343b in clang::CodeGen::CodeGenTBAA::getBaseTypeInfo (this=0x55ed2cce0be0, QTy=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:354; #8 0x00007f54c1df3edc in clang::CodeGen::CodeGenTBAA::getTypeInfo (this=this; entry=0x55ed2cce0be0, QTy=QTy; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:204; #9 0x00007f54c1df44cc in clang::CodeGen::CodeGenTBAA::getAccessInfo (this=0x55ed2cce0be0, AccessType=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenTBAA.cpp:227; #10 0x00007f54c1d78b6b in clang::CodeGen::CodeGenModule::getTBAAAccessInfo (this=<optimized out>, AccessType=..., AccessType; entry=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenModule.cpp:668; #11 0x00007f54c1f3a0aa in clang::CodeGen::CodeGenFunction::MakeAddrLValue (Source=clang::CodeGen::AlignmentSource::Type, T=..., Addr=..., this=0x7fffe1b042c0) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CodeGenFunction.h:2126; #12 EmitDeclInit (DeclPtr=..., D=..., CGF=...) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:37; #13 clang::CodeGen::CodeGenFunction::EmitCXXGlobalVarDeclInit (this=0x7fffe1b042c0, D=..., DeclPtr=0x55ed2cd76b08, PerformInit=<optimized out>) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/CGDeclCXX.cpp:215; #14 0x00007f54c1f3ad90 in clang::CodeGen::CodeGenFunction::GenerateCXXGlobalVarDeclInitFunc (this=this; entry=0x7fffe1b042c0, Fn=0x55ed2cd76b78, D=0x55ed2ccd0f20, Addr=Addr; entry=0x55ed2cd76b08, PerformInit=PerformInit; entry=true) at /usr/local/src/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:2810,Access,AccessType,2810,https://root.cern,https://github.com/root-project/root/issues/9595,1,['Access'],['AccessType']
Security,x:378; /opt/root_src/io/io/src/TKey.cxx:82:1: warning: non-POD static (TString) [clazy-non-pod-global-static]; /opt/root_src/io/io/src/TMakeProject.cxx:39:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/io/io/src/TMakeProject.cxx:39; /opt/root_src/io/io/src/TMapFile.cxx:293:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/io/src/TMapFile.cxx:293; /opt/root_src/io/io/src/TMapFile.cxx:623:20: warning: Access to field 'fNext' results in a dereference of a null pointer (loaded from field 'fLast') [clang-analyzer-core.NullDereference]; 1: Assuming field 'fWritable' is true in /opt/root_src/io/io/src/TMapFile.cxx:599; 2: Left side of '||' is false in /opt/root_src/io/io/src/TMapFile.cxx:599; 3: Assuming field 'fMmallocDesc' is non-null in /opt/root_src/io/io/src/TMapFile.cxx:599; 4: Taking false branch in /opt/root_src/io/io/src/TMapFile.cxx:599; 5: Assuming 'obj' is equal to field 'fGetting' in /opt/root_src/io/io/src/TMapFile.cxx:601; 6: '?' condition is false in /opt/root_src/io/io/src/TMapFile.cxx:601; 7: 'lock' is false in /opt/root_src/io/io/src/TMapFile.cxx:603; 8: Taking false branch in /opt/root_src/io/io/src/TMapFile.cxx:603; 9: Assuming 'name' is null in /opt/root_src/io/io/src/TMapFile.cxx:609; 10: Left side of '&&' is false in /opt/root_src/io/io/src/TMapFile.cxx:609; 11: Calling 'TMapFile::Remove' in /opt/root_src/io/io/src/TMapFile.cxx:614; 12: Field 'fWritable' is true in /opt/root_src/io/io/src/TMapFile.cxx:717; 13: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:92425,Access,Access,92425,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,x:849; 33: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:849; 34: Assuming 'justify' is not equal to kTextCenterX in /opt/root_src/gui/gui/src/TGFont.cxx:854; 35: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:854; 36: Assuming 'justify' is not equal to kTextRight in /opt/root_src/gui/gui/src/TGFont.cxx:856; 37: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:856; 38: Assuming 'n' is < field 'fNumChunks' in /opt/root_src/gui/gui/src/TGFont.cxx:846; 39: Loop condition is true. Entering loop body in /opt/root_src/gui/gui/src/TGFont.cxx:846; 40: Assuming 'y' is not equal to field 'fY' in /opt/root_src/gui/gui/src/TGFont.cxx:849; 41: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:849; 42: The value 1 is assigned to 'curLine' in /opt/root_src/gui/gui/src/TGFont.cxx:850; 43: The right operand of '-' is a garbage value in /opt/root_src/gui/gui/src/TGFont.cxx:853; /opt/root_src/gui/gui/src/TGFont.cxx:2129:11: warning: Array access results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1700; 3: Assuming 's' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 4: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1705; 5: Calling 'TGFontPool::GetFont' in /opt/root_src/gui/gui/src/TGFont.cxx:1709; 6: 'font' is non-null in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 7: Left side of '||' is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 8: Assuming the condition is false in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 9: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1557; 10: Assuming 'f' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 11: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1564; 12: Assuming 'nf' is null in /opt/root_src/gui/gui/src/TGFont.cxx:1571; 13: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:1571; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:25098,access,access,25098,https://root.cern,https://github.com/root-project/root/issues/7533,1,['access'],['access']
Security,"y checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:47262,secur,security,47262,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,y in /opt/root_src/net/http/civetweb/civetweb.c:18066; 15: Field 'stop_flag' is equal to 0 in /opt/root_src/net/http/civetweb/civetweb.c:18072; 16: Left side of '&&' is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 17: Assuming the condition is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 18: Taking true branch in /opt/root_src/net/http/civetweb/civetweb.c:18072; 19: Calling 'accept_new_connection' in /opt/root_src/net/http/civetweb/civetweb.c:18073; 20: Assuming the condition is false in /opt/root_src/net/http/civetweb/civetweb.c:17937; 21: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:17937; 22: 1st function call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:72959,secur,security,72959,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,y' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to funct,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:39361,secur,security,39361,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"yout version 7 of class 'RooRealVar' differs from ; the in-memory layout version 7:; RooAbsBinning _binning; //; vs; unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning; //; ```. The warning is uexpected because:; * it comes from the RooRealVar class that was not changed in 068465e; * it only appears now after seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info for RooRealVar from the [categories_v624.root reference file](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/categories_v624.root):; ```; root [6] _file0->ShowStreamerInfo(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset= 0 type= 8 Symmetric error associated with current value; double _asymErrLo offset= 0 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset= 0 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset= 0 type=64; ```. ### Expected b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:1371,checksum,checksum,1371,https://root.cern,https://github.com/root-project/root/issues/8791,1,['checksum'],['checksum']
Security,z4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:32170,secur,security,32170,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:16816,secur,security,16816,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:17606,secur,security,17606,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1838; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:18396,secur,security,18396,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1874:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1874; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:19186,secur,security,19186,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1875:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1875; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks intro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:19976,secur,security,19976,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1900; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:22196,secur,security,22196,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1907:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1907; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:22986,secur,security,22986,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1948:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1948; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:23776,secur,security,23776,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1963:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1963; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:24566,secur,security,24566,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:1964:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1964; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks intro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:25356,secur,security,25356,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:28216,secur,security,28216,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:2096:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2096; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:29006,secur,security,29006,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:2115:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2115; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:29796,secur,security,29796,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:2129:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2129; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:30586,secur,security,30586,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4/lz4.c:2132:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2132; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Ca,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:31376,secur,security,31376,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,z4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4hc.c:1167; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1167; 9: 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4hc.c:1168; 10: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1168; 11: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1578:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1578; /opt/root_src/builtins/zstd/compress/fse_compress.c:226:47: warning: Branch condition evaluates to a garbage value [clang-analyzer-core.uninitialized.Branch]; 1: Calling 'FSE_compress2' in /opt/root_src/builtins/zstd/compress/fse_compress.c:701; 2: Taking false branch in /opt/root_src/builtins/zstd/compress/fse_compress.c:695; 3: Calling 'FSE_compress_wksp' in /opt/root_src/builtins/zstd/compress/fse_compress.c:696; 4: 'tableLog' is <= 12 in /opt/root_src/builtins/zstd/compress/fse_compress.c:650; 5: expanded from macro 'FSE_COMPRESS_WKSP_SIZE_U32' in /opt/root_src/builtins/zstd/common/fse.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:66180,secur,security,66180,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"zation -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|; |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|; |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|; |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|; |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:; |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|; |osx 10.14| roottest-cling| 88,96|1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:1416,hash,hash,1416,https://root.cern,https://github.com/root-project/root/pull/4717,1,['hash'],['hash']
Security,"zed out>, args=<optimized out>, nargsf=<optimized out>, kwnames=0x0); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Objects/classobject.c:89; #38 0x00007faf4b42df36 in _PyObject_Vectorcall (kwnames=0x0, nargsf=1, args=0x7ffdb628f890, callable=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #39 _PyObject_FastCall (nargs=1, args=0x7ffdb628f890, func=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:147; ...; ```. Unfortunately all I could decipher from this is that things go south while accessing the `DataVector<xAOD::TauJet_v3>` type in Python. That access itself happens in a fairly complicated way itself, in this helper code:. https://gitlab.cern.ch/atlas/athena/-/blob/master/Control/xAODRootAccess/python/GenerateDVIterators.py. As before, I found that by explicitly accessing types ""in the right order"", I can work around the issue. (See: https://gitlab.cern.ch/atlas/athena/-/merge_requests/44843) But I'd really like to understand what the underlying issue actually is. Note that this problem only shows up in a debug build. In an optimised build the test in question runs just fine. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The code should not encounter an assertion inside LLVM/Cling. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Unfortunately this would be pretty involved to describe. :frowning: Especially the setup that I used with Cling compiled in Debug mode. So I'm rather just hoping for input on how I myself could debug this further. ### Setup; <!--; 1. ROOT version; 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:11144,access,accessing,11144,https://root.cern,https://github.com/root-project/root/issues/8578,1,['access'],['accessing']
Security,"…: do not validate arch.'. This patch was fixing https://sft.its.cern.ch/jira/browse/ROOT-6966 and real solution was deployed later on cling side, allowing to load target options and etc. from PCH in CIFactory.cpp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1796:10,validat,validate,10,https://root.cern,https://github.com/root-project/root/pull/1796,1,['validat'],['validate']
Security,"…ference types."". This patch reduces deserializing of lazy template specializations from the PCH as it reduces the hash collisions (now we distinguish between pointer and reference types).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1810:115,hash,hash,115,https://root.cern,https://github.com/root-project/root/pull/1810,1,['hash'],['hash']
Security,"…ue,Array}. when they are attached to the same branch.; TNamedBranchProxy did not implement a Hash method.; Therefore when adding TNamedBranchProxy instances to the THashList dedicated to their bookkeping in TTreeReader TObject::Hash was used.; Unfortunately when trying to find the TNamedBranchProxies, their name was used and the hash was built differently by THashList (based on the name).; In order to fix this the following steps were taken.; - THashList was replaced by an unordered_map with names as keys and unique_ptr<TNamedBranchProxy> as values. The unique_ptr is used to automatically manage ownership.; - The key is not the name of the branch as known by the branch any more but rather the name the user inputs in the constructor of the TTreeReader{Array,Value}.; - An exception is thrown in debug mode if the system tries to push in the TTreeReader collection of proxy with a name held by a proxy in that collection.; - The methods of TTreeReader were adapted to use this new container as well as the code in TTreeReaderValue and TTreeReaderArray. A real usecase from CMS where the mass of the W boson is studied shows a significant speedup (30%).; The code uses TDataFrame and several nodes are created which read from the same branch in an input tree which holds weights in a collection.; This configuration stressed the performance degradation pattern fixed by this commit as it triggered multiple times the deserialisation of the ""weights branch"". Thanks to Elisabetta Manca and Lorenzo Bianchini for providing the bug report and initial reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1784:94,Hash,Hash,94,https://root.cern,https://github.com/root-project/root/pull/1784,6,"['Hash', 'hash']","['Hash', 'hash']"
Testability," 	1358 - roottest-cling-stl-dicts-build (Failed); 	1611 - roottest-root-dataframe-test_snapshot_copyaddresses (Failed); 	1753 - roottest-root-io-transient-base-WriteFile (Failed); 	1754 - roottest-root-io-transient-base-hadd_autoload (Failed); 	1799 - roottest-root-meta-countIncludePaths (Failed); 	1841 - roottest-root-meta-MakeProject-runaliceesd (Failed); 	1852 - roottest-root-meta-ROOT-7462-make (Failed); 	2229 - roottest-root-tree-cache-perfstattest-libevent-build (Failed); 	2230 - roottest-root-tree-cache-perfstattest (Failed); ```; * You can ignore the failures for numba, as I don't have that installed.; * The math tests seem to fail because of strict tolerances and errors related to SIMD being enabled (I used `-march=native` on a machine that has AVX2 support). I suggest enabling SIMD on at least one of the CI builds in Jenkins to cover that if that's not the case now. ; * The test `roottest-root-tree-cache-perfstattest-libevent-build` and some others fail because of a build type not being set (I just set `CMAKE_CXX_FLAGS` and not `CMAKE_BUILD_TYPE`, which should be a valid configuration). It's fine to require setting a build type for testing, but having a fallback for when it's not set is probably better. In CI a build type is usually set, so you won't see these failures in Jenkins.; * Some of the other tests fail due to `unresolved while linking` errors from cling, which could be something related to the `-fPIE` fixes.; * The test loadAllLibs may fail if `Loading library libVMCLibrary.so [rc = -1]` shows in the output, which can happen if VMC is installed as a separate package somewhere. Having VMC installed can also make other tests fail as well, as it will try to load wrong ROOT libraries from another build. I had to uninstall both ROOT and VMC on my machine to be able to run the tests, which is not great. I think it is a good idea to have ROOT (and maybe VMC) installed with yum on at least one of the build nodes to ensure this sort of problem doesn't happ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436:2512,test,test,2512,https://root.cern,https://github.com/root-project/root/issues/9436,1,['test'],['test']
Testability," #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t, uint32_t&) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:629]\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:646]\n"" (of type char const*); [ FAILED ] RNTuple.SerializeEnvelope (0 ms); [ RUN ] RNTuple.SerializeFrame; [ OK ] RNTuple.SerializeFrame (0 ms); [ RUN ] RNTuple.SerializeFeatureFlags; [ OK ] RNTuple.SerializeFeatureFlags (0 ms); [ RUN ] RNTuple.SerializeLocator; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:341: Failure; Failed; unsupported locator",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:12189,test,test,12189,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability," #0 0x51f5a8 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51f5a8); 418: #1 0x7f4f0c6ce44f in TObject::operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x2f544f); 418: #2 0x7f4f0c8251a6 in TList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x44c1a6); 418: #3 0x7f4f0c80cb9f in THashList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x433b9f); 418: #4 0x7f4f0d640e30 in TDirectoryFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x285e30); 418: #5 0x7f4f0d678f08 in TFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bdf08); 418: #6 0x7f4f0d678050 in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd050); 418: #7 0x7f4f0d67898d in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd98d); 418: #8 0x52289f in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x52289f). [...]. 418: previously allocated by thread T0 here:; 418: #0 0x51ea88 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51ea88); 418: #1 0x7f4f0c71e9ce in TStorage::ObjectAlloc(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x3459ce); 418: #2 0x7f4f10a65df5 in ROOT::new_TTree(void*) G__Tree.cxx; 418: #3 0x7f4f0c9094d2 in TClass::NewObject(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x5304d2); 418: #4 0x7f4f0c90943e in TClass::New(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x53043e); 418: #5 0x7f4f0d765626 in TKey::ReadObjectAny(TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x3aa626); 418: #6 0x7f4f0d645eb0 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x28aeb0);",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10096:1691,Test,TestBody,1691,https://root.cern,https://github.com/root-project/root/issues/10096,3,"['Test', 'test']","['TestBody', 'test', 'testBulkApiVarLength']"
Testability, #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNumpyArrays-py; 1085/1231 Test #1081: tutorial-dataframe-df014_CSVDataSource-py ........................... Passed 7.49 sec; Start 1090: tutorial-dataframe-df031_Stats-py; 1087/1231 Test #1085: tutorial-dataframe-df021_createTGraph-py ............................ Passed 3.08 sec; Start 1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py; 1088/1231 Test #1086: tutorial-dataframe-df024_Display-py ................................. Passed 4.99 sec; 1089/1231 Test #1084: tutorial-dataframe-df019_Cache-py ................................... Passed 6.22 sec; 1090/1231 Test #1090: tutorial-dataframe-df031_Stats-py ................................... Passed 3.39 sec; 1095/1231 Test #1087: tutorial-dataframe-df026_AsNumpyArrays-py ........................... Passed 6.89 sec; 1103/1231 Test #1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py ...................... Passed 6.12 sec. Start 635: tutorial-graphs-timeSeriesFromCSV; Start 636: tutorial-graphs-timeSeriesFromCSV_TDF; 655/1231 Test #635: tutorial-graphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:12902,Test,Test,12902,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability," #5 <signal handler called>; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:8300,test,testing,8300,https://root.cern,https://github.com/root-project/root/issues/12428,2,"['Test', 'test']","['Test', 'testing']"
Testability, - [ ] Abs; - [ ] Acos; - [ ] Acosh; - [ ] And; - [ ] ArgMax; - [ ] ArgMin; - [ ] Asin; - [ ] Asinh; - [ ] Atan; - [ ] Atanh; - [ ] BitShift; - [ ] Cast; - [ ] Ceil; - [ ] Clip; - [ ] Compress; - [ ] ConcatFromSequence; - [ ] Constant; - [ ] ConstantOfShape; - [ ] ConvInteger; - [ ] ConvTranspose; - [ ] Cos; - [ ] Cosh; - [ ] CumSum; - [ ] DepthToSpace; - [ ] DequantizeLinear; - [ ] Det; - [ ] Div; - [ ] Dropout; - [ ] Einsum; - [ ] Elu; - [ ] Equal; - [ ] Erf; - [x] Exp; - [ ] Expand; - [ ] EyeLike; - [ ] Flatten; - [ ] Floor; - [ ] Gather; - [ ] GatherElements; - [ ] GatherND; - [ ] GlobalLpPool; - [ ] GlobalMaxPool; - [ ] Greater; - [ ] GridSample; - [ ] HardSigmoid; - [ ] Hardmax; - [ ] Identity; - [ ] If; - [ ] IsInf; - [ ] IsNaN; - [ ] LRN; - [ ] LeakyRelu; - [ ] Less; - [ ] Log; - [ ] Loop; - [ ] LpNormalization; - [ ] LpPool; - [ ] MatMul; - [ ] MatMulInteger; - [ ] Max; - [ ] MaxRoiPool; - [ ] MaxUnpool; - [ ] Mean; - [ ] Min; - [ ] Mod; - [ ] Mul; - [ ] Multinomial; - [ ] Neg; - [ ] NonMaxSuppression; - [ ] NonZero; - [ ] OneHot; - [ ] Optional; - [ ] OptionalGetElement; - [ ] OptionalHasElement; - [ ] Or; - [ ] PRelu; - [ ] Pad; - [ ] Pow; - [ ] QLinearConv; - [ ] QLinearMatMul; - [ ] QuantizeLinear; - [ ] RandomNormal; - [ ] RandomNormalLike; - [ ] RandomUniform; - [ ] RandomUniformLike; - [ ] Reciprocal; - [ ] ReduceL1; - [ ] ReduceL2; - [ ] ReduceLogSum; - [ ] ReduceLogSumExp; - [ ] ReduceMax; - [ ] ReduceMean; - [ ] ReduceMin; - [ ] ReduceSum; - [ ] ReduceSumSquare; -,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10360:1286,Log,Log,1286,https://root.cern,https://github.com/root-project/root/issues/10360,1,['Log'],['Log']
Testability," - to fix the problem. as it provides ; 1. neither the parameters used in the top call ; 2. nor the actual error code returned by the underlying TTF library. **Proposed solution:** ; (inspired by a quick look at handling in `graf3d/ftgl/[inc src]/FTSize.[h cxx] `); ```diff; diff --git a/graf2d/graf/src/TTF.cxx b/graf2d/graf/src/TTF.cxx; index b8acf771d9..2f844b98da 100644; --- a/graf2d/graf/src/TTF.cxx; +++ b/graf2d/graf/src/TTF.cxx; @@ -570,8 +570,9 @@ void TTF::SetTextSize(Float_t textsize); }; ; Int_t tsize = (Int_t)(textsize*kScale+0.5) << 6;; - if (FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72)); - Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size"");; + FT_Error err = FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72);; + if (err); + Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size: %d (input size %f, calc. size %x)"", err, textsize, tsize);; }; ; ////////////////////////////////////////////////////////////////////////////////; ```. Patch tested locally based on ROOT v6.26.10 under Debian 12 (as far as I can tell this part of the file was not changed since the initial commit so the ROOT version should not matter).; The one thing where I am unsure is whether the calculated size (`tsize`) should be printed in hexadecimal (as it is offseted by multiple bits) or as standard integer. **Effect:**; In our case it allowed to find out that the automatic calculation of the TextSize value provided to the call was getting haywire due to a too small canvas (1x1 pixel), leading to large or negative values for `tsize`, maybe due to slightly different floating point calculations in Debian12. ### ROOT version. At least `v6.22` to `v6.26.10` but corresponding block seems unchanged since the initial commit in 2003, local compilation test on `master` worked. ### Installation method. Build from Source within FairSoft (v6.22 and v6.26), Build from source standalone (master). ### Operating system. Debian12, Ubuntu 20.04, Ubuntu 22.04. ### Additional conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592:1590,test,tested,1590,https://root.cern,https://github.com/root-project/root/issues/14592,1,['test'],['tested']
Testability," -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+; -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+...; Checking FromHumanReadableSize; Checking ToHumanReadableSize; Checking 1024 vs 1.024KiB an 1KB; Checking 2097152 vs 2.09715MiB an 2MB; Checking 4294967296 vs 4.29497GiB an 4GB; Checking 8796093022208 vs 8.79609TiB an 8TB; Checking 18014398509481984 vs 18.0144EiB an 16EB; Checking 16 vs 16B and 16B; Checking 24576 vs 24.576KiB and 24KB; Checking 3.77487e+07 vs 37.7487MiB and 36MB; Checking 5.79821e+10 vs 57.9821GiB and 54GB; Checking 8.90604e+13 vs 89.0604TiB and 81TB; Checking 1.36797e+17 vs 136.797EiB and 121.5EB; Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB; Checking 3.22744e+23 vs 322.744YiB and 273.375YB; (int) 0. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadabl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:1640,TEST,TEST,1640,https://root.cern,https://github.com/root-project/root/pull/4257,1,['TEST'],['TEST']
Testability," ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2381,Test,Test,2381,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability," // tp_del; diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx; index f9e92f9c8c..5da48364ac 100644; --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx; +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx; @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {; ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;; ; CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");; - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;; + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;; ; CPyCppyy_NoneType.tp_traverse = (traverseproc)0;; CPyCppyy_NoneType.tp_clear = (inquiry)0;; ~~~; This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas?. ~~~; Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault.; 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0; (gdb) bt; #0 0x00007ffff7c06cc0 in deduce_unreachable (); from /lib64/libpython3.11.so.1.0; #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0; #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (); from /lib64/libpython3.11.so.1.0; #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0; #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0; #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0; #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0; #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6; #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6; #9 0x00005555555550",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799:3876,test,tests,3876,https://root.cern,https://github.com/root-project/root/issues/10799,1,['test'],['tests']
Testability," /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:2555,test,test-products,2555,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability," /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:871; #38 0x00002b4bd1cedb74 in ROOT::TSchemaRule::SetSourceClass (this=0xc24c900, classname=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TSchemaRule.cxx:459; #39 0x00002b4bd1cd28b8 in ROOT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:13650,test,tests,13650,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability," /usr/include/c++/8/bits/unique_ptr.h:345; #26 0x00007fffa282b4b0 in HandleInterpreterException (metaProcessor=0x11f260fc0, input_line=0x11efcdaa0 "".X /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C"", compRes=; 0x7fffff15750c: cling::Interpreter::kSuccess, result=result; entry=0x7fffff157520) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ADT/StringRef.h:86; ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running a compiles unit test (gtest):. ~~~; 314/1192 Test #204: gtest-roofit-RDataFrameHelpers-test-testActionHelpers ...............***Failed 111.03 sec; Running main() from gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 2 tests from RooAbsDataHelper; [ RUN ] RooAbsDataHelper.MTConstruction; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa13ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa08f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa085a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa13a9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x173f45850) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fffa13ac1c8 in TUnixSystem::DispatchSignals (this=0x173f45850, sig=k",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:18913,test,test,18913,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['test']
Testability," 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; sh: 1: ipython3: not found; Traceback (most recent call last):; File ""/github/home/ROOT-CI/roottest/python/JupyROOT/nbdiff.py"", line 197, in <module>; retCode = canReproduceNotebook(nbFileName, kernelName, needsCompare); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; ```; ```; Exception occurred during processing of request from ('127.0.0.1', 53110); FTraceback (most recent call last):; File ""/usr/lib/python3.12/socketserver.py"", line 318, in _handle_request_noblock; self.process_request(request, client_address); ```. ### Reproducer. Grab the image:; ```; $ docker run --security-opt label=disable -it registry.cern.ch/root-ci/ubuntu2404:buildready; ```; Then:; ``` ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/art",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:3807,TEST,TEST,3807,https://root.cern,https://github.com/root-project/root/issues/16242,2,['TEST'],['TEST']
Testability, 1KB; Checking 2097152 vs 2.09715MiB an 2MB; Checking 4294967296 vs 4.29497GiB an 4GB; Checking 8796093022208 vs 8.79609TiB an 8TB; Checking 18014398509481984 vs 18.0144EiB an 16EB; Checking 16 vs 16B and 16B; Checking 24576 vs 24.576KiB and 24KB; Checking 3.77487e+07 vs 37.7487MiB and 36MB; Checking 5.79821e+10 vs 57.9821GiB and 54GB; Checking 8.90604e+13 vs 89.0604TiB and 81TB; Checking 1.36797e+17 vs 136.797EiB and 121.5EB; Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB; Checking 3.22744e+23 vs 322.744YiB and 273.375YB; (int) 0. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:; [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m; if (v < std::numeric_limits<T>::max()) {; [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m; auto parseResult = ROOT::F,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:2936,assert,assertHumanReadable,2936,https://root.cern,https://github.com/root-project/root/pull/4257,1,['assert'],['assertHumanReadable']
Testability," 2. https://github.com/root-project/root/pull/12696; 3. https://github.com/root-project/root/pull/12699; 4. https://github.com/root-project/root/pull/12702; 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt; 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`; 5d5e1bcce1 [RF] Fix build due to changed compute() signature; f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU; a3294b725f [RF] Code format for `testNaNPacker.cxx`; 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute; 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute; 84870e3207 [RF] Less use of the `RunContext` class in RooFit; aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12708:920,log,logging,920,https://root.cern,https://github.com/root-project/root/pull/12708,1,['log'],['logging']
Testability," 2: '?' condition is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:81; 3: Value assigned to field 'fParentTree' in /opt/root_src/tree/tree/src/TFriendElement.cxx:87; 4: Assuming field 'fParentTree' is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:88; 5: Left side of '&&' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:88; 6: Assuming 'treename' is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:94; 7: Left side of '&&' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:94; 8: Calling 'TFriendElement::Connect' in /opt/root_src/tree/tree/src/TFriendElement.cxx:104; 9: Calling 'TFriendElement::GetFile' in /opt/root_src/tree/tree/src/TFriendElement.cxx:159; 10: Assuming field 'fFile' is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 11: Left side of '||' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 12: Calling 'TObject::IsZombie' in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 13: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 14: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 15: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 16: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 17: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 18: Returning from 'TObject::IsZombie' in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 19: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 20: Assuming the condition is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 21: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 22: Called C++ object pointer is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:192; /opt/root_src/tree/tree/src/TLeaf.cxx:237:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:67949,Test,TestBit,67949,https://root.cern,https://github.com/root-project/root/issues/7429,1,['Test'],['TestBit']
Testability, 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2619,test,test-dataframe-helpers,2619,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-helpers', 'test-dataframe-interface']"
Testability, 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2783,test,test-dataframe-vecops,2783,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-vecops']"
Testability, 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:6462,Test,Test,6462,https://root.cern,https://github.com/root-project/root/pull/10300,2,"['Test', 'test']","['Test', 'test-dataframe-simple']"
Testability," ; It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. ; For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:; - each event with a unique eventID as integer (as in official ROOT tutorial);; - all eventID fixed to 1 as integer;; - all eventID fixed to 2 as integer (equivalent as fixed to 0);; - all eventID fixed to 1 as float;; - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:; ```; eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) ; 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | ; 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | ; 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | ; 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | ; 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | ; 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | ; 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | ; 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | ; 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | ; 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | ; ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); ; But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9115:3253,test,test,3253,https://root.cern,https://github.com/root-project/root/issues/9115,1,['test'],['test']
Testability," <!--; A clear and concise description of what the wrong behavior is.; -->; I have run into issue reported on ROOT forum here:; https://root-forum.cern.ch/t/tpython-problem/46064; and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):; ; const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers; TPyReturn isascii() {; ~~~~~~~~~ ^; /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'; # define isascii(c) __isascii (c); ^; .; .; . ; (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""); (const char *) ""done"". ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. 6.24.6 + python3.8/ 6.26.8 +python3.9; 2. Ubuntu18.04/centos7; 3. compiled locally / provided by remote host. ### Extra note:; I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182:1674,test,tested,1674,https://root.cern,https://github.com/root-project/root/issues/12182,3,['test'],"['test', 'tested']"
Testability," <!--; A clear and concise description of what you expected to happen.; -->; 1. The configurations works, just as it does on the 6.26 branch.; 2. If not feasible, the build error should at least guide the user / package aintainer the configuration option to solve the issue or where to find the solution. ### To Reproduce. 1. Build against the master branch (6.27, 0fafc31efb5a94472af2a6b35ded27796cb141c8) with CMake Flag `-Dbuiltin_llvm=OFF`.; (See the external context for steps to reproduce the behavior with the Nix package manager and Nixpkgs.); 2. See error. ### Setup; <!--; 1. ROOT version; 3. Operating system; 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT version: 6.27.* on the master branch (f9d15227e4c92eac7c6499379912d1ed24d0142b).; 2. Operating system: NixOS (Linux), on a x86_64 machine.; - system: `""x86_64-linux""`; - host os: `Linux 5.10.156, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.11.0`; - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`; 4. Build with Nix and get dependencies from Nixpkgs. ### Additional context. Here is the build steps to reproduce the issue with Nix. It can be proceed as long as `nix` or `docker` is available. Copyright notice: The `default.nix` is derived/taken from [pkgs/applications/science/misc/root/default.nix](https://github.com/NixOS/nixpkgs/blob/2787fc7d1e51404678614bf0fe92fc296746eec0/pkgs/applications/science/misc/root/default.nix) in [Nixpkgs](https://github.com/NixOS/nixpkgs). The original work is licensed under the MIT license by Eelco Dolstra and the Nixpkgs/NixOS contributors. 1. Run `mkdir test-root-6.27`; 2. Place the following files into the `test-root-6.27` directory:. `setup-hook.sh` and `sw_vers.patch` from https://github.com/NixOS/nixpkgs/tree/2787fc7d1e51404678614bf0fe92fc296746eec0/pkgs/applications/science/misc/root. `default.nix`. ```Nix; { stdenv; , lib; , callPack",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:2830,sandbox,sandbox,2830,https://root.cern,https://github.com/root-project/root/issues/11920,1,['sandbox'],['sandbox']
Testability," = ROOT.RDataFrame(""events"", ""edm4hep_events.root""); df.Describe(); ```; returns; ```; In [1]: import ROOT; ...: df = ROOT.RDataFrame(""events"", ""edm4hep_events.root""); ...: df.Describe(); ...: ; Installed ROOT event loop hook.; ---------------------------------------------------------------------------; runtime_error Traceback (most recent call last); Cell In[1], line 3; 1 import ROOT; 2 df = ROOT.RDataFrame(""events"", ""edm4hep_events.root""); ----> 3 df.Describe(). runtime_error: ROOT::RDF::RDFDescription ROOT::RDF::RInterfaceBase::Describe() =>; runtime_error: TTree leaf TrackerHitPlanes.covMatrix[6] has both a leaf count and a static length. This is not supported.; ```. ### Generation of the input file. To generate the input file [edm4hep_events.root.gz](https://github.com/root-project/root/files/14365763/edm4hep_events.root.gz) (38K), use the follwing steps. 1. Load the Key4hep environment:; ```console; source /cvmfs/sw.hsf.org/key4hep/setup.sh; ```; 2. Create a plain EDM4hep file, using the unit tests in EDM4hep.; ```console; git clone -b v00-10-05 https://github.com/key4hep/edm4hep /tmp/edm4hep; cmake -B/tmp/edm4hep/build -S/tmp/edm4hep; make -C/tmp/edm4hep/build; ctest --test-dir /tmp/edm4hep/build; ```; 4. The EDM4hep file will be in `/tmp/edm4hep/build/test/edm4hep_events.root`. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 18 2024, 03:09:46 |; | From heads/master@tags/v6-30-02 |; | With g++ (Ubuntu 13.2.0-4ubuntu3) 13.2.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. Various: Key4hep via /cvmfs/sw.hsf.org/, spack. ### Operating system. Linux Ubuntu 22.04. ### Additional context. In a couple of places [1] [2] the breadcrumbs lead to the JIRA tick",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14790:2367,test,tests,2367,https://root.cern,https://github.com/root-project/root/issues/14790,1,['test'],['tests']
Testability," CPU @ 2.60GHz (x86_64); Build type RelWithDebInfo; Install path /usr/local; Compiler GNU 9.3.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -g -DNDEBUG; C++ -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -g -DNDEBUG; Linker flags:; Executable -rdynamic; Module ; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_vdt builtin_xxhash builtin_zstd ccache clad dataframe exceptions gdml http imt mlp pyroot roofit webgui root7 runtime_cxxmodules shared ssl tmva spectrum uring vdt x11; -- Configuring incomplete, errors occurred!; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeError.log"".; ```; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Setup; * ROOT master; * Ubuntu 18.04; * gcc 9.3; * CMake 3.10.2; <!--; 1. ROOT master; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Possible fix; We could use a workaround similar to #5396 (this diff builds cleanly but is untested).; ```diff; diff --git a/cmake/modules/SearchInstalledSoftware.cmake b/cmake/modules/SearchInstalledSoftware.cmake; index 1778dba165..a6d51ddd6f 100644; --- a/cmake/modules/SearchInstalledSoftware.cmake; +++ b/cmake/modules/SearchInstalledSoftware.cmake; @@ -1779,7 +1779,9 @@ if (testing); add_dependencies(${lib} googletest); if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND; ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL 9); - target_compile_options(${lib} INTERFACE -Wno-deprecated-copy); + # TODO cmake 3.11; + #target_compile_options(${lib} INTERFACE -Wno-deprecated-copy); + SET_PROPERTY(TAR",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:5475,log,log,5475,https://root.cern,https://github.com/root-project/root/issues/7654,1,['log'],['log']
Testability," Checked for duplicates. ### Describe the bug; If the external nhlohman json is used ROOT an error occurs if ROOTEve is used; ```; CMake Error at cmake/DD4hepBuild.cmake:625 (add_library):; Target ""DDEvePlugins"" links to target ""nlohmann_json::nlohmann_json"" but; the target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; Call Stack (most recent call first):; DDEve/CMakeLists.txt:43 (dd4hep_add_plugin); ```; (original discovery via lcg nightlies in DD4hep package build on top of root master. ### Expected behavior. ROOT targets resolve all their dependencies so that other CMake projects can use them without error or change to their cmake; `Find_dependency` added to e.g., ROOTConfig.cmake; or; this needs to be PRIVATE ?; https://github.com/linev/root/blob/88bdfd736f0b859b40973c457b75df9c73b0bbaf/graf3d/eve7/CMakeLists.txt#L139. ### To Reproduce; have a project with a library linking against ROOTEve; Assuming `cmake` is in the PATH (compiler and OS shouldn't matter); ```bash; wget http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/latest/ROOT-HEAD_db894-x86_64-centos7-gcc8-opt.tgz; tar xzf ROOT-HEAD_db894-x86_64-centos7-gcc8-opt.tgz; mkdir test; cd test; cat > CMakeLists.txt <<EOF; CMAKE_MINIMUM_REQUIRED(VERSION 3.12 FATAL_ERROR); PROJECT(myeve); find_package(ROOT REQUIRED); add_library(myeve SHARED myeve.cpp); TARGET_LINK_LIBRARIES(myeve ROOT::ROOTEve); EOF. cat > myeve.cpp <<EOF; int main (); {; return 1;; }; EOF; mkdir build; cd build. # assuming cmake is in the path; cmake -D ROOT_DIR=${PWD}/../../ROOT/HEAD/x86_64-centos7-gcc8-opt/cmake ..; ```. gives; ```; CMake Error at CMakeLists.txt:4 (add_library):; Target ""myeve"" links to target ""nlohmann_json::nlohmann_json"" but the; target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; ```. ### Setup. 1. ROOT master, `cmake ... -Dbuiltin_nlohmannjson=OFF ....`; 2. centos7; 3. build with LCGCmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6784:1225,test,test,1225,https://root.cern,https://github.com/root-project/root/issues/6784,2,['test'],['test']
Testability," ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:153:19: note: in instantiation of function template specialization 'std::make_unique<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >, ROOT::Internal::RDF::FillParHelper<TH1D>, const std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:2908,test,test-jupyroot,2908,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability, D not found.; Module mi not found.; Module �j%�2Vpj%�2VPh%�2V@h%�2V@s%�2V0s%�2V�N��2V�N��2VQ��2VQ��2V@S��2V0S��2V �8�2V not found.; Module 9.0 not found.; ��2V���2V ��2V���2V�Y��2V ��2V�v�2V��2V ��2V 	��2V not found.; Module @�ĉ7VPh%�2V@h%�2V@s%�2V0s%�2V�N��2V�N��2VQ��2VQ��2V@S��2V0S��2V �8�2V not found.; Module !p�w��:�2 not found.; Module ��=\u��&���g|��Xϭ)��ۡc}n?�ʾ��v� �z�� not found.; Module not found.; Module ��ĉ7V99cl_khr_gVs_�0���2V;;e>khr_fp16 not found.; Module not found.; Module GeneticMinimizer not found.; Module �[h�A�2V�[h�<��[h�0�#\h���K\h� not found.; Module �� not found.; Module module not found.; Module base_1621��7VP\�2Vl_khr_f not found.; Module not found.; Module not found.; Module �'��&E'��'�Q|�~ not found.; Module Q����2V�; ��2V����a3 not found.; Module е8�2V��8�2VP�8�2V@�8�2V��8�2V��8�2V�K�Q7V��2V>��� not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pcm file does not exist; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libMathCore_rdict.pcm file does not exist. (int) 2; ```. on the third:. ```; <<< cling interactive line includer >>>: remark: building module 'ROOTVecOps' as '/home/cburr/miniconda3/envs/test/lib/ROOTVecOps.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'ROOTVecOps' [-Rmodule-build]; (truncated but it's similar to above); ```. on the **fourteenth**:. ```; <<< cling interactive line includer >>>: remark: building module 'TMVA' as '/home/cburr/miniconda3/envs/test/lib/TMVA.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'TMVA' [-Rmodule-build]; Module FitterBase not found.; Module (�;cU! ��;cUpJ��� not found.; Module TMVA.pcmoRTTI not found.; Module not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pcm file does not exist; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libMat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:4750,test,test,4750,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability," Error in <TFile::Init>: file test_large_file1.root has an incorrect header length (1677721600) or incorrect end of file length (-1760683648); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:159: Failure; Value of: f; Actual: false; Expected: true; *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-minifile. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100. Fatal: nread == nbytes violated; ~~~; 478/1272 Test #440: gtest-tree-ntuple-v7-test-ntuple-minifile ...........................***Failed 65.92 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. He",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:8982,test,tests,8982,https://root.cern,https://github.com/root-project/root/issues/12426,2,['test'],"['test', 'tests']"
Testability," FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2175,assert,assertEqual,2175,https://root.cern,https://github.com/root-project/root/issues/12429,1,['assert'],['assertEqual']
Testability," Fedora for s390x, RHEL+EPEL for s390x; 3. How you obtained ROOT: Compilation from source. ### Additional context. Thefailing test:; ~~~; 295/1272 Test #250: gtest-roofit-roofitcore-test-testRooProdPdf .........................***Failed 1.02 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1off (13 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2off (16 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:1469,Test,TestDepsAreCond,1469,https://root.cern,https://github.com/root-project/root/issues/12430,1,['Test'],['TestDepsAreCond']
Testability," GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_polling; 3. test_RooFitZMQ_HWM; 4. test_RooFitZMQ_load_balancing; 4. RooFitCore:; 1. testRooGradMinimizer; 2. testBidirMMapPipe; 3. testMPFEnll. From my side (and that of the NL eScience Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:4218,test,testLikelihoodGradientJob,4218,https://root.cern,https://github.com/root-project/root/pull/8294,1,['test'],['testLikelihoodGradientJob']
Testability," Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on uninitialised value(s); ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:1871,assert,assertSparseSelection,1871,https://root.cern,https://github.com/root-project/root/issues/11385,1,['assert'],['assertSparseSelection']
Testability," PyROOT fails with the following error with Python 3.11:; ~~~; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>; import ROOT; ^^^^^^^^^^^; File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>; import cppyy; ^^^^^^^^^^^^; File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>; importlib.import_module(libcppyy_mod_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module; return _bootstrap._gcd_import(name[level:], package, level); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function; ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11; 2. Try ""import ROOT"" in python ...; 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc; 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}; diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx; index 73fb8099b5..2854b2e919 100644; --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx; +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx; @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj); PyObject_GC_Del((PyObject*)pyobj);; }; ; +//----------------------------------------------------------------------------; +static int op_traverse(CPPInstance*, visitproc, void*); +{; + return 0;; +}; +; //----------------------------------------------------------------------------; static int op_clear(CPPInstance* pyobj); {; @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {; Py_T",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799:1006,test,test,1006,https://root.cern,https://github.com/root-project/root/issues/10799,2,['test'],['test']
Testability," RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTup",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:4769,test,tests,4769,https://root.cern,https://github.com/root-project/root/issues/12426,4,['test'],"['test', 'tests']"
Testability," RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (5260 ms); [ RUN ] RNTuple.RandomAccess; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experime",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5718,test,tests,5718,https://root.cern,https://github.com/root-project/root/issues/12426,2,['test'],"['test', 'tests']"
Testability," RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, ui",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:11508,Test,Test,11508,https://root.cern,https://github.com/root-project/root/issues/12426,1,['Test'],['Test']
Testability," ROOT.Helper[ROOT.std.vector[""double""]](). print(""calling helper""). for i in range(2):; print(f""call attempt {i}""); try:; res = ROOT.call_helper(helper); print(""helper call succeeded:"", res); except Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the error message is different/less useful because of the imperfect transaction rollback already noted. (but the same happens instantiating the template through ```TInterpreter::Declare``` as said). ```; declare ret True; creating helper; calling helper; call attempt 0; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug6/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; /home/b/bendavid/pyrootdebug6/test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here; /home/b/bendavid/pyrootdebug6/test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~. Failed to instantiate ""call_helper(Helper<vector<double> >*)""; error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > *>' requested here. Failed to instantiate ""call_helper(Helper<vector<double> >)""; error: type 'const Helper<std::vector<double, std::allocator<double> > >' does not provide a call operator; note: in instantiation of functi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:2644,test,test,2644,https://root.cern,https://github.com/root-project/root/pull/12449,1,['test'],['test']
Testability," RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2685,Assert,AssertionError,2685,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Assert'],['AssertionError']
Testability," System Linux-5.11.0-051100-generic; Processor 4 core Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (x86_64); Build type RelWithDebInfo; Install path /usr/local; Compiler GNU 9.3.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -g -DNDEBUG; C++ -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -g -DNDEBUG; Linker flags:; Executable -rdynamic; Module ; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_vdt builtin_xxhash builtin_zstd ccache clad dataframe exceptions gdml http imt mlp pyroot roofit webgui root7 runtime_cxxmodules shared ssl tmva spectrum uring vdt x11; -- Configuring incomplete, errors occurred!; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeError.log"".; ```; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Setup; * ROOT master; * Ubuntu 18.04; * gcc 9.3; * CMake 3.10.2; <!--; 1. ROOT master; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Possible fix; We could use a workaround similar to #5396 (this diff builds cleanly but is untested).; ```diff; diff --git a/cmake/modules/SearchInstalledSoftware.cmake b/cmake/modules/SearchInstalledSoftware.cmake; index 1778dba165..a6d51ddd6f 100644; --- a/cmake/modules/SearchInstalledSoftware.cmake; +++ b/cmake/modules/SearchInstalledSoftware.cmake; @@ -1779,7 +1779,9 @@ if (testing); add_dependencies(${lib} googletest); if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND; ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL 9); - target_compile_options(${lib} INTERFACE -Wno-deprecated-copy); + # TODO cmake 3.11; + #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:5394,log,log,5394,https://root.cern,https://github.com/root-project/root/issues/7654,1,['log'],['log']
Testability," TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) /Users/user/Projects/ROOT/root/gui/gui/src/TGWindow.cxx:64; [/Users/user/Z/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:147; [/Users/user/Z/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:848; [/Users/user/Z/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:1431; [/Users/user/Z/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) /Users/user/Projects/ROOT/root/gui/gui/src/TGFrame.cxx:1485; [/Users/user/XXX/zevis/test/./frame.exe] main /Users/user/XXX/zevis/test/frame.cxx:81; [/usr/lib/system/libdyld.dylib] start (no debug info); ```. ### Expected behavior; No FPE. ### To Reproduce; ```; #include <TApplication.h>; #include <TGClient.h>; #include <TGFrame.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int ol",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6758:2338,test,test,2338,https://root.cern,https://github.com/root-project/root/issues/6758,1,['test'],['test']
Testability, Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNumpyArrays-py; 1085/1231 Test #1081: tutorial-dataframe-df014_CSVDataSource-py ........................... Passed 7.49 sec; Start 1090: tutorial-dataframe-df031_Stats-py; 1087/1231 Test #1085: tutorial-dataframe-df021_createTGraph-py ............................ Passed 3.08 sec; Start 1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py; 1088/1231 Test #1086: tutorial-dataframe-df024_Display-py ................................. Passed 4.99 sec; 1089/1231 Test #1084: tutorial-dataframe-df019_Cache-py ................................... Passed 6.22 sec; 1090/1231 Test #1090: tutorial-dataframe-df031_Stats-py ................................... Passed 3.39 sec; 1095/1231 Test #1087: tutorial-dataframe-df026_AsNumpyArrays-py ........................... Passed 6.89 sec; 1103/1231 Test #1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py ...................... Passed 6.12 sec. Start 635: tutorial-graphs-timeSeriesFromCSV; Start 636: tutorial-graphs-timeSeriesFromCSV_TDF; 655/1231 Test #635: tutorial-graphs-timeSeriesFromCSV ................................... Passed 0.37 sec; 674/1231 Test #636: tutorial-graphs-timeSeriesFromCSV_TDF ..............................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:13058,Test,Test,13058,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability," This cause it to get stuck when one of them contains a huge amount of files and directories. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; `TBrowser` is opened smoothly without being overwhelmed by the upstream folders. Possible solutions include:; * Provide an option not to follow the symlink; * Provide an option to specify the number of super-directory to show. These solution would require changes of User Interface or even the TBrowser API, but it might be useful when moving the files to somewhere with thinner directory tree is inconvenient/impossible. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Easy:. 1. `cd` into a temporary directory (`/dev/shm` would be convenient); 2. ```bash; mkdir testdir; cd testdir; for i in {1..100000}; do mkdir $i; done; cd 50000; cp /path/to/root/tutorial/hsimple.root .; root; ```; 3. Inside the ROOT interpreter,; ```ROOT; TBrowser tb; ```. Practical:; 1. Install [Nix package manager](https://nixos.org/) by executing the installation script, by setting up a NixOS, or by using the docker image.; 2. Fill `/nix/store` with packages by installing packages, `nix-shell` or `nix-build`; 2. Install ROOT by `nix-env -iA root`; 3. ```bash; cd ~/.nix-profile/tutorials; root; ```; 4. Inside the ROOT interpreter; ```ROOT; TBrowser tb; ```; 5. Since the `tutorials` is a symlink to `/nix/store/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-root-6.18.04/tutorials`, `TBrowser` will follow the symlink, try to expand `/nix/store` (where all the packages are stored), and get stuck there.; ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT Version: 6.18/04; Built for linuxx8664gc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7213:1556,test,testdir,1556,https://root.cern,https://github.com/root-project/root/issues/7213,2,['test'],['testdir']
Testability," This is the entire stack trace of all threads:; ===========================================================; #0 0x0000152ecd0815db in waitpid () from /lib64/libc.so.6; #1 0x0000152eccfe3ce7 in do_system () from /lib64/libc.so.6; #2 0x0000152ece6e73e2 in TUnixSystem::Exec (this=0x234e8c0, shellcmd=0x51d8ad0 ""/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/etc/gdb-backtrace.sh 1509407 1>&2"") at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2104; #3 0x0000152ece6e7c83 in TUnixSystem::StackTrace (this=0x234e8c0) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2395; #4 0x0000152ece6eb6be in TUnixSystem::DispatchSignals (this=0x234e8c0, sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3615; #5 0x0000152ece6e35da in SigHandler (sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:395; #6 0x0000152ece6eb5c1 in sighandler (sig=11) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3586; #7 <signal handler called>; #8 0x0000152ecd023e41 in free () from /lib64/libc.so.6; #9 0x0000152ece69809f in __gnu_cxx::new_allocator<ROOT::TClassAlt*>::deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, _",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:1703,test,tests,1703,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability," ] LikelihoodJobTest.UnbinnedGaussian1D; [ OK ] LikelihoodJobTest.UnbinnedGaussian1D (368 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussian1DSelectedParameterValues; [ OK ] LikelihoodJobTest.UnbinnedGaussian1DSelectedParameterValues (233 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussian1DTwice; [ OK ] LikelihoodJobTest.UnbinnedGaussian1DTwice (219 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussianND; [ OK ] LikelihoodJobTest.UnbinnedGaussianND (331 ms); [ RUN ] LikelihoodJobTest.SimBinned; [ OK ] LikelihoodJobTest.SimBinned (323 ms); [ RUN ] LikelihoodJobTest.BinnedConstrained; [ OK ] LikelihoodJobTest.BinnedConstrained (311 ms); [ RUN ] LikelihoodJobTest.SimUnbinned; [ OK ] LikelihoodJobTest.SimUnbinned (281 ms); [ RUN ] LikelihoodJobTest.SimUnbinnedNonExtended; [ OK ] LikelihoodJobTest.SimUnbinnedNonExtended (264 ms); [ RUN ] LikelihoodJobTest.BatchedUnbinnedGaussianND; [ OK ] LikelihoodJobTest.BatchedUnbinnedGaussianND (362 ms); [----------] 9 tests from LikelihoodJobTest (2698 ms total); [----------] 2 tests from LikelihoodJobBinnedDatasetTest; [ RUN ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf; [ OK ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf (152 ms); [ RUN ] LikelihoodJobBinnedDatasetTest.BinnedNLL; [ OK ] LikelihoodJobBinnedDatasetTest.BinnedNLL (325 ms); [----------] 2 tests from LikelihoodJobBinnedDatasetTest (480 ms total); [----------] 2 tests from LikelihoodJobSimBinnedConstrainedTest; [ RUN ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters; [ OK ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters (452 ms); [ RUN ] LikelihoodJobSimBinnedConstrainedTest.ConstrainedAndOffset; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = ROOT::Math::KahanSum<double>; _Alloc = std::allocator<ROOT::Math::KahanSum<double> >; reference = ROOT::Math::KahanSum<double>&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; ```; The test hangs at this point, and is",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:1278,test,tests,1278,https://root.cern,https://github.com/root-project/root/issues/15730,2,['test'],['tests']
Testability," `RDataFrame`, define a column, redefine it, and save the two columns to histograms:; `reproduce.C`; ```C++; #include <Rtypes.h>; #include <TFile.h>; #include <TTree.h>; #include <TBranch.h>; #include <TH1.h>; #include <ROOT/RDataFrame.hxx>. #include <vector>; #include <string>. void reproduce(const std::string pathFileIn = ""file_float_vector.root"", const std::string pathFileOut = ""file_out.root"") {; 	TFile *tfIn = TFile::Open(pathFileIn.c_str());; 	TTree *ttIn = tfIn->Get<TTree>(""Events"");; 	ROOT::RDataFrame dfIn(*ttIn);; 	std::cerr << ""Creating a custom column ..."" << std::endl;; 	auto dfAug = dfIn.Define(""TestVar2"", ""TestVar + 1."");; 	std::cerr << ""Redefining ..."" << std::endl;; 	auto dfOut = dfAug.Redefine(""TestVar2"", ""TestVar2.size() ? ROOT::VecOps::Take(TestVar2, {0}) : ROOT::VecOps::Take(TestVar2, {})"");; 	std::cerr << ""Action: Histo1D"" << std::endl;; 	// auto histview1 = dfOut.Histo1D({""hTest1"", ""Histogram showing the column in the input tree"", 30000, 0., 3.}, ""TestVar"");; 	auto histview2 = dfOut.Histo1D({""hTest2"", ""Histogram showing the custom (defined) column"", 30000, 0., 3.}, ""TestVar2"");; 	std::cerr << ""Saving histogram ..."" << std::endl;; 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");; 	tfOut->cd();; 	// std::cerr << ""Writing histview1"" << std::endl;; 	// histview1->Write();; 	std::cerr << ""Writing histview2"" << std::endl;; 	histview2->Write();; 	std::cerr << ""Finalizing ..."" << std::endl;; 	tfOut->Close();; 	tfIn->Close();; 	std::cerr << ""Complete!"" << std::endl;; }; ```. Here is the output of the second piece of code:; <pre><font color=""#55FF55""><b>$</b></font> root -l -q &quot;reproduce.C++()&quot;. Processing reproduce.C++()...; Info in &lt;TUnixSystem::ACLiC&gt;: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector/./reproduce_C.so; Creating a custom column ...; Redefining ...; <b>input_line_34:2:99: </b><font color=""#FF55FF""><b>warning: </",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8857:3021,Test,TestVar,3021,https://root.cern,https://github.com/root-project/root/issues/8857,1,['Test'],['TestVar']
Testability, ```txt; 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents; 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3; d10b28bfbb [RF] Consistent proxy names in RooGamma; b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory; 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend; 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig; 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory; f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`; 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult; 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes; d5ca98077e [RF] New function for server changing without setting attributes; 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`; 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time; 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted; ef69ad7633 [RF] Refactor BatchMode likelihood creation code; 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test; e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro; 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(); 8ad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:1008,test,tests,1008,https://root.cern,https://github.com/root-project/root/pull/12905,1,['test'],['tests']
Testability," `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:; ```; <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />; ```; The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:; ```; input_line_48:2:89: error: use of undeclared identifier 'gt'; Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }; ^; ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior; The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce; Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup; 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06; 2. CentOS7 (lxplus), tested with gcc8 and gcc11; 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10840:5114,test,tested,5114,https://root.cern,https://github.com/root-project/root/issues/10840,1,['test'],['tested']
Testability," a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. ## Expected behavior; no FPE. ## To Reproduce. Code; ```. #include <TCanvas.h>; #include <",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6449:1204,test,test,1204,https://root.cern,https://github.com/root-project/root/issues/6449,1,['test'],['test']
Testability," a symbolic link without the dot ; ; 		$ make clean; 		$ make LIBDIR=.libs ; 		$ ln -s .libs libs; 		$ make test LIBDIR=libs; 	 LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C; 		 ; In all cases, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some; assumption about a dot (`.`) as the leading character of a; sub-directory name which shouldn't be there. As far as I can tell,; the dot makes the code think that the library loaded is the ROOT; executable (`<ROOTSYS>/bin/root.exe`) rather than the actual shared; library. The reason seems to be that, because of some bad stripping; of path components, the shared library isn't found by Cling and then; the binary image falls back to the executable binary image. . ## Why this is problematic . Many build tools (e.g., Autotools) uses temporary directories that; start with a dot (`.`), including for building examples and tests. The; current behaviour of ROOT prevents building production level packages; with these tools that has rigorous test suites and rich examples. . More than that, ROOT should not assume _anything_ given a path _name_.; Rather, it should use system tools to detect if a given path is a; directory, a file, or what not. File and directory names are; completely volatile and proper tools should be used to deduct what it; is the code is dealing with. ## Additional tests . Sub-directory with dot in name . 	$ make clean ; 	$ make test LIBDIR=foo.libs ; 	...; 	LD_LIBRARY_PATH=foo.libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Sub-directory with leading underscore . 	$ make clean ; 	$ make test LIBDIR=_libs; 	...; 	LD_LIBRARY_PATH=_libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Current directory . 	$ make clean ; 	$ make test LIBDIR=. ; 	...; 	LD_LIBRARY_PATH=.:<ROOTS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:3164,test,tests,3164,https://root.cern,https://github.com/root-project/root/issues/10704,1,['test'],['tests']
Testability," adapter classes in Minuit2.; 3. In RooFit:; 1. Most RooMinimizerFcn functionality was moved into an abstract base class RooAbsMinimizerFcn, which in turn forms the base class of the new RooMinimizerFcn, but also of the added RooGradMinimizerFcn (serial, but gradient external to Minuit2) and MinuitFcnGrad (with parallel MultiProcess back-end) classes.; 2. The RooRealMPFE based classes can make use of an added parameter `CPUAffinity`. In Unix systems (not macOS), this makes the MPFE based parallelization a lot faster by pinning processes to physical CPU cores.; 3. To accomodate the new minimization frameworks, RooMinimizer was changed quite a bit as well. It is still backwards compatible, but the new functionality can be accessed through a new `create` template factory function. This template function allows users to pass in their own calculation back-ends, e.g. for calculating on GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_po",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:3340,benchmark,benchmark,3340,https://root.cern,https://github.com/root-project/root/pull/8294,1,['benchmark'],['benchmark']
Testability," and execute function [file](w/o extension); Xk [file] : keep [file] it already loaded else load it. and execute function [file](w/o extension); E <[file]>: open editor and evaluate {statements} in the file; Load/Unload: L [file] : load [file]; Lk [file] : keep [file] if already loaded, else load it; La [file] : reload all files loaded after [file]; U [file] : unload [file]; C [1|0] : copy source to $TMPDIR (on/off); undo : undo previous declarations; lang : local language (EUC,SJIS,EUROPEAN,UNKNOWN); preproc : toggle preprocessing of interpreted files; Monitor: g <[var]> : list global variable; l <[var]> : list local variable; proto <[scope]::>[func] : show function prototype; class <[name]> : show class definition (one level); Class <[name]> : show class definition (all level); typedef <name> : show typedefs; function : show interpreted functions; macro : show macro functions; template : show templates; include : show include paths; file : show loaded files; where : show current file position; security : show security level; refcount : reference count control on/off; garbage : show garbage collection buffer; Garbage : Do garbage collection; cover [file] : save trace coverage; return [val] : return undefined symbol value; Run: S : step over function/loop; s : step into function/loop; i : ignore and step over; c <[line]>: continue <to [line]>; e : step out from function; f [file] : select file to debug; b [line] : set break point; db [line] : delete break point; a [assert]: break only if assertion is true; O [0~4] : Set bytecode compiler mode; debug : bytecode status display on/off; asmstep : bytecode step mode on/off; status : show bytecode exec flags; dasm : disassembler; except : toggle exception catching; Quit: q : quit cint; qqq : quit cint - mandatory; qqqqq : exit process immediately; qqqqqqq : abort process; save : call emergency routine to save important data. ROOT special commands.; ===========================================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10191:4810,assert,assert,4810,https://root.cern,https://github.com/root-project/root/issues/10191,2,['assert'],"['assert', 'assertion']"
Testability," any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:; - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index.; - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`.; - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only.; - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns.; - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`.; This function is used to make up `RPageRange`s for clusters that contain deferred columns.; - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster.; - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators.; - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary); - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?); - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12676:2456,test,tested,2456,https://root.cern,https://github.com/root-project/root/pull/12676,1,['test'],['tested']
Testability," as providing a finer grained control over the information deserialization. We see no observable benefits in generating RDICT files next to our pcm files. . ## Performance results. We have run several times all tests in `roottest/io` and `roottest/meta/MakeProject` folders and compared the results with and without generating RDICT (namely with ROOT master with `-Druntime_cxxmodules=On` with and without this PR). They are available [here](https://docs.google.com/spreadsheets/d/1Y_swct0USyX1DMp0tJOPdZzvmvIOTXOS9s7n08wCb2I/edit?usp=sharing) and [here](https://docs.google.com/spreadsheets/d/1s5LbPmhGBfhimirA0GH87nyEKcrGUfCX80H7-fOrjAU/edit?usp=sharing). ### Methodology. We have a forwarding `root.exe` which essentially calls `/usr/bin/time -v root.exe $@`. We have processed and stored this information in csv files. We have run in:; * (no)dict1-cold -- Tests are run immediately after restarting the physical test machine.; * (no)dict1a-cold -- Tests are run immediately after restarting the physical test machine. Second time.; * (no)dict2 -- Tests are run once again after running (no)dict1-cold;; * (no)dict3 -- Tests are run once again after running (no)dict2;; * (no)dict4 -- Tests are run once again after running (no)dict3;; * (no)dict5 -- Tests are run once again after running (no)dict4. The values of each column in (no)dict* are the sum of each value produced after running each test under roottest/io. The average values are computed in the columns under `dict` and `nodict`. The difference is shown in `diff`. There are two known test failures wrt to modules whose values are ignored. The machine specification is `Intel(R) Core(TM) i3-7100 CPU @ 3.90GHz` dual core, 8GB RAM and a **HDD**, run on Ubuntu 18.04. ### Results Interpretation. RDICT mostly intend to reduce the memory footprint during IO. We see no direct benefits in the memory footprint. The average of the max RSS of the sum of the max RSS of every test is higher. There is also a tendency towards faster execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012:1428,Test,Tests,1428,https://root.cern,https://github.com/root-project/root/pull/3012,7,"['Test', 'test']","['Tests', 'test']"
Testability," at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ----------------------------------------------------------------------; Ran 2 tests in 0.174s; FAILED (failures=1); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-dataframe-df006_ranges-py. TypeError: none of the 2 overloaded methods succeeded.; ~~~; 1096/1272 Test #1098: tutorial-dataframe-df006_ranges-py ..................................***Failed 7.50 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int end) =>; TypeError: takes at most 1 arguments (3 given); ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:4313,assert,assertEqual,4313,https://root.cern,https://github.com/root-project/root/issues/12429,1,['assert'],['assertEqual']
Testability, available at https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8678b1/21211/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/log . FYI @vgvassilev @hahnjo. [a] https://github.com/cms-sw/cmsdist/pull/7500#issuecomment-992272002; ```; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangL,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:1273,test,tests,1273,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability," be reproduced with a very limited example, divided in three pieces; ### 1. Write an RNTuple; ```cpp; void write_ntuple(); {; auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");. std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleWriter::Recreate(std::move(model), ntuplename, filename);. constexpr int nentries = 10;; for (int i = 0; i < nentries; i++) {; *myintfield = i;; *myintfieldsquared = i*i;; ntuple->Fill();; // Create a cluster every 5 entries; if (i == 4 || i == 9) ntuple->CommitCluster();; }; }; ```; ### 2. Read the RNTuple (this will create a `cachedntuple.root` file); ```cpp; void read_ntuple(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleReader::Open(ntuplename, filename);. for (auto entryid: *ntuple){; ntuple->LoadEntry(entryid);; }; }; ```; ### 3. Print info of the cached RNTuple; ```cpp; void read_cache(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""cachedntuple.root""};. auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");; auto ntuple = RNTupleReader::Open(std::move(model), ntuplename, filename);; ntuple->PrintInfo();. for (auto entryid: *ntuple){; ntuple->LoadEntry(entryid);; std::cout << ""Read entry "" << entryid << "" with value "" << *myintfield << ""\n"";; std::cout << ""Read entry "" << entryid << "" with value "" << *myintfieldsquared << ""\n"";; }; }; ```. ## TODOS. 1. Still missing all the logic for automatically switching to read the cached RNTuple rather than the original one; 2. That `entriessofar` variable needed to pass to the `CommitCluster` function hopefully can be avoided; 3. Tests with more complex data schemes; 4. Some logic to enable the caching optionally from the user side",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8329:2309,log,logic,2309,https://root.cern,https://github.com/root-project/root/pull/8329,3,"['Test', 'log']","['Tests', 'logic']"
Testability," before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/w",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:16309,test,tests,16309,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability," bug in the ROOT library loading. . I suspect that the ROOT code cannot handle directories that start with; a dot (`.`). . ## Platform . - ROOT 6.26/00; - Features:; - cxx17; - asimage; - builtin_clang; - builtin_cling; - builtin_llvm; - builtin_openui5; - builtin_vdt; - builtin_xxhash; - builtin_zeromq; - cefweb; - clad; - dataframe; - davix; - exceptions; - fftw3; - fitsio; - gdml; - gfal; - gnuinstall; - gsl_shared; - gviz; - http; - imt; - mathmore; - mlp; - minuit2; - opengl; - pyroot; - pythia6_nolink; - pythia6; - roofit; - roofit_multiprocess; - webgui; - root7; - rpath; - shadowpw; - shared; - soversion; - sqlite; - ssl; - tmva; - tmva-cpu; - tmva-pymva; - spectrum; - uring; - vc; - vdt; - veccore; - x11; - xml; - xrootd; - Debian GNU/Linux ""sid"" ; - GCC 11.3.0. ## The problem . To see the problem first to . 	$ make test ; 	; This will generate the shared library `libFoo.so.1` and associated; files (`libFoo_rdict.pcm`, `libFoo.rootmap`, `libFoo.so`) in the; sub-directory `libs`, and execute the script `Test.C`. This all works; fine:. 	$ LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	rm libs/Foo_dict.o libs/Foo.o. Next, clean up . 	$ make clean ; 	; so that we start afresh. Then, execute . 	$ make test LIBDIR=.libs ; 	; which will build the above mentioned library and associated files in; the sub-directory `.libs`. This fails somewhat with . 	$ LD_LIBRARY_PATH=.libs:<ROOTSYS>/lib -l -b -q Test.C. 	Processing Test.C...; 	Error in <TCling::RegisterModule>: Cannot open shared library <ROOTSYS>/root.exe for dictionary libFoo:; 	 <ROOTSYS>/root.exe: cannot dynamically load position-independent executable; 	Error in <TCling::LoadPCM>: ROOT PCM <ROOTSYS>/bin/libFoo_rdict.pcm file does not exist; 	this is a Foo; 	hello from a Foo; 	; 	; It does not matter if `LIBDIR` . - is an absolute path (e.g., ` ``pwd``/.libs`); - the end directory is below a directory starting with a dot (e.g.,; ` ``pwd``/.lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:1090,Test,Test,1090,https://root.cern,https://github.com/root-project/root/issues/10704,1,['Test'],['Test']
Testability," bug. When running the tests after compiling root 6.24.00 many of the root7 tests fail:; ```; The following tests FAILED:; 	972 - tutorial-v7-concurrentfill.cxx (Failed); 	973 - tutorial-v7-draw.cxx (Failed); 	975 - tutorial-v7-draw_frame.cxx (Failed); 	976 - tutorial-v7-draw_legend.cxx (Failed); 	977 - tutorial-v7-draw_mt.cxx (Failed); 	979 - tutorial-v7-draw_rh1.cxx (Failed); 	980 - tutorial-v7-draw_rh1_large.cxx (Failed); 	981 - tutorial-v7-draw_rh2.cxx (Failed); 	982 - tutorial-v7-draw_rh2_colz.cxx (Failed); 	983 - tutorial-v7-draw_rh2_large.cxx (Failed); 	984 - tutorial-v7-draw_rh3.cxx (Failed); 	985 - tutorial-v7-draw_rh3_large.cxx (Failed); 	986 - tutorial-v7-draw_subpads.cxx (Failed); 	989 - tutorial-v7-histops.cxx (Failed); 	996 - tutorial-v7-perf.cxx (Failed); 	997 - tutorial-v7-perfcomp.cxx (Failed); 	998 - tutorial-v7-simple.cxx (Failed); Errors while running CTest; ```; The error is the same for all of them:; ```; 973/1121 Test #972: tutorial-v7-concurrentfill.cxx ......................................***Failed 3.25 sec; Processing /builddir/build/BUILD/root-6.24.00/tutorials/v7/concurrentfill.cxx...; root.exe: /builddir/build/BUILD/root-6.24.00/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReaderDecl.cpp:976: void clang::ASTDeclReader::VisitFunctionDecl(clang::FunctionDecl*): Assertion `Reader.getContext().getLangOpts().Modules && ""already deserialized this template specialization""' failed.; CMake Error at /builddir/build/BUILD/root-6.24.00/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; This happens both with gcc 10 on Fedora 33 (defaults to C++ 14) and gcc 11 on Fedora 34 (defaults to C++ 17). ### Expected behavior; Successful tests. ### To Reproduce; Steps to reproduce the behavior:; 1. Build root with -Droot7:BOOL=ON; 2. Run make test. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 33 and 34; 3. Failures during ""make test"" run during RPM package build (%check section)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073:1335,Assert,Assertion,1335,https://root.cern,https://github.com/root-project/root/issues/8073,4,"['Assert', 'test']","['Assertion', 'test', 'tests']"
Testability," code. Examples could be . - Input and output of HEPData data. For example, one may want to read in some table via JSON and visualize, or one has produced a result one wants to upload to HEPData ; - Interoperability with Python. Python has support for many data format - not least JSON. . The attached class `TJSON` allows for this in a relatively straight forward manner. For example, one can do . ```c++; TJSON null;; TJSON b(true);; TJSON s(""RawString"");; TJSON s2(std::string(""C++String""));; TJSON i(42);; TJSON f(3.14);; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();; ```; for null, boolean, string, numbers (int and float), arrays or objects (associative container). . A more complex object can be created like . ```c++ ; TJSON o2 = std::map<std::string,TJSON>{; {""key1"",""value""},; {""key2"",true},; {""key3"",; {""key4"", TJSON::Array(""This"",""is"",""an"",""array""),; ""key5"",; {""boolean"", true}; }; }; };; ```. and elements are accessed via `operator[]` . ```c++; assert o2[""key1""] == ""value"";; assert o2[""key3""][""key4""][1] == ""is""; ```. One can loop over arrays or objects via `TJSON::ArrayRange` or `TJSON::ObjectRange` respectively. . ```c++; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();. for (size_t i = 0; i < 4; i++); a[i] = ""Test""+std::to_string(i);. o[""key0""] = ""value1"";; o[""key1""] = a;; o[""key2""] = 123;. std::cout << ""Array: "" << std::endl;; for (auto& e : a.ArrayRange()); std::cout << e << std::endl;. std::cout << ""Object: "" << std::endl;; for (auto& kv : o.ObjectRange()); std::cout << ""o["" << kv.first << ""] = "" << kv.second << std::endl;; ```. JSON can be read and written to streams . ```c++; std::cout << ""=== Loading ==="" << std::endl;; std::string s(""{\""key1\"":\""string\"",""; 		"" \""key2\"": true,""; 		"" \""key3\"": 1234,""; 		"" \""key4\"":null}"");. std::stringstream str(s);. TJSON j;; str >> j;; std::cout << j << std::endl;; ; TJSON j2 = TJSON::Load(s);; std::cout << j2 << std::endl;; ```. I attach `TJSON.h` and `TJSON.cxx` as well as a script with examples `Example.C`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889:1194,assert,assert,1194,https://root.cern,https://github.com/root-project/root/issues/6889,2,['assert'],['assert']
Testability," entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2104; #3 0x00002b4bd1d23cfd in TUnixSystem::StackTrace (this=0x7472d0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2395; #4 0x00002b4bd1896496 in (anonymous namespace)::do_trace (sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00002b4bd1896526 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x2a96890, sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00002b4bd1d276e5 in TUnixSystem::DispatchSignals (this=0x7472d0, sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3610; #7 0x00002b4bd1d1f654 in SigHandler (sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:2431,test,tests,2431,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability," entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` ; ```; tree->SetEntryList( new TEntryList(*entryList) );; ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`; ```; tree->GetEntryNumber(0)=16; tree->GetEntryNumber(0)=0; tree->GetEntryNumber(0)=0; tree->GetEntryNumber(0)=0; ```; For `numTest=1`; ```; tree->GetEntryNumber(0)=16; tree->GetEntryNumber(1)=17; tree->GetEntryNumber(1)=1; tree->GetEntryNumber(1)=1; ```; For `numTest=2`; ```; tree->GetEntryNumber(0)=16; tree->GetEntryNumber(1)=17; tree->GetEntryNumber(2)=18; tree->GetEntryNumber(2)=2; tree->GetEntryNumber(2)=2; ```. ### Reproducer. ```C++; #include ""TFile.h""; #include ""TTree.h""; #include ""TError.h""; #include ""TEntryList.h"". #include<string>; #include<vector>; #include<iostream>. // function defined after main ; void createTree(const std::string &outputFile);. int main(){; ; // number of the test ; // set to 0, 1 or 2; int numTest = 2; . // Define an entry list ; TEntryList *entryList = new TEntryList(); ; std::vector<long long int> entries={; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19; };. // fill the entry list ; for (long long int entry : entries){; entryList->Enter(entry);; }. // Create tree ; std::string inFileName = ""myFile.root""; ; createTree(inFileName);. // Read tree ; TFile *file = nullptr; ; TTree *tree = nullptr;. file = TFile::Open(inFileName.c_str());; tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 ; // before setting entry list for tree ; entryList->GetEntry(15);; tree->SetEntryList(entryList);; ; if (numTest == 0){; std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; ; std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;; std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;; std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13338:1993,test,test,1993,https://root.cern,https://github.com/root-project/root/issues/13338,1,['test'],['test']
Testability," equality of these values:; (alignof(std::tuple<char, int64_t, char>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3111,test,tests,3111,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['tests']
Testability," file.; ```; selectiveHadd Source file 1: myFileWithHists.root; Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root ; root [0] ; Attaching file myExclusiveFile.root as _file0...; (TFile *) 0x55932d5cd940; root [1] .ls; TFile**		myExclusiveFile.root	; TFile*		myExclusiveFile.root	; KEY: TH1F	hist1;1	hist1; KEY: TH1F	hist2;1	hist2; root [2] ; ```. Many thanks in advance for fixing that issue, ; Romain. ### Reproducer. ```C++; #include ""TFileMerger.h""; #include ""TSystem.h""; #include ""TUUID.h""; #include ""TFile.h""; #include ""TH1F.h"". #include <iostream>; #include <string> . // Function defined after the main function ; void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.SetMsgPrefix(""selectiveHadd"");; fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:2569,test,test,2569,https://root.cern,https://github.com/root-project/root/issues/13359,1,['test'],['test']
Testability," for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; Building root in the LCG stack dev3 slot (HEAD of master branch), full logs http://cdash.cern.ch/viewFiles.php?buildid=134296; ```; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_RooFitCore.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONParser.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/HistFactoryJSONTool.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/RooJSONFactoryWSTool.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_HistFactory.cxx.o; /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/roofit/hs3/src/JSONParser.cxx:5:10: fatal error: nlohmann/json.hpp: No such file or directory; #include ""nlohmann/json.hpp""; ^~~~~~~~~~~~~~~~~~~; ```. I think introduced here #8944; I guess something like what is done in Eve needs to be added to the other CMakeLists.txt. cf.; https://github.com/root-project/root/blob/94f518c380d9c7c00d92f1fecf29806b8105ce9f/graf3d/eve7/CMakeLists.txt#L139. ### Expected behavior; Successful compilation using the external json header. ### To Reproduce; ```; source /cvmfs/sft.cern.ch/lcg/releases/LCG_101/ROOT/6.24.06/x86_64-centos7-gcc10-opt/ROOT-env.sh; mkdir testrootjson; cd testrootjson; mkdir build; git clone --depth=1 https://github.com/root-project/root.git; cd build; cmake -Dbuiltin_nlohmannjson=OFF -Dnlohmann_json_ROOT=${JSONMCPP__HOME} ../root/; make RooFitHS3; ```; * these steps require centos7, cvmfs, cmake and probably hep_oslibs installed on the machine.; * using the LCG view hides the problem, because the needed header is part if the generic include directory of the view. ### Setup; ROOT master; cmake ... -Dbuiltin_nlohmannjson=OFF ....; centos7 centos 8, ubuntu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9381:1671,test,testrootjson,1671,https://root.cern,https://github.com/root-project/root/issues/9381,2,['test'],['testrootjson']
Testability," from /lib64/libc.so.6; 1 0x00007f25d4e5c8ee in raise () from /lib64/libc.so.6; 2 0x00007f25d4e448ff in abort () from /lib64/libc.so.6; 3 0x00007f25d4e457d0 in __libc_message.cold () from /lib64/libc.so.6; 4 0x00007f25d4eb87a5 in malloc_printerr () from /lib64/libc.so.6; 5 0x00007f25d4eba840 in _int_free_merge_chunk () from /lib64/libc.so.6; 6 0x00007f25d4ebd3de in free () from /lib64/libc.so.6; 7 0x00007f25d6c5efa8 in TList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 8 0x00007f25d6c56566 in THashList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 9 0x00007f25d67235b5 in TDirectoryFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 10 0x00007f25d6741406 in TFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 11 0x00000000004324e1 in MakeTreeWithBools(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); 12 0x00000000004328da in RDFAndVecOps_RVecBool_Test::TestBody() (); 13 0x00007f25d56af4a3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; 14 0x00007f25d569a7fe in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; 15 0x00007f25d569aa05 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; 16 0x00007f25d569ab57 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; 17 0x00007f25d56a8210 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; 18 0x00007f25d56a6f68 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; 19 0x000000000042b27f in main (); ```. Also, this particular failure is triggered by exactly the following commit (identified with `git bisect`). https://github.com/root-project/root/commit/5ce8024d5b392410059486967e714c871d454ea9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:2258,Test,TestBody,2258,https://root.cern,https://github.com/root-project/root/pull/14803,16,"['Test', 'test']","['Test', 'TestBody', 'TestInfo', 'TestSuite', 'testing']"
Testability," from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""\n#line 1 \""DataFormatsBTauReco_xr dictionary payload\""\n\n#ifndef CMS_DICT_IMPL\n #define CMS_DICT_IMPL 1\n#endif\n#ifndef _REENTRANT\n #define _REENTRANT 1\n#endif\n#ifndef GNUSOURCE\n #define GNUSOURCE 1\n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/w",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:8611,test,tests,8611,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability," from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn#ifndef GNUSOURCEn #define GNUSOURCE 1n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/workspace/ib-r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:20537,test,tests,20537,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability," hidden Sizes; | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'; | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>; | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'; | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'; | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'; | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3; `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian; |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'; |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'; `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'; `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>; `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'; ```. The reason for this is that we have QSysInfo both in the TQtClientWidget; and TGQt submodules and our current translation (which is supposed to; parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code; fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile; which disables the assert is that FromASTFile for the decls is; not set. This is because they haven't been loaded by the ASTFileReader; but are directly parsed as submodules in our special case where we; directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from; the currently generated module, we are pretending it's as if it was; loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1236:2025,assert,assert,2025,https://root.cern,https://github.com/root-project/root/pull/1236,2,['assert'],['assert']
Testability," in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranContDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: Error in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranDiscrDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: Error in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranEmpDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: CMake Error at C:/Users/sftnight/git/master/cmake/modules/RootTestDriver.cmake:232 (message):; 151: error code: 1; 151:; 151:; 2/2 Test #151: test-stresshistofit-interpreted ...***Failed Error regular expression found in output. Regex=[FAILED|Error in] 10.55 sec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:4119,Test,Test,4119,https://root.cern,https://github.com/root-project/root/pull/3312,2,"['Test', 'test']","['Test', 'test-stresshistofit-interpreted']"
Testability," in TCling::ProcessLineSynch (this=0x55ed24bb1eb0, line=0x55ed262c0650 "".X /scratch2/root-debug2/./test.cpp++"", error=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/metacling/src/TCling.cxx:3520; #60 0x00007f54c8f55d48 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fffe1b0c04c, keep=<optimized out>) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1591; #61 0x00007f54c8f56a7d in TApplication::ProcessFile (keep=<optimized out>, error=0x7fffe1b0c04c, file=0x7fffe1b0c053 ""test.cpp++"", this=0x55ed24b82e70) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1463; #62 TApplication::ProcessLine (this=0x55ed24b82e70, line=<optimized out>, sync=<optimized out>, err=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1436; #63 0x00007f54c943d752 in TRint::ProcessLineNr (this=0x55ed24b82e70, filestem=<optimized out>, line=0x7fffe1b0c050 "".x test.cpp++"", error=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/rint/src/TRint.cxx:795; #64 0x00007f54c943fe5e in TRint::Run (this=this; entry=0x55ed24b82e70, retrn=retrn; entry=false) at /usr/local/src/conda/root_base-6.25.2/root-source/core/rint/src/TRint.cxx:446; #65 0x000055ed237870e5 in main (argc=<optimized out>, argv=0x7fffe1b0e1c8) at /usr/local/src/conda/root_base-6.25.2/root-source/main/src/rmain.cxx:83; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeIn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:15337,test,test,15337,https://root.cern,https://github.com/root-project/root/issues/9595,1,['test'],['test']
Testability," in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error:; could not build module 'std'; #include <string>; ~~~~~~~~^; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error:; could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:510:; /usr/include/x86_64-linux-gnu/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /home/luowt/Apps/root/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:197:; In file included from <module-includes>:3:; /home/luowt/Apps/root/root_build/include/TClassEdit.h:29:10: fatal error: could not build module 'std'; #include <cxxabi.h>; ~~~~~~~~^; Error: Error loading the default rootcling header files.; make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:482: core/G",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14062:3537,stub,stubs-,3537,https://root.cern,https://github.com/root-project/root/issues/14062,1,['stub'],['stubs-']
Testability," in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads:. + Baseline:; Percent of CPU this job got: 391%; Elapsed (wall clock) time (h:mm:ss or m:ss): 5:17.52. + +hashing fix; Percent of CPU this job got: 453%; Elapsed (wall clock) time (h:mm:ss or m:ss): 3:15.25. + +hashing fix and reduction of remaining global write locks (this PR):; Percent of CPU this job got: 1639%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:38.98. + +hashing fix and reduction of remaining global write locks + remove TFile UUID registration (not in this PR anymore):; Percent of CPU this job got: 19861%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.52",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:1721,Test,Test,1721,https://root.cern,https://github.com/root-project/root/pull/9486,1,['Test'],['Test']
Testability," include <TH1D.h>; # include <TFile.h>; # include <TCanvas.h>; # include <TStyle.h>. # include <Riostream.h>; # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {; double t=0.;; double T = 300.;. int N_survived = N0;; int N_decayed;. int N_steps = (int)(T/delta_t);; int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();; gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento; TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute; N_decayed = 0;; for(int j=0; j<N_survived; j++){; r = gRandom -> Rndm();; if (r < alpha*delta_t) N_decayed++;; }. if (N_survived <= N_decayed) break;; N_survived -= N_decayed;. t += delta_t;; step++;; }. gStyle -> SetOptFit();; N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, ; //mentre il file .root con quel nome era stato anche lui creato sopra.; f -> Print(""particles_decay.root"");. file.Close();; }; ```; This gives. ```; root [0] .L minimal.C; root [1] particles_decay(500, 1., 0.01); FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL; EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01; 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00; Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created; root [2] .L minimal.C; root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9187:2055,Assert,Assertion,2055,https://root.cern,https://github.com/root-project/root/issues/9187,1,['Assert'],['Assertion']
Testability," int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:442:48; 352: #2 0x7f7ffe26e9d0 in TBufferFile::ReadInt(int&) /home/jhahnfel/ROOT/src/io/io/inc/TBufferFile.h:401:4; 352: #3 0x7f80011965fc in TLeafI::ReadBasket(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TLeafI.cxx:165:9; 352: #4 0x7f8001055b29 in TBranch::ReadLeavesImpl(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:2382:13; 352: #5 0x7f800106b4a9 in TBranch::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:1691:4; 352: #6 0x7f800125eea0 in TTree::GetEntry(long long, int)::$_3::operator()() const /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5628:23; 352: #7 0x7f800125d3c8 in TTree::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5703:7; 352: #8 0x50a984 in TestContex::runApplicationPhase(TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:188:13; 352: #9 0x50b2a3 in TestCvSerialise(TMVA::Types::EMVA, TString, TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:231:7; 352: #10 0x50b6e2 in TestCrossValidationSerialise() /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:240:7; 352: #11 0x50b8b3 in main /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:255:4; 352: #12 0x7f7ffad0aca2 in __libc_start_main (/lib64/libc.so.6+0x3aca2); 352: #13 0x42361d in _start (/home/jhahnfel/ROOT/build-clang-asan-debug/tmva/tmva/test/crossvalidation/testCrossValidationSerialise+0x42361d); 352:; 352: Address 0x7f7ff4e1b880 is located in stack of thread T0 at offset 128 in frame; 352: #0 0x7f7feed1f30f in cling::LookupHelper::findType(llvm::StringRef, cling::LookupHelper::DiagSetting) const (/home/jhahnfel/ROOT/build-clang-asan-debug/lib/libCling.so+0xdd430f); ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010:1266,Test,TestCvSerialise,1266,https://root.cern,https://github.com/root-project/root/issues/10010,3,"['Test', 'test']","['TestCrossValidationSerialise', 'TestCvSerialise', 'test']"
Testability, is 1 in /opt/root_src/graf3d/eve7/glu/sweep.c:779; 45: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:779; 46: Assuming 'eUp->Dst' is not equal to 'eLo->Dst' in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 47: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 48: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:793; 49: Assuming field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 50: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 51: Calling 'DeleteRegion' in /opt/root_src/graf3d/eve7/glu/sweep.c:800; 52: Field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 53: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 54: Assuming field 'winding' is equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 55: expanded from macro 'assert' in /usr/include/assert.h:109; 56: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 57: expanded from macro 'assert' in /usr/include/assert.h:109; 58: Memory is released in /opt/root_src/graf3d/eve7/glu/sweep.c:162; 59: expanded from macro 'memFree' in /opt/root_src/graf3d/eve7/glu/memalloc.h:41; 60: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:800; 61: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:801; 62: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:801; 63: Use of memory after it is freed in /opt/root_src/graf3d/eve7/glu/sweep.c:803; /opt/root_src/graf3d/eve7/glu/sweep.c:808:10: warning: Use of memory after it is freed [clang-analyzer-unix.Malloc]; 1: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 2: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 3: Assuming the condition is true in /opt/root_src/graf3d/eve7/glu/sweep.c:1325; 4: Loop condition is true. Entering loop body in /opt/root_src/graf3d/eve7/glu/sweep.c:1325; 5: Loop condition is true. Entering,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:20110,assert,assert,20110,https://root.cern,https://github.com/root-project/root/issues/7531,2,['assert'],['assert']
Testability," it ends with the 'corrupted size vs. prev_size' error. Here I show the minimum code that can reproduce the code. Running conditions:; * OS: Linux_CentOS7.7.1908-x86_64-gcc5.2.0; * ROOT: 6.08.00; * GCC: 5.2.0; ; code: ; file1: inc.cxx; ```cpp; #include <map>. // extern std::map<std::string, const double> UNITS;; std::map<std::string, const double> UNITS;; ```; file2: test.cxx; ```cpp; #include <map>. #include ""TGraphErrors.h""; #include ""TH1F.h""; #include ""TCanvas.h"". std::map<std::string, const double> UNITS = {; {"""",	1},; {""mm"", 1e-3},; };. int main() {; 	double value[] = {1, 2, 3, 4, 5};; TCanvas *c = new TCanvas(""c"", ""c"", 1200, 900);; 	TH1F *h = new TH1F(""h"", ""h"", 5, 0.5, 5.5);; 	TGraphErrors *g = new TGraphErrors();; 	for(int i=0; i<5; i++) {; 		g->SetPoint(i, i+1, value[i]);; 		h->Fill(value[i]);; 	}. 	g->SetMarkerStyle(20);; 	g->Draw(""AP"");; 	// h->Draw(""HIST"");; 	c->Print(""test.png"");. return 0;; }; ```; compiling:; * g++ -std=c++11 -fPIC --shared -o inc.so inc.cxx; * g++ -std=c++11 -o test test.cxx inc.so `root-config --libs --glibs --cflags` && ./test; ; result:; ```; ======= Backtrace: =========; /lib64/libc.so.6(+0x80f87)[0x7fd6589a6f87]; /lib64/libc.so.6(+0x8155e)[0x7fd6589a755e]; /lib64/libfreetype.so.6(+0x3ea1c)[0x7fd65771ea1c]; /lib64/libfreetype.so.6(+0x3fa02)[0x7fd65771fa02]; /lib64/libfreetype.so.6(+0x1fd4c)[0x7fd6576ffd4c]; /lib64/libfreetype.so.6(FT_Done_Face+0xa1)[0x7fd6576ffe51]; /root/6.08.00/lib/libGraf.so.6.08(_ZN3TTF7CleanupEv+0x5e)[0x7fd65bb62a7e]; /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7fd65896000a]; /root/6.08.00/lib/libGraf.so.6.08(+0x638a3)[0x7fd65baef8a3]; ======= Memory map: ========; 00400000-0040b000 r-xp 00000000 00:2e 3242707291 /work/test/test; 0060a000-0060b000 r--p 0000a000 00:2e 3242707291 /work/test/test; 0060b000-0060c000 rw-p 0000b000 00:2e 3242707291 /work/test/test; 01644000-02e78000 rw-p 00000000 00:00 0 [heap]; 7fd638000000-7fd638021000 rw-p 00000000 00:00 0 ; 7fd638021000-7fd63c000000 ---p 00000000 00:00 0 ; 7fd63ffc8",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256:1106,test,test,1106,https://root.cern,https://github.com/root-project/root/issues/8256,2,['test'],['test']
Testability," like to discuss:; 1. The wording of the error message; 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this; ```python; >>> import ROOT; >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor; raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])); ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead.; ```; ```; $: root.exe; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |; | From heads/master@v6-25-02-1893-ge1d4a59786 |; | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};; Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead; ```; ```; $: ./test.o; terminate called after throwing an instance of 'std::invalid_argument'; what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead.; Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11063:2001,test,test,2001,https://root.cern,https://github.com/root-project/root/pull/11063,1,['test'],['test']
Testability, logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! mes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2050,log,logger,2050,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability, message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1349,log,logging,1349,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logging']
Testability," modification. In the ROOT file, we have version 1 of the class (TVHit) while in the current software, we have version 2 of the class. We wrote in the LinkDef file a #pragma instruction on how to transform v1 into v2. When this #pragma line is omitted, we obviously read the wrong information from the input file, because the definition in the code does not correspond to the definition on file (as expected). But when using the #pragma line, we simply get a segfault while trying to read the TTree. I have prepared a self-contained minimal working example attached to this topic: [mwe.tgz|attachment](upload://34Fdg60DY7tGGh6cw40YICFFhLy.tgz) (224.3 KB) . The archive contains the following README.md with more details on how to reproduce the issue, and on the exact content of the archive:. Steps to reproduce issue on Minimal Working Example (MWE); =============================; - Set the ROOT_INCLUDE_PATH and LD_LIBRARY_PATH; `source env.sh`; - Compile the minimal persistency library; `make`; - Run test code on new persistency (opens pluto_newpers.root and reads the tree successfully); `root read_updated.C\(1\)`; or; `read_updated 1`; - Run test code on old persistency (opens pluto_oldpers.root and crashes when trying to read the tree); `root read_updated.C(\(0\)`; or; `read_updated 0`. The crash is traced back to line 109 of PersistencyDICT.cxx; `static Long_t offset_Onfile_TVHit_fMCTrackID = oldObj->GetClass()->GetDataMemberOffset(""fMCTrackID"");`; where GetClass returns a nullptr. Content of the archive; ======================; - The header files in include contain the current definition of the minimal persistency necessary to ; read the input files (TVHit version 2).; - The source files in src are there for the sake of compilation but should not; have an influence on reading the input file (right?). ; - The header files in include_oldpers are included for documentation and correspond to the difference; between the old persistency (TVHit version 1) and the new persistency",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7754:1326,test,test,1326,https://root.cern,https://github.com/root-project/root/issues/7754,1,['test'],['test']
Testability," ndim_ << "" ("" << ipar << "")"" << std::endl;; exit(EXIT_FAILURE);; }; std::vector<double> inpars(ndim_);; std::vector<double> outpars(ndim_);; ; for (int jpar = 0; jpar < ndim_; ++jpar) {; inpars[jpar] = parhist_->GetBinContent(etabin, jpar+1);; }; DoHessianShifts(etabin, ipar, inpars, outpars);; std::vector<double> ret(ndim_, 0.0);; for (int jpar = 0; jpar < ndim_; ++jpar) {; ret[jpar] = outpars[jpar];; }; return ret;; }. // method to return all parameters in a single vector; std::vector<double> EtaPtCorrelatedEfficiency::DoEffSyst(int etabin) {. std::vector<double> inpars(ndim_);; std::vector<double> outpars(ndim_);; ; for (int jpar = 0; jpar < ndim_; ++jpar) {; inpars[jpar] = parhist_->GetBinContent(etabin, jpar+1);; }. std::vector<double> ret(ndim_*ndim_, 0.0);; for (int ipar = 0; ipar < ndim_; ++ipar) {; DoHessianShifts(etabin, ipar, inpars, outpars);; for (int jpar = 0; jpar < ndim_; ++jpar) {; ret[ipar * ndim_ + jpar] = outpars[jpar];; }; }; return ret;; }; ; }; ; #endif; ```. test.py; ```; import ROOT. ROOT.gInterpreter.Declare('#include ""test.h""'). ```. output:; ```; In module 'Hist':; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/include/TF1.h:764:73: error: no matching function for call to 'GetTheRightOp'; using Fnc_t = typename ROOT::Internal::GetFunctorType<decltype(ROOT::Internal::GetTheRightOp(&Func::operator()))>::type;; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/include/TF1.h:401:41: note: in instantiation of member function 'ROOT::Internal::TF1Builder<wrem::pol3_custom>::Build' requested here; ROOT::Internal::TF1Builder<Func>::Build(this, f);; ^; ./test.h:173:32: note: in instantiation of function template specialization 'TF1::TF1<wrem::pol3_custom>' requested here; tf1_pol3_tf_ = new TF1(""tf1_pol3_tf_"", pol3_tf_, ptmin_, ptmax_, pol3_tf_.getNparams());; ^; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:10588,test,test,10588,https://root.cern,https://github.com/root-project/root/issues/16578,1,['test'],['test']
Testability," not exist. This commit modifies the logic of `TFile.cxx` such that the underlying path is explicitly created. It works only if `TFile.cxx` is compiled with the C++17 standard, otherwise the relevant code is excluded by the means of the preprocessor. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ## Quick test; I prepared a small program in C++ (requires C++17) to quickly test the pull request (see at the bottom of the message). In log, with the patched ROOT version the output looks like thit:; ```; Attempt to (re)createa/b/c/test.root; Ok.; ```; while with the ROOT version 6.28 the output looks like this:; ```; Attempt to (re)createa/b/c/test.root; SysError in <TFile::TFile>: file XXXXXX/ftest/XXYqNIoC/a/b/c/test.root can not be opened No such file or directory; Fail.; ```. The program:; ```c++; #include ""TFile.h""; #include <filesystem>; #include <cstdlib>; #include <iostream>; namespace fs = std::filesystem;. char tmpname[] = ""XXXXXXXX"";. char E[] = ""test.root"";; char F[] = ""a/b/c/test.root"";; char H[] = ""a/b/d/atest.root"";. void ok(char *fname); {; if (fs::exists(fs::path(fname))); std::cout << ""Ok."" << std::endl;; else; std::cout << ""Fail."" << std::endl;; }. int main(); {; char *tmpnm = mkdtemp(tmpname);; if (tmpnm == NULL) {; std::cout << ""Error while creating tmp dir"" << std::endl;; return -1;; }; const auto tmp = fs::path(tmpnm);; const auto prev = fs::current_path();. fs::current_path(tmp);; std::cout << ""Attempt to (re)create"" << E << std::endl;; TFile e(E, ""recreate""); e.Close(); ok(E);; std::cout << ""Attempt to (re)create"" << F << std::endl;; TFile f(F, ""recreate""); f.Close(); ok(F);; std::cout << ""Attempt to open"" << F << std::endl;; TFile g(F); g.Close(); ok(F);; std::cout << ""Attempt to open"" << H << std::endl;; TFile h(H); h.Close(); ok(H);. std::cout << ""List temporary directory tree:"" << std::endl;; std::system(""tree"");. fs::current_path(prev);; fs::remove_all(tmp);; if (not fs::exists(tmp)); std::cout << ""Tempor",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15141:1228,test,test,1228,https://root.cern,https://github.com/root-project/root/pull/15141,1,['test'],['test']
Testability," not found; ```. From this I conclude that those tests (in particular `TMVA_SOFIE_RDataFrame.C` and `tutorials/tmva/TMVA_SOFIE_GNN_Application.C`) are missing a dependencies that failed in the first run. Note `tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel` and `tutorial-tmva-TMVA_SOFIE_RDataFrame-py` are indeed needing `TMVA_Higgs_Classification.C` to run first (it says so in the output! :) ). `tutorial-tmva-TMVA_SOFIE_RSofieReader` is asking for `Higgs_trained_model.h5`. `gtest-tmva-pymva-test-TestRModelParserKeras` is missing the symbol `sgemm_` (see below). However when rerunning (where this time somehow there was no resource related failures), I still got several failures:; ```; 346:gtest-tmva-pymva-test-TestRModelParserPyTorch; 350:gtest-tmva-pymva-test-TestRModelParserKeras; 984:tutorial-tmva-TMVA_SOFIE_GNN_Application; 988:tutorial-tmva-TMVA_SOFIE_RDataFrame; 990:tutorial-tmva-TMVA_SOFIE_RSofieReader; ```; all due to:; ```; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; or both; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Which may be due to either a badly formed result of the failing run (1) or due to an external package that does not have the correct version number?. ### Reproducer. ```; ctest -j 32 # and get lots of out of resource failures; ctest --rerun-failed; ctest -j 32; ```. ### ROOT version. master	. ### Installation method. hand build. ### Operating system. Alma9. ### Additional context. ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ bin/root-config --features; cxx17 asimage builtin_clang builtin_cling builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_tbb builtin_vdt builtin_xxhash builtin_zlib builtin_zstd clad dataframe davix gdml http imt pyroot roofit root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:2420,test,test-TestRModelParserPyTorch,2420,https://root.cern,https://github.com/root-project/root/issues/16553,2,['test'],"['test-TestRModelParserKeras', 'test-TestRModelParserPyTorch']"
Testability," note: std.memory_resource defined here; module ""memory_resource"" [optional] {; ^; input_line_1:1:10: fatal error: could not build module 'std'; #include <new>; ~~~~~~~~^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /opt/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error: could not build module 'std'; #include <string>; ~~~~~~~~^; /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /opt/root_build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:515:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /opt/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /opt/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /opt/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /opt/root_build/include/Rtypes.h:195:; In file included from <module-includes>:2:; /opt/root_build/include/ROOT/RStringView.hxx:25:10: fatal error: could not build module 'std'; #include <string_view>; ~~~~~~~~^; E",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13450:2419,assert,assert,2419,https://root.cern,https://github.com/root-project/root/issues/13450,1,['assert'],['assert']
Testability," of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the functionality introduced in #8694. ## Checklist:. - [x] tested changes locally; - [x] update the docs (if necessary); - [x] unify copyright/license headers with previous commits; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] refactor member names: underscore suffix; - [x] remove commented out code and TODOs and other junk; - [x] clang-tidy up; - [ ] rebase into two commits (one for `KahanSum` and one for the rest); - [x] make Readme.md for developers with some examples to run",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:2055,test,tested,2055,https://root.cern,https://github.com/root-project/root/pull/9349,1,['test'],['tested']
Testability," of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C; root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");; Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show; A marker should appear in the default center of view.; Now click on ""Pick center"", then click somewhere on the drawn letter ""R""; On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this; On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. ; <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:; root[0] gGeoManager->GetVolume(""R"")->Raytrace();; Linux:; ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png); MacBook Air (M1, 2020); <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Any of the recent releases, tested on master; OS: linux Ok, mac buggy. ### Additional context; <!--; Add any other context about the problem here.; -->; See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12035:2430,test,testing,2430,https://root.cern,https://github.com/root-project/root/issues/12035,2,['test'],"['tested', 'testing']"
Testability," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: ; [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue ; Compilation and execution (it takes ~10 min to create the file) ; ```bash; g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs); ./createFile.exe; ``` ; --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms ; ; * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**; Compilation and execution ; ```bash; g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs); ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root ; ```; NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files ; ; A comparison with ; ```; hadd -f myOtherFile.root myFile.root ; ``` . Gives (see screen shots below): ; * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) ; * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. ; ; Many thanks in advance for the fix! . ### `hadd` RAM consumption ; ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption ; ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 ; I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531:2427,test,tested,2427,https://root.cern,https://github.com/root-project/root/issues/13531,1,['test'],['tested']
Testability," opengl; - pyroot; - pythia6_nolink; - pythia6; - roofit; - roofit_multiprocess; - webgui; - root7; - rpath; - shadowpw; - shared; - soversion; - sqlite; - ssl; - tmva; - tmva-cpu; - tmva-pymva; - spectrum; - uring; - vc; - vdt; - veccore; - x11; - xml; - xrootd; - Debian GNU/Linux ""sid"" ; - GCC 11.3.0. ## The problem . To see the problem first to . 	$ make test ; 	; This will generate the shared library `libFoo.so.1` and associated; files (`libFoo_rdict.pcm`, `libFoo.rootmap`, `libFoo.so`) in the; sub-directory `libs`, and execute the script `Test.C`. This all works; fine:. 	$ LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	rm libs/Foo_dict.o libs/Foo.o. Next, clean up . 	$ make clean ; 	; so that we start afresh. Then, execute . 	$ make test LIBDIR=.libs ; 	; which will build the above mentioned library and associated files in; the sub-directory `.libs`. This fails somewhat with . 	$ LD_LIBRARY_PATH=.libs:<ROOTSYS>/lib -l -b -q Test.C. 	Processing Test.C...; 	Error in <TCling::RegisterModule>: Cannot open shared library <ROOTSYS>/root.exe for dictionary libFoo:; 	 <ROOTSYS>/root.exe: cannot dynamically load position-independent executable; 	Error in <TCling::LoadPCM>: ROOT PCM <ROOTSYS>/bin/libFoo_rdict.pcm file does not exist; 	this is a Foo; 	hello from a Foo; 	; 	; It does not matter if `LIBDIR` . - is an absolute path (e.g., ` ``pwd``/.libs`); - the end directory is below a directory starting with a dot (e.g.,; ` ``pwd``/.libs/foo`); - if the actual directory starts with a dot, but the library is loaded; via a symbolic link without the dot ; ; 		$ make clean; 		$ make LIBDIR=.libs ; 		$ ln -s .libs libs; 		$ make test LIBDIR=libs; 	 LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C; 		 ; In all cases, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:1552,Test,Test,1552,https://root.cern,https://github.com/root-project/root/issues/10704,1,['Test'],['Test']
Testability," output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMini",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:2639,mock,mock,2639,https://root.cern,https://github.com/root-project/root/pull/12681,18,"['mock', 'test']","['mock', 'test']"
Testability," owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_types.h`: maybe we could replace this with @guitargeek's new configuration structs.; 4. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test. Finally, one thing that in an ideal world I would have liked to do is add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, I'm rather short on time right now, and these things almost always tend to take longer than one expects, so I'm hesitant to build it now. The **advantage** would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the `MultiProcess` minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in [""PR 7"" (see overview)](https://whimsical.com/roofit-multiprocess-teststatistics-pr-dependencies-QP47k9PyS24VuboQUP5W6P). So, up for discussion, two choices: **A:**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:2349,test,test,2349,https://root.cern,https://github.com/root-project/root/pull/8700,1,['test'],['test']
Testability," printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100. Fatal: nread == nbytes violated; ~~~; 478/1272 Test #440: gtest-tree-ntuple-v7-test-ntuple-minifile ...........................***Failed 65.92 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:9471,test,test,9471,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability," range.AddRange(0, 4.5, 10);; ; ROOT::Fit::DataOptions opt;; ROOT::Fit::BinData data(opt, range);; ROOT::Fit::FillData(data, th1);; ; back->SetParameter(0, 10.);; back->SetParameter(1, -0.5);; ; ROOT::Math::WrappedMultiTF1 fitFunc(*back, back->GetNdim());; ROOT::Fit::Fitter fitter;; fitter.SetFunction(fitFunc, false);; fitter.LikelihoodFit(data);; fitter.Result().Print(std::cout);. th1->Draw(""hist"");; back->Draw(""same"");; ```. or 2D use:. ```; TF2 *back = new TF2(""back"", ""[0] + (x-[1])**2/[2]**2 + (y-[3])**2/[4]**2"", -10, 10, -10, 10);; TF2 *comb = new TF2(""comb"", ""[0] + (x-[1])**2/[2]**2 + (y-[3])**2/[4]**2 + [5]*TMath::Gaus(x,[6],[7])*TMath::Gaus(y,[8],[9])"", -10, 10, -10, 10);; ; TH2F *th2 = new TH2F(""th2"", ""th2"", 100, -10, 10, 100, -10, 10); . comb->SetParameter(0, 3.);; comb->SetParameter(1, 2.5);; comb->SetParameter(2, 6.);; comb->SetParameter(3, -1.0);; comb->SetParameter(4, 3.5);. comb->SetParameter(5, 50);; comb->SetParameter(6, -0.5);; comb->SetParameter(7, 0.6);; comb->SetParameter(8, 0.2);; comb->SetParameter(9, 0.5);. //TF2 *comb = new TF2(""comb"", ""back+gaus"", -10, 10, -10, 10);. TCanvas *c1 = new TCanvas();; th2->FillRandom(""comb"", 1000000);; th2->Draw(""colz"");. ROOT::Fit::DataRange range;; //x ranges to miss the peak; range.AddRange(0, -10, -2.5); ; range.AddRange(0, 1.5, 10);; ; range.AddRange(1, -10, 10);; ; ROOT::Fit::DataOptions opt;; ROOT::Fit::BinData data(opt, range);; ROOT::Fit::FillData(data, th2);; ; back->SetParameter(0, 2.);; back->SetParameter(1, 1.5);; back->SetParameter(2, 8.);; back->SetParameter(3, -0.5);; back->SetParameter(4, 4.0);; ; ROOT::Math::WrappedMultiTF1 fitFunc(*back, back->GetNdim());; ROOT::Fit::Fitter fitter;; fitter.SetFunction(fitFunc, false);; fitter.LikelihoodFit(data);; fitter.Result().Print(std::cout);. TCanvas *c2 = new TCanvas();; back->Draw(""colz"");; back->SetMinimum(0);; back->SetMaximum(th2->GetMaximum());; ```; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10101:3238,test,tested,3238,https://root.cern,https://github.com/root-project/root/pull/10101,1,['test'],['tested']
Testability," realfilename = safemalloc( dirname_len+filename_len+1 );; ^; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:159:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:177:2: error: call to undeclared library function 'free' with type 'void (void *)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; free( realfilename );; ^; export.c:177:2: note: include the header <stdlib.h> or explicitly provide a declaration for 'free'; export.c:404:11: error: call to undeclared library function 'calloc' with type 'void *(unsigned long, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; curr = calloc(*size, 1);; ^; export.c:404:11: note: include the header <stdlib.h> or explicitly provide a declaration for 'calloc'; export.c:676:19: error: call to undeclared library function 'realloc' with type 'void *(void *, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; buff->buffer = realloc( buff->buffer, buff->allocated_size );; ^; export.c:676:19: note: include the header <stdlib.h> or explicitly provide a declaration for 'realloc'; 4 errors generated.; make[3]: *** [Makefile:346: export.o] Error 1; make[3]: *** Waiting for unfinished jobs....; ~. ```. In this PR I'm removing an undef that I think it shouldn't be there; if that variable is not defined then stdlib.h is never included when compiling `export.c` (see [HAVE_STDLIB_H check](https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/export.c#L71)). Including `stdlib.h` is what the error message tells you to do and fixes the build for me. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15044:2278,test,tested,2278,https://root.cern,https://github.com/root-project/root/pull/15044,1,['test'],['tested']
Testability," reproduce what I'm doing it docker by running:. ```bash; git clone https://github.com/chrisburr/root-feedstock.git; cd root-feedstock; git checkout llvm90-install-error; # Adjust CPU_COUNT as required; CPU_COUNT=192 ./build-locally.py --debug --output-id '*root_base*' linux_64_numpy1.16python3.8.____cpython; # When the container launches, look at the output and run the suggested command; # which will be of the form:; cd xxxxx && source xxxxx/build_env_setup.sh; source $RECIPE_DIR/build_root-base.sh; # Anything with ROOT will now fail, e.g.; root; # Rather than waiting to build again, you can roll back to before; # ""make install"" was ran by running; cd ../..; rm -rf $PWD/*; cp -rp $PWD.bak/* $PWD/; cd -; ```. >The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:; >```log; >$ root -b -q -x -e 1+2; >input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); >#include <new>; > ^; >input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:1353,log,log,1353,https://root.cern,https://github.com/root-project/root/issues/7055,1,['log'],['log']
Testability," res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. test.py; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). print(""calling helper""). for i in range(2):; print(f""call attempt {i}""); try:; res = ROOT.call_helper(helper); print(""helper call succeeded:"", res); except Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the error message is different/less useful because of the imperfect transaction rollback already noted. (but the same happens instantiating the template through ```TInterpreter::Declare``` as said). ```; declare ret True; creating helper; calling helper; call attempt 0; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug6/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; /home/b/bendavid/pyrootdebug6/test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here; /home/b/bendavid/pyrootdebug6/test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~. Failed to instantiate ""call_helper(Helper<vector<double> >*)""; error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; note: in instantiation of function template specializ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:2457,test,test,2457,https://root.cern,https://github.com/root-project/root/pull/12449,1,['test'],['test']
Testability," s390x, RHEL+EPEL s390x; 3. Compilation from source. ### Additional context. The failing tests. #### pyunittests-pyroot-pyz-rtensor . This is an endian issue:. $ printf '%08x\n%08x\n' 16777216 1; 01000000; 00000001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: te",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1335,Test,Test,1335,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability," simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapsh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:3942,test,testRooFuncWrapper,3942,https://root.cern,https://github.com/root-project/root/pull/12905,4,['test'],['testRooFuncWrapper']
Testability," so will clean up the ""plumbing"" of the MultiProcess functions quite a bit.; - Benchmarking and optimization still has to be done for this version as well. The scaling results of the proof of concept (see references above) should be reproducible with this reimplementation, but this possibly still needs some tuning.; - After the most recent merging in of master, the RooGradMinimizer tests no longer pass, because the numbers are no longer floating point exactly the same. We have not looked into why, but one possible source is the reworked Kahan summation class. This was applied in RooMinimizerFcn, but not yet in our external-gradient classes.; - The proof-of-concept version classes are also still present in the source tree (`roofitcore/MultiProcess`), but have only been partially maintained since we started with the final version. Probably the best thing to do there is to remove that, but maybe people disagree and want to keep it for comparison while benchmarking and reproducing the results of the proof-of-concept benchmarks. Note: BidirMMapPipe is in there as well, since it was moved there. This class is used in the RooRealMPFE event-based parallelization method that was present already before I started. `RooGaussMinimizerFcn` and `RooTaskSpec` were also part of our proof-of-concept exploration work.; - Similarly, there is some left-over code from benchmarks that is probably now deprecated. In particular, `RooTimer` and `RooJSONListFile`, but also strewn around the code there are still some `chrono` includes or other timing remnants. This work was done over the past 5 years at the initiative of Wouter Verkerke @wverkerke under a Netherlands eScience Center grant, with direct code contributions from @vincecr0ft and @ipelupessy on the RooFit side and @roelaaij on ZeroMQ, lots of support from @cburgard, Lydia Brenner and @jiskattema, invaluable design input from @hageboeck and @lmoneta in the final stage of moving from proof of concept version to the version before you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:6772,benchmark,benchmarks,6772,https://root.cern,https://github.com/root-project/root/pull/8294,1,['benchmark'],['benchmarks']
Testability," ssl tmva tmva-cpu tmva-pymva tmva-rmva spectrum unuran uring x11 xml xrootd; ```; The [CMakeCache.txt](https://github.com/root-project/root/files/6343170/CMakeCache.txt) file is attached. The test failures are as follows:. ```sh; The following tests FAILED:; 	 10 - pyunittests-pyroot-import-load-libs (Failed); 	 85 - gtest-core-metacling-test-TClingTest (Failed); 	994 - tutorial-v7-ntuple-ntpl005_introspection (Failed); 	1335 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1336 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1437 - roottest-python-pickle-read (Failed); 	1496 - roottest-root-dataframe-regression_snapshot (Failed); 	1499 - roottest-root-dataframe-test_snapshot (Failed); 	1500 - roottest-root-dataframe-test_stringfiltercolumn (Failed); 	1501 - roottest-root-dataframe-test_glob (Failed); 	1502 - roottest-root-dataframe-test_reduce (Failed); 	1513 - roottest-root-dataframe-ctors (Failed); ```. *__Update__: JupyROOT tests using wrong Python version were due to a configuration issue in jupyter on my machine. Please ignore those. For the other tests, I repeated the build with GCC 10.3 and I still see the same failures.*. Please click [here](https://github.com/root-project/root/files/6343199/output.txt) for the full output for each test.; Some things to note:. - Test pyunittests-pyroot-import-load-libs fails with; ```sh; ERROR: test_import (import_load_libs.ImportLoadLibs); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/root/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 117, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libz3; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:2193,test,tests,2193,https://root.cern,https://github.com/root-project/root/issues/7936,1,['test'],['tests']
Testability," std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::_M_insert_range_unique<const std::pair<const std::__cxx11::basic_string<char>, bool> *>' requested here; { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }; ^; /home/blue/Scratchpad/work/forum_rvec_crash_2/repro_modules_crash.C:2:31: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char>, bool, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::map' requested here; std::map<std::string, bool> m{{""foo"", true}, {""bar"", false}};; ^; /usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/bits/stl_tree.h:315:7: note: previous definition is here; operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT; ^; ```. Note 1: A `Release` build seems to work fine. I can reproduce the problem on CentOS 8 Stream with a self-built GCC 11.1.0. When testing with self-built versions of GCC 11.2.0, 10.2.0, and 9.3.0, I get a probably related crash `ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:3857: unsigned int clang::FunctionDecl::getODRHash() const: Assertion 'hasODRHash()' failed.` where the `FunctionDecl` is the constructor of `std::_Rb_tree_iterator`. Note 2: The system-default GCC 8.5.0 and a self-built GCC 8.4.0 are both fine. The only ""relevant"" change that I see for `_Rb_tree_iterator` in GCC 9 is the move from (member) `bool operator==` to `friend bool operator==`, which matches the error message quite nicely. Finally, I was able to reproduce the assertion in a Docker container of `ubuntu:latest` (Ubuntu 22.04.4 LTS at the time of writing), after installing; ```; # apt update; # apt upgrade; # apt install --no-install-recommends ca-certificates cmake gcc g++ git libc6-dev libz-dev make ninja-build patch python3 uuid-dev; ```; and then configuring as `cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -Dx11=OFF ../root.src/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10291:2438,test,testing,2438,https://root.cern,https://github.com/root-project/root/issues/10291,3,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'testing']"
Testability," such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par; with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit; developments, like the analytical convolution support for the GPU. To; implement this, it will also be beneficial to compile the analytical; convolution classes for a given normalization set, which can now be done; in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:1685,log,logic,1685,https://root.cern,https://github.com/root-project/root/pull/12079,1,['log'],['logic']
Testability," than just the percentage difference. <details>; <summary> Assembly comparison </summary>. ```; 4.67% 4.67% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; unordered_map.count; Percent│ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; 1.20 │ mov 0x60(%rdi),%r8; 36.14 │ mov %rsi,%rax; 2.41 │ xor %edx,%edx; │ div %r8; 3.61 │ mov 0x58(%rdi),%rax; 2.41 │ mov (%rax,%rdx,8),%rax; 30.12 │ mov %rdx,%r10; 1.20 │ test %rax,%rax; │ ↓ je 70; │ mov (%rax),%rcx; │ test %rcx,%rcx; │ ↓ je 70; │ mov 0x8(%rcx),%rdi; 21.69 │ xor %r9d,%r9d; │ ↓ jmp 4e; │ nop; │30: test %r9,%r9; │ ↓ jne 78; │ mov (%rcx),%rcx; │ test %rcx,%rcx; │ ↓ je 5f; │3d: mov 0x8(%rcx),%rdi; │ xor %edx,%edx; │ mov %rdi,%rax; │ div %r8; │ cmp %rdx,%r10; │ ↓ jne 5f; │4e: cmp %rsi,%rdi; │ ↑ jne 30; 1.20 │ mov (%rcx),%rcx; │ add $0x1,%r9; │ test %rcx,%rcx; │ ↑ jne 3d; │5f: test %r9,%r9; │ setne %al; │ ← retq; │ nop; │70: xor %eax,%eax; │ ← retq; │ nop; │78: mov $0x1,%eax. unordered_map.find; 3.85% 3.85% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; Percent│; │; │; │ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; │ mov 0x60(%rdi),%r8; 17.31 │ mov %rsi,%rax; │ xor %edx,%edx; │ div %r8; 11.54 │ mov 0x58(%rdi),%rax; │ mov (%rax,%rdx,8),%rax; 28.85 │ mov %rdx,%r9; │ test %rax,%rax; │ ↓ je 50; │ mov (%rax),%rcx; 1.92 │ mov 0x8(%rcx),%rdi; 40.38 │ ┌──jmp 41; │ │ nop; │28:│ mov (%rcx),%rcx; │ │ test %rcx,%rcx; │ │↓ je 50; │ │ mov 0x8(%rcx),%rdi; │ │ xor %edx,%edx; │ │ mov %rdi,%rax; │ │ div %r8; │ │ cmp %rdx,%r9; │ │↓ jne 50; │41:└─→cmp %rdi,%rsi; │ ↑ jne 28; │ mov $0x1,%eax; │ ← retq; │ nop; │50: xor %eax,%eax; │ ← retq; ```; </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8209:1870,test,test,1870,https://root.cern,https://github.com/root-project/root/pull/8209,4,['test'],['test']
Testability," the code. Running conditions:; * OS: Linux_CentOS7.7.1908-x86_64-gcc5.2.0; * ROOT: 6.08.00; * GCC: 5.2.0; ; code: ; file1: inc.cxx; ```cpp; #include <map>. // extern std::map<std::string, const double> UNITS;; std::map<std::string, const double> UNITS;; ```; file2: test.cxx; ```cpp; #include <map>. #include ""TGraphErrors.h""; #include ""TH1F.h""; #include ""TCanvas.h"". std::map<std::string, const double> UNITS = {; {"""",	1},; {""mm"", 1e-3},; };. int main() {; 	double value[] = {1, 2, 3, 4, 5};; TCanvas *c = new TCanvas(""c"", ""c"", 1200, 900);; 	TH1F *h = new TH1F(""h"", ""h"", 5, 0.5, 5.5);; 	TGraphErrors *g = new TGraphErrors();; 	for(int i=0; i<5; i++) {; 		g->SetPoint(i, i+1, value[i]);; 		h->Fill(value[i]);; 	}. 	g->SetMarkerStyle(20);; 	g->Draw(""AP"");; 	// h->Draw(""HIST"");; 	c->Print(""test.png"");. return 0;; }; ```; compiling:; * g++ -std=c++11 -fPIC --shared -o inc.so inc.cxx; * g++ -std=c++11 -o test test.cxx inc.so `root-config --libs --glibs --cflags` && ./test; ; result:; ```; ======= Backtrace: =========; /lib64/libc.so.6(+0x80f87)[0x7fd6589a6f87]; /lib64/libc.so.6(+0x8155e)[0x7fd6589a755e]; /lib64/libfreetype.so.6(+0x3ea1c)[0x7fd65771ea1c]; /lib64/libfreetype.so.6(+0x3fa02)[0x7fd65771fa02]; /lib64/libfreetype.so.6(+0x1fd4c)[0x7fd6576ffd4c]; /lib64/libfreetype.so.6(FT_Done_Face+0xa1)[0x7fd6576ffe51]; /root/6.08.00/lib/libGraf.so.6.08(_ZN3TTF7CleanupEv+0x5e)[0x7fd65bb62a7e]; /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7fd65896000a]; /root/6.08.00/lib/libGraf.so.6.08(+0x638a3)[0x7fd65baef8a3]; ======= Memory map: ========; 00400000-0040b000 r-xp 00000000 00:2e 3242707291 /work/test/test; 0060a000-0060b000 r--p 0000a000 00:2e 3242707291 /work/test/test; 0060b000-0060c000 rw-p 0000b000 00:2e 3242707291 /work/test/test; 01644000-02e78000 rw-p 00000000 00:00 0 [heap]; 7fd638000000-7fd638021000 rw-p 00000000 00:00 0 ; 7fd638021000-7fd63c000000 ---p 00000000 00:00 0 ; 7fd63ffc8000-7fd6400c3000 r--p 00000000 00:32 432514122 /root/6.08.00/fonts/FreeSans.otf; 7fd6400c3000-7fd640142",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256:1170,test,test,1170,https://root.cern,https://github.com/root-project/root/issues/8256,1,['test'],['test']
Testability," the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above.; In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations.; Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"".; RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(); In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5552:2577,test,tests,2577,https://root.cern,https://github.com/root-project/root/pull/5552,1,['test'],['tests']
Testability," thread T0; 352: #0 0x7f800120c3b9 in frombuf(char*&, unsigned int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:310:7; 352: #1 0x7f800120c2bc in frombuf(char*&, int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:442:48; 352: #2 0x7f7ffe26e9d0 in TBufferFile::ReadInt(int&) /home/jhahnfel/ROOT/src/io/io/inc/TBufferFile.h:401:4; 352: #3 0x7f80011965fc in TLeafI::ReadBasket(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TLeafI.cxx:165:9; 352: #4 0x7f8001055b29 in TBranch::ReadLeavesImpl(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:2382:13; 352: #5 0x7f800106b4a9 in TBranch::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:1691:4; 352: #6 0x7f800125eea0 in TTree::GetEntry(long long, int)::$_3::operator()() const /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5628:23; 352: #7 0x7f800125d3c8 in TTree::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5703:7; 352: #8 0x50a984 in TestContex::runApplicationPhase(TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:188:13; 352: #9 0x50b2a3 in TestCvSerialise(TMVA::Types::EMVA, TString, TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:231:7; 352: #10 0x50b6e2 in TestCrossValidationSerialise() /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:240:7; 352: #11 0x50b8b3 in main /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:255:4; 352: #12 0x7f7ffad0aca2 in __libc_start_main (/lib64/libc.so.6+0x3aca2); 352: #13 0x42361d in _start (/home/jhahnfel/ROOT/build-clang-asan-debug/tmva/tmva/test/crossvalidation/testCrossValidationSerialise+0x42361d); 352:; 352: Address 0x7f7ff4e1b880 is located in stack of thread T0 at offset 128 in frame; 352: #0 0x7f7feed1f30f in cling::LookupHelper::findType(llvm::StringRef, cling::LookupHelper::DiagSetting) const (/home/jhahnfel/ROOT/build-clang-asan-debug/lib/libCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010:1109,Test,TestContex,1109,https://root.cern,https://github.com/root-project/root/issues/10010,3,"['Test', 'test']","['TestContex', 'TestCrossValidationSerialise', 'test']"
Testability," time in; the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at; https://bugs.python.org/issue33725. Any application that makes use of; e.g. multiprocessing (or in any way ends up calling MacOS system `fork`; or `exec`) is affected. According to the Python bug tracker, this issue; has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,; that boils down to this simple reproducer:; ```python; import pyspark. sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[4]"", }.items()); sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):; import cppyy; return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:; x+y); ```. the issue is still triggered. Installing any other 3.8+ Python; executable on a MacOS node doesn't show this behaviour, with the exact; same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment; variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test.; This effectively brings back the behaviour of MacOS10.12 and previous; versions. This commit uses this workaround, since we cannot directly; modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes; in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode.; 2. Their environment is MacOS 10.13+.; 3. The application creates a pyspark mock cluster on the local Mac machine and; the computations happen strictly in the single local node, not in a; distributed cluster. Thus, it probably interests only a very small fraction of use cases for; distributed RDataFrame, mainly regarding quick checks done locally before; actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9811:1388,test,test,1388,https://root.cern,https://github.com/root-project/root/pull/9811,2,"['mock', 'test']","['mock', 'test']"
Testability," true in /opt/root_src/core/cont/inc/TCollection.h:249; 23: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 24: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 25: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248; 26: Returning from 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5148; 27: Loop condition is true. Entering loop body in /opt/root_src/proof/proof/src/TProof.cxx:5148; 28: 'pof' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:5150; 29: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5150; 30: Calling 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 31: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 32: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 33: Returning from 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 34: Left side of '&&' is false in /opt/root_src/proof/proof/src/TProof.cxx:5151; 35: Calling 'TProofOutputFile::IsRetrieve' in /opt/root_src/proof/proof/src/TProof.cxx:5163; 36: '?' condition is true in /opt/root_src/proof/proof/inc/TProofOutputFile.h:111; 37: Returning the value 1, which participates in a condition later in /opt/root_src/proof/proof/inc/TProofOutputFile.h:111; 38: Returning from 'TProofOutputFile::IsRetrieve' in /opt/root_src/proof/proof/src/TProof.cxx:5163; 39: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5163; 40: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TProof.cxx:5165; /opt/root_src/proof/proof/src/TProof.cxx:5628:25: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fProtocol' is >= 13 in /opt/root_src/proof/proof/src/TProof.cxx:5503; 2: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:5503; 3: Assuming t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:28390,Test,TestBit,28390,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability," trying to find the TClass; for something for which no dictionary was generated, leading to autoparsing.; I can get rid of the crash in the atlas build by generating dictionaries; for these classes (here, various specialization of; `CondMultChanCollection<LArConditionsSubset<T> >`).; However, i also looked at bit at the root cause of the crash. The summary is that it seems to involve a Transaction object being released; multiple times back to the TransactionPool. And the fact that TransactionPool; is used only in opt builds is why we don't see this crash if libCling; is compiled with debugging. The crash in RegisterModule happens in the last line here:. ```; for (auto& fwdDeclArgToSkipPair : fwdDeclsArgToSkip){; const std::string& fwdDecl = fwdDeclArgToSkipPair.first;; const int nArgsToSkip = fwdDeclArgToSkipPair.second;; auto compRes = fInterpreter->declare(fwdDecl.c_str(), &T);; assert(cling::Interpreter::kSuccess == compRes &&; ""A fwd declaration could not be compiled"");; if (compRes!=cling::Interpreter::kSuccess){; Warning(""TCling::RegisterModule"",; ""Problems in declaring string '%s' were encountered."",; fwdDecl.c_str()) ;; continue;; }. // Drill through namespaces recursively until the template is found; if(ClassTemplateDecl* TD = FindTemplateInNamespace(T->getFirstDecl().getSingleDecl())){; ```. because the Transaction T we get back is empty (size()==0),; so T->getFirstDecl() is undefined. The reason this happens is because we have the same Transaction object; entered twice in the TransactionPool. Interpreter::declare gets the Transaction; object from the pool and fills it in. It has a valid entry at this time.; But it then creates a nested transation. It gets a new pointer from the; pool, which points at the same Transaction object still in use.; When the constructor is run, the entry in that Transaction object is erased,; ultimately leading to getting an empty transaction above. Now, the TransactionPool gets messed up on an earlier GetClass call,; at this cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657:9935,assert,assert,9935,https://root.cern,https://github.com/root-project/root/issues/7657,1,['assert'],['assert']
Testability," type [-fpermissive]; 2549 | !vec_any_eq(*(const vector unsigned char*)CurPtr, Slashes)); | ^~~~~~; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:28: error: expected primary-expression before 'const'; 2549 | !vec_any_eq(*(const vector unsigned char*)CurPtr, Slashes)); | ^~~~~; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:28: error: expected ')' before 'const'; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2550:21: error: expected ')' before ';' token; 2550 | CurPtr += 16;; | ^; | ); In file included from /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2469:; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:15: note: to match this '('; 2549 | !vec_any_eq(*(const vector unsigned char*)CurPtr, Slashes)); | ^~~~~~~~~~; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2550:21: error: expected ')' before ';' token; 2550 | CurPtr += 16;; | ^; | ); /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/too",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:6247,test,tests,6247,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability," unit test we run in our CI.; We started to experience this regression (test failing) on our CI when we tried to move to a version of root compiled with C++20.; It turns out that this is reproduced in root v6-28 and v6-30 even if C++20 **is not enabled**.; It appeared only on Ubuntu tests, so far. I am attaching the test.C asap in editing this issue. ### Reproducer. ```C++; #include <TObject.h>; #include <TObjArray.h>; #include <TList.h>; #include <TH1I.h>; #include <TH2I.h>; #include <iostream>. void deleteTCollections(TObject *obj); {; std::cout << ""Processing "" << ((TNamed *)obj)->TNamed::GetName() << "" of type "" << obj->ClassName() << std::endl;; if (auto c = dynamic_cast<TCollection *>(obj)); {; std::cout << ""Entering TCollection... "" << std::endl;; c->SetOwner(false);; auto iter = c->MakeIterator();; while (auto element = iter->Next()); {; deleteTCollections(element);; }; delete iter;; delete c;; }; else; {; delete obj;; }; }. void test(); {; int bins{10}, min{0}, max{10};; TObjArray *main = new TObjArray();; main->SetOwner(false);. auto *collectionInside = new TList();; collectionInside->SetOwner(true);. TH1I *histo1DinsideCollection = new TH1I(""histo 1d"", ""histo 1d"", bins, min, max);; histo1DinsideCollection->Fill(2);; collectionInside->Add(histo1DinsideCollection);. main->Add(collectionInside);; std::cout << "" ====== Listing elements in lists... ====== "" << std::endl;; for (int i = 0; i < main->GetEntries(); ++i); {; std::cout << ""main["" << i << ""] = "" << main->At(i) << "" is a: "" << main->At(i)->ClassName() << "" with title: "" << ((TNamed *)(main->At(i)))->GetTitle() << std::endl;; }; for (int i = 0; i < collectionInside->GetEntries(); ++i); {; std::cout << ""\t collectionInside["" << i << ""] = "" << collectionInside->At(i) << "" is a: "" << collectionInside->At(i)->ClassName() << "" with title: "" << ((TNamed *)(collectionInside->At(i)))->GetTitle() << std::endl;; }; std::cout << "" ====== Deleting... ====== "" << std::endl;; deleteTCollections(main);; return;; }; `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504:1405,test,test,1405,https://root.cern,https://github.com/root-project/root/issues/14504,1,['test'],['test']
Testability," which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior; Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce; I managed to reproduce this issue with a simple script, attached here:; ```python; import os; import tempfile. import psutil; import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""); print(""Creating test root file"", file_name); _make_file_with_tmap(file_name). mem0 = proc.memory_info(); rootfile = ROOT.TFile.Open(file_name, ""READ""); while True:. ann_obj = rootfile.Get(""annotations""); # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%; del ann_obj. mem1 = proc.memory_info(); _memstat(mem0, mem1); mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)); value = ROOT.TObjArray(); value.Add(ROOT.TObjString(""annotation"")); value.Add(ROOT.TObjString(f""10000"")); map.Add(key, value). rootfile.WriteTObject(map, ""annotations""); rootfile.Close(). def _memstat(mem0, mem1):; MB = 1024 * 1024; rss_mb = mem1.rss // MB; vms_mb = mem1.vms // MB; rss_delta_mb = (mem1.rss - mem0.rss) / MB; vms_delta_mb = (mem1.vms - mem0.vms) / MB; print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11099:1064,test,test,1064,https://root.cern,https://github.com/root-project/root/issues/11099,1,['test'],['test']
Testability," without glitches. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root 6.28.00 for s390x; 2. run unut tests. ### Setup. 1. ROOT version: 6.28.00; 2. Fedora Linux s390x, RHEL+EPEL s390x; 3. Compilation from source. ### Additional context. The failing tests. #### pyunittests-pyroot-pyz-rtensor . This is an endian issue:. $ printf '%08x\n%08x\n' 16777216 1; 01000000; 00000001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1147,Test,Test,1147,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability, ���2V8���2V not found.; Module ��=\u��&���g|��Xϭ)��ۡc}n?�ʾ��v� @Eǉ7VP\�2 not found.; Module Ц~�����2V D not found.; Module mi not found.; Module �j%�2Vpj%�2VPh%�2V@h%�2V@s%�2V0s%�2V�N��2V�N��2VQ��2VQ��2V@S��2V0S��2V �8�2V not found.; Module 9.0 not found.; ��2V���2V ��2V���2V�Y��2V ��2V�v�2V��2V ��2V 	��2V not found.; Module @�ĉ7VPh%�2V@h%�2V@s%�2V0s%�2V�N��2V�N��2VQ��2VQ��2V@S��2V0S��2V �8�2V not found.; Module !p�w��:�2 not found.; Module ��=\u��&���g|��Xϭ)��ۡc}n?�ʾ��v� �z�� not found.; Module not found.; Module ��ĉ7V99cl_khr_gVs_�0���2V;;e>khr_fp16 not found.; Module not found.; Module GeneticMinimizer not found.; Module �[h�A�2V�[h�<��[h�0�#\h���K\h� not found.; Module �� not found.; Module module not found.; Module base_1621��7VP\�2Vl_khr_f not found.; Module not found.; Module not found.; Module �'��&E'��'�Q|�~ not found.; Module Q����2V�; ��2V����a3 not found.; Module е8�2V��8�2VP�8�2V@�8�2V��8�2V��8�2V�K�Q7V��2V>��� not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pcm file does not exist; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libMathCore_rdict.pcm file does not exist. (int) 2; ```. on the third:. ```; <<< cling interactive line includer >>>: remark: building module 'ROOTVecOps' as '/home/cburr/miniconda3/envs/test/lib/ROOTVecOps.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'ROOTVecOps' [-Rmodule-build]; (truncated but it's similar to above); ```. on the **fourteenth**:. ```; <<< cling interactive line includer >>>: remark: building module 'TMVA' as '/home/cburr/miniconda3/envs/test/lib/TMVA.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'TMVA' [-Rmodule-build]; Module FitterBase not found.; Module (�;cU! ��;cUpJ��� not found.; Module TMVA.pcmoRTTI not found.; Module not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:4638,test,test,4638,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,"!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK v",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982:2358,log,log,2358,https://root.cern,https://github.com/root-project/root/issues/7982,1,['log'],['log']
Testability,"!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; ```; Apparently it cant find hadd.exe . ; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; It working?; ### To Reprodu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982:3273,log,log,3273,https://root.cern,https://github.com/root-project/root/issues/7982,1,['log'],['log']
Testability,""" || true; 1: : 'RUN: at line 2'; rm -f ""CompGen.h.pch"" && rm -f ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch""; 1: : 'RUN: at line 3'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path -include-pch Relative.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: --; 1: Exit Code: 1; 1: ; 1: Command Output (stderr):; 1: --; 1: /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C:11:12: error: CHECK: expected string not found in input; 1: // CHECK: I was executed; 1: ^; 1: <stdin>:1:1: note: scanning from here; 1: cling: /srv/root/src/root/interpreter/cling/lib/Interpreter/CIFactory.cpp:926: bool {anonymous}::SetupCompiler(clang::CompilerInstanc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:1693,test,test,1693,https://root.cern,https://github.com/root-project/root/issues/10693,1,['test'],['test']
Testability,""", ""model_ctl"", x, mean, sigma);; RooCategory sample(""sample"", ""sample"", {{""physics"", 0}, {""control"", 1}});; RooSimultaneous simPdf(""simPdf"", ""simultaneous pdf"", sample);; simPdf.addPdf(model, ""physics"");; simPdf.addPdf(model_ctl, ""control"");. // Export to JSON; {; RooWorkspace ws{""workspace""};; ws.import(simPdf);; RooJSONFactoryWSTool tool{ws};; tool.exportJSON(""simPdf.json"");; // Output can be pretty-printed with `python -m json.tool simPdf.json`; }. // Import JSON; RooWorkspace ws{""workspace""};; RooJSONFactoryWSTool tool{ws};; tool.importJSON(""simPdf.json"");; // At the moment this will fail, because the Gaussians in the product are; // missing in the JSON dump!; }; ```. The JSON dump will look like this:. ```json; {; ""functions"": {},; ""pdfs"": {; ""model"": {; ""factors"": [; ""g1"",; ""g2""; ],; ""name"": ""model"",; ""tags"": [; ""SnapShot_ExtRefClone""; ],; ""type"": ""pdfprod""; },; ""model_ctl"": {; ""mean"": ""mean"",; ""sigma"": ""sigma"",; ""tags"": [; ""SnapShot_ExtRefClone""; ],; ""type"": ""Gaussian"",; ""x"": ""x""; },; ""simPdf"": {; ""channels"": {; ""model"": {; ""factors"": [; ""g1"",; ""g2""; ],; ""name"": ""model"",; ""tags"": [; ""SnapShot_ExtRefClone""; ],; ""type"": ""pdfprod""; },; ""model_ctl"": {; ""mean"": ""mean"",; ""sigma"": ""sigma"",; ""tags"": [; ""SnapShot_ExtRefClone""; ],; ""type"": ""Gaussian"",; ""x"": ""x""; }; },; ""tags"": [; ""toplevel""; ],; ""type"": ""simultaneous""; }; }; }; ```. Here are the problems that need to be fixed:; 1. Parameter definition (in particular with ranges) is missing; 2. `mode` and `model_ctl` are duplicate (both in pdf level and as children of the RooSimultaneous). They should only be in the top level, while the RooSimultaneous only has the names, e.g.:; ```json; ""simPdf"": {; ""channels"": {; ""control"": ""model_ctl"",; ""physics"": ""model""; },; ""tags"": [; ""toplevel""; ],; ""type"": ""simultaneous""; }; ```; 3. The pdfs `g1` and `g2` are missing in the JSON. These problems need to be fixed and a unit test should be written that verifies that the model above can be successfully serialized and de-serialized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9372:3177,test,test,3177,https://root.cern,https://github.com/root-project/root/issues/9372,1,['test'],['test']
Testability,"""; #include ""TFile.h""; ; class TestClass : public TObject {; public:; TestClass(){; std::array<std::string, 2> test_array{""aaaa"", ""bbbbbb""};; test_map_[test_array] = ""cccc"";; }; ; void Print(Option_t *option="""") const {; for(const auto& element : test_map_){; std::cout << element.first[0] << "" "" << element.first[1] << "" "" << element.second << std::endl;; }; }; private:; std::map<std::array<std::string, 2>, std::string> test_map_{};; ClassDef(TestClass, 1);; };; ClassImp(TestClass); ; void test(){; auto* test_obj = new TestClass;; test_obj->Print();; ; auto* file = TFile::Open(""test.root"", ""recreate"");; test_obj->Write(""obj"");; file->Close();; ; delete file;; delete test_obj;; ; file = TFile::Open(""test.root"", ""read"");; test_obj = file->Get<TestClass>(""obj"");; test_obj->Print();; ; file->Close();; delete file;; }; ; int main(int argc, char* argv[]) {; test();; return 0;; }. ### Running the example. With a compiled code everything works as expected:. root -l; root [0] .L test.cpp+; root [1] test(). gives correct output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:1285,test,test,1285,https://root.cern,https://github.com/root-project/root/issues/8268,1,['test'],['test']
Testability,"""; #include ""TGeoPara.h""; #include ""TGeoParaboloid.h""; #include ""TGeoParallelWorld.h""; #include ""TGeoPatternFinder.h""; #include ""TGeoPcon.h""; #include ""TGeoPgon.h""; #include ""TGeoPhysicalConstants.h""; #include ""TGeoPhysicalNode.h""; #include ""TGeoPolygon.h""; #include ""TGeoRCPtr.h""; #include ""TGeoRegion.h""; #include ""TGeoScaledShape.h""; #include ""TGeoShape.h""; #include ""TGeoShapeAssembly.h""; #include ""TGeoSphere.h""; #include ""TGeoStateInfo.h""; #include ""TGeoSystemOfUnits.h""; #include ""TGeoTorus.h""; #include ""TGeoTrd1.h""; #include ""TGeoTrd2.h""; #include ""TGeoTube.h""; #include ""TGeoUniformMagField.h""; #include ""TGeoVolume.h""; #include ""TGeoVoxelFinder.h""; #include ""TGeoXtru.h""; #include ""TGeoTessellated.h""; #include ""TGeoVector3.h""; #include ""TVirtualGeoConverter.h""; #include ""TVirtualGeoPainter.h""; #include ""TVirtualGeoTrack.h""; #include ""TVirtualMagField.h"". #undef _BACKWARD_BACKWARD_WARNING_H. Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\build\ws\BUILDTYPE\Release\LABEL\windows64\V\6-30\root\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; libcppyy_backend3_8!??; libCore!TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!get_wpgmptr(); ucrtbase!get_wpgmptr(); ucrtbase!wassert(); libCling!TClingValue::ToTypeAndValueString(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TCling::LoadEnums(); libCore!TListOfEnums::Load(); libCore!TClass::GetListOfEnums(); libCling!TCling::InvalidateCachedDecl(); libCling!TCling::UpdateListsOnUnloaded(); libCling!TCling::UpdateListsOnUnloaded(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::Value::print(); libCling!TClingValue::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:4748,Assert,Assertion,4748,https://root.cern,https://github.com/root-project/root/issues/14302,1,['Assert'],['Assertion']
Testability,"""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/476:431,test,test,431,https://root.cern,https://github.com/root-project/root/pull/476,1,['test'],['test']
Testability,"""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11693:244,test,tested,244,https://root.cern,https://github.com/root-project/root/pull/11693,1,['test'],['tested']
Testability,"# 6.28.00. **GitHub issue** that we still want to resolve before the v6.28.00 release:. - [x] https://github.com/root-project/root/issues/11951; Issue is not closed yet because the solution we have is not perfect, but there is a way of doing it already in `v628`: with the `RooBinIntegrator`; - [x] https://github.com/root-project/root/issues/11814; - [x] https://github.com/root-project/root/issues/11954; - [x] https://github.com/root-project/root/issues/8984; Issue is not closed yet because the solution still needs to be validated to the user, but patch is already merged to `master` and `v628` branch. **Other items** that still need to be done without any associated GitHub issue:. - [x] New test statistics should consider the `Offset()` command in `RooAbsPdf::fitTo()`, @Zeff020; - [x] Write release notes for the change in the `KahanSum` class, @egpbos; - [x] If you run the `testInterface` unit test binary in `roofitcore`, you get errors printed out and there is one disabled test. Please take a look, @Zeff020. **Backports** that need to be made for the v6.28 branch (in this particular order from top to bottom, to not have a commit history too different from master):. - [x] https://github.com/root-project/root/pull/11940; - [x] https://github.com/root-project/root/pull/11941; - [x] https://github.com/root-project/root/pull/10210; Except for the commit to RooStats, which is a fixup only relevant to a commit in master; - [x] https://github.com/root-project/root/pull/11953; Excluding the one technical commit about the `snapshot()` overload; - [x] https://github.com/root-project/root/pull/9539; Only the first four commits that are not about code modernization; - [x] https://github.com/root-project/root/pull/11969; - [x] https://github.com/root-project/root/pull/11962; - [x] https://github.com/root-project/root/pull/11970; - [x] https://github.com/root-project/root/pull/11966; - [x] https://github.com/root-project/root/pull/11984; - [x] https://github.com/root-project/root/p",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11856:699,test,test,699,https://root.cern,https://github.com/root-project/root/issues/11856,4,['test'],"['test', 'testInterface']"
Testability,"# 6.30.00. **GitHub issue** that we still want to resolve before the release:. - [x] https://github.com/root-project/root/issues/11965; - [x] https://github.com/root-project/root/issues/13852. **Other items** that still need to be done without any associated GitHub issue:. - [x] This the problem with HistFactory component plotting [described on the forum](https://root-forum.cern.ch/t/problems-plotting-individual-components-with-roofit-histfactory/55151). Fixed in:; #13464; - [x] Do some fix such we don't need to reduce the precision in this [HS3 simultaneous fit unit test](https://github.com/root-project/root/blob/master/roofit/hs3/test/testHS3SimultaneousFit.cxx#L118). **Backports** that need to be made for the v6.30 branch (in this particular order from top to bottom, to not have a commit history too different from master):. - [x] https://github.com/root-project/root/pull/13812; - [x] https://github.com/root-project/root/pull/13784; - [x] https://github.com/root-project/root/pull/13853; - [x] https://github.com/root-project/root/pull/13813; - [x] https://github.com/root-project/root/pull/13879; - [x] https://github.com/root-project/root/pull/13881; - [x] https://github.com/root-project/root/pull/13883; - [x] https://github.com/root-project/root/pull/13890; - [x] https://github.com/root-project/root/pull/13896; - [x] https://github.com/root-project/root/pull/13911; - [x] https://github.com/root-project/root/pull/13914; - [x] https://github.com/root-project/root/pull/13109; - [x] https://github.com/root-project/root/pull/13905; - [x] https://github.com/root-project/root/pull/13925; - [x] https://github.com/root-project/root/pull/13912; - [x] https://github.com/root-project/root/pull/13915; - [x] https://github.com/root-project/root/pull/13918; - [x] https://github.com/root-project/root/pull/13929; - [x] https://github.com/root-project/root/pull/13986. The backports were grouped in a few PRs to `v6-28-00-patches`:. 1. https://github.com/root-project/root/pull/13870; 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13458:574,test,test,574,https://root.cern,https://github.com/root-project/root/issues/13458,2,['test'],['test']
Testability,"# API Redesign. ## Goal. The goal is this PR is to improve the API of the CNN layers (MaxPooling and Conv currently), by eliminating redundant constructor arguments and fields. By redundant in this context, I refer to arguments that can be directly computed from others, and fields that unnecesseraly exist in multiple classes. ## Key points. Below some discussion points on design decisions I made, but still consider debatable. ; Since my experience in production level C++ is very limited I highly value opinions from experienced colleagues and previous authors of the module. ### Making `MaxPoolingLayer` a sub-class of `ConvLayer`. Every layer type in a convolutional network follows the logic existing in our `ConvLayer`:. A filter is sliding over the input and at each step applies an operation to the input elements within its receptive field to produce a single output element. * In a convolutional layer this operation is a linear combination with learnable parameters.; * In an average pooling layer the operation is a linear combination with constant parameters (and equal to the inverse of the receptive field's size).; * In a max pooling layer its a non linear operation. As we can see they all share the same logic and therefore fields. ## Results. 1. Common fields between the 2 layer types in the CNN module are now not duplicated (strides sizes, padding sizes, filter sizes). The same for the 4 `protected` methods in `ConvLayer`. 2. We now have a cleaner API, as the constructor arguments where reduced from 26 to 16 without any change in the functionality).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117:693,log,logic,693,https://root.cern,https://github.com/root-project/root/pull/2117,4,['log'],['logic']
Testability,"# Bug in ROOT library loading. This small example illustrates a bug in the ROOT library loading. . I suspect that the ROOT code cannot handle directories that start with; a dot (`.`). . ## Platform . - ROOT 6.26/00; - Features:; - cxx17; - asimage; - builtin_clang; - builtin_cling; - builtin_llvm; - builtin_openui5; - builtin_vdt; - builtin_xxhash; - builtin_zeromq; - cefweb; - clad; - dataframe; - davix; - exceptions; - fftw3; - fitsio; - gdml; - gfal; - gnuinstall; - gsl_shared; - gviz; - http; - imt; - mathmore; - mlp; - minuit2; - opengl; - pyroot; - pythia6_nolink; - pythia6; - roofit; - roofit_multiprocess; - webgui; - root7; - rpath; - shadowpw; - shared; - soversion; - sqlite; - ssl; - tmva; - tmva-cpu; - tmva-pymva; - spectrum; - uring; - vc; - vdt; - veccore; - x11; - xml; - xrootd; - Debian GNU/Linux ""sid"" ; - GCC 11.3.0. ## The problem . To see the problem first to . 	$ make test ; 	; This will generate the shared library `libFoo.so.1` and associated; files (`libFoo_rdict.pcm`, `libFoo.rootmap`, `libFoo.so`) in the; sub-directory `libs`, and execute the script `Test.C`. This all works; fine:. 	$ LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	rm libs/Foo_dict.o libs/Foo.o. Next, clean up . 	$ make clean ; 	; so that we start afresh. Then, execute . 	$ make test LIBDIR=.libs ; 	; which will build the above mentioned library and associated files in; the sub-directory `.libs`. This fails somewhat with . 	$ LD_LIBRARY_PATH=.libs:<ROOTSYS>/lib -l -b -q Test.C. 	Processing Test.C...; 	Error in <TCling::RegisterModule>: Cannot open shared library <ROOTSYS>/root.exe for dictionary libFoo:; 	 <ROOTSYS>/root.exe: cannot dynamically load position-independent executable; 	Error in <TCling::LoadPCM>: ROOT PCM <ROOTSYS>/bin/libFoo_rdict.pcm file does not exist; 	this is a Foo; 	hello from a Foo; 	; 	; It does not matter if `LIBDIR` . - is an absolute path (e.g., ` ``pwd``/.libs`); - the end directory i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:900,test,test,900,https://root.cern,https://github.com/root-project/root/issues/10704,1,['test'],['test']
Testability,"# Describe the bug; https://lcgapp-services.cern.ch/root-jenkins/job/root-release-master/ shows all mac build are broken with similar errrors:; ```; 07:02:10 CPack: - Building component package: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/V/master/build/_CPack_Packages/Darwin/productbuild/root_v6.23.01.macosx64-10.14-clang100RELEASE/Contents/Packages/root_v6.23.01.macosx64-10.14-clang100RELEASE-tests.pkg; 07:02:11 CPack Error: Bad file extension specified: .md. Currently only .rtfd, .rtf, .html, and .txt files allowed.; 07:02:11 CPack Error: Problem copying the License, ReadMe and Welcome files; 07:02:11 CPack Error: Problem compressing the directory; 07:02:11 CPack Error: Error when generating package: ROOT; ```; ```; 03:20:55 CPack: - Building component package: /Users/sftnight/build/ws/BUILDTYPE/Debug/LABEL/mac1015/V/master/build/_CPack_Packages/Darwin/productbuild/root_v6.23.01.macosx64-10.15-clang120.debug/Contents/Packages/root_v6.23.01.macosx64-10.15-clang120.debug-tests.pkg; 03:20:56 CPack Error: Cannot find ReadMe resource file: /README.html; 03:20:56 CPack Error: Problem copying the License, ReadMe and Welcome files; 03:20:56 CPack Error: Problem compressing the directory; 03:20:56 CPack Error: Error when generating package: ROOT; 03:20:56 make: *** [package] Error 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6817:404,test,tests,404,https://root.cern,https://github.com/root-project/root/issues/6817,2,['test'],['tests']
Testability,"# Goal. This PR implements `Im2Col` in CUDA in (what I consider) an optimal way in terms of performance. I achieve that by assigning one thread per output element. This means that threads do not share their write address and therefore no synchronization is required. They do share read address which is of course thread safe. I complement the new functionality with a complete testing suite to assert correctness. # Extra tasks. The tests within the `CNN` module suffer from extensive code duplication as the `Reference` and `CPU` versions do exactly the same thing (the CUDA one's would just worsen the issue). Instead I refactored the `Im2Col` one's using templated arguments: As a result the tests are now defined only once and called independently from each architecture using templates. This approach is also followed in the `DNN` module. If time allows, I plan to refactor all tests within the `CNN` module in a similar manner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2118:377,test,testing,377,https://root.cern,https://github.com/root-project/root/pull/2118,5,"['assert', 'test']","['assert', 'testing', 'tests']"
Testability,"# Problem Outline:; Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:; ```; TMVA::DataLoader *loader = new TMVA::DataLoader(...); loader->AddVariablesArray(""vars"", nBins);; ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:; ```; TMVA::Reader* reader = new TMVA::Reader(...);; std::vector<float> fValues(nBins);; reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);; ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:; Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:; Please refer to the commit details. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780:1208,test,tested,1208,https://root.cern,https://github.com/root-project/root/pull/10780,1,['test'],['tested']
Testability,"# The problem. Sometimes the distributed RDataFrame test of the `RunGraphs` functionality fails, for example [in this CI run](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156523/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). The visible error from the user side comes from Dask, which serializes a Python RuntimeError and produces some output log on stdout as follows:. ```; 2022-10-07 17:00:25,901 - distributed.worker - WARNING - Compute Failed; Key: dask_mapper-d6baeae1-74a8-4a41-84e9-6ee2e8db064f; Function: execute_task; args: ((<function DaskBackend.ProcessAndMerge.<locals>.dask_mapper at 0x7f0cdae1a320>, (<function apply at 0x7f0cfa133910>, <class 'DistRDF.Ranges.TreeRangePerc'>, (), (<class 'dict'>, [['id', 1], ['treenames', ['myTree']], ['filenames', ['2clusters.root']], ['first_file_idx', 0], ['last_file_idx', 1], ['first_tree_start_perc', 0.5], ['last_tree_end_perc', 1], ['friendinfo', None]])))); kwargs: {}; Exception: ""RuntimeError('C++ exception thrown:\\n\\truntime_error: \\nAn error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash\\nAll RDF objects that have not run their event loop yet should be considered in an invalid state.\\n')""; ```. The Python `RuntimeError` in turn is just a wrapper of the C++ `std::runtime_error` which comes from [this function](https://github.com/root-project/root/blob/bc6c4d327bf0b6c78aff0e9622f959441c480d8e/tree/dataframe/src/RDFUtils.cxx#L335-L342) in the RDF machinery. That error suggests a failure in `TInterpreter::Calc`, which should be visible with some kind of output to stderr showing the compilation error. Unfortunately, stderr is completely empty, no error is shown by `TInterpreter`. By adding a bunch of print statements here and there, we can get to see some more details of this issue (the patch will be attached). ```; Failure in cling::IncrementalExecutor::jitInitOrWrapper: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:52,test,test,52,https://root.cern,https://github.com/root-project/root/issues/11515,3,"['log', 'test']","['log', 'test', 'testReport']"
Testability,"# This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees.; @stwunsch will make another PR to integrate properly into the root system.; ## Getting started; Required additional librairies; - ROOT; - for running tests you need Google Tests; - for running benchs, you need Google Benchs and XGBoost. ### Run tests ; Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`; At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure; Here below we show the structure of the repository with the files of interest.; .; ├── bench.py; ├── bench.sh; ├── build/; ├── data/; ├── experiments/; │ ├── arrayBdtPreds.cxx; │ ├── data/; │ ├── generate_data.py; │ ├── makefile; │ ├── readme.md; │ ├── run_all.sh; │ └── setup.h; ├── figures/; ├── generated_files/; ├── include/; │ ├── BranchedTree.hxx; │ ├── BranchlessTree.hxx; │ ├── CodeGeneratorsJIT.hxx; │ ├── ForestHelpers.hxx; │ ├── json.hpp; │ ├── RForestInference.hxx; │ └── TreeHelpers.hxx; ├── makefile_bench.make; ├── README.md; ├── run.sh; ├── src/; │ └── benchmark.cxx; ├── tests/; │ ├── build/; │ ├── data/; │ │ ├── events.csv; │ │ ├── model.json; │ │ ├── model.rabbit; │ │ ├── multiclass_events.csv; │ │ ├── multiclass_model.json; │ │ ├── multiclass_model.rabbit; │ │ ├── multiclass_python_groundtruths.csv; │ │ ├── multiclass_python_predictions.csv; │ │ ├── multiclass_python_scores.csv; │ │ ├── python_predictions.csv; │ │ ├── regression_events.csv; │ │ ├── regression_model.json; │ │ ├── regression_model.rabbit; │ │ ├── regression_python_groundtruths.csv; │ │ ├── regression_python_predictions.csv; │ │ ├── regression_python_scores.csv; │ ├── forestBDTest.hxx; │ ├── helpersBDTest.hxx; │ ├── makefile; │ ├── readme.md; │ ├── RegressionBDTest.hxx; │ ├── run_all.sh; │ ├── testAll.cxx; ├── train_classifiers_examples.py; └── utils.py. ### Setup script for ubuntu 18.04; It sets up a new machine, installing everythi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4351:272,test,tests,272,https://root.cern,https://github.com/root-project/root/pull/4351,5,"['Test', 'test']","['Tests', 'testAll', 'tests']"
Testability,"# This Pull Request:; Updates the implementation of Binary and Unary Operators to parse input tensors with parametric shapes, such as `{batch_size1, dim1}`. The method to initialize the output tensor shape can be further improved in the future. ## Changes or Fixes:; - Updated implementation in the respective ROperator files to handle parametric shapes.; - Added tests as well as models for the same. ## Checklist:; - [x] Tested changes locally; - [ ] Updated the documentation (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16012:364,test,tests,364,https://root.cern,https://github.com/root-project/root/pull/16012,2,"['Test', 'test']","['Tested', 'tests']"
Testability,"# This Pull request adds (see commits logs for more details). - TopK, Tile and Split operators; - If operator and support for subgraphs by parsing them from ONNX and dealing with subgraphs in RModel; - Add MatMul support for dim=1 tensors ; - Support output of operators as constant tensors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16313:38,log,logs,38,https://root.cern,https://github.com/root-project/root/pull/16313,1,['log'],['logs']
Testability,# This Pull request corrects two minor typos in the documentation inside TH2.cxx. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16617:103,test,tested,103,https://root.cern,https://github.com/root-project/root/pull/16617,1,['test'],['tested']
Testability,"# This Pull request. The first implementation of RooFitH3 had a number of shortcomings, which this PR addresses. In detail:. - It is now possible to read JSON files independent of the ordering; - A priority mechanism has been implemented for importers and exporters; - Duplicate and dead code has been removed; - Many small bugs have been fixed; - The JSONInterface has been made public and moved from Detail to Experimental, so users can write their own importers & exporters; - The two unit tests have been fixed. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9482:493,test,tests,493,https://root.cern,https://github.com/root-project/root/pull/9482,2,['test'],"['tested', 'tests']"
Testability,# This Pull request: . ## Fixes a typo in the documentation of `tutorials/hist/histpalettecolor.C`. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13680:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/13680,1,['test'],['tested']
Testability,# This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`.; - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs; - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace; - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13553:434,test,tested,434,https://root.cern,https://github.com/root-project/root/pull/13553,1,['test'],['tested']
Testability,# This Pull request: ; 1) Adds the Swish Activation function in Keras Parser; 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12894:147,test,tested,147,https://root.cern,https://github.com/root-project/root/pull/12894,1,['test'],['tested']
Testability,"# This Pull request: ; Adds a new starting point for cpt.py. ## Changes or fixes:; Added if __name__ == ""__main__"" block to cpt.py. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes 406 (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10728:153,test,tested,153,https://root.cern,https://github.com/root-project/root/pull/10728,1,['test'],['tested']
Testability,# This Pull request: ; Adds the typedefs Float16_t and Double32_t to the builtin types in TDataType. ## Changes or fixes:; The change is required to read tree branches of those types using TTreeReader and TTreeReaderValue<Float16_t> / TTreeReaderValue<Double32_t>. Otherwise attempting to read such branches results in an error message that no dictonary for Float16_t / Double32_t exists. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008:410,test,tested,410,https://root.cern,https://github.com/root-project/root/pull/9008,1,['test'],['tested']
Testability,# This Pull request: ; Adds the typedefs Float16_t and Double32_t to the builtin types in TDataType.; It is directly related to #9008 which adds the same changes to the patch-branch. ## Changes or fixes:; The change is required to read tree branches of those types using TTreeReader and TTreeReaderValue<Float16_t> / TTreeReaderValue<Double32_t>. Otherwise attempting to read such branches results in an error message that no dictonary for Float16_t / Double32_t exists. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9009:492,test,tested,492,https://root.cern,https://github.com/root-project/root/pull/9009,1,['test'],['tested']
Testability,"# This Pull request: ; Fixes the undefined llvm_flags error that occurs when --last-stable is called. ## Changes or fixes: ; Added a call to the download_llvm_binary function, which sets the llvm_flags variable. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue 423 (https://github.com/root-project/cling/issues/423)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10745:233,test,tested,233,https://root.cern,https://github.com/root-project/root/pull/10745,1,['test'],['tested']
Testability,# This Pull request: ; tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: ; New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14619:340,test,tested,340,https://root.cern,https://github.com/root-project/root/pull/14619,1,['test'],['tested']
Testability,# This Pull request: Added new dependent arguments to the argument parser. ## Changes or fixes: Cannot call llvm tar and binary at the same time and cannot call llvm tar and llvm url at the same time. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue mentioned in #406 (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10937:222,test,tested,222,https://root.cern,https://github.com/root-project/root/pull/10937,2,['test'],['tested']
Testability,# This Pull request: Adds ConcatFromSequence ONNX Operator. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11317:81,test,tested,81,https://root.cern,https://github.com/root-project/root/pull/11317,1,['test'],['tested']
Testability,"# This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12918:194,test,tested,194,https://root.cern,https://github.com/root-project/root/pull/12918,1,['test'],['tested']
Testability,"# This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests; - Add; - Sub; - Mul; - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor; ; In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10822:90,test,tests,90,https://root.cern,https://github.com/root-project/root/pull/10822,3,['test'],"['tested', 'tests']"
Testability,"# This Pull request: Adds another build option for building Cling with specific platform tags. . ## Changes or fixes: Added build options for the platform tags to the argument parser, then added additional if statements for checking whether the user wants to package it or not. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11020:299,test,tested,299,https://root.cern,https://github.com/root-project/root/pull/11020,1,['test'],['tested']
Testability,# This Pull request: Adds the Cast ONNX Operator with the corresponding Unit tests to validate the written code. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11033:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/11033,2,['test'],"['tested', 'tests']"
Testability,# This Pull request: Adds the Expand ONNX Operator in SOFIE. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11608:82,test,tested,82,https://root.cern,https://github.com/root-project/root/pull/11608,1,['test'],['tested']
Testability,# This Pull request: Adds the Neg ONNX Operator with the corresponding unit tests to validate the code. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10946:76,test,tests,76,https://root.cern,https://github.com/root-project/root/pull/10946,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request: Adds the Python Tutorials to several C files in Tutorials/TMVA.; One of the tasks of Pythonization project for Gsoc was to add Python tutorials for C files in Tutorials/TMVA.; I have added python tutorials for TMVA_Higgs_Classification.C , TMVA_CNN_Classification.C and TMVA_RNN_Classification.C.; The notebooks for the same can be found [here](https://github.com/Neel-Shah-29/root-1/tree/Neel-Shah-Notebook-final/tutorials/tmva/Notebooks).; We can also make an improvement regarding adding a PyTorch model for RNN and train it, its implementation can be found [here](https://github.com/lmoneta/root/pull/17). We can add this improvement once reviewed. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10442:695,test,tested,695,https://root.cern,https://github.com/root-project/root/pull/10442,1,['test'],['tested']
Testability,"# This Pull request: Adds the ReduceMean, ReduceProd and ReduceSumsquare operators in SOFIE. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11258:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/11258,1,['test'],['tested']
Testability,# This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11086:78,test,tests,78,https://root.cern,https://github.com/root-project/root/pull/11086,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request: Adds the Tanh Activation function to SOFIE with the corresponding unit tests; 1. Adds the Tanh ONNX operator, an activation function to SOFIE.; 2. Adds the unit tests to validate the code. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10913:92,test,tests,92,https://root.cern,https://github.com/root-project/root/pull/10913,3,['test'],"['tested', 'tests']"
Testability,"# This Pull request: Allows for the user to specify the number of cores used during make. ## Changes or fixes: Added a number-of-cores option to the parser and added a condition to check if option was used, and if it is,; the Build object cores instance variable will be set to the user passed number. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10997:323,test,tested,323,https://root.cern,https://github.com/root-project/root/pull/10997,1,['test'],['tested']
Testability,"# This Pull request: Allows for users to have the option of just building the CPT not packaging it. ## Changes or fixes: Added a current-dev-build and last-stable-build option in the argument parser, and added additional if statements if it is the normal current-dev or last-stable option, so that there is also packaging like normal. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11019:356,test,tested,356,https://root.cern,https://github.com/root-project/root/pull/11019,1,['test'],['tested']
Testability,"# This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9204:124,test,tested,124,https://root.cern,https://github.com/root-project/root/pull/9204,1,['test'],['tested']
Testability,"# This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9117",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205:142,test,tested,142,https://root.cern,https://github.com/root-project/root/pull/9205,1,['test'],['tested']
Testability,# This Pull request: Fix Swap overload of RVec-s. ## Changes or fixes:. Iterators are used to swap elements of RVecs. Previously swap was trying to access element by indexing.; That was not a valid operation. Test cases were added to verify the swap. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes swap overload of RVec.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9303:209,Test,Test,209,https://root.cern,https://github.com/root-project/root/pull/9303,2,"['Test', 'test']","['Test', 'tested']"
Testability,# This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases.; Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. ; Error is described here.; ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png); I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10768:337,test,test,337,https://root.cern,https://github.com/root-project/root/pull/10768,2,['test'],"['test', 'tested']"
Testability,# This Pull request: Fixes the bug to build ROOT in Ubuntu 20.04; ![image](https://user-images.githubusercontent.com/84740927/159856024-8b399e36-d835-4726-b6dc-9d1a5b90dbc3.png). The above bug was noticed by me when i was building root in my local computer. This can be resolved by just removing example_outputs argument from PyRunString function over [here](https://github.com/root-project/root/blob/master/tmva/pymva/src/RModelParser_PyTorch.cxx#L422). ## Changes or fixes:; Bug-issue related to build. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10223:526,test,tested,526,https://root.cern,https://github.com/root-project/root/pull/10223,1,['test'],['tested']
Testability,"# This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11137:248,test,tested,248,https://root.cern,https://github.com/root-project/root/pull/11137,1,['test'],['tested']
Testability,# This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12942:79,test,tests,79,https://root.cern,https://github.com/root-project/root/pull/12942,2,['test'],"['tested', 'tests']"
Testability,# This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12941:78,test,tested,78,https://root.cern,https://github.com/root-project/root/pull/12941,1,['test'],['tested']
Testability,# This Pull request: Implements the reading and writing of text as well as root files. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13066:108,test,tested,108,https://root.cern,https://github.com/root-project/root/pull/13066,1,['test'],['tested']
Testability,# This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:; Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #14580,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14687:366,test,tested,366,https://root.cern,https://github.com/root-project/root/pull/14687,1,['test'],['tested']
Testability,"# This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11098:200,test,tested,200,https://root.cern,https://github.com/root-project/root/pull/11098,1,['test'],['tested']
Testability,# This Pull request: Is intended to fix the LLVM prebuilt binary build. ## Changes or fixes: Replaced subprocess calls that use wget with the wget function and fixed naming errors and fixed undefined error regarding llvm_dir. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10994:247,test,tested,247,https://root.cern,https://github.com/root-project/root/pull/10994,1,['test'],['tested']
Testability,"# This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10848:404,test,tested,404,https://root.cern,https://github.com/root-project/root/pull/10848,1,['test'],['tested']
Testability,# This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10862:184,test,tested,184,https://root.cern,https://github.com/root-project/root/pull/10862,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Added indentation and spacing as well as getting rid of unused variables. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10992:175,test,tested,175,https://root.cern,https://github.com/root-project/root/pull/10992,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Added indentation for under indented lines. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10979:145,test,tested,145,https://root.cern,https://github.com/root-project/root/pull/10979,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Added whitespace around operators. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10977:136,test,tested,136,https://root.cern,https://github.com/root-project/root/pull/10977,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11140:155,test,tested,155,https://root.cern,https://github.com/root-project/root/pull/11140,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: I inserted more space between functions. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10976:142,test,tested,142,https://root.cern,https://github.com/root-project/root/pull/10976,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Split lines that were longer than 79 characters. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11012:150,test,tested,150,https://root.cern,https://github.com/root-project/root/pull/11012,1,['test'],['tested']
Testability,# This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Split lines that were longer than 79 characters. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11010:150,test,tested,150,https://root.cern,https://github.com/root-project/root/pull/11010,2,['test'],['tested']
Testability,# This Pull request: Pow ONNX Operator implemented with the corresponding unit tests to validate the written code. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10971:79,test,tests,79,https://root.cern,https://github.com/root-project/root/pull/10971,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally; - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10883:279,test,tested,279,https://root.cern,https://github.com/root-project/root/pull/10883,1,['test'],['tested']
Testability,"# This Pull request: Reduces global variable mutation, making it easier to debug. ## Changes or fixes: Got rid of LLVM_GIT_URL, CLANG_GIT_URL, and CLING_GIT_URL and put them in their respective functions. I then got rid of the EXTRA_CMAKE_FLAGS variable and put it in the compile functions and replaced its global reference with the direct value. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11037:368,test,tested,368,https://root.cern,https://github.com/root-project/root/pull/11037,1,['test'],['tested']
Testability,# This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11058:215,test,tested,215,https://root.cern,https://github.com/root-project/root/pull/11058,1,['test'],['tested']
Testability,# This Pull request: Reduces the use of the subprocess function and makes the code cleaner. ## Changes or fixes: Created a new extract_tar function to replace tar subprocess calls and pythonic tar extractions. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11022:231,test,tested,231,https://root.cern,https://github.com/root-project/root/pull/11022,1,['test'],['tested']
Testability,"# This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:; * Removes skipping of 0 (zero) in TRandom3.Rndm(); * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #14581",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14702:204,test,tested,204,https://root.cern,https://github.com/root-project/root/pull/14702,1,['test'],['tested']
Testability,"# This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10863:375,test,tested,375,https://root.cern,https://github.com/root-project/root/pull/10863,1,['test'],['tested']
Testability,# This Pull request: Rewrote parser arguments for better nomenclature. ## Changes or fixes: Multiple arguments now have with prefix. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue in list #406 (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10936:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/10936,1,['test'],['tested']
Testability,# This Pull request: Set skip-cleanup flags to true for check-requirements and create-dev-env. ## Changes or fixes: Set the skip-cleanup value to true for the create-dev-env option and check-requirements option. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue in meta-issue list #406 (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10960:233,test,tested,233,https://root.cern,https://github.com/root-project/root/pull/10960,1,['test'],['tested']
Testability,# This Pull request: This makes the code more flake8 compliant. ## Changes or fixes: Added an extra backslash to the escape sequence characters. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue #406 mentioned in (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10978:166,test,tested,166,https://root.cern,https://github.com/root-project/root/pull/10978,1,['test'],['tested']
Testability,"# This Pull request: [Fix #6981] RDisplay::Print to list custom number of elements from collections. ## Changes or fixes:. AddCollectionToRow() modified so that the first 10 elements of long collections; are to be printed, then followed by ""..."". Previously, only the first and last; elements of collections of size >=3 were printed.; ; Print() logic is now simplified, since after ""..."" there is no guarantee; that there is going to be a next element.; ; Additional paramter to the constructor of the the RDisplay() was added,; that is the nMaxCollectionElements. It determines, number of elements to be; shown from long collction. Default is 10.; ; Corresponding tests were adapted and additional ones were added to check; the new functionality.; ; Regarding #6981 - to display the whole collection, please use AsString(). ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #6981",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9105:345,log,logic,345,https://root.cern,https://github.com/root-project/root/pull/9105,3,"['log', 'test']","['logic', 'tested', 'tests']"
Testability,"# This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most; column of dots (...). Moreover, the user will be notified with an; info message as well. Print() guarantees that at least 1 column of the table is displayed; (regardless the width of the first column). The default maximum allowed width of the table is increased to 100; (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #7205",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9124:455,test,tests,455,https://root.cern,https://github.com/root-project/root/pull/9124,2,['test'],"['tested', 'tests']"
Testability,# This Pull request: [RNTuple] Addition of the evil storage layer. ## Changes or fixes:; - Add modifications to `RRawFile` to enable failures (bit flips and short reads) to be injected into the `ReadAt` and `ReadV` methods.; - Add I/O error unit test file `ntuple_ioerrors`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13434:246,test,test,246,https://root.cern,https://github.com/root-project/root/pull/13434,2,['test'],"['test', 'tested']"
Testability,# This Pull request: df002 tutorial. ## Changes or fixes:. Typos and grammar mistakes are now fixed. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11006:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/11006,1,['test'],['tested']
Testability,# This Pull request: df004 tutorial. ## Changes or fixes:. Correction of minor grammar mistakes in the documentation. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11007:139,test,tested,139,https://root.cern,https://github.com/root-project/root/pull/11007,1,['test'],['tested']
Testability,# This Pull request: df009 tutorial. ## Changes or fixes:. Fixing grammar mistakes in the documentation. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11024:126,test,tested,126,https://root.cern,https://github.com/root-project/root/pull/11024,1,['test'],['tested']
Testability,# This Pull request: df012. ## Changes or fixes:. Fixes grammar mistakes in the documentation. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11025:116,test,tested,116,https://root.cern,https://github.com/root-project/root/pull/11025,1,['test'],['tested']
Testability,# This Pull request: fixes some typing errors and indentation issues in ROperator_Pool.hxx. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10337:113,test,tested,113,https://root.cern,https://github.com/root-project/root/pull/10337,1,['test'],['tested']
Testability,# This Pull request: fixes some typing errors and indentation issues in ROperator_Pool.hxx. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10342:113,test,tested,113,https://root.cern,https://github.com/root-project/root/pull/10342,1,['test'],['tested']
Testability,# This Pull request: implements the Where ONNX Operator. . ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13093:80,test,tested,80,https://root.cern,https://github.com/root-project/root/pull/13093,1,['test'],['tested']
Testability,# This Pull request: is a backport of https://github.com/root-project/root/pull/11844/. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13827:131,test,tested,131,https://root.cern,https://github.com/root-project/root/pull/13827,1,['test'],['tested']
Testability,# This Pull request:. ## Adds a new feature:; Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13521:172,test,tested,172,https://root.cern,https://github.com/root-project/root/pull/13521,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes: ; fixes a typo in the documentation of `TGraph::SetHighlight` in `TGraph.cxx`. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14424:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/14424,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes: Created a vector of Kahan sums . ## Checklist:. - [ ] tested changes locally ; I tried to test it locally, but I was unable to handle and resolve the ""#include errors"" and ""cannot found the source files"".; so I am doubtful if there will be an issue on line no. 965 (though it works as a vector). ps:- this is my first opensource commit, pls do suggest something if the above code does not work correctly, I will try to complete this issue as much try it takes. thanking you . This PR fixes #7395",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9663:97,test,tested,97,https://root.cern,https://github.com/root-project/root/pull/9663,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes: Migration from RooAbsCollection and RooLinkedList legacy iterators to range-based loops; PR includes migration of all the flies from Roofit/histfactory/src; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #8777,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10022:221,test,tested,221,https://root.cern,https://github.com/root-project/root/pull/10022,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14863,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14864:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14864,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11097:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/11097,93,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # https://github.com/root-project/root/issues/13410,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13824:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/13824,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # https://github.com/root-project/root/issues/15384,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15386:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/15386,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14209,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14246:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14246,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #7395 Reduce precision errors for Mean and StdDev . I have tried to create a vector of Kahan sums using the already existing Kahan summation class:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9546:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/9546,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9672,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14707:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14707,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/15407,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15458:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/15458,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8367,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15368:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/15368,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15987:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/15987,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14935:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14935,3,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11142:66,test,tested,66,https://root.cern,https://github.com/root-project/root/pull/11142,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ x] updated the docs (if necessary). This PR fixes # ; #7871,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14718:66,test,tested,66,https://root.cern,https://github.com/root-project/root/pull/14718,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8620:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/8620,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR implements the EyeLike operator with corresponding unit tests which also includes the contribution of @lmoneta for fixing the generated code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14297:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14297,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13696:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/13696,4,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14205,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14212:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/14212,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8467:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/8467,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12633:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/12633,2,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old; - Check if connection to s3 was possible. #### New; - Never upload on pull request; - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). <details><summary></summary>; <p>; [skip-ci]; </p>; </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12582:396,test,tested,396,https://root.cern,https://github.com/root-project/root/pull/12582,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. - Link to the blas library found by cmake, not hardcoded ""blas"".; - Set ROOTIGNOREPREFIX=1 when running built binaries during build.; - Make sure PCH is created before running emitters. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10117:251,test,tested,251,https://root.cern,https://github.com/root-project/root/pull/10117,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64; - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11632:539,test,tested,539,https://root.cern,https://github.com/root-project/root/pull/11632,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. @pcanal mentioned that ::SaveAs overloads should have the same number of default arguments as TObject::SaveAs, see https://github.com/root-project/root/pull/14713/files#r1508200980. This fixes it, together with https://github.com/root-project/root/pull/14864. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14869:325,test,tested,325,https://root.cern,https://github.com/root-project/root/pull/14869,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. A bug of dupe quotes that was introduced by this commit: https://github.com/root-project/root/commit/73039d1ab4e3487c71c45270f5c8129c6871170d. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16464:208,test,tested,208,https://root.cern,https://github.com/root-project/root/pull/16464,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Absence of safety in public methods resulting in nullptr access if ftraininfo was undefined by constructor. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14569,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14859:173,test,tested,173,https://root.cern,https://github.com/root-project/root/pull/14859,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14685:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/14685,3,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14683:577,test,test,577,https://root.cern,https://github.com/root-project/root/pull/14683,1,['test'],['test']
Testability,# This Pull request:. ## Changes or fixes:. Add back the immediate return whne n = 0 in WriteFastArray. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15738,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15780:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/15780,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`.; Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally; - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13299:231,test,tested,231,https://root.cern,https://github.com/root-project/root/pull/13299,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271:238,test,tested,238,https://root.cern,https://github.com/root-project/root/pull/14271,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds a tutorial demoing how the hist->GetMaximumBin() can be used. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8718:134,test,tested,134,https://root.cern,https://github.com/root-project/root/pull/8718,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds a tutorial demonstrating how a Histogram can be read from a ROOT File. I also added one that demos how a rootfile with a histogram can be made. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). As mentioned in [this](https://root-forum.cern.ch/t/read-a-histogram-from-a-root-file/8930) forum post.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8699:214,test,tested,214,https://root.cern,https://github.com/root-project/root/pull/8699,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds a tutorial demonstrating how the changing of the range can zoom into the histogram. As discussed in [this](https://root-forum.cern.ch/t/histogram-x-axis-range/12815) forum post. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8625:248,test,tested,248,https://root.cern,https://github.com/root-project/root/pull/8625,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds an option to call SaveFrame from batch script, without having to interact, giving the filename as argument. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8673:178,test,tested,178,https://root.cern,https://github.com/root-project/root/pull/8673,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary); - [ ] make it optional; - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11077:474,test,tested,474,https://root.cern,https://github.com/root-project/root/pull/11077,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582; Fixes https://its.cern.ch/jira/browse/ROOT-8594,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14754:134,test,tested,134,https://root.cern,https://github.com/root-project/root/pull/14754,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds missing documentation. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15207:93,test,tested,93,https://root.cern,https://github.com/root-project/root/pull/15207,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12001:414,test,tested,414,https://root.cern,https://github.com/root-project/root/pull/12001,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds recursivity to rootls. I am not sure what's the best way to do the same for rootprint, so marking this as draft. Fixes https://github.com/root-project/root/issues/13659. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14419:240,test,tested,240,https://root.cern,https://github.com/root-project/root/pull/14419,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11650:118,test,teststatistics,118,https://root.cern,https://github.com/root-project/root/pull/11650,2,['test'],"['tested', 'teststatistics']"
Testability,# This Pull request:. ## Changes or fixes:. Adds the Kronecker Delta function used widely in Physics. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8719:123,test,tested,123,https://root.cern,https://github.com/root-project/root/pull/8719,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Adds the Lambert W function to MathMore using GSL. One question: I'm not sure what some of the docstrings in the source file mean.; I copied these from other functions:; ```cxx; // [5.2.1.18] Laguerre polynomials; // (26.x.11); ```. Does the first one specify the version the function is introduced? What does the second number specify?. I tested it and it works, the only thing missing are the docstrings. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #8471. /cc @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496:384,test,tested,384,https://root.cern,https://github.com/root-project/root/pull/8496,2,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. After the recent update of the TMVA classification tests, some comments were not updated to reflect the changes, which is confusing. This PR makes the comments the same in all tests to reduce the conusion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12375:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/12375,2,['test'],['tests']
Testability,# This Pull request:. ## Changes or fixes:. All the current usage of fTasks assumes that it owns its contents. Instead of dealing with this everywhere manually use the `SetOwner(kTRUE)` member function to declare this more explicitly. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13840:256,test,tested,256,https://root.cern,https://github.com/root-project/root/pull/13840,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Allows forwarding emit arg to TGNumberEntryField; It's a follow-up from https://github.com/root-project/root/pull/8656 which implemented emit for SetNumber-emit in TGNumberEntryField. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8811:249,test,tested,249,https://root.cern,https://github.com/root-project/root/pull/8811,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Always call WaitForInFlightClusters before checking cluster IDs in the NTuple cluster test.; Otherwise the test sometimes fails. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10304:130,test,test,130,https://root.cern,https://github.com/root-project/root/pull/10304,3,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. At FreeBSD 13.1, the following compilation error appears:; ```; core/base/src/TUUID.cxx:444:33: error: member access into incomplete type 'struct sockaddr'; if (ifa->ifa_addr->sa_family != AF_INET) { // check only IP4; ^; /usr/include/ifaddrs.h:37:9: note: forward declaration of 'sockaddr'; struct sockaddr *ifa_addr;; ^; 1 error generated.; ```; The `struct sockaddr` is defined in the header file sys/socket.h ([specification](https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/basedefs/sys_socket.h.html#tag_13_61)), which is missing. The header is added in this request. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10703:651,test,tested,651,https://root.cern,https://github.com/root-project/root/pull/10703,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Avoids the crash reported in https://its.cern.ch/jira/browse/ROOT-10795. It does not solve the underlying cause, which is that TFormLeafInfo line 219 is called, that returns type = 64. Then:; switch (type) reaches the default and returns a null:. ![image](https://github.com/root-project/root/assets/10653970/60f61a1b-613f-4b38-98c0-6336ed27a2dc). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15335:413,test,tested,413,https://root.cern,https://github.com/root-project/root/pull/15335,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14166:148,test,tested,148,https://root.cern,https://github.com/root-project/root/pull/14166,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747:215,test,tested,215,https://root.cern,https://github.com/root-project/root/pull/14747,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Byte swap values read from the protobuf raw data stream on big endian. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10146,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10308:136,test,tested,136,https://root.cern,https://github.com/root-project/root/pull/10308,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately?. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14717:511,test,tests,511,https://root.cern,https://github.com/root-project/root/pull/14717,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:. Changes the builtins install location to ${CMAKE_INSTALL_PREFIX}/include/ROOT_builtins}. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #8655,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8732:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/8732,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Changes the letter case in the minuit2 status report when the minimum is invalid such that the report is consistent with the case when the minimum is valid. Currently, I get the following output when grep my logs:; ```; Minuit2Minimizer : Invalid Minimum - status = 3; Minuit2Minimizer : Valid minimum - status = 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15103:252,log,logs,252,https://root.cern,https://github.com/root-project/root/pull/15103,1,['log'],['logs']
Testability,# This Pull request:. ## Changes or fixes:. Clarifies ambiguous doxygen documentation of TCanvas constructor parameters concerning window vs canvas size. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11003:175,test,tested,175,https://root.cern,https://github.com/root-project/root/pull/11003,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Clarifies covariance matrix format. Adds safety-bounds-checking. See https://root-forum.cern.ch/t/tprincipal-fails-for-a-very-large-number-of-entries/58795. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15110:222,test,tested,222,https://root.cern,https://github.com/root-project/root/pull/15110,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Clarifies meaning of TFoam::GetIntNorm parameters, as requested by @mchrzasz. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14528",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14529:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/14529,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Currently, building the documentation issues 3700 warnings, see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/parsed_console/. With the current hack, we would go down to just 2700. By the way, it would be nice to fine-tune the parser: see https://github.com/root-project/jenkins-pipelines/issues/10. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). See related discussion https://github.com/doxygen/doxygen/issues/9044",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614:408,test,tested,408,https://root.cern,https://github.com/root-project/root/pull/11614,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Dash (or ksh) shell might be used in Ubuntu18 (sh links by default to dash), but using `. bin/thisroot.sh` inside these shells was not compatible with it. Now it works in dash, bash, zsh and ksh simultaneously. Before:; ```; dash /opt/root_bld/bin/thisroot.sh; /opt/root_bld/bin/thisroot.sh: 166: /opt/root_bld/bin/thisroot.sh: Bad substitution; ```. After:; `dash /opt/root_bld/bin/thisroot.sh`; --> No error. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10298",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10332:476,test,tested,476,https://root.cern,https://github.com/root-project/root/pull/10332,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Dear All. This pull request adds gradient and Laplacian methods for arrays. These can be used to calculate one-dimensional first and second order derivatives. Should there also be methods for calculating higher order derivatives and dimensions?. I am open to any feedback regarding the code. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #14304,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15100:357,test,tested,357,https://root.cern,https://github.com/root-project/root/pull/15100,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14608:190,test,tested,190,https://root.cern,https://github.com/root-project/root/pull/14608,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Ensure that LLVM is always linked statically. While doing so this fixes #12156 and #12152. Tested with both LLVM 13 and LLVM 16. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12156 #12152,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13420:135,Test,Tested,135,https://root.cern,https://github.com/root-project/root/pull/13420,2,"['Test', 'test']","['Tested', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. Failure to install ROOT because root-help.el was removed in f4f8133607572b862998fcecf5efb9dba5402eb6. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13711:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/13711,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fedora 40 has replaced zlib with a zlib compatible version of zlib-ng; https://fedoraproject.org/wiki/Changes/ZlibNGTransition. This changes the size of PDF files. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14295:229,test,tested,229,https://root.cern,https://github.com/root-project/root/pull/14295,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fix an import error in JsMVA:. ```; $ ipython; Python 3.12.3 (main, Apr 17 2024, 00:00:00) [GCC 14.0.1 20240411 (Red Hat 14.0.1-0)]; Type 'copyright', 'credits' or 'license' for more information; IPython 8.23.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: from ROOT.JsMVA import JsMVAMagic. In [2]: %jsmva on; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); Cell In[2], line 1; ----> 1 get_ipython().run_line_magic('jsmva', 'on'). File /usr/lib/python3.12/site-packages/IPython/core/interactiveshell.py:2480, in InteractiveShell.run_line_magic(self, magic_name, line, _stack_depth); 2478 kwargs['local_ns'] = self.get_local_scope(stack_depth); 2479 with self.builtin_trap:; -> 2480 result = fn(*args, **kwargs); 2482 # The code below prevents the output from being displayed; 2483 # when using magics with decorator @output_can_be_silenced; 2484 # when the last Python token in the expression is a ';'.; 2485 if getattr(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, False):. File /usr/lib64/python3.12/site-packages/ROOT/JsMVA/JsMVAMagic.py:26, in JsMVAMagic.jsmva(self, line); 22 @line_magic; 23 @magic_arguments(); 24 @argument(""arg"", nargs=""?"", default=""on"", help=""Enable/Disable JavaScript visualisation for TMVA""); 25 def jsmva(self, line):; ---> 26 from JsMVA.JPyInterface import functions; 28 args = parse_argstring(self.jsmva, line); 29 if args.arg == ""on"":. ModuleNotFoundError: No module named 'JsMVA'. ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15752:1578,test,tested,1578,https://root.cern,https://github.com/root-project/root/pull/15752,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fix cmake/modules/FindZeroMQ.cmake; It now finds ZeroMQ in Fedora 40. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13995:135,test,tested,135,https://root.cern,https://github.com/root-project/root/pull/13995,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fix some issues with test dound in 6.30.00. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14112:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/14112,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```; zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]; int ZEXPORT deflateResetKeep (strm); ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14172:528,test,tested,528,https://root.cern,https://github.com/root-project/root/pull/14172,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes Nullptr access after raising Error. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15094:107,test,tested,107,https://root.cern,https://github.com/root-project/root/pull/15094,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes compiler warnings from format strings (size_t not using %z). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15732:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/15732,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes crash seen in https://its.cern.ch/jira/browse/ROOT-9918. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15369:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/15369,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes error: use of deleted function; ~~~; /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp: In member function 'std::string llvm::NVPTXAsmPrinter::getPTXFundamentalTypeStr(llvm::Type*, bool) const':; /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:1319:10: error: use of deleted function 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::nullptr_t = std::nullptr_t]'; 1319 | return nullptr;; | ^~~~~~~; In file included from /usr/include/c++/12/string:53,; from /usr/include/c++/12/bits/locale_classes.h:40,; from /usr/include/c++/12/bits/ios_base.h:41,; from /usr/include/c++/12/streambuf:41,; from /usr/include/c++/12/bits/streambuf_iterator.h:35,; from /usr/include/c++/12/iterator:66,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/iterator_range.h:21,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:16,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/STLExtras.h:20,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/StringRef.h:12,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/Pass.h:31,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTX.h:17,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.h:17,; from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:14:; /usr/include/c++/12/bits/basic_string.h:732:7: note: declared here; 732 | basic_string(nullptr_t) = delete;; | ^~~~~~~~~~~~; ~~~; Fix backported from LLVM upstrea https://reviews.llvm.org/D87697. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9586:1933,test,tested,1933,https://root.cern,https://github.com/root-project/root/pull/9586,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/10010. All the credit for this fix goes to @pcanal and anaumann. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15363:180,test,tested,180,https://root.cern,https://github.com/root-project/root/pull/15363,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11021. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15095:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15095,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11238. Reverts https://github.com/root-project/root/pull/2585; Reverts https://github.com/root-project/root/commit/9d459ce6141daf108587d85737bdc50e70c775d3; Re-Fixes https://its.cern.ch/jira/browse/ROOT-9597. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15229:324,test,tested,324,https://root.cern,https://github.com/root-project/root/pull/15229,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11565. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15902:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15902,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977; by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11978:159,test,tested,159,https://root.cern,https://github.com/root-project/root/pull/11978,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/12091. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15078:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15078,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/12251. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16801:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/16801,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/13359. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15071:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15071,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/13387. Reported by @xkzl; DaemonUtils files have been restored from latest version before removal by @amadio in https://github.com/root-project/root/pull/2704 although it is unclear to me how these files ended up reaching SrvAuth, as they were removed from the glob there before that change (and in another target).; Edit: Probably the problem dates back to the change from Make to CMake, see https://github.com/root-project/root/blob/79d2161aa4df0f169b2821db05e8254cdfda746c/net/auth/Module.mk vs https://github.com/root-project/root/blob/79d2161aa4df0f169b2821db05e8254cdfda746c/net/auth/CMakeLists.txt. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16015:721,test,tested,721,https://root.cern,https://github.com/root-project/root/pull/16015,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/13441. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15067:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15067,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/13531. @romainbqt could you verify if this patch solves your problem?. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15059:186,test,tested,186,https://root.cern,https://github.com/root-project/root/pull/15059,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/13962. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15066:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15066,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14173. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15200:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15200,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14758:188,test,tested,188,https://root.cern,https://github.com/root-project/root/pull/14758,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14561. pinging @eoffermann. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15707:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/15707,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14765. @jjerhot this class is marked as legacy, but if you want, feel free to propose how the normalization factor should look like and I can try to implement it. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15112:278,test,tested,278,https://root.cern,https://github.com/root-project/root/pull/15112,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14801. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14821:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/14821,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14910. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14913:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/14913,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/15977. Improve also doxygen documentation. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15983:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/15983,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/16024. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16027:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/16027,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/16051. What I did was to copy using the full constructor which updates the list. Another solution could to be change the Streamer so that it interacts with the list of colors directly, but don't know how to. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16139:323,test,tested,323,https://root.cern,https://github.com/root-project/root/pull/16139,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/16163. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16174:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/16174,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14760:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/14760,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7236. This bug has been there since >24y. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15716:157,test,tested,157,https://root.cern,https://github.com/root-project/root/pull/15716,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/8194. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15876:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/15876,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/9292. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14818:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/14818,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/9637. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16148:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/16148,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-10390. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15283:115,test,tested,115,https://root.cern,https://github.com/root-project/root/pull/15283,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-10705. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14957:115,test,tested,115,https://root.cern,https://github.com/root-project/root/pull/14957,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-3594. This explores if the fix suggested by the user triggers any errors in the CI tests. I did not check myself a local build, nor the unit test (attached below).; [clones_test_3.zip](https://github.com/user-attachments/files/15984085/clones_test_3.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15932:170,test,tests,170,https://root.cern,https://github.com/root-project/root/pull/15932,2,['test'],"['test', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-7408. ClassDef jitter between @couet and @pcanal, this class was missing the fix. See:; https://github.com/root-project/root/commit/269ba25ed73ae5e9b2fd020955fffb52d28ca557; https://github.com/root-project/root/commit/08fe57178a020ae8223f2fa0688e6fad7acf2dbc; https://github.com/root-project/root/commit/bf1b5448f0caea2116b1ca77e1507525d67da520. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021:454,test,tested,454,https://root.cern,https://github.com/root-project/root/pull/15021,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8051. Solution copy-pasted from JIRA issue (V Gonzalez). And adds some security to function arguments. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15022:211,test,tested,211,https://root.cern,https://github.com/root-project/root/pull/15022,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8129. The other option would be to add safety-checks in the code, but that would be probably detrimental to efficiency and defeat the purpose of option B ?. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15175:265,test,tested,265,https://root.cern,https://github.com/root-project/root/pull/15175,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8256. With the change, you would get error messages of this type:. `Error in <TTreeFormula::TTreeFormula>: The length of the formula (1035) exceeds the maximum allowed (1024)`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15274:285,test,tested,285,https://root.cern,https://github.com/root-project/root/pull/15274,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8269; Fixes https://its.cern.ch/jira/browse/ROOT-7993; Probably fixes https://its.cern.ch/jira/browse/ROOT-8709. I am not sure if the full function code itself is correct, ie why fNcodes is bigger than fLeaves.size(). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15176:326,test,tested,326,https://root.cern,https://github.com/root-project/root/pull/15176,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8274. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15023:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/15023,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-9028. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/14967,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/projects/ROOT/issues/ROOT-7052 reported by @olifre . ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930:149,test,tested,149,https://root.cern,https://github.com/root-project/root/pull/14930,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes https://root-forum.cern.ch/t/change-to-hadd-that-breaks-previously-working-code/60126. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16001:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/16001,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes several issues when compiling ROOT with nvc++, but not all of them. The build still fails ultimately, because `clang-tblgen` crashes. See also #9036. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14139:221,test,tested,221,https://root.cern,https://github.com/root-project/root/pull/14139,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12150:539,test,tested,539,https://root.cern,https://github.com/root-project/root/pull/12150,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Fixes undefined references when linking CoreBaseTests. ```; ../../../lib/libCling.so.6.26.00: undefined reference to `TMemFile::TMemFile(char const*, TMemFile::ZeroCopyView_t const&)'; ../../../lib/libCling.so.6.26.00: undefined reference to `TFile::TFile(char const*, char const*, char const*, int)'; ../../../lib/libCling.so.6.26.00: undefined reference to `TFile::~TFile()'; ../../../lib/libCling.so.6.26.00: undefined reference to `TStreamerInfo::TStreamerInfo()'; ../../../lib/libCling.so.6.26.00: undefined reference to `TMemFile::~TMemFile()'; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10313:621,test,tested,621,https://root.cern,https://github.com/root-project/root/pull/10313,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. For compatibility with Python 3.13. See: https://docs.python.org/3.13/whatsnew/3.13.html. From the above page:. * Classes have a new __firstlineno__ attribute, populated by the compiler, with the line number of the first line of the class definition. (Contributed by Serhiy Storchaka in gh-118465.). * Classes have a new __static_attributes__ attribute, populated by the compiler, with a tuple of names of attributes of this class which are accessed through self.X from any function in its body. (Contributed by Irit Katriel in gh-115775.). Without adding the new attributes to the blacklist there are errors:. AttributeError: 'int' object attribute 'doc' is read-only from the __firstlineno__ attribute. AttributeError: 'tuple' object attribute 'doc' is read-only from the __static_attributes__ attribute. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15430",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15798:872,test,tested,872,https://root.cern,https://github.com/root-project/root/pull/15798,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. From the Rcpp changelog:. * inst/include/Rcpp/: Added variadic templates to be used instead of; the generated code in `Rcpp/generated` and `Rcpp/module` when; compiling with C++11 or later. This PR adapts ROOT's R interface code to this change,. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16075:311,test,tested,311,https://root.cern,https://github.com/root-project/root/pull/16075,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Function was removed here https://github.com/root-project/cling/commit/c23abbc88b6ee61b966291c785794743b1bd5c62. Fixes https://github.com/root-project/cling/issues/456. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15218:234,test,tested,234,https://root.cern,https://github.com/root-project/root/pull/15218,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14741:374,test,tested,374,https://root.cern,https://github.com/root-project/root/pull/14741,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. I fixed the issue, where if no value for entry was provided, it would automatically set to 0. This has the result that the user has many outputs that correspond to the 0th entry. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #8300",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425:244,test,tested,244,https://root.cern,https://github.com/root-project/root/pull/8425,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14690:650,test,tested,650,https://root.cern,https://github.com/root-project/root/pull/14690,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. If one does:; ```; TFile* aFile = new TFile(""/tmp/tnamed.root"", ""RECREATE"");; TNamed(""TIME/CLK"", ""0x6"").Write();; aFile->ls();; ```. nothing is printed. Solution proposed by pcanal in https://github.com/root-project/root/pull/13217. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13275:298,test,tested,298,https://root.cern,https://github.com/root-project/root/pull/13275,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Implement builtin_gtest option. By setting the option to OFF the system gtest and gmock are used.; This allows doing tests without network available, e.g. during a package build for Fedora/EPEL. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301:161,test,tests,161,https://root.cern,https://github.com/root-project/root/pull/10301,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:; - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed.; - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master; - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14603:425,test,tested,425,https://root.cern,https://github.com/root-project/root/pull/14603,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Improves the issue template setup section. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #8795,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8805:108,test,tested,108,https://root.cern,https://github.com/root-project/root/pull/8805,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. In https://root.cern.ch/doc/master/namespaces.html, you get:. ![image](https://github.com/root-project/root/assets/10653970/e51cf920-743d-4ca1-955a-22562fee4e8d). The description of the ROOT namespace was picked form this file brief. Try to fix it this way. I do not know if it will work. Maybe @couet can try on his build, prior to merging. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15020:407,test,tested,407,https://root.cern,https://github.com/root-project/root/pull/15020,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop.; 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out.; 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627:728,test,tested,728,https://root.cern,https://github.com/root-project/root/pull/11627,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters.; This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys.; Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14248:537,test,tested,537,https://root.cern,https://github.com/root-project/root/pull/14248,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10776:454,test,tested,454,https://root.cern,https://github.com/root-project/root/pull/10776,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14606:302,test,tested,302,https://root.cern,https://github.com/root-project/root/pull/14606,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. JsMVA was moved to ROOT.JsMVA, so ""from JsMVA import ..."" no longer works. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15427:140,test,tested,140,https://root.cern,https://github.com/root-project/root/pull/15427,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Makes the descriptions for TH1::GetMaximum etc more descriptive. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8726:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/8726,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Many RooFit test fails on s390x due to a warning about RooNaNPacker not being implemented for big endian.; There are too many of them to add RAIIs for each of them, so I added the warning to the default list in this PR. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/10303,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. Maybe it fixes https://github.com/root-project/root/issues/14438, maybe not. I don't have tmva compiled in debug mode, so I'd appreciate if @vepadulano you can run valgrind for me to cross-check ;). ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14843:264,test,tested,264,https://root.cern,https://github.com/root-project/root/pull/14843,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Most commonly seen on ppc64le. Backtrace:; ```; ===========================================================; The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #11 ROOT::Experimental::RColor::toHex[abi:cxx11](unsigned char) (v=<optimized out>) at /usr/include/c++/11/ext/new_allocator.h:82; #12 0x00007fff90c220ec in ROOT::Experimental::RColor::SetRGB (this=0x7fffeadf5d10, r=<optimized out>, g=<optimized out>, b=<optimized out>) at /usr/include/c++/11/ext/new_allocator.h:89; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10309:924,test,tested,924,https://root.cern,https://github.com/root-project/root/pull/10309,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. NENTRIES is 10.; On a 4 core machine the expected size in 2 × 4 = 8.; Looping over the 8 IDs, 2 have 2 entries the remaining 6 have 1 entry; for a total of 10 (NENTRIES) entries.; The test checked that each ID had NENTRIES/(expected size) entries,; which in this case with integer division equals 1 entry, which was not; the correct test.; This commit chenges to test to check that the total number of entries; summed for all IDs equals NENTRIES. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10305:228,test,test,228,https://root.cern,https://github.com/root-project/root/pull/10305,4,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14679:243,test,tested,243,https://root.cern,https://github.com/root-project/root/pull/14679,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153:197,test,test,197,https://root.cern,https://github.com/root-project/root/pull/12153,3,['test'],"['test', 'tested', 'testing']"
Testability,# This Pull request:. ## Changes or fixes:. Precompiles C++ script to potentially speedup (slightly) documentation building. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10004:146,test,tested,146,https://root.cern,https://github.com/root-project/root/pull/10004,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Prevent infinite loops and add more security for overflows; ; Fixes in part https://github.com/root-project/root/issues/14770. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14820:192,test,tested,192,https://root.cern,https://github.com/root-project/root/pull/14820,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Python doesn't understand soversions and they don't make sense here anyway since nothing is linked against the bindings. Thus `ROOT_LIBRARY_PROPERTIES` is split into `ROOT_LIBRARY_PROPERTIES_NOVER` that just contains the suffix and prefix and R`OOT_LIBRARY_PROPERTIES` that contains the (so)version if enabled. Additionally `IMPORT_PREFIX` is dropped which doesn't have an effect. ## Checklist:. - [x] tested changes locally; - ~~[ ] updated the docs (if necessary)~~,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16228:446,test,tested,446,https://root.cern,https://github.com/root-project/root/pull/16228,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue ; A reproducer of the crash is also in that link.; Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14627:808,test,tested,808,https://root.cern,https://github.com/root-project/root/pull/14627,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13366:284,test,tested,284,https://root.cern,https://github.com/root-project/root/pull/13366,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Removes `.pyc` files that are checked into source. PYC files are Python version dependent, and are automatically generated from `.py` files. From the structure, I'm guessing these are Python 2.x auto-generated files. There's a small chance they could have been intentional, but I don't know why they would be. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10249:375,test,tested,375,https://root.cern,https://github.com/root-project/root/pull/10249,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13368:230,test,tested,230,https://root.cern,https://github.com/root-project/root/pull/13368,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Replace the Sum and Mean methods by the Kahan Sum method to improve summation precision. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11230:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/11230,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. See https://root-forum.cern.ch/t/confusing-behavior-of-setrangeuser-and-fitting-range/58591. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15096:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/15096,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. See the commit messages for details. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10306:102,test,tested,102,https://root.cern,https://github.com/root-project/root/pull/10306,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14257:110,test,tested,110,https://root.cern,https://github.com/root-project/root/pull/14257,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Sets the verbosity level of rootcling in ACLiC to the default, therewith printing also warnings and not only fatal errors. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [ROOT-10975](https://its.cern.ch/jira/browse/ROOT-10975). Linked roottest PR https://github.com/root-project/roottest/pull/1168 and https://github.com/root-project/roottest/pull/1169, that fixes a test which becomes broken once the verbosity is increased because some unused rules start to generate warnings. The rules are unused simply because the name of some template instantiations are not spelled correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16208:188,test,tested,188,https://root.cern,https://github.com/root-project/root/pull/16208,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. Shell-name was not being found if the script was an executable, in that case it was assumed it was bash (see https://github.com/root-project/root/pull/10418). This PR applies a fix in the function getting the shell name, technical details are discussed here in the comments section:; https://stackoverflow.com/questions/71944436/how-to-get-the-unix-shell-executable-name-for-a-script-marked-as-executable-and . Now, the shell is correctly identified in all tested cases. For security, it will print a warning if shell name is not found, but still run. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10424:501,test,tested,501,https://root.cern,https://github.com/root-project/root/pull/10424,2,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Since the possibillity to use an external libAfterImage was removed, the built-in version needs some fixes.; See commit messages for details. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15191:207,test,tested,207,https://root.cern,https://github.com/root-project/root/pull/15191,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Small extensions on the documentation of RooJSONFactoryWSTool, adding a C++ example as well. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16317:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/16317,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Solution provided by @dkonst13. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14324,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14328:97,test,tested,97,https://root.cern,https://github.com/root-project/root/pull/14328,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Some minor interface changes to reflect better the underlying TestStatistics classes and how we intend to bring it to users in the upcoming release. . The 'NewStyle' name was changed to 'ModularL' to reflect the fact that these new test statistics are modular. Note that we are undecided on 'ModularL' versus just 'Modular', so if you have a strong opinion on this feel free to change it. Some of the functionality included in the added named arguments is not implemented yet, this is because we plan to add the respective backend for these new features in the near future. Therefore these named arguments were added under RooFit::Experimental namespace. Do we also need to add these not yet functioning arguments already to the RooMinimizer config struct, since we plan to add them in the near future?. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11906:106,Test,TestStatistics,106,https://root.cern,https://github.com/root-project/root/pull/11906,3,"['Test', 'test']","['TestStatistics', 'test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. Some new tests need the backward compatibility tweaks to work with the system gtest on RHEL/EPEL 8. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12250:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/12250,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. Splitted from the other PR (https://github.com/root-project/root/pull/14986) as requested by @guitargeek . This has no impact, it's just to align with Clang's coding standard https://opensource.apple.com/source/lldb/lldb-112/llvm/docs/CodingStandards.html#ll_ns_std and to enforce good practices in students reading the tests. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14989:364,test,tests,364,https://root.cern,https://github.com/root-project/root/pull/14989,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:. Supersedes https://github.com/root-project/root/pull/9616. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14929:124,test,tested,124,https://root.cern,https://github.com/root-project/root/pull/14929,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Support for dash was added recently to thisroot.sh https://github.com/root-project/root/pull/10332, but this has led to a problem when calling thisroot.sh from an executed script. The regression is fixed now by defaulting to the previous behaviour if the shell-name is not found. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [#](https://github.com/root-project/root/issues/10417)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10418:345,test,tested,345,https://root.cern,https://github.com/root-project/root/pull/10418,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. TGMainFrame::HandleKey stops prematurely, see https://github.com/root-project/root/blob/master/gui/gui/src/TGFrame.cxx#L1593, if any TGTextButton with a hotkey shortcut (`""&Sort data""`) is used in a GUI, even if the actual Key is CTRL+S instead of Alt+S or even if button is disabled. ## Reproducer; Based on @bellenot from https://github.com/root-project/root/issues/8665. To try it, press CTRL+S, it should open a file dialog to save the frame. Instead, it thinks it is Alt+S and stops the function too early.; ```; #include ""KeySymbols.h""; #include ""TGFrame.h""; #include <iostream>; #include ""TVirtualX.h""; #include ""TGButton.h""; //______________________________________________________________________________; //; //; //______________________________________________________________________________; class MyMainFrame : public TGMainFrame {; public:; MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h);; virtual ~MyMainFrame() { Cleanup(); }; void CloseWindow() { delete this; }. ClassDef(MyMainFrame, 0); };. //______________________________________________________________________________; MyMainFrame::MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h) : TGMainFrame(p, w, h); {; auto sortdata = new TGTextButton(this, ""&Sort data"");; AddFrame(sortdata);. MapSubwindows();; Layout();; MapWindow();; Resize(150,100);; }. //______________________________________________________________________________; void test_grab_key(); {; MyMainFrame *main = new MyMainFrame(gClient->GetRoot(), 150, 100);; }. ```. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8667:1576,test,tested,1576,https://root.cern,https://github.com/root-project/root/pull/8667,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. TMath.cxx and TMath.h. . Define BreitWignerRelativistic(...) in TMath.h and then calculate in TMath.cxx, following same convention for names of variables, default values and normalization as BreitWigner(...) which is already defined in TMath. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9926:308,test,tested,308,https://root.cern,https://github.com/root-project/root/pull/9926,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. The HistFactory implementation of HS3 is updated to conform with the latest draft of the standardization document.; A turnaround of a plain histfactory example in the new style is possible. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12340:255,test,tested,255,https://root.cern,https://github.com/root-project/root/pull/12340,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. The `evaluate()` function on the `RooFit::TestStatistics::RooRealL` class was not functional. This PR fixes it by adding a `RooArgSet` member to `RooRealL` called `vars_obs_` which initially contains the same variables as the `RooArgProxy` and ensures that the proxy variables are properly transferred to the internal variables of the likelihood (contained in the `RooArgSet` `vars_obs_`) before evaluation. This change was made with the help of @wverkerke. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9402:86,Test,TestStatistics,86,https://root.cern,https://github.com/root-project/root/pull/9402,2,"['Test', 'test']","['TestStatistics', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. The behavior of `-=` and `+=` on a `KahanSum` were not symmetric, leading to slight bit-wise inaccuracies. In fits, where such operations are done a lot of times (e.g. through the offsetting mechanism in RooFit which subtracts a constant `KahanSum` term after each likelihood evaluation), this can add up to significant numerical divergence. This in turn makes it hard to test the accuracy of new numerical implementations. In particular, we are trying to fix a bug in `MultiProcess::LikelihoodJob`, which builds on this `KahanSum` fix. This commit adds test cases around the precision limits, making sure that all behavior is now symmetric and internally consistent. To aid in the test cases and also make the `KahanSum` objects more versatile, the commit also adds some extra `-` and `+` operators. Using these, we verify some additional desirable symmetry properties: that x - x = 0, and y + (-x) = y - x. The improved implementation is based on an algorithm for combining Kahan sums and carry terms used in literature (citation in comments). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11940:416,test,test,416,https://root.cern,https://github.com/root-project/root/pull/11940,4,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. The build can run out of memory regardless of build type. This PR enables the protection against parallel linking with LLVM libraries for all build type. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14111:219,test,tested,219,https://root.cern,https://github.com/root-project/root/pull/14111,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. The evaluate() function on the RooFit::TestStatistics::RooRealL class was not functional. This PR fixes it by adding a RooArgSet member to RooRealL called vars_obs_ which initially contains the same variables as the RooArgProxy and ensures that the proxy variables are properly transferred to the internal variables of the likelihood (contained in the RooArgSet vars_obs_) before evaluation. This change was made with the help of @wverkerke. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9456:83,Test,TestStatistics,83,https://root.cern,https://github.com/root-project/root/pull/9456,2,"['Test', 'test']","['TestStatistics', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:; ~~~~; $ ls tree/dataframe/test/*.py; tree/dataframe/test/dataframe_cache.py; tree/dataframe/test/dataframe_datasetspec.py; tree/dataframe/test/dataframe_histograms.py; tree/dataframe/test/dataframe_merge_results.py; tree/dataframe/test/dataframe_misc.py; ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11724:112,test,test,112,https://root.cern,https://github.com/root-project/root/pull/11724,7,['test'],['test']
Testability,"# This Pull request:. ## Changes or fixes:. The function is no longer implemented, see #14327; Can lead to linking issues when undefined symbols are not ignored, e.g., DD4hep DDCAD. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14339:203,test,tested,203,https://root.cern,https://github.com/root-project/root/pull/14339,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. The rf105_funcbinding.py tutorial used to trigger errors due to unknown symbols. In particular the custom new and delete operators used in RooFit were not autoloaded when needed. In the tutorial there was a workaround implemented to call ProcessLine instead of making calls directly form Python, to make the autoloading from the C++ side of ROOT instead. This did not quite fix the problem, and the tutorial still randomly failed due to missing symbols. After changing the algorthm used for autoloading in commit 6ae602bba7d33c900a117c9de0187ab5a28e14b8 these problems were solved. After this fix using the direct calls from Python also works, so this PR suggests updating the tutorial to do that. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10307:763,test,tested,763,https://root.cern,https://github.com/root-project/root/pull/10307,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. The xrootd headers in proof/xrdinc are no longer used. This PR removes them. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15423:142,test,tested,142,https://root.cern,https://github.com/root-project/root/pull/15423,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This MR contains mostly two classes: ; - `RooFit::MultiProcess::ProcessTimer` which keeps a set of potentially overlapping timers per process that can be started and stopped by referring to their identifier string. Timings are written out in json format. Some extra functionality is added to write out at a specified interval.; - `RooFit::MultiProcess::HeatmapAnalyzer` which translates the timings output in log format by the process timer to a heatmap which it can return in the form of a TH2I with the correctly labeled x and y axes. Some extra functionality is available for inspecting the log files and retrieving its metadata. Tests are included for both classes. Note that also the interface to enable timing logging is included in the `RooMinimizer::Config` object which can be given to the RooMinimizer and on RooAbsPdf::fitTo. The variable that centrally controls whether timings are logged or not is `RooMinimizer::Config::logTimings_`. . Also, an initial timing setup is included, with some `ProcessTimer::start_timer` and `ProcessTimer::end_timer` calls throughout the `RooFit::TestStatistics` code. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791:453,log,log,453,https://root.cern,https://github.com/root-project/root/pull/11791,7,"['Test', 'log', 'test']","['TestStatistics', 'Tests', 'log', 'logged', 'logging', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. This PR adjusts some limits in the stressGraphics reference file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15735:131,test,tested,131,https://root.cern,https://github.com/root-project/root/pull/15735,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This PR allows ROOT is possible to be built as a minimum set of basic components.; Also, it is possible to build components using already built ROOT components. ## Checklist:. - [ X ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16751:228,test,tested,228,https://root.cern,https://github.com/root-project/root/pull/16751,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. This PR fixes the `TH1::GetCumulative()` method by assigning the cumulative error to the newly generated histogram instead of the original one. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11947,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11948:209,test,tested,209,https://root.cern,https://github.com/root-project/root/pull/11948,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14681:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/14681,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This PR re-implements the `TH1` method `GetCumulative(forward, suffix)`, which is equivalent to the original implementation (with #11948 applied) on 1D histograms, but produces more sensible result for 2D and 3D histograms. That is,. $$S_{i_x i_y i_z} = \sum_{j_x = n_{x0}}^{i_x} \sum_{j_y = n_{y0}}^{i_y} \sum_{j_z = n_{z0}}^{i_z} a_{j_x j_y j_z}\ (\text{forward})$$. $$S_{i_x i_y i_z} = \sum_{j_x = i_x}^{n_x} \sum_{j_y = i_y}^{n_y} \sum_{j_z = i_z}^{n_z} a_{j_x j_y j_z}\ (\text{backward})$$. To achieve $O(n_x n_y n_z)$ time complexity (instead of $O(n_x^2 n_y^2 n_z^2)$ ), the method is implemented using the [inclusion-exclusion principle](https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle) while referencing the content of the previously-computed neighboring bins. Namely,. $$\begin{cases}; S_{i_x i_y i_z} = a_{i_x i_y i_z} + S_{(i_x-1) i_y i_z} + S_{i_x (i_y-1) i_z} + S_{i_x i_y (i_z-1)} - S_{(i_x-1) (i_y-1) i_z} - S_{i_x (i_y-1) (i_z-1)} - S_{(i_x-1) i_y (i_z-1)} + S_{(i_x-1) (i_y-1) (i_z-1)} & (\text{forward}) \\; S_{i_x i_y i_z} = a_{i_x i_y i_z} + S_{(i_x+1) i_y i_z} + S_{i_x (i_y+1) i_z} + S_{i_x i_y (i_z+1)} - S_{(i_x+1) (i_y+1) i_z} - S_{i_x (i_y+1) (i_z+1)} - S_{(i_x+1) i_y (i_z+1)} + S_{(i_x+1) (i_y+1) (i_z+1)} & (\text{backward}); \end{cases}$$. This is useful when computing the selection efficiency of two variables:; For example, one can get a histogram (`*h2_eff_pt_eta`) in which each bin represents the selection efficiency where pt and eta is greater than the lower edges of the bin from the 2D histogram of these variables (`*h2_pt_eta`) with the following code,. ```c++; TH2 *h2_eff_pt_eta = h2_pt_eta->GetCumulative(kFALSE, ""_efficiency"");; h2_eff_pt_eta->Scale(h2_eff_pt_eta->GetBinContent(1, 1));; ```. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11949:1825,test,tested,1825,https://root.cern,https://github.com/root-project/root/pull/11949,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This allows to build the documentation as part of the normal ROOT build and sets the basis for integrating it into the GitHub CI. And to test new PullRequests so that they do not break the existing documentation nor do add new warnings to it. You can still build the documentation as an external project, like is done now. ## Status. Draft, still work to do on the notebook / tutorial part. ## History. This supersedes the old PR https://github.com/root-project/root/pull/9966 that I just closed. The goals were:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090; - [x] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953 in combination with https://github.com/ammaraskar/gcc-problem-matcher; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160:181,test,test,181,https://root.cern,https://github.com/root-project/root/pull/15160,1,['test'],['test']
Testability,"# This Pull request:. ## Changes or fixes:. This breaks the pattern used when undefining and then defining a variable in the same flag:; ```; $ echo | g++ -Wp,-UVAR,-DVAR=1 -c -x c++ -; ```; Here -Wp,-UVAR,-DVAR=1 will first undefine VAR and then define it to 1. If the -Wp, is dropped, this fails:; ```; $ echo | g++ -UVAR,-DVAR=1 -c -x c++ -; <command-line>: warning: extra tokens at end of #undef directive; ```; Now it will only undefine VAR, but not define it. I.e. instead of; ```; #undef VAR; #define VAR 1; ```; you get; ```; #undef VAR,-DVAR=1; ```; which explains the rather cryptic warning about extra token after #undef. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://bugzilla.redhat.com/show_bug.cgi?id=2177136",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12476:654,test,tested,654,https://root.cern,https://github.com/root-project/root/pull/12476,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This change has no impact, it's just to align with Clang's coding standard https://opensource.apple.com/source/lldb/lldb-112/llvm/docs/CodingStandards.html#ll_ns_std and to enforce good practices in students reading / copy-pasting code. This is part 2 of https://github.com/root-project/root/pull/14922. Part 3 will be Roofit; Part 4 TMVA, test and tutorials. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14952:384,test,test,384,https://root.cern,https://github.com/root-project/root/pull/14952,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. This fixes both of the errors seen when trying to build with builtin_llvm=off; https://root-forum.cern.ch/t/compiling-root-6-24-with-external-llvm-but-built-in-clang/45258. ## Checklist:. - [x] tested changes locally; - updated the docs (if necessary). This PR fixes #8141,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8678:238,test,tested,238,https://root.cern,https://github.com/root-project/root/pull/8678,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This has no impact, it's just to align a bit with Clang's coding standard https://opensource.apple.com/source/lldb/lldb-112/llvm/docs/CodingStandards.html#ll_ns_std and to enforce good practices in students reading the tests. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14965:263,test,tests,263,https://root.cern,https://github.com/root-project/root/pull/14965,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. This has no impact, it's just to align with Clang's coding standard https://opensource.apple.com/source/lldb/lldb-112/llvm/docs/CodingStandards.html#ll_ns_std and to enforce good practices in students reading the tests. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14986:257,test,tests,257,https://root.cern,https://github.com/root-project/root/pull/14986,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:. This is a rebased version of https://github.com/root-project/cling/pull/174 by @marsupial; The test was failing for a reason that likely shouldn't be ignored. This reverts commit https://github.com/root-project/cling/commit/5947e13cb99052b6f7a5b501244ee2be9be9d080.; ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/16694,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. This is just a suggestion to align a bit more with Clang's coding standards https://opensource.apple.com/source/lldb/lldb-112/llvm/docs/CodingStandards.html#ll_ns_std. If the change is welcome, I can extend to the rest of parts of ROOT that have this statement. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14922:327,test,tested,327,https://root.cern,https://github.com/root-project/root/pull/14922,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9943:409,test,tested,409,https://root.cern,https://github.com/root-project/root/pull/9943,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 ; ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13586:152,test,tested,152,https://root.cern,https://github.com/root-project/root/pull/13586,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. This test tests support for 64 bit values. But it uses a long type, which fails on platforme where a long is 32 bits. This commit changes the test to use a long long type instead. ```[ RUN ] RDFSnapshotMore.ReadWriteCarray; /builddir/build/BUILD/root-6.26.00/tree/dataframe/test/dataframe_snapshot.cxx:530: Failure; Expected equality of these values:; rvl[0]; Which is: 0; 8589934592; /builddir/build/BUILD/root-6.26.00/tree/dataframe/test/dataframe_snapshot.cxx:530: Failure; Expected equality of these values:; rvl[0]; Which is: 0; 8589934592; [ FAILED ] RDFSnapshotMore.ReadWriteCarray (1667 ms); ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10302:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/10302,6,['test'],"['test', 'tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:. To avoid reports in the forum worrying about whether Minuit2 is gonna be removed. See https://root-forum.cern.ch/t/will-minuit2-be-removed-from-root/58078. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14814:221,test,tested,221,https://root.cern,https://github.com/root-project/root/pull/14814,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Triggered by a failure to run an ATLAS Higgs combination fit using the MultiProcess-parallelized LikelihoodJob, this PR changes the way offsetting is handled in the TestStatistics::LikelihoodWrapper family of classes. This in turn improves precision of evaluations, making many parallelized likelihood evaluations now bit-wise exactly equal to non-parallel evaluations. This allows us to better debug the Higgs fit. After this PR, the public Higgs workspace used in rootbench can be fit with LikelihoodJob enabled. In detail, this PR changes the following:. - Increased precision:; * Per-component offsets: instead of one offset for the total LikelihoodWrapper, we switched to a vector of offsets: one for each likelihood component. This makes a difference only for RooSumL fits, i.e. simultaneous PDF fits or fits with constraint or global observable terms. This brings the results of these fits closer to the old-style RooNLLVar fits, because those also use per-component offsets (per-RooNLLVar in a RooAddition to be exact).; * In LikelihoodJob::evaluate, the result_ KahanSum is no longer initialized to zero, but is initialized to the first value in the results_ array, both sum and carry term. This sometimes makes a difference: adding a term with a small but non-zero carry term to an existing sum with a zero sum and zero carry term can make the small non-zero carry term disappear.; * Due to these changes and the earlier KahanSum updates, we were able to tighten the tolerance of tests in testLikelihoodSerial, testLikelihoodJob and testLikelihoodGradientJob, with many tests now passing EXPECT_EQ.; * testLikelihoodGradientJob adds offsetting to the parameterized test matrices of the LikelihoodGradientJobTest cases to test all the above (and below) changes. - Offset synchronization:; * LikelihoodWrapper and LikelihoodGradientWrapper now store a shared_ptr to the offsets instead of raw offsets. At construction time within a MinuitFcnGrad, th",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202:209,Test,TestStatistics,209,https://root.cern,https://github.com/root-project/root/pull/12202,1,['Test'],['TestStatistics']
Testability,# This Pull request:. ## Changes or fixes:. Typo and doxygen format; See:; https://cling.web.cern.ch/cling/doxygen/classcling_1_1MetaParser.html. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10156:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/10156,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Typo trailing brace. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14811:86,test,tested,86,https://root.cern,https://github.com/root-project/root/pull/14811,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Updates the RooFit::MultiProcess-enabled RooFit::TestStatistics classes docs to include all the most recent updates. ## Checklist:. - [x] ~tested changes locally~; - [x] updated the docs (if necessary). This PR fixes #10967,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16788:93,Test,TestStatistics,93,https://root.cern,https://github.com/root-project/root/pull/16788,2,"['Test', 'test']","['TestStatistics', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. Use always bundled afterimage which contains many fixes that the obsolete upstream version does not (unmaintained package). This is an exception of the general rule introduced by @amadio on https://github.com/root-project/root/commit/2b3250dc2a9cd828f6c8e398e69ecde0e1412111. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14247,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14395:341,test,tested,341,https://root.cern,https://github.com/root-project/root/pull/14395,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. Use unique filenames in fillrandom.py and fillrandom.C. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10311:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/10311,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15607:230,test,tested,230,https://root.cern,https://github.com/root-project/root/pull/15607,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. Warns user when resulting TGraph is empty, ie when no points were found in the file, most likely due to the format argument not matching the input file. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15684:218,test,tested,218,https://root.cern,https://github.com/root-project/root/pull/15684,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13301:215,test,tested,215,https://root.cern,https://github.com/root-project/root/pull/13301,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. When default units (TGeoManager::kG4Units) are used, the computed radiation length in TGeoMaterial is smaller by factor 100 than the value computed in Geant3.; The problem was found in the ALICE O2 project. Test code:; ```c++; auto matLead = new TGeoMaterial(""Lead"", a = 207.19, z = 82., density = 11.35);; cout << ""matLead->GetRadLen(): "" << matLead->GetRadLen() << endl;. ``` ; Output:; ```; matLead->GetRadLen(): 0.561683 # cm, agrees with value computed by G3; matLead->GetRadLen(): 0.0561683 # mm, before this fix; matLead->GetRadLen(): 5.61683 # mm, after this fix; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9401:251,Test,Test,251,https://root.cern,https://github.com/root-project/root/pull/9401,2,"['Test', 'test']","['Test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. When the external application (depending on ROOT) uses C++20, adding this C++ feature test can reduce the possibility of compilation failure. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311:130,test,test,130,https://root.cern,https://github.com/root-project/root/pull/11311,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. Whitelist libtbbmalloc in library import test; ```; 6/1344 Test #12: pyunittests-pyroot-import-load-libs .......................................***Failed 1.35 sec; test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT ... ERROR; ======================================================================; ERROR: test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Exception: Found not whitelisted libraries after importing ROOT:; - libtbbmalloc; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ----------------------------------------------------------------------; Ran 1 test in 1.186s; FAILED (errors=1); ```; This failure is seen in Fedora 41 after tbb was updated from version 2021.11.0 to version 2021.13.0 in the distribution. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16016:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/16016,7,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:; ```; CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):; Compatibility with CMake < 3.5 will be removed from a future version of; CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell; CMake that the project does not need compatibility with older versions.; ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13373:667,test,tested,667,https://root.cern,https://github.com/root-project/root/pull/13373,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. With `dev=1`, `asserts=1`, `pythia6=1`, `CMAKE_BUILD_TYPE=Debug`, `LLVM_BUILD_TYPE=Debug`, and `LLVM_ENABLE_ASSERTIONS=1`, a missing `#include ""strlcpy.h"" is exposed in `TPythia6.cxx` which is fixed by this PR. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9563:59,assert,asserts,59,https://root.cern,https://github.com/root-project/root/pull/9563,2,"['assert', 'test']","['asserts', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. With the improvements in dataframe with better distinction between long, long long and pointers it works OK on ix86 when compiled with gcc 12. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ```; Start 54: pyunittests-pyroot-pyz-rdataframe-asnumpy; Start 55: pyunittests-pyroot-pyz-rdataframe-makenumpy; 134/1231 Test #55: pyunittests-pyroot-pyz-rdataframe-makenumpy ......................... Passed 10.99 sec; 151/1231 Test #54: pyunittests-pyroot-pyz-rdataframe-asnumpy ........................... Passed 23.56 sec; Start 363: gtest-tree-dataframe-test-dataframe-friends; Start 364: gtest-tree-dataframe-test-dataframe-colnames; Start 365: gtest-tree-dataframe-test-dataframe-cache; 388/1231 Test #364: gtest-tree-dataframe-test-dataframe-colnames ........................ Passed 4.40 sec; Start 366: gtest-tree-dataframe-test-dataframe-callbacks; 389/1231 Test #363: gtest-tree-dataframe-test-dataframe-friends ......................... Passed 10.87 sec; Start 367: gtest-tree-dataframe-test-dataframe-histomodels; 390/1231 Test #366: gtest-tree-dataframe-test-dataframe-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:208,test,tested,208,https://root.cern,https://github.com/root-project/root/pull/10300,11,"['Test', 'test']","['Test', 'test-dataframe-cache', 'test-dataframe-callbacks', 'test-dataframe-colnames', 'test-dataframe-friends', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:. You can call `TH1::SetBinContent(1, 5)` and `TH2::SetBinContent(1, 1, 5)`; You can call `TH1::AddBinContent(1,5)` but you cannot call `TH2::AddBinContent(1, 1, 5)`. This PR makes the latter option available, for symmetry. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14154:287,test,tested,287,https://root.cern,https://github.com/root-project/root/pull/14154,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. [before.pdf](https://github.com/user-attachments/files/15914243/before.pdf); [after.pdf](https://github.com/user-attachments/files/15914241/after.pdf). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15883 . @dpiparo @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15893:217,test,tested,217,https://root.cern,https://github.com/root-project/root/pull/15893,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. [core] Make TUri class PCRE2 compatible; ; PCRE2 has a stricter regular expression syntax parsing than PCRE.; Some non-conforming regular expressions that were accepted by PCRE are; correcrly rejected by PCRE2.; ; Some of the regular expressions used by the TUri class do not follow; the syntax rules and were relying on them being acceped by PCRE; anyway. This commit corrects the syntax of these expressions so that; they are now accepted by PCRE2. The corrected expressions still work; correctly with the old PCRE. [core] Correct the regular expression for the scheme part in TUri class; ; RFC 3986 (https://datatracker.ietf.org/doc/html/rfc3986) defines the; scheme part of a URI as:; ; scheme = ALPHA *( ALPHA / DIGIT / ""+"" / ""-"" / ""."" ); ; The regular expression for finding the scheme part in the TUri class; was defined as; ; ^[[:alpha:]][[:alpha:][:digit:]+-.]*$; ; This does not match the definition in the RFC, since +-. in regular; expression syntax is the range of ascii codes from '+' to '.', which; means '+', ',', '-' and '.'. I.e. the ',' is included in the regular; expression in error. This commit adds a backslash escape to the '-' so; that it is interpreted as a literal '-' sign instead of indicating a; range in the regular expression. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15986",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15988:1324,test,tested,1324,https://root.cern,https://github.com/root-project/root/pull/15988,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. `.Class <name>` command should be the verbose variant of `.class <name>`, as in CINT, but right now it is ignored. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10350:180,test,tested,180,https://root.cern,https://github.com/root-project/root/pull/10350,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. `ReadObj` returns an owning pointer.; Using `dynamic_cast` and ignoring the ""not castable"" case can leak memory. See: https://root-forum.cern.ch/t/possible-leak-with-dynamic-cast-and-tkey-readobj/56799. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13931:268,test,tested,268,https://root.cern,https://github.com/root-project/root/pull/13931,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. ```; 167/1341 Test #120: gtest-hist-hist-test-testTProfile2Poly ....................................***Failed 11.00 sec; Running main() from /builddir/build/BUILD/googletest-1.14.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RNTuple.OpenHTTP:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.DoubleSlash:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from TProfile2Poly; [ RUN ] TProfile2Poly.GlobalCompare; /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/hist/hist/test/test_tprofile2poly.cxx:30: Failure; Expected equality of these values:; tp2d->GetMeanError(c); Which is: 0.0030918045191081229; tpp->GetMeanError(c); Which is: 0.0030918045191081199; [ FAILED ] TProfile2Poly.GlobalCompare (3076 ms); [ RUN ] TProfile2Poly.BinContentCompare; [ OK ] TProfile2Poly.BinContentCompare (2575 ms); [ RUN ] TProfile2Poly.BinErrorSpreadCompare; [ OK ] TProfile2Poly.BinErrorSpreadCompare (2820 ms); [ RUN ] TProfile2Poly.BinErrorMeanCompare; [ OK ] TProfile2Poly.BinErrorMeanCompare (2387 ms); [----------] 4 tests from TProfile2Poly (10861 ms total); [----------] Global test environment tear-down; [==========] 4 tests from 1 test suite ran. (10861 ms total); [ PASSED ] 3 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TProfile2Poly.GlobalCompare; 1 FAILED TEST; ```. The proposed change is based on a similar code in the same source file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15734:58,Test,Test,58,https://root.cern,https://github.com/root-project/root/pull/15734,16,"['TEST', 'Test', 'test']","['TEST', 'Test', 'test', 'test-', 'tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:. ```; Processing /builddir/build/BUILD/root-6.26.00/tutorials/tmva/TMVA_CNN_Classification.C...; Running with nthreads = 224. [ ... ]. OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; OpenBLAS warning: precompiled NUM_THREADS exceeded, adding auxiliary array for thread metadata.; *** Break *** segmentation violation; *** Break *** segmentation violation; *** Break *** segmentation violation; *** Break *** segmentation violation; *** Break *** segmentation violation; *** Break *** segmentation violation; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10312:1499,test,tested,1499,https://root.cern,https://github.com/root-project/root/pull/10312,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. `root.exe -a`; returns right now a non-understandable error message. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14816:134,test,tested,134,https://root.cern,https://github.com/root-project/root/pull/14816,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. avoid crash if picture not found. and allow compilation, there was a missing header. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14379:150,test,tested,150,https://root.cern,https://github.com/root-project/root/pull/14379,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. nWorkers setting was actually not being set when the RooMinimizer was called with the nWorkers setting enabled in `RooMinimizer::Config`. Now that is fixed by passing the `RooMinimizer::Config::nWorkers` setting to the multiprocessing internal config. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11840:317,test,tested,317,https://root.cern,https://github.com/root-project/root/pull/11840,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:. nullptr access when branch is not found. Fixes first part of https://its.cern.ch/jira/browse/ROOT-8842 by @jpivarski. `GetNextRange(int)`. but it still crashes later at:. ```; 1 frombuf                                                      Bytes.h                  384 0x7f62c0ded275 ; 2 ROOT::Experimental::TTreeReaderValueFast<float>::Deserialize TTreeReaderValueFast.hxx 171 0x7f62b6563bd0 ; 3 ROOT::Experimental::TTreeReaderValueFast<float>::Get         TTreeReaderValueFast.hxx 162 0x7f62b6563b42 ; 4 ROOT::Experimental::TTreeReaderValueFast<float>::operator *  TTreeReaderValueFast.hxx 165 0x7f62b6563b60 ; 5 reader                                                       reader.C                 30  0x7f62b6563004 ; 6 ??                                                                                        0x7f62b7e280bc ; 7 ??                                                                                        0x7ffda58c2b60 ; 8 ??                                                                                        0x7ffda58c2b28 ; 9 ??                                                                                                       ; ```. and this part, I do not know how to solve. The crash happens every time at a different entry. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15929:1321,test,tested,1321,https://root.cern,https://github.com/root-project/root/pull/15929,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. src/RBDT.cxx is a source file of libTMVAUtils and should not also be asource file of libTMVA. Remove it.; Adjust test using symbols defined in this source file to link to libTMVAUtils instead of libTMVA. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This change should alse be ported to 6.28.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13863:157,test,test,157,https://root.cern,https://github.com/root-project/root/pull/13863,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:. to avoid error when building documentation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10060:109,test,tested,109,https://root.cern,https://github.com/root-project/root/pull/10060,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. typo. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16097:71,test,tested,71,https://root.cern,https://github.com/root-project/root/pull/16097,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. warning: reached end of file while inside a ~~~ block!. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9388:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/9388,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:. ~~~~; Start 672: tutorial-io-loopdir; 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec; Start 673: tutorial-io-loopdir11; 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec; Start 674: tutorial-io-mergeSelective; 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec; Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C...; Info in <TCanvas::Print>: ps file hsimple.ps has been created; Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps; Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps; Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps; Info in <TCanvas::Print>: ps file hsimple.ps has been closed; Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748; ~~~~. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11725:91,Test,Test,91,https://root.cern,https://github.com/root-project/root/pull/11725,4,"['Test', 'test']","['Test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; #11627 still had minor compile warnings from wrong printf formatting. This PR fixes that. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11802:155,test,tested,155,https://root.cern,https://github.com/root-project/root/pull/11802,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; * `thisroot.sh`:; * Pass `shellcheck`; ```sh; shellcheck -s sh config/thisroot.sh; shellcheck -s dash config/thisroot.sh; shellcheck -s ksh config/thisroot.sh; shellcheck -s bash config/thisroot.sh; ```; Notable fixes:; * <code>&DiacriticalGrave;my-command&DiacriticalGrave;</code> -> `$(my-command)`; (SC2006, &DiacriticalGrave;&DiacriticalGrave; is a legacy Bourn shell syntax with several issues); * `[ ""x$foo"" = ""x"" ]` -> `[ -z ""${foo-}"" ]` and `[ ""x$foo"" != ""x"" ]` -> `[ -n ""${foo-}""]`; * `cond && run-true || run-false` -> `if cond; then run-true; else run false; fi`; (SC2015: run-false may be triggered when run-true fails); * [ ""$foo"" == ""$bar"" ] -> [ ""$foo"" = ""$bar"" ] (SC3014, POSIX-conformance). * Fix unbound variables; * Whenever a variable `$foo` is possibly not set, call it like `${foo-}`; * Now it can be sourced with `set -u`. * Unify indentation: use three spaces everywhere. * `thisroot.fish`:; * `dirname` -> `path dirname` so that Fish users don't have to call the `dirname` executable.; ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557:1076,test,tested,1076,https://root.cern,https://github.com/root-project/root/pull/11557,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times.; **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11068:721,test,tested,721,https://root.cern,https://github.com/root-project/root/pull/11068,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; - Changes FindMyQL.cmake to find the installation of MySQL if mysql_config fails because it has been relocated. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13946:178,test,tested,178,https://root.cern,https://github.com/root-project/root/pull/13946,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; - Color palette being changed silently by TGeoPainter / TEve.; - clarify all missing arguments in the docu. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8597,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9350:173,test,tested,173,https://root.cern,https://github.com/root-project/root/pull/9350,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; - Dictionary pythonizations for std::map constructors ( RooDataHist, RooCategory) ; - Pythonization and formatting of tutorial files. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8669:199,test,tested,199,https://root.cern,https://github.com/root-project/root/pull/8669,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; - Generalizes the fetch/update calls in the mocked-up version of DAOS to support multiple I/O descriptors per request. ; - This change will support planned improvements on the mapping between RNTuple and DAOS to leverage its backend parallelization. ; - Passes previously-existing v7 unit tests (which send a single IOD per request). ## Checklist:. - [x] tested changes locally. This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10388:88,mock,mocked-up,88,https://root.cern,https://github.com/root-project/root/pull/10388,3,"['mock', 'test']","['mocked-up', 'tested', 'tests']"
Testability,# This Pull request:. ## Changes or fixes:; - Implemented RooWorkspace pythonizations with bracket operator alternative for `RooWorkspace::obj()`; - Command argument pythonization for RooWorkspace::import(); - Pythonization of tutorial files. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8803:264,test,tested,264,https://root.cern,https://github.com/root-project/root/pull/8803,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; - Mentions/Suggests in the GH template how to paste the setup information when reporting a bug via the web browser; - Adds the ability to submit a bug report by opening web browser from the ROOT prompt, with command `.gh`; - Adds the ability to auto-populate a GitHub bug report with your current system setup.; - Similarly for reporting a crash or bug in the forum. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary); - [FOR LATER BY AXEL] Add backtrace also in form, if any; - [NOT NEEDED] Strip or Obfuscate paths of backtrace that are outside of ROOT folder, or within GetHomeDirectory. Potentially also in GetBinaryDirectory within GetSetup function; - [ ] We would need the name of the build machine, for instance. I don't know how else to figure out whether it's one of our binaries, a package, or built by the user? Iirc that's not available right now?; - [ ] Maybe we fill out the OS name also?; - [ ] Update on web full list of commands, add .gh issue, do as in https://github.com/root-project/web/pull/776; - [ ] Recommend also on manual this command; - [ ] Maybe add similar instruction on main ROOT webpage as https://www.kicad.org/help/report-an-issue/; - [x] Discuss if more things need to be added to the setup; - [ ] Mention in the Forum; - [ ] Add aliases?; - [x] https://github.blog/changelog/2021-06-23-issues-forms-beta-for-public-repositories/; - [x] Somehow, the forum topic opened does not have the // after https. This PR fixes https://github.com/root-project/root/issues/8795. The way to submit a bug report without opening ROOT by hand would be:; ```; root -b -e '.gh bug' -q; root -b -e '.gh feature' -q; root -b -e '.gh improvement' -q; root -b -e '.forum bug' -q; ```. Not sure if it's worth to define an alias to these commands, in a similar fashion to `rootbrowse`, etc. For example:; ```; rootbug; rootfeature; rootimprovement; rootforum; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366:432,test,tested,432,https://root.cern,https://github.com/root-project/root/pull/10366,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; - Simplifies the importing of Pandas data frames to RDataFrame. ; - Added tutorial `df035_RDFFromPandas.py` to demonstrate this functionality. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; none,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14844:209,test,tested,209,https://root.cern,https://github.com/root-project/root/pull/14844,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; - `RooFit::HistFactory::ConfigParser`: function `ConfigParser::CreateMeasurementFromDriverNode()`fix null dereferences, improve logic, fix some other edge cases, optimise performance; - `TMVA::DataLoader`: calling `.front()` on an empty container is undefined, fix also null ptr dereference; - minor RooFit fixes for null ptr dereferences. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271:172,log,logic,172,https://root.cern,https://github.com/root-project/root/pull/9271,2,"['log', 'test']","['logic', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #10474",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14713:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/14713,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Add TChain::AddFilelist which will call AddFile for each member in filelist; It hase the same signature of AddFile and will return the sum of each AddFile; operation. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9698:232,test,tested,232,https://root.cern,https://github.com/root-project/root/pull/9698,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Add function `ROOT::VecOps::StableSort` and `ROOT::VecOps::StableArgsort` as stable variants of `ROOT::VecOps::Sort` and `ROOT::VecOps::Argsort`, providing users with a choice of sorting stability. The implementation is simple: using the current implementation of `Sort` and `Argsort` while replacing `std::sort` with `std::stable_sort`. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). <!--This PR fixes # -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9286:403,test,tested,403,https://root.cern,https://github.com/root-project/root/pull/9286,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Add option to change exponent offset for z-axis (within GAxis) . ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary) (technically the doc already even says ""xz"", though the ""z"" was not being used). This PR fixes # ; Often times when drawing 2D histograms (with the SURF option), the 10^n exponent on the z-axis will intersect the ""height"" lines drawn for the z-axis. To fix this, I've added the option to ""translate"" the exponent label (shifting x, y) for the z-axis, which was previously only possible to do with x and y-axes. . Here is the 10^n exponent intersecting with the height-lines:; ![before_offset](https://user-images.githubusercontent.com/32146461/225423544-92800949-b355-4382-83a6-1a2e2595d1d6.png). Here is the 10^n exponent shifted upwards in y very slightly to avoid this intersection:; ![after_offset](https://user-images.githubusercontent.com/32146461/225423842-b27bdd15-c62e-4a20-83b4-1202fa75c767.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12491:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/12491,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10853:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/10853,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Add rs401c_FeldmanCousins.py, IntervalExamples.py, rs_numbercountingutils.py. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary); - [x] Formatted with `black --line-length=120 <tutorial file>.py`. This PR is a partial fix for #8758",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10901:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/10901,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #10139,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14723:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/14723,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Add the `zero` parameter for `ROOT::VecOps::Sum()` and ROOT::VecOps::Mean()`` functions.; Used as `ROOT::VecOps::Sum(v, ROOT::Math::PtEtaPhiEVector())`; If applied, users will be able to get the sum of non-numeric `RVec`s easily. This is my first PR here. Please tell me if there is something I missed. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). <!-- This PR fixes # -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903:368,test,tested,368,https://root.cern,https://github.com/root-project/root/pull/8903,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Added pythonizations to RDataFrame.; Filter now works with Python Functions.; New attribute PyDefine added to RDF.; PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10846:247,test,tested,247,https://root.cern,https://github.com/root-project/root/pull/10846,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds PRBS generation code. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8199,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798:92,test,tested,92,https://root.cern,https://github.com/root-project/root/pull/8798,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary); - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13558:312,test,tested,312,https://root.cern,https://github.com/root-project/root/pull/13558,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12566:415,test,tested,415,https://root.cern,https://github.com/root-project/root/pull/12566,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds a new overload for Take that allows a default value to fill the returned RVec if ; the absolute value of `n` is larger than the size of the vector. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12422:220,test,tested,220,https://root.cern,https://github.com/root-project/root/pull/12422,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds forward history search support. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10137,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10208:102,test,tested,102,https://root.cern,https://github.com/root-project/root/pull/10208,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12089:264,test,tested,264,https://root.cern,https://github.com/root-project/root/pull/12089,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156:113,test,tested,113,https://root.cern,https://github.com/root-project/root/pull/9156,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds support for long64_t as histogram cell content. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8481,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546:118,test,tested,118,https://root.cern,https://github.com/root-project/root/pull/8546,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Adds two forward slashes for comment of output in example docs for Take. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13038:138,test,tested,138,https://root.cern,https://github.com/root-project/root/pull/13038,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; All (but one) of the data races described in https://github.com/root-project/root/issues/8365. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8572:160,test,tested,160,https://root.cern,https://github.com/root-project/root/pull/8572,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Allows associating a TThread run with a specific CPU on Linux. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8557:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/8557,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Allows macros to be compiled when building docu, as suggested by couet in https://github.com/root-project/root/pull/10004#pullrequestreview-916874733. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195:216,test,tested,216,https://root.cern,https://github.com/root-project/root/pull/10195,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Backport jitlink ppc64 backend. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This is based on https://github.com/hahnjo/root/tree/llvm16, however I didn't find the base repository in the list when I was creating this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850:97,test,tested,97,https://root.cern,https://github.com/root-project/root/pull/13850,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; CTRL shortcuts X11Grab were not working if NumLock was enabled. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8665,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8677:129,test,tested,129,https://root.cern,https://github.com/root-project/root/pull/8677,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6365,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14688:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/14688,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Clarifies documentation on R__LOCKGUARD macro. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/9294,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9305:112,test,tested,112,https://root.cern,https://github.com/root-project/root/pull/9305,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Clarifies how to use SetMaxDigits in a local TGaxis instead of changing all axes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8774,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8779:147,test,tested,147,https://root.cern,https://github.com/root-project/root/pull/8779,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Clarifies the need to delete TH1 pointer after DoProject3D if histogram was not existing. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10400,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10438:155,test,tested,155,https://root.cern,https://github.com/root-project/root/pull/10438,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11736:526,test,tested,526,https://root.cern,https://github.com/root-project/root/pull/11736,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Converts HybridStandardForm.C, HybridInstructional.C, TwoSidedFrequentistUpperLimitWithBands.C, TestNonCentral.C, and CreateExampleFile.C to Python. ## Checklist:. - [ x] tested changes locally. Contributes to https://github.com/root-project/root/issues/8758",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14743:140,Test,TestNonCentral,140,https://root.cern,https://github.com/root-project/root/pull/14743,2,"['Test', 'test']","['TestNonCentral', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; Correct the format and example code problems in the file `math/vecops/inc/ROOT/RVec.hxx`. The corrected example code problems include:; * Expected/unexpected semicolons; * Expected/unexpected declarations; * Code output (rerun to get the correct and relevent outputs). ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). <!--This PR fixes # -->,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9277:334,test,tested,334,https://root.cern,https://github.com/root-project/root/pull/9277,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Correcting the comment with the package name sql/sqlite. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9488:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/9488,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Currently this is the behaviour; ```; ~> root -b -q -l NotExistingFile.C; Warning in <TApplication::GetOptions>: macro pippo.C not found; root: unrecognized option 'pippo.C'; Try 'root --help' for more information.; ~> echo $?; 0; ```; the root executable simply warns about the file not existing but returns 0, as everything went well. This has several downsides, including not protecting us from our typos when adding tests to the suite (see original JIRA issue). ## Checklist:. - [v] tested changes locally; - [v] updated the docs (if necessary). This PR fixes [ROOT-9365](https://its.cern.ch/jira/browse/ROOT-9395)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16205:464,test,tests,464,https://root.cern,https://github.com/root-project/root/pull/16205,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:; Dear all. This pull request adds moving mean, moving median and mode to Root's TMath. I tried to update the documentation (https://root.cern/doc/v630/namespaceTMath.html) but I could not figure out where to find the files on Github. Please can someone guide me?. I will leave the PR in draft state. I will appreciate any feedback you can give me. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #14258; [LastTest.log.tar.gz](https://github.com/root-project/root/files/14910072/LastTest.log.tar.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15097:412,test,tested,412,https://root.cern,https://github.com/root-project/root/pull/15097,3,"['log', 'test']","['log', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; Detection of XrootD built from git commit. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #10604,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10605:108,test,tested,108,https://root.cern,https://github.com/root-project/root/pull/10605,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Doxygen warnings in docu. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9654:91,test,tested,91,https://root.cern,https://github.com/root-project/root/pull/9654,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Due to a copy-paste error, `RooDataSet::binnedClone` was overwriting the name of the clone if no title was provided. This PR fixes that. Since this is my first PR in ROOT, I have a couple of questions:; - since this was a small change I did not open an issue in the repo, should I do that regardless?; - do I need to write a test?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11507:369,test,test,369,https://root.cern,https://github.com/root-project/root/pull/11507,1,['test'],['test']
Testability,"# This Pull request:. ## Changes or fixes:; Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently.; 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity.; 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement.; 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15499:363,Test,TestStatistics,363,https://root.cern,https://github.com/root-project/root/pull/15499,4,"['Test', 'test']","['TestStatistics', 'test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; Enables viewing the HTML reference guide directly embedded within the QtCreator IDE, by pressing F1 on each function, in the same Fashion as the Help functionality of MATLAB. It also allows searching the Reference Guide without needing to open a web browser or while being offline. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8781",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9525:347,test,tested,347,https://root.cern,https://github.com/root-project/root/pull/9525,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fix a typo. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14078:77,test,tested,77,https://root.cern,https://github.com/root-project/root/pull/14078,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fix for TRatioPlot axes sync:; - Added TPad::RangeAxis() which only emits the RangeAxisChanged() signal; - Call this before PaintInit() in THistPainter::Paint(); - This correctly syncs the histogram axes before the upper histogram is drawn. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9263,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9293:306,test,tested,306,https://root.cern,https://github.com/root-project/root/pull/9293,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Fix hard error when checking if non-[common_range](https://en.cppreference.com/w/cpp/ranges/common_range) is printable. I.e., [std::ranges::enumerate_view](https://en.cppreference.com/w/cpp/ranges/enumerate_view).; Although root does not support C++20 currently, a range that returns different type for `begin()` and `end()` is still legal in other C++ versions. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14966",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14968:428,test,tested,428,https://root.cern,https://github.com/root-project/root/pull/14968,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fixes #14462. ## Checklist:. - [x] tested changes locally; - [n/a] updated the docs (if necessary). This PR fixes #14462,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14716:79,test,tested,79,https://root.cern,https://github.com/root-project/root/pull/14716,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fixes #14462. ## Checklist:. - [x] tested changes locally; - [n/a] updated the docs (if necessary). This PR fixes ; Removes additional whitespace between quotes and braces. @pcanal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14700:79,test,tested,79,https://root.cern,https://github.com/root-project/root/pull/14700,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Fixes an issue in the facet surface area calculation which was mixing vertex indexing at the facet level and at the shape level, resulting in spurious surface area warnings. `surfaceArea += 0.5 * Vertex_t::Cross(e1, e2).Mag()` works when `e1` and `e2` are chords within the same facet. That is only guaranteed when using the direction provided by `facet = fFacets[ifacet]` and `fVertices[facet[i + 1]]`, not by using `GetVertex(i+1)` directly. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16259:509,test,tested,509,https://root.cern,https://github.com/root-project/root/pull/16259,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fixes https://github.com/root-project/root/issues/8098. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9299:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/9299,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10770:215,test,tested,215,https://root.cern,https://github.com/root-project/root/pull/10770,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Fixes the incorrect parsing of the gcc version on Ubuntu 18 or 20. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8551,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8553:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/8553,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; GraphAsymmErrors was missing from the list of allowed operations for DistRDF; This PR fixes #13588. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13520:165,test,tested,165,https://root.cern,https://github.com/root-project/root/pull/13520,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; If you type "".typedef"" in the ROOT prompt, it prints with weird format. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10125:137,test,tested,137,https://root.cern,https://github.com/root-project/root/pull/10125,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13298:142,test,tested,142,https://root.cern,https://github.com/root-project/root/pull/13298,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Impossibility to build ROOT when another ROOT is already installed under /usr/ or other global directory for CLANG.; The modulemap file which is loaded on start of the interpreter was renamed from module.modulemap to ROOT.modulemap , this allows to avoid collisions with filenames. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #7128",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321:347,test,tested,347,https://root.cern,https://github.com/root-project/root/pull/14321,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Improves cast safety by using static_cast instead of old C-style cast. ## Checklist:. - [x] tested changes locally. This PR fixes # . ## Additional context; http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1992/WG21%201992/X3J16_92-0122%20WG21_N0199.pdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761:136,test,tested,136,https://root.cern,https://github.com/root-project/root/pull/9761,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14726:268,test,tested,268,https://root.cern,https://github.com/root-project/root/pull/14726,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9983:286,test,tested,286,https://root.cern,https://github.com/root-project/root/pull/9983,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; It improves ROOT's doc. ## Checklist:. - [ ] tested changes locally; - [v] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13647:89,test,tested,89,https://root.cern,https://github.com/root-project/root/pull/13647,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; It improves the warnings of ROOT when two identical autoload keys are found for two different libraries. . ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13431,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13478:172,test,tested,172,https://root.cern,https://github.com/root-project/root/pull/13478,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; It updates the ""logo"" to reference `2022` instead of `2021`, which is currently still shown in the latest release:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.26/00 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Mar 03 2022, 06:51:13 |; | From tags/v6-26-00@v6-26-00 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). I realized just now my shiny new ROOT 6.26.00 build does not yet mention 2022 — so this PR essentially repeats the yearly chore:; https://github.com/root-project/root/commit/aeb621a5bc4bf86796598e63d3ceb6e12c94d87c; :wink: . Hope this helps,; Oliver",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10129:60,log,logo,60,https://root.cern,https://github.com/root-project/root/pull/10129,2,"['log', 'test']","['logo', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; Let user stop internal timer, for performance reasons, when there is a priori knowledge that there is no remote check needed. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8269",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8561:191,test,tested,191,https://root.cern,https://github.com/root-project/root/pull/8561,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Made the static function `TH1::CheckConsistency` public and changed the return type to `Bool_t`.; The exceptions types it throws were also made public, so that user code could catch them. ## Checklist:. - [X] tested changes locally. ## Motivation; At the moment `TH1::CheckConsistency` is called internally by `TH1::Add`, and prints error messages in case of failure, but continues the execution.; Making it public allows user code to manually check the consistency to catch errors and stop the program.; This is especially useful for programs that make hundreds of `Add`s, out of which only a few fail, and the error messages may be lost in logs and go unnoticed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748:253,test,tested,253,https://root.cern,https://github.com/root-project/root/pull/13748,2,"['log', 'test']","['logs', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13571:141,test,tested,141,https://root.cern,https://github.com/root-project/root/pull/13571,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11580,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541:107,test,test,107,https://root.cern,https://github.com/root-project/root/pull/13541,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; Makes `Findcppzmq.cmake` check for the version of the zmq.hpp header that it may find installed on the system. If it is too old (below 4.8.0) then the module will consider cppzmq not found. In `SearchInstalledSoftware.cmake`, then, configuration will either fall back to the cppzmq built-in or it will fail if `fail-on-missing` is on. Thanks to @Axel-Naumann for the bug report. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9473:444,test,tested,444,https://root.cern,https://github.com/root-project/root/pull/9473,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14245:161,test,tested,161,https://root.cern,https://github.com/root-project/root/pull/14245,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Makes the list of timers thread-safe.; It attempts to fix some of the issues reported in https://github.com/root-project/root/issues/8365. This is a follow-up from: https://github.com/root-project/root/pull/8379#issuecomment-857765612. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8562:301,test,tested,301,https://root.cern,https://github.com/root-project/root/pull/8562,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Makes the short version of .help more visible (.?). ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10055:117,test,tested,117,https://root.cern,https://github.com/root-project/root/pull/10055,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Mention in docu option to set build dir via rootrc; Fixes https://github.com/root-project/root/issues/10147. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10172:174,test,tested,174,https://root.cern,https://github.com/root-project/root/pull/10172,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Nightly builds crashing immidiately. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12478:102,test,tested,102,https://root.cern,https://github.com/root-project/root/pull/12478,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; OpenMP thread-local instance of `MnPrint print()` was shadowing a previous definition. Rename to respect scope. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9327:177,test,tested,177,https://root.cern,https://github.com/root-project/root/pull/9327,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; OpenMP thread-local instance of `MnPrint print()` was shadowing a previous definition. Rename to respect scope. Backport #9327 to 6-24-00-patches. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9326:212,test,tested,212,https://root.cern,https://github.com/root-project/root/pull/9326,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Prevent infinite loop in TFile::ls. This bug was introduced in commit; 72a3242c91b7ca3e4cf31e7a6d5ddc9638270d27; Solution found by SilentAssassinMa. ## Checklist:. - [x] tested changes locally; - [ ] There is still one problem, if a TNamed that is called TIME/CLK inside a TFile, it doesnt print it when doing ls. This PR fixes https://github.com/root-project/root/issues/8650 and https://github.com/root-project/root/issues/13182",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13217:214,test,tested,214,https://root.cern,https://github.com/root-project/root/pull/13217,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Prevents 181 warnings in https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-v624/96/consoleFull when running Doxygen concerning the ::Streamer functions. And 4 or 5 warnings are solved also in Bindings/R documentation. It also exposes some parts of ClassDef macro that were not included in doxygen before. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/9596,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9629:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/9629,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings.; This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9946:298,test,tested,298,https://root.cern,https://github.com/root-project/root/pull/9946,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9955:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/9955,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; README fixes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes kernel installation description to use `jupyter kernelspec install` instead of `cp` because `cp -r` didn't work for me and it is appropriate for kernel to be installed using `jupyter kernelspec install` command.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16086:79,test,tested,79,https://root.cern,https://github.com/root-project/root/pull/16086,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Reimplement the TGraph::Sort function using std::sort to avoid a segmentation fault when used with a large number of entries. It's also faster, ex. for a `10000 points`:; ```; BEFORE CHANGES -> Sort execution time: 148100 microseconds. AFTER CHANGES -> Sort execution time: 7065 microseconds; ```; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13632",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13635:363,test,tested,363,https://root.cern,https://github.com/root-project/root/pull/13635,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14487,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14677:71,assert,assert,71,https://root.cern,https://github.com/root-project/root/pull/14677,2,"['assert', 'test']","['assert', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; Replaced while loops with the legacy iterators fwdIterator() with range based for loops. . ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #8777,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10947:156,test,tested,156,https://root.cern,https://github.com/root-project/root/pull/10947,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; See https://dev.mysql.com/doc/relnotes/mysql/8.3/en/news-8-3-0.html#mysqld-8-3-0-deprecation-removal. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14376,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14378:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/14378,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Set the default LikelihoodJob tasks to be component-wise splits rather than event-wise splits. ## Checklist:. - [x] tested changes locally; - [x] ~updated the docs~ (not necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16507:160,test,tested,160,https://root.cern,https://github.com/root-project/root/pull/16507,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Sets a unique name for each varied result; This PR fixes #13582. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13578:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/13578,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several documentation errors found by doxygen. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9650:112,test,tested,112,https://root.cern,https://github.com/root-project/root/pull/9650,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several documentation errors found by doxygen. Supersedes https://github.com/root-project/root/pull/9650. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9678:171,test,tested,171,https://root.cern,https://github.com/root-project/root/pull/9678,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; Several documentation errors/warnings in gui, hist and grafs. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9603:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/9603,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several doxygen warnings found by doxygen in the TMVA classes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9651:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/9651,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several doxygen warnings in core classes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9575:107,test,tested,107,https://root.cern,https://github.com/root-project/root/pull/9575,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several errors in the documentation of bindings. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9648:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/9648,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several warnings and inconsistencies found by doxygen. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9615:120,test,tested,120,https://root.cern,https://github.com/root-project/root/pull/9615,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several warnings found by doxygen in roofit. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9653:110,test,tested,110,https://root.cern,https://github.com/root-project/root/pull/9653,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Several warnings found by doxygen in roofit. Supersedes https://github.com/root-project/root/pull/9653. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9657:169,test,tested,169,https://root.cern,https://github.com/root-project/root/pull/9657,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Some doxygen warnings. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9573:88,test,tested,88,https://root.cern,https://github.com/root-project/root/pull/9573,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Some errors found when compiling the doxygen documentation. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9593:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/9593,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Speeds up building the documentation (the graphviz dot part). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10000:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/10000,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11113:677,test,tested,677,https://root.cern,https://github.com/root-project/root/pull/11113,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; The documentation of the VisualizeError command in RooAbsPdf::plotOn and RooAbsReal::plotOn. This command has two methods available which are explained in the code comments in roofit tutorial 610 but not in the class reference online. I copied a brief description from the tutorial.; No changes are made to the function of the code. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8738:398,test,tested,398,https://root.cern,https://github.com/root-project/root/pull/8738,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; The main feature is that this PR makes it possible (in the final commit 5227996a9941918404d0a36037daa2c91e29833a) to run minimizations with both LikelihoodGradientJob and LikelihoodJob activated at the same time. This adds likelihood parallelization at the event-level to the non-gradient phases of Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:1001,test,test,1001,https://root.cern,https://github.com/root-project/root/pull/10966,1,['test'],['test']
Testability,"# This Pull request:. ## Changes or fixes:; There was an image artifact with the zoombox in X11 (Ubuntu) since ROOT 5.34.19, only appearing if c->SetFillStyle(0) and GL was disabled, and on Ubuntu only, apparently. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/9763",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9774:236,test,tested,236,https://root.cern,https://github.com/root-project/root/pull/9774,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; These changes allow the user to generate a dictionary with rootcling and selecting classes with a selection XML file, the selection file format of genreflex, instead of a traditional LinkDef file. This PR is coupled with ROOT Test PR https://github.com/root-project/roottest/pull/1014 . ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/dpiparo/root/pull/new/issue_13543",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13664:270,Test,Test,270,https://root.cern,https://github.com/root-project/root/pull/13664,2,"['Test', 'test']","['Test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; These new tutorial translations are added:; * tutorials/roostats/FourBinInstructional.py; * tutorials/roostats/MultivariateGaussianTest.py; * tutorials/roostats/Zbi_Zgamma.py; * tutorials/roostats/rs601_HLFactoryexample.py; * tutorials/roostats/rs701_BayesianCalculator.py; * tutorials/roostats/rs_bernsteinCorrection.py. ## Checklist:. - [x] tested changes locally; - [x] Formatted with black --line-length=120 <tutorial file>.py. This PR is a partial fix for #8758,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10953:387,test,tested,387,https://root.cern,https://github.com/root-project/root/pull/10953,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; This PR mainly adds error handling to the `MultiProcess`-based fitting stack. Error signaling in RooFit happens through two mechanisms: `logEvalError` calls and `RooNaNPacker`-enhanced `nan` doubles. Both are now implemented and working. With this addition, we can now (finally!) run the most recent ATLAS Higgs combination fits again without issues. The actual error handling is implemented in the 5th commit of this PR. The first two commits are really unrelated, minor refactorings of existing code. I add them in this PR because I touched these while working on the error handling and just wanted to rebase to keep history clean and don't think they need a separate PR, since they are quite trivial changes. The same goes for the last commit; it's a refactoring that could have been done in a different PR, but I hope you will permit this shortcut for these three trivial commits ;). Finally, commit 3 and 4 add tests. I kept these commits separate mainly for reviewing and also for my testing convenience (I wanted to double check they indeed fail before applying commit 5). If you prefer, we can squash commits 3, 4 and 5 before we merge. ## Checklist:. - [x] tested changes locally; - [ ] ~updated the docs (if necessary)~ _There are no user-facing changes (except that more things now work), everything happens behind the scenes, so no documentation updates are necessary._. Thanks to @Zeff020 and @guitargeek for help in getting this done!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15797:181,log,logEvalError,181,https://root.cern,https://github.com/root-project/root/pull/15797,4,"['log', 'test']","['logEvalError', 'tested', 'testing', 'tests']"
Testability,"# This Pull request:. ## Changes or fixes:; This PR removes the usage of two external services, preserving the look of the documentation, de facto changing nothing for the user. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13652:199,test,tested,199,https://root.cern,https://github.com/root-project/root/pull/13652,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; This change allows developers to specify ""line break candidate characters"" and options to process them when defining the sub-classes through member `TVirtualPS::CRCandidates` and `TVirtualPS::CRCandidateTypes`. When a line break is needed, `PrintFast` goes through `fSizBuffer` number of characters, trying to match the candidate of index 0 in `TVirtualPS::CRCandidates` and fallback to the ones with larger index. Searching will get terminated once the index 0 candidate is found (as it did before this change). The default value is. ```c++; fCRCandidates = "" "";; fCRCandidateTypes = new ECRCandidateType[1]{kBeforeChar};; ```. which resembles the behavior of TVirtualPS prior to this change to keep backward compatibility. The value specified for the SVG file is; ```c++; fCRCandidates = "" <>"";; fCRCandidateTypes = new ECRCandidateType[3]{kDropChar, kBeforeChar, kAfterChar};; ```. The `kDropChar` option is implemented to be useful for breaking line at space characters where line breaks and spaces are interchangeable. Note that `fSizBuffer` is now used instead of `kMaxBuffer` in methods of `TVirtualPS`, as it enables the sub-classes to specify the buffer size. This is compatible to all the current sub-classes implemented in the source tree, but may potentially change the behavior of self-defined document-printing sub-classes by users should `fSizBuffer` be modified before the original `PrintFast` be executed. This patch also include miscellaneous work such as updating the SVG introduction inside the TSVG doc and adding comments to the code. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #9514",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518:1622,test,tested,1622,https://root.cern,https://github.com/root-project/root/pull/9518,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; This commit adds the Config class to provide a user-accessible place set the desired number of workers. The number of workers was previously settable from a static public member of JobManager, but since we do not expose MultiProcess internals to users, it was unreachable from the ROOT interpreter and scripts. Thanks to @Zeff020 for noticing this omission. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9409:423,test,tested,423,https://root.cern,https://github.com/root-project/root/pull/9409,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; This is a proof of concept to refactor the TGraph class to use C++ Standard Library smart pointers to user-provided arrays. The main benefits are less memory usage because the data is not copied, and faster constructing of TGraph objects. Having this as an option does change the behaviour of the TGraph class a little; but that trade-off may be worth it for memory constrained local machines or time/memory constrained HPC jobs with large data sets. At least a few more changes are necessary: 1) by default, TGraph constructors should still copy array data so that installed code is backwards-compatible, and 2) writing a TGraph to a ROOT file would need an updated dictionary. ## Checklist:. - [X ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610:745,test,tested,745,https://root.cern,https://github.com/root-project/root/pull/9610,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; This issue: #10039 . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10039,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656:86,test,tested,86,https://root.cern,https://github.com/root-project/root/pull/10656,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Tutorial added. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/7740,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14729:81,test,tested,81,https://root.cern,https://github.com/root-project/root/pull/14729,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Typo in `TClass *TClass::GetClass` docs in `TClass.cxx` file. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14872:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/14872,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; Updates the HistoToWorkspaceFactoryFast code to add an option to disable the per-region WS production. This might be relevant in cases where the WS creation takes a long time as the per-region WS might not be needed in many cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16118:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/16118,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change.; 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10832:86,Test,TestStatistics,86,https://root.cern,https://github.com/root-project/root/pull/10832,3,"['Test', 'test']","['TestStatistics', 'tested']"
Testability,"# This Pull request:. ## Changes or fixes:; When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15613:222,test,tested,222,https://root.cern,https://github.com/root-project/root/pull/15613,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; When there is an overflow, go to closest value, not a very small one. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9300:135,test,tested,135,https://root.cern,https://github.com/root-project/root/pull/9300,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; XCreateImage bitmap_pad argument was not being set properly. It caused problems with depths of e.g. 30, see https://github.com/root-project/root/issues/8086#issuecomment-850620085 by @juw. Now it matches the behaviour of:; https://github.com/root-project/root/blob/master/graf2d/x11/src/GX11Gui.cxx#L2612; https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/asvisual.c#L1549. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8086",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8681:471,test,tested,471,https://root.cern,https://github.com/root-project/root/pull/8681,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; ```; [ RUN ] RooTruthModel.IntegrateSubrange; [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]; /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure; Expected equality of these values:; integ->getVal(); Which is: -2.8822093e-17; 0.0; Which is: 0; [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms); ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14164:240,test,test,240,https://root.cern,https://github.com/root-project/root/pull/14164,3,['test'],"['test', 'testRooTruthModel', 'tested']"
Testability,# This Pull request:. ## Changes or fixes:; documents ROOT special commands that were missing. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10065,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10121:116,test,tested,116,https://root.cern,https://github.com/root-project/root/pull/10121,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; doxygen warnings from geom classes. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9576:101,test,tested,101,https://root.cern,https://github.com/root-project/root/pull/9576,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; gGlobalMutex memory leak. ## Checklist:. - [x] tested changes locally. This PR fixes https://github.com/root-project/root/issues/8297,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8585:91,test,tested,91,https://root.cern,https://github.com/root-project/root/pull/8585,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12844:115,test,tested,115,https://root.cern,https://github.com/root-project/root/pull/12844,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14214:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/14214,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; segmentation violation due to empty vector access. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10180,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10181:116,test,tested,116,https://root.cern,https://github.com/root-project/root/pull/10181,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; some doxygen warnings. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9655:88,test,tested,88,https://root.cern,https://github.com/root-project/root/pull/9655,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; some remaining Doxygen warnings across the packages. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9656:118,test,tested,118,https://root.cern,https://github.com/root-project/root/pull/9656,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; some unused variables warnings in MacOs cocoa. I not sure how to fix this one:; ```; Building CXX object graf2d/cocoa/CMakeFiles/GCocoa.dir/src/MenuLoader.mm.o; /Users/rdm/rootsrc/graf2d/cocoa/src/MenuLoader.mm:92:16: warning: variable 'menuItem' set but not used [-Wunused-but-set-variable]; NSMenuItem *menuItem = [aMenu addItemWithTitle : NSLocalizedString(@""Minimize"", nil); ```. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10572",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10574:449,test,tested,449,https://root.cern,https://github.com/root-project/root/pull/10574,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; specify that multiple ROOT files can be opened from CLI args. and point to manual for compilation flags. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10124:170,test,tested,170,https://root.cern,https://github.com/root-project/root/pull/10124,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; thread safety of DirName; as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588:191,test,tested,191,https://root.cern,https://github.com/root-project/root/pull/11588,1,['test'],['tested']
Testability,# This Pull request:. ## Changes or fixes:; use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12647:117,test,tested,117,https://root.cern,https://github.com/root-project/root/pull/12647,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; warns of overflow with an error message. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12028:106,test,tested,106,https://root.cern,https://github.com/root-project/root/pull/12028,1,['test'],['tested']
Testability,"# This Pull request:. ## Changes or fixes:; ~~~; .../hist/hist/test/test_tprofile2poly.cxx:61: Failure; The difference between cont1 and cont2 is 1.4551915228366852e-11, which exceeds delta, where; cont1 evaluates to 54886.064319363642,; cont2 evaluates to 54886.064319363628, and; delta evaluates to 9.999999960041972e-12.; .../hist/hist/test/test_tprofile2poly.cxx:61: Failure; The difference between cont1 and cont2 is 1.4551915228366852e-11, where; cont1 evaluates to 109868.61342004745,; cont2 evaluates to 109868.61342004743.; The abs_error parameter delta evaluates to 9.999999960041972e-12 which is smaller than the minimum distance between doubles for numbers of this magnitude which is 1.4551915228366852e-11, thus making this EXPECT_NEAR check equivalent to EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.; ~~~; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9601:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/9601,3,['test'],"['test', 'tested']"
Testability,# This Pull request:. ## Changes or fixes; Misspelled length. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13276,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13281:83,test,tested,83,https://root.cern,https://github.com/root-project/root/pull/13281,1,['test'],['tested']
Testability,"# This Pull request:. ### Rebase. A few relevant LLVM commits that were referenced for the rebase:. - https://github.com/llvm/llvm-project/commit/95dd17848383315050a5d64051bd695d0a653c51; - https://github.com/llvm/llvm-project/commit/8d67b9e2461d654c0a3657e511e2295006f23748; - https://github.com/llvm/llvm-project/commit/9478f661c26fbc22491218477917df5d8d73c51c; - https://github.com/llvm/llvm-project/commit/6a6994cc9bc0327aaf8b005c650ff5eb29d2bcce; - https://github.com/llvm/llvm-project/commit/8b1771bd9f304be39d4dcbdcccedb6d3bcd18200 . ### Notes; - Cling and Root commits for the rebase are kept separate for now (can squash similar commits together later).; - Also added a temporary commit https://github.com/root-project/llvm-project/commit/4066693bd33bc93bdee33415b7f5773bda1d1f49 in LLVM to prevent building of mlgo-utils, which will not compile when all the test folders are removed. We can either keep it or add an exception to this file in the Root GitHub workflow to not remove the test folders under mlgo-utils. #### TO DISCUSS/PROPERLY FIX; - [x] The commit 64f7cf6318ca9a4da766b02c45fc81aea7762f8e is memleaking; it is a temporary fix for now to prevent some failing tests, like `gtest-roofit-histfactory-test-testHistFactory`.; - Fixed with: https://github.com/root-project/root/pull/16314; - [x] This commit: https://github.com/root-project/root/pull/15696/commits/de5d1413e07170e396ac51d982c0844e4f548f4b is a temporarily fix reintroducing a memory leak. ; - Fixed with: https://github.com/root-project/root/pull/15696/commits/2c2d4dc2bf3ebe0f475b05a66a377c2467525d9d; - [x] This commit: d79963ecb74f957a332409ed91b106a0f53da10a fixes an issue with failing tests like `tutorial-hist-cumulative` when JITLink is turned on. This works for now, but will need to investigate further on why resource trackers were not destructed in the right order.; - Not a critical issue: Can also look into this later after the merge.; - [x] Discussion on a proper solution for the macOS modulemap iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696:868,test,test,868,https://root.cern,https://github.com/root-project/root/pull/15696,2,['test'],['test']
Testability,"# This Pull request:. * Histogram nodes now contain histogram name and number of entries (test included);; * Label nodes now use html, allowing for more custom fonts;; * Colors of different element types were changed to be easier to; distinguish;; * Empty RLoopManager is more clearly indicated;; * Actions which has run are more clearly indicated;; * Tests adapted accordingly. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #9556",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9722:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/9722,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,# This Pull request:. * Update XRootD builtin from [`v5.4.2`](https://github.com/xrootd/xrootd/releases/tag/v5.4.2) to [`v5.4.3`](https://github.com/xrootd/xrootd/releases/tag/v5.4.3); * Follow up to PR #10025 for v5.4.2. ## Changes or fixes:. * Update XRootD builtin from v5.4.2 to v5.4.3; - c.f. https://github.com/xrootd/xrootd/issues/1699 for full details. ## Checklist:. - [x] tested changes locally. - I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/71 for a source build with effectively this change) but PR #10025 builds and ; ```console; $ curl -sLO https://github.com/xrootd/xrootd/archive/v5.4.3.tar.gz; $ sha256sum v5.4.3.tar.gz ; 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c v5.4.3.tar.gz; ```. so as this PR is mirroring 10025 it should be fine. - [N/A] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725:382,test,tested,382,https://root.cern,https://github.com/root-project/root/pull/10725,1,['test'],['tested']
Testability,# This Pull request:. * Update XRootD builtin from v5.4.3 to v5.5.0; - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.0; * Follow up to https://github.com/root-project/root/pull/10725. ## Changes or fixes:. * Update XRootD builtin from v5.4.3 to v5.5.0; - c.f. https://github.com/xrootd/xrootd/issues/1751 for details. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/73 for a source build with effectively this change). - [N/A] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11328:349,test,tested,349,https://root.cern,https://github.com/root-project/root/pull/11328,1,['test'],['tested']
Testability,# This Pull request:. * Update XRootD builtin from v5.5.0 to v5.5.1; - c.f. https://github.com/xrootd/xrootd/releases/tag/v5.5.1; * Follow up to PR #11328; * Requires https://sft.its.cern.ch/jira/browse/SPI-2231. ## Changes or fixes:. * Update XRootD builtin from v5.5.0 to v5.5.1. ## Checklist:. - [x] tested changes locally. I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/75 for a source build with effectively this change). - [N/A] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11613:303,test,tested,303,https://root.cern,https://github.com/root-project/root/pull/11613,1,['test'],['tested']
Testability,"# This Pull request:. - Adds new Constructor interfaces to RooCmdArg; - Adds new printouts to RooCmdArg. ## Changes or fixes:. RooCmdArg is a bit of an old-style piece of code that doesn't really work well with python.; Also, when talking among statistics code developers, it's commonplace to have to ""exchange"" fit arguments between codes (""what arguments to you pass to make it converge?"").; For this purpose, it's very convenient to:; - be able to print the command arguments in a human-readable format, and; - directly use these printouts to copy&paste them into some other piece of code to make comparison studies. The changes in this PR make this possible with little effort. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16349:703,test,tested,703,https://root.cern,https://github.com/root-project/root/pull/16349,1,['test'],['tested']
Testability,# This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers; - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14733:172,test,tested,172,https://root.cern,https://github.com/root-project/root/pull/14733,1,['test'],['tested']
Testability,# This Pull request:. - Makes the state transition of a field during its lifetime explicit; - Adds state checks to some of the methods; - Removes `RFieldBase::Flush()`. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13507:175,test,tested,175,https://root.cern,https://github.com/root-project/root/pull/13507,1,['test'],['tested']
Testability,"# This Pull request:. - Replace all occurrences of TextInput with LLVM's LineEditor library in `CLING`. This moves the codebase closer to clang-repl and might help in future changes. This will help in removing this whole folder from `CLING` - https://github.com/root-project/cling/tree/master/lib/UserInterface/textinput, but this doesn't exist in the `ROOT` repository.; - Corresponding replacement should also be made in `ROOT` for complete removal of TextInput, working on it. Will not be as straightforward as this.; - LineEditor does not support setting history size manually (with `CLING_HISTSIZE`). For now added this functionality in LLVM; Can later upstream or deprecate this functionality (clang-repl does not have this feature, AFAIK). But ROOT might be relying on this feature - need to look into it. Diff LLVM will fail due to this.; - A couple of tests were adjusted to make the tests pass.; - I tried to keep the changes minimal, so we get a proper diff. It can be made more similar to `clang-repl` later. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16438:861,test,tests,861,https://root.cern,https://github.com/root-project/root/pull/16438,3,['test'],"['tested', 'tests']"
Testability,# This Pull request:. - Respect cluster boundaries when assigning entry ranges to slots; - Add RPageSource::SetEntryRange to avoid cluster read-ahead into other slots entry range. ## Changes or fixes:. Fixes RDF-IMT with RNTuple. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14050:251,test,tested,251,https://root.cern,https://github.com/root-project/root/pull/14050,1,['test'],['tested']
Testability,# This Pull request:. - TMVA Pythonizations; - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11069:139,test,tested,139,https://root.cern,https://github.com/root-project/root/pull/11069,1,['test'],['tested']
Testability,# This Pull request:. - Translated rf_408_RDataFrameToRooFit.C; - Changed signature of constructor to take RooAbsArg by reference.; - Changed ROOT.RooArgList in args to accept a simple Python list. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8705:241,test,tested,241,https://root.cern,https://github.com/root-project/root/pull/8705,1,['test'],['tested']
Testability,"# This Pull request:. - adds helper functions to RooGenericPdf and RooFormulaVar; - makes sure the HS3 JSON contains the names of the variables entering RooFormula-based PDF and function types also in cases where the functions have been constructed with the ""x[0]"" notation. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13225:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/13225,1,['test'],['tested']
Testability,"# This Pull request:. @pcanal pointed out a typo I meade,. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15862:80,test,tested,80,https://root.cern,https://github.com/root-project/root/pull/15862,1,['test'],['tested']
Testability,"# This Pull request:. A follow up to #13219 ; It improves the RField API that is used to create, destroy, and bind objects being read from disk or being written to disk. A follow-up PR will make several public RField interfaces non-public, among the reading and appending. ## Changes or fixes:. - Replace `RFieldValue` by `RFieldBase::RValue`. The new class can be owning or non-owning and takes care of destroying its wrapped object if it is owning.; - Make `RFieldBase::DestroyValue` protected and use raw pointers in its interface; - Reuse base class `DestroyValue` in derived classes; - Make `GenerateValue(void *)` overload protected and with a `void` return value; - Remove unused templated version of `GenerateValue` from field classes; - Rename `CaptureValue` to `BindValue` and make it non-virtual. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13264:829,test,tested,829,https://root.cern,https://github.com/root-project/root/pull/13264,1,['test'],['tested']
Testability,"# This Pull request:. Add a getter for the ""arraySize"" memeber function RooDataHist.; The weightArray getters are way more useful when actually being able to loop over the list. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16316:199,test,tested,199,https://root.cern,https://github.com/root-project/root/pull/16316,1,['test'],['tested']
Testability,"# This Pull request:. Added some instrospection methods to TestStatistics Likelihood classes and also added corresponding tests. In particular added GetName() and GetInfo(). GetName() follows the same interface as the other RooFit classes in order to stay consistent. GetInfo() returns an std::string which allows for the added flexibility of concatenating more information about the class. Also added getComponents() to RooSumL in order to retrieve the vector of components from the sum likelihood. Note I am not completely happy about the implementation of the naming, in particular with the fact that the name needs to be supplied to the constructor of the RooAbsL class. Another option would be to override the GetName() and GetInfo() functions in each of the child classes explicitly with the same implementation, in which case we could have a unique name_ variable in each of the child classes and no need for the modification to the constructors. Let me know if this is preferred. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043:59,Test,TestStatistics,59,https://root.cern,https://github.com/root-project/root/pull/10043,3,"['Test', 'test']","['TestStatistics', 'tested', 'tests']"
Testability,"# This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the; first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,; between entries and in the end of the Print() and AsString() methods.; To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between; columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9116",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9203:549,test,tests,549,https://root.cern,https://github.com/root-project/root/pull/9203,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12624:247,test,tested,247,https://root.cern,https://github.com/root-project/root/pull/12624,1,['test'],['tested']
Testability,# This Pull request:. Adds RNTuple support for `std::atomic<T>`. The inner type `T` has to be an I/O supported type. On-disk representation is identical between atomic `T` and plain `T` except for an extra marker field for the atomic wrapper. CMS MiniAOD use atomic types. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13897:294,test,tested,294,https://root.cern,https://github.com/root-project/root/pull/13897,1,['test'],['tested']
Testability,# This Pull request:. Adds a comment in a cmake file. ## Changes or fixes:. maybe improves notification probability. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15219:138,test,tested,138,https://root.cern,https://github.com/root-project/root/pull/15219,1,['test'],['tested']
Testability,# This Pull request:. Adds a documentation generator helper function to RooJSONFactoryWSTool and explains its usage in the class documentation. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9767:165,test,tested,165,https://root.cern,https://github.com/root-project/root/pull/9767,1,['test'],['tested']
Testability,"# This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python; import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])""; ````. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12911:408,test,tested,408,https://root.cern,https://github.com/root-project/root/pull/12911,1,['test'],['tested']
Testability,"# This Pull request:. Adds a feature in PyROOT to initialize objects in RooWorkspace using dictionaries. For example - ; ```python; import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""m1""] = dict({ ""max"": 5, ""min"": -5, ""value"": 0 }). ws[""m2""] = dict({ ""max"": 5, ""min"": -5, ""value"": 1 }). ws[""mean""] = dict({ ""type"":""sum"", ""summands"":[""m1"", ""m1""] }); ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12994:371,test,tested,371,https://root.cern,https://github.com/root-project/root/pull/12994,1,['test'],['tested']
Testability,# This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14175:391,test,tested,391,https://root.cern,https://github.com/root-project/root/pull/14175,1,['test'],['tested']
Testability,# This Pull request:. Adds a note that states that TTree:.GetEntry() and TTree::GetEvent() no longer have 0 as the default value for the first parameter. . ## Changes or fixes:. Just added a small note. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8535:224,test,tested,224,https://root.cern,https://github.com/root-project/root/pull/8535,1,['test'],['tested']
Testability,# This Pull request:. Adds a tutorial demonstrating the 7 ways to normalize a histogram. ## Changes or fixes:. Above. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8613:139,test,tested,139,https://root.cern,https://github.com/root-project/root/pull/8613,1,['test'],['tested']
Testability,"# This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed).; - Several safety improvements: make members `const` or private; - Add `RFieldBase::Compare()`; - Several minor improvements. This PR triggers several follow-up PRs, e.g.; - `RBulk` should be returned as weak pointers like entries.; - `RFieldBase::RValue` should use shared pointers, not raw pointers; - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs; - [ ] ping known users about the changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13604:1001,test,tested,1001,https://root.cern,https://github.com/root-project/root/pull/13604,1,['test'],['tested']
Testability,# This Pull request:. Adds a unit test for regular (non-virtual) inheritance. Forbids virtual inheritance (and tests for it). ## Changes or fixes:. Fixes #15048. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15051:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/15051,3,['test'],"['test', 'tested', 'tests']"
Testability,# This Pull request:. Adds a way to do buids from scratch by adding label 'clean-build' to a PR. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12364:118,test,tested,118,https://root.cern,https://github.com/root-project/root/pull/12364,1,['test'],['tested']
Testability,# This Pull request:. Adds annotations for compiler warnings and errors during the build. - Creates annotations in the workflow summary. [Example](https://web.archive.org/web/20230317122819/https://github.com/olemorud/root/actions/runs/4446441053); - Creates annotations in the `Files changed` section of pull requests. [Example](https://web.archive.org/web/20230317122218/https://github.com/olemorud/root/pull/9/files#diff-8d4418f3872066807d7fb0e2558bd6f5e9ed9bb028a0c82bf7cb0fcd63935b26); - Highlights warnings/errors in the build log:; ![image](https://user-images.githubusercontent.com/82065181/225905454-7b5ff1b6-047f-4ff2-8ae2-c897c07c62ee.png). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12386:533,log,log,533,https://root.cern,https://github.com/root-project/root/pull/12386,2,"['log', 'test']","['log', 'tested']"
Testability,# This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12188:39,log,log,39,https://root.cern,https://github.com/root-project/root/pull/12188,2,"['log', 'test']","['log', 'tested']"
Testability,# This Pull request:. Adds handling of ExternalConstraints to HS3. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12962:88,test,tested,88,https://root.cern,https://github.com/root-project/root/pull/12962,1,['test'],['tested']
Testability,# This Pull request:. Adds importers and exporters for RooHistPdf and RooRealSumFunc. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10210:107,test,tested,107,https://root.cern,https://github.com/root-project/root/pull/10210,1,['test'],['tested']
Testability,# This Pull request:. Adds more advanced options to parse CSV files:; ; - Left/right trimming; - Skipping of a given number of header/footer lines; - Comment character to skip lines / line remainders; - Impose column names. It brings the CSV datasource closer to the Pandas CSV parsing capabilities and should avoid in many cases the need for users to implement custom text file parsing code. ## Checklist:. - [X] tested changes locally; - [ ] add tutorial; - [x] add pythonization for `FromCSV` that uses named arguments for all the new options in `RCsvDS::ROptions`; - [ ] update release notes; - [ ] Update RCsvDS class documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15045:414,test,tested,414,https://root.cern,https://github.com/root-project/root/pull/15045,1,['test'],['tested']
Testability,# This Pull request:. Adds more functionality to the RooPolyFunc. ## Changes or fixes:. Add a new constructor and change an existing one slightly to avoid collisions.; Add getters for internal variables.; Fix bugs in printout. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11953:248,test,tested,248,https://root.cern,https://github.com/root-project/root/pull/11953,1,['test'],['tested']
Testability,# This Pull request:. Adds more options to generate asimov datasets by; - allowing to generate asimov datasets for RooMultiVarGaussian; - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents; - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12034:347,test,tested,347,https://root.cern,https://github.com/root-project/root/pull/12034,1,['test'],['tested']
Testability,"# This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods.; - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor.; - Adds tests to test the aforementioned new functionality; - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11549:127,test,teststatistics,127,https://root.cern,https://github.com/root-project/root/pull/11549,4,['test'],"['test', 'tested', 'tests', 'teststatistics']"
Testability,"# This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13382:387,test,tested,387,https://root.cern,https://github.com/root-project/root/pull/13382,1,['test'],['tested']
Testability,"# This Pull request:. Adds plugin support to cling. This patch enables loading clang/pass plugins with the flag: . `EXTRA_CLING_ARGS=""-fplugin=path/to/plugin.so -fpass-plugin=path/to/plugin.so""`. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15169:239,test,tested,239,https://root.cern,https://github.com/root-project/root/pull/15169,1,['test'],['tested']
Testability,# This Pull request:. Adds signpost intervals on macOS for module loading operations. This allows profiling expensive loaded modules when running under instruments. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146:186,test,tested,186,https://root.cern,https://github.com/root-project/root/pull/13146,1,['test'],['tested']
Testability,# This Pull request:. Adds small improvements to RooLagrangianMorphing and RooPolyFunc. ## Changes or fixes:. - RooLagrangianMorphing now allows observable names to be controlled more explicitly; - RooLagrangianMorphing now correctly handles normalization sets; - RooPolyFunc now provides a method to obtain the function as a string. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11759:355,test,tested,355,https://root.cern,https://github.com/root-project/root/pull/11759,1,['test'],['tested']
Testability,# This Pull request:. Adds support for non-uniform binnings to HS3. ## Changes or fixes:; ; Adds an if/then/else everywhere RooRealVars are read or written to handle non-uniform binnings as well. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13078:217,test,tested,217,https://root.cern,https://github.com/root-project/root/pull/13078,1,['test'],['tested']
Testability,# This Pull request:. Adds support for the `std::byte` type. Vectors of bytes can be used to represent BLOBs in RNTuple. The unit test shows an example where a `TMemFile` is stored in such a vector. A follow-up PR should provide a convenient interface to store BLOBs. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13806:130,test,test,130,https://root.cern,https://github.com/root-project/root/pull/13806,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14184:412,test,tested,412,https://root.cern,https://github.com/root-project/root/pull/14184,1,['test'],['tested']
Testability,# This Pull request:. Adjusts the XRootD RRawFile unit test to a new testfile location.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14053:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/14053,2,['test'],"['test', 'testfile']"
Testability,"# This Pull request:. Allow to populate ROOT using FetchContent. Only compilation has been tested and further work should be done to allow to used the fetched ROOT. snippet:; ```cmake; cmake_minimum_required(VERSION 3.16). project(test). set(FETCHCONTENT_QUIET false); include(FetchContent); FetchContent_Declare(MyRoot GIT_REPOSITORY https://github.com/flagarde/root.git GIT_TAG FetchContent); #FetchContent_MakeAvailable(MyRoot); # Check if population has already been performed; FetchContent_GetProperties(MyRoot); if(NOT myroot_POPULATED); # Fetch the content using previously declared details; FetchContent_Populate(MyRoot). # Set custom variables, policies, etc.; # ... # Bring the populated content into the build; add_subdirectory(${myroot_SOURCE_DIR} ${myroot_BINARY_DIR}); endif(); ```. ## Changes or fixes: . Mainly some CMake variables. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes :. It's a rework on #9516 . This PR should not change anything for users compiling ROOT as standalone project. However until now, it is not possible to directly include ROOT in an other project using FetchContent. This PR is focusing on the CMake configuration, generation steps and in the compilation process. No work has been done yet to let upstream project to find ROOT and to use it. I made a try on the last point but I think it is better to split the task in more steps. Usage of FetchContent is more and more used to create ""standalone"" project downloading and compiling all its dependencies. In the other PR tries some people and official maintainers have raised their interest on this feature.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15105:91,test,tested,91,https://root.cern,https://github.com/root-project/root/pull/15105,3,['test'],"['test', 'tested']"
Testability,# This Pull request:. Allows running named macro from shared library as it was the case with CINT and was documented in users guide.; See https://root-forum.cern.ch/t/cannot-run-shared-object-in-batch-mode/58213. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14772. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14813:313,test,tested,313,https://root.cern,https://github.com/root-project/root/pull/14813,1,['test'],['tested']
Testability,# This Pull request:. An option is added to selectively turn off const optimization of level 1 or level 2 for PDF components. ## Changes or fixes:. The attributes. - NoOptimizeLevel1; - NoOptimizeLevel2. can be added to disallow const-optimization of level 1 or 2 on any component. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9338:303,test,tested,303,https://root.cern,https://github.com/root-project/root/pull/9338,1,['test'],['tested']
Testability,"# This Pull request:. Backstory:. During my internship in January 2021, I had to convert between Sphericla and Cartesian Coordinates a lot and while this is possible in GenVector, it is not in TVector3. This should add that functionality. Furthermore I also added a Sign() function to mathcore as I couldnt find this elsewhere in ROOT. ## Changes or fixes:. See above. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8558:390,test,tested,390,https://root.cern,https://github.com/root-project/root/pull/8558,1,['test'],['tested']
Testability,# This Pull request:. Casted variable rc to void in roofit/multiprocess/src/Messenger.cxx to disable the warning.; It is used only in assert statement besides the cast. ## Changes or fixes: roofit/multiprocess/src/Messenger.cxx. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9368:134,assert,assert,134,https://root.cern,https://github.com/root-project/root/pull/9368,2,"['assert', 'test']","['assert', 'tested']"
Testability,"# This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c""; - RooPoisson should write out & read ""noRounding"" as ""integer"" ; - lognormal should be adjusted to adhere to the standard definition by transforming the variables ; - rename multinormal_dist to multivariate_normal_dist; - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13627:397,log,lognormal,397,https://root.cern,https://github.com/root-project/root/pull/13627,2,"['log', 'test']","['lognormal', 'tested']"
Testability,"# This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13317:291,test,tested,291,https://root.cern,https://github.com/root-project/root/pull/13317,1,['test'],['tested']
Testability,"# This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14669:337,test,tests,337,https://root.cern,https://github.com/root-project/root/pull/14669,3,['test'],"['test', 'tested', 'tests']"
Testability,"# This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9229:122,log,log,122,https://root.cern,https://github.com/root-project/root/pull/9229,2,['log'],['log']
Testability,"# This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13372:417,test,tested,417,https://root.cern,https://github.com/root-project/root/pull/13372,1,['test'],['tested']
Testability,# This Pull request:. Contains bugfixes from assorted use-cases of HS3 JSON conversion. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12399:109,test,tested,109,https://root.cern,https://github.com/root-project/root/pull/12399,1,['test'],['tested']
Testability,"# This Pull request:. Converts ROOT.modulemap from a single file to a set of files where ROOT.modulemap includes per-component modulemaps, this will allow to implement packaging. ## Changes or fixes:. CMakeLists.txt, cmake/modules/RootMacros.cmake. ## Checklist:. - [ X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16211:271,test,tested,271,https://root.cern,https://github.com/root-project/root/pull/16211,1,['test'],['tested']
Testability,# This Pull request:. Corrects entries ranges w/ nWorkers>nEntries when using TTreeProcessorMP. When processing trees with less entries than workers with TTreeProcessorMP some entries were processed multiple times because of a mistake in the algorithm calculating the event ranges. Thanks to @hageboeck for the help with the output management of the test 🙏 !. ## Checklist:. - [v] tested changes locally; - [v] updated the docs (if necessary). This PR fixes #15425,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16147:350,test,test,350,https://root.cern,https://github.com/root-project/root/pull/16147,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:. Dear All. This PR fixes #13878 by adding if statement which checks if stdev is zero and gives a fatal error (Fatal). Without it there would be division by zero. I chose the fatal error instead of ""Error"" and returning some value (e.g. zero) because in my opinion the program should exit in situations where the result would not make sense. For example skewness of a histogram consisting only of identical values would be undefined. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13878",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14506:497,test,tested,497,https://root.cern,https://github.com/root-project/root/pull/14506,1,['test'],['tested']
Testability,"# This Pull request:. Discovered that in 6.26 verbose print of lots of classes doesn't work. e.g. you can do:. ```; RooWorkspace ws;; ws.factory(""SUM::model(RooExponential::pdf1(obs1[0,5],tau1[-1]))""); ; ws.pdf(""model"")->Print(""v""); ```. and it will crash. ## Changes or fixes:; Fixes verbose printout of roofit object that uses RooListProxy (lots of classes do). . ## Checklist:. - [x ] tested changes locally; - [x ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11313:388,test,tested,388,https://root.cern,https://github.com/root-project/root/pull/11313,1,['test'],['tested']
Testability,"# This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692:278,test,tested,278,https://root.cern,https://github.com/root-project/root/pull/14692,1,['test'],['tested']
Testability,"# This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14618:151,Test,Test,151,https://root.cern,https://github.com/root-project/root/pull/14618,3,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"# This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178:804,test,tested,804,https://root.cern,https://github.com/root-project/root/pull/14178,1,['test'],['tested']
Testability,# This Pull request:. Extends @guitargeek s fixups with a few small additional bugfixes. . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12490:112,test,tested,112,https://root.cern,https://github.com/root-project/root/pull/12490,1,['test'],['tested']
Testability,"# This Pull request:. Extends the functionality of `TGraphErrors` class on the manner of the `TGraph` class such that one does not need to prepare arrays with data before creating the `TGraphErrors` class and simply add points one-by-one. ## Changes or fixes:. The pull request adds a new method to the class `TGraphErrors` called `AddPointError`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (added a doxygen line). ## Code to test functionality:; (run as a root script). ```c++; void apge() {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);. c1->SetGrid();. const Int_t n = 20;; TGraphErrors *gr = new TGraphErrors;; for (Int_t i=0;i<n;i++) {; Double_t x = i*0.1;; gr->AddPointError(i*0.1, 10*sin(x+0.2), 0.3/(x*x+3.), x*x/(x*x + 8.));; }; gr->SetTitle(""a simple graph"");; gr->GetXaxis()->SetTitle(""X title"");; gr->GetYaxis()->SetTitle(""Y title"");; gr->Draw(""AP"");. // TCanvas::Update() draws the frame, after which one can change it; c1->Update();; c1->GetFrame()->SetBorderSize(12);; c1->Modified();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232:369,test,tested,369,https://root.cern,https://github.com/root-project/root/pull/15232,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13293:187,test,tested,187,https://root.cern,https://github.com/root-project/root/pull/13293,1,['test'],['tested']
Testability,"# This Pull request:. Fix the following issue in SOFIE:. ```; n file included from /usr/include/c++/12.2.0/vector:70,; from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,; from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,; from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:; In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,; inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,; inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:; /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]; 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);; | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:; /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’; 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11635:1750,test,tests,1750,https://root.cern,https://github.com/root-project/root/pull/11635,5,"['Test', 'test']","['TestCustonModelsFromONNX', 'test', 'tested', 'tests']"
Testability,# This Pull request:. Fix two failing tests on s390x. ## Changes or fixes:. Apply the same fix for s390x as was already done for arm. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8826:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/8826,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. Fixes ROOTConfig when Vdt was built externally. ## Changes or fixes:. https://github.com/root-project/root/issues/14113#issuecomment-1925245792. ## Checklist:. - [x] tested changes locally. This PR fixes #14113,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14536:188,test,tested,188,https://root.cern,https://github.com/root-project/root/pull/14536,1,['test'],['tested']
Testability,"# This Pull request:. Fixes TMatrixT constructor behavior when it calculates a^(-1) b, which is now possible even when the number of columns of b does not equal the size of a. ## Changes or fixes:. Fixes [ROOT-10231](https://its.cern.ch/jira/browse/ROOT-10231). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14420:283,test,tested,283,https://root.cern,https://github.com/root-project/root/pull/14420,1,['test'],['tested']
Testability,# This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10829:233,test,tested,233,https://root.cern,https://github.com/root-project/root/pull/10829,1,['test'],['tested']
Testability,# This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13563:245,test,tested,245,https://root.cern,https://github.com/root-project/root/pull/13563,1,['test'],['tested']
Testability,# This Pull request:. Fixes a bug where snapshots were not imported from JSON. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10293:100,test,tested,100,https://root.cern,https://github.com/root-project/root/pull/10293,1,['test'],['tested']
Testability,"# This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13555:300,test,tested,300,https://root.cern,https://github.com/root-project/root/pull/13555,1,['test'],['tested']
Testability,"# This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:; ~~~; In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type; 40 | namespace SG { typedef uint32_t sgkey_t; }; | ^~~~~~~~; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?; 5 | #include <vector>; +++ |+#include <cstdint>; 6 |; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type; 43 | uint8_t m_nbits, m_nmantissa;; | ^~~~~~~; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type; 45 | uint8_t m_flags;; | ^~~~~~~; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type; 46 | SG::sgkey_t m_sgkey = 123;; | ^~~~~~~; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type; 47 | const uint8_t c_uint = 10;; | ^~~~~~~; .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?; gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1; gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'; gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; ~~~; ## Checklist:. - [x] tested changes locally; - [ ] u",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12065:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/12065,7,['test'],['test']
Testability,# This Pull request:. Fixes more bugs with the HS3 implementation. ## Changes or fixes:. Shape systematics are finally treated properly. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12518:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/12518,1,['test'],['tested']
Testability,# This Pull request:. Fixes some bugs in HS3.; Improves error reporting in createHistogram.; adjust distributions names in HS3 output. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12413:178,test,tested,178,https://root.cern,https://github.com/root-project/root/pull/12413,1,['test'],['tested']
Testability,# This Pull request:. Fixes some bugs to HS3 implementation; - round numbers for Barlow-Beeston reverse-engineering; - sort normalization factors; - harmonize names of shape systematics. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12504:208,test,tested,208,https://root.cern,https://github.com/root-project/root/pull/12504,1,['test'],['tested']
Testability,"# This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY""; ""S3_ACCKEY"" -> ""S3ACCKEY""; ""S3_TOKEN"" -> ""S3TOKEN""; etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c; const char* s3_seckey_opt = ""s3seckey="";; const char* s3_acckey_opt = ""s3acckey="";; const char* s3_region_opt = ""s3region="";; const char* s3_token_opt = ""s3token="";; const char* s3_alternate_opt = ""s3alternate="";; ```. For example, this works:. ```; const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" ; + ""S3ACCKEY="" + aws_access_key_id + "" ""; + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );; ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally; - [y] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13499:1018,test,tested,1018,https://root.cern,https://github.com/root-project/root/pull/13499,1,['test'],['tested']
Testability,"# This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects; - flag overloads correctly; - add a ""type"" field to dataset exports; - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12636:280,test,tested,280,https://root.cern,https://github.com/root-project/root/pull/12636,1,['test'],['tested']
Testability,"# This Pull request:. Fixes various small bugs, makes the implementation more robust and improves error reporting for JSON import of HS3 files. ## Changes or fixes:. - errors from the nlohmann_json importer are now correctly forwarded to the user, rather than giving an unspecific ""std_exception"".; - some missing keys or values no longer trigger segfaults, but instead lead to an actual error being emitted. this includes errors being emitted by ParamHistFuncs if the number of bins is incorrect.; - the version tag has been correctly updated to 0.2; - gaussians can now be imported with ""normal_dist"" as well, as described by the standard; - the implementation is a bit more lenient when missing some values (e.g. ignoring cases where the histfactory modifier name has been omitted and instead just numbers the systematics); - the list of variables in the workspace is now no longer just filled from the parameter_points, but also from the domains, allowing cases where no parameter points are given to be imported successfully. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14289:1052,test,tested,1052,https://root.cern,https://github.com/root-project/root/pull/14289,1,['test'],['tested']
Testability,"# This Pull request:. Follow-up on #11940; ~please merge that one before this one~ it has been merged, so this one can also be merged. ## Changes or fixes:. The auto-conversion to type `T` and implicit type `T` constructor in `KahanSum` make it hard to debug `KahanSum`, because it is easy to overlook implicit conversions in code, especially in lines where the type of the return value is `auto`. The second commit in this PR (the first commit is the same as that in #11940) removes them and where they were necessary replaces them with an explicit construction or explicit conversion to double via `Sum()`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11941:630,test,tested,630,https://root.cern,https://github.com/root-project/root/pull/11941,1,['test'],['tested']
Testability,"# This Pull request:. Hi @guitargeek, the x-tick label in [rf712](https://root.cern.ch/doc/master/rf712__lagrangianmorphfit_8C.html) tutorial is in a wrong inverted order and the tick labels can be made a bit bigger. This has been addressed in this PR.; ; The python versions of two recent tutorials [rf710](https://root.cern.ch/doc/master/rf710__roopoly_8py.html), [rf711](https://root.cern.ch/doc/master/rf711__lagrangianmorph_8py.html) are missing the relevant doxygen tags needed to display the images and this has been added.; ; ## Changes or fixes:; - [x] Correct order for xtick labels in `rf712`; - [x] Correct size for tick labels in `rf712`; - [x] add missing doxygen tags for `rf711` and `rf710`. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9723:729,test,tested,729,https://root.cern,https://github.com/root-project/root/pull/9723,1,['test'],['tested']
Testability,# This Pull request:. HistFactory doesn't currently allow to produce workspaces with weighted data.; This PR sets out to try and alleviate this shortcoming. ## Changes or fixes:. Add a configuration-option `storeDataError`. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10744:245,test,tested,245,https://root.cern,https://github.com/root-project/root/pull/10744,1,['test'],['tested']
Testability,"# This Pull request:. Implemented relativistic version of breit wigner (non-relativistic case already exists in TMath). Define BreitWignerRelativistic(Double_t x, Double_t median=0, Double_t gamma=1) in TMath.h and then calculate in TMath.cxx, a similar non relativistic function BreitWigner already exists in the same location which was used as a template. A tutorial BreitWigner.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case. The output plot from tutorials/math/BreitWigner.C which produces a plot using the BreitWignerRelativistic function which is added in this pull request is [here](https://cernbox.cern.ch/index.php/s/JreHs4sOPzLiU2T). This pull request has been discussed previously in this pull request: https://github.com/root-project/root/pull/9926#issuecomment-1155029284 and in this forum post: https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844/. Due to issues merging this a new pull request has been made from a fresh pull of master. Tagging @lmoneta from previous pull request. Thank you for your help,; Jack. ## Changes or fixes:. math/mathcore/inc/TMath.h; math/mathcore/src/TMath.cxx; math/mathcore/test/testTMath.cxx; tutorials/math/BreitWigner.C. ## Checklist:. - [ x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10760:1215,test,test,1215,https://root.cern,https://github.com/root-project/root/pull/10760,3,['test'],"['test', 'testTMath', 'tested']"
Testability,# This Pull request:. Implements a numerically stable algorithm for Invariant Masses computation in single precision for RVec. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [#9646](https://github.com/root-project/root/issues/9646),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15781:148,test,tested,148,https://root.cern,https://github.com/root-project/root/pull/15781,1,['test'],['tested']
Testability,# This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` ; now shows ; `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```; root [0] std::source_location::current(); (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14211,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14218:441,test,tested,441,https://root.cern,https://github.com/root-project/root/pull/14218,1,['test'],['tested']
Testability,"# This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12860:367,test,tested,367,https://root.cern,https://github.com/root-project/root/pull/12860,1,['test'],['tested']
Testability,# This Pull request:. Improves some of the error messages by adding explicit checks for binning consistency to the HS3 HistFactory implementation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13098:168,test,tested,168,https://root.cern,https://github.com/root-project/root/pull/13098,1,['test'],['tested']
Testability,"# This Pull request:. In scenarios where a HS3 JSON file without a ""misc"" field is read, there are some issues in trying to construct a main pdf that could be associated with the ModelConfig.; This PR adds some coping mechanisms to improvise something in case the extra info from the misc field is missing. ## Changes or fixes:. Adds code to RooJSONFactoryWSTool::importAnalysis that can either use a non-simultaneous pdf as the pdf of the ModelConfig in cases where there is only one pdf, or create an improvised simultaneous pdf ad-hoc in order to capture the distributions listed under likelihood of the analysis. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13229:638,test,tested,638,https://root.cern,https://github.com/root-project/root/pull/13229,1,['test'],['tested']
Testability,"# This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64.; ```; The following tests FAILED:; 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout); 	967 - tutorial-tmva-TMVAMulticlass (Timeout); ```; The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/10886,5,['test'],"['test', 'tested', 'tests']"
Testability,"# This Pull request:. Introduce GraphAsymmErrors member in ActionHelpers.hxx similar to Graph.; GraphAsymmErrors creates a TGraphAsymmErrors, hence 6 arguments need to; be passed to it.; Appropriate structures in InterfaceUtils.hxx and RInterface.hxx are added. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9760:283,test,tested,283,https://root.cern,https://github.com/root-project/root/pull/9760,1,['test'],['tested']
Testability,"# This Pull request:. Is a follow up to PR #9992 that includes additional bug fixes. ## Changes or fixes:. Updates XRootD from [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) to patch release [`v5.4.2`](https://github.com/xrootd/xrootd/releases/tag/v5.4.2). ## Checklist:. - [x] tested changes locally; - I didn't build ROOT from source (though c.f. https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/65 for a source build with effectively this change), but PR #9992 builds and ; ```console; $ curl -sLO https://github.com/xrootd/xrootd/archive/v5.4.2.tar.gz; $ sha256sum v5.4.2.tar.gz ; 84e8a9a2bcad116df479f94e985c287dd99fbac0613d4fbb61f4ccc0cef81fa3 v5.4.2.tar.gz; ```. so as this PR is mirroring 9992 it should be fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10025:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/10025,1,['test'],['tested']
Testability,"# This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12112:204,log,logic,204,https://root.cern,https://github.com/root-project/root/pull/12112,1,['log'],['logic']
Testability,# This Pull request:. Is a resubmit of #10999 with additional needed changes (as discussed in that original PR). ## Changes or fixes:. Fixes: #10990. ## Checklist:. - [x] tested changes locally. This PR fixes #10990,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11243:171,test,tested,171,https://root.cern,https://github.com/root-project/root/pull/11243,1,['test'],['tested']
Testability,"# This Pull request:. Latest updates for xRooFit API. Includes a bug fix for jupyter notebook plot display in 6.30 onwards. ## Changes or fixes:. Due to changes in the 6.30 jupyter notebook behaviour, this PR is required to fix the display of plots in these notebooks. . Also includes a new method for creating a hypoSpace for limit calculations, with explicit specification of the test statistic type. Some other minor improvements are included. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14292:382,test,test,382,https://root.cern,https://github.com/root-project/root/pull/14292,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. Loads factory expressions and export keys in RooFit automatically to avoid unnecessary imports. ## Changes:. It's not required to call `loadExportKeys` and `loadFactoryExpressions` every time to load default JSON I/O keys. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13152:266,test,tested,266,https://root.cern,https://github.com/root-project/root/pull/13152,1,['test'],['tested']
Testability,"# This Pull request:. Makes it possible to call `VecOps::DeltaPhi`, `VecOps::DeltaR`, `VecOps::DeltaR2`, `VecOps::InvariantMass` and `VecOps::InvariantMasses` with different floating point types. ## Changes or fixes:. Previously all arguments where deduced to be the same types which does not allow to call these with mixed floating point type arguments. Now each argument get's its own template type, making it possible to call them with mixed floating point types. The return type and any intermediate calculations will be done by the largest necessary floating point type, as determined via `std::common_type`. I tried to follow existing conventions, e.g. using `Common_t` as an additional defaulted template argument for a bit less typing in the implementations. This also requires at least c++14 as it uses the `common_type_t` helper type for a bit less typing. Some of the functions now are quite heavily templated, I am not entirely sure the full combinatorial explosion is necessary for all of them. I haven't added tests yet. There are some pre-existing where I could ""attach"" them. I could also just stick a bunch of `static_assert`s for the return types etc into the implementation directly if you prefer that. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #15077",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15101:1024,test,tests,1024,https://root.cern,https://github.com/root-project/root/pull/15101,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. Makes it possible to use PCRE2 as an alternative to PCRE. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11395,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13771:101,test,tested,101,https://root.cern,https://github.com/root-project/root/pull/13771,1,['test'],['tested']
Testability,# This Pull request:. Missing experimental add-on module ROOT.RDF.Experimental.Distributed (DistRDF) should not fail the loading of the rest of the ROOT.RDF namespace. Also addresses a mismatch in the minimum Python version check in the code vs. cmake. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes: https://bugzilla.redhat.com/show_bug.cgi?id=2173518,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12407:274,test,tested,274,https://root.cern,https://github.com/root-project/root/pull/12407,1,['test'],['tested']
Testability,"# This Pull request:. Modifies Minuit2 interface to pass initial error/covariance matrix or second derivatives (G2) vector. ## Changes or fixes:. This PR exploits existing code in `MnSeedGenerator` and introduces some improvements, namely:; 1. Check whether provided matrix has positive diagonal (G2 must be positive) and larger than working precision `Eps`; if it is not the case, numerical computation is carried out.; 2. Disable `NegativeG2LineSearch` whenever point 1 is satisfied. Furthermore, this PR provides an interface to pass the error/covariance matrix or second derivatives (G2) vector via `ROOT::Math::Minimizer`. The user can provide either the error/covariance matrix in compressed format (column-major upper triangular part), OR the g2 vector, see the code snippet below. The matrix or second derivatives must take into account only variable parameters, implying that all fixed parameters must be declared before providing initial values. ```; ROOT::Math::Minimizer* minimum = ROOT::Math::Factory::CreateMinimizer(minName, algoName);. minimum->SetVariable(0,""x"",0.,0.);; minimum->SetVariable(1,""y"",0.,0.);. int nrow = 2;; std::vector<double> cov(nrow*(nrow+1)/2);; std::vector<double> d2(nrow);. for(int i = 0; i < nrow; i++) {; d2[i] = 0.1*(i+1);; for(int j = i;j< nrow;j++); cov[i + j * (j + 1) / 2] = (i==j) ? 0.1*(i+1) : 0.;; }. minimum->SetCovariance(cov,nrow);; // OR; //minimum->SetCovarianceDiag(d2,nrow);; ```. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16437:1458,test,tested,1458,https://root.cern,https://github.com/root-project/root/pull/16437,1,['test'],['tested']
Testability,"# This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:; - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11144:323,test,tested,323,https://root.cern,https://github.com/root-project/root/pull/11144,1,['test'],['tested']
Testability,# This Pull request:. Moves from implicit to explicit constraint handling. ## Changes or fixes:. Adds an option to disable implicit constraint handling in favour of explicitly handling them via the ExternalConstraints field. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13483:246,test,tested,246,https://root.cern,https://github.com/root-project/root/pull/13483,1,['test'],['tested']
Testability,"# This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11716:123,test,test,123,https://root.cern,https://github.com/root-project/root/pull/11716,4,['test'],"['test', 'testLikelihoodGradientJob', 'tested']"
Testability,"# This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix.; 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11717:448,test,tests,448,https://root.cern,https://github.com/root-project/root/pull/11717,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods.; - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor.; - Adds tests to test the aforementioned new functionality; - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format.; - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577:146,test,teststatistics,146,https://root.cern,https://github.com/root-project/root/pull/11577,4,['test'],"['test', 'tested', 'tests', 'teststatistics']"
Testability,"# This Pull request:. Passing by const-reference can mean two constructions (once on the caller, once in the ctor using the TString copy ctor). Instead passing by value and using move semantics in the ctor can reduce this to one construction on the caller and one move in the ctor. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). fixes: #15434",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469:303,test,tested,303,https://root.cern,https://github.com/root-project/root/pull/15469,1,['test'],['tested']
Testability,"# This Pull request:. Previously, the Exec method of the FillTGraphHelper was ambiguous.; Currently, Exec properly handles container and non-container types.; Corresponding tests added.; Small adjustments of the variable names of Graph in RInterface.hxx. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9770:173,test,tests,173,https://root.cern,https://github.com/root-project/root/pull/9770,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:. Recent changes introduced some weird alignment of text in the comments. ## Changes or fixes:. This PR restores the alignment. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12408:169,test,tested,169,https://root.cern,https://github.com/root-project/root/pull/12408,1,['test'],['tested']
Testability,# This Pull request:. Refactors the code and moves the logic of creating variables in RooWorkspace to C++-backend. ## Changes:. Moves `make_json_for_variable` from `_rooworkspace.py` to `varJSONString` in `JSONIOUtils`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13150:55,log,logic,55,https://root.cern,https://github.com/root-project/root/pull/13150,2,"['log', 'test']","['logic', 'tested']"
Testability,# This Pull request:. Remove a test that always fails on macos. This is related to https://github.com/root-project/root/pull/13718/commits/5db2ace91a23ea495b9b6a6a87483fcc58ed9547 . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13765:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/13765,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. Remove static maps from SaveGraph.; Remove static method to keep unique node ids in SaveGraph. ## Changes or fixes: #9145. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9503:166,test,tested,166,https://root.cern,https://github.com/root-project/root/pull/9503,1,['test'],['tested']
Testability,# This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523:54,test,testing,54,https://root.cern,https://github.com/root-project/root/pull/13523,3,['test'],"['tested', 'testing', 'tests']"
Testability,# This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14219,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14221:185,test,tested,185,https://root.cern,https://github.com/root-project/root/pull/14221,1,['test'],['tested']
Testability,"# This Pull request:. Resolves #12297. Changes the matrix to do some jobs with different options, e.g. `DLLVM_BUILD_TYP=Debug` for one of the ubuntu22 builds. (can be changed). Also rewrites the matrix to explicitly type each job, instead of doing a N x M jobs. I believe this syntax is easier to configure and makes implementation cleaner, as opposed to using nested lists to provide matrix options. Example run (picture added in case it expires): https://github.com/olemorud/root/actions/runs/4284703493; ![image](https://user-images.githubusercontent.com/82065181/221802381-3394775e-2b1b-45e9-8e3c-63ce0d44bd18.png). ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12388:641,test,tested,641,https://root.cern,https://github.com/root-project/root/pull/12388,1,['test'],['tested']
Testability,# This Pull request:. Revert https://github.com/vgvassilev/clang/commit/1c6cc386f62f9a5a87cf268b4d35199721aec0f4. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10644:157,test,tested,157,https://root.cern,https://github.com/root-project/root/pull/10644,1,['test'],['tested']
Testability,# This Pull request:. Sets the executable bit on `build_root.py`. ## fixes:; Fixes `Permission denied` errors when running workflow; https://github.com/root-project/root/actions/runs/4057126157/jobs/6982483001#step:6:100. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12199:243,test,tested,243,https://root.cern,https://github.com/root-project/root/pull/12199,1,['test'],['tested']
Testability,"# This Pull request:. Simplified/fixed how VDT would be used. Did this by making `ROOTVecOps`, `RooBatchCompute` and `TMVA` link against `VDT::VDT` in all circumstances (as long as VDT is being used). Regardless of whether VDT is used as a ""builtin"" or as an ""external"". At the same time made `ROOTVecOps` and `RooBatchCompute` depend on `VDT::VDT` publicly, as they actually do. ## Changes or fixes:. - Made sure that an imported `VDT::VDT` library would be set up when `builtin_vdt` is being used.; - Simplified how `ROOTVecOps`, `RooBatchCompute` and `TMVA` would just (publicly) link against `VDT::VDT` if either `vdt` or `builtin_vdt` is `TRUE`. Instead of the spaghetti of options that it had before.; - Made sure that all of those targets would explicitly depend on the `VDT` target if `builtin_vdt` is set to `TRUE`.; - Made sure that VDT would be searched for when calling `find_package(ROOT)` in client code. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11797.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844:940,test,tested,940,https://root.cern,https://github.com/root-project/root/pull/11844,1,['test'],['tested']
Testability,"# This Pull request:. Some lists weren't being cleared when workspace is deleted, leaking lots of memory. (really only the embedded data list from all the RooHistFuncs). Would be nice if this change be added to 6.24 and ideally 6.22 too?. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8844:282,test,tested,282,https://root.cern,https://github.com/root-project/root/pull/8844,1,['test'],['tested']
Testability,"# This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14736:179,test,test,179,https://root.cern,https://github.com/root-project/root/pull/14736,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary): N/A. This PR fixes #9594,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9794:213,test,tested,213,https://root.cern,https://github.com/root-project/root/pull/9794,1,['test'],['tested']
Testability,"# This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be.; This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10842:422,test,tested,422,https://root.cern,https://github.com/root-project/root/pull/10842,1,['test'],['tested']
Testability,"# This Pull request:. The key IncludeCategories appeared twice in the file which caused tools other than clang-format (.e.g CLion) to fail to parse the file and format correctly. clang-format took the settings from the second occurrence (as indicated by running `clang-format --dump-config`), so the first occurrence of IncludeCategories was deleted. ## Changes or fixes:. Fixes CLion's parser for the `.clang-format` file. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14137:445,test,tested,445,https://root.cern,https://github.com/root-project/root/pull/14137,1,['test'],['tested']
Testability,# This Pull request:. The stressVector test fails on ix86 due to too strict check:; ~~~; DeltaR TLorentzVector 	 time = 0.2610929	(sec); DeltaR XYZTVector 	 time = 0.22973299	(sec); DeltaR PtEtaPhiEVector 	 time = 0.0016570091	(sec); -12823.3585955796	-12823.35859557827	-12823.35859557827; Test DeltaR failed !!; ~~~; ## Changes or fixes:. The new value for the scale parameter (50) was calculated from the above values:; ~~~; root [2] (-12823.3585955796 - (-12823.35859557827)) / -12823.3585955796 / std::numeric_limits<double>::epsilon() / 10; (double) 46.762663; ~~~; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12390:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/12390,3,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,# This Pull request:. The testRooAbsL test compares two doubles and fails due to rounding errors.; The failure happens on ppc64le and aarch64. ## Changes or fixes:. This PR changes EXPECT_EQ to EXPECT_DOUBLE_EQ in the affected test.; ~~~; [ RUN ] SimBinnedConstrainedTest.SubEventSections; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:293: Failure; Expected equality of these values:; whole.Sum(); Which is: -1263.796050661927; N_events_total_parts.Sum(); Which is: -1263.7960506619268; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:303: Failure; Expected equality of these values:; whole.Sum(); Which is: -1263.796050661927; thrice_N_events_total_parts.Sum(); Which is: -1263.7960506619268; [ FAILED ] SimBinnedConstrainedTest.SubEventSections (199 ms); ~~~. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389:26,test,testRooAbsL,26,https://root.cern,https://github.com/root-project/root/pull/12389,10,"['Test', 'test']","['TestStatistics', 'test', 'testRooAbsL', 'tested']"
Testability,"# This Pull request:. Then clad is disabled, some tests that use it are still run causing test failures. ## Changes or fixes:. This PR vetos thos tests.; (Also removed duplicates in minuit2 veto.). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12403:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/12403,4,['test'],"['test', 'tested', 'tests']"
Testability,# This Pull request:. This PR adds an initial working prototype for merging RNTuple objects. The usage is demonstrated in the provided test. Let's keep this in draft mode for now to allow further discussion. Tagging @jblomer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13858:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/13858,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. This PR adds documentation for the new RooFitHS3 library. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9734:101,test,tested,101,https://root.cern,https://github.com/root-project/root/pull/9734,1,['test'],['tested']
Testability,# This Pull request:. This PR contains a few hotfixes to the HS3 implementation. ## Changes or fixes:. - attempting to export a forbidden variable name now triggers an error message; - export-keys-based exporters now use RooAbsProxy instead of RooRealProxy to allow also non-function-type and non-list-type proxies to be exported successfully.; - added a unit test for import and export of RooBernstein to cover the import/export issues for export-keys-based exporters.; - invalid category names will now be fixed upon export such that they don't lead to invalid data names; - FlexibleInterpVars with unequal numbers of variables and high/low variations will now be cut-off on minimum length upon export.; - HistFactory ShapeSys and staterror will now export and import the parameter names instead of auto-generating them. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13813:360,test,test,360,https://root.cern,https://github.com/root-project/root/pull/13813,2,['test'],"['test', 'tested']"
Testability,# This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15606:137,test,tested,137,https://root.cern,https://github.com/root-project/root/pull/15606,1,['test'],['tested']
Testability,"# This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:; ~~~~; cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d; /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Subprocess aborted; gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1; gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'; gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; ~~~~. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11704:175,test,test,175,https://root.cern,https://github.com/root-project/root/pull/11704,7,"['Assert', 'test']","['Assertion', 'test', 'tested']"
Testability,# This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14735:140,test,tested,140,https://root.cern,https://github.com/root-project/root/pull/14735,1,['test'],['tested']
Testability,# This Pull request:. This PR is a simple backport that removes a warning on recent macos builds due to the presence of dead code. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13743:174,test,tested,174,https://root.cern,https://github.com/root-project/root/pull/13743,1,['test'],['tested']
Testability,"# This Pull request:. This PR is continuing #13457 by Ahmat and it is based on https://github.com/root-project/root/pull/12941 and [Dynamic-Op](https://github.com/root-project/root/compare/master...Neel-Shah-29:root-1:Dynamic-Op) both by Neel Shah. # Changes of Fixes. - Introduce intermediate tensors with parametric shapes (Dynamic tensors); - Implement the [Range operator](https://github.com/onnx/onnx/blob/main/docs/Operators.md#Range); - Add tests for the Range operator; - Add full support for Input tensors with parametric shapes (using the Dim structure) and propagate the shapes using Dim also in the intermediate ones.; - Start changing operators to support inputs/output tensors with Dim shapes. ; - support now Gemm, Relu, Concat, LayerNormalization; - Add support for input Dim shapes in GNN classes to support fully variable number of nodes and edges",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14413:448,test,tests,448,https://root.cern,https://github.com/root-project/root/pull/14413,1,['test'],['tests']
Testability,# This Pull request:. This PR refactors the iterator implementation for the JSON interface to avoid performance issues with reading workspaces from JSON. ## Changes or fixes:. Reading JSON files is much faster now. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9728:236,test,tested,236,https://root.cern,https://github.com/root-project/root/pull/9728,1,['test'],['tested']
Testability,# This Pull request:. This patch was proposed by @vgvassilev on mattermost. When building with a macOS SDK before 12.0 and running with 12.0+ the; validation of private modulemaps fails due to a change in layout. This; change disables the check when DisablePCHValidation is active. See these bug reports:; * https://root-forum.cern.ch/t/conda-root-and-macos-12-reprise/49135/5; * https://github.com/conda-forge/root-feedstock/issues/149; * https://github.com/conda-forge/root-feedstock/issues/167. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10555:541,test,tested,541,https://root.cern,https://github.com/root-project/root/pull/10555,1,['test'],['tested']
Testability,"# This Pull request:. This pull request allows to root as a sub-project using `FetchContent` . ## Changes or fixes:; It's mainly a change of cmake variable CMAKE_SOURCE_DIR to PROJECT_SOURCE_DIR etc.. ## Checklist:. - [X ] tested changes locally ; Was compiling both in ""standard"" and ""FetchContent ""; - [ X] updated the docs (if necessary) ; - (not needed I think ?). This PR fixes #8923",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8941:223,test,tested,223,https://root.cern,https://github.com/root-project/root/pull/8941,1,['test'],['tested']
Testability,"# This Pull request:. This pull request allows to root as a sub-project using `FetchContent`.; It a cleaner Pull request than (#8941). ## Changes or fixes:; It's mainly a change of cmake variable CMAKE_SOURCE_DIR to PROJECT_SOURCE_DIR etc.. ## Checklist:. - [X ] tested changes locally ; Was compiling both in ""standard"" and ""FetchContent ""; - [ X] updated the docs (if necessary) ; - (not needed I think ?). This PR fixes #8923",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9516:263,test,tested,263,https://root.cern,https://github.com/root-project/root/pull/9516,1,['test'],['tested']
Testability,# This Pull request:. This pull request fixes a segfault when calling `GetNumberOfBins()` on an empty TH2Poly by first checking whether `fBins` is null. To reproduce the original segfault:; ```c++; TH2Poly h; h.GetNumberOfBins();; ```. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16370:279,test,tested,279,https://root.cern,https://github.com/root-project/root/pull/16370,1,['test'],['tested']
Testability,"# This Pull request:. This pull request removes unused Python modules (sys, os, py) from PyROOT/cppyy tests. The modules were imported in certain files, but they were not actually referenced in the code. ## Changes or fixes:. Changes PyROOT/cppyy test files by removing unused Python modules. ## Checklist:; [CTestCostData.txt](https://github.com/root-project/root/files/13743203/CTestCostData.txt). - [X] tested changes locally; - [ ] updated the docs (if necessary); [LastTest.log.gz](https://github.com/root-project/root/files/13743200/LastTest.log.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14293:102,test,tests,102,https://root.cern,https://github.com/root-project/root/pull/14293,5,"['log', 'test']","['log', 'test', 'tested', 'tests']"
Testability,# This Pull request:. This tutorial demonstrates the use of factorials and infinite series on a cool example. ## Changes or fixes:. Added the tutorial file. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8593:178,test,tested,178,https://root.cern,https://github.com/root-project/root/pull/8593,1,['test'],['tested']
Testability,"# This Pull request:. Updates the binary format to release candidate 2. The changes are result of the RNTuple design workshop. The changes improve forward compatibility, scalability, and design limits. **Note**: I reverted the removal of the compression settings per column and cluster from the page list. We concluded to remove the settings based on the assumption that this information would only be useful for reporting, and for reporting it is acceptable to check the pages directly. However, meanwhile I realized another use case: scheduling decision based on the compression algorithm. We may decide to perform decompression on an accelerator based on the algorithm. In addition, the overhead after compression is low, [<1% of the size of footer + page list](https://docs.google.com/spreadsheets/d/17jGTCO90nzYr3Ktevq2DBn1DpEQLqzVGy3Uuy3oKtMA/edit?usp=sharing). ## Changes or fixes:. - Add a document version to the RNTuple binary format specification; - Add format version to RNTuple anchor; - Make all sizes in the anchor 64bit wide; - Remove individual versioning from envelopes; - Use 64bit xxhash3 for anchor and envelope checksums (replaces crc32); - Allow for 64bit wide envelopes and frames; - Clarify use of feature flag; - Add minimum entry and entry span to cluster group records; - Move cluster summaries into the page lists; - Enlarge switch column to 96bit. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779:1399,test,tested,1399,https://root.cern,https://github.com/root-project/root/pull/13779,1,['test'],['tested']
Testability,# This Pull request:. Use FILTER instead of REMOVE_ITEM since GLOB returns absolute paths. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12423:112,test,tested,112,https://root.cern,https://github.com/root-project/root/pull/12423,1,['test'],['tested']
Testability,# This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR is to address #9845,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9912:94,test,tested,94,https://root.cern,https://github.com/root-project/root/pull/9912,1,['test'],['tested']
Testability,"# This Pull request:. When ? is used in TChain::Add in both the filename for globbing and as a starter for a string, TChain::Add fails to find the file, because everything after the ? is interpreted as the query string. This commit changes the behaviour so that `?` characters before the _last_ (should it be the first or something else?) '.root' are wildcard characters. ## Changes or fixes:; This PR fixes #10239 . ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15231:438,test,tested,438,https://root.cern,https://github.com/root-project/root/pull/15231,1,['test'],['tested']
Testability,"# This Pull request:. When roofit is disabled, some roofit related files are still installed. ## Changes or fixes:. This PR makes the installation of those files conditional. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12402:196,test,tested,196,https://root.cern,https://github.com/root-project/root/pull/12402,1,['test'],['tested']
Testability,"# This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split.; > Support for splitting the other type of STL containers will be; > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551:475,test,tested,475,https://root.cern,https://github.com/root-project/root/pull/12551,1,['test'],['tested']
Testability,"# This Pull request:. With the (very useful) introduction of the RooBinWidthFunction, the bin width correction moved from the ""coefficient"" branch of the RooRealSumPdf to the ""function"" branch of the RooRealSumPdf in HistFactory.; This can cause some distress for users who meddle with histfactory models by hand, because bin correction can now appear at places that are different from what they were originally. This PR adds a flag to globally disable all bin width corrections of RooBinWidthFunction, allowing the user to switch an entire model from density-mode to eventcount-mode. ## Changes or fixes:. Added flag to globally enable or disable all bin width functions. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10213:694,test,tested,694,https://root.cern,https://github.com/root-project/root/pull/10213,1,['test'],['tested']
Testability,"# This Pull request:. [DF] Change the signature of RInterface::Describe. ## Changes or fixes:. A new structure `DFDescription` is introduced.; It has 2 member strings, corresponding to the brief and the full description.; It allows more interactive output of these strings. `RInterface::Describe` now returns a `DFDescription`.; As brief description is the output from `RInterface::DescribeDataset`.; As full description is the remaining code from `RInterface::Describe`.; Moreover, `RInterface::DescribeDataset` is now a private method. RDFDescription has the following methods:; * `AsString(bool)` -> returning brief/full description as a string; * `Print(bool)` -> printing the content of `AsString(bool)`; * overloaded `<<` -> returns ostream corresponding to `AsString(shortFormat=false)`; * printValue -> returns string corresponding to AsString(shortFomat=false); * `__repr__` pythonization -> assigning `__repr__` to `AsString(shortFormat=false)`. Tests and Tutorials were adapted correspondingly. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #8893",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9551:956,Test,Tests,956,https://root.cern,https://github.com/root-project/root/pull/9551,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"# This Pull request:. [Fix #6981] RDisplay::Print to show more elements from collections. ## Changes or fixes:. AddCollectionToRow() modified so that the first 10 elements of long collections; are to be printed, then followed by ""..."". Previously, only the first and last; elements of collections of size >=3 were printed. Print() logic is now simplified, since after ""..."" there is no guarantee; that there is going to be a next element. Current unit tests were adapted and a new one is added, to test showing; elements around the treshold, i.e. of <10, 10, 11, >11 elements. Regarding #6981 - to display the whole collection, please use AsString(). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6981",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9095:331,log,logic,331,https://root.cern,https://github.com/root-project/root/pull/9095,4,"['log', 'test']","['logic', 'test', 'tested', 'tests']"
Testability,# This Pull request:. [WIP] Looking at other `FIXME`s. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/14210,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16409:98,test,tested,98,https://root.cern,https://github.com/root-project/root/pull/16409,1,['test'],['tested']
Testability,"# This Pull request:. `ROOT::Internal::TreeUtils::ExpandGlob` now expands the globbing string recursively to support patterns with wildcards for subdirectories e.g., `path/to/tree/files/*/*/*.root`. Subdirectories are only expanded when it is explicitly included in the pattern. For example, `dir/*` will only add the files in the subdirectories of `dir`, but `dir/*/*` will add the files in the subsubdirectories of `dir`. This behavior resembles Python's glob.glob. Some other options for expanding a directory wildcard e.g., `dir/*` is to also add files in the subdirectories of `dir` (behavior of `ls`) or also all the files in all the subdirectories, subsubdirectories, subsubsubdirectories etc. (behavior of `find`). I believe this would be unwanted since it breaks backwards compatibility. This currently uses TSystemFile.IsDirectory() to check whether a path is a directory. A better solution might be to use C++17 `std::filesystem::is_directory` but this requires an additional compiler/linker option for some builds (see https://en.cppreference.com/w/cpp/filesystem under Notes); ; ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #13623",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13648:1113,test,tested,1113,https://root.cern,https://github.com/root-project/root/pull/13648,1,['test'],['tested']
Testability,"# This Pull request:. `TRatioPlot` defines three pads named `upper_pad`, `lower_pad` and `top_pad`. If single canvas contains two or more `TRatioPlot`s, the saved C macro declares same object variable names resulting in runtime error. This fix adds counter suffix to pads (like for histograms) resulting in unique pad names. ## Changes or fixes:. Modifications to `SavePrimitive` members of `TPad` and `TCanvas` to count instances and renumerate written object variable names. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . ### Example. Consider MWE; ```c++; {; TH1I * h1 = new TH1I(""h1"", ""h1"", 10, -5, 5);; TH1I * h2 = new TH1I(""h2"", ""h2"", 10, -5, 5);. h1->FillRandom(""gaus"", 1000);; h2->FillRandom(""gaus"", 1000);. TCanvas * can = new TCanvas(""c_pads_test"", ""c_pads_test"", 800, 400);. can->cd(0);; TPad * p1 = new TPad(""p1"", ""p1"", 0, 0.3, 0.5, 1.0);; p1->Draw();; p1->cd();; TRatioPlot ratio1(h1, h2);; ratio1.Draw();. can->cd(0);; TPad * p2 = new TPad(""p2"", ""p2"", 0.5, 0.3, 1.0, 1.0);; p2->Draw();; p2->cd();; TRatioPlot ratio2(h2, h1);; ratio2.Draw();. can->cd(0);; TPad * p3 = new TPad(""p3"", ""p3"", 0.0, 0.0, 1.0, 0.3);; p3->Draw();; p3->cd();; h1->Draw();; h2->Draw(""same"");. can->Draw();. can->SaveAs("".C"");; }; ```; Run the macro and then try to run resulting `c_pads_test.C`. The output will be:. ```; Processing c_pads_test.C...; In file included from input_line_10:1:; /home/rlalik/c_pads_test.C:229:10: error: redefinition of 'upper_pad'; TPad *upper_pad = new TPad(""upper_pad"", """",0.0035,0.3,0.9965,0.9975);; ^; /home/rlalik/c_pads_test.C:27:10: note: previous definition is here; TPad *upper_pad = new TPad(""upper_pad"", """",0.0035,0.3,0.9965,0.9975);; ^; /home/rlalik/c_pads_test.C:303:10: error: redefinition of 'lower_pad'; TPad *lower_pad = new TPad(""lower_pad"", """",0.0035,0.0025,0.9965,0.3);; ^; /home/rlalik/c_pads_test.C:103:10: note: previous definition is here; TPad *lower_pad = new TPad(""lower_pad"", """",0.0035,0.0025,0.9965,0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12349:498,test,tested,498,https://root.cern,https://github.com/root-project/root/pull/12349,1,['test'],['tested']
Testability,# This Pull request:. add some missing dependency for headers and libraries when building the executable sofiec as part of the tests of TMVA-sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799:127,test,tests,127,https://root.cern,https://github.com/root-project/root/pull/8799,1,['test'],['tests']
Testability,# This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12678:180,test,tested,180,https://root.cern,https://github.com/root-project/root/pull/12678,1,['test'],['tested']
Testability,# This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12579,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12580:242,test,tested,242,https://root.cern,https://github.com/root-project/root/pull/12580,1,['test'],['tested']
Testability,"# This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'; ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . ```; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'; __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());; ^~~; /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here; return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));; ^; /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor; std::unique_ptr<RFieldBase::RDeleter> fDeleter;; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor; unique_ptr(unique_ptr&& __u) _NOEXCEPT; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here; __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a); ^; ```. ```; % clang -v; Homebrew clang version 16.0.1; Target: x86_64-apple-darwin20.6.0; Thread model: posix; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14662:181,test,tested,181,https://root.cern,https://github.com/root-project/root/pull/14662,1,['test'],['tested']
Testability,# This Pull request:. fixes various small bugs in RooJSONFactoryWSTool. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/9372,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9480:93,test,tested,93,https://root.cern,https://github.com/root-project/root/pull/9480,1,['test'],['tested']
Testability,"# This Pull request:. importing workspaces from JSON now successfully fills the NPs and Globs lists in ModelConfigs. ## Changes or fixes:. The solution for now is a bit makeshift, as it relies on the const/non-const properties to be set correctly at the time of creation.; However, it's better than not doing anything, as this now allows the ```ModelConfig::createNLL``` to do its job correctly on imported workspaces. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13051:440,test,tested,440,https://root.cern,https://github.com/root-project/root/pull/13051,1,['test'],['tested']
Testability,"# This Pull request:. improves the handling of combined Pdfs and Datasets in HS3. ## Changes or fixes:. removes the assumption of exactly one simPdf/combData/ModelConfig being present, instead allowing to mix&match multiple possible modelConfigs, combData and simPdfs. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12741:290,test,tested,290,https://root.cern,https://github.com/root-project/root/pull/12741,1,['test'],['tested']
Testability,# This Pull request:. update the CMAKE_INSTALL_RPATH on macOS . ## Changes or fixes:. fixes #15924 . ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15924,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15925:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15925,1,['test'],['tested']
Testability,# This Pull request:; ## Changes or fixes:. Fix typo that was introduced somehow in this commit https://github.com/root-project/root/commit/2b2d5b0eeabf16e066afc74977bcdf2d0555ca59#diff-0c661946530c21785a5dc0df61c398cfacd526ab455b2acd7b9dc761e7b99bdfR275. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10568:277,test,tested,277,https://root.cern,https://github.com/root-project/root/pull/10568,1,['test'],['tested']
Testability,"# This Pull request:; ## Changes or fixes:; DO NOT MERGE!! This PR tests the graphic test suite and includes installation of chrome in ROOT CI. ## Checklist:. - [x] Make old svg, pdf, json, tests run on all platforms except windows; - [x] Install headless chrome browser in ROOT CI (Done for linux); - [x] Enable new svg tests in roottest (Enabled for linux); - [x] updated the references files for new svg (if necessary); - [ ] Deal with hanging web chrome browser (only problem on linux, works for 18 test, maybe try to increase number of tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16322:67,test,tests,67,https://root.cern,https://github.com/root-project/root/pull/16322,6,['test'],"['test', 'tests']"
Testability,"# This Pull request:; ## Changes or fixes:; I realized that the offsets used by TGraphPainter to not paint error bars inside the markers were missing values for the new marker styles (35 - 49) and did not treat markers with linewidths > 1 properly. Furthermore, some existing values were not correct, like for example the x-size of the full diamon marker was 1, but it should be 0.6. This PR fixes these problems. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9015:435,test,tested,435,https://root.cern,https://github.com/root-project/root/pull/9015,1,['test'],['tested']
Testability,# This Pull request:; * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct; * Adds the necessary machinery to serialize that field to the StreamerInfo; * Bumps the RNTuple class version from 4 to 5. ## TODO; * Update documentation; * Actually use the new field to do header chaining when size exceeds maxKeySize ; * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo); - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15504:364,test,test,364,https://root.cern,https://github.com/root-project/root/pull/15504,4,['test'],"['test', 'tested']"
Testability,# This Pull request:; - (https://github.com/root-project/root/issues/12186) Adds test summaries to builds. Writes comments on pull-requests: [example](https://github.com/olemorud/root/pull/9); - Adds the `--rm` flag to containers as a temporary fix for the disk space problem (puppet fix coming soon). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12314:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/12314,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:; - Allow users to specify the floating point precision of the GDML attributes and elements; - Fix position units: take the chosen default length units rather than default argument ; from member function which was ""cm""; - Eject material property refs as first child elements as required from the GDML schema; - Add the atomic number N to the `<atom>` attributes.; - Ensure proper NCN names for surfaces (No '/' and '#' characters) for surfaces; - Eject **const properties** as matrices in GDML with one element rather than constants.; - Make physical volume names unique as required by the GDML schema.; This is also mandatory to properly define surfaces.; - Exclude the ""dummy"" material from being written to the GDML file.; The dummy material is internally used by TGeo, but not understood by Geant4.; Requires the new option `TGDMLWrite::SetIgnoreDummyMaterial(true)` to be set by the user.; - Reading the produced GDML files back with Geant4 was tested. Backwards compatibility should be preserved 100 %. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11868:970,test,tested,970,https://root.cern,https://github.com/root-project/root/pull/11868,2,['test'],['tested']
Testability,"# This Pull request:; - Allows users to set/access the floating point precision when writing GDML.; Setter/Getter was already present, but was moved to public visibility. ## Changes or fixes:; More flexibility writing GDML files. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11890:251,test,tested,251,https://root.cern,https://github.com/root-project/root/pull/11890,1,['test'],['tested']
Testability,"# This Pull request:; - Eject material property refs as first child elements as required from the GDML schema; - Add the atomic number N to the `<atom>` attributes.; - Eject **const properties** as matrices in GDML with one element rather than constants.; - Consequently, when reading a 1x1 matrix, it will be declared as `const property` to the TGeoManager. ## Changes or fixes:; Creation of GDML files understood by Geant4. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11888:447,test,tested,447,https://root.cern,https://github.com/root-project/root/pull/11888,1,['test'],['tested']
Testability,"# This Pull request:; - Ensure proper NCN names for surfaces (No '/' and '#' characters) for surfaces; - Make GDML refs to physical volumes unique. Unique physical volume names are mandatory for GDML to properly address surfaces, where local uniqueness is insufficient.; - Change the references of surfaces to physical volumes accordingly. ## Changes or fixes:; Creation of proper GDML files understood by Geant4. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11889:435,test,tested,435,https://root.cern,https://github.com/root-project/root/pull/11889,1,['test'],['tested']
Testability,# This Pull request:; - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:; - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267:188,test,testing,188,https://root.cern,https://github.com/root-project/root/pull/14267,2,['test'],"['tested', 'testing']"
Testability,# This Pull request:; - Pythonization of RooGlobalFunc Functions; - Implementing matplotlib Color/style conventions ; - Pythonization of Tutorial files. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8536:174,test,tested,174,https://root.cern,https://github.com/root-project/root/pull/8536,1,['test'],['tested']
Testability,"# This Pull request:; - Remove default argument for creating GDML positions. The default arguments always define lengths in ""cm"",; which is wrong for Geant4 units (mm). Instead the digested units string fDefault_lunit is used, which ; has the correct value depending on the chosen system of units. ## Changes or fixes:; Creating correct GDML files understood by Geant4. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11887:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/11887,1,['test'],['tested']
Testability,# This Pull request:; - Removes some dead or redundant code from RMiniFile.cxx (see commit comment for more details); - adds a utility to FileRaii to preserve the file after running. Useful to quickly debug a test file locally without having to recompile ntuple_test.hxx or doing some weird tricks. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15670:209,test,test,209,https://root.cern,https://github.com/root-project/root/pull/15670,2,['test'],"['test', 'tested']"
Testability,# This Pull request:; - Returns the newly added node from call to TGeoVolume::AddNode; - Allows an option to avoid voxelation. ## Changes or fixes:. Profiling geometry building in CMSSW turned up two issues; 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2. ; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. . This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10576:624,test,tested,624,https://root.cern,https://github.com/root-project/root/pull/10576,1,['test'],['tested']
Testability,# This Pull request:; - Returns the newly added node from call to TGeoVolume::AddNode; - Allows an option to avoid voxelation. back port of #10576. ## Changes or fixes:; Profiling geometry building in CMSSW turned up two issues. 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2.; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10642:642,test,tested,642,https://root.cern,https://github.com/root-project/root/pull/10642,1,['test'],['tested']
Testability,# This Pull request:; - Translation of RooFit tutorial files based on this issue https://github.com/root-project/root/issues/8523. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8584:174,test,tested,174,https://root.cern,https://github.com/root-project/root/pull/8584,1,['test'],['tested']
Testability,"# This Pull request:; - makes it so that RNTupleMerger reads the outFile's compression settings and changes the destination RNTuple's compression accordingly. Effectively, this allows users to select the out RNTuple compression with the `-f[0-9]` flag of `hadd`.; - fixes a couple of bugs in the compression changing code; - adds some tests for it; - related PR in [roottest](https://github.com/root-project/roottest/pull/1143). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16013:335,test,tests,335,https://root.cern,https://github.com/root-project/root/pull/16013,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:; ... fixes grammar mistakes and typos in the documentation.; ## Changes or fixes:; The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:; No code has been changed, so tests are probably not needed.; - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9129:245,test,tests,245,https://root.cern,https://github.com/root-project/root/pull/9129,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:; A draft PR to test the change in: https://github.com/root-project/roottest/pull/1194; ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16535:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/16535,2,['test'],"['test', 'tested']"
Testability,# This Pull request:; Add a draft implementation of zero-copy merge of RNTuples.; @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11155:136,test,tested,136,https://root.cern,https://github.com/root-project/root/pull/11155,1,['test'],['tested']
Testability,# This Pull request:; Add support for experimental distributed RDataframe when the RDataframe is constructed from an RDatasetSpec object. See https://root-forum.cern.ch/t/using-rdataframe-with-dask-and-rdatasetspec/58230. ## Changes or fixes:; - Add a class to [HeadNode.py](bindings/experimental/distrdf/python/DistRDF/HeadNode.py) to handle the case where the RDataframe with distributed backend is constructed from an RDatasetSpec object; - Use the above class when constructing the appropriate RDataframe instance. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (N/A). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14802:540,test,tested,540,https://root.cern,https://github.com/root-project/root/pull/14802,1,['test'],['tested']
Testability,# This Pull request:; Added RNTupleTTreeChecker and RNTupleTTreeCheckerCLI to ROOT. ## Changes or fixes:; - Added RNTupleTTreeChecker class for comparing TTree and RNTuple structures.; - Added RNTupleTTreeCheckerCLI for command-line interface to interact with RNTupleTTreeChecker.; - Included necessary header and source files. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ## Details:. tree/ntupleutil/; - RNTupleTTreeChecker.cxx: Implementation of the RNTupleTTreeChecker class.; - RNTupleTTreeCheckerCLI.cxx: Implementation of the command line interface.; - inc/ROOT/RNTupleTTreeChecker.hxx: Header file for the RNTupleTTreeChecker class.; - inc/ROOT/RNTupleTTreeCheckerCLI.hxx: Header file for the RNTupleTTreeChecker CLI class.; - modified CMakeLists to include above files. main/; - src/rntuplevsttree.cxx: Main entry point for CLI.; - Modified CMakeLists to include rntuplevsttree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15904:349,test,tested,349,https://root.cern,https://github.com/root-project/root/pull/15904,1,['test'],['tested']
Testability,# This Pull request:; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:; -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits; -Usage of logarithmic PDFs for derivatives may have some numerical benefits; -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. ; -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # ; resolves https://its.cern.ch/jira/browse/ROOT-10827; resolves https://its.cern.ch/jira/browse/ROOT-10866; related #11660 ; note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14751:414,log,logarithmic,414,https://root.cern,https://github.com/root-project/root/pull/14751,2,"['log', 'test']","['logarithmic', 'tested']"
Testability,# This Pull request:; Added description field to the output of `RNTupleDescriptor::PrintInfo` by passing `ENTupleInfo::kStorageDetails`. ; Here is an example output in which `Vx` is description is set to `velocity in x direction`. `Vy` description is not set. The result is as follows:; ```; ............................................................; Vx[#0] -- Int32 {id:0}; Description: velocity in x direction ; # Elements: 3354; # Pages: 1; Avg elements / page: 3354; Avg page size: 5773 B; Size on storage: 5773 B; Compression: 2.32; ............................................................; Vy [#0] -- Int32 {id:1}; # Elements: 3354; # Pages: 1; Avg elements / page: 3354; Avg page size: 3132 B; Size on storage: 3132 B; Compression: 4.28; ............................................................; ```; ## Changes or fixes:; Changes `RNTupleDescriptor::PrintInfo`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR closes #8377,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9313:902,test,tested,902,https://root.cern,https://github.com/root-project/root/pull/9313,1,['test'],['tested']
Testability,# This Pull request:; Added support for operators and models with multiple outputs. This PR is for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272). ## Checklist:. - [x ] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8881:278,test,tested,278,https://root.cern,https://github.com/root-project/root/pull/8881,1,['test'],['tested']
Testability,# This Pull request:; Adding documentation for the RDatasetSpec class. ; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14101,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14191:94,test,tested,94,https://root.cern,https://github.com/root-project/root/pull/14191,1,['test'],['tested']
Testability,# This Pull request:; Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15574:87,test,tested,87,https://root.cern,https://github.com/root-project/root/pull/15574,1,['test'],['tested']
Testability,# This Pull request:; Addition of Unique Pointer for TFile::Open -> Creation of Interface and implementation for the same. ## Changes or fixes:; Enables utilization of Unique Pointer for TFile::Open. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017:221,test,tested,221,https://root.cern,https://github.com/root-project/root/pull/14017,1,['test'],['tested']
Testability,"# This Pull request:; Adds GDML support for `scaledSolid` tag; ## Changes or fixes:; Given that Geant4 supports the `scaledSolid` tag, all TGeo scaled solids are exported using this tag now. Below is a snapshot of the solids produced after importing the Geant4 persistency example `examples/extended/persistency/gdml/G01/scaledSolids.gdml` <img src=""https://github.com/root-project/root/assets/18400453/dd95e08f-a3b7-47c1-8e86-844a66aae167"" width=""600"">. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13194",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13241:476,test,tested,476,https://root.cern,https://github.com/root-project/root/pull/13241,1,['test'],['tested']
Testability,"# This Pull request:; Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:; It runs, it re-reruns, and it gets out of IPython without crashing memory.; The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore.; Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much.; - [ yes] updated the docs (if necessary). This PR fixes # ; It doesn't fix anything but adds alternatives approach to use `pyroot` with ; the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15564:463,test,tested,463,https://root.cern,https://github.com/root-project/root/pull/15564,1,['test'],['tested']
Testability,"# This Pull request:; Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:; It runs, it re-reruns, and it gets out of IPython without crashing memory.; The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore.; Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally; - [ yes] updated the docs (if necessary); - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with; the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15573:459,test,tested,459,https://root.cern,https://github.com/root-project/root/pull/15573,1,['test'],['tested']
Testability,# This Pull request:; Adds a GitHub Actions workflow that runs clang-format on pull requests. Could be extended with jobs to also run the clang-tidy checks that Travis currently runs. ## Changes or fixes:; - Adds a GH Actions workflow that runs on pull requests; - Modifies one line of the format_script.sh so that both Travis and GH Actions can run it.; - Modifies the .travis.yml to pass in the base ref SHA hash to the format_script.sh. ## Checklist:. - [x] tested changes locally (see https://github.com/roofit-dev/root/pull/23); - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8530:461,test,tested,461,https://root.cern,https://github.com/root-project/root/pull/8530,1,['test'],['tested']
Testability,# This Pull request:; Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally; - [yes] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15567:95,test,tested,95,https://root.cern,https://github.com/root-project/root/pull/15567,1,['test'],['tested']
Testability,"# This Pull request:; Adds a new flag to CompileMacro, ""h"". ## Changes or fixes:; This new functionality allows not to rebuild the macro even if the file is newer than the library based on a hash built for the macro and its name. This helps distributed execution, providing a clean way to augment python analyses with accelerated functions in C++ and compiled when the worker cannot be setup but just individual tasks. ## Checklist:. - [v] tested changes locally; - [v] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14067:440,test,tested,440,https://root.cern,https://github.com/root-project/root/pull/14067,1,['test'],['tested']
Testability,# This Pull request:; Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt); ## Changes or fixes:; none. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13323,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13354:219,test,tested,219,https://root.cern,https://github.com/root-project/root/pull/13354,1,['test'],['tested']
Testability,# This Pull request:; Adds a translation of the legacy spectrum tutorials into Python. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary); - [ ] fork up-to-date,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16389:108,test,tested,108,https://root.cern,https://github.com/root-project/root/pull/16389,1,['test'],['tested']
Testability,# This Pull request:; Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11094:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/11094,3,['test'],"['test', 'tested', 'testing']"
Testability,# This Pull request:; Adds all graphs tutorials into Python Language. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] Fork is up to date with master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16081:95,test,tested,95,https://root.cern,https://github.com/root-project/root/pull/16081,1,['test'],['tested']
Testability,"# This Pull request:; Adds an optional safety parameter to : `TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety)`; ## Changes or fixes:; Backward-compatible interface change, allowing the user to inspect if a given distance is safe (not touching the volume surfaces neighbouring a point). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698);; === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 35.433700; ```. ![root_arb8](https://github.com/root-project/root/assets/18400453/133e7f2e-a20b-4c89-b4c7-5587ba50df84). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698, """", 31.067 /*user-defined*/); === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 31.067000; ```; ![surface](https://github.com/root-project/root/assets/18400453/425f7b02-24e2-486c-b8a4-0da323d7dd1a). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary) Updated the class reference. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14851:932,test,tested,932,https://root.cern,https://github.com/root-project/root/pull/14851,1,['test'],['tested']
Testability,"# This Pull request:; Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users).; Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15559:300,test,tested,300,https://root.cern,https://github.com/root-project/root/pull/15559,1,['test'],['tested']
Testability,"# This Pull request:; Adds experimental support for histogramming on GPU with CUDA. ; `[skip-ci]`. ## Changes or fixes:; - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU; - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:; - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572:329,test,tested,329,https://root.cern,https://github.com/root-project/root/pull/12572,1,['test'],['tested']
Testability,"# This Pull request:; Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:; Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally; - [ x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14698:532,test,tested,532,https://root.cern,https://github.com/root-project/root/pull/14698,1,['test'],['tested']
Testability,# This Pull request:; Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12945:31,Log,Log,31,https://root.cern,https://github.com/root-project/root/pull/12945,3,"['Log', 'test']","['Log', 'tested', 'tests']"
Testability,# This Pull request:; Adds the Max ONNX Operator and the corresponding unit tests to validate the code. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11198:76,test,tests,76,https://root.cern,https://github.com/root-project/root/pull/11198,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:; Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15576:86,test,tested,86,https://root.cern,https://github.com/root-project/root/pull/15576,1,['test'],['tested']
Testability,"# This Pull request:; Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:; - Integrates the source code into ROOT (under `tree/readspeed`); - Adds the `rootreadspeed` executable, runnable once ROOT has been installed; - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes - N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11102:91,test,testing,91,https://root.cern,https://github.com/root-project/root/pull/11102,3,['test'],"['test', 'tested', 'testing']"
Testability,"# This Pull request:; Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances.; This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4.; Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards ; compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14617:393,test,tested,393,https://root.cern,https://github.com/root-project/root/pull/14617,1,['test'],['tested']
Testability,"# This Pull request:; Adds to the `root/tutorials/*.C` macros their respective python scripts.; Enjoy this ""pyroothonic"" syntax style. . - [yes] tested changes locally; - [yes] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16620:145,test,tested,145,https://root.cern,https://github.com/root-project/root/pull/16620,1,['test'],['tested']
Testability,# This Pull request:; Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally; - [yes ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15566:96,test,tested,96,https://root.cern,https://github.com/root-project/root/pull/15566,1,['test'],['tested']
Testability,"# This Pull request:; Adds xroot based implementation of `RRawFile` class, the RRawFileNetXNG.; As the xroot TFile implementation uses the `NetXNG` naming convention for consistency I have adopted the same convention to the `RRawFile` implementation (please let me know if this should be changed).; This is heavily inspired by the `RRawFileDavix` class (@jblomer : thanks a lot for your help). ## Changes or fixes:; Adds the capability to do remote reads with `root`/`roots` to NTuple. ## Checklist:. - [x] tested changes locally, by running the `tutorials/v7/ntuple/ntpl004_dimuon.C` with the `kNTupleFileName` changed to a `root://` URL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012:507,test,tested,507,https://root.cern,https://github.com/root-project/root/pull/9012,1,['test'],['tested']
Testability,"# This Pull request:; Advertises the change of default geometry units affecting several ROOT versions, and how to address this. . ## Changes or fixes:; User information. ## Checklist:. - [] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #9383",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9393:190,test,tested,190,https://root.cern,https://github.com/root-project/root/pull/9393,1,['test'],['tested']
Testability,# This Pull request:; Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13371:96,test,tested,96,https://root.cern,https://github.com/root-project/root/pull/13371,1,['test'],['tested']
Testability,"# This Pull request:; Avoid removing elements of `RooArgSet` in `RooBarlowBeestonLL` while looping over them. This was broken since ROOT v6.18, after `RooAbsCollection` was moved to `std::vector` . This (re)enables the analytical treatment of statistical uncertainties in bins with the Barlow-Beeston-Lite procedure. ## Changes or fixes:; As described above. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10921:380,test,tested,380,https://root.cern,https://github.com/root-project/root/pull/10921,1,['test'],['tested']
Testability,# This Pull request:; Broadcast the bias of a Conv or ConvTranspose operator when the input image is batched and there's no Session class. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11382:145,test,tested,145,https://root.cern,https://github.com/root-project/root/pull/11382,1,['test'],['tested']
Testability,# This Pull request:; Checks if there are any breaking changes when upgraded to LLVM18.1.8. Conda can only use LLVM18.1.8 as a base. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16762:176,test,tested,176,https://root.cern,https://github.com/root-project/root/pull/16762,1,['test'],['tested']
Testability,# This Pull request:; Cherry-pick from #8822 for v6-20-00; ## Changes or fixes:; fixes execStatusBitsCheck segfault for centos. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . fixes execStatusBitsCheck segfault for centos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8865:149,test,tested,149,https://root.cern,https://github.com/root-project/root/pull/8865,1,['test'],['tested']
Testability,# This Pull request:; Cherry-pick from #8822 for v6-22-00; ## Changes or fixes:; fixes execStatusBitsCheck segfault for centos. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; fixes execStatusBitsCheck segfault for centos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8864:149,test,tested,149,https://root.cern,https://github.com/root-project/root/pull/8864,1,['test'],['tested']
Testability,# This Pull request:; Cherry-pick from #8822 for v6-24-00. ## Changes or fixes:; fixes execStatusBitsCheck segfault for centos . ## Checklist:. - [x ] tested changes locally; - [x ] updated the docs (if necessary). This PR fixes # . fixes execStatusBitsCheck segfault for centos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8861:151,test,tested,151,https://root.cern,https://github.com/root-project/root/pull/8861,1,['test'],['tested']
Testability,"# This Pull request:; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. ## Changes or fixes:; - Implement the new three colors scheme in TColor.cxx et RTypes.h; - Add 3 missing colors (kBrown, kGrape and kAsh); - Automaticallically set the name of a new color to its hexadecimal value; - Implement two new tutorials illustrating these new color schemes; - Update the doc; - Improve the dark and bright colors management. Modify the documentation accordingly. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348:941,test,tested,941,https://root.cern,https://github.com/root-project/root/pull/16348,1,['test'],['tested']
Testability,"# This Pull request:; Continue Adrian's work: This draft PR for testing the doxygen generation GitHub action with our self-hosted runners.; Uses our existing Makefile setup. Initial PR #16046. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the Doxygen documentation. It also uploads it to GitHub as an artifact. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [x] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions support defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16724:64,test,testing,64,https://root.cern,https://github.com/root-project/root/pull/16724,3,"['Test', 'test']","['Test', 'testing', 'tests']"
Testability,"# This Pull request:; Continue Jollys work: This draft PR for testing the doxygen generation github action with our self-hosted runners.; Uses our existing Makefile setup. Initial PR #15337. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the doxygen documentation. It also uploads it to GitHub as an artifact. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [x] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions supports defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16046:62,test,testing,62,https://root.cern,https://github.com/root-project/root/pull/16046,3,"['Test', 'test']","['Test', 'testing', 'tests']"
Testability,# This Pull request:; Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:; Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12035,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12088:374,test,tested,374,https://root.cern,https://github.com/root-project/root/pull/12088,1,['test'],['tested']
Testability,# This Pull request:; Demoted the exception level from Warning to Info when changing the default system of units for TGeo; ## Changes or fixes:; CMSSW fails due to a necessary recent change of the default units not being the Geant4 ones. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/cms-sw/cmsdist/issues/7274,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8967:259,test,tested,259,https://root.cern,https://github.com/root-project/root/pull/8967,1,['test'],['tested']
Testability,"# This Pull request:; Deprecates flawed method TGeoBBox::AreOverlapping; ## Changes or fixes:; The function fails to detect some box overlaps, and it is not used inside ROOT.; Added deprecation macro after the function definition. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [ROOT-8712](https://its.cern.ch/jira/browse/ROOT-8712)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14954:252,test,tested,252,https://root.cern,https://github.com/root-project/root/pull/14954,1,['test'],['tested']
Testability,# This Pull request:; Development of the BatchNormalization operator for the Google Summer of Code 2021 project [Inference Code Generation for Batch Normalization](https://hepsoftwarefoundation.org/gsoc/2021/proposal_TMVAOperatorBatchnorm.html). ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8882:268,test,tested,268,https://root.cern,https://github.com/root-project/root/pull/8882,1,['test'],['tested']
Testability,# This Pull request:; Development of the Instance Normalization operator for the Google Summer of Code 2021 project [Inference Code Generation for Batch Normalization](https://hepsoftwarefoundation.org/gsoc/2021/proposal_TMVAOperatorBatchnorm.html).; Depends on #8882. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8885:291,test,tested,291,https://root.cern,https://github.com/root-project/root/pull/8885,1,['test'],['tested']
Testability,# This Pull request:; Development of the convolution operator for the ROOT/TMVA SOFIE (System for Optimized Fast Inference code Emit). ## Checklist:; - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8800:157,test,tested,157,https://root.cern,https://github.com/root-project/root/pull/8800,1,['test'],['tested']
Testability,"# This Pull request:; Disallows linking with mold, which doesn't work. Even when building is possible by changing some CMake, the build seems to be broken. See https://github.com/root-project/root/issues/15473. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15689:232,test,tested,232,https://root.cern,https://github.com/root-project/root/pull/15689,1,['test'],['tested']
Testability,# This Pull request:; Documents preference for std::regex rather than TRegexp. ## Changes or fixes:; Documentation. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #14585,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14721:137,test,tested,137,https://root.cern,https://github.com/root-project/root/pull/14721,1,['test'],['tested']
Testability,# This Pull request:; Draft PR for testing the doxygen generation github action with our self-hosted runners ; **This PR generates doxygen via CMake with the changes from #15160 which need to be merged before this PR!!**. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15314:35,test,testing,35,https://root.cern,https://github.com/root-project/root/pull/15314,2,['test'],"['tested', 'testing']"
Testability,# This Pull request:; Eliminates duplicate linked libraries to avoid warnings on mac. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13705:129,test,tested,129,https://root.cern,https://github.com/root-project/root/pull/13705,1,['test'],['tested']
Testability,"# This Pull request:; Enables Barlow-Beeston in multidimensional fits. This patch was extensively tested and used by P. Hamilton et al. in LHCb. ## Changes or fixes:; Loop over all entries, not just the x-axis of a histogram. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10993:98,test,tested,98,https://root.cern,https://github.com/root-project/root/pull/10993,2,['test'],['tested']
Testability,# This Pull request:; Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:; Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15639:271,test,tested,271,https://root.cern,https://github.com/root-project/root/pull/15639,1,['test'],['tested']
Testability,# This Pull request:; Fix for a trivial documentation typo. ## Changes or fixes:; This fixes a typo in the documentation of `TFitResultPtr` class. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9494:168,test,tested,168,https://root.cern,https://github.com/root-project/root/pull/9494,1,['test'],['tested']
Testability,"# This Pull request:; Fix to TGeoMaterial::AddElement to allow to add elements/materials/mixtures with weight zero; ## Changes or fixes:; Allow to add elements/materials/mixtures with weight zero. ; If weight is negative issue Fatal .; If weight is smaller than numeric_limits<Double_t>::epsilon(), ignore additional elements. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8892",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8900:348,test,tested,348,https://root.cern,https://github.com/root-project/root/pull/8900,1,['test'],['tested']
Testability,# This Pull request:; Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(); The call leads to wrong results if the TGeoManager was created before the ; TGeo units change. This was not detected by the test previously prepared; for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:; Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct; unit normalizations. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11060,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11115:227,test,test,227,https://root.cern,https://github.com/root-project/root/pull/11115,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:; Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file.; ## Changes or fixes:; GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9744",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9908:589,test,tested,589,https://root.cern,https://github.com/root-project/root/pull/9908,1,['test'],['tested']
Testability,# This Pull request:; Fixes GL drawing for scaled shapes which are normally optimized to use GL primitives and appeared un-scaled (e.g. tubes). ## Changes or fixes:; Added new flag `TBuffer3D::fScaled` set by `TGeoScaledShape::GetBuffer3D` and used by the viewer to decide if `TBuffer3D::kRaw` section needs to be filled/used. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13253:348,test,tested,348,https://root.cern,https://github.com/root-project/root/pull/13253,1,['test'],['tested']
Testability,# This Pull request:; Fixes `fatal error: 'google/protobuf/port_def.inc' file not found` error when building the tests of TMVA-Sofie with protobuf v3.17.3. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8852:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/8852,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:; Fixes a bug that occurred spuriously when exiting the ROOT interpreter after using `MultiProcess::Job` objects, which left child processes alive. ## Changes or fixes:; As explained in the comments added in the code in the commit in this PR, the `zmqSvc().close_context()` was called at the wrong moment, namely in the `Messenger` destructor. When this was called at program exit, it caused dereferencing of a destroyed (and in the meantime randomly overwritten) singleton pointer, which caused a segfault on some systems. This bug probably went unnoticed before because it is a case of ""static destruction order fiasco"", which makes it build command, OS and probably weather dependent. This also makes the `RooMinimizer::cleanup()` calls after tests unnecessary; they were used as a workaround for the above problem, because by manually destroying all `Job`s (which were held alive inside `RooMinimizer::_theFitter`, which is deleted by `RooMinimizer::cleanup`), the `JobManager` was also destroyed (when all Jobs are destroyed, the JobManager self-destructs as well) before the `ZeroMQSvc` singleton is destroyed by the exiting of the program (in the phase of destroying static state), so the ""random"" destruction order problem mentioned above did not occur. Thanks to @Zeff020 for discovering the bug. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9399:766,test,tests,766,https://root.cern,https://github.com/root-project/root/pull/9399,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:; Fixes a bug that resulted in an infinite loop when calling TDirectoryFile::ls() with a regular expression as parameter. ## Changes or fixes:; When calling TDirectoryFile::ls() with a regular expression that not matches all keys in the file, the first not matching key resulted in an infinite loop because the increasement of the key-iterator in the last line of the loop was skipped by the continue statement. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13272:453,test,tested,453,https://root.cern,https://github.com/root-project/root/pull/13272,1,['test'],['tested']
Testability,"# This Pull request:; Fixes a bug when creating mixtures from repeating elements.; ## Changes or fixes:; When adding an element that was already defined in the composition of a mixture, the element was not properly incorporated by modifying the weight fraction of the previous element, but rather added as new element. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11272",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11293:340,test,tested,340,https://root.cern,https://github.com/root-project/root/pull/11293,1,['test'],['tested']
Testability,"# This Pull request:; Fixes creation of mixtures made of isomere elements having the same A and Z. The previous behavior was to compact such elements into a single one, which is wrong in the case of such mixtures. Printing mixture defined by elements calls now the Print method of the elements. ## Changes or fixes:; Fixes issue reported in the forum: https://root-forum.cern.ch/t/tgeomixture-cannot-distinguish-isomers/45451 . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8556:449,test,tested,449,https://root.cern,https://github.com/root-project/root/pull/8556,1,['test'],['tested']
Testability,# This Pull request:; Fixes material handling when writing GDML.; This should already have been part of PR 11060. ## Changes or fixes:; Output GDML understood by Geant4. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11895:191,test,tested,191,https://root.cern,https://github.com/root-project/root/pull/11895,1,['test'],['tested']
Testability,"# This Pull request:; Fixes setting axis limits when log scale is on. ## Changes or fixes:; In the following case without this fix limits to X axis wouldn't be applied:. ```C++; root [0] TCanvas *c = new TCanvas("""","""",800,800); (TCanvas *) 0x55ad27dfcd50; root [1] c->SetLogx(); root [2] double x[]={1,2}; (double [2]) { 1.0000000, 2.0000000 }; root [3] TGraph *g = new TGraph(2,x,x); (TGraph *) 0x55ad2953bdd0; root [4] g->GetXaxis()->SetLimits(0,100); root [5] g->Draw(); ```. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10815:53,log,log,53,https://root.cern,https://github.com/root-project/root/pull/10815,2,"['log', 'test']","['log', 'tested']"
Testability,"# This Pull request:; Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:; The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12178:663,test,tested,663,https://root.cern,https://github.com/root-project/root/pull/12178,1,['test'],['tested']
Testability,"# This Pull request:; Fixes the cmakeDIr undefined error that occurs on Windows ; ## Changes or fixes:; Added cmakeDir variable to cpt.py. ## Checklist:. - [X] tested changes locally: Ran --last-stable nsis with cpt.py, the error does not occur anymore; - [NA] updated the docs (if necessary). This PR fixes issue 426 (https://github.com/root-project/cling/issues/426)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10726:160,test,tested,160,https://root.cern,https://github.com/root-project/root/pull/10726,1,['test'],['tested']
Testability,"# This Pull request:; Fixes the verbose output flag for cpt.py; ## Changes or fixes:; Added cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON, then make -j (number of cores) install is called. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue mentioned in meta issue list for cpt.py 406 (https://github.com/root-project/cling/issues/406)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10738:203,test,tested,203,https://root.cern,https://github.com/root-project/root/pull/10738,1,['test'],['tested']
Testability,"# This Pull request:; Fixes validity of exported gdml file when the exported node is not the top geometry node. Adds error messages on gdml import errors, and deletes geometry manager in such case. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9310",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10044:219,test,tested,219,https://root.cern,https://github.com/root-project/root/pull/10044,1,['test'],['tested']
Testability,"# This Pull request:; Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:; Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14225",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14249:430,test,tested,430,https://root.cern,https://github.com/root-project/root/pull/14249,1,['test'],['tested']
Testability,# This Pull request:; Honors the overlap limit requested via the `CheckOverlaps` method when checking overlaps by sampling. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14675,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14839:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/14839,1,['test'],['tested']
Testability,"# This Pull request:; I did a local update of root/master with this, i was not able to compile locally on my mac for few other reasons. Suggestions on changes and checks to add welcome. . ## Changes or fixes:; Add the CDF calls from Math/ProbFunc to speed up the integrals of RooLandau PDFs. ; Code has been used in on-going analysis at LHCb, with significant speed-up . ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9539:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/9539,1,['test'],['tested']
Testability,"# This Pull request:; Implements fast conservative Sparse Matrix Multiplication (SpMM), i.e. C=A*B, where A, B and C are sparse matrices, with remarkable savings in operation count and memory usage. In the current implementation, the number of nonzeros in C is guessed as the number of rows in A containing at least a nonzero entry times the number of columns in B containing at least a nonzero entry. The matrix C is subsequently shrunk to delete entries corresponding to zero elements. This choice is far from optimal: for example, if A and B are diagonal matrices, C is initially allocated as fully dense even if it is diagonal too, with a tremendous waste of resources. In this PR, the number of nonzeros in C is computed in a conservative fashion (i.e. without dropping numerically zero entries in the result matrix C), prior to the matrix product computation itself. This is the best guess for the sparsity pattern of C without allocating extra memory. This PR results in a huge saving in execution time: for example, on randomly generated instances of size 5000 and 1% of non-zero elements, the average speedup with respect to the old implementation is 35x. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes [ROOT-2345](https://its.cern.ch/jira/browse/ROOT-2345)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15947:1186,test,tested,1186,https://root.cern,https://github.com/root-project/root/pull/15947,1,['test'],['tested']
Testability,# This Pull request:; In EveManager::ImportSceneChangeJson remove REveElements objects which indices have been marked as deleted on the server. . ## Changes or fixes:; Error messages in delete of server elements on importSceneChangeJson. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8571:260,test,tested,260,https://root.cern,https://github.com/root-project/root/pull/8571,1,['test'],['tested']
Testability,"# This Pull request:; In the GDML writing there is a confusion with the use of:; TGeoManager::fgDefaultUnits or TGeoManager::GetDefaultUnits(). -- It is used both to determine if the length unit string is defined as ""cm"" or ""mm"".; -- At the same time this variable is used by the elements and materials to discriminate; between the system of units. This confusion then ultimately leads to this bug:; -- If TGeo units are ON and the GDML should be written in the G4 convention (mm); automatically the densities and the atomic weights go wrong. If in TGeoManager.cxx line 302; TGeoManager::EDefaultUnits TGeoManager::fgDefaultUnits = TGeoManager::kG4Units;; is changed to:; TGeoManager::EDefaultUnits TGeoManager::fgDefaultUnits = TGeoManager::kRootUnits;. This fixes the problem, because the usage of TGeoManager::GetDefaultUnits(); when the elements/materials were created is then consistent with the GDML writing.; See:; https://root-forum.cern.ch/t/problem-with-elements-in-exported-gdml-files/46473/5. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8955:1048,test,tested,1048,https://root.cern,https://github.com/root-project/root/pull/8955,1,['test'],['tested']
Testability,# This Pull request:; Incorporates a total translation of graphics-tutorials into Python language for the; `IPython[]:` interpreter.; ## Changes or fixes:; It doesn't change or fix anything but adds new ways to re-read graphics-tutorials. ## Checklist:. - [yes] tested changes locally; - [yes] updated the docs (if necessary); - [yes] branch up to date with 'origin/master',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16029:262,test,tested,262,https://root.cern,https://github.com/root-project/root/pull/16029,1,['test'],['tested']
Testability,"# This Pull request:; Is a new version of #13705 (which is approved), recreated to pick the tip of the master of root as well as roottest. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13710:182,test,tested,182,https://root.cern,https://github.com/root-project/root/pull/13710,1,['test'],['tested']
Testability,# This Pull request:; It is an attempt to implement Mollweide projection for drawing 2D histograms in standard ROOT (and web-based ROOT). ## Changes or fixes:; I implemented a version of Mollweide projection today based on the litterature. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes a missing features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13211:261,test,tested,261,https://root.cern,https://github.com/root-project/root/pull/13211,1,['test'],['tested']
Testability,# This Pull request:; It is an attempt to implement Mollweide projection for drawing 2D histograms in standard ROOT (and web-based ROOT).; https://github.com/root-project/root/pull/13211. ## Changes or fixes:; I implemented a version of Mollweide projection today based on the litterature. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes a missing features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13212:311,test,tested,311,https://root.cern,https://github.com/root-project/root/pull/13212,2,['test'],['tested']
Testability,"# This Pull request:; Just a draft PR to test for performance issues/failing tests. . This fixes the failing python enum tests like:; - `roottest-python-cpp-cpp`; - `roottest-python-cmdLineUtils-ROOT_8197`. A memory leak was fixed in LLVM commit [142f270](https://github.com/devajithvs/llvm-project-root/commit/142f270c279f2576e4618fc0d1121181c7531fdf), which caused our tests to fail as they relied on the previous behavior. If there are no serious performance issues/failure, we can clean up and try to upstream this patch to cppyy. Currently a temporary fix https://github.com/devajithvs/root/commit/de5d1413e07170e396ac51d982c0844e4f548f4b is used to fix the failing tests for LLVM18. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16000:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/16000,6,['test'],"['test', 'tested', 'tests']"
Testability,# This Pull request:; Just updates the banner shown when booting the command line interpreter. ## Changes or fixes:. ## Checklist:. - [V] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13756:138,test,tested,138,https://root.cern,https://github.com/root-project/root/pull/13756,1,['test'],['tested']
Testability,"# This Pull request:; Make changes in the class AdaptiveIntegratorMultiDim.; ## Changes or fixes:; Delete obscure conditions on evaluating integration status. The mentioned conditions are absent in the original RadMul algorithm. The problem with these conditions is in that they compare some arbitrary hard-coded constants with the absolute value of the integrated function. This lead to incorrect integration of some complicated function. Moreover, if one multiply integrand by some arbitrary factor and then divide the integral by it, then time and accuracy integration will change, but it shouldn't be so. For example, if integrated function return result of order 10^-38, then sometimes integration gives nonsense result with very low number of integrated function calls. The parameter RelAccuracy is not accounted for by the algorithm in this case (return result with some lower accuracy). But if the return value of integrated function multiply by 10^38 and then multiply the result of integration by 10^-38 then the integration gives the correct result with appropriate number of integrand calls. The parameter RelAccuracy then does work in this case. All this is because of mentioned hard-coded constants. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11826:1235,test,tested,1235,https://root.cern,https://github.com/root-project/root/pull/11826,1,['test'],['tested']
Testability,"# This Pull request:; Makes changes to ROOT v7 in order to comply with the API for DAOS 2.0.x, affecting the libraries `RPageStorageDaos`, `RDaos` and `libdaos_mock`, as well as the `ntuple_storage_daos` test suite. ## Changes or fixes:; - As of DAOS 2.0, pool service replica ranks are not longer specified in DAOS URIs. Thus, `daos_pool_connect` now forgoes the `svc_rank_list` argument.; - Container addresses follow the simplified pattern `daos://($pool)/($container)`. ; - `RPageStorageDaos` consequently drops parsing enforcement of the previous pattern.; - DAOS 2.0 introduced support for creating pools and containers from a label that is then hashed internally as a UUID. Pool and containers are now identifiable by user-provided labels of up to 127 characters (alphanumeric, colon, period, hyphen or underscore) or by 36-character UUIDs. Labels that match a UUID pattern are explicitly forbidden. ; - `RDaos` now only supports container creation from user-supplied labels (via `daos_cont_create_with_label`), due to deprecated usage of `daos_cont_create` with user-supplied UUIDs. However, existing containers may still be opened by their UUIDs. ; - `RPool` and `RContainer` maintain a copy of valid labels (when supplied) and UUIDs (after successfully opening pools and containers respectively); - Generation of object IDs in `RDaos`: new redundancy, sharding and object type flags; `daos_obj_generate_oid` replaces `daos_obj_generate_id`. ; - The `libdaos_mock` library is updated in lockstep.; - RNTuple backend testing is updated to follow the DAOS 2.0 URI pattern, using labels for default test pool and containers. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720:204,test,test,204,https://root.cern,https://github.com/root-project/root/pull/10720,4,['test'],"['test', 'tested', 'testing']"
Testability,# This Pull request:; Makes non-breaking changes to the existing code to make cling similar to upstream clang-repl. The idea is to make more changes in a similar fashion and completely swap out certain functions when they are similar enough.; ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374:286,test,tested,286,https://root.cern,https://github.com/root-project/root/pull/15374,1,['test'],['tested']
Testability,"# This Pull request:; Many years ago, when I originially wrote the CholeskyDecompGenDim class, I argued that the class does not need copy constructor or assignment operator implementations because nobody would ever want to copy a decomposition. Well, it turns out that in today's world, one wants to be able to move (and potentially also copy) CholeskyDecompGenDim, so you can put it into an std::optional, for example, so you can return a std::nullopt if the decomposition state is not okay, and a decomposition otherwise. The code as it was up to this MR does not behave correctly if a CholeskyDecompGenDim is copied, moved or assigned. In the old code, if you copy or move a CholeskyDecompGenDim, you're likely to read garbage from the decomposition because of a potential for use-after-free, and/or get a double free on destruction of the object that goes out of scope later. ## Changes or fixes:; This patch fixes this shortcoming by using a std::unique_ptr<F[]> to hold the allocated memory. As a result, we can use defaulted destructor, move assignment operators and constructors, and default constructors, and just need to implement a specialized copy constructor and assignment operator. This change should be transparent to existing code, and enable new use cases, without sacrificing performance. (Note: CholeskyDecomp itself does not need to be fixed because the size of the matrix is known at compile time, and storage is statically allocated.). ## Checklist:. - tested changes locally: yes; - updated the docs (in-line documentation comments have been updated, but no changes are visible to callers in existing code that did not trigger the bug that this MR fixes)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14399:1476,test,tested,1476,https://root.cern,https://github.com/root-project/root/pull/14399,1,['test'],['tested']
Testability,# This Pull request:; Migration from RooAbsCollection and RooLinkedList legacy iterators to range-based loops. ## Changes or fixes:; PR includes migration of all the files from ; * roofit/roofit; * roofit/roostats. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #8777,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10171:236,test,tested,236,https://root.cern,https://github.com/root-project/root/pull/10171,1,['test'],['tested']
Testability,"# This Pull request:; Move call to set the export precision to the lowest level of WriteGDML. ## Changes or fixes:; At the lower level interface setting the precision was impossible,. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11894:205,test,tested,205,https://root.cern,https://github.com/root-project/root/pull/11894,1,['test'],['tested']
Testability,"# This Pull request:; Moves some code out of the parallel tasks in RNTupleMerger (particularly, `ThrowOnError` which is not necessarily happily parallelizable).; It also avoids spawning the parallel tasks if not needed, i.e. if we don't need to change the compression of the pages. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16073:303,test,tested,303,https://root.cern,https://github.com/root-project/root/pull/16073,1,['test'],['tested']
Testability,# This Pull request:; Moves the RSlotStack implementation from tree/dataframe/ to core/imt/. ## Changes or fixes:; Makes RSlotStack useable without requiring the whole of RDataFrame as a dependency. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # N/A,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11249:220,test,tested,220,https://root.cern,https://github.com/root-project/root/pull/11249,1,['test'],['tested']
Testability,"# This Pull request:; Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:; Issue #8260. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14670:395,test,tested,395,https://root.cern,https://github.com/root-project/root/pull/14670,1,['test'],['tested']
Testability,# This Pull request:; Ports fixes in TGeoMaterial from master to v6-24. ## Changes or fixes:; All issues currently fixed in master. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR is related to #11272,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11303:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/11303,1,['test'],['tested']
Testability,"# This Pull request:; ProgressHelper is a class that offers callback functions for RDataFrame,; and can compute and print event statistics and a progress bar. With a change like this:; ```diff; --- a/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C; +++ b/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C; @@ -28,6 +28,7 @@; #include ""TLatex.h""; #include ""Math/Vector4D.h""; #include ""TStyle.h""; +#include ""ROOT/RDFHelpers.hxx""; ; using namespace ROOT::VecOps;; ; @@ -52,6 +53,9 @@ void df102_NanoAODDimuonAnalysis(); // Request cut-flow report; auto report = df_mass.Report();; ; + ROOT::RDF::ProgressHelper progress(10000, ROOT::RDF::CountEvents(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""));; + h.OnPartialResultSlot(10000, [&progress](unsigned int slot, TH1D& histo){ progress(slot, histo); });; +; // Produce plot; gStyle->SetOptStat(0); gStyle->SetTextFont(42);; auto c = new TCanvas(""c"", """", 800, 700);; ```. one gets:; `bin/root -q ~/code/root-src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C+O`; ![image](https://user-images.githubusercontent.com/16205615/125669114-03ebfeb1-96e4-4dcc-afd9-b6690aafb4a1.png). ## TODO; - [ ] Write helpers that integrate this into the head node of RDF, preferably with a single line of code.; - [ ] *Optional*: Finalise callbacks for RDF, since a carriage return is always missing. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8675:1434,test,tested,1434,https://root.cern,https://github.com/root-project/root/pull/8675,1,['test'],['tested']
Testability,# This Pull request:; Propagate user- and system-extensions in TGeoAssemblyVolumes to cloned entities.; This was missing in the sub-class of TGeoVolume and then tends to fail on; re-alignments using TGeoPhysicalNode. ## Changes or fixes:; Buggy volume clones if the volume has user extensions. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15905:316,test,tested,316,https://root.cern,https://github.com/root-project/root/pull/15905,1,['test'],['tested']
